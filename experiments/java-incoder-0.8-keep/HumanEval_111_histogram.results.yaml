name: HumanEval_111_histogram
language: java
results:
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> map = new HashMap<String,Integer>();\n\
    \        // Initialize a counter for each letter\n        String[] chars = s.split(\"\
    \ \");\n        chars.stream().filter(x -> x.matches(\"\\\\p{Lower}+\")).forEachOrdered(x\
    \ -> {\n            Integer currentCount = map.get(x);\n            if (currentCount\
    \ == null) {\n                currentCount = 1;\n            } else {\n      \
    \          currentCount++;\n            }\n            map.put(x, currentCount);\n\
    \        });\n        return map;\nreturn new HashMap<String,Integer>();\n   \
    \ }\n    public static void main(String[] args) {\n    assert(histogram((\"a b\
    \ b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7bb_ttrn.java:21: error: cannot find symbol\n        String[] chars\
    \ = s.split(\" \");\n                         ^\n  symbol:   variable s\n  location:\
    \ class Problem\n/tmp/tmp7bb_ttrn.java:22: error: cannot find symbol\n       \
    \ chars.stream().filter(x -> x.matches(\"\\\\p{Lower}+\")).forEachOrdered(x ->\
    \ {\n             ^\n  symbol:   method stream()\n  location: variable chars of\
    \ type String[]\n/tmp/tmp7bb_ttrn.java:35: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                         ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmp7bb_ttrn.java:36:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n                  \
    \                                                         ^\n  symbol:   method\
    \ of(String,int,String,int)\n  location: interface Map\n/tmp/tmp7bb_ttrn.java:37:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmp7bb_ttrn.java:38: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmp7bb_ttrn.java:39: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmp7bb_ttrn.java:40: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Int"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> result = new HashMap<>();\n\
    \        // Split the string on space\n        String[] words = test.split(\"\
    \ \");\n        // Iterate over each word\n        for(String word : words) {\n\
    \            // If result already contains word, increase its count\n        \
    \    if(result.containsKey(word)) {\n                Integer count = result.get(word);\n\
    \                result.put(word, count + 1);\n            }\n            // Otherwise,\
    \ this is a new word, so initialize a new entry in the result map.\n         \
    \   else {\n                result.put(word, 1);\n            }\n        }\n \
    \       return result;\nreturn new HashMap<String,Integer>();\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmprm6tzp_0.java:38: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                         ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmprm6tzp_0.java:39:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n                  \
    \                                                         ^\n  symbol:   method\
    \ of(String,int,String,int)\n  location: interface Map\n/tmp/tmprm6tzp_0.java:40:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmprm6tzp_0.java:41: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmprm6tzp_0.java:42: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmprm6tzp_0.java:43: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \     ^\n  symbol:   method of(String,int,String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmprm6tzp_0.java:45: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 1)))));\n            \
    \                                            "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> histo = new HashMap<>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String temp =\
    \ test.substring(i, i+1);\n            if (histo.containsKey(temp)) histo.replace(temp,\
    \ histo.get(temp)+1);\n            else histo.put(temp, 1);\n        }\n     \
    \   return histo;\nreturn new HashMap<String,Integer>();\n    }\n    public static\
    \ void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmplqdllcul.java:29: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                         ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmplqdllcul.java:30:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n                  \
    \                                                         ^\n  symbol:   method\
    \ of(String,int,String,int)\n  location: interface Map\n/tmp/tmplqdllcul.java:31:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmplqdllcul.java:32: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmplqdllcul.java:33: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmplqdllcul.java:34: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \     ^\n  symbol:   method of(String,int,String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmplqdllcul.java:36: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 1)))));\n            \
    \                                            "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> result = new HashMap<>();\n\
    \        String[] s = test.split(\" \");\n        for (String s1 : s) {\n    \
    \        Integer n = result.containsKey(s1) ? result.get(s1) : 0;\n          \
    \  result.put(s1,n+1);\n        }\n        return result;\nreturn new HashMap<String,Integer>();\n\
    \    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7813eytd.java:29: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                         ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmp7813eytd.java:30:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n                  \
    \                                                         ^\n  symbol:   method\
    \ of(String,int,String,int)\n  location: interface Map\n/tmp/tmp7813eytd.java:31:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmp7813eytd.java:32: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmp7813eytd.java:33: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmp7813eytd.java:34: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \     ^\n  symbol:   method of(String,int,String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmp7813eytd.java:36: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 1)))));\n            \
    \                                            "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> histogram = new HashMap<>();\n\
    \n        for (int i = 0; i < test.length(); i++) {\n            char c = test.charAt(i);\n\
    \            Integer count = histogram.get(c);\n            if (count == null)\
    \ {\n                count = 0;\n            }\n            histogram.put(c, count+1);\n\
    \        }\n        return histogram;\nreturn new HashMap<String,Integer>();\n\
    \    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfdejjz2t.java:27: error: no suitable method found for put(char,int)\n\
    \            histogram.put(c, count+1);\n                     ^\n    method Map.put(String,Integer)\
    \ is not applicable\n      (argument mismatch; char cannot be converted to String)\n\
    \    method AbstractMap.put(String,Integer) is not applicable\n      (argument\
    \ mismatch; char cannot be converted to String)\n    method HashMap.put(String,Integer)\
    \ is not applicable\n      (argument mismatch; char cannot be converted to String)\n\
    /tmp/tmpfdejjz2t.java:33: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                         ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmpfdejjz2t.java:34:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n                  \
    \                                                         ^\n  symbol:   method\
    \ of(String,int,String,int)\n  location: interface Map\n/tmp/tmpfdejjz2t.java:35:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpfdejjz2t.java:36: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpfdejjz2t.java:37: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmp"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        if (test.length() == 0) return new HashMap<String,Integer>();\n\
    \        HashMap<String,Integer> map = new HashMap<String,Integer>();\n      \
    \  String[] splitted = test.split(\" \");\n        for (String s : splitted) {\n\
    \            int count = 0;\n            if (map.containsKey(s)) {\n         \
    \       count = map.get(s);\n            }\n            else {\n             \
    \   count = 1;\n            }\n            map.put(s, count+1);\n        }\n \
    \       return map;\nreturn new HashMap<String,Integer>();\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpk01jlfas.java:36: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                         ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmpk01jlfas.java:37:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n                  \
    \                                                         ^\n  symbol:   method\
    \ of(String,int,String,int)\n  location: interface Map\n/tmp/tmpk01jlfas.java:38:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpk01jlfas.java:39: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpk01jlfas.java:40: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmpk01jlfas.java:41: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \     ^\n  symbol:   method of(String,int,String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmpk01jlfas.java:43: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 1)))));\n            \
    \                                            "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> map = new HashMap<>();\n\
    \        String[] split = test.split(\" \");\n        for (int i = 0; i < split.length;\
    \ i++) {\n            if (map.containsKey(split[i])) {\n                map.put(split[i],\
    \ map.get(split[i]) + 1);\n            } else {\n                map.put(split[i],\
    \ 1);\n            }\n        }\n        return map;\nreturn new HashMap<String,Integer>();\n\
    \    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpt6gn1w22.java:32: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                         ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmpt6gn1w22.java:33:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n                  \
    \                                                         ^\n  symbol:   method\
    \ of(String,int,String,int)\n  location: interface Map\n/tmp/tmpt6gn1w22.java:34:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpt6gn1w22.java:35: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpt6gn1w22.java:36: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmpt6gn1w22.java:37: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \     ^\n  symbol:   method of(String,int,String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmpt6gn1w22.java:39: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 1)))));\n            \
    \                                            "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> map = new HashMap<>();\n\
    \        // Split the test string into letters.\n        // Use stream for better\
    \ readability of code\n        List<String> letters = Arrays.stream(test.split(\"\
    \ \")).collect(Collectors.toList());\n        // Add every letter to map and increase\
    \ count\n        letters.forEach(l -> map.put(l, map.getOrDefault(l, 0) + 1));\n\
    \        return map;\nreturn new HashMap<String,Integer>();\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8fl90xdt.java:29: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                         ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmp8fl90xdt.java:30:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n                  \
    \                                                         ^\n  symbol:   method\
    \ of(String,int,String,int)\n  location: interface Map\n/tmp/tmp8fl90xdt.java:31:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmp8fl90xdt.java:32: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmp8fl90xdt.java:33: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmp8fl90xdt.java:34: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \     ^\n  symbol:   method of(String,int,String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmp8fl90xdt.java:36: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 1)))));\n            \
    \                                            "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        // Write your code here\n        HashMap<String,Integer>\
    \ map=new HashMap<>();\n        String[] split=test.split(\" \");\n        for\
    \ (String a:split){\n            if (map.containsKey(a)){\n                map.put(a,map.get(a)+1);\n\
    \            }\n            else{\n                map.put(a,1);\n           \
    \ }\n        }\n        return map;\nreturn new HashMap<String,Integer>();\n \
    \   }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpcbk1xjpq.java:34: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                         ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmpcbk1xjpq.java:35:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n                  \
    \                                                         ^\n  symbol:   method\
    \ of(String,int,String,int)\n  location: interface Map\n/tmp/tmpcbk1xjpq.java:36:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpcbk1xjpq.java:37: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpcbk1xjpq.java:38: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmpcbk1xjpq.java:39: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \     ^\n  symbol:   method of(String,int,String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmpcbk1xjpq.java:41: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 1)))));\n            \
    \                                            "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> result=new HashMap<String,Integer>();\n\
    \        String[] strings=test.split(\" \");\n        for (String s:strings) {\n\
    \            if (!result.containsKey(s)) {\n                result.put(s, 1);\n\
    \            } else {\n                int count=result.get(s);\n            \
    \    result.put(s, count+1);\n            }\n        }\n        return result;\n\
    return new HashMap<String,Integer>();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2pp32ibw.java:33: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                         ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmp2pp32ibw.java:34:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n                  \
    \                                                         ^\n  symbol:   method\
    \ of(String,int,String,int)\n  location: interface Map\n/tmp/tmp2pp32ibw.java:35:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmp2pp32ibw.java:36: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmp2pp32ibw.java:37: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmp2pp32ibw.java:38: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \     ^\n  symbol:   method of(String,int,String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmp2pp32ibw.java:40: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 1)))));\n            \
    \                                            "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hmap = new HashMap<String,Integer>();\n\
    \        // Split the input string on spaces to get an array of distinct letters\n\
    \        String[] letters = test.split(\" \");\n        // Loop through the letters\n\
    \        for (String letter : letters) {\n            // If the letter hasn't\
    \ already been added to the map, add it.\n            if (!hmap.containsKey(letter))\
    \ {\n                hmap.put(letter,1);\n            } else {\n             \
    \   // If the letter has already been added to the map, add its occurrence\n \
    \               hmap.put(letter, hmap.get(letter) + 1);\n            }\n     \
    \   }\n        // Return the result as a map\n        return hmap;\nreturn new\
    \ HashMap<String,Integer>();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzn4ooszk.java:37: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                         ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmpzn4ooszk.java:38:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n                  \
    \                                                         ^\n  symbol:   method\
    \ of(String,int,String,int)\n  location: interface Map\n/tmp/tmpzn4ooszk.java:39:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpzn4ooszk.java:40: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpzn4ooszk.java:41: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmpzn4ooszk.java:42: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \     ^\n  symbol:   method of(String,int,String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmpzn4ooszk.java:44: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 1)))));\n            \
    \                                            "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> map = new HashMap<>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            Integer count = map.get(word);\n            map.put(word, count\
    \ == null ? 1 : count + 1);\n        }\n        return map;\nreturn new HashMap<String,Integer>();\n\
    \    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpe1_tdl4v.java:29: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                         ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmpe1_tdl4v.java:30:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n                  \
    \                                                         ^\n  symbol:   method\
    \ of(String,int,String,int)\n  location: interface Map\n/tmp/tmpe1_tdl4v.java:31:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpe1_tdl4v.java:32: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpe1_tdl4v.java:33: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmpe1_tdl4v.java:34: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \     ^\n  symbol:   method of(String,int,String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmpe1_tdl4v.java:36: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 1)))));\n            \
    \                                            "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> map = new HashMap<String,Integer>();\n\
    \        for (String s: test.split(\" \"))\n            map.put(s, map.getOrDefault(s,0)+1);\n\
    \        return map;\nreturn new HashMap<String,Integer>();\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpgqjnrl4v.java:26: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                         ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmpgqjnrl4v.java:27:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n                  \
    \                                                         ^\n  symbol:   method\
    \ of(String,int,String,int)\n  location: interface Map\n/tmp/tmpgqjnrl4v.java:28:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpgqjnrl4v.java:29: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpgqjnrl4v.java:30: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmpgqjnrl4v.java:31: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \     ^\n  symbol:   method of(String,int,String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmpgqjnrl4v.java:33: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 1)))));\n            \
    \                                            "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> letterCounts = new\
    \ HashMap<String,Integer>();\n\n        for (String letter : test.toLowerCase().split(\"\
    \ \")) {\n            int count = letterCounts.getOrDefault(letter,0);\n     \
    \       letterCounts.put(letter,count+1);\n        }\n        return letterCounts;\n\
    return new HashMap<String,Integer>();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp152fd8bz.java:29: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                         ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmp152fd8bz.java:30:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n                  \
    \                                                         ^\n  symbol:   method\
    \ of(String,int,String,int)\n  location: interface Map\n/tmp/tmp152fd8bz.java:31:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmp152fd8bz.java:32: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmp152fd8bz.java:33: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmp152fd8bz.java:34: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \     ^\n  symbol:   method of(String,int,String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmp152fd8bz.java:36: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 1)))));\n            \
    \                                            "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> map = new HashMap<>();\n\
    \        for(int i =0; i < test.length(); i++) {\n            String key = test.substring(i,\
    \ i+1);\n            Integer count = new Integer(map.getOrDefault(key, 0) + 1);\n\
    \            map.put(key, count);\n        }\n        return map;\nreturn new\
    \ HashMap<String,Integer>();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpyw_we9pc.java:29: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                         ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmpyw_we9pc.java:30:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n                  \
    \                                                         ^\n  symbol:   method\
    \ of(String,int,String,int)\n  location: interface Map\n/tmp/tmpyw_we9pc.java:31:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpyw_we9pc.java:32: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpyw_we9pc.java:33: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmpyw_we9pc.java:34: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \     ^\n  symbol:   method of(String,int,String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmpyw_we9pc.java:36: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 1)))));\n            \
    \                                            "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> map = new HashMap<String,Integer>();\n\
    \        for(String s : test.split(\" \")) {\n            if(!map.containsKey(s))\n\
    \                map.put(s,1);\n            else\n                map.put(s,map.get(s)+1);\n\
    \        }\n        return map;\nreturn new HashMap<String,Integer>();\n    }\n\
    \    public static void main(String[] args) {\n    assert(histogram((\"a b b a\"\
    )).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpgy5m4lep.java:30: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                         ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmpgy5m4lep.java:31:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n                  \
    \                                                         ^\n  symbol:   method\
    \ of(String,int,String,int)\n  location: interface Map\n/tmp/tmpgy5m4lep.java:32:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpgy5m4lep.java:33: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpgy5m4lep.java:34: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmpgy5m4lep.java:35: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \     ^\n  symbol:   method of(String,int,String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmpgy5m4lep.java:37: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 1)))));\n            \
    \                                            "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> result = new HashMap<String,Integer>();\n\
    \        if (test==null || test.trim().isEmpty()) {\n            return result;\n\
    \        }\n        String[] tokens = test.trim().split(\" \");\n        Arrays.sort(tokens);\n\
    \        for(String t : tokens) {\n            int count = Collections.frequency(Arrays.asList(test.split(\"\
    \ \")),t);\n            result.put(t,count);\n        }\n        return result;\n\
    return new HashMap<String,Integer>();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5z0z_ub7.java:33: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                         ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmp5z0z_ub7.java:34:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n                  \
    \                                                         ^\n  symbol:   method\
    \ of(String,int,String,int)\n  location: interface Map\n/tmp/tmp5z0z_ub7.java:35:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmp5z0z_ub7.java:36: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmp5z0z_ub7.java:37: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmp5z0z_ub7.java:38: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \     ^\n  symbol:   method of(String,int,String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmp5z0z_ub7.java:40: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 1)))));\n            \
    \                                            "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> histogram = new HashMap<String,Integer>();\n\
    \        String string[] = test.split(\" \");\n        for (String s : string)\
    \ {\n            String key = getLetterKey(s);\n            Integer count = histogram.get(key);\n\
    \            if (count == null) {\n                count = 0;\n            }\n\
    \            histogram.put(key, count+1);\n        }\n        return histogram;\n\
    return new HashMap<String,Integer>();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpeo8i96f7.java:22: error: cannot find symbol\n            String\
    \ key = getLetterKey(s);\n                         ^\n  symbol:   method getLetterKey(String)\n\
    \  location: class Problem\n/tmp/tmpeo8i96f7.java:33: error: cannot find symbol\n\
    \    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n                                                     \
    \                    ^\n  symbol:   method of(String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmpeo8i96f7.java:34: error: cannot find symbol\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                           ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmpeo8i96f7.java:35:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpeo8i96f7.java:36: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpeo8i96f7.java:37: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmpeo8i96f7.java:38: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \     ^\n  symbol:   method of(String,int,String,int,String,int)\n  location:\
    \ interface Map\n/tmp/"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> histogram = new HashMap<String,Integer>();\n\
    \        if (test.isEmpty()) \n            return histogram;\n\n        for (char\
    \ letter : test.toCharArray()) {\n            if (histogram.containsKey(letter))\
    \ {\n                histogram.put(letter, histogram.get(letter) + 1);\n     \
    \       } else {\n                histogram.put(letter, 1);\n            }\n \
    \       }\n        return histogram;\nreturn new HashMap<String,Integer>();\n\
    \    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5xp1spxx.java:25: error: no suitable method found for put(char,int)\n\
    \                histogram.put(letter, histogram.get(letter) + 1);\n         \
    \                ^\n    method Map.put(String,Integer) is not applicable\n   \
    \   (argument mismatch; char cannot be converted to String)\n    method AbstractMap.put(String,Integer)\
    \ is not applicable\n      (argument mismatch; char cannot be converted to String)\n\
    \    method HashMap.put(String,Integer) is not applicable\n      (argument mismatch;\
    \ char cannot be converted to String)\n/tmp/tmp5xp1spxx.java:27: error: no suitable\
    \ method found for put(char,int)\n                histogram.put(letter, 1);\n\
    \                         ^\n    method Map.put(String,Integer) is not applicable\n\
    \      (argument mismatch; char cannot be converted to String)\n    method AbstractMap.put(String,Integer)\
    \ is not applicable\n      (argument mismatch; char cannot be converted to String)\n\
    \    method HashMap.put(String,Integer) is not applicable\n      (argument mismatch;\
    \ char cannot be converted to String)\n/tmp/tmp5xp1spxx.java:34: error: cannot\
    \ find symbol\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n                                                     \
    \                    ^\n  symbol:   method of(String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmp5xp1spxx.java:35: error: cannot find symbol\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                           ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmp5xp1spxx.java:36:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmp5xp1spxx.java:37: error: cannot find symbol\n\
    \    assert(hist"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> histogram = new HashMap<String,Integer>();\n\
    \        for (char c : test.toCharArray()) {\n            String key = \"\"+c;\n\
    \            if (!histogram.containsKey(key))\n                histogram.put(key,\
    \ 1);\n            else\n                histogram.put(key, histogram.get(key)\
    \ + 1);\n        }\n        return histogram;\nreturn new HashMap<String,Integer>();\n\
    \    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3f5nmjxf.java:31: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                         ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmp3f5nmjxf.java:32:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n                  \
    \                                                         ^\n  symbol:   method\
    \ of(String,int,String,int)\n  location: interface Map\n/tmp/tmp3f5nmjxf.java:33:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmp3f5nmjxf.java:34: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmp3f5nmjxf.java:35: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmp3f5nmjxf.java:36: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \     ^\n  symbol:   method of(String,int,String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmp3f5nmjxf.java:38: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 1)))));\n            \
    \                                            "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> map = new HashMap<>();\n\
    \        String[] strArray = test.split(\" \");\n        for (int i = 0; i < strArray.length;\
    \ i++) {\n            String s = strArray[i];\n            Integer count = (map.containsKey(s))\
    \ ? map.get(s) : 0;\n            map.put(s, count + 1);\n        }\n        return\
    \ map;\nreturn new HashMap<String,Integer>();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0ckg8dsj.java:30: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                         ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmp0ckg8dsj.java:31:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n                  \
    \                                                         ^\n  symbol:   method\
    \ of(String,int,String,int)\n  location: interface Map\n/tmp/tmp0ckg8dsj.java:32:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmp0ckg8dsj.java:33: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmp0ckg8dsj.java:34: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmp0ckg8dsj.java:35: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \     ^\n  symbol:   method of(String,int,String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmp0ckg8dsj.java:37: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 1)))));\n            \
    \                                            "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        // Step 1: Count the letters in test.\n  \
    \      HashMap<String,Integer> histogram = new HashMap<>();\n        char[] letters\
    \ = test.toCharArray();\n        for (char letter : letters) {\n            if\
    \ (histogram.containsKey(letter)) {\n                histogram.put(letter, histogram.get(letter)\
    \ + 1);\n            } else {\n                histogram.put(letter, 1);\n   \
    \         }\n        }\n        // Step 2: Sort the dictionary by frequency and\
    \ return the top 1.\n        List<Map.Entry<String,Integer>> entries = histogram.entrySet().stream().sorted(Map.Entry.comparingByValue().reversed()).limit(1).collect(Collectors.toList());\n\
    \        return entries.isEmpty() ? new HashMap<String,Integer>() : entries.get(0);\n\
    return new HashMap<String,Integer>();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2l_rest9.java:24: error: no suitable method found for put(char,int)\n\
    \                histogram.put(letter, histogram.get(letter) + 1);\n         \
    \                ^\n    method Map.put(String,Integer) is not applicable\n   \
    \   (argument mismatch; char cannot be converted to String)\n    method AbstractMap.put(String,Integer)\
    \ is not applicable\n      (argument mismatch; char cannot be converted to String)\n\
    \    method HashMap.put(String,Integer) is not applicable\n      (argument mismatch;\
    \ char cannot be converted to String)\n/tmp/tmp2l_rest9.java:26: error: no suitable\
    \ method found for put(char,int)\n                histogram.put(letter, 1);\n\
    \                         ^\n    method Map.put(String,Integer) is not applicable\n\
    \      (argument mismatch; char cannot be converted to String)\n    method AbstractMap.put(String,Integer)\
    \ is not applicable\n      (argument mismatch; char cannot be converted to String)\n\
    \    method HashMap.put(String,Integer) is not applicable\n      (argument mismatch;\
    \ char cannot be converted to String)\n/tmp/tmp2l_rest9.java:30: error: incompatible\
    \ types: Comparator<Entry<Object,V>> cannot be converted to Comparator<? super\
    \ Entry<String,Integer>>\n        List<Map.Entry<String,Integer>> entries = histogram.entrySet().stream().sorted(Map.Entry.comparingByValue().reversed()).limit(1).collect(Collectors.toList());\n\
    \                                                                            \
    \                                                ^\n  where V is a type-variable:\n\
    \    V extends Comparable<? super V>\n/tmp/tmp2l_rest9.java:31: error: incompatible\
    \ types: bad type in conditional expression\n        return entries.isEmpty()\
    \ ? new HashMap<String,Integer>() : entries.get(0);\n                        \
    \                                                      ^\n    Entry<String,Integer>\
    \ cannot be converted to HashMap<String,Integer>\n/tmp/tmp2l_rest9.java:35: error:\
    \ cannot find symbol\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n                                         "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> count = new HashMap<String,Integer>();\n\
    \        \n        StringTokenizer tokens = new StringTokenizer(test);\n     \
    \   while (tokens.hasMoreTokens()) {\n            String token = tokens.nextToken();\n\
    \            Integer count = count.get(token);\n            count.put(token, count==null?1:count+1);\n\
    \        }\n        return count;\nreturn new HashMap<String,Integer>();\n   \
    \ }\n    public static void main(String[] args) {\n    assert(histogram((\"a b\
    \ b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpb6l6un2s.java:24: error: variable count is already defined in method\
    \ histogram(String)\n            Integer count = count.get(token);\n         \
    \           ^\n/tmp/tmpb6l6un2s.java:24: error: cannot find symbol\n         \
    \   Integer count = count.get(token);\n                                 ^\n  symbol:\
    \   method get(String)\n  location: variable count of type Integer\n/tmp/tmpb6l6un2s.java:25:\
    \ error: cannot find symbol\n            count.put(token, count==null?1:count+1);\n\
    \                 ^\n  symbol:   method put(String,int)\n  location: variable\
    \ count of type Integer\n/tmp/tmpb6l6un2s.java:31: error: cannot find symbol\n\
    \    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n                                                     \
    \                    ^\n  symbol:   method of(String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmpb6l6un2s.java:32: error: cannot find symbol\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                           ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmpb6l6un2s.java:33:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpb6l6un2s.java:34: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpb6l6un2s.java:35: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \     "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> histogram = new HashMap<String,Integer>();\n\
    \        // Initialize histogram with empty strings\n        for (String letter\
    \ : test.split(\" \"))\n            histogram.put(letter, new Integer(0));\n \
    \       // Count the letters\n        for (String letter : test.split(\" \"))\n\
    \            histogram.merge(letter, 1, Integer::sum);\n        return histogram;\n\
    return new HashMap<String,Integer>();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpv3fs3jsi.java:30: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                         ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmpv3fs3jsi.java:31:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n                  \
    \                                                         ^\n  symbol:   method\
    \ of(String,int,String,int)\n  location: interface Map\n/tmp/tmpv3fs3jsi.java:32:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpv3fs3jsi.java:33: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpv3fs3jsi.java:34: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmpv3fs3jsi.java:35: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \     ^\n  symbol:   method of(String,int,String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmpv3fs3jsi.java:37: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 1)))));\n            \
    \                                            "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> map = new HashMap<String,Integer>();\n\
    \        for(int i=0;i<test.length();i++)\n        {\n            if(map.containsKey(test.charAt(i)))\n\
    \            {\n                map.put(test.charAt(i),map.get(test.charAt(i))\
    \ + 1);\n            }\n            else\n            {\n                map.put(test.charAt(i),1);\n\
    \            }\n        }\n        return map;\nreturn new HashMap<String,Integer>();\n\
    \    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpziyl9it7.java:24: error: no suitable method found for put(char,int)\n\
    \                map.put(test.charAt(i),map.get(test.charAt(i)) + 1);\n      \
    \             ^\n    method Map.put(String,Integer) is not applicable\n      (argument\
    \ mismatch; char cannot be converted to String)\n    method AbstractMap.put(String,Integer)\
    \ is not applicable\n      (argument mismatch; char cannot be converted to String)\n\
    \    method HashMap.put(String,Integer) is not applicable\n      (argument mismatch;\
    \ char cannot be converted to String)\n/tmp/tmpziyl9it7.java:28: error: no suitable\
    \ method found for put(char,int)\n                map.put(test.charAt(i),1);\n\
    \                   ^\n    method Map.put(String,Integer) is not applicable\n\
    \      (argument mismatch; char cannot be converted to String)\n    method AbstractMap.put(String,Integer)\
    \ is not applicable\n      (argument mismatch; char cannot be converted to String)\n\
    \    method HashMap.put(String,Integer) is not applicable\n      (argument mismatch;\
    \ char cannot be converted to String)\n/tmp/tmpziyl9it7.java:35: error: cannot\
    \ find symbol\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n                                                     \
    \                    ^\n  symbol:   method of(String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmpziyl9it7.java:36: error: cannot find symbol\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                           ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmpziyl9it7.java:37:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpziyl9it7.java:38: error: cannot find symbol\n\
    \    assert(histogram((\""
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> histogram = new HashMap<String,Integer>();\n\
    \        String[] words = test.split(\"\\\\s+\");\n        for (String word :\
    \ words) {\n            Integer count = 1;\n            if (histogram.containsKey(word))\
    \ {\n                count = histogram.get(word) + 1;\n            }\n       \
    \     histogram.put(word, count);\n        }\n        return histogram;\nreturn\
    \ new HashMap<String,Integer>();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmplrcaeils.java:32: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                         ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmplrcaeils.java:33:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n                  \
    \                                                         ^\n  symbol:   method\
    \ of(String,int,String,int)\n  location: interface Map\n/tmp/tmplrcaeils.java:34:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmplrcaeils.java:35: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmplrcaeils.java:36: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmplrcaeils.java:37: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \     ^\n  symbol:   method of(String,int,String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmplrcaeils.java:39: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 1)))));\n            \
    \                                            "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        if (test.length() == 0) return new HashMap<String,\
    \ Integer>();\n        HashMap<String, Integer> map = new HashMap<String, Integer>();\n\
    \n        String[] arr = test.split(\" \");\n        for (String x : arr) {\n\
    \            if (map.containsKey(x))\n                map.put(x, map.get(x) +\
    \ 1);\n            else\n                map.put(x, 1);\n        }\n        return\
    \ map;\nreturn new HashMap<String,Integer>();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpp07l2zjo.java:33: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                         ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmpp07l2zjo.java:34:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n                  \
    \                                                         ^\n  symbol:   method\
    \ of(String,int,String,int)\n  location: interface Map\n/tmp/tmpp07l2zjo.java:35:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpp07l2zjo.java:36: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpp07l2zjo.java:37: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmpp07l2zjo.java:38: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \     ^\n  symbol:   method of(String,int,String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmpp07l2zjo.java:40: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 1)))));\n            \
    \                                            "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> map = new HashMap<String,Integer>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            if (map.containsKey(word)) {\n                map.put(word, map.get(word)\
    \ + 1);\n            }\n            else {\n                map.put(word, 1);\n\
    \            }\n        }\n        return map;\nreturn new HashMap<String,Integer>();\n\
    \    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp79n6_ieh.java:33: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                         ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmp79n6_ieh.java:34:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n                  \
    \                                                         ^\n  symbol:   method\
    \ of(String,int,String,int)\n  location: interface Map\n/tmp/tmp79n6_ieh.java:35:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmp79n6_ieh.java:36: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmp79n6_ieh.java:37: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmp79n6_ieh.java:38: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \     ^\n  symbol:   method of(String,int,String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmp79n6_ieh.java:40: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 1)))));\n            \
    \                                            "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hm = new HashMap<>();\n\
    \        for (String str : test.split(\" \")){\n            if (str.trim().isEmpty())\
    \ continue;\n            if (hm.containsKey(str)){\n                hm.put(str,\
    \ hm.get(str) + 1);\n            }\n            else{\n                hm.put(str,\
    \ 1);\n            }\n        }\n        return hm;\nreturn new HashMap<String,Integer>();\n\
    \    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_p84ofhe.java:33: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                         ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmp_p84ofhe.java:34:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n                  \
    \                                                         ^\n  symbol:   method\
    \ of(String,int,String,int)\n  location: interface Map\n/tmp/tmp_p84ofhe.java:35:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmp_p84ofhe.java:36: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmp_p84ofhe.java:37: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmp_p84ofhe.java:38: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \     ^\n  symbol:   method of(String,int,String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmp_p84ofhe.java:40: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 1)))));\n            \
    \                                            "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> map = new HashMap<>();\n\
    \        String[] list = test.split(\" \");\n        for(String str : list) {\n\
    \            String key = getKeyForString(str);\n            Integer frequency\
    \ = map.get(key);\n            if(frequency == null) {\n                frequency\
    \ = 1;\n            } else {\n                frequency++;\n            }\n  \
    \          map.put(key, frequency);\n        }\n        return map;\nreturn new\
    \ HashMap<String,Integer>();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmphtigj1xw.java:22: error: cannot find symbol\n            String\
    \ key = getKeyForString(str);\n                         ^\n  symbol:   method\
    \ getKeyForString(String)\n  location: class Problem\n/tmp/tmphtigj1xw.java:35:\
    \ error: cannot find symbol\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n                                                     \
    \                    ^\n  symbol:   method of(String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmphtigj1xw.java:36: error: cannot find symbol\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                           ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmphtigj1xw.java:37:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmphtigj1xw.java:38: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmphtigj1xw.java:39: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmphtigj1xw.java:40: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \     ^\n  symbol:   method of(String,int,String,int,String,int)\n  location:\
    \ interface M"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        String[] arr = test.split(\" \");\n      \
    \  HashMap<String,Integer> map = new HashMap<>();\n        for (String t : arr)\
    \ {\n            map.merge(t, 1, (curVal, newVal) -> curVal + newVal);\n     \
    \   }\n        map.forEach((k, v) -> System.out.println(k + \": \" + v));\n  \
    \      return map;\nreturn new HashMap<String,Integer>();\n    }\n    public static\
    \ void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpu9g72h4i.java:29: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                         ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmpu9g72h4i.java:30:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n                  \
    \                                                         ^\n  symbol:   method\
    \ of(String,int,String,int)\n  location: interface Map\n/tmp/tmpu9g72h4i.java:31:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpu9g72h4i.java:32: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpu9g72h4i.java:33: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmpu9g72h4i.java:34: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \     ^\n  symbol:   method of(String,int,String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmpu9g72h4i.java:36: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 1)))));\n            \
    \                                            "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> count = new HashMap<>();\n\
    \        for(String letter : test.split(\" \")){\n            Integer count =\
    \ count.getOrDefault(letter,0);\n            count.set(letter, count + 1);\n \
    \       }\n        return count;\nreturn new HashMap<String,Integer>();\n    }\n\
    \    public static void main(String[] args) {\n    assert(histogram((\"a b b a\"\
    )).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1l7hf5mn.java:21: error: variable count is already defined in method\
    \ histogram(String)\n            Integer count = count.getOrDefault(letter,0);\n\
    \                    ^\n/tmp/tmp1l7hf5mn.java:21: error: cannot find symbol\n\
    \            Integer count = count.getOrDefault(letter,0);\n                 \
    \                ^\n  symbol:   method getOrDefault(String,int)\n  location: variable\
    \ count of type Integer\n/tmp/tmp1l7hf5mn.java:22: error: cannot find symbol\n\
    \            count.set(letter, count + 1);\n                 ^\n  symbol:   method\
    \ set(String,int)\n  location: variable count of type Integer\n/tmp/tmp1l7hf5mn.java:28:\
    \ error: cannot find symbol\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n                                                     \
    \                    ^\n  symbol:   method of(String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmp1l7hf5mn.java:29: error: cannot find symbol\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                           ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmp1l7hf5mn.java:30:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmp1l7hf5mn.java:31: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmp1l7hf5mn.java:32: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                          "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String, Integer> result = new HashMap<>();\n\
    \        String[] parts = test.split(\" \");\n        for (String part : parts)\
    \ {\n            if (result.containsKey(part)) {\n                int val = result.get(part);\n\
    \                result.put(part, val + 1);\n            } else {\n          \
    \      result.put(part, 1);\n            }\n        }\n        return result;\n\
    return new HashMap<String,Integer>();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpkrh5vh0h.java:33: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                         ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmpkrh5vh0h.java:34:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n                  \
    \                                                         ^\n  symbol:   method\
    \ of(String,int,String,int)\n  location: interface Map\n/tmp/tmpkrh5vh0h.java:35:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpkrh5vh0h.java:36: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpkrh5vh0h.java:37: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmpkrh5vh0h.java:38: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \     ^\n  symbol:   method of(String,int,String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmpkrh5vh0h.java:40: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 1)))));\n            \
    \                                            "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> histogram = new HashMap<String,Integer>();\n\
    \n        String[] letters = test.split(\" \");\n\n        for (int i = 0; i <\
    \ letters.length; i++) {\n            String letter = letters[i];\n          \
    \  if (histogram.containsKey(letter)) {\n                histogram.put(letter,histogram.get(letter)+1);\n\
    \            } else {\n                histogram.put(letter,1);\n            }\n\
    \        }\n        return histogram;\nreturn new HashMap<String,Integer>();\n\
    \    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4qy9_78_.java:35: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                         ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmp4qy9_78_.java:36:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n                  \
    \                                                         ^\n  symbol:   method\
    \ of(String,int,String,int)\n  location: interface Map\n/tmp/tmp4qy9_78_.java:37:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmp4qy9_78_.java:38: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmp4qy9_78_.java:39: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmp4qy9_78_.java:40: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \     ^\n  symbol:   method of(String,int,String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmp4qy9_78_.java:42: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 1)))));\n            \
    \                                            "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        int maxCount = 0;\n        HashMap<String,Integer>\
    \ counts = new HashMap<String,Integer>();\n        for(int i=0;i<test.length();i++)\
    \ {\n            String letter = test.substring(0,i+1);\n            Integer count\
    \ = counts.getOrDefault(letter,0);\n            counts.put(letter,count+1);\n\
    \            if(count > maxCount) {\n                maxCount = count;\n     \
    \       }\n        }\n        return counts;\nreturn new HashMap<String,Integer>();\n\
    \    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmptsi6h067.java:33: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                         ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmptsi6h067.java:34:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n                  \
    \                                                         ^\n  symbol:   method\
    \ of(String,int,String,int)\n  location: interface Map\n/tmp/tmptsi6h067.java:35:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmptsi6h067.java:36: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmptsi6h067.java:37: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmptsi6h067.java:38: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \     ^\n  symbol:   method of(String,int,String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmptsi6h067.java:40: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 1)))));\n            \
    \                                            "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> map = new HashMap<>();\n\
    \        ArrayList<String> split = new ArrayList<String>(test.split(\" \"));\n\
    \        for (String s : split)\n            if (map.containsKey(s))\n       \
    \         map.put(s,map.get(s)+1);\n            else\n                map.put(s,1);\n\
    \        return map;\nreturn new HashMap<String,Integer>();\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1ejws766.java:20: error: no suitable constructor found for ArrayList(String[])\n\
    \        ArrayList<String> split = new ArrayList<String>(test.split(\" \"));\n\
    \                                  ^\n    constructor ArrayList.ArrayList(int)\
    \ is not applicable\n      (argument mismatch; String[] cannot be converted to\
    \ int)\n    constructor ArrayList.ArrayList(Collection<? extends String>) is not\
    \ applicable\n      (argument mismatch; String[] cannot be converted to Collection<?\
    \ extends String>)\n/tmp/tmp1ejws766.java:30: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                         ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmp1ejws766.java:31:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n                  \
    \                                                         ^\n  symbol:   method\
    \ of(String,int,String,int)\n  location: interface Map\n/tmp/tmp1ejws766.java:32:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmp1ejws766.java:33: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmp1ejws766.java:34: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmp1ejw"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> map = new HashMap<>();\n\
    \        for(String letter : test.split(\" \")) {\n            map.put(letter,\
    \ map.getOrDefault(letter, 0) + 1);\n        }\n        return map;\nreturn new\
    \ HashMap<String,Integer>();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvuh7qpo5.java:27: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                         ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmpvuh7qpo5.java:28:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n                  \
    \                                                         ^\n  symbol:   method\
    \ of(String,int,String,int)\n  location: interface Map\n/tmp/tmpvuh7qpo5.java:29:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpvuh7qpo5.java:30: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpvuh7qpo5.java:31: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmpvuh7qpo5.java:32: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \     ^\n  symbol:   method of(String,int,String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmpvuh7qpo5.java:34: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 1)))));\n            \
    \                                            "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> map = new HashMap<>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            if (map.containsKey(word)) {\n                int count = map.get(word);\n\
    \                map.put(word, count + 1);\n            } else {\n           \
    \     map.put(word, 1);\n            }\n        }\n        return map;\nreturn\
    \ new HashMap<String,Integer>();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4fv9keus.java:33: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                         ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmp4fv9keus.java:34:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n                  \
    \                                                         ^\n  symbol:   method\
    \ of(String,int,String,int)\n  location: interface Map\n/tmp/tmp4fv9keus.java:35:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmp4fv9keus.java:36: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmp4fv9keus.java:37: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmp4fv9keus.java:38: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \     ^\n  symbol:   method of(String,int,String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmp4fv9keus.java:40: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 1)))));\n            \
    \                                            "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> letterCounts = new\
    \ HashMap<String,Integer>();\n        String[] letters = test.split(\" \");\n\n\
    \        // Iterate through the letters to count the occurance.\n        for (String\
    \ letter : letters) {\n            Integer count = letterCounts.getOrDefault(letter,\
    \ 0);\n            letterCounts.put(letter, count + 1);\n        }\n\n       \
    \ // Return the maximum occurance\n        return Collections.max(letterCounts.values());\n\
    return new HashMap<String,Integer>();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp86syj19u.java:29: error: incompatible types: inference variable\
    \ T has incompatible upper bounds HashMap<String,Integer>,Integer,Object,Comparable<?\
    \ super T>\n        return Collections.max(letterCounts.values());\n         \
    \                     ^\n  where T is a type-variable:\n    T extends Object,Comparable<?\
    \ super T> declared in method <T>max(Collection<? extends T>)\n/tmp/tmp86syj19u.java:33:\
    \ error: cannot find symbol\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n                                                     \
    \                    ^\n  symbol:   method of(String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmp86syj19u.java:34: error: cannot find symbol\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                           ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmp86syj19u.java:35:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmp86syj19u.java:36: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmp86syj19u.java:37: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmp86syj19u.java:38: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of("
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> count = new HashMap<String,Integer>();\n\
    \        Arrays.stream(test.split(\" \"))\n            .map(s -> s.toLowerCase())\n\
    \            .map(s -> {\n                if (count.containsKey(s)) {\n      \
    \              count.put(s, counts.get(s) + 1);\n                }\n         \
    \       else {\n                    count.put(s, 1);\n                }\n    \
    \        })\n            .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()))\n\
    \            .entrySet().stream()\n            .max(Map.Entry.comparingByValue())\n\
    \            .ifPresent(e -> count.put(e.getKey(), e.getValue()));\n        return\
    \ count;\nreturn new HashMap<String,Integer>();\n    }\n    public static void\
    \ main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdxzu4ex8.java:22: error: method map in interface Stream<T> cannot\
    \ be applied to given types;\n            .map(s -> {\n            ^\n  required:\
    \ Function<? super String,? extends R>\n  found: (s)->{ if [...]; } }\n  reason:\
    \ cannot infer type-variable(s) R\n    (argument mismatch; bad return type in\
    \ lambda expression\n      missing return value)\n  where R,T are type-variables:\n\
    \    R extends Object declared in method <R>map(Function<? super T,? extends R>)\n\
    \    T extends Object declared in interface Stream\n/tmp/tmpdxzu4ex8.java:24:\
    \ error: cannot find symbol\n                    count.put(s, counts.get(s) +\
    \ 1);\n                                 ^\n  symbol:   variable counts\n  location:\
    \ class Problem\n/tmp/tmpdxzu4ex8.java:30: error: cannot find symbol\n       \
    \     .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()))\n\
    \                                           ^\n  symbol:   variable Function\n\
    \  location: class Problem\n/tmp/tmpdxzu4ex8.java:38: error: cannot find symbol\n\
    \    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n                                                     \
    \                    ^\n  symbol:   method of(String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmpdxzu4ex8.java:39: error: cannot find symbol\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                           ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmpdxzu4ex8.java:40:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpdxzu4ex8.java:41: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> map = new HashMap<>();\n\
    \        String [] words = test.split(\" \");\n        words.forEach(word -> {\n\
    \            Integer count = map.get(word);\n            if (count == null) {\n\
    \                count = 1;\n            }\n            else {\n             \
    \   count++;\n            }\n            map.put(word, count);\n        });\n\
    \        return map;\nreturn new HashMap<String,Integer>();\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7d6jxl3i.java:21: error: cannot find symbol\n        words.forEach(word\
    \ -> {\n             ^\n  symbol:   method forEach((word)->{ [...]t); })\n  location:\
    \ variable words of type String[]\n/tmp/tmp7d6jxl3i.java:35: error: cannot find\
    \ symbol\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n                                                     \
    \                    ^\n  symbol:   method of(String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmp7d6jxl3i.java:36: error: cannot find symbol\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                           ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmp7d6jxl3i.java:37:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmp7d6jxl3i.java:38: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmp7d6jxl3i.java:39: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmp7d6jxl3i.java:40: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \     ^\n  symbol:   method of(String,int,String,int,String,int)\n  location:\
    \ interface Map\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> map = new HashMap<String,Integer>();\n\
    \        String[] list = test.split(\" \");\n        Arrays.sort(list);\n    \
    \    HashMap<String,Integer> m = new HashMap<String,Integer>();\n        for (String\
    \ str : list) {\n            Integer c = map.get(str);\n            if (c==null){\n\
    \                map.put(str, 1);\n            }else{\n                map.put(str,\
    \ c+1);\n            }\n        }\n        map.values().removeIf(x -> x==null);\n\
    \        return map;\nreturn new HashMap<String,Integer>();\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0p814z_t.java:36: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                         ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmp0p814z_t.java:37:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n                  \
    \                                                         ^\n  symbol:   method\
    \ of(String,int,String,int)\n  location: interface Map\n/tmp/tmp0p814z_t.java:38:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmp0p814z_t.java:39: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmp0p814z_t.java:40: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmp0p814z_t.java:41: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \     ^\n  symbol:   method of(String,int,String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmp0p814z_t.java:43: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 1)))));\n            \
    \                                            "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        // Split the string into an array\n      \
    \  String[] letters = test.split(\" \");\n        HashMap<String,Integer> map\
    \ = new HashMap<String,Integer>();\n\n        // Iterate over the array, counting\
    \ the letters that appear more than once\n        for (String letter : letters)\
    \ {\n            if (map.containsKey(letter)) {\n                map.put(letter,\
    \ map.get(letter) + 1);\n            } else {\n                map.put(letter,\
    \ 1);\n            }\n        }\n        return map;\nreturn new HashMap<String,Integer>();\n\
    \    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1zxqr4ac.java:35: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                         ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmp1zxqr4ac.java:36:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n                  \
    \                                                         ^\n  symbol:   method\
    \ of(String,int,String,int)\n  location: interface Map\n/tmp/tmp1zxqr4ac.java:37:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmp1zxqr4ac.java:38: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmp1zxqr4ac.java:39: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmp1zxqr4ac.java:40: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \     ^\n  symbol:   method of(String,int,String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmp1zxqr4ac.java:42: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 1)))));\n            \
    \                                            "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> result = new HashMap<>();\n\
    \        String[] words = test.split(\" \");\n        for (int i = 0; i < words.length;\
    \ i++) {\n            String word = words[i];\n            int count = result.getOrDefault(word,\
    \ 0);\n            result.put(word, count + 1);\n        }\n        return result;\n\
    return new HashMap<String,Integer>();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp61pho6pd.java:30: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                         ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmp61pho6pd.java:31:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n                  \
    \                                                         ^\n  symbol:   method\
    \ of(String,int,String,int)\n  location: interface Map\n/tmp/tmp61pho6pd.java:32:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmp61pho6pd.java:33: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmp61pho6pd.java:34: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmp61pho6pd.java:35: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \     ^\n  symbol:   method of(String,int,String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmp61pho6pd.java:37: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 1)))));\n            \
    \                                            "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        if (test.isEmpty()){\n            return new\
    \ HashMap<String,Integer>();\n        }\n        int[] values = new int[26];\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String letter\
    \ = test.substring(i, i+1);\n            values[(letter - 'a')] += 1;\n      \
    \  }\n        HashMap<String,Integer> map = new HashMap<String,Integer>();\n \
    \       for (Map.Entry<String, Integer> entry : values) {\n            map.put(entry.getKey(),\
    \ entry.getValue());\n        }\n        return map;\nreturn new HashMap<String,Integer>();\n\
    \    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7cput0on.java:25: error: bad operand types for binary operator\
    \ '-'\n            values[(letter - 'a')] += 1;\n                           ^\n\
    \  first type:  String\n  second type: char\n/tmp/tmp7cput0on.java:28: error:\
    \ incompatible types: int cannot be converted to Entry<String,Integer>\n     \
    \   for (Map.Entry<String, Integer> entry : values) {\n                      \
    \                          ^\n/tmp/tmp7cput0on.java:35: error: cannot find symbol\n\
    \    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n                                                     \
    \                    ^\n  symbol:   method of(String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmp7cput0on.java:36: error: cannot find symbol\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                           ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmp7cput0on.java:37:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmp7cput0on.java:38: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmp7cput0on.java:39: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmp7cput0on.java:40: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<St"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hm = new HashMap<String,Integer>();\n\
    \        String[] letters = test.split(\" \");\n        for (String letter : letters)\
    \ {\n            if (hm.containsKey(letter)) {\n                hm.put(letter,\
    \ hm.get(letter) + 1);\n            } else {\n                hm.put(letter, 1);\n\
    \            }\n        }\n        return hm;\nreturn new HashMap<String,Integer>();\n\
    \    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpstt_mevu.java:32: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                         ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmpstt_mevu.java:33:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n                  \
    \                                                         ^\n  symbol:   method\
    \ of(String,int,String,int)\n  location: interface Map\n/tmp/tmpstt_mevu.java:34:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpstt_mevu.java:35: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpstt_mevu.java:36: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmpstt_mevu.java:37: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \     ^\n  symbol:   method of(String,int,String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmpstt_mevu.java:39: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 1)))));\n            \
    \                                            "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> map = new HashMap<String,Integer>();\n\
    \        for(String x : test.split(\" \")){\n            if(map.containsKey(x)){\n\
    \                map.put(x, map.get(x) + 1);\n            }else{\n           \
    \     map.put(x, 1);\n            }\n        }\n        return map;\nreturn new\
    \ HashMap<String,Integer>();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9_nlug2s.java:31: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                         ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmp9_nlug2s.java:32:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n                  \
    \                                                         ^\n  symbol:   method\
    \ of(String,int,String,int)\n  location: interface Map\n/tmp/tmp9_nlug2s.java:33:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmp9_nlug2s.java:34: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmp9_nlug2s.java:35: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmp9_nlug2s.java:36: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \     ^\n  symbol:   method of(String,int,String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmp9_nlug2s.java:38: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 1)))));\n            \
    \                                            "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        String[] tokens = test.split(\" \");\n   \
    \     HashMap<String,Integer> map = new HashMap<>();\n        for(String token\
    \ : tokens) {\n            if(map.containsKey(token)) {\n                map.put(token,\
    \ map.get(token) + 1);\n            }\n            else {\n                map.put(token,\
    \ 1);\n            }\n        }\n        return map;\nreturn new HashMap<String,Integer>();\n\
    \    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpnrn6w33b.java:33: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                         ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmpnrn6w33b.java:34:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n                  \
    \                                                         ^\n  symbol:   method\
    \ of(String,int,String,int)\n  location: interface Map\n/tmp/tmpnrn6w33b.java:35:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpnrn6w33b.java:36: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpnrn6w33b.java:37: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmpnrn6w33b.java:38: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \     ^\n  symbol:   method of(String,int,String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmpnrn6w33b.java:40: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 1)))));\n            \
    \                                            "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        String[] split = test.split(\" \");\n    \
    \    HashMap<String,Integer> map = new HashMap<>();\n        for(String s: split)\
    \ {\n            map.put(s, map.getOrDefault(s, 0) + 1);\n        }\n        return\
    \ map;\nreturn new HashMap<String,Integer>();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp37kvii1x.java:28: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                         ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmp37kvii1x.java:29:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n                  \
    \                                                         ^\n  symbol:   method\
    \ of(String,int,String,int)\n  location: interface Map\n/tmp/tmp37kvii1x.java:30:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmp37kvii1x.java:31: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmp37kvii1x.java:32: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmp37kvii1x.java:33: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \     ^\n  symbol:   method of(String,int,String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmp37kvii1x.java:35: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 1)))));\n            \
    \                                            "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> map = new HashMap<String,Integer>();\n\
    \        for(String s: test.split(\" \")){\n            String key = s.toLowerCase();\n\
    \            int val = map.getOrDefault(key, 0);\n            map.put(key, val\
    \ + 1);\n        }\n        return map;\nreturn new HashMap<String,Integer>();\n\
    \    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpiev44ulj.java:29: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                         ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmpiev44ulj.java:30:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n                  \
    \                                                         ^\n  symbol:   method\
    \ of(String,int,String,int)\n  location: interface Map\n/tmp/tmpiev44ulj.java:31:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpiev44ulj.java:32: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpiev44ulj.java:33: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmpiev44ulj.java:34: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \     ^\n  symbol:   method of(String,int,String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmpiev44ulj.java:36: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 1)))));\n            \
    \                                            "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> map = new HashMap<>();\n\
    \        \n        for (int i = 0; i < test.length(); i++) {\n            String\
    \ current = test.substring(i, i + 1);\n            Integer previous = map.get(current);\n\
    \            if (previous == null) {\n                map.put(current, 1);\n \
    \           } else {\n                map.put(current, previous + 1);\n      \
    \      }\n        }\n        return map;\nreturn new HashMap<String,Integer>();\n\
    \    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpehex5_75.java:34: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                         ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmpehex5_75.java:35:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n                  \
    \                                                         ^\n  symbol:   method\
    \ of(String,int,String,int)\n  location: interface Map\n/tmp/tmpehex5_75.java:36:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpehex5_75.java:37: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpehex5_75.java:38: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmpehex5_75.java:39: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \     ^\n  symbol:   method of(String,int,String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmpehex5_75.java:41: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 1)))));\n            \
    \                                            "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        return Arrays.stream(test.split(\" \"))\n\
    \            .collect(HashMap<String,Integer>::new,\n                (m,e) ->\
    \ m.merge(e,1,Integer::sum),\n                HashMap<String,Integer>::putAll);\n\
    return new HashMap<String,Integer>();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpc4jh9yhh.java:26: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                         ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmpc4jh9yhh.java:27:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n                  \
    \                                                         ^\n  symbol:   method\
    \ of(String,int,String,int)\n  location: interface Map\n/tmp/tmpc4jh9yhh.java:28:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpc4jh9yhh.java:29: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpc4jh9yhh.java:30: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmpc4jh9yhh.java:31: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \     ^\n  symbol:   method of(String,int,String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmpc4jh9yhh.java:33: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 1)))));\n            \
    \                                            "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        if (test.isEmpty()) return new HashMap<String,Integer>();\n\
    \        HashMap<String,Integer> h = new HashMap<String,Integer>();\n        char[]\
    \ chars = test.toCharArray();\n        for (char c : chars) {\n            if\
    \ (h.containsKey(c))\n                h.put(c, h.get(c) + 1);\n            else\n\
    \                h.put(c,1);\n        }\n        return h;\nreturn new HashMap<String,Integer>();\n\
    \    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpmx4uvg0y.java:24: error: no suitable method found for put(char,int)\n\
    \                h.put(c, h.get(c) + 1);\n                 ^\n    method Map.put(String,Integer)\
    \ is not applicable\n      (argument mismatch; char cannot be converted to String)\n\
    \    method AbstractMap.put(String,Integer) is not applicable\n      (argument\
    \ mismatch; char cannot be converted to String)\n    method HashMap.put(String,Integer)\
    \ is not applicable\n      (argument mismatch; char cannot be converted to String)\n\
    /tmp/tmpmx4uvg0y.java:26: error: no suitable method found for put(char,int)\n\
    \                h.put(c,1);\n                 ^\n    method Map.put(String,Integer)\
    \ is not applicable\n      (argument mismatch; char cannot be converted to String)\n\
    \    method AbstractMap.put(String,Integer) is not applicable\n      (argument\
    \ mismatch; char cannot be converted to String)\n    method HashMap.put(String,Integer)\
    \ is not applicable\n      (argument mismatch; char cannot be converted to String)\n\
    /tmp/tmpmx4uvg0y.java:32: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                         ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmpmx4uvg0y.java:33:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n                  \
    \                                                         ^\n  symbol:   method\
    \ of(String,int,String,int)\n  location: interface Map\n/tmp/tmpmx4uvg0y.java:34:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpmx4uvg0y.java:35: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> histogram = new HashMap<String,Integer>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            int count = 1;\n            if (histogram.containsKey(word))\
    \ {\n                count = histogram.get(word) + 1;\n            }\n       \
    \     histogram.put(word, count);\n        }\n        return histogram;\nreturn\
    \ new HashMap<String,Integer>();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpusfmqlpu.java:32: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                         ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmpusfmqlpu.java:33:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n                  \
    \                                                         ^\n  symbol:   method\
    \ of(String,int,String,int)\n  location: interface Map\n/tmp/tmpusfmqlpu.java:34:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpusfmqlpu.java:35: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpusfmqlpu.java:36: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmpusfmqlpu.java:37: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \     ^\n  symbol:   method of(String,int,String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmpusfmqlpu.java:39: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 1)))));\n            \
    \                                            "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hashMap = new HashMap<>();\n\
    \        int maxCount = 0;\n        for(int i = 0; i < test.length(); i++) {\n\
    \            char c = test.charAt(i);\n            if(hashMap.containsKey(c))\n\
    \                hashMap.put(c, hashMap.get(c)+1);\n            else\n       \
    \         hashMap.put(c, 1);\n            if(hashMap.get(c) > maxCount) {\n  \
    \              maxCount = hashMap.get(c);\n            }\n        }\n        return\
    \ hashMap;\nreturn new HashMap<String,Integer>();\n    }\n    public static void\
    \ main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6dh6e5vo.java:24: error: no suitable method found for put(char,int)\n\
    \                hashMap.put(c, hashMap.get(c)+1);\n                       ^\n\
    \    method Map.put(String,Integer) is not applicable\n      (argument mismatch;\
    \ char cannot be converted to String)\n    method AbstractMap.put(String,Integer)\
    \ is not applicable\n      (argument mismatch; char cannot be converted to String)\n\
    \    method HashMap.put(String,Integer) is not applicable\n      (argument mismatch;\
    \ char cannot be converted to String)\n/tmp/tmp6dh6e5vo.java:26: error: no suitable\
    \ method found for put(char,int)\n                hashMap.put(c, 1);\n       \
    \                ^\n    method Map.put(String,Integer) is not applicable\n   \
    \   (argument mismatch; char cannot be converted to String)\n    method AbstractMap.put(String,Integer)\
    \ is not applicable\n      (argument mismatch; char cannot be converted to String)\n\
    \    method HashMap.put(String,Integer) is not applicable\n      (argument mismatch;\
    \ char cannot be converted to String)\n/tmp/tmp6dh6e5vo.java:35: error: cannot\
    \ find symbol\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n                                                     \
    \                    ^\n  symbol:   method of(String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmp6dh6e5vo.java:36: error: cannot find symbol\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                           ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmp6dh6e5vo.java:37:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmp6dh6e5vo.java:38: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((ne"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> result = new HashMap<String,Integer>();\n\
    \        String[] items = test.split(\" \");\n        for(String item : items)\
    \ {\n            Integer count = result.get(item);\n            if (count == null)\
    \ {\n                count = 0;\n            }\n            result.put(item, ++count);\n\
    \        }\n        return result;\nreturn new HashMap<String,Integer>();\n  \
    \  }\n    public static void main(String[] args) {\n    assert(histogram((\"a\
    \ b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpf3cm1th_.java:32: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                         ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmpf3cm1th_.java:33:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n                  \
    \                                                         ^\n  symbol:   method\
    \ of(String,int,String,int)\n  location: interface Map\n/tmp/tmpf3cm1th_.java:34:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpf3cm1th_.java:35: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpf3cm1th_.java:36: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmpf3cm1th_.java:37: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \     ^\n  symbol:   method of(String,int,String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmpf3cm1th_.java:39: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 1)))));\n            \
    \                                            "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        String[] str = test.split(\" \");\n      \
    \  HashMap<String,Integer> histogram = new HashMap<String,Integer>();\n      \
    \  for(int i = 0; i < str.length; i++){\n            String s = str[i];\n    \
    \        if(!histogram.containsKey(s)){\n                histogram.put(s,1);\n\
    \            } else {\n                histogram.put(s,histogram.get(s)+1);\n\
    \            }\n        }\n        return histogram;\nreturn new HashMap<String,Integer>();\n\
    \    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3iwk_hp1.java:33: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                         ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmp3iwk_hp1.java:34:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n                  \
    \                                                         ^\n  symbol:   method\
    \ of(String,int,String,int)\n  location: interface Map\n/tmp/tmp3iwk_hp1.java:35:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmp3iwk_hp1.java:36: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmp3iwk_hp1.java:37: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmp3iwk_hp1.java:38: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \     ^\n  symbol:   method of(String,int,String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmp3iwk_hp1.java:40: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 1)))));\n            \
    \                                            "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> map = new HashMap<>();\n\
    \        Arrays.stream(test.split(\" \")).filter(e -> e.length() > 0).forEach(e\
    \ -> {\n            Integer count = 1;\n            if (map.containsKey(e)) {\n\
    \                count = map.get(e) + 1;\n            }\n            else {\n\
    \                map.put(e, count);\n            }\n        });\n        return\
    \ map;\nreturn new HashMap<String,Integer>();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4nof32jt.java:33: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                         ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmp4nof32jt.java:34:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n                  \
    \                                                         ^\n  symbol:   method\
    \ of(String,int,String,int)\n  location: interface Map\n/tmp/tmp4nof32jt.java:35:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmp4nof32jt.java:36: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmp4nof32jt.java:37: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmp4nof32jt.java:38: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \     ^\n  symbol:   method of(String,int,String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmp4nof32jt.java:40: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 1)))));\n            \
    \                                            "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hm = new HashMap<>();\n\
    \        char[] chars = test.toCharArray();\n        for(char c:chars) {\n   \
    \         hm.put(c, hm.getOrDefault(c, 0) + 1);\n        }\n        return hm;\n\
    return new HashMap<String,Integer>();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5mgqpgq9.java:22: error: no suitable method found for put(char,int)\n\
    \            hm.put(c, hm.getOrDefault(c, 0) + 1);\n              ^\n    method\
    \ Map.put(String,Integer) is not applicable\n      (argument mismatch; char cannot\
    \ be converted to String)\n    method AbstractMap.put(String,Integer) is not applicable\n\
    \      (argument mismatch; char cannot be converted to String)\n    method HashMap.put(String,Integer)\
    \ is not applicable\n      (argument mismatch; char cannot be converted to String)\n\
    /tmp/tmp5mgqpgq9.java:28: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                         ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmp5mgqpgq9.java:29:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n                  \
    \                                                         ^\n  symbol:   method\
    \ of(String,int,String,int)\n  location: interface Map\n/tmp/tmp5mgqpgq9.java:30:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmp5mgqpgq9.java:31: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmp5mgqpgq9.java:32: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        // Create an empty Map to hold the histogram.\n\
    \        HashMap<String,Integer> histogram = new HashMap<>();\n        // Populate\
    \ the histogram for each letter in the string.\n        for(int i = 0; i < test.length();\
    \ i++){\n            String letter = test.substring(i, i+1);\n            if(histogram.containsKey(letter)){\n\
    \                histogram.put(letter, histogram.get(letter) + 1);\n         \
    \   } else {\n                histogram.put(letter, 1);\n            }\n     \
    \   }\n        return histogram;\nreturn new HashMap<String,Integer>();\n    }\n\
    \    public static void main(String[] args) {\n    assert(histogram((\"a b b a\"\
    )).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbrp1g66m.java:34: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                         ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmpbrp1g66m.java:35:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n                  \
    \                                                         ^\n  symbol:   method\
    \ of(String,int,String,int)\n  location: interface Map\n/tmp/tmpbrp1g66m.java:36:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpbrp1g66m.java:37: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpbrp1g66m.java:38: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmpbrp1g66m.java:39: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \     ^\n  symbol:   method of(String,int,String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmpbrp1g66m.java:41: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 1)))));\n            \
    \                                            "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String, Integer> map = new HashMap<String,\
    \ Integer>();\n        String words[] = test.split(\" \");\n        for(String\
    \ word:words) {\n            if(map.containsKey(word)) {\n                int\
    \ temp = map.get(word);\n                map.put(word, temp+1);\n            }\
    \ else {\n                map.put(word, 1);\n            }\n        }\n      \
    \  return map;\nreturn new HashMap<String,Integer>();\n    }\n    public static\
    \ void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp417pi9hq.java:33: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                         ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmp417pi9hq.java:34:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n                  \
    \                                                         ^\n  symbol:   method\
    \ of(String,int,String,int)\n  location: interface Map\n/tmp/tmp417pi9hq.java:35:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmp417pi9hq.java:36: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmp417pi9hq.java:37: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmp417pi9hq.java:38: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \     ^\n  symbol:   method of(String,int,String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmp417pi9hq.java:40: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 1)))));\n            \
    \                                            "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> map = new HashMap<>();\n\
    \        String[] words = test.trim().split(\" \");\n        for( String w : words\
    \ ) {\n            int count = 1;\n            for( String s : map.keySet() )\
    \ {\n                if( s.equals(w) ) {\n                    count++;\n     \
    \           }\n            }\n            map.put(w, count);\n        }\n    \
    \    return map;\nreturn new HashMap<String,Integer>();\n    }\n    public static\
    \ void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpoac6mh4m.java:34: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                         ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmpoac6mh4m.java:35:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n                  \
    \                                                         ^\n  symbol:   method\
    \ of(String,int,String,int)\n  location: interface Map\n/tmp/tmpoac6mh4m.java:36:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpoac6mh4m.java:37: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpoac6mh4m.java:38: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmpoac6mh4m.java:39: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \     ^\n  symbol:   method of(String,int,String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmpoac6mh4m.java:41: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 1)))));\n            \
    \                                            "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> result = new HashMap<String,Integer>();\n\
    \        if(test.length() == 0) {\n            return result;\n        }\n\n \
    \       String[] letters = test.split(\" \");\n\n        for(int i = 0; i<letters.length;\
    \ i++) {\n            String letter = letters[i];\n            if(result.containsKey(letter))\
    \ {\n                int count = result.get(letter);\n                result.put(letter,\
    \ count+1);\n            } else {\n                result.put(letter, 1);\n  \
    \          }\n        }\n\n        return result;\nreturn new HashMap<String,Integer>();\n\
    \    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpacxfssp4.java:40: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                         ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmpacxfssp4.java:41:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n                  \
    \                                                         ^\n  symbol:   method\
    \ of(String,int,String,int)\n  location: interface Map\n/tmp/tmpacxfssp4.java:42:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpacxfssp4.java:43: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpacxfssp4.java:44: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmpacxfssp4.java:45: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \     ^\n  symbol:   method of(String,int,String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmpacxfssp4.java:47: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 1)))));\n            \
    \                                            "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        Map<String, Integer> histogram = new HashMap<String,Integer>();\n\
    \        String[] array = test.split(\" \");\n        for(String value : array)\
    \ {\n            int count = histogram.get(value);\n            if(count == null)\
    \ {\n                histograms.put(value, 1);\n            }\n            else\
    \ {\n                histograms.put(value, histogram.get(value) + 1);\n      \
    \      }\n        }\n        return histogram;\nreturn new HashMap<String,Integer>();\n\
    \    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdnnjldnh.java:23: error: incomparable types: int and <null>\n \
    \           if(count == null) {\n                     ^\n/tmp/tmpdnnjldnh.java:24:\
    \ error: cannot find symbol\n                histograms.put(value, 1);\n     \
    \           ^\n  symbol:   variable histograms\n  location: class Problem\n/tmp/tmpdnnjldnh.java:27:\
    \ error: cannot find symbol\n                histograms.put(value, histogram.get(value)\
    \ + 1);\n                ^\n  symbol:   variable histograms\n  location: class\
    \ Problem\n/tmp/tmpdnnjldnh.java:30: error: incompatible types: Map<String,Integer>\
    \ cannot be converted to HashMap<String,Integer>\n        return histogram;\n\
    \               ^\n/tmp/tmpdnnjldnh.java:34: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                         ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmpdnnjldnh.java:35:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n                  \
    \                                                         ^\n  symbol:   method\
    \ of(String,int,String,int)\n  location: interface Map\n/tmp/tmpdnnjldnh.java:36:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpdnnjldnh.java:37: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpdnnjldnh.java:38: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\","
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        if (test.isEmpty()) return new HashMap<String,Integer>();\n\
    \        HashMap<String,Integer> map = new HashMap<String,Integer>();\n      \
    \  String[] arr = test.split(\" \");\n        for (String letter : arr) {\n  \
    \          if (map.containsKey(letter)) {\n                map.put(letter, map.get(letter)+1);\n\
    \            } else {\n                map.put(letter,1);\n            }\n   \
    \     }\n        return map;\nreturn new HashMap<String,Integer>();\n    }\n \
    \   public static void main(String[] args) {\n    assert(histogram((\"a b b a\"\
    )).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmppb_d30ka.java:33: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                         ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmppb_d30ka.java:34:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n                  \
    \                                                         ^\n  symbol:   method\
    \ of(String,int,String,int)\n  location: interface Map\n/tmp/tmppb_d30ka.java:35:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmppb_d30ka.java:36: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmppb_d30ka.java:37: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmppb_d30ka.java:38: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \     ^\n  symbol:   method of(String,int,String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmppb_d30ka.java:40: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 1)))));\n            \
    \                                            "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> histogram = new HashMap<String,Integer>();\n\
    \        String splitter = \"\\\\s\";\n        String input = \"\";\n        for\
    \ (int i = 0; i < test.length(); i++) {\n            input += test.charAt(i);\n\
    \        }\n        String[] arr = input.split(splitter);\n        Stream.of(arr)\n\
    \            .map(x -> x.toLowerCase())\n            .filter(x -> x.matches(\"\
    [a-z]\"))\n            .forEach(x -> histogram.put(x, 1));\n        return histogram;\n\
    return new HashMap<String,Integer>();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmprfelkd3z.java:34: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                         ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmprfelkd3z.java:35:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n                  \
    \                                                         ^\n  symbol:   method\
    \ of(String,int,String,int)\n  location: interface Map\n/tmp/tmprfelkd3z.java:36:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmprfelkd3z.java:37: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmprfelkd3z.java:38: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmprfelkd3z.java:39: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \     ^\n  symbol:   method of(String,int,String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmprfelkd3z.java:41: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 1)))));\n            \
    \                                            "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> map = new HashMap<String,Integer>();\n\
    \        // Split the string into an array of all individual characters\n    \
    \    String[] list = test.split(\"\");\n        // Iterate over the array, counting\
    \ the number of occurences of each letter\n        for(String str : list) {\n\
    \            if(!map.containsKey(str)) {\n                map.put(str, 1);\n \
    \           } else {\n                map.put(str, map.get(str) + 1);\n      \
    \      }\n        }\n        return map;\nreturn new HashMap<String,Integer>();\n\
    \    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmps2hugy5_.java:34: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                         ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmps2hugy5_.java:35:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n                  \
    \                                                         ^\n  symbol:   method\
    \ of(String,int,String,int)\n  location: interface Map\n/tmp/tmps2hugy5_.java:36:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmps2hugy5_.java:37: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmps2hugy5_.java:38: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmps2hugy5_.java:39: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \     ^\n  symbol:   method of(String,int,String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmps2hugy5_.java:41: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 1)))));\n            \
    \                                            "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> map = new HashMap<String,Integer>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            Integer count = map.get(word);\n            map.put(word, count\
    \ == null ? 1 : count+1);\n        }\n        return map;\nreturn new HashMap<String,Integer>();\n\
    \    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpv39olmh2.java:29: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                         ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmpv39olmh2.java:30:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n                  \
    \                                                         ^\n  symbol:   method\
    \ of(String,int,String,int)\n  location: interface Map\n/tmp/tmpv39olmh2.java:31:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpv39olmh2.java:32: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpv39olmh2.java:33: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmpv39olmh2.java:34: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \     ^\n  symbol:   method of(String,int,String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmpv39olmh2.java:36: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 1)))));\n            \
    \                                            "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String, Integer> map = new HashMap<String,\
    \ Integer>();\n        String[] words = test.split(\" \");\n        for(int i\
    \ = 0; i < words.length; i++) {\n            String letter = words[i].toLowerCase();\n\
    \            if(map.containsKey(letter)) {\n                map.put(letter, map.get(letter)\
    \ + 1);\n            } else {\n                map.put(letter, 1);\n         \
    \   }\n        }\n        return map;\nreturn new HashMap<String,Integer>();\n\
    \    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpg95w58vv.java:33: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                         ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmpg95w58vv.java:34:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n                  \
    \                                                         ^\n  symbol:   method\
    \ of(String,int,String,int)\n  location: interface Map\n/tmp/tmpg95w58vv.java:35:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpg95w58vv.java:36: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpg95w58vv.java:37: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmpg95w58vv.java:38: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \     ^\n  symbol:   method of(String,int,String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmpg95w58vv.java:40: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 1)))));\n            \
    \                                            "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        return IntStream.range(0, test.length()).boxed()\n\
    \        .collect(HashMap::new,\n            (m,i) -> m.merge(test.charAt(i),1,Math::max)\n\
    \        );\nreturn new HashMap<String,Integer>();\n    }\n    public static void\
    \ main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmps3f0g9wa.java:20: error: no suitable method found for collect(HashMap::new,(m,i)->m.m[...]:max))\n\
    \        .collect(HashMap::new,\n        ^\n    method Stream.<R#1>collect(Supplier<R#1>,BiConsumer<R#1,?\
    \ super Integer>,BiConsumer<R#1,R#1>) is not applicable\n      (cannot infer type-variable(s)\
    \ R#1\n        (actual and formal argument lists differ in length))\n    method\
    \ Stream.<R#2,A>collect(Collector<? super Integer,A,R#2>) is not applicable\n\
    \      (cannot infer type-variable(s) R#2,A\n        (actual and formal argument\
    \ lists differ in length))\n  where R#1,T,R#2,A are type-variables:\n    R#1 extends\
    \ Object declared in method <R#1>collect(Supplier<R#1>,BiConsumer<R#1,? super\
    \ T>,BiConsumer<R#1,R#1>)\n    T extends Object declared in interface Stream\n\
    \    R#2 extends Object declared in method <R#2,A>collect(Collector<? super T,A,R#2>)\n\
    \    A extends Object declared in method <R#2,A>collect(Collector<? super T,A,R#2>)\n\
    /tmp/tmps3f0g9wa.java:26: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                         ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmps3f0g9wa.java:27:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n                  \
    \                                                         ^\n  symbol:   method\
    \ of(String,int,String,int)\n  location: interface Map\n/tmp/tmps3f0g9wa.java:28:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmps3f0g9wa.java:29: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n            "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> map = new HashMap<>();\n\
    \        String[] arr = test.split(\" \");\n        for (String s: arr) {\n  \
    \          map.put(s,map.getOrDefault(s,0)+1);\n        }\n        return map;\n\
    return new HashMap<String,Integer>();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0wnbg33u.java:28: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                         ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmp0wnbg33u.java:29:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n                  \
    \                                                         ^\n  symbol:   method\
    \ of(String,int,String,int)\n  location: interface Map\n/tmp/tmp0wnbg33u.java:30:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmp0wnbg33u.java:31: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmp0wnbg33u.java:32: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmp0wnbg33u.java:33: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \     ^\n  symbol:   method of(String,int,String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmp0wnbg33u.java:35: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 1)))));\n            \
    \                                            "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> histogram = new HashMap<>();\n\
    \        for(String letter : test.split(\" \")){\n            Integer currentValue\
    \ = histogram.get(letter);\n            if(currentValue == null){\n          \
    \      histogram.put(letter, 1);\n            }else{\n                histogram.put(letter,\
    \ currentValue+1);\n            }\n        }\n        return histogram;\nreturn\
    \ new HashMap<String,Integer>();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmphdthf2wc.java:32: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                         ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmphdthf2wc.java:33:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n                  \
    \                                                         ^\n  symbol:   method\
    \ of(String,int,String,int)\n  location: interface Map\n/tmp/tmphdthf2wc.java:34:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmphdthf2wc.java:35: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmphdthf2wc.java:36: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmphdthf2wc.java:37: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \     ^\n  symbol:   method of(String,int,String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmphdthf2wc.java:39: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 1)))));\n            \
    \                                            "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> ret = new HashMap<>();\n\
    \        String[] letters = test.split(\" \");\n        for(String letter : letters)\
    \ {\n            String key = (letter.toLowerCase());\n            Integer val\
    \ = ret.get(key);\n            if(val == null) {\n                val = 1;\n \
    \           } else {\n                val += 1;\n            }\n            ret.put(key,\
    \ val);\n        }\n        return ret;\nreturn new HashMap<String,Integer>();\n\
    \    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmppqidczqy.java:35: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                         ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmppqidczqy.java:36:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n                  \
    \                                                         ^\n  symbol:   method\
    \ of(String,int,String,int)\n  location: interface Map\n/tmp/tmppqidczqy.java:37:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmppqidczqy.java:38: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmppqidczqy.java:39: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmppqidczqy.java:40: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \     ^\n  symbol:   method of(String,int,String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmppqidczqy.java:42: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 1)))));\n            \
    \                                            "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        // Initialize count\n        HashMap<String,Integer>\
    \ result = new HashMap<String,Integer>();\n        String currentLetter = null;\n\
    \        int currentCount = 0;\n        // Iterate over all the letters and increment\
    \ count of each letter\n        for (char c : test.toCharArray()) {\n        \
    \    currentLetter = Character.toString(c);\n            currentCount++;\n   \
    \         // If letter already in hashmap, increment count\n            if (result.containsKey(currentLetter))\
    \ {\n                result.get(currentLetter)++;\n            } else {\n    \
    \            // If letter not present, add it to hashmap with count 1\n      \
    \          result.put(currentLetter, 1);\n            }\n        }\n        //\
    \ Return result\n        return result;\nreturn new HashMap<String,Integer>();\n\
    \    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdqojm7y3.java:29: error: unexpected type\n                result.get(currentLetter)++;\n\
    \                          ^\n  required: variable\n  found:    value\n/tmp/tmpdqojm7y3.java:40:\
    \ error: cannot find symbol\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n                                                     \
    \                    ^\n  symbol:   method of(String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmpdqojm7y3.java:41: error: cannot find symbol\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                           ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmpdqojm7y3.java:42:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpdqojm7y3.java:43: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpdqojm7y3.java:44: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmpdqojm7y3.java:45: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \     ^\n  symbol:   method of(String,int,String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmpdqojm7y3.java:47: error"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> result = new HashMap<>();\n\
    \        test.toCharArray().stream().mapToInt(c -> c).forEach(e -> {\n       \
    \     Integer count = result.get(e);\n            if (count == null) {\n     \
    \           result.put(e, 1);\n            } else {\n                result.put(e,\
    \ count + 1);\n            }\n        });\n        return result;\nreturn new\
    \ HashMap<String,Integer>();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4ty_p899.java:20: error: cannot find symbol\n        test.toCharArray().stream().mapToInt(c\
    \ -> c).forEach(e -> {\n                          ^\n  symbol:   method stream()\n\
    \  location: class char[]\n/tmp/tmp4ty_p899.java:32: error: cannot find symbol\n\
    \    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n                                                     \
    \                    ^\n  symbol:   method of(String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmp4ty_p899.java:33: error: cannot find symbol\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                           ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmp4ty_p899.java:34:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmp4ty_p899.java:35: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmp4ty_p899.java:36: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmp4ty_p899.java:37: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \     ^\n  symbol:   method of(String,int,String,int,String,int)\n  location:\
    \ inter"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> map = new HashMap<String,Integer>();\n\
    \        String[] words = test.split(\" \");\n        Arrays.sort(words);\n  \
    \      int highest = 0;\n        for(String word : words) {\n            map.put(word,\
    \ map.containsKey(word) ? map.get(word) + 1 : 1);\n            int current = map.get(word);\n\
    \            if(current > highest) {\n                highest = current;\n   \
    \         }\n        }\n        return map;\nreturn new HashMap<String,Integer>();\n\
    \    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6i35nyc_.java:34: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                         ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmp6i35nyc_.java:35:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n                  \
    \                                                         ^\n  symbol:   method\
    \ of(String,int,String,int)\n  location: interface Map\n/tmp/tmp6i35nyc_.java:36:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmp6i35nyc_.java:37: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmp6i35nyc_.java:38: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmp6i35nyc_.java:39: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \     ^\n  symbol:   method of(String,int,String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmp6i35nyc_.java:41: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 1)))));\n            \
    \                                            "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> map = new HashMap<String,Integer>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            map.put(word,0);\n        }\n        Arrays.sort(words);\n  \
    \      for (String word : words) {\n            if (map.containsKey(word)) {\n\
    \                map.put(word,map.get(word)+1);\n            }\n        }\n  \
    \      return map;\nreturn new HashMap<String,Integer>();\n    }\n    public static\
    \ void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpr7l7qd4e.java:34: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                         ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmpr7l7qd4e.java:35:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n                  \
    \                                                         ^\n  symbol:   method\
    \ of(String,int,String,int)\n  location: interface Map\n/tmp/tmpr7l7qd4e.java:36:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpr7l7qd4e.java:37: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpr7l7qd4e.java:38: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmpr7l7qd4e.java:39: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \     ^\n  symbol:   method of(String,int,String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmpr7l7qd4e.java:41: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 1)))));\n            \
    \                                            "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> map = new HashMap<>();\n\
    \        String[] array = test.split(\" \");\n        for (String word : array)\
    \ {\n            if (!map.containsKey(word)) {\n                map.put(word,\
    \ 1);\n            } else {\n                int count = map.get(word);\n    \
    \            map.put(word, count + 1);\n            }\n        }\n        return\
    \ map;\nreturn new HashMap<String,Integer>();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7tvw0vto.java:33: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                         ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmp7tvw0vto.java:34:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n                  \
    \                                                         ^\n  symbol:   method\
    \ of(String,int,String,int)\n  location: interface Map\n/tmp/tmp7tvw0vto.java:35:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmp7tvw0vto.java:36: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmp7tvw0vto.java:37: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmp7tvw0vto.java:38: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \     ^\n  symbol:   method of(String,int,String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmp7tvw0vto.java:40: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 1)))));\n            \
    \                                            "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> result = new HashMap<String,Integer>();\n\
    \        for(String letter : test.split(\" \")) {\n            if(!result.containsKey(letter))\
    \ {\n                result.put(letter, 1);\n            } else {\n          \
    \      int counter = result.get(letter);\n                result.put(letter, counter\
    \ + 1);\n            }\n        }\n        return result;\nreturn new HashMap<String,Integer>();\n\
    \    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3pdw3ohu.java:32: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                         ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmp3pdw3ohu.java:33:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n                  \
    \                                                         ^\n  symbol:   method\
    \ of(String,int,String,int)\n  location: interface Map\n/tmp/tmp3pdw3ohu.java:34:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmp3pdw3ohu.java:35: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmp3pdw3ohu.java:36: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmp3pdw3ohu.java:37: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \     ^\n  symbol:   method of(String,int,String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmp3pdw3ohu.java:39: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 1)))));\n            \
    \                                            "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> map = new HashMap<>();\n\
    \        Arrays.stream(test.split(\" \")).forEach(s -> {\n            if(map.containsKey(s))\
    \ {\n                map.put(s, map.get(s) + 1);\n            }\n            else\
    \ {\n                map.put(s, 1);\n            }\n        });\n        return\
    \ map;\nreturn new HashMap<String,Integer>();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5gepbtss.java:32: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                         ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmp5gepbtss.java:33:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n                  \
    \                                                         ^\n  symbol:   method\
    \ of(String,int,String,int)\n  location: interface Map\n/tmp/tmp5gepbtss.java:34:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmp5gepbtss.java:35: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmp5gepbtss.java:36: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmp5gepbtss.java:37: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \     ^\n  symbol:   method of(String,int,String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmp5gepbtss.java:39: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 1)))));\n            \
    \                                            "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> histogram = new HashMap<>();\n\
    \        String[] words = test.split(\"\\\\s\");\n        for(int i = 0; i < words.length;\
    \ i++){\n            if (histogram.containsKey(words[i])){\n                histogram.put(words[i],\
    \ histogram.get(words[i]) + 1);\n            }\n            else {\n         \
    \       histogram.put(words[i], 1);\n            }\n        }\n        return\
    \ histogram;\nreturn new HashMap<String,Integer>();\n    }\n    public static\
    \ void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpk_rk2cwx.java:33: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                         ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmpk_rk2cwx.java:34:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n                  \
    \                                                         ^\n  symbol:   method\
    \ of(String,int,String,int)\n  location: interface Map\n/tmp/tmpk_rk2cwx.java:35:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpk_rk2cwx.java:36: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpk_rk2cwx.java:37: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmpk_rk2cwx.java:38: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \     ^\n  symbol:   method of(String,int,String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmpk_rk2cwx.java:40: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 1)))));\n            \
    \                                            "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> histogram = new HashMap<String,Integer>();\n\
    \        int letterCount = 0;\n        for(char c : test.toCharArray()) {\n  \
    \          String s = String.valueOf(c);\n            histogram.put(s, histogram.getOrDefault(s,0)\
    \ + 1);\n            letterCount++;\n        }\n        // If no letter occurs\
    \ more than once, return an empty map.\n        if(letterCount > 1)\n        \
    \    return histogram;\n        // If the map contains only one element, return\
    \ the map itself.\n        if(histogram.size() == 1)\n            return histogram;\n\
    \        // Sort by value and return first element.\n        return Collections.max(histogram.entrySet(),\
    \ (o1,o2) -> o1.getValue() - o2.getValue());\nreturn new HashMap<String,Integer>();\n\
    \    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpeq7691qt.java:33: error: incompatible types: inferred type does\
    \ not conform to upper bound(s)\n        return Collections.max(histogram.entrySet(),\
    \ (o1,o2) -> o1.getValue() - o2.getValue());\n                              ^\n\
    \    inferred: Entry<String,Integer>\n    upper bound(s): HashMap<String,Integer>,Object\n\
    /tmp/tmpeq7691qt.java:37: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                         ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmpeq7691qt.java:38:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n                  \
    \                                                         ^\n  symbol:   method\
    \ of(String,int,String,int)\n  location: interface Map\n/tmp/tmpeq7691qt.java:39:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpeq7691qt.java:40: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpeq7691qt.java:41: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmpeq7691qt.java:42: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n                              "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> testDict = new HashMap<String,Integer>();\n\
    \        Set<String> tempDict = new HashSet<String>();\n        int max = 0;\n\
    \        for (String value : test.split(\" \")) {\n            if (!testDict.containsKey(value))\
    \ {\n                testDict.put(value,1);\n            } else {\n          \
    \      temp = testDict.get(value);\n                if (temp > max) {\n      \
    \              max = temp;\n                    tempDict = new HashSet<String>();\n\
    \                    tempDict.add(value);\n                }\n               \
    \ else {\n                    tempDict.add(value);\n                }\n      \
    \      }\n        }\n        for (String value : tempDict) {\n            testDict.put(value,testDict.get(value)\
    \ + 1);\n        }\n        return testDict;\nreturn new HashMap<String,Integer>();\n\
    \    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpsubknl94.java:26: error: cannot find symbol\n                temp\
    \ = testDict.get(value);\n                ^\n  symbol:   variable temp\n  location:\
    \ class Problem\n/tmp/tmpsubknl94.java:27: error: cannot find symbol\n       \
    \         if (temp > max) {\n                    ^\n  symbol:   variable temp\n\
    \  location: class Problem\n/tmp/tmpsubknl94.java:28: error: cannot find symbol\n\
    \                    max = temp;\n                          ^\n  symbol:   variable\
    \ temp\n  location: class Problem\n/tmp/tmpsubknl94.java:44: error: cannot find\
    \ symbol\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n                                                     \
    \                    ^\n  symbol:   method of(String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmpsubknl94.java:45: error: cannot find symbol\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                           ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmpsubknl94.java:46:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpsubknl94.java:47: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpsubknl94.java:48: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmpsubkn"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> map = new HashMap<String,Integer>();\n\
    \        for(int i = 0; i < test.length(); i++){\n            String key = test.substring(i,\
    \ i + 1);\n            if(map.containsKey(key)){\n                int count =\
    \ map.get(key) + 1;\n                map.put(key, count);\n            } else\
    \ {\n                map.put(key, 1);\n            }\n        }\n        return\
    \ map;\nreturn new HashMap<String,Integer>();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3jb76hvd.java:33: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                         ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmp3jb76hvd.java:34:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n                  \
    \                                                         ^\n  symbol:   method\
    \ of(String,int,String,int)\n  location: interface Map\n/tmp/tmp3jb76hvd.java:35:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmp3jb76hvd.java:36: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmp3jb76hvd.java:37: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmp3jb76hvd.java:38: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \     ^\n  symbol:   method of(String,int,String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmp3jb76hvd.java:40: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 1)))));\n            \
    \                                            "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> histo = new HashMap<>();\n\
    \        String[] tokens = test.split(\" \");\n        for (String token : tokens)\
    \ {\n            int counter = 0;\n            List<String> letters = Arrays.asList(token.toLowerCase().split(\"\
    \"));\n            for (String letter : letters) {\n                counter =\
    \ histo.get(letter);\n                if (counter == null) histo = new HashMap<>();\n\
    \                if (counter == null) histo = new HashMap<>();\n             \
    \   else {\n                    int count = counter + 1;\n                   \
    \ counter = count;\n                }\n                histo.put(letter, counter);\n\
    \            }\n        }\n        return histo;\nreturn new HashMap<String,Integer>();\n\
    \    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdc6gywj5.java:26: error: incomparable types: int and <null>\n \
    \               if (counter == null) histo = new HashMap<>();\n              \
    \              ^\n/tmp/tmpdc6gywj5.java:27: error: incomparable types: int and\
    \ <null>\n                if (counter == null) histo = new HashMap<>();\n    \
    \                        ^\n/tmp/tmpdc6gywj5.java:39: error: cannot find symbol\n\
    \    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n                                                     \
    \                    ^\n  symbol:   method of(String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmpdc6gywj5.java:40: error: cannot find symbol\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                           ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmpdc6gywj5.java:41:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpdc6gywj5.java:42: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpdc6gywj5.java:43: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmpdc6gywj5.java:44: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n                           "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> histogram = new HashMap<>();\n\
    \        for (String s: test.split(\" \")) {\n            if (histogram.containsKey(s))\
    \ {\n                histogram.put(s, histogram.get(s) + 1);\n            } else\
    \ {\n                histogram.put(s, 1);\n            }\n        }\n        return\
    \ histogram;\nreturn new HashMap<String,Integer>();\n    }\n    public static\
    \ void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpo1mw7s1v.java:31: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                         ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmpo1mw7s1v.java:32:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n                  \
    \                                                         ^\n  symbol:   method\
    \ of(String,int,String,int)\n  location: interface Map\n/tmp/tmpo1mw7s1v.java:33:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpo1mw7s1v.java:34: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpo1mw7s1v.java:35: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmpo1mw7s1v.java:36: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \     ^\n  symbol:   method of(String,int,String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmpo1mw7s1v.java:38: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 1)))));\n            \
    \                                            "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        return test.split(\" \").stream().collect(Collectors.toMap(String::toLowerCase,\
    \ s -> 1, Integer::sum));\nreturn new HashMap<String,Integer>();\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmplgjw_5un.java:19: error: cannot find symbol\n        return test.split(\"\
    \ \").stream().collect(Collectors.toMap(String::toLowerCase, s -> 1, Integer::sum));\n\
    \                              ^\n  symbol:   method stream()\n  location: class\
    \ String[]\n/tmp/tmplgjw_5un.java:19: error: incompatible types: cannot infer\
    \ type-variable(s) T,K,U\n        return test.split(\" \").stream().collect(Collectors.toMap(String::toLowerCase,\
    \ s -> 1, Integer::sum));\n                                                  \
    \              ^\n    (argument mismatch; invalid method reference\n      incompatible\
    \ types: Object cannot be converted to Locale)\n  where T,K,U are type-variables:\n\
    \    T extends Object declared in method <T,K,U>toMap(Function<? super T,? extends\
    \ K>,Function<? super T,? extends U>,BinaryOperator<U>)\n    K extends Object\
    \ declared in method <T,K,U>toMap(Function<? super T,? extends K>,Function<? super\
    \ T,? extends U>,BinaryOperator<U>)\n    U extends Object declared in method <T,K,U>toMap(Function<?\
    \ super T,? extends K>,Function<? super T,? extends U>,BinaryOperator<U>)\n/tmp/tmplgjw_5un.java:19:\
    \ error: invalid method reference\n        return test.split(\" \").stream().collect(Collectors.toMap(String::toLowerCase,\
    \ s -> 1, Integer::sum));\n                                                  \
    \               ^\n  non-static method toLowerCase() cannot be referenced from\
    \ a static context\n/tmp/tmplgjw_5un.java:23: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                         ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmplgjw_5un.java:24:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n                  \
    \                                                         ^\n  symbol:   method\
    \ of(String,int,String,int)\n  location: interface Map\n/tmp/tmplgjw_5un.java:25:\
    \ error: cannot find symbol\n    assert(histogra"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> result = new HashMap<>();\n\
    \        test.chars().mapToObj(x -> x.toString()).forEach(result::put);\n    \
    \    return result;\nreturn new HashMap<String,Integer>();\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmphrwe4l5j.java:20: error: int cannot be dereferenced\n        test.chars().mapToObj(x\
    \ -> x.toString()).forEach(result::put);\n                                   \
    \ ^\n/tmp/tmphrwe4l5j.java:20: error: incompatible types: invalid method reference\n\
    \        test.chars().mapToObj(x -> x.toString()).forEach(result::put);\n    \
    \                                                     ^\n    no suitable method\
    \ found for put(Object)\n        method Map.put(String,Integer) is not applicable\n\
    \          (actual and formal argument lists differ in length)\n        method\
    \ AbstractMap.put(String,Integer) is not applicable\n          (actual and formal\
    \ argument lists differ in length)\n        method HashMap.put(String,Integer)\
    \ is not applicable\n          (actual and formal argument lists differ in length)\n\
    /tmp/tmphrwe4l5j.java:25: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                         ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmphrwe4l5j.java:26:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n                  \
    \                                                         ^\n  symbol:   method\
    \ of(String,int,String,int)\n  location: interface Map\n/tmp/tmphrwe4l5j.java:27:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmphrwe4l5j.java:28: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interfa"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> map = new HashMap<>();\n\
    \        // use split for getting an array of characters\n        // use forEach\
    \ and split to get an array of words\n        // put and get will be synchronized\
    \ by default, so no need for synchronized block\n        test.split(\" \")\n \
    \           .stream()\n            .forEach(s -> map.put(s, map.getOrDefault(s,\
    \ 0)+1));\n        return map;\nreturn new HashMap<String,Integer>();\n    }\n\
    \    public static void main(String[] args) {\n    assert(histogram((\"a b b a\"\
    )).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmppfzn91ws.java:24: error: cannot find symbol\n            .stream()\n\
    \            ^\n  symbol:   method stream()\n  location: class String[]\n/tmp/tmppfzn91ws.java:30:\
    \ error: cannot find symbol\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n                                                     \
    \                    ^\n  symbol:   method of(String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmppfzn91ws.java:31: error: cannot find symbol\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                           ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmppfzn91ws.java:32:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmppfzn91ws.java:33: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmppfzn91ws.java:34: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmppfzn91ws.java:35: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \     ^\n  symbol:   method of(String,int,String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmppfzn91ws.java:37: error: cannot find symb"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        // Solution goes here\n        return null;\n\
    return new HashMap<String,Integer>();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqtzqwu73.java:24: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                         ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmpqtzqwu73.java:25:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n                  \
    \                                                         ^\n  symbol:   method\
    \ of(String,int,String,int)\n  location: interface Map\n/tmp/tmpqtzqwu73.java:26:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpqtzqwu73.java:27: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpqtzqwu73.java:28: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmpqtzqwu73.java:29: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \     ^\n  symbol:   method of(String,int,String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmpqtzqwu73.java:31: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 1)))));\n            \
    \                                            "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> result = new HashMap<String,Integer>();\n\
    \        if (test == null || test.length() == 0) return result;\n        // Split\
    \ into words\n        String[] words = test.split(\" \");\n        HashSet<String>\
    \ set = new HashSet<String>(Arrays.asList(words));\n        for (String word :\
    \ set) {\n            int occurrences = Collections.frequency(Arrays.asList(words),\
    \ word);\n            if (occurrences > 0) {\n                result.put(word,\
    \ occurrences);\n            }\n        }\n        return result;\nreturn new\
    \ HashMap<String,Integer>();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpi5h8y3fn.java:34: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                         ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmpi5h8y3fn.java:35:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n                  \
    \                                                         ^\n  symbol:   method\
    \ of(String,int,String,int)\n  location: interface Map\n/tmp/tmpi5h8y3fn.java:36:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpi5h8y3fn.java:37: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpi5h8y3fn.java:38: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmpi5h8y3fn.java:39: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \     ^\n  symbol:   method of(String,int,String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmpi5h8y3fn.java:41: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 1)))));\n            \
    \                                            "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> result = new HashMap<String,Integer>();\n\
    \n        String[] letters = test.split(\" \");\n\n        // for each of the\
    \ letters\n        for (String letter : letters) {\n            int repetitions\
    \ = 1;\n            int letterCount = 1;\n            // for each of the letters\
    \ again and compare them\n            for (String letter : letters) {\n      \
    \          // if they are the same\n                if (letter.equals(letter))\
    \ {\n                    letterCount += 1;\n                } else {\n       \
    \             repetitions += 1;\n                }\n            }\n          \
    \  if (repetitions > letterCount) {\n                result.put(letter, repetitions);\n\
    \            } else {\n                result.put(letter, letterCount);\n    \
    \        }\n        }\n        return result;\nreturn new HashMap<String,Integer>();\n\
    \    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwlsbafy6.java:28: error: variable letter is already defined in\
    \ method histogram(String)\n            for (String letter : letters) {\n    \
    \                    ^\n/tmp/tmpwlsbafy6.java:46: error: cannot find symbol\n\
    \    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n                                                     \
    \                    ^\n  symbol:   method of(String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmpwlsbafy6.java:47: error: cannot find symbol\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                           ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmpwlsbafy6.java:48:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpwlsbafy6.java:49: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpwlsbafy6.java:50: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmpwlsbafy6.java:51: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \     ^\n  symbol:   method of(String,int,String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmpwlsbafy6.java:53: "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> count = new HashMap<String,Integer>();\n\
    \        for (String s : test.split(\" \"))\n            if (count.containsKey(s))\n\
    \                count.put(s,count.get(s)+1);\n            else\n            \
    \    count.put(s,1);\n        return count;\nreturn new HashMap<String,Integer>();\n\
    \    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpiq0t7uot.java:29: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                         ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmpiq0t7uot.java:30:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n                  \
    \                                                         ^\n  symbol:   method\
    \ of(String,int,String,int)\n  location: interface Map\n/tmp/tmpiq0t7uot.java:31:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpiq0t7uot.java:32: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpiq0t7uot.java:33: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmpiq0t7uot.java:34: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \     ^\n  symbol:   method of(String,int,String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmpiq0t7uot.java:36: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 1)))));\n            \
    \                                            "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> result = new HashMap<String,Integer>();\n\
    \        String[] split = test.split(\" \");\n        for(String s:split){\n \
    \           if(!s.isEmpty()){\n                Integer old = result.get(s);\n\
    \                if(old==null){\n                    result.put(s,1);\n      \
    \          }\n                else{\n                    result.put(s,old+1);\n\
    \                }\n            }\n        }\n        return result;\nreturn new\
    \ HashMap<String,Integer>();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzy5ngf1y.java:36: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                         ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmpzy5ngf1y.java:37:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n                  \
    \                                                         ^\n  symbol:   method\
    \ of(String,int,String,int)\n  location: interface Map\n/tmp/tmpzy5ngf1y.java:38:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpzy5ngf1y.java:39: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpzy5ngf1y.java:40: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmpzy5ngf1y.java:41: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \     ^\n  symbol:   method of(String,int,String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmpzy5ngf1y.java:43: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 1)))));\n            \
    \                                            "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        if(test.isEmpty()) return new HashMap<String,Integer>();\n\
    \        HashMap<String,Integer> map = new HashMap<String,Integer>();\n      \
    \  for(int i=0; i<test.length(); i++)\n            if(!map.containsKey(test.charAt(i)))\n\
    \                map.put(test.charAt(i),1);\n            else\n              \
    \  map.put(test.charAt(i),map.get(test.charAt(i))+1);\n        for(Map.Entry<String,Integer>\
    \ e: map.entrySet())\n            e.setValue(e.getValue()/test.length());\n  \
    \      return map;\nreturn new HashMap<String,Integer>();\n    }\n    public static\
    \ void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmppp24zz57.java:23: error: no suitable method found for put(char,int)\n\
    \                map.put(test.charAt(i),1);\n                   ^\n    method\
    \ Map.put(String,Integer) is not applicable\n      (argument mismatch; char cannot\
    \ be converted to String)\n    method AbstractMap.put(String,Integer) is not applicable\n\
    \      (argument mismatch; char cannot be converted to String)\n    method HashMap.put(String,Integer)\
    \ is not applicable\n      (argument mismatch; char cannot be converted to String)\n\
    /tmp/tmppp24zz57.java:25: error: no suitable method found for put(char,int)\n\
    \                map.put(test.charAt(i),map.get(test.charAt(i))+1);\n        \
    \           ^\n    method Map.put(String,Integer) is not applicable\n      (argument\
    \ mismatch; char cannot be converted to String)\n    method AbstractMap.put(String,Integer)\
    \ is not applicable\n      (argument mismatch; char cannot be converted to String)\n\
    \    method HashMap.put(String,Integer) is not applicable\n      (argument mismatch;\
    \ char cannot be converted to String)\n/tmp/tmppp24zz57.java:32: error: cannot\
    \ find symbol\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n                                                     \
    \                    ^\n  symbol:   method of(String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmppp24zz57.java:33: error: cannot find symbol\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                           ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmppp24zz57.java:34:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmppp24zz57.java:35: error: cannot find symbol\n\
    \    assert(histogram((\"r "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        if (test == null || test.equals(\"\")) {\n\
    \            return new HashMap<String,Integer>();\n        }\n        String[]\
    \ words = test.split(\" \");\n        HashMap<String,Integer> result = new HashMap<String,Integer>();\n\
    \        for (String word : words) {\n            if (word != null) {\n      \
    \          Integer count = result.get(word);\n                if (count == null)\
    \ {\n                    count = 1;\n                } else {\n              \
    \      count++;\n                }\n                result.put(word, count);\n\
    \            }\n        }\n        return result;\nreturn new HashMap<String,Integer>();\n\
    \    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfj154a29.java:39: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                         ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmpfj154a29.java:40:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n                  \
    \                                                         ^\n  symbol:   method\
    \ of(String,int,String,int)\n  location: interface Map\n/tmp/tmpfj154a29.java:41:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpfj154a29.java:42: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpfj154a29.java:43: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmpfj154a29.java:44: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \     ^\n  symbol:   method of(String,int,String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmpfj154a29.java:46: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 1)))));\n            \
    \                                            "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hist = new HashMap<>();\n\
    \        // Split into words\n        String[] words=test.split(\" \");\n    \
    \    for (String word : words) {\n            // If the letter is in the histogram\
    \ count it\n            if (hist.containsKey(word)) {\n                hist.put(word,\
    \ hist.get(word) + 1);\n            }\n            // If not, add the letter\n\
    \            else {\n                hist.put(word, 1);\n            }\n     \
    \   }\n        // Return the histogram as requested\n        return hist;\nreturn\
    \ new HashMap<String,Integer>();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpe4x_eis8.java:37: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                         ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmpe4x_eis8.java:38:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n                  \
    \                                                         ^\n  symbol:   method\
    \ of(String,int,String,int)\n  location: interface Map\n/tmp/tmpe4x_eis8.java:39:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpe4x_eis8.java:40: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpe4x_eis8.java:41: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmpe4x_eis8.java:42: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \     ^\n  symbol:   method of(String,int,String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmpe4x_eis8.java:44: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 1)))));\n            \
    \                                            "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> map = new HashMap<>();\n\
    \        int maxCount = 0;\n        for(String letter : test.split(\" \"))\n \
    \       {\n            int currentCount = map.get(letter);\n            if(currentCount\
    \ > maxCount)\n            {\n                maxCount = currentCount;\n     \
    \       }\n            else if(currentCount == maxCount)\n            {\n    \
    \            currentCount++;\n            }\n            map.put(letter, currentCount);\n\
    \        }\n        return map;\nreturn new HashMap<String,Integer>();\n    }\n\
    \    public static void main(String[] args) {\n    assert(histogram((\"a b b a\"\
    )).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmppmci9fqi.java:38: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                         ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmppmci9fqi.java:39:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n                  \
    \                                                         ^\n  symbol:   method\
    \ of(String,int,String,int)\n  location: interface Map\n/tmp/tmppmci9fqi.java:40:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmppmci9fqi.java:41: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmppmci9fqi.java:42: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmppmci9fqi.java:43: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \     ^\n  symbol:   method of(String,int,String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmppmci9fqi.java:45: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 1)))));\n            \
    \                                            "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> map = new HashMap<String,Integer>();\n\
    \        String[] strings = test.split(\" \");\n        Arrays.sort(strings);\n\
    \        for(String s : strings)\n            map.put(s, map.getOrDefault(s, 0)\
    \ + 1);\n        return map;\nreturn new HashMap<String,Integer>();\n    }\n \
    \   public static void main(String[] args) {\n    assert(histogram((\"a b b a\"\
    )).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpcp8avwd3.java:28: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                         ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmpcp8avwd3.java:29:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n                  \
    \                                                         ^\n  symbol:   method\
    \ of(String,int,String,int)\n  location: interface Map\n/tmp/tmpcp8avwd3.java:30:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpcp8avwd3.java:31: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpcp8avwd3.java:32: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmpcp8avwd3.java:33: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \     ^\n  symbol:   method of(String,int,String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmpcp8avwd3.java:35: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 1)))));\n            \
    \                                            "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> histogram = new HashMap<>();\n\
    \        for(int i = 0; i < test.length(); i++) {\n            String letter =\
    \ test.substring(i, i+1);\n            Integer count = histogram.get(letter);\n\
    \            histogram.put(letter, count == null ? 1 : count + 1);\n        }\n\
    \        return histogram;\nreturn new HashMap<String,Integer>();\n    }\n   \
    \ public static void main(String[] args) {\n    assert(histogram((\"a b b a\"\
    )).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpmw7wmjn1.java:29: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                         ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmpmw7wmjn1.java:30:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n                  \
    \                                                         ^\n  symbol:   method\
    \ of(String,int,String,int)\n  location: interface Map\n/tmp/tmpmw7wmjn1.java:31:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpmw7wmjn1.java:32: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpmw7wmjn1.java:33: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmpmw7wmjn1.java:34: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \     ^\n  symbol:   method of(String,int,String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmpmw7wmjn1.java:36: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 1)))));\n            \
    \                                            "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> map = new HashMap<>();\n\
    \        Set<String> set = new HashSet<>();\n        String[] strings = test.split(\"\
    \ \");\n        for (String s:strings) {\n            if (!map.containsKey(s))\
    \ {\n                map.put(s, 1);\n                set.add(s);\n           \
    \ }\n            else {\n                int tmp = map.get(s);\n             \
    \   map.put(s, ++tmp);\n            }\n        }\n        System.out.println(set);\n\
    \        System.out.println(map);\n        Collections.sort(set);\n        for\
    \ (String s: set) {\n            map.put(s, map.get(s)==1?map.get(s)+1:map.get(s));\n\
    \        }\n        return map;\nreturn new HashMap<String,Integer>();\n    }\n\
    \    public static void main(String[] args) {\n    assert(histogram((\"a b b a\"\
    )).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2p9wlkiv.java:34: error: no suitable method found for sort(Set<String>)\n\
    \        Collections.sort(set);\n                   ^\n    method Collections.<T#1>sort(List<T#1>)\
    \ is not applicable\n      (cannot infer type-variable(s) T#1\n        (argument\
    \ mismatch; Set<String> cannot be converted to List<T#1>))\n    method Collections.<T#2>sort(List<T#2>,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Comparable<? super T#1> declared in method\
    \ <T#1>sort(List<T#1>)\n    T#2 extends Object declared in method <T#2>sort(List<T#2>,Comparator<?\
    \ super T#2>)\n/tmp/tmp2p9wlkiv.java:42: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                         ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmp2p9wlkiv.java:43:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n                  \
    \                                                         ^\n  symbol:   method\
    \ of(String,int,String,int)\n  location: interface Map\n/tmp/tmp2p9wlkiv.java:44:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmp2p9wlkiv.java:45: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmp2p9wlkiv.java:46: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        if (test.isEmpty()) {\n            return\
    \ new HashMap<>();\n        }\n\n        String[] words = test.split(\" \");\n\
    \        HashMap<String,Integer> histogram = new HashMap<>();\n\n        for (int\
    \ i = 0; i < words.length; i++) {\n            String word = words[i];\n     \
    \       Integer freq = histogram.getOrDefault(word, 0);\n            histogram.put(word,\
    \ freq + 1);\n        }\n\n        return histogram;\nreturn new HashMap<String,Integer>();\n\
    \    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmphm4q4tpx.java:36: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                         ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmphm4q4tpx.java:37:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n                  \
    \                                                         ^\n  symbol:   method\
    \ of(String,int,String,int)\n  location: interface Map\n/tmp/tmphm4q4tpx.java:38:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmphm4q4tpx.java:39: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmphm4q4tpx.java:40: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmphm4q4tpx.java:41: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \     ^\n  symbol:   method of(String,int,String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmphm4q4tpx.java:43: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 1)))));\n            \
    \                                            "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> result = new HashMap<String,Integer>();\n\
    \        String letters = test;\n        String[] letterArray = letters.split(\"\
    \ \");\n        for(int i = 0; i < letterArray.length; i++) {\n            String\
    \ letter = letterArray[i];\n            Integer count = result.get(letter);\n\
    \            if(!result.containsKey(letter)) {\n                result.put(letter,\
    \ 1);\n            } else {\n                result.put(letter, result.get(letter)\
    \ + 1);\n            }\n        }\n        return result;\nreturn new HashMap<String,Integer>();\n\
    \    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpkvzj053l.java:35: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                         ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmpkvzj053l.java:36:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n                  \
    \                                                         ^\n  symbol:   method\
    \ of(String,int,String,int)\n  location: interface Map\n/tmp/tmpkvzj053l.java:37:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpkvzj053l.java:38: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpkvzj053l.java:39: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmpkvzj053l.java:40: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \     ^\n  symbol:   method of(String,int,String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmpkvzj053l.java:42: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 1)))));\n            \
    \                                            "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> map = new HashMap<String,Integer>();\n\
    \        String[] words = test.split(\" \");\n        for (int i = 0; i < words.length;\
    \ i++) {\n            map.computeIfAbsent(words[i], k -> 0);\n            map.compute(words[i],\
    \ (k1, v1) -> v1 + 1);\n        }\n        return map;\nreturn new HashMap<String,Integer>();\n\
    \    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmps1zo18ey.java:29: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                         ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmps1zo18ey.java:30:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n                  \
    \                                                         ^\n  symbol:   method\
    \ of(String,int,String,int)\n  location: interface Map\n/tmp/tmps1zo18ey.java:31:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmps1zo18ey.java:32: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmps1zo18ey.java:33: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmps1zo18ey.java:34: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \     ^\n  symbol:   method of(String,int,String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmps1zo18ey.java:36: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 1)))));\n            \
    \                                            "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> map = new HashMap<>();\n\
    \        HashSet<String> set = new HashSet<>();\n        char[] charArray = test.toCharArray();\n\
    \        for(int i = 0; i < charArray.length; i++) {\n            String s = String.valueOf(charArray[i]);\n\
    \            set.add(s);\n            if(map.containsKey(s)) {\n             \
    \   Integer current = map.get(s);\n                map.put(s, Integer.valueOf(current)\
    \ + 1);\n            } else {\n                map.put(s, 1);\n            }\n\
    \        }\n        Set<String> set2 = new HashSet<>(map);\n        set2.removeAll(set);\n\
    \        for(String s : set2) {\n            if(map.containsValue(maxCount(map)))\
    \ {\n                map.put(s, maxCount(map));\n            }\n        }\n  \
    \      return map;\nreturn new HashMap<String,Integer>();\n    }\n    public static\
    \ void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfmoyyc9t.java:32: error: cannot infer type arguments for HashSet<>\n\
    \        Set<String> set2 = new HashSet<>(map);\n                           ^\n\
    /tmp/tmpfmoyyc9t.java:35: error: cannot find symbol\n            if(map.containsValue(maxCount(map)))\
    \ {\n                                 ^\n  symbol:   method maxCount(HashMap<String,Integer>)\n\
    \  location: class Problem\n/tmp/tmpfmoyyc9t.java:36: error: cannot find symbol\n\
    \                map.put(s, maxCount(map));\n                           ^\n  symbol:\
    \   method maxCount(HashMap<String,Integer>)\n  location: class Problem\n/tmp/tmpfmoyyc9t.java:43:\
    \ error: cannot find symbol\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n                                                     \
    \                    ^\n  symbol:   method of(String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmpfmoyyc9t.java:44: error: cannot find symbol\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                           ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmpfmoyyc9t.java:45:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpfmoyyc9t.java:46: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpfmoyyc9t.java:47: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \      "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        String[] letters = test.split(\" \");\n  \
    \      HashMap<String,Integer> dict = new HashMap<>();\n        for(int i=0; i<letters.length;\
    \ i++)\n            if(letters[i].length() > 0) {\n                int c = dict.containsKey(letters[i])\
    \ ? dict.get(letters[i]) : 0;\n                dict.put(letters[i], c+1);\n  \
    \          }\n        return dict;\nreturn new HashMap<String,Integer>();\n  \
    \  }\n    public static void main(String[] args) {\n    assert(histogram((\"a\
    \ b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5fi16444.java:30: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                         ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmp5fi16444.java:31:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n                  \
    \                                                         ^\n  symbol:   method\
    \ of(String,int,String,int)\n  location: interface Map\n/tmp/tmp5fi16444.java:32:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmp5fi16444.java:33: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmp5fi16444.java:34: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmp5fi16444.java:35: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \     ^\n  symbol:   method of(String,int,String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmp5fi16444.java:37: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 1)))));\n            \
    \                                            "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        // TODO: implement me\n        HashMap<String,Integer>\
    \ map = new HashMap<String,Integer>();\n        String[] splitted = test.split(\"\
    \ \");\n        for(String word : splitted){\n            if(!map.containsKey(word)){\n\
    \                map.put(word, 1);\n            }else {\n                int c\
    \ = map.get(word);\n                map.put(word, c + 1);\n            }\n   \
    \     }\n        return map;\nreturn new HashMap<String,Integer>();\n    }\n \
    \   public static void main(String[] args) {\n    assert(histogram((\"a b b a\"\
    )).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0jbv9spa.java:34: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                         ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmp0jbv9spa.java:35:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n                  \
    \                                                         ^\n  symbol:   method\
    \ of(String,int,String,int)\n  location: interface Map\n/tmp/tmp0jbv9spa.java:36:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmp0jbv9spa.java:37: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmp0jbv9spa.java:38: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmp0jbv9spa.java:39: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \     ^\n  symbol:   method of(String,int,String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmp0jbv9spa.java:41: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 1)))));\n            \
    \                                            "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> map = new HashMap<String,Integer>();\n\
    \        String[] tests = test.split(\" \");\n        for(String test : tests)\
    \ {\n            if(map.containsKey(test)) {\n                map.put(test, map.get(test)+1);\n\
    \            } else {\n                map.put(test, 1);\n            }\n    \
    \    }\n        return map;\nreturn new HashMap<String,Integer>();\n    }\n  \
    \  public static void main(String[] args) {\n    assert(histogram((\"a b b a\"\
    )).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpu8y76v25.java:21: error: variable test is already defined in method\
    \ histogram(String)\n        for(String test : tests) {\n                   ^\n\
    /tmp/tmpu8y76v25.java:32: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                         ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmpu8y76v25.java:33:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n                  \
    \                                                         ^\n  symbol:   method\
    \ of(String,int,String,int)\n  location: interface Map\n/tmp/tmpu8y76v25.java:34:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpu8y76v25.java:35: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpu8y76v25.java:36: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmpu8y76v25.java:37: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \     ^\n  symbol:   method of(String,int,String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmpu8y76v25.java:39: error: cannot fi"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> map = new HashMap<String,Integer>();\n\
    \        for(String s : test.split(\" \")){\n            if(map.containsKey(s)){\n\
    \                map.put(s,map.get(s)+1);\n            }else{\n              \
    \  map.put(s,1);\n            }\n        }\n        return map;\nreturn new HashMap<String,Integer>();\n\
    \    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8wza4o7i.java:31: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                         ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmp8wza4o7i.java:32:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n                  \
    \                                                         ^\n  symbol:   method\
    \ of(String,int,String,int)\n  location: interface Map\n/tmp/tmp8wza4o7i.java:33:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmp8wza4o7i.java:34: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmp8wza4o7i.java:35: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmp8wza4o7i.java:36: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \     ^\n  symbol:   method of(String,int,String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmp8wza4o7i.java:38: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 1)))));\n            \
    \                                            "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> result = new HashMap<String,Integer>();\n\
    \        for (String value : test.split(\" \")){\n            if (result.containsKey(value)){\n\
    \                result.put(value,result.get(value) + 1);\n            }else{\n\
    \                result.put(value, 1);\n            }\n        }\n        return\
    \ result;\nreturn new HashMap<String,Integer>();\n    }\n    public static void\
    \ main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpkyhccl0y.java:31: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                         ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmpkyhccl0y.java:32:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n                  \
    \                                                         ^\n  symbol:   method\
    \ of(String,int,String,int)\n  location: interface Map\n/tmp/tmpkyhccl0y.java:33:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpkyhccl0y.java:34: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpkyhccl0y.java:35: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmpkyhccl0y.java:36: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \     ^\n  symbol:   method of(String,int,String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmpkyhccl0y.java:38: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 1)))));\n            \
    \                                            "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> result = new HashMap<String,Integer>();\n\
    \        int max = 0;\n        for(String letter : test.split(\" \")){\n     \
    \       Integer occurences = result.get(letter);\n            int count = occurences\
    \ == null ? 1 : occurences;\n            if(count > max) {\n                max\
    \ = count;\n            }\n            result.put(letter,count);\n        }\n\
    \        return result;\nreturn new HashMap<String,Integer>();\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpsmczpk72.java:33: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                         ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmpsmczpk72.java:34:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n                  \
    \                                                         ^\n  symbol:   method\
    \ of(String,int,String,int)\n  location: interface Map\n/tmp/tmpsmczpk72.java:35:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpsmczpk72.java:36: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpsmczpk72.java:37: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmpsmczpk72.java:38: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \     ^\n  symbol:   method of(String,int,String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmpsmczpk72.java:40: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 1)))));\n            \
    \                                            "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> histogram = new HashMap<String,Integer>();\n\
    \n        // Split the test string into a character array\n        String[] charArray\
    \ = test.split(\" \");\n\n        // Iterate over every character in the array\n\
    \        for (String char : charArray) {\n            // Check if the character\
    \ is present in the histogram\n            if (!histogram.containsKey(char)) {\n\
    \                // If not, add it to the histogram\n                histogram.put(char,\
    \ 1);\n            } else {\n                // Increment the count\n        \
    \        histogram.put(char, histogram.get(char) + 1);\n            }\n      \
    \  }\n        return histogram;\nreturn new HashMap<String,Integer>();\n    }\n\
    \    public static void main(String[] args) {\n    assert(histogram((\"a b b a\"\
    )).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqhaww32f.java:25: error: not a statement\n        for (String char\
    \ : charArray) {\n             ^\n/tmp/tmpqhaww32f.java:25: error: ';' expected\n\
    \        for (String char : charArray) {\n                   ^\n/tmp/tmpqhaww32f.java:25:\
    \ error: '.class' expected\n        for (String char : charArray) {\n        \
    \                 ^\n/tmp/tmpqhaww32f.java:25: error: not a statement\n      \
    \  for (String char : charArray) {\n                           ^\n/tmp/tmpqhaww32f.java:27:\
    \ error: '.class' expected\n            if (!histogram.containsKey(char)) {\n\
    \                                           ^\n/tmp/tmpqhaww32f.java:29: error:\
    \ '.class' expected\n                histogram.put(char, 1);\n               \
    \                   ^\n/tmp/tmpqhaww32f.java:32: error: '.class' expected\n  \
    \              histogram.put(char, histogram.get(char) + 1);\n               \
    \                   ^\n/tmp/tmpqhaww32f.java:32: error: '.class' expected\n  \
    \              histogram.put(char, histogram.get(char) + 1);\n               \
    \                                       ^\n8 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String, Integer> result = new HashMap<String,Integer>();\n\
    \        String[] values = test.split(\" \");\n        for(String value:values)\
    \ {\n            Integer i = result.get(value);\n            if(i==null) result.put(value,\
    \ 1);\n            else result.put(value, i+1);\n        }\n        return result;\n\
    return new HashMap<String,Integer>();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6rlanfme.java:30: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                         ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmp6rlanfme.java:31:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n                  \
    \                                                         ^\n  symbol:   method\
    \ of(String,int,String,int)\n  location: interface Map\n/tmp/tmp6rlanfme.java:32:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmp6rlanfme.java:33: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmp6rlanfme.java:34: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmp6rlanfme.java:35: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \     ^\n  symbol:   method of(String,int,String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmp6rlanfme.java:37: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 1)))));\n            \
    \                                            "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> histogram = new HashMap<String,Integer>();\n\
    \        // get all unique letters\n        ArrayList<String> unique = new ArrayList<String>();\n\
    \        for (int i = 0; i < test.length(); i++) {\n            String charValue\
    \ = test.substring(i, i+1);\n            if (unique.contains(charValue)) continue;\n\
    \            unique.add(charValue);\n            histogram.put(charValue, new\
    \ Integer(0));\n        }\n        // count occurrences of each letter\n     \
    \   for (int i = 0; i < test.length(); i++) {\n            String charValue =\
    \ test.substring(i, i+1);\n            histogram.put(charValue, histogram.get(charValue).intValue()\
    \ + 1);\n        }\n        return histogram;\nreturn new HashMap<String,Integer>();\n\
    \    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbz4h5zaq.java:37: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                         ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmpbz4h5zaq.java:38:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n                  \
    \                                                         ^\n  symbol:   method\
    \ of(String,int,String,int)\n  location: interface Map\n/tmp/tmpbz4h5zaq.java:39:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpbz4h5zaq.java:40: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpbz4h5zaq.java:41: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmpbz4h5zaq.java:42: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \     ^\n  symbol:   method of(String,int,String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmpbz4h5zaq.java:44: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 1)))));\n            \
    \                                            "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> map = new HashMap<>();\n\
    \        \n        for(String eachWord : test.split(\" \")) {\n            for(String\
    \ eachLetter: eachWord.toCharArray()) {\n                if(!map.containsKey(eachLetter))\
    \ {\n                    map.put(eachLetter,0);\n                }\n         \
    \       int value = map.get(eachLetter) + 1;\n                map.put(eachLetter,\
    \ value);\n            }\n        }\n        \n        map.values().remove(0);\n\
    \        return map;\nreturn new HashMap<String,Integer>();\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpz8rix41r.java:22: error: incompatible types: char cannot be converted\
    \ to String\n            for(String eachLetter: eachWord.toCharArray()) {\n  \
    \                                                     ^\n/tmp/tmpz8rix41r.java:36:\
    \ error: cannot find symbol\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n                                                     \
    \                    ^\n  symbol:   method of(String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmpz8rix41r.java:37: error: cannot find symbol\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                           ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmpz8rix41r.java:38:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpz8rix41r.java:39: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpz8rix41r.java:40: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmpz8rix41r.java:41: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \     ^\n  symbol:   method of(String,int,String,int,String,int)\n  location: "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> map = new HashMap<>();\n\
    \        String[] words = test.trim().split(\" \");\n        for( String word\
    \ : words )\n            if( map.containsKey(word) )\n                map.put(word,\
    \ map.get(word)+1);\n            else\n                map.put(word, 1);\n   \
    \     return map;\nreturn new HashMap<String,Integer>();\n    }\n    public static\
    \ void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpr6sc324v.java:30: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                         ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmpr6sc324v.java:31:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n                  \
    \                                                         ^\n  symbol:   method\
    \ of(String,int,String,int)\n  location: interface Map\n/tmp/tmpr6sc324v.java:32:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpr6sc324v.java:33: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpr6sc324v.java:34: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmpr6sc324v.java:35: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \     ^\n  symbol:   method of(String,int,String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmpr6sc324v.java:37: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 1)))));\n            \
    \                                            "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> result = new HashMap<String,Integer>();\n\
    \n        // Split string to array of letters \n        String[] letters = test.split(\"\
    \ \");\n        // Count frequency of each letter\n        for (String letter\
    \ : letters) {\n            if (!result.containsKey(letter)) {\n             \
    \   result.put(letter, 1);\n            }\n            else {\n              \
    \  result.put(letter, result.get(letter) + 1);\n            }\n        }\n\n \
    \       // Return only max frequency\n        for (String letter : result.keySet())\
    \ {\n            if (result.get(letter) > result.size()) {\n                result.put(letter,\
    \ result.get(letter));\n            }\n        }\n\n        return result;\nreturn\
    \ new HashMap<String,Integer>();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_0gen88k.java:44: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                         ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmp_0gen88k.java:45:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n                  \
    \                                                         ^\n  symbol:   method\
    \ of(String,int,String,int)\n  location: interface Map\n/tmp/tmp_0gen88k.java:46:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmp_0gen88k.java:47: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmp_0gen88k.java:48: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmp_0gen88k.java:49: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \     ^\n  symbol:   method of(String,int,String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmp_0gen88k.java:51: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 1)))));\n            \
    \                                            "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> map = new HashMap<>();\n\
    \        String[] splitted = test.split(\" \");\n        for(String s : splitted){\n\
    \            if (map.containsKey(s)){\n                int count = map.get(s);\n\
    \                map.put(s, count+1);\n            } else {\n                map.put(s,\
    \ 1);\n            }\n        }\n        return map;\nreturn new HashMap<String,Integer>();\n\
    \    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpsdgm1awi.java:33: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                         ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmpsdgm1awi.java:34:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n                  \
    \                                                         ^\n  symbol:   method\
    \ of(String,int,String,int)\n  location: interface Map\n/tmp/tmpsdgm1awi.java:35:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpsdgm1awi.java:36: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpsdgm1awi.java:37: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmpsdgm1awi.java:38: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \     ^\n  symbol:   method of(String,int,String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmpsdgm1awi.java:40: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 1)))));\n            \
    \                                            "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> histo = new HashMap<String,Integer>();\n\
    \        String[] split = test.split(\" \");\n        for (String s : split) {\n\
    \            if(histo.get(s) == null) histo.put(s, 1);\n            else histo.replace(s,\
    \ 1, 1);\n        }\n        return histo;\nreturn new HashMap<String,Integer>();\n\
    \    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpnbsh14bu.java:29: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                         ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmpnbsh14bu.java:30:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n                  \
    \                                                         ^\n  symbol:   method\
    \ of(String,int,String,int)\n  location: interface Map\n/tmp/tmpnbsh14bu.java:31:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpnbsh14bu.java:32: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpnbsh14bu.java:33: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmpnbsh14bu.java:34: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \     ^\n  symbol:   method of(String,int,String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmpnbsh14bu.java:36: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 1)))));\n            \
    \                                            "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        int n = test.length();\n        if (n == 0)\n\
    \            return null;\n        HashMap<String,Integer> histogram = new HashMap<>();\n\
    \        String[] arr = test.split(\" \");\n        for (String s: arr)\n    \
    \        histogram.put(s,histogram.getOrDefault(s,0)+1);\n        Arrays.sort(histogram.keySet());\n\
    \        int maxRepetition = histogram.values().stream().reduce(0, Integer::sum);\n\
    \        return histogram.entrySet().stream().filter(e -> e.getValue() == maxRepetition)\n\
    \                .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));\n\
    return new HashMap<String,Integer>();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpk1hlnwe8.java:26: error: no suitable method found for sort(Set<String>)\n\
    \        Arrays.sort(histogram.keySet());\n              ^\n    method Arrays.sort(int[])\
    \ is not applicable\n      (argument mismatch; Set<String> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; Set<String> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; Set<String> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; Set<String> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; Set<String> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; Set<String> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; Set<String> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; Set<String> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\n/tmp/tmpk1hlnwe8.java:29: error: incompatible types: inference\
    \ variable R has incompatible bounds\n                .collect(Collectors.toMap(Map.Entry::getKey,\
    \ Map.Entry::getValue));\n                        ^\n    equality constraints:\
    \ Map<String,Integer>\n    upper bounds: HashMap<String,Integer>,Object\n  where\
    \ R,A,T are type-variables:\n    R extends Object declared in method <R,A"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> map = new HashMap<String,Integer>();\n\
    \        if (test.length() == 0) {\n            return map;\n        }\n     \
    \   String str = test.toLowerCase().replaceAll(\"[ ]\", \" \");\n        String[]\
    \ strings = str.split(\" \");\n        for (String s : str) {\n            Integer\
    \ num = 0;\n            if (map.containsKey(s)) {\n                num = map.get(s);\n\
    \            }\n            map.put(s, num + 1);\n        }\n        return map;\n\
    return new HashMap<String,Integer>();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_n57r5f8.java:25: error: for-each not applicable to expression\
    \ type\n        for (String s : str) {\n                        ^\n  required:\
    \ array or java.lang.Iterable\n  found:    String\n/tmp/tmp_n57r5f8.java:36: error:\
    \ cannot find symbol\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n                                                     \
    \                    ^\n  symbol:   method of(String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmp_n57r5f8.java:37: error: cannot find symbol\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                           ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmp_n57r5f8.java:38:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmp_n57r5f8.java:39: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmp_n57r5f8.java:40: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmp_n57r5f8.java:41: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \     ^\n  symbol:   method of(String,int,String,int,String,int)\n  location:\
    \ interface Map\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        if (test.isEmpty()) {\n            return\
    \ new HashMap<String,Integer>();\n        }\n\n        // Count frequencies of\
    \ letters.\n        Map<Character, Integer> counts = new HashMap<>();\n      \
    \  for(char c: test.toCharArray()){\n            counts.merge(c, 1, Math::addExact);\n\
    \        }\n\n        // Return letter with maximum frequency.\n        int maxCount\
    \ = -1;\n        String maxLetter = null;\n        for(char c : counts.keySet()){\n\
    \            if(counts.get(c) >= maxCount){\n                maxCount = counts.get(c);\n\
    \                maxLetter = String.valueOf(c);\n            }\n        }\n\n\
    \        // Build a map of letters with their counts.\n        HashMap<String,Integer>\
    \ map = new HashMap<>();\n        for (Map.Entry<Character, Integer> entry : counts.entrySet())\
    \ {\n            String letter = String.valueOf(entry.getKey());\n           \
    \ int count = entry.getValue();\n            if (map.containsKey(letter)) {\n\
    \                map.put(letter, map.get(letter) + count);\n            } else\
    \ {\n                map.put(letter, count);\n            }\n        }\n\n   \
    \     // Return map of letters with counts.\n        return maxLetter != null\
    \ ? map.put(maxLetter, map.get(maxLetter) + 1) : map;\nreturn new HashMap<String,Integer>();\n\
    \    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2g2vaqtn.java:52: error: incompatible types: bad type in conditional\
    \ expression\n        return maxLetter != null ? map.put(maxLetter, map.get(maxLetter)\
    \ + 1) : map;\n                                          ^\n    Integer cannot\
    \ be converted to HashMap<String,Integer>\n/tmp/tmp2g2vaqtn.java:56: error: cannot\
    \ find symbol\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n                                                     \
    \                    ^\n  symbol:   method of(String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmp2g2vaqtn.java:57: error: cannot find symbol\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                           ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmp2g2vaqtn.java:58:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmp2g2vaqtn.java:59: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmp2g2vaqtn.java:60: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmp2g2vaqtn.java:61: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \     "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> histogram = new HashMap<>();\n\
    \        for (String letter : test.split(\" \"))\n            histogram.put(letter,\
    \ histogram.getOrDefault(letter, 0)+1);\n        return histogram;\nreturn new\
    \ HashMap<String,Integer>();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpb3dl6z_a.java:26: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                         ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmpb3dl6z_a.java:27:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n                  \
    \                                                         ^\n  symbol:   method\
    \ of(String,int,String,int)\n  location: interface Map\n/tmp/tmpb3dl6z_a.java:28:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpb3dl6z_a.java:29: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpb3dl6z_a.java:30: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmpb3dl6z_a.java:31: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \     ^\n  symbol:   method of(String,int,String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmpb3dl6z_a.java:33: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 1)))));\n            \
    \                                            "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> map = new HashMap<String,Integer>();\n\
    \        String split[] = test.split(\" \");\n        for(String item : split)\
    \ {\n            if(map.containsKey(item))\n                map.put(item, map.get(item)+1);\n\
    \            else\n                map.put(item, 1);\n        }\n        Collections.sort(map.keySet());\n\
    \        HashMap<String,Integer> out = new HashMap<String,Integer>();\n      \
    \  out.putAll(map);\n        return out;\nreturn new HashMap<String,Integer>();\n\
    \    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4uuk37qt.java:27: error: no suitable method found for sort(Set<String>)\n\
    \        Collections.sort(map.keySet());\n                   ^\n    method Collections.<T#1>sort(List<T#1>)\
    \ is not applicable\n      (cannot infer type-variable(s) T#1\n        (argument\
    \ mismatch; Set<String> cannot be converted to List<T#1>))\n    method Collections.<T#2>sort(List<T#2>,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Comparable<? super T#1> declared in method\
    \ <T#1>sort(List<T#1>)\n    T#2 extends Object declared in method <T#2>sort(List<T#2>,Comparator<?\
    \ super T#2>)\n/tmp/tmp4uuk37qt.java:34: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                         ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmp4uuk37qt.java:35:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n                  \
    \                                                         ^\n  symbol:   method\
    \ of(String,int,String,int)\n  location: interface Map\n/tmp/tmp4uuk37qt.java:36:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmp4uuk37qt.java:37: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmp4uuk37qt.java:38: error: cannot find symbol\n\
    \    assert(histogram(("
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> map = new HashMap<>();\n\
    \        int count = 1;\n        for (String s : test.split(\" \"))\n        \
    \    map.put(s, map.getOrDefault(s, 0) + count);\n        for (String k : map.keySet())\n\
    \            map.put(k, map.get(k));\n        map.putAll(map.entrySet().stream().sorted(Map.Entry.comparingByValue()).collect(Collectors.toMap(Map.Entry::getKey,\
    \ Map.Entry::getValue, (e1, e2) -> e1, LinkedHashMap::new)));\n        map.putAll(map.entrySet().stream().sorted(Map.Entry.comparingByValue()).collect(Collectors.toMap(Map.Entry::getKey,\
    \ Map.Entry::getValue, (e1, e2) -> e2, LinkedHashMap::new)));\n        return\
    \ map;\nreturn new HashMap<String,Integer>();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9626qp5m.java:25: error: no suitable method found for putAll(Map<Object,Object>)\n\
    \        map.putAll(map.entrySet().stream().sorted(Map.Entry.comparingByValue()).collect(Collectors.toMap(Map.Entry::getKey,\
    \ Map.Entry::getValue, (e1, e2) -> e1, LinkedHashMap::new)));\n           ^\n\
    \    method Map.putAll(Map<? extends String,? extends Integer>) is not applicable\n\
    \      (argument mismatch; cannot infer type-variable(s) K,V\n          (actual\
    \ and formal argument lists differ in length))\n    method AbstractMap.putAll(Map<?\
    \ extends String,? extends Integer>) is not applicable\n      (argument mismatch;\
    \ cannot infer type-variable(s) K,V\n          (actual and formal argument lists\
    \ differ in length))\n    method HashMap.putAll(Map<? extends String,? extends\
    \ Integer>) is not applicable\n      (argument mismatch; cannot infer type-variable(s)\
    \ K,V\n          (actual and formal argument lists differ in length))\n  where\
    \ K,V are type-variables:\n    K extends Object declared in class LinkedHashMap\n\
    \    V extends Object declared in class LinkedHashMap\n/tmp/tmp9626qp5m.java:26:\
    \ error: no suitable method found for putAll(Map<Object,Object>)\n        map.putAll(map.entrySet().stream().sorted(Map.Entry.comparingByValue()).collect(Collectors.toMap(Map.Entry::getKey,\
    \ Map.Entry::getValue, (e1, e2) -> e2, LinkedHashMap::new)));\n           ^\n\
    \    method Map.putAll(Map<? extends String,? extends Integer>) is not applicable\n\
    \      (argument mismatch; cannot infer type-variable(s) K,V\n          (actual\
    \ and formal argument lists differ in length))\n    method AbstractMap.putAll(Map<?\
    \ extends String,? extends Integer>) is not applicable\n      (argument mismatch;\
    \ cannot infer type-variable(s) K,V\n          (actual and formal argument lists\
    \ differ in length))\n    method HashMap.putAll(Map<? extends String,? extends\
    \ Integer>) is not applicable\n      (argument mismatch; cannot infer type-variable(s)\
    \ K,V\n          (actual and formal argument lists differ in length))\n  where\
    \ K,V are type-variables:\n    K extends Object declared in class LinkedHashMap\n\
    \    V"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> letterCounts = new\
    \ HashMap<String,Integer>();\n        test.trim().chars().mapToObj(c -> Character.valueOf((char)\
    \ c)).sorted().distinct()\n                .collect(Collectors.groupingBy(c ->\
    \ c, Collectors.counting()));\n\n        for(String key: letterCounts.keySet())\
    \ {\n            int occurrences = letterCounts.get(key);\n            if (letterCounts.containsKey(letterCounts.get(key).intValue()\
    \ + 1))\n                lettersCounts.put(key, letterCounts.get(key).intValue()\
    \ + 1);\n            else\n                lettersCounts.put(key, 1);\n      \
    \  }\n        return letterCounts;\nreturn new HashMap<String,Integer>();\n  \
    \  }\n    public static void main(String[] args) {\n    assert(histogram((\"a\
    \ b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbfj0157f.java:26: error: cannot find symbol\n                lettersCounts.put(key,\
    \ letterCounts.get(key).intValue() + 1);\n                ^\n  symbol:   variable\
    \ lettersCounts\n  location: class Problem\n/tmp/tmpbfj0157f.java:28: error: cannot\
    \ find symbol\n                lettersCounts.put(key, 1);\n                ^\n\
    \  symbol:   variable lettersCounts\n  location: class Problem\n/tmp/tmpbfj0157f.java:34:\
    \ error: cannot find symbol\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n                                                     \
    \                    ^\n  symbol:   method of(String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmpbfj0157f.java:35: error: cannot find symbol\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                           ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmpbfj0157f.java:36:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpbfj0157f.java:37: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpbfj0157f.java:38: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmpbfj0157f.java:39: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>("
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        if (test.isEmpty()) return new HashMap<>();\n\
    \        HashMap<String,Integer> map = new HashMap<>();\n        String[] array\
    \ = test.split(\" \");\n        for (String s : array) {\n            if (map.containsKey(s))\
    \ {\n                map.put(s, map.get(s) + 1);\n            } else {\n     \
    \           map.put(s, 1);\n            }\n        }\n        map = map.entrySet().stream().max(Comparator.comparing(Map.Entry::getValue)).map(Map.Entry::getKey).collect(Collectors.toMap(Map.Entry::getValue,\
    \ Map.Entry::getKey));\n        return map;\nreturn new HashMap<String,Integer>();\n\
    \    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdy5lss6w.java:29: error: cannot find symbol\n        map = map.entrySet().stream().max(Comparator.comparing(Map.Entry::getValue)).map(Map.Entry::getKey).collect(Collectors.toMap(Map.Entry::getValue,\
    \ Map.Entry::getKey));\n                                                     \
    \                                                      ^\n  symbol:   method collect(Collector<Object,CAP#1,Map<Object,Object>>)\n\
    \  location: class Optional<String>\n  where CAP#1 is a fresh type-variable:\n\
    \    CAP#1 extends Object from capture of ?\n/tmp/tmpdy5lss6w.java:29: error:\
    \ incompatible types: cannot infer type-variable(s) T,K#1,U\n        map = map.entrySet().stream().max(Comparator.comparing(Map.Entry::getValue)).map(Map.Entry::getKey).collect(Collectors.toMap(Map.Entry::getValue,\
    \ Map.Entry::getKey));\n                                                     \
    \                                                                            \
    \   ^\n    (argument mismatch; invalid method reference\n      method getValue\
    \ in interface Entry<K#2,V> cannot be applied to given types\n        required:\
    \ no arguments\n        found: Object\n        reason: actual and formal argument\
    \ lists differ in length)\n  where T,K#1,U,K#2,V are type-variables:\n    T extends\
    \ Object declared in method <T,K#1,U>toMap(Function<? super T,? extends K#1>,Function<?\
    \ super T,? extends U>)\n    K#1 extends Object declared in method <T,K#1,U>toMap(Function<?\
    \ super T,? extends K#1>,Function<? super T,? extends U>)\n    U extends Object\
    \ declared in method <T,K#1,U>toMap(Function<? super T,? extends K#1>,Function<?\
    \ super T,? extends U>)\n    K#2 extends Object declared in interface Entry\n\
    \    V extends Object declared in interface Entry\n/tmp/tmpdy5lss6w.java:29: error:\
    \ invalid method reference\n        map = map.entrySet().stream().max(Comparator.comparing(Map.Entry::getValue)).map(Map.Entry::getKey).collect(Collectors.toMap(Map.Entry::getValue,\
    \ Map.Entry::getKey));\n                                                     \
    \                                                                             "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        if (test.isEmpty()) return new HashMap<String,Integer>();\n\
    \        HashMap<String,Integer> result = new HashMap<String,Integer>();\n   \
    \     // Split the string by \" \" and trim each word.\n        String[] words\
    \ = test.trim().split(\" +\");\n        // Create a set to keep track of each\
    \ letter in the string.\n        Set<String> letters = new HashSet<String>(Arrays.asList(words));\n\
    \        // Loop through all the letters in the set and for each one if its not\
    \ already in the result then\n        // add 1 to the value in the result for\
    \ the letter.\n        for (String letter : letters) {\n            if (!result.containsKey(letter))\
    \ result.put(letter, 1);\n            else result.put(letter, result.get(letter)\
    \ + 1);\n        }\n        // Sort the result by values and return the result.\n\
    \        return result.entrySet().stream().sorted(Map.Entry.comparingByValue()).map(Map.Entry::getValue).distinct().collect(Collectors.toMap(Map.Entry::getKey,\
    \ Map.Entry::getValue, (v1,v2)->v1,LinkedHashMap::new));\nreturn new HashMap<String,Integer>();\n\
    \    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpa9b8vesr.java:32: error: incompatible types: cannot infer type-variable(s)\
    \ CAP#1,T,K#1,U,M,K#2,V#1\n        return result.entrySet().stream().sorted(Map.Entry.comparingByValue()).map(Map.Entry::getValue).distinct().collect(Collectors.toMap(Map.Entry::getKey,\
    \ Map.Entry::getValue, (v1,v2)->v1,LinkedHashMap::new));\n                   \
    \                                                                            \
    \                           ^\n    (argument mismatch; invalid method reference\n\
    \      method getKey in interface Entry<K#3,V#2> cannot be applied to given types\n\
    \        required: no arguments\n        found: Integer\n        reason: actual\
    \ and formal argument lists differ in length)\n  where T,K#1,U,M,K#2,V#1,K#3,V#2\
    \ are type-variables:\n    T extends Object declared in method <T,K#1,U,M>toMap(Function<?\
    \ super T,? extends K#1>,Function<? super T,? extends U>,BinaryOperator<U>,Supplier<M>)\n\
    \    K#1 extends Object declared in method <T,K#1,U,M>toMap(Function<? super T,?\
    \ extends K#1>,Function<? super T,? extends U>,BinaryOperator<U>,Supplier<M>)\n\
    \    U extends Object declared in method <T,K#1,U,M>toMap(Function<? super T,?\
    \ extends K#1>,Function<? super T,? extends U>,BinaryOperator<U>,Supplier<M>)\n\
    \    M extends Map<K#1,U> declared in method <T,K#1,U,M>toMap(Function<? super\
    \ T,? extends K#1>,Function<? super T,? extends U>,BinaryOperator<U>,Supplier<M>)\n\
    \    K#2 extends Object declared in class LinkedHashMap\n    V#1 extends Object\
    \ declared in class LinkedHashMap\n    K#3 extends Object declared in interface\
    \ Entry\n    V#2 extends Object declared in interface Entry\n  where CAP#1 is\
    \ a fresh type-variable:\n    CAP#1 extends Object from capture of ?\n/tmp/tmpa9b8vesr.java:36:\
    \ error: cannot find symbol\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n                                                     \
    \                    ^\n  symbol:   method of(String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmpa9b8vesr.java:37: error: cannot find symbol\n    assert(histogram((\"\
    a b c a b\""
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> result = new HashMap<String,Integer>();\n\
    \        if (test==null || test.isEmpty()) return result;\n        String[] s\
    \ = test.split(\" \");\n        for (int i=0; i<s.length; i++)\n            result.put(s[i],\
    \ new Integer(0));\n        Arrays.sort(s);\n        for (int i=0; i<s.length;\
    \ i++)\n            result.get(s[i]).incrementAndGet();\n        return result;\n\
    return new HashMap<String,Integer>();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwaksh8w1.java:26: error: cannot find symbol\n            result.get(s[i]).incrementAndGet();\n\
    \                            ^\n  symbol:   method incrementAndGet()\n  location:\
    \ class Integer\n/tmp/tmpwaksh8w1.java:31: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                         ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmpwaksh8w1.java:32:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n                  \
    \                                                         ^\n  symbol:   method\
    \ of(String,int,String,int)\n  location: interface Map\n/tmp/tmpwaksh8w1.java:33:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpwaksh8w1.java:34: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpwaksh8w1.java:35: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmpwaksh8w1.java:36: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \     ^\n  symbol:   method of(String,int,String,int,String,int)\n  location:\
    \ interface Map"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> map = new HashMap<String,Integer>();\n\
    \        String[] words = test.split(\" \");\n        for(String s: words) {\n\
    \            if(map.containsKey(s)) map.put(s, map.get(s)+1);\n            else\
    \ map.put(s,1);\n        }\n        map = new HashMap<String,Integer>(map);\n\
    \        return map;\nreturn new HashMap<String,Integer>();\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9pxogvcr.java:30: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                         ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmp9pxogvcr.java:31:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n                  \
    \                                                         ^\n  symbol:   method\
    \ of(String,int,String,int)\n  location: interface Map\n/tmp/tmp9pxogvcr.java:32:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmp9pxogvcr.java:33: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmp9pxogvcr.java:34: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmp9pxogvcr.java:35: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \     ^\n  symbol:   method of(String,int,String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmp9pxogvcr.java:37: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 1)))));\n            \
    \                                            "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        // Use a TreeMap to reverse the order\n  \
    \      HashMap<String,Integer> map = new HashMap<>();\n        for(String s :\
    \ test.split(\" \")){\n            map.put(s,map.getOrDefault(s,0)+1);\n     \
    \   }\n\n        // Take the map and sort the entries by descending count\n  \
    \      HashMap<String,Integer> sorted = new TreeMap<>(map);\n        Iterator<String>\
    \ iterator = sorted.values().iterator();\n        while(iterator.hasNext()){\n\
    \            Integer count = iterator.next();\n            String s = iterator.next();\n\
    \            sorted.put(s,count);\n        }\n\n        // Take all the entries\
    \ and add them to the list\n        Iterator<String> iterator = sorted.values().iterator();\n\
    \        ArrayList<String> result = new ArrayList<>();\n        while(iterator.hasNext()){\n\
    \            Integer count = iterator.next();\n            result.add(count +\
    \ \" \" + iterator.next());\n        }\n\n        // Return the map keyed with\
    \ the highest count\n        HashMap<String,Integer> result2 = new HashMap<>(sorted);\n\
    \        return result2;\nreturn new HashMap<String,Integer>();\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpe5wgh3ah.java:26: error: incompatible types: cannot infer type\
    \ arguments for TreeMap<>\n        HashMap<String,Integer> sorted = new TreeMap<>(map);\n\
    \                                                    ^\n    reason: no instance(s)\
    \ of type variable(s) K,V exist so that TreeMap<K,V> conforms to HashMap<String,Integer>\n\
    \  where K,V are type-variables:\n    K extends Object declared in class TreeMap\n\
    \    V extends Object declared in class TreeMap\n/tmp/tmpe5wgh3ah.java:27: error:\
    \ incompatible types: Iterator<Integer> cannot be converted to Iterator<String>\n\
    \        Iterator<String> iterator = sorted.values().iterator();\n           \
    \                                                 ^\n/tmp/tmpe5wgh3ah.java:29:\
    \ error: incompatible types: String cannot be converted to Integer\n         \
    \   Integer count = iterator.next();\n                                       \
    \  ^\n/tmp/tmpe5wgh3ah.java:35: error: variable iterator is already defined in\
    \ method histogram(String)\n        Iterator<String> iterator = sorted.values().iterator();\n\
    \                         ^\n/tmp/tmpe5wgh3ah.java:35: error: incompatible types:\
    \ Iterator<Integer> cannot be converted to Iterator<String>\n        Iterator<String>\
    \ iterator = sorted.values().iterator();\n                                   \
    \                         ^\n/tmp/tmpe5wgh3ah.java:38: error: incompatible types:\
    \ String cannot be converted to Integer\n            Integer count = iterator.next();\n\
    \                                         ^\n/tmp/tmpe5wgh3ah.java:48: error:\
    \ cannot find symbol\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n                                                     \
    \                    ^\n  symbol:   method of(String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmpe5wgh3ah.java:49: error: cannot find symbol\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                           ^\n\
    \  symbol:   method of(String,int,String,int)\n  locat"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hist = new HashMap<>();\n\
    \        String[] strs = test.split(\" \");\n        for(String s: strs) {\n \
    \           if (hist.containsKey(s)) {\n                hist.put(s, hist.get(s)\
    \ + 1);\n            } else {\n                hist.put(s, 1);\n            }\n\
    \        }\n        System.out.println(hist);\n        return hist;\nreturn new\
    \ HashMap<String,Integer>();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpktim8xby.java:33: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                         ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmpktim8xby.java:34:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n                  \
    \                                                         ^\n  symbol:   method\
    \ of(String,int,String,int)\n  location: interface Map\n/tmp/tmpktim8xby.java:35:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpktim8xby.java:36: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpktim8xby.java:37: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmpktim8xby.java:38: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \     ^\n  symbol:   method of(String,int,String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmpktim8xby.java:40: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 1)))));\n            \
    \                                            "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        String[] array = test.split(\" \");\n    \
    \    HashMap<String,Integer> counts = new HashMap<>();\n        for(String s :\
    \ array) {\n            if(counts.containsKey(s)) {\n                counts.put(s,\
    \ counts.get(s)+1);\n            } else {\n                counts.put(s,1);\n\
    \            }\n        }\n        return counts;\nreturn new HashMap<String,Integer>();\n\
    \    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpsnq9qule.java:32: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                         ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmpsnq9qule.java:33:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n                  \
    \                                                         ^\n  symbol:   method\
    \ of(String,int,String,int)\n  location: interface Map\n/tmp/tmpsnq9qule.java:34:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpsnq9qule.java:35: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpsnq9qule.java:36: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmpsnq9qule.java:37: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \     ^\n  symbol:   method of(String,int,String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmpsnq9qule.java:39: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 1)))));\n            \
    \                                            "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hmap = new HashMap<>();\n\
    \        String[] parts = test.split(\" \");\n        for (String part : parts)\
    \ {\n            if (hmap.containsKey(part)) {\n                hmap.put(part,\
    \ hmap.get(part) + 1);\n            } else {\n                hmap.put(part, 1);\n\
    \            }\n        }\n        return hmap;\nreturn new HashMap<String,Integer>();\n\
    \    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpkwsigdeq.java:32: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                         ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmpkwsigdeq.java:33:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n                  \
    \                                                         ^\n  symbol:   method\
    \ of(String,int,String,int)\n  location: interface Map\n/tmp/tmpkwsigdeq.java:34:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpkwsigdeq.java:35: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpkwsigdeq.java:36: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmpkwsigdeq.java:37: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \     ^\n  symbol:   method of(String,int,String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmpkwsigdeq.java:39: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 1)))));\n            \
    \                                            "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> result = new HashMap<String,Integer>();\n\
    \        String[] s = test.split(\" \");\n        for (String t : s) {\n     \
    \       result.merge(t, 1, Integer::sum);\n        }\n        return result;\n\
    return new HashMap<String,Integer>();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp96magi72.java:28: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                         ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmp96magi72.java:29:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n                  \
    \                                                         ^\n  symbol:   method\
    \ of(String,int,String,int)\n  location: interface Map\n/tmp/tmp96magi72.java:30:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmp96magi72.java:31: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmp96magi72.java:32: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmp96magi72.java:33: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \     ^\n  symbol:   method of(String,int,String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmp96magi72.java:35: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 1)))));\n            \
    \                                            "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        // Split test into an array of characters.\n\
    \        char[] charArray = test.toCharArray();\n\n        // Sort the characters\
    \ alphabetically.\n        Arrays.sort(charArray);\n\n        // Create a HashMap\
    \ to hold the count of each letter.\n        HashMap<String,Integer> map = new\
    \ HashMap<String,Integer>();\n\n        // Get the frequency of each letter.\n\
    \        for (char c : charArray) {\n            Integer count = map.get(c);\n\
    \            if (count == null) {\n                count = 1;\n            } else\
    \ {\n                count++;\n            }\n            map.put(c, count);\n\
    \        }\n\n        // Return the map sorted by frequency.\n        return map;\n\
    return new HashMap<String,Integer>();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp22073khu.java:36: error: no suitable method found for put(char,Integer)\n\
    \            map.put(c, count);\n               ^\n    method Map.put(String,Integer)\
    \ is not applicable\n      (argument mismatch; char cannot be converted to String)\n\
    \    method AbstractMap.put(String,Integer) is not applicable\n      (argument\
    \ mismatch; char cannot be converted to String)\n    method HashMap.put(String,Integer)\
    \ is not applicable\n      (argument mismatch; char cannot be converted to String)\n\
    /tmp/tmp22073khu.java:44: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                         ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmp22073khu.java:45:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n                  \
    \                                                         ^\n  symbol:   method\
    \ of(String,int,String,int)\n  location: interface Map\n/tmp/tmp22073khu.java:46:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmp22073khu.java:47: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmp22073khu.java:48: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmp22073khu.j"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> map = new HashMap<String,Integer>();\n\
    \        for(String word : test.split(\" \")){\n            word = word.toLowerCase();\n\
    \            Integer count = map.get(word);\n            if(count == null){\n\
    \                map.put(word, 1);\n            }\n            else{\n       \
    \         map.put(word, count + 1);\n            }\n        }\n        return\
    \ map;\nreturn new HashMap<String,Integer>();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxkksw4hx.java:34: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                         ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmpxkksw4hx.java:35:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n                  \
    \                                                         ^\n  symbol:   method\
    \ of(String,int,String,int)\n  location: interface Map\n/tmp/tmpxkksw4hx.java:36:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpxkksw4hx.java:37: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpxkksw4hx.java:38: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmpxkksw4hx.java:39: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \     ^\n  symbol:   method of(String,int,String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmpxkksw4hx.java:41: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 1)))));\n            \
    \                                            "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> map = new HashMap<String,Integer>();\n\
    \        String[] list = test.split(\" \");\n        for (String item : list)\n\
    \            if (map.containsKey(item))\n                map.put(item, map.get(item)\
    \ + 1);\n            else\n                map.put(item, 1);\n\n        return\
    \ map;\nreturn new HashMap<String,Integer>();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqlm9f756.java:31: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                         ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmpqlm9f756.java:32:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n                  \
    \                                                         ^\n  symbol:   method\
    \ of(String,int,String,int)\n  location: interface Map\n/tmp/tmpqlm9f756.java:33:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpqlm9f756.java:34: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpqlm9f756.java:35: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmpqlm9f756.java:36: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \     ^\n  symbol:   method of(String,int,String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmpqlm9f756.java:38: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 1)))));\n            \
    \                                            "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> map = new HashMap<>();\n\
    \        int numOfLetters = test.length();\n        char[] chars = test.toCharArray();\n\
    \        for(int i = 0; i < numOfLetters; i++){\n            String key = String.valueOf(chars[i]);\n\
    \            if(map.containsKey(key)){\n                map.put(key, map.get(key)\
    \ + 1);\n            } else {\n                map.put(key, 1);\n            }\n\
    \        }\n        map.entrySet().stream().sorted((x,y)->y.getValue() - x.getValue()).collect(Collectors.toMap(e->e.getKey(),\
    \ e->e.getValue()));\n        return map;\nreturn new HashMap<String,Integer>();\n\
    \    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmphjs7mcrs.java:35: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                         ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmphjs7mcrs.java:36:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n                  \
    \                                                         ^\n  symbol:   method\
    \ of(String,int,String,int)\n  location: interface Map\n/tmp/tmphjs7mcrs.java:37:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmphjs7mcrs.java:38: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmphjs7mcrs.java:39: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmphjs7mcrs.java:40: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \     ^\n  symbol:   method of(String,int,String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmphjs7mcrs.java:42: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 1)))));\n            \
    \                                            "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> dict = new HashMap<>();\n\
    \        test = test.toUpperCase();\n        for(int i = 0; i < test.length();\
    \ i++) {\n            String letter = test.substring(i, i+1);\n            Integer\
    \ count = dict.get(letter);\n            dict.put(letter, count == null ? 1 :\
    \ count+1);\n        }\n        return dict;\nreturn new HashMap<String,Integer>();\n\
    \    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpljbzsab3.java:30: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                         ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmpljbzsab3.java:31:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n                  \
    \                                                         ^\n  symbol:   method\
    \ of(String,int,String,int)\n  location: interface Map\n/tmp/tmpljbzsab3.java:32:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpljbzsab3.java:33: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpljbzsab3.java:34: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmpljbzsab3.java:35: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \     ^\n  symbol:   method of(String,int,String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmpljbzsab3.java:37: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 1)))));\n            \
    \                                            "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hm = new HashMap<>();\n\
    \        for(String s:test.split(\" \")){\n            hm.put(s,hm.getOrDefault(s,0)+1);\n\
    \        }\n        return hm;\nreturn new HashMap<String,Integer>();\n    }\n\
    \    public static void main(String[] args) {\n    assert(histogram((\"a b b a\"\
    )).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmprjya2zj4.java:27: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                         ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmprjya2zj4.java:28:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n                  \
    \                                                         ^\n  symbol:   method\
    \ of(String,int,String,int)\n  location: interface Map\n/tmp/tmprjya2zj4.java:29:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmprjya2zj4.java:30: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmprjya2zj4.java:31: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmprjya2zj4.java:32: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \     ^\n  symbol:   method of(String,int,String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmprjya2zj4.java:34: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 1)))));\n            \
    \                                            "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> histogram = new HashMap<String,Integer>();\n\
    \        for (String letter : test.split(\" \"))\n            histogram.put(letter,(histogram.containsKey(letter))\
    \ ? histogram.get(letter)+1 : 1);\n        return histogram;\nreturn new HashMap<String,Integer>();\n\
    \    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzhbkgpnt.java:26: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                         ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmpzhbkgpnt.java:27:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n                  \
    \                                                         ^\n  symbol:   method\
    \ of(String,int,String,int)\n  location: interface Map\n/tmp/tmpzhbkgpnt.java:28:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpzhbkgpnt.java:29: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpzhbkgpnt.java:30: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmpzhbkgpnt.java:31: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \     ^\n  symbol:   method of(String,int,String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmpzhbkgpnt.java:33: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 1)))));\n            \
    \                                            "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        String[] values = test.split(\" \");\n   \
    \     HashMap<String,Integer> result = new HashMap<String,Integer>();\n      \
    \  for(String value : values) {\n            if(result.containsKey(value)) {\n\
    \                Integer count = result.get(value);\n                result.put(value,\
    \ count + 1);\n            }\n            else {\n                result.put(value,\
    \ 1);\n            }\n        }\n        return result;\nreturn new HashMap<String,Integer>();\n\
    \    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8ccu6mbt.java:34: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                         ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmp8ccu6mbt.java:35:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n                  \
    \                                                         ^\n  symbol:   method\
    \ of(String,int,String,int)\n  location: interface Map\n/tmp/tmp8ccu6mbt.java:36:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmp8ccu6mbt.java:37: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmp8ccu6mbt.java:38: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmp8ccu6mbt.java:39: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \     ^\n  symbol:   method of(String,int,String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmp8ccu6mbt.java:41: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 1)))));\n            \
    \                                            "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> histogram = new HashMap<>();\n\
    \        // Split string into array at spaces\n        String[] splitString =\
    \ test.split(\" \");\n        // For each string in the array, split each letter,\
    \ count and store in hashmap\n        for (int i = 0; i < splitString.length;\
    \ i++) {\n            String letter = splitString[i];\n            String[] letterArray\
    \ = letter.split(\"\");\n            HashMap<String,Integer> letterCounts = new\
    \ HashMap<>();\n            for (String currentLetter: letterArray) {\n      \
    \          letterCounts.merge(currentLetter, 1, Integer::sum);\n            }\n\
    \            // If letter is already in hashmap, add the count\n            if(letterCounts.containsKey(letter))\
    \ {\n                Integer existingCount = letterCounts.get(letter);\n     \
    \           letterCounts.put(letter, existingCount + 1);\n            } else {\n\
    \                letterCounts.put(letter, 1);\n            }\n            histogram.put(letter,\
    \ letterCounts.get(letter));\n        }\n        return histogram;\nreturn new\
    \ HashMap<String,Integer>();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmplo2gnvq5.java:43: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                         ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmplo2gnvq5.java:44:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n                  \
    \                                                         ^\n  symbol:   method\
    \ of(String,int,String,int)\n  location: interface Map\n/tmp/tmplo2gnvq5.java:45:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmplo2gnvq5.java:46: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmplo2gnvq5.java:47: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmplo2gnvq5.java:48: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \     ^\n  symbol:   method of(String,int,String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmplo2gnvq5.java:50: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 1)))));\n            \
    \                                            "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> histogram = new HashMap<>();\n\
    \n        // Split the input string into words\n        String[] words = test.split(\"\
    \ \");\n\n        // Count the occurrences\n        for (String word : words)\
    \ {\n            if (histogram.containsKey(word)) {\n                histogram.put(word,\
    \ histogram.get(word) + 1);\n            } else {\n                histogram.put(word,\
    \ 1);\n            }\n        }\n\n        // Return the result\n        return\
    \ histogram;\nreturn new HashMap<String,Integer>();\n    }\n    public static\
    \ void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpd26055a2.java:38: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                         ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmpd26055a2.java:39:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n                  \
    \                                                         ^\n  symbol:   method\
    \ of(String,int,String,int)\n  location: interface Map\n/tmp/tmpd26055a2.java:40:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpd26055a2.java:41: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpd26055a2.java:42: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmpd26055a2.java:43: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \     ^\n  symbol:   method of(String,int,String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmpd26055a2.java:45: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 1)))));\n            \
    \                                            "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n      HashMap<String,Integer> map = new HashMap<>();\n\
    \      String[] testArr = test.split(\" \");\n      for (String item : testArr)\
    \ {\n        String key = item;\n        int count = 0;\n        if ( map.containsKey(key))\
    \ {\n          count = map.get(key);\n        }\n        else {\n          count\
    \ = 1;\n        }\n        map.put(key,count+1);\n      }\n      return map;\n\
    return new HashMap<String,Integer>();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqd1h600v.java:36: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                         ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmpqd1h600v.java:37:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n                  \
    \                                                         ^\n  symbol:   method\
    \ of(String,int,String,int)\n  location: interface Map\n/tmp/tmpqd1h600v.java:38:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpqd1h600v.java:39: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpqd1h600v.java:40: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmpqd1h600v.java:41: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \     ^\n  symbol:   method of(String,int,String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmpqd1h600v.java:43: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 1)))));\n            \
    \                                            "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        int max = 0, maxCount = 0;\n        HashMap<String,Integer>\
    \ histogram = new HashMap<>();\n        String[] words = test.split(\" \");\n\
    \        for (int i = 0; i < words.length; i++) {\n            int count = 0;\n\
    \            for (int j = 0; j < words.length; j++) {\n                if (words[i].equals(words[j]))\
    \ {\n                    count++;\n                }\n            }\n        \
    \    histogram.put(words[i], count);\n            if (count > maxCount) {\n  \
    \              max = count;\n                maxCount = count;\n            }\
    \ else if (count == maxCount) {\n                max = Math.max(max,maxCount);\n\
    \            }\n        }\n        if (max == 0) {\n            histogram.put(\"\
    none\",maxCount);\n        }\n        return histogram;\nreturn new HashMap<String,Integer>();\n\
    \    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_fw2mx3v.java:44: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                         ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmp_fw2mx3v.java:45:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n                  \
    \                                                         ^\n  symbol:   method\
    \ of(String,int,String,int)\n  location: interface Map\n/tmp/tmp_fw2mx3v.java:46:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmp_fw2mx3v.java:47: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmp_fw2mx3v.java:48: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmp_fw2mx3v.java:49: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \     ^\n  symbol:   method of(String,int,String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmp_fw2mx3v.java:51: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 1)))));\n            \
    \                                            "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> histogram = new HashMap<String,Integer>();\n\
    \        \n        for (String letter : test.split(\" \")) {\n            if (histogram.containsKey(letter))\
    \ {\n                histogram.put(letter,histogram.get(letter)+1);\n        \
    \    }\n            else {\n                histogram.put(letter,1);\n       \
    \     }\n        }\n        \n        return histogram;\nreturn new HashMap<String,Integer>();\n\
    \    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbcjlv3h6.java:34: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                         ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmpbcjlv3h6.java:35:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n                  \
    \                                                         ^\n  symbol:   method\
    \ of(String,int,String,int)\n  location: interface Map\n/tmp/tmpbcjlv3h6.java:36:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpbcjlv3h6.java:37: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpbcjlv3h6.java:38: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmpbcjlv3h6.java:39: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \     ^\n  symbol:   method of(String,int,String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmpbcjlv3h6.java:41: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 1)))));\n            \
    \                                            "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> histogram = new HashMap<String,Integer>();\n\
    \        String[] letters = test.split(\" \");\n        Arrays.sort(letters);\n\
    \        for(String letter : letters) {\n            int count = histogram.containsKey(letter)\
    \ ? histogram.get(letter) : 0;\n            histogram.put(letter, ++count);\n\
    \        }\n        return histogram;\nreturn new HashMap<String,Integer>();\n\
    \    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpv4s2th2w.java:30: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                         ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmpv4s2th2w.java:31:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n                  \
    \                                                         ^\n  symbol:   method\
    \ of(String,int,String,int)\n  location: interface Map\n/tmp/tmpv4s2th2w.java:32:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpv4s2th2w.java:33: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpv4s2th2w.java:34: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmpv4s2th2w.java:35: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \     ^\n  symbol:   method of(String,int,String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmpv4s2th2w.java:37: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 1)))));\n            \
    \                                            "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> map = new HashMap<>();\n\
    \        int counter = 0;\n        String[] strings = test.split(\" \");\n   \
    \     for (String string : strings) {\n            String letter = string.toLowerCase();\n\
    \            int count = map.containsKey(letter) ? map.get(letter) : 0;\n    \
    \        map.put(letter, count+1);\n            counter++;\n        }\n      \
    \  return map.isEmpty() ? map : Collections.max(map.entrySet(), Comparator.comparing(Map.Entry::getValue));\n\
    return new HashMap<String,Integer>();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp84mxp_4k.java:28: error: incompatible types: bad type in conditional\
    \ expression\n        return map.isEmpty() ? map : Collections.max(map.entrySet(),\
    \ Comparator.comparing(Map.Entry::getValue));\n                              \
    \                      ^\n    inferred type does not conform to upper bound(s)\n\
    \      inferred: Entry<String,Integer>\n      upper bound(s): Entry<String,Integer>,HashMap<String,Integer>,Object\n\
    /tmp/tmp84mxp_4k.java:32: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                         ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmp84mxp_4k.java:33:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n                  \
    \                                                         ^\n  symbol:   method\
    \ of(String,int,String,int)\n  location: interface Map\n/tmp/tmp84mxp_4k.java:34:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmp84mxp_4k.java:35: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmp84mxp_4k.java:36: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmp84mxp_4k.java:37: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> count = new HashMap<>();\n\
    \        test.trim().split(\" \").stream().map(l -> l.toLowerCase()).forEach(l\
    \ -> {\n            int current = count.get(l);\n            count.put(l, current\
    \ == null ? 1 : current + 1);\n        });\n        return count;\nreturn new\
    \ HashMap<String,Integer>();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpd934dwsn.java:20: error: cannot find symbol\n        test.trim().split(\"\
    \ \").stream().map(l -> l.toLowerCase()).forEach(l -> {\n                    \
    \          ^\n  symbol:   method stream()\n  location: class String[]\n/tmp/tmpd934dwsn.java:22:\
    \ error: incomparable types: int and <null>\n            count.put(l, current\
    \ == null ? 1 : current + 1);\n                                 ^\n/tmp/tmpd934dwsn.java:28:\
    \ error: cannot find symbol\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n                                                     \
    \                    ^\n  symbol:   method of(String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmpd934dwsn.java:29: error: cannot find symbol\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                           ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmpd934dwsn.java:30:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpd934dwsn.java:31: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpd934dwsn.java:32: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmpd934dwsn.java:33: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> map = new HashMap<>();\n\
    \        for(int i = 0; i < test.length(); i++)\n        {\n            String\
    \ key = test.substring(i, i + 1);\n            map.put(key, map.getOrDefault(key,\
    \ 0) + 1);\n        }\n        return map;\nreturn new HashMap<String,Integer>();\n\
    \    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp79t20ca2.java:29: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                         ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmp79t20ca2.java:30:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n                  \
    \                                                         ^\n  symbol:   method\
    \ of(String,int,String,int)\n  location: interface Map\n/tmp/tmp79t20ca2.java:31:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmp79t20ca2.java:32: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmp79t20ca2.java:33: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmp79t20ca2.java:34: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \     ^\n  symbol:   method of(String,int,String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmp79t20ca2.java:36: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 1)))));\n            \
    \                                            "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> map = new HashMap<>();\n\
    \        int occurences = 0;\n        Arrays.stream(test.split(\" \"))\n     \
    \       .map(String::toLower)\n            .forEach((letter) -> {\n          \
    \      if(map.containsKey(letter))\n                    map.put(letter, map.get(letter)\
    \ + 1);\n                else\n                    map.put(letter, 1);\n     \
    \           occurences += 1;\n            });\n        map.forEach((k,v) -> {\n\
    \            if(v > occurences)\n                map.remove(k);\n        });\n\
    \        return map;\nreturn new HashMap<String,Integer>();\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2ertypy5.java:22: error: invalid method reference\n           \
    \ .map(String::toLower)\n                 ^\n  cannot find symbol\n    symbol:\
    \   method toLower()\n    location: class String\n/tmp/tmp2ertypy5.java:38: error:\
    \ cannot find symbol\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n                                                     \
    \                    ^\n  symbol:   method of(String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmp2ertypy5.java:39: error: cannot find symbol\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                           ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmp2ertypy5.java:40:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmp2ertypy5.java:41: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmp2ertypy5.java:42: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmp2ertypy5.java:43: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \     ^\n  symbol:   method of(String,int,String,int,String,int)\n  location:\
    \ interface Map\n/t"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        // TODO: Write your code here\n        Map<String,Integer>\
    \ res = new HashMap<String,Integer>();\n        for (int i =0; i < test.length();\
    \ i++) {\n            String key = test.substring(i, i + 1);\n            if (!res.containsKey(key))\
    \ {\n                res.put(key,0);\n            }\n            Integer temp\
    \ = res.get(key);\n            if (temp == null)\n                res.put(key,0);\n\
    \            else\n                res.put(key,temp+1);\n        }\n        return\
    \ res;\nreturn new HashMap<String,Integer>();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpo0f144yc.java:32: error: incompatible types: Map<String,Integer>\
    \ cannot be converted to HashMap<String,Integer>\n        return res;\n      \
    \         ^\n/tmp/tmpo0f144yc.java:36: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                         ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmpo0f144yc.java:37:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n                  \
    \                                                         ^\n  symbol:   method\
    \ of(String,int,String,int)\n  location: interface Map\n/tmp/tmpo0f144yc.java:38:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpo0f144yc.java:39: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpo0f144yc.java:40: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmpo0f144yc.java:41: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \     ^\n  symbol:   method of(String,int,String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmpo0f144yc.java:43: error: ca"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> histo = new HashMap<String,Integer>();\n\
    \        test.trim().toCharArray().forEach(letter -> {\n            if(histo.get(letter)\
    \ == null){\n                histo.put(letter, 1);\n            } else {\n   \
    \             histo.get(letter)++;\n            }\n        });\n        return\
    \ histo;\nreturn new HashMap<String,Integer>();\n    }\n    public static void\
    \ main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpi999v9u9.java:20: error: cannot find symbol\n        test.trim().toCharArray().forEach(letter\
    \ -> {\n                                 ^\n  symbol:   method forEach((letter)->[...];\
    \ } })\n  location: class char[]\n/tmp/tmpi999v9u9.java:31: error: cannot find\
    \ symbol\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n                                                     \
    \                    ^\n  symbol:   method of(String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmpi999v9u9.java:32: error: cannot find symbol\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                           ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmpi999v9u9.java:33:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpi999v9u9.java:34: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpi999v9u9.java:35: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmpi999v9u9.java:36: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \     ^\n  symbol:   method of(String,int,String,int,String,int)\n  l"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        if (test.isEmpty()) {\n            return\
    \ new HashMap<String,Integer>();\n        }\n\n        // Split string into tokens\
    \ and remove duplicates\n        HashSet<String> strings = new HashSet<>(Arrays.asList(test.split(\"\
    \ \")));\n\n        // Create dictionary to hold the counts for each letter\n\
    \        HashMap<String,Integer> result = new HashMap<>();\n\n        // Count\
    \ each letter\n        for (String s : strings) {\n            // If letter is\
    \ already in the dictionary increment the count\n            if (result.containsKey(s))\
    \ {\n                result.put(s, result.get(s) + 1);\n            } else {\n\
    \                // If letter is not in the dictionary add the letter with count\
    \ 1\n                result.put(s, 1);\n            }\n        }\n\n        //\
    \ Return the dictionary\n        return result;\nreturn new HashMap<String,Integer>();\n\
    \    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6kvnf50_.java:45: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                         ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmp6kvnf50_.java:46:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n                  \
    \                                                         ^\n  symbol:   method\
    \ of(String,int,String,int)\n  location: interface Map\n/tmp/tmp6kvnf50_.java:47:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmp6kvnf50_.java:48: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmp6kvnf50_.java:49: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmp6kvnf50_.java:50: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \     ^\n  symbol:   method of(String,int,String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmp6kvnf50_.java:52: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 1)))));\n            \
    \                                            "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> result = new HashMap<String,Integer>();\n\
    \        HashSet<String> charSet = new HashSet<String>();\n        for(int i =\
    \ 0; i < test.length(); i++) {\n            String letter = test.substring(i,\
    \ i+1);\n            if(!charSet.contains(letter)) {\n                result.put(letter,\
    \ 0);\n                charSet.add(letter);\n            }\n            result.get(letter)++;\n\
    \        }\n        return result;\nreturn new HashMap<String,Integer>();\n  \
    \  }\n    public static void main(String[] args) {\n    assert(histogram((\"a\
    \ b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpce34aq9q.java:27: error: unexpected type\n            result.get(letter)++;\n\
    \                      ^\n  required: variable\n  found:    value\n/tmp/tmpce34aq9q.java:33:\
    \ error: cannot find symbol\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n                                                     \
    \                    ^\n  symbol:   method of(String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmpce34aq9q.java:34: error: cannot find symbol\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                           ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmpce34aq9q.java:35:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpce34aq9q.java:36: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpce34aq9q.java:37: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmpce34aq9q.java:38: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \     ^\n  symbol:   method of(String,int,String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmpce34aq9q.java:40: error: cannot find s"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        if (test.isEmpty()) return new HashMap<>();\n\
    \        HashMap<String,Integer> map = new HashMap<>();\n        String[] split\
    \ = test.split(\" \");\n        for (int i = 0; i < split.length; i++) {\n   \
    \         String key = split[i];\n            if (map.containsKey(key)) {\n  \
    \              map.put(key, map.get(key) + 1);\n            } else {\n       \
    \         map.put(key, 1);\n            }\n        }\n        return map;\nreturn\
    \ new HashMap<String,Integer>();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmptyto6xn5.java:34: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                         ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmptyto6xn5.java:35:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n                  \
    \                                                         ^\n  symbol:   method\
    \ of(String,int,String,int)\n  location: interface Map\n/tmp/tmptyto6xn5.java:36:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmptyto6xn5.java:37: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmptyto6xn5.java:38: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmptyto6xn5.java:39: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \     ^\n  symbol:   method of(String,int,String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmptyto6xn5.java:41: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 1)))));\n            \
    \                                            "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> map = new HashMap<String,Integer>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            String key = word.toLowerCase();\n            Integer count =\
    \ map.getOrDefault(key,0);\n            map.put(key,count+1);\n        }\n   \
    \     return map;\nreturn new HashMap<String,Integer>();\n    }\n    public static\
    \ void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxmedzrbs.java:30: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                         ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmpxmedzrbs.java:31:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n                  \
    \                                                         ^\n  symbol:   method\
    \ of(String,int,String,int)\n  location: interface Map\n/tmp/tmpxmedzrbs.java:32:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpxmedzrbs.java:33: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpxmedzrbs.java:34: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmpxmedzrbs.java:35: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \     ^\n  symbol:   method of(String,int,String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmpxmedzrbs.java:37: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 1)))));\n            \
    \                                            "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        // Your code here\n        HashMap<String,Integer>\
    \ histogram = new HashMap<String,Integer>();\n        for(int i = 0; i < test.length();\
    \ i++) {\n            String letter = test.substring(0,i);\n            int count\
    \ = 0;\n            for(int j = i+1; j < test.length(); j++) {\n             \
    \   if(test.substring(i, i+1).equals(test.substring(j,j+1))) {\n             \
    \       count++;\n                }\n            }\n            histogram.put(letter,\
    \ count);\n        }\n        return histogram;\nreturn new HashMap<String,Integer>();\n\
    \    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp68x50nr0.java:35: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                         ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmp68x50nr0.java:36:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n                  \
    \                                                         ^\n  symbol:   method\
    \ of(String,int,String,int)\n  location: interface Map\n/tmp/tmp68x50nr0.java:37:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmp68x50nr0.java:38: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmp68x50nr0.java:39: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmp68x50nr0.java:40: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \     ^\n  symbol:   method of(String,int,String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmp68x50nr0.java:42: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 1)))));\n            \
    \                                            "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hm = new HashMap<>();\n\
    \        String[] letters = test.split(\" \");\n        for (String letter : letters)\
    \ {\n            hm.put(letter, hm.getOrDefault(letter, 0)+1);\n        }\n  \
    \      return hm;\nreturn new HashMap<String,Integer>();\n    }\n    public static\
    \ void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpo5n8zclc.java:28: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                         ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmpo5n8zclc.java:29:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n                  \
    \                                                         ^\n  symbol:   method\
    \ of(String,int,String,int)\n  location: interface Map\n/tmp/tmpo5n8zclc.java:30:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpo5n8zclc.java:31: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpo5n8zclc.java:32: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmpo5n8zclc.java:33: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \     ^\n  symbol:   method of(String,int,String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmpo5n8zclc.java:35: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 1)))));\n            \
    \                                            "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> map = new HashMap<>();\n\
    \        int max = 1;\n        int count = 0;\n        for (int i=0; i<test.length();\
    \ i++) {\n            if (map.containsKey(test.charAt(i))) {\n               \
    \ map.put(test.charAt(i), map.get(test.charAt(i)) + 1);\n                if (map.get(test.charAt(i))\
    \ > max) {\n                    max = map.get(test.charAt(i));\n             \
    \   }\n                count++;\n            } else {\n                map.put(test.charAt(i),\
    \ 1);\n            }\n        }\n        if (count > 0) {\n            map.put(\"\
    All\", count);\n        }\n        return map;\nreturn new HashMap<String,Integer>();\n\
    \    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzhiqike_.java:24: error: no suitable method found for put(char,int)\n\
    \                map.put(test.charAt(i), map.get(test.charAt(i)) + 1);\n     \
    \              ^\n    method Map.put(String,Integer) is not applicable\n     \
    \ (argument mismatch; char cannot be converted to String)\n    method AbstractMap.put(String,Integer)\
    \ is not applicable\n      (argument mismatch; char cannot be converted to String)\n\
    \    method HashMap.put(String,Integer) is not applicable\n      (argument mismatch;\
    \ char cannot be converted to String)\n/tmp/tmpzhiqike_.java:30: error: no suitable\
    \ method found for put(char,int)\n                map.put(test.charAt(i), 1);\n\
    \                   ^\n    method Map.put(String,Integer) is not applicable\n\
    \      (argument mismatch; char cannot be converted to String)\n    method AbstractMap.put(String,Integer)\
    \ is not applicable\n      (argument mismatch; char cannot be converted to String)\n\
    \    method HashMap.put(String,Integer) is not applicable\n      (argument mismatch;\
    \ char cannot be converted to String)\n/tmp/tmpzhiqike_.java:40: error: cannot\
    \ find symbol\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n                                                     \
    \                    ^\n  symbol:   method of(String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmpzhiqike_.java:41: error: cannot find symbol\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                           ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmpzhiqike_.java:42:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpzhiqike_.java:43: error: cannot find symbol\n\
    \    assert(histogram("
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> hmap = new HashMap<String,Integer>();\n\
    \        for(int i = 0; i < test.length(); i++) {\n            if (hmap.containsKey(test.charAt(i)))\
    \ hmap.put(test.charAt(i), hmap.get(test.charAt(i)) + 1);\n            else hmap.put(test.charAt(i),1);\n\
    \        }\n        return hmap;\nreturn new HashMap<String,Integer>();\n    }\n\
    \    public static void main(String[] args) {\n    assert(histogram((\"a b b a\"\
    )).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpc_a1wf7y.java:21: error: no suitable method found for put(char,int)\n\
    \            if (hmap.containsKey(test.charAt(i))) hmap.put(test.charAt(i), hmap.get(test.charAt(i))\
    \ + 1);\n                                                      ^\n    method Map.put(String,Integer)\
    \ is not applicable\n      (argument mismatch; char cannot be converted to String)\n\
    \    method AbstractMap.put(String,Integer) is not applicable\n      (argument\
    \ mismatch; char cannot be converted to String)\n    method HashMap.put(String,Integer)\
    \ is not applicable\n      (argument mismatch; char cannot be converted to String)\n\
    /tmp/tmpc_a1wf7y.java:22: error: no suitable method found for put(char,int)\n\
    \            else hmap.put(test.charAt(i),1);\n                     ^\n    method\
    \ Map.put(String,Integer) is not applicable\n      (argument mismatch; char cannot\
    \ be converted to String)\n    method AbstractMap.put(String,Integer) is not applicable\n\
    \      (argument mismatch; char cannot be converted to String)\n    method HashMap.put(String,Integer)\
    \ is not applicable\n      (argument mismatch; char cannot be converted to String)\n\
    /tmp/tmpc_a1wf7y.java:28: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                         ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmpc_a1wf7y.java:29:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n                  \
    \                                                         ^\n  symbol:   method\
    \ of(String,int,String,int)\n  location: interface Map\n/tmp/tmpc_a1wf7y.java:30:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> histogram = new HashMap<String,Integer>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            if (histogram.containsKey(word)) {\n                histogram.put(word,\
    \ histogram.get(word)+1);\n            }\n            else {\n               \
    \ histogram.put(word, 1);\n            }\n        }\n        Arrays.sort(histogram.keySet());\n\
    \        return histogram;\nreturn new HashMap<String,Integer>();\n    }\n   \
    \ public static void main(String[] args) {\n    assert(histogram((\"a b b a\"\
    )).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpetjv9sxp.java:29: error: no suitable method found for sort(Set<String>)\n\
    \        Arrays.sort(histogram.keySet());\n              ^\n    method Arrays.sort(int[])\
    \ is not applicable\n      (argument mismatch; Set<String> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; Set<String> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; Set<String> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; Set<String> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; Set<String> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; Set<String> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; Set<String> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; Set<String> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\n/tmp/tmpetjv9sxp.java:34: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                         ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmpetjv9sxp.java:35:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\""
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> map = new HashMap<>();\n\
    \        String[] s = test.split(\" \");\n        for(int i = 0;i<s.length;i++){\n\
    \            Integer count = map.get(s[i]);\n            map.put(s[i],(count==null?0:count)+1);\n\
    \        }\n        return map;\nreturn new HashMap<String,Integer>();\n    }\n\
    \    public static void main(String[] args) {\n    assert(histogram((\"a b b a\"\
    )).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3doq4jua.java:29: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                         ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmp3doq4jua.java:30:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n                  \
    \                                                         ^\n  symbol:   method\
    \ of(String,int,String,int)\n  location: interface Map\n/tmp/tmp3doq4jua.java:31:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmp3doq4jua.java:32: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmp3doq4jua.java:33: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmp3doq4jua.java:34: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \     ^\n  symbol:   method of(String,int,String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmp3doq4jua.java:36: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 1)))));\n            \
    \                                            "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        return Arrays.stream(test.split(\" \"))\n\
    \            .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()))\n\
    \            .entrySet().stream()\n            .max(Comparator.comparing(e ->\
    \ e.getValue()))\n            .map(e -> new HashMap<String,Integer>(e.getKey(),e.getValue()))\n\
    \            .collect(Collectors.toList());\nreturn new HashMap<String,Integer>();\n\
    \    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpivwp9z86.java:20: error: cannot find symbol\n            .collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting()))\n                                           ^\n  symbol:\
    \   variable Function\n  location: class Problem\n/tmp/tmpivwp9z86.java:22: error:\
    \ cannot find symbol\n            .max(Comparator.comparing(e -> e.getValue()))\n\
    \                                            ^\n  symbol:   method getValue()\n\
    \  location: variable e of type Object\n/tmp/tmpivwp9z86.java:28: error: cannot\
    \ find symbol\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n                                                     \
    \                    ^\n  symbol:   method of(String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmpivwp9z86.java:29: error: cannot find symbol\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                           ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmpivwp9z86.java:30:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpivwp9z86.java:31: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpivwp9z86.java:32: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmpivwp9z86.java:33: error: canno"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> histogram = new HashMap<String,Integer>();\n\
    \        for(int i = 0; i < test.length(); i++) {\n            String current\
    \ = test.substring(i, i+1);\n            if(!histogram.containsKey(current)){\n\
    \                histogram.put(current, 1);\n            } else {\n          \
    \      histogram.put(current, histogram.get(current) + 1);\n            }\n  \
    \      }\n        return histogram;\nreturn new HashMap<String,Integer>();\n \
    \   }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpd9e2_k_f.java:32: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                         ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmpd9e2_k_f.java:33:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n                  \
    \                                                         ^\n  symbol:   method\
    \ of(String,int,String,int)\n  location: interface Map\n/tmp/tmpd9e2_k_f.java:34:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpd9e2_k_f.java:35: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpd9e2_k_f.java:36: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmpd9e2_k_f.java:37: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \     ^\n  symbol:   method of(String,int,String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmpd9e2_k_f.java:39: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 1)))));\n            \
    \                                            "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> results = new HashMap<String,Integer>();\n\
    \        HashSet<String> set = new HashSet<String>();\n        test.toUpperCase().replaceAll(\"\
    \\\\s+\", \"\").chars().mapToObj(c -> Integer.toString(c)).forEach(set::add);\n\
    \        set.stream().distinct().count().forEach(count->results.put(count, set.size()));\n\
    \        return results;\nreturn new HashMap<String,Integer>();\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpylizy_3h.java:22: error: long cannot be dereferenced\n        set.stream().distinct().count().forEach(count->results.put(count,\
    \ set.size()));\n                                       ^\n/tmp/tmpylizy_3h.java:27:\
    \ error: cannot find symbol\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n                                                     \
    \                    ^\n  symbol:   method of(String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmpylizy_3h.java:28: error: cannot find symbol\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                           ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmpylizy_3h.java:29:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpylizy_3h.java:30: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpylizy_3h.java:31: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmpylizy_3h.java:32: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \     ^\n  symbol:   method of(String,int,String,int,String,int)\n  location:\
    \ interface Map\n/t"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> letters = new HashMap<String,Integer>();\n\
    \        String[] letterArray = test.split(\" \");\n        for (String letter:\
    \ letterArray) {\n            if (letters.containsKey(letter)) {\n           \
    \     letters.put(letter, letters.get(letter) + 1);\n            } else {\n  \
    \              letters.put(letter, 1);\n            }\n        }\n        return\
    \ letters;\nreturn new HashMap<String,Integer>();\n    }\n    public static void\
    \ main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9wp2nlp8.java:32: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                         ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmp9wp2nlp8.java:33:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n                  \
    \                                                         ^\n  symbol:   method\
    \ of(String,int,String,int)\n  location: interface Map\n/tmp/tmp9wp2nlp8.java:34:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmp9wp2nlp8.java:35: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmp9wp2nlp8.java:36: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmp9wp2nlp8.java:37: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \     ^\n  symbol:   method of(String,int,String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmp9wp2nlp8.java:39: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 1)))));\n            \
    \                                            "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> histogram = new HashMap<>();\n\
    \        // find all different characters\n        List<String> characterList\
    \ = Arrays.stream(test.split(\" \")).distinct().collect(Collectors.toList());\n\
    \        // get the frequency of each character\n        for (String character\
    \ : characterList) {\n            Integer count = histogram.get(character);\n\
    \            // if the character is already in the histogram\n            // then\
    \ increment the occurrence by 1\n            if (count != null){\n           \
    \     histogram.put(character, histogram.get(character) + 1);\n            }\n\
    \            // if there's no frequency for that character yet\n            //\
    \ then set the frequency to 1 for this character\n            else {\n       \
    \         histogram.put(character, 1);\n            }\n        }\n        return\
    \ histogram;\nreturn new HashMap<String,Integer>();\n    }\n    public static\
    \ void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp22yjph13.java:40: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                         ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmp22yjph13.java:41:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n                  \
    \                                                         ^\n  symbol:   method\
    \ of(String,int,String,int)\n  location: interface Map\n/tmp/tmp22yjph13.java:42:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmp22yjph13.java:43: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmp22yjph13.java:44: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmp22yjph13.java:45: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \     ^\n  symbol:   method of(String,int,String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmp22yjph13.java:47: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 1)))));\n            \
    \                                            "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n      HashMap<String,Integer> map = new HashMap<>();\n\
    \      String[] chars = test.split(\" \");\n      for (String c : chars) {\n \
    \       if (map.containsKey(c)) {\n          map.put(c, map.get(c)+1);\n     \
    \   } else {\n          map.put(c, 1);\n        }\n      }\n      return map;\n\
    return new HashMap<String,Integer>();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmprz3t1fsp.java:32: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                         ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmprz3t1fsp.java:33:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n                  \
    \                                                         ^\n  symbol:   method\
    \ of(String,int,String,int)\n  location: interface Map\n/tmp/tmprz3t1fsp.java:34:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmprz3t1fsp.java:35: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmprz3t1fsp.java:36: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmprz3t1fsp.java:37: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \     ^\n  symbol:   method of(String,int,String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmprz3t1fsp.java:39: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 1)))));\n            \
    \                                            "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        // your code goes here\n        HashMap<String,Integer>\
    \ myHashMap = new HashMap<String,Integer>();\n        int count=0;\n        String[]\
    \ testArray = test.split(\" \");\n        for(String s: testArray) {\n       \
    \     if(!myHashMap.containsKey(s)) {\n                myHashMap.put(s, count);\n\
    \                count++;\n            }\n            else {\n               \
    \ int compare = Integer.valueOf(myHashMap.get(s));\n                if(compare>Integer.valueOf(s)){\n\
    \                    myHashMap.put(s, count);\n                    count++;\n\
    \                }\n            }\n        }\n        return myHashMap;\nreturn\
    \ new HashMap<String,Integer>();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp46drxujb.java:40: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                         ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmp46drxujb.java:41:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n                  \
    \                                                         ^\n  symbol:   method\
    \ of(String,int,String,int)\n  location: interface Map\n/tmp/tmp46drxujb.java:42:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmp46drxujb.java:43: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmp46drxujb.java:44: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmp46drxujb.java:45: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \     ^\n  symbol:   method of(String,int,String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmp46drxujb.java:47: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 1)))));\n            \
    \                                            "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String, Integer> histogram = new HashMap<>();\n\
    \        for (String str : test.split(\" \")){\n            int count = histogram.getOrDefault(str,\
    \ 0) + 1;\n            histogram.put(str, count);\n        }\n        return histogram;\n\
    return new HashMap<String,Integer>();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjx42oixe.java:28: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                         ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmpjx42oixe.java:29:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n                  \
    \                                                         ^\n  symbol:   method\
    \ of(String,int,String,int)\n  location: interface Map\n/tmp/tmpjx42oixe.java:30:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpjx42oixe.java:31: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpjx42oixe.java:32: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmpjx42oixe.java:33: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \     ^\n  symbol:   method of(String,int,String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmpjx42oixe.java:35: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 1)))));\n            \
    \                                            "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        if (test.isEmpty())\n            return new\
    \ HashMap<String,Integer>();\n        HashMap<String,Integer> map = new HashMap<String,Integer>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\n\
    \            map.computeIfAbsent(word,key -> 0); // Adds entry if it doesn't exist\
    \ yet\n        map.values().removeAll(Collections.singleton(map.values().stream().mapToInt(Integer::intValue).max()));\n\
    \        return map;\nreturn new HashMap<String,Integer>();\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpcrzpc4b3.java:30: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                         ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmpcrzpc4b3.java:31:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n                  \
    \                                                         ^\n  symbol:   method\
    \ of(String,int,String,int)\n  location: interface Map\n/tmp/tmpcrzpc4b3.java:32:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpcrzpc4b3.java:33: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpcrzpc4b3.java:34: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmpcrzpc4b3.java:35: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \     ^\n  symbol:   method of(String,int,String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmpcrzpc4b3.java:37: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 1)))));\n            \
    \                                            "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> result = new HashMap<String,Integer>();\n\
    \        HashMap<String,Integer> curr = new HashMap<String,Integer>();\n     \
    \   String letters = test.toLowerCase();\n        letters = letters.trim();\n\
    \        letters = letters.replaceAll(\"\\\\s\",\"\");\n        letters = letters.replaceAll(\"\
    \  \",\"\");\n        letters = letters.replaceAll(\"\\\\[\\\\]\",\"\");\n   \
    \     letters = letters.replaceAll(\"\\\\{\",\"\");\n        letters = letters.replaceAll(\"\
    \\\\}\",\"\");\n        letters = letters.replaceAll(\"\\\\(\",\"\");\n      \
    \  letters = letters.replaceAll(\"\\\\)\",\"\");\n        letters = letters.replaceAll(\"\
    \\\\+\",\"\");\n        letters = letters.replaceAll(\"\\\\-\",\"\");\n      \
    \  letters = letters.replaceAll(\"\\\\*\",\"\");\n        letters = letters.replaceAll(\"\
    \\\\/\",\"\");\n        letters = letters.replaceAll(\"\\\\^\",\"\");\n      \
    \  letters = letters.replaceAll(\"\\\\~\",\"\");\n        letters = letters.replaceAll(\"\
    \\\\?\",\"\");\n        letters = letters.replaceAll(\"\\\\*\",\"\");\n      \
    \  letters = letters.replaceAll(\"\\\\+\",\"\");\n        letters = letters.replaceAll(\"\
    \\\\-\",\"\");\n        letters = letters.replaceAll(\"\\\\*\",\"\");\n      \
    \  letters = letters.replaceAll(\"\\\\/\",\"\");\n        letters = letters.replaceAll(\"\
    \\\\^\",\"\");\n        letters = letters.replaceAll(\"\\\\~\",\"\");\n      \
    \  letters = letters.replaceAll(\"\\\\?\",\"\");\n        letters = letters.replaceAll(\"\
    \\\\*\",\"\");\n        letters = letters.replaceAll(\"\\\\+\",\"\");\n      \
    \  letters = letters.replaceAll(\"\\\\-\",\"\");\n        letters = letters.replaceAll(\"\
    \\\\*\",\"\");\n        letters = letters.replaceAll(\"\\\\/\",\"\");\n      \
    \  letters = letters.replaceAll(\"\\\\^\",\"\");\n        letters = letters.replaceAll(\"\
    \\\\~\",\"\");\n        letters = letters.replaceAll(\"\\\\?\",\"\");\n      \
    \  letters = letters.replaceAll(\"\\\\*\",\"\");\n        letters = letters.replaceAll(\"\
    \\\\+\",\"\");\n        letters = letters.replaceAll(\"\\\\-\",\"\");\n      \
    \  letters = letters.replaceAll(\"\\\\*\",\"\");\n        letters = letters.replaceAll(\"\
    \\\\/\",\"\");\n        letters = letters.replaceAll(\"\\\\^\",\"\");\n      \
    \  letters = letters.replaceAll(\"\\\\~\",\"\");\n        letter\nreturn new HashMap<String,Integer>();\n\
    \    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpresw5zvq.java:60: error: not a statement\n        letter\n    \
    \    ^\n/tmp/tmpresw5zvq.java:60: error: ';' expected\n        letter\n      \
    \        ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        if (test.length() == 0) {\n            return\
    \ new HashMap<String,Integer>();\n        }\n        HashMap<String,Integer> map\
    \ = new HashMap<String,Integer>();\n        char[] array = new char[test.length()];\n\
    \        char currentChar = ' ';\n        int count = 0;\n        for (int i =\
    \ 0; i < test.length(); i++) {\n            currentChar = test.charAt(i);\n  \
    \          if (!map.containsKey(currentChar)) {\n                map.put(currentChar,\
    \ 1);\n            } else {\n                count = map.get(currentChar) + 1;\n\
    \                map.put(currentChar, count);\n            }\n        }\n    \
    \    return map;\nreturn new HashMap<String,Integer>();\n    }\n    public static\
    \ void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp633brbh5.java:29: error: no suitable method found for put(char,int)\n\
    \                map.put(currentChar, 1);\n                   ^\n    method Map.put(String,Integer)\
    \ is not applicable\n      (argument mismatch; char cannot be converted to String)\n\
    \    method AbstractMap.put(String,Integer) is not applicable\n      (argument\
    \ mismatch; char cannot be converted to String)\n    method HashMap.put(String,Integer)\
    \ is not applicable\n      (argument mismatch; char cannot be converted to String)\n\
    /tmp/tmp633brbh5.java:32: error: no suitable method found for put(char,int)\n\
    \                map.put(currentChar, count);\n                   ^\n    method\
    \ Map.put(String,Integer) is not applicable\n      (argument mismatch; char cannot\
    \ be converted to String)\n    method AbstractMap.put(String,Integer) is not applicable\n\
    \      (argument mismatch; char cannot be converted to String)\n    method HashMap.put(String,Integer)\
    \ is not applicable\n      (argument mismatch; char cannot be converted to String)\n\
    /tmp/tmp633brbh5.java:39: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                         ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmp633brbh5.java:40:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n                  \
    \                                                         ^\n  symbol:   method\
    \ of(String,int,String,int)\n  location: interface Map\n/tmp/tmp633brbh5.java:41:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmp633brbh5.java:42: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashM"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> map = new HashMap<>();\n\
    \        Set<String> keySet = test.toLowerCase().split(\" \");\n        for(String\
    \ key: keySet){\n            Integer value = map.get(key);\n            if(value\
    \ == null){\n                map.put(key,1);\n            } else {\n         \
    \       map.put(key,value+1);\n            }\n        }\n        return map;\n\
    return new HashMap<String,Integer>();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjoxzfn97.java:20: error: incompatible types: String[] cannot be\
    \ converted to Set<String>\n        Set<String> keySet = test.toLowerCase().split(\"\
    \ \");\n                                                     ^\n/tmp/tmpjoxzfn97.java:33:\
    \ error: cannot find symbol\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n                                                     \
    \                    ^\n  symbol:   method of(String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmpjoxzfn97.java:34: error: cannot find symbol\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                           ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmpjoxzfn97.java:35:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpjoxzfn97.java:36: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpjoxzfn97.java:37: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmpjoxzfn97.java:38: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \     ^\n  symbol:   method of(String,int,String,int,String,int)\n  loca"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> histogram = new HashMap<>();\n\
    \        String[] letters = test.split(\" \");\n        Arrays.sort(letters);\n\
    \n        for (String letter : letters) {\n            int occurrencesCount =\
    \ histogram.containsKey(letter) ? histogram.get(letter) : 0;\n            occurrencesCount++;\n\
    \            histogram.put(letter, occurrencesCount);\n        }\n\n        return\
    \ histogram;\nreturn new HashMap<String,Integer>();\n    }\n    public static\
    \ void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5c9jn9ll.java:33: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                         ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmp5c9jn9ll.java:34:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n                  \
    \                                                         ^\n  symbol:   method\
    \ of(String,int,String,int)\n  location: interface Map\n/tmp/tmp5c9jn9ll.java:35:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmp5c9jn9ll.java:36: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmp5c9jn9ll.java:37: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmp5c9jn9ll.java:38: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \     ^\n  symbol:   method of(String,int,String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmp5c9jn9ll.java:40: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 1)))));\n            \
    \                                            "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> histogram = new HashMap<>();\n\
    \n        // Initialize hash map and split input string into tokens\n        String[]\
    \ tokens = test.split(\" \");\n\n        // Use a for loop to loop through the\
    \ tokens\n        for (int i = 0; i < tokens.length; i++) {\n            // Create\
    \ new entry with key = 'tokens[i]' and value = 1;\n            histogram.put(tokens[i],histogram.getOrDefault(tokens[i],1)\
    \ + 1);\n        }\n\n        // Initialize frequency counter and add token that\
    \ appear only once\n        int frequencyCounter = 0;\n        for (Map.Entry<String,\
    \ Integer> entry : histogram.entrySet()) {\n            if (entry.getValue() ==\
    \ 1) frequencyCounter++;\n        }\n        histogram.put(\"f\", frequencyCounter);\n\
    \n        // Return histogram\n        return histogram;\nreturn new HashMap<String,Integer>();\n\
    \    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6w2jyovf.java:42: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                         ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmp6w2jyovf.java:43:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n                  \
    \                                                         ^\n  symbol:   method\
    \ of(String,int,String,int)\n  location: interface Map\n/tmp/tmp6w2jyovf.java:44:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmp6w2jyovf.java:45: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmp6w2jyovf.java:46: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmp6w2jyovf.java:47: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \     ^\n  symbol:   method of(String,int,String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmp6w2jyovf.java:49: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 1)))));\n            \
    \                                            "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> h = new HashMap<>();\n\
    \        String[] split = test.split(\" \");\n        for (String word : split)\
    \ {\n            if (word.equalsIgnoreCase(\"\"))\n                continue;\n\
    \            int cnt = h.get(word);\n            if (cnt == null) {\n        \
    \        cnt = 0;\n            }\n            h.put(word, ++cnt);\n        }\n\
    \        return h;\nreturn new HashMap<String,Integer>();\n    }\n    public static\
    \ void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6a0elvak.java:25: error: incomparable types: int and <null>\n \
    \           if (cnt == null) {\n                    ^\n/tmp/tmp6a0elvak.java:34:\
    \ error: cannot find symbol\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n                                                     \
    \                    ^\n  symbol:   method of(String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmp6a0elvak.java:35: error: cannot find symbol\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                           ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmp6a0elvak.java:36:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmp6a0elvak.java:37: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmp6a0elvak.java:38: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmp6a0elvak.java:39: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \     ^\n  symbol:   method of(String,int,String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmp6a0elvak.java:41: error: cannot find symbol\n    assert(histogra"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> histogram = new HashMap<>();\n\
    \        String[] letters = test.split(\" \");\n        for (String letter : letters)\
    \ {\n            String key = letter;\n            Integer value = histogram.get(key);\n\
    \            if (value == null) {\n                histogram.put(key, 1);\n  \
    \          } else {\n                histogram.put(key, value + 1);\n        \
    \    }\n        }\n        return histogram;\nreturn new HashMap<String,Integer>();\n\
    \    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8g0imjz_.java:34: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                         ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmp8g0imjz_.java:35:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n                  \
    \                                                         ^\n  symbol:   method\
    \ of(String,int,String,int)\n  location: interface Map\n/tmp/tmp8g0imjz_.java:36:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmp8g0imjz_.java:37: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmp8g0imjz_.java:38: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmp8g0imjz_.java:39: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \     ^\n  symbol:   method of(String,int,String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmp8g0imjz_.java:41: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 1)))));\n            \
    \                                            "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        String s = test.replaceAll(\"[^a-zA-Z]+\"\
    , \" \").trim();\n        HashMap<String,Integer> h = new HashMap<String,Integer>();\n\
    \        for (String t : s.split(\" \"))\n            h.putIfAbsent(t, 0);\n \
    \       return h;\nreturn new HashMap<String,Integer>();\n    }\n    public static\
    \ void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp91ftbe75.java:27: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                         ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmp91ftbe75.java:28:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n                  \
    \                                                         ^\n  symbol:   method\
    \ of(String,int,String,int)\n  location: interface Map\n/tmp/tmp91ftbe75.java:29:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmp91ftbe75.java:30: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmp91ftbe75.java:31: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmp91ftbe75.java:32: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \     ^\n  symbol:   method of(String,int,String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmp91ftbe75.java:34: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 1)))));\n            \
    \                                            "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> map = new HashMap<String,Integer>();\n\
    \        String[] strings = test.split(\" \");\n        for (int i = 0; i < strings.length;\
    \ i++) {\n            if (map.containsKey(strings[i])) {\n                int\
    \ currentCount = map.get(strings[i]);\n                map.put(strings[i], currentCount\
    \ + 1);\n            }\n            else {\n                map.put(strings[i],\
    \ 1);\n            }\n        }\n        return map;\nreturn new HashMap<String,Integer>();\n\
    \    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3onrlj7y.java:34: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                         ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmp3onrlj7y.java:35:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n                  \
    \                                                         ^\n  symbol:   method\
    \ of(String,int,String,int)\n  location: interface Map\n/tmp/tmp3onrlj7y.java:36:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmp3onrlj7y.java:37: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmp3onrlj7y.java:38: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmp3onrlj7y.java:39: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \     ^\n  symbol:   method of(String,int,String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmp3onrlj7y.java:41: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 1)))));\n            \
    \                                            "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> map = new HashMap<>();\n\
    \        String[] splitted = test.split(\" \");\n        for(String s : splitted)\
    \ {\n            if(!map.containsKey(s)) {\n                map.put(s,1);\n  \
    \          } else {\n                map.put(s,map.get(s)+1);\n            }\n\
    \        }\n        return map;\nreturn new HashMap<String,Integer>();\n    }\n\
    \    public static void main(String[] args) {\n    assert(histogram((\"a b b a\"\
    )).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5yahpk83.java:32: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                         ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmp5yahpk83.java:33:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n                  \
    \                                                         ^\n  symbol:   method\
    \ of(String,int,String,int)\n  location: interface Map\n/tmp/tmp5yahpk83.java:34:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmp5yahpk83.java:35: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmp5yahpk83.java:36: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmp5yahpk83.java:37: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \     ^\n  symbol:   method of(String,int,String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmp5yahpk83.java:39: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 1)))));\n            \
    \                                            "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> result = new HashMap<String,Integer>();\n\
    \        String[] words = test.trim().replaceAll(\"\\\\s+\",\"\").split(\" \"\
    );\n        for(String word : words) {\n            if(result.containsKey(word))\
    \ {\n                Integer value = result.get(word);\n                result.put(word,\
    \ value+1);\n            }\n            else {\n                result.put(word,\
    \ 1);\n            }\n        }\n        return result;\nreturn new HashMap<String,Integer>();\n\
    \    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpev32_a0z.java:34: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                         ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmpev32_a0z.java:35:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n                  \
    \                                                         ^\n  symbol:   method\
    \ of(String,int,String,int)\n  location: interface Map\n/tmp/tmpev32_a0z.java:36:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpev32_a0z.java:37: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpev32_a0z.java:38: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmpev32_a0z.java:39: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \     ^\n  symbol:   method of(String,int,String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmpev32_a0z.java:41: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 1)))));\n            \
    \                                            "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        String s[] = test.split(\" \");\n        HashMap<String,Integer>\
    \ histogram = new HashMap<String,Integer>();\n        for (String element : s)\
    \ {\n            if(histogram.containsKey(element)) {\n                histogram.put(element,\
    \ histogram.get(element) + 1);\n            } else {\n                histogram.put(element,\
    \ 1);\n            }\n        }\n        histogram.forEach((k,v) -> {\n      \
    \      if(v > 1) {\n                System.out.println(k + \" -> \" + v);\n  \
    \          }\n        });\n        return histogram;\nreturn new HashMap<String,Integer>();\n\
    \    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp17g5kx17.java:37: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                         ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmp17g5kx17.java:38:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n                  \
    \                                                         ^\n  symbol:   method\
    \ of(String,int,String,int)\n  location: interface Map\n/tmp/tmp17g5kx17.java:39:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmp17g5kx17.java:40: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmp17g5kx17.java:41: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmp17g5kx17.java:42: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \     ^\n  symbol:   method of(String,int,String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmp17g5kx17.java:44: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 1)))));\n            \
    \                                            "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        if (test.isEmpty()) {\n            return\
    \ new HashMap<>();\n        }\n        HashMap<String,Integer> map = new HashMap<>();\n\
    \        String[] array = test.trim().split(\" \");\n        for (String element\
    \ : array) {\n            map.merge(element, map.getOrDefault(element,0)+1, Integer::sum);\n\
    \        }\n        return map;\nreturn new HashMap<String,Integer>();\n    }\n\
    \    public static void main(String[] args) {\n    assert(histogram((\"a b b a\"\
    )).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxmy37ra0.java:31: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                         ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmpxmy37ra0.java:32:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n                  \
    \                                                         ^\n  symbol:   method\
    \ of(String,int,String,int)\n  location: interface Map\n/tmp/tmpxmy37ra0.java:33:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpxmy37ra0.java:34: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpxmy37ra0.java:35: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmpxmy37ra0.java:36: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \     ^\n  symbol:   method of(String,int,String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmpxmy37ra0.java:38: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 1)))));\n            \
    \                                            "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        String[] arr = test.split(\" \");\n      \
    \  HashMap<String,Integer> hm = new HashMap<>();\n        for (String string :\
    \ arr){\n            if (!hm.containsKey(string))\n                hm.put(string,\
    \ 1);\n            else\n                hm.put(string, hm.get(string) + 1);\n\
    \        }\n        return hm;\nreturn new HashMap<String,Integer>();\n    }\n\
    \    public static void main(String[] args) {\n    assert(histogram((\"a b b a\"\
    )).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpkxncpovx.java:31: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                         ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmpkxncpovx.java:32:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n                  \
    \                                                         ^\n  symbol:   method\
    \ of(String,int,String,int)\n  location: interface Map\n/tmp/tmpkxncpovx.java:33:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpkxncpovx.java:34: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpkxncpovx.java:35: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmpkxncpovx.java:36: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \     ^\n  symbol:   method of(String,int,String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmpkxncpovx.java:38: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 1)))));\n            \
    \                                            "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> map = new HashMap<>();\n\
    \        if (test.isEmpty()) {\n            return map;\n        }\n        HashSet<String>\
    \ set = new HashSet<>();\n        for (String word : test.split(\" \")) {\n  \
    \          int occurrence = map.containsKey(word) ? map.get(word) + 1 : 1;\n \
    \           map.put(word, occurrence);\n            set.add(word);\n        }\n\
    \        map.putAll(\n            set.stream()\n                .collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting()))\n        );\n        return map;\nreturn new HashMap<String,Integer>();\n\
    \    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpm4jltorc.java:31: error: cannot find symbol\n                .collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting()))\n                                               ^\n\
    \  symbol:   variable Function\n  location: class Problem\n/tmp/tmpm4jltorc.java:37:\
    \ error: cannot find symbol\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n                                                     \
    \                    ^\n  symbol:   method of(String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmpm4jltorc.java:38: error: cannot find symbol\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                           ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmpm4jltorc.java:39:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpm4jltorc.java:40: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpm4jltorc.java:41: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmpm4jltorc.java:42: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \     ^\n  symbol:   method of(Str"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> map = new HashMap<>();\n\
    \        String str = test.toLowerCase();\n        str = str.replaceAll(\"\\\\\
    s+\", \" \");\n        str = str.trim().replaceAll(\"(?i)([a-z])\", \" $1\");\n\
    \        str = str.replaceAll(\"(?i)([a-z]+)\", \" $1 \");\n        str = str.trim().replaceAll(\"\
    (?i)([a-z])\", \" $1\");\n        str = str.replaceAll(\"(?i)([a-z]+)\", \" $1\
    \ \");\n        str = str.trim().replaceAll(\"(?i)([a-z])\", \" $1\");\n     \
    \   str = str.replaceAll(\"(?i)([a-z]+)\", \" $1 \");\n        str = str.replaceAll(\"\
    (?i)([a-z])\", \" $1\");\n        str = str.replaceAll(\"(?i)([a-z]+)\", \" $1\
    \ \");\n        str = str.replaceAll(\"(?i)([a-z])\", \" $1\");\n        str =\
    \ str.replaceAll(\"(?i)([a-z]+)\", \" $1 \");\n        str = str.replaceAll(\"\
    (?i)([a-z])\", \" $1\");\n        str = str.replaceAll(\"(?i)([a-z]+)\", \" $1\
    \ \");\n        str = str.replaceAll(\"(?i)([a-z])\", \" $1\");\n        str =\
    \ str.replaceAll(\"(?i)([a-z]+)\", \" $1 \");\n        str = str.replaceAll(\"\
    (?i)([a-z])\", \" $1\");\n        str = str.replaceAll(\"(?i)([a-z]+)\", \" $1\
    \ \");\n        str = str.replaceAll(\"(?i)([a-z])\", \" $1\");\n        str =\
    \ str.replaceAll(\"(?i)([a-z]+)\", \" $1 \");\n        str = str.replaceAll(\"\
    (?i)([a-z])\", \" $1\");\n        str = str.replaceAll(\"(?i)([a-z]+)\", \" $1\
    \ \");\n        str = str.replaceAll(\"(?i)([a-z])\", \" $1\");\n        str =\
    \ str.replaceAll(\"(?i)([a-z]+)\", \" $1 \");\n        str = str.replaceAll(\"\
    (?i)([a-z])\", \" $1\");\n        str = str.replaceAll(\"(?i)([a-z]+)\", \" $1\
    \ \");\n        str = str.replaceAll(\"(?i)([a-z])\", \" $1\");\n        str =\
    \ str.replaceAll(\"(?i)([a-z]+)\", \" $1 \");\n        str = str.replaceAll(\"\
    (?i)([a-z])\", \" $1\");\n        str = str.replaceAll(\"(?i)([a-z]+)\", \" $1\
    \ \");\n        str = str.replaceAll(\"(?i)([a-z])\", \" $1\");\nreturn new HashMap<String,Integer>();\n\
    \    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpla0es1un.java:54: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                         ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmpla0es1un.java:55:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n                  \
    \                                                         ^\n  symbol:   method\
    \ of(String,int,String,int)\n  location: interface Map\n/tmp/tmpla0es1un.java:56:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpla0es1un.java:57: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpla0es1un.java:58: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmpla0es1un.java:59: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \     ^\n  symbol:   method of(String,int,String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmpla0es1un.java:61: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 1)))));\n            \
    \                                            "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        // Write your code here\n        HashMap<String,Integer>\
    \ hm=new HashMap<>();\n        String[] arr = test.split(\" \");\n        Map<String,Integer>\
    \ map = new TreeMap<String,Integer>().subMap(arr,0,arr.length);\n        map.forEach((k,\
    \ v) -> hm.put(k, v));\n        HashMap<String,Integer> result = new HashMap<>();\n\
    \        hm.forEach((k,v) -> {\n            if(result.containsKey(v)){\n     \
    \           result.set(v, result.get(v) + 1);\n            }else{\n          \
    \      result.set(v,1);\n            }\n        });\n        return result;\n\
    return new HashMap<String,Integer>();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpmp1235j3.java:22: error: no suitable method found for subMap(String[],int,int)\n\
    \        Map<String,Integer> map = new TreeMap<String,Integer>().subMap(arr,0,arr.length);\n\
    \                                                               ^\n    method\
    \ TreeMap.subMap(String,boolean,String,boolean) is not applicable\n      (actual\
    \ and formal argument lists differ in length)\n    method TreeMap.subMap(String,String)\
    \ is not applicable\n      (actual and formal argument lists differ in length)\n\
    /tmp/tmpmp1235j3.java:27: error: cannot find symbol\n                result.set(v,\
    \ result.get(v) + 1);\n                      ^\n  symbol:   method set(Integer,int)\n\
    \  location: variable result of type HashMap<String,Integer>\n/tmp/tmpmp1235j3.java:29:\
    \ error: cannot find symbol\n                result.set(v,1);\n              \
    \        ^\n  symbol:   method set(Integer,int)\n  location: variable result of\
    \ type HashMap<String,Integer>\n/tmp/tmpmp1235j3.java:36: error: cannot find symbol\n\
    \    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n                                                     \
    \                    ^\n  symbol:   method of(String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmpmp1235j3.java:37: error: cannot find symbol\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                           ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmpmp1235j3.java:38:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpmp1235j3.java:39: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                    "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> map = new HashMap<>();\n\
    \        // Convert each letter to its respective ascii value\n        String\
    \ alphabet = test.toLowerCase();\n        // Iterate through each letter\n   \
    \     for (char letter : alphabet.toCharArray()) {\n            // Get the frequency\
    \ of the letter\n            int frequency = map.get(letter);\n            //\
    \ If the letter is not yet in the map increment the frequency\n            if\
    \ (frequency == null) {\n                frequency = 1;\n            } else {\n\
    \                frequency++;\n            }\n            // Add the letter to\
    \ the map\n            map.put(letter,frequency);\n        }\n        return map;\n\
    return new HashMap<String,Integer>();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1d7wk0k4.java:27: error: incomparable types: int and <null>\n \
    \           if (frequency == null) {\n                          ^\n/tmp/tmp1d7wk0k4.java:33:\
    \ error: no suitable method found for put(char,int)\n            map.put(letter,frequency);\n\
    \               ^\n    method Map.put(String,Integer) is not applicable\n    \
    \  (argument mismatch; char cannot be converted to String)\n    method AbstractMap.put(String,Integer)\
    \ is not applicable\n      (argument mismatch; char cannot be converted to String)\n\
    \    method HashMap.put(String,Integer) is not applicable\n      (argument mismatch;\
    \ char cannot be converted to String)\n/tmp/tmp1d7wk0k4.java:39: error: cannot\
    \ find symbol\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n                                                     \
    \                    ^\n  symbol:   method of(String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmp1d7wk0k4.java:40: error: cannot find symbol\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                           ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmp1d7wk0k4.java:41:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmp1d7wk0k4.java:42: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmp1d7wk0k4.java:43: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                  "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> map = new HashMap<>();\n\
    \        String[] words = test.split(\" \");\n        for(String word: words)\
    \ {\n            int count = map.get(word);\n            map.put(word, count+1);\n\
    \        }\n        return map;\nreturn new HashMap<String,Integer>();\n    }\n\
    \    public static void main(String[] args) {\n    assert(histogram((\"a b b a\"\
    )).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7q8zy8rj.java:29: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                         ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmp7q8zy8rj.java:30:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n                  \
    \                                                         ^\n  symbol:   method\
    \ of(String,int,String,int)\n  location: interface Map\n/tmp/tmp7q8zy8rj.java:31:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmp7q8zy8rj.java:32: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmp7q8zy8rj.java:33: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmp7q8zy8rj.java:34: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \     ^\n  symbol:   method of(String,int,String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmp7q8zy8rj.java:36: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 1)))));\n            \
    \                                            "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        // write your code here\n        HashMap<String,Integer>\
    \ result = new HashMap<>();\n        String[] arr=test.split(\" \");\n       \
    \ Arrays.sort(arr);\n        for(String s:arr){\n            result.put(s,result.containsKey(s)?result.get(s)+1:1);\n\
    \        }\n        return result;\nreturn new HashMap<String,Integer>();\n  \
    \  }\n    public static void main(String[] args) {\n    assert(histogram((\"a\
    \ b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2ci7q1qn.java:30: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                         ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmp2ci7q1qn.java:31:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n                  \
    \                                                         ^\n  symbol:   method\
    \ of(String,int,String,int)\n  location: interface Map\n/tmp/tmp2ci7q1qn.java:32:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmp2ci7q1qn.java:33: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmp2ci7q1qn.java:34: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmp2ci7q1qn.java:35: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \     ^\n  symbol:   method of(String,int,String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmp2ci7q1qn.java:37: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 1)))));\n            \
    \                                            "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        // Create empty hashmap\n        HashMap<String,\
    \ Integer> map = new HashMap<>();\n        // Add every character in the string\
    \ to the hashmap\n        for(String s: test.split(\" \")){\n            if(map.containsKey(s)){\n\
    \                int counter = map.get(s);\n                counter++;\n     \
    \           map.put(s, counter);\n            }\n            else {\n        \
    \        map.put(s, 1);\n            }\n        }\n        // Return the hashmap\n\
    \        return map;\nreturn new HashMap<String,Integer>();\n    }\n    public\
    \ static void main(String[] args) {\n    assert(histogram((\"a b b a\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpd03wxwse.java:37: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                         ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmpd03wxwse.java:38:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n                  \
    \                                                         ^\n  symbol:   method\
    \ of(String,int,String,int)\n  location: interface Map\n/tmp/tmpd03wxwse.java:39:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpd03wxwse.java:40: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpd03wxwse.java:41: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmpd03wxwse.java:42: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \     ^\n  symbol:   method of(String,int,String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmpd03wxwse.java:44: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 1)))));\n            \
    \                                            "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        // split test string into a list\n       \
    \ String[] split = test.split(\" \");\n\n        // create hash map\n        HashMap<String,Integer>\
    \ map = new HashMap<String,Integer>();\n\n        // iterate through the list\
    \ and add each entry to the hash map with the count\n        for(String s: split)\
    \ {\n            if(!map.containsKey(s)) {\n                map.put(s, 1);\n \
    \           } else {\n                map.put(s, map.get(s)+1);\n            }\n\
    \        }\n\n        // sort the hash map by values (descending) and return first\
    \ entry\n        TreeMap<Integer,String> sortedMap = new TreeMap<Integer,String>(map);\n\
    \        sortedMap.lastEntry().getValue();\n        return sortedMap;\nreturn\
    \ new HashMap<String,Integer>();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpblcasi3s.java:35: error: no suitable constructor found for TreeMap(HashMap<String,Integer>)\n\
    \        TreeMap<Integer,String> sortedMap = new TreeMap<Integer,String>(map);\n\
    \                                            ^\n    constructor TreeMap.TreeMap(Comparator<?\
    \ super Integer>) is not applicable\n      (argument mismatch; HashMap<String,Integer>\
    \ cannot be converted to Comparator<? super Integer>)\n    constructor TreeMap.TreeMap(Map<?\
    \ extends Integer,? extends String>) is not applicable\n      (argument mismatch;\
    \ HashMap<String,Integer> cannot be converted to Map<? extends Integer,? extends\
    \ String>)\n    constructor TreeMap.TreeMap(SortedMap<Integer,? extends String>)\
    \ is not applicable\n      (argument mismatch; HashMap<String,Integer> cannot\
    \ be converted to SortedMap<Integer,? extends String>)\n/tmp/tmpblcasi3s.java:37:\
    \ error: incompatible types: TreeMap<Integer,String> cannot be converted to HashMap<String,Integer>\n\
    \        return sortedMap;\n               ^\n/tmp/tmpblcasi3s.java:41: error:\
    \ cannot find symbol\n    assert(histogram((\"a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n                                                     \
    \                    ^\n  symbol:   method of(String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmpblcasi3s.java:42: error: cannot find symbol\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                           ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmpblcasi3s.java:43:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpblcasi3s.java:44: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(M"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        // Your code here\n        HashMap<String,Integer>\
    \ map = new HashMap<String,Integer>();\n        String[] split = test.split(\"\
    \ \");\n        for (String word : split)\n        {\n            int count =\
    \ 1;\n            if (map.containsKey(word))\n            {\n                count\
    \ = map.get(word);\n            }\n            map.put(word, count + 1);\n   \
    \     }\n        return map;\nreturn new HashMap<String,Integer>();\n    }\n \
    \   public static void main(String[] args) {\n    assert(histogram((\"a b b a\"\
    )).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n    assert(histogram((\"\
    a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmps3681i4w.java:35: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                         ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmps3681i4w.java:36:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n                  \
    \                                                         ^\n  symbol:   method\
    \ of(String,int,String,int)\n  location: interface Map\n/tmp/tmps3681i4w.java:37:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmps3681i4w.java:38: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmps3681i4w.java:39: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmps3681i4w.java:40: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \     ^\n  symbol:   method of(String,int,String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmps3681i4w.java:42: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 1)))));\n            \
    \                                            "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        // Split on space\n        String[] splitString\
    \ = test.split(\" \");\n        HashMap<String,Integer> map = new HashMap<>();\n\
    \n        // Count each character and place it in hashmap\n        for (String\
    \ s : splitString) {\n            Integer currentValue = map.get(s);\n       \
    \     if (currentValue == null) {\n                map.put(s, 1);\n          \
    \  } else {\n                map.put(s, currentValue + 1);\n            }\n  \
    \      }\n\n        // Take the hash map and get the keys with the highest values\n\
    \        List<Map.Entry<String,Integer>> list = new ArrayList<>(map.entrySet());\n\
    \        Collections.sort(list, Map.Entry.comparingByValue());\n\n        // Return\
    \ the hash map with keys with the highest values\n        HashMap<String,Integer>\
    \ highestMap = new HashMap<>();\n        for (Map.Entry<String,Integer> entry\
    \ : list) {\n            highestMap.put(entry.getKey(), entry.getValue());\n \
    \       }\n        return highestMap;\nreturn new HashMap<String,Integer>();\n\
    \    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpx7d9vyn_.java:46: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                         ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmpx7d9vyn_.java:47:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n                  \
    \                                                         ^\n  symbol:   method\
    \ of(String,int,String,int)\n  location: interface Map\n/tmp/tmpx7d9vyn_.java:48:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpx7d9vyn_.java:49: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpx7d9vyn_.java:50: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmpx7d9vyn_.java:51: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \     ^\n  symbol:   method of(String,int,String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmpx7d9vyn_.java:53: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 1)))));\n            \
    \                                            "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> map = new HashMap<String,Integer>();\n\
    \n        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            Integer val = map.get(word);\n            if (val == null) {\n\
    \                val = 1;\n            }\n            map.put(word, val+1);\n\
    \        }\n\n        return map;\nreturn new HashMap<String,Integer>();\n   \
    \ }\n    public static void main(String[] args) {\n    assert(histogram((\"a b\
    \ b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpiiztzgg2.java:34: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                         ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmpiiztzgg2.java:35:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n                  \
    \                                                         ^\n  symbol:   method\
    \ of(String,int,String,int)\n  location: interface Map\n/tmp/tmpiiztzgg2.java:36:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpiiztzgg2.java:37: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmpiiztzgg2.java:38: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmpiiztzgg2.java:39: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \     ^\n  symbol:   method of(String,int,String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmpiiztzgg2.java:41: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 1)))));\n            \
    \                                            "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a string representing a space separated lowercase\
    \ letters, return a dictionary\n    // of the letter with the most repetition\
    \ and containing the corresponding count.\n    // If several letters have the\
    \ same occurrence, return all of them.\n    // Example:\n    // histogram('a b\
    \ c') == {'a': 1, 'b': 1, 'c': 1}\n    // histogram('a b b a') == {'a': 2, 'b':\
    \ 2}\n    // histogram('a b c a b') == {'a': 2, 'b': 2}\n    // histogram('b b\
    \ b b a') == {'b': 4}\n    // histogram('') == {}\n    public static HashMap<String,Integer>\
    \ histogram(String test) {\n        HashMap<String,Integer> map = new HashMap<>();\n\
    \n        String[] parts = test.split(\" \");\n\n        for (int i = 0; i < parts.length;\
    \ ++i) {\n            String letter = parts[i];\n\n            if (!map.containsKey(letter))\
    \ {\n                map.put(letter, 1);\n            } else {\n             \
    \   int count = map.get(letter);\n                map.put(letter, count + 1);\n\
    \            }\n        }\n\n        return map;\nreturn new HashMap<String,Integer>();\n\
    \    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 2, \"b\", 2)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\", 1)))));\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Integer>())));\n\
    \    assert(histogram((\"a\")).equals((new HashMap<String,Integer>(Map.of(\"a\"\
    , 1)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmprbgvyoz4.java:38: error: cannot find symbol\n    assert(histogram((\"\
    a b b a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n\
    \                                                                         ^\n\
    \  symbol:   method of(String,int,String,int)\n  location: interface Map\n/tmp/tmprbgvyoz4.java:39:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c a b\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 2, \"b\", 2)))));\n                  \
    \                                                         ^\n  symbol:   method\
    \ of(String,int,String,int)\n  location: interface Map\n/tmp/tmprbgvyoz4.java:40:\
    \ error: cannot find symbol\n    assert(histogram((\"a b c d g\")).equals((new\
    \ HashMap<String,Integer>(Map.of(\"a\", 1, \"b\", 1, \"c\", 1, \"d\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \         ^\n  symbol:   method of(String,int,String,int,String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmprbgvyoz4.java:41: error: cannot find symbol\n\
    \    assert(histogram((\"r t g\")).equals((new HashMap<String,Integer>(Map.of(\"\
    r\", 1, \"t\", 1, \"g\", 1)))));\n                                           \
    \                            ^\n  symbol:   method of(String,int,String,int,String,int)\n\
    \  location: interface Map\n/tmp/tmprbgvyoz4.java:42: error: cannot find symbol\n\
    \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Integer>(Map.of(\"\
    b\", 4)))));\n                                                               \
    \            ^\n  symbol:   method of(String,int)\n  location: interface Map\n\
    /tmp/tmprbgvyoz4.java:43: error: cannot find symbol\n    assert(histogram((\"\
    r t g\")).equals((new HashMap<String,Integer>(Map.of(\"r\", 1, \"t\", 1, \"g\"\
    , 1)))));\n                                                                  \
    \     ^\n  symbol:   method of(String,int,String,int,String,int)\n  location:\
    \ interface Map\n/tmp/tmprbgvyoz4.java:45: error: cannot find symbol\n    assert(histogram((\"\
    a\")).equals((new HashMap<String,Integer>(Map.of(\"a\", 1)))));\n            \
    \                                            "
  exit_code: 1
  status: SyntaxError
