language: java
name: HumanEval_7_filter_by_substring
results:
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        ArrayList<String> filtered = new ArrayList<String>();\n\
    \        for (int i = 0; i < strings.size(); i++) {\n            if (strings.get(i).contains(substring))\n\
    \                filtered.add(strings.get(i));\n        }\n        return filtered;\n\
    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011487
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        // Return the filtered list if substring\n\
    \        ArrayList<String> filteredList = new ArrayList<>();\n        for (String\
    \ string : strings) {\n            if (string.contains(substring)) {\n       \
    \         filteredList.add(string);\n            }\n        }\n        return\
    \ filteredList;\n}\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011487
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        ArrayList<String> result = new ArrayList<>();\n\
    \        for (String str : strings) {\n            if (substring.indexOf(str)\
    \ != -1) {\n                result.add(str);\n            }\n        }\n     \
    \   return result;\n}\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo2569x_3.java:25)\n"
  stdout: ''
  timestamp: 1660011487
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        ArrayList<String> filteredList = new ArrayList<>();\n\
    \        for (String str : strings) {\n            if (str.contains(substring))\
    \ {\n                filteredList.add(str);\n            }\n        }\n      \
    \  return filteredList;\n}\n    public static void main(String[] args) {\n   \
    \ assert(filterBySubstring((new ArrayList<String>(Arrays.asList())), (\"john\"\
    )).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\"\
    , (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011487
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        return filters.stream()\n            .filter(s\
    \ -> s.contains(substring))\n            .collect(Collectors.toCollection(ArrayList::new));\n\
    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpi1o4n598.java:15: error: cannot find symbol\n        return filters.stream()\n\
    \               ^\n  symbol:   variable filters\n  location: class Problem\n1\
    \ error\n"
  stdout: ''
  timestamp: 1660011487
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        ArrayList<String> ret = new ArrayList<>();\n\
    \        for (String s : strings) {\n            if (s.contains(substring)) {\n\
    \                ret.add(s);\n            }\n        }\n        return ret;\n\
    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011487
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        // TODO: Implement your filtering logic\
    \ here\n        return strings;\n}\n    public static void main(String[] args)\
    \ {\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList())), (\"\
    john\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\"\
    , (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjyb4u65a.java:20)\n"
  stdout: ''
  timestamp: 1660011487
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        return strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toList());\n\
    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7cd3ufc9.java:15: error: incompatible types: inference variable\
    \ R has incompatible bounds\n        return strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toList());\n\
    \                                                                          ^\n\
    \    equality constraints: List<T#2>\n    lower bounds: ArrayList<String>,Object\n\
    \  where R,A,T#1,T#2 are type-variables:\n    R extends Object declared in method\
    \ <R,A>collect(Collector<? super T#1,A,R>)\n    A extends Object declared in method\
    \ <R,A>collect(Collector<? super T#1,A,R>)\n    T#1 extends Object declared in\
    \ interface Stream\n    T#2 extends Object declared in method <T#2>toList()\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011487
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        ArrayList<String> result = new ArrayList<>();\n\
    \        for(String s : strings) {\n            if(s.contains(substring)) {\n\
    \                result.add(s);\n            }\n        }\n        return result;\n\
    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011487
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        ArrayList<String> returnList = new ArrayList<String>();\n\
    \        List<String> filteredList = strings.stream()\n                .filter(s\
    \ -> s.contains(substring))\n                .collect(Collectors.toList());\n\
    \        returnList.addAll(filteredList);\n        return returnList;\n}\n   \
    \ public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011487
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        ArrayList<String> results = new ArrayList<>();\n\
    \        for (String string : strings) {\n            if (string.contains(substring))\
    \ {\n                results.add(string);\n            }\n        }\n        return\
    \ results;\n}\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011487
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        return strings.stream()\n            .filter(x\
    \ -> x.contains(substring))\n            .collect(Collectors.toList());\n}\n \
    \   public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp40xhryi8.java:17: error: incompatible types: inference variable\
    \ R has incompatible bounds\n            .collect(Collectors.toList());\n    \
    \                ^\n    equality constraints: List<T#2>\n    lower bounds: ArrayList<String>,Object\n\
    \  where R,A,T#1,T#2 are type-variables:\n    R extends Object declared in method\
    \ <R,A>collect(Collector<? super T#1,A,R>)\n    A extends Object declared in method\
    \ <R,A>collect(Collector<? super T#1,A,R>)\n    T#1 extends Object declared in\
    \ interface Stream\n    T#2 extends Object declared in method <T#2>toList()\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011487
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        return strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toCollection(ArrayList<String>));\n\
    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5fhcd4m5.java:15: error: illegal start of expression\n        return\
    \ strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toCollection(ArrayList<String>));\n\
    \                                                                            \
    \                                        ^\n1 error\n"
  stdout: ''
  timestamp: 1660011486
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        ArrayList<String> result = new ArrayList<>();\n\
    \        for (String s : strings) {\n            if (s.contains(substring))\n\
    \                result.add(s);\n        }\n        return result;\n}\n    public\
    \ static void main(String[] args) {\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\"\
    , (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011487
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        ArrayList<String> result = new ArrayList<>();\n\
    \        for (String string : strings) {\n            if (string.contains(substring))\
    \ {\n                result.add(string);\n            }\n        }\n        return\
    \ result;\n}\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011487
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        return strings.stream().filter((string)\
    \ -> string.contains(substring)).collect(Collectors.toList());\n}\n    public\
    \ static void main(String[] args) {\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\"\
    , (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpi27n588m.java:15: error: incompatible types: inference variable\
    \ R has incompatible bounds\n        return strings.stream().filter((string) ->\
    \ string.contains(substring)).collect(Collectors.toList());\n                \
    \                                                                      ^\n   \
    \ equality constraints: List<T#2>\n    lower bounds: ArrayList<String>,Object\n\
    \  where R,A,T#1,T#2 are type-variables:\n    R extends Object declared in method\
    \ <R,A>collect(Collector<? super T#1,A,R>)\n    A extends Object declared in method\
    \ <R,A>collect(Collector<? super T#1,A,R>)\n    T#1 extends Object declared in\
    \ interface Stream\n    T#2 extends Object declared in method <T#2>toList()\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011487
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        return filterBySubstring(strings, substring,\
    \ null);\n}\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpavwzc7ha.java:15: error: method filterBySubstring in class Problem\
    \ cannot be applied to given types;\n        return filterBySubstring(strings,\
    \ substring, null);\n               ^\n  required: ArrayList<String>,String\n\
    \  found:    ArrayList<String>,String,<null>\n  reason: actual and formal argument\
    \ lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011486
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        return strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toCollection(ArrayList::new));\n\
    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011357
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        ArrayList<String> result = new ArrayList<>();\n\
    \        for (String s : strings) {\n            if (s.contains(substring)) {\n\
    \                result.add(s);\n            }\n        }\n        return result;\n\
    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011487
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        ArrayList<String> filtered = new ArrayList<String>();\n\
    \        for (String s : strings) {\n            if (s.contains(substring)) {\n\
    \                filtered.add(s);\n            }\n        }\n        return filtered;\n\
    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011358
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        ArrayList<String> result = new ArrayList<String>();\n\
    \        for (String s : strings) {\n            if (s.contains(substring))\n\
    \                result.add(s);\n        }\n        return result;\n}\n    public\
    \ static void main(String[] args) {\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\"\
    , (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011357
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        ArrayList<String> filteredList = new ArrayList<String>();\n\
    \        for (String s : strings) {\n            if (s.contains(substring)) {\n\
    \                filteredList.add(s);\n            }\n        }\n        return\
    \ filteredList;\n}\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011487
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        // Return the list of strings that does\
    \ not contain the substring\n        ArrayList<String> filtered = new ArrayList<>();\n\
    \        if (strings != null && substring != null) {\n            for (String\
    \ s : strings) {\n                if (s.contains(substring) == false)\n      \
    \              filtered.add(s);\n            }\n        }\n        return filtered;\n\
    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqcpwrige.java:27)\n"
  stdout: ''
  timestamp: 1660011487
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        ArrayList<String> result = new ArrayList<String>();\n\
    \        for (String string : strings) {\n            if (string.contains(substring))\
    \ {\n                result.add(string);\n            }\n        }\n        return\
    \ result;\n}\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011357
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        return strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toCollection(ArrayList::new));\n\
    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011357
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        ArrayList<String> result = new ArrayList<>();\n\
    \        for (String s : strings)\n            if (s.contains(substring))\n  \
    \              result.add(s);\n        return result;\n}\n    public static void\
    \ main(String[] args) {\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\"\
    , (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011487
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        ArrayList<String> result = new ArrayList<>();\n\
    \        for(String s : strings) {\n            if(s.contains(substring)) {\n\
    \                result.add(s);\n            }\n        }\n        return result;\n\
    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011487
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        if (strings == null || substring.isEmpty())\
    \ {\n            return strings;\n        }\n        ArrayList<String> filtered\
    \ = new ArrayList<>(strings);\n        for(String s: strings) {\n            if(s.contains(substring))\
    \ {\n                filtered.add(s);\n            }\n        }\n        return\
    \ filtered;\n}\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpogmq9tel.java:28)\n"
  stdout: ''
  timestamp: 1660011487
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        return IntStream.range(0, strings.size())\n\
    \                .filter(i -> string.contains(substring))\n                .boxed()\n\
    \                .collect(Collectors.toCollection(ArrayList::new));\n}\n    public\
    \ static void main(String[] args) {\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\"\
    , (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqs6gvuoa.java:16: error: cannot find symbol\n                .filter(i\
    \ -> string.contains(substring))\n                             ^\n  symbol:  \
    \ variable string\n  location: class Problem\n/tmp/tmpqs6gvuoa.java:18: error:\
    \ incompatible types: inference variable E has incompatible bounds\n         \
    \       .collect(Collectors.toCollection(ArrayList::new));\n                 \
    \       ^\n    equality constraints: String,T\n    lower bounds: Integer\n  where\
    \ E,T,C are type-variables:\n    E extends Object declared in class ArrayList\n\
    \    T extends Object declared in method <T,C>toCollection(Supplier<C>)\n    C\
    \ extends Collection<T> declared in method <T,C>toCollection(Supplier<C>)\n2 errors\n"
  stdout: ''
  timestamp: 1660011487
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        return strings == null || strings.size()\
    \ == 0 ?\n                new ArrayList<String>() :\n                strings.stream().filter(s\
    \ -> s.contains(substring)).collect(Collectors.toCollection(ArrayList::new));\n\
    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011488
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        return strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toCollection(ArrayList::new));\n\
    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011357
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        ArrayList<String> result = new ArrayList<>();\n\
    \        if (strings == null || strings.length() == 0) {\n            return result;\n\
    \        }\n        for (int i = 0; i < strings.length; i++) {\n            if\
    \ (strings[i].contains(substring)) {\n                result.add(strings[i]);\n\
    \            }\n        }\n        return result;\n}\n    public static void main(String[]\
    \ args) {\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\"\
    , (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8anep91i.java:16: error: cannot find symbol\n        if (strings\
    \ == null || strings.length() == 0) {\n                                      ^\n\
    \  symbol:   method length()\n  location: variable strings of type ArrayList<String>\n\
    /tmp/tmp8anep91i.java:19: error: cannot find symbol\n        for (int i = 0; i\
    \ < strings.length; i++) {\n                                   ^\n  symbol:  \
    \ variable length\n  location: variable strings of type ArrayList<String>\n/tmp/tmp8anep91i.java:20:\
    \ error: array required, but ArrayList<String> found\n            if (strings[i].contains(substring))\
    \ {\n                       ^\n/tmp/tmp8anep91i.java:21: error: array required,\
    \ but ArrayList<String> found\n                result.add(strings[i]);\n     \
    \                             ^\n4 errors\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        ArrayList<String> filteredList = new ArrayList<String>();\n\
    \        for (String string : strings) {\n            if (string.contains(substring))\
    \ {\n                filteredList.add(string);\n            }\n        }\n   \
    \     return filteredList;\n}\n    public static void main(String[] args) {\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList())), (\"john\"\
    )).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\"\
    , (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011488
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        ArrayList<String> result = new ArrayList<String>();\n\
    \        for (int i = 0; i < strings.size(); i++) {\n            if (strings.get(i).contains(substring))\n\
    \                result.add(strings.get(i));\n        }\n        return result;\n\
    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011488
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        ArrayList<String> res = new ArrayList<String>();\n\
    \        for (String str : strings) {\n            if (str.contains(substring))\
    \ {\n                res.add(str);\n            }\n        }\n        return res;\n\
    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011358
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        return strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toCollection(ArrayList::new));\n\
    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011357
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        return strings.stream()\n            .filter(s\
    \ -> s.contains(substring))\n            .collect(Collectors.toCollection(ArrayList::new));\n\
    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011488
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        return strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toCollection(ArrayList::new));\n\
    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011357
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        ArrayList<String> filtered = new ArrayList<>();\n\
    \        for (String s : strings) {\n            if (s.contains(substring)) {\n\
    \                filtered.add(s);\n            }\n        }\n        return filtered;\n\
    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        String pattern = \".*\"+substring+\".*\"\
    ;\n        ArrayList<String> matches = new ArrayList<String>();\n\n        for(String\
    \ str : strings) {\n            Pattern p = Pattern.compile(pattern);\n      \
    \      Matcher m = p.matcher(str);\n            if (m.find())\n              \
    \  matches.add(str);\n        }\n\n        return matches;\n}\n    public static\
    \ void main(String[] args) {\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\"\
    , (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyj4qgsou.java:19: error: cannot find symbol\n            Pattern\
    \ p = Pattern.compile(pattern);\n            ^\n  symbol:   class Pattern\n  location:\
    \ class Problem\n/tmp/tmpyj4qgsou.java:19: error: cannot find symbol\n       \
    \     Pattern p = Pattern.compile(pattern);\n                        ^\n  symbol:\
    \   variable Pattern\n  location: class Problem\n/tmp/tmpyj4qgsou.java:20: error:\
    \ cannot find symbol\n            Matcher m = p.matcher(str);\n            ^\n\
    \  symbol:   class Matcher\n  location: class Problem\n3 errors\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        // Filter out all the strings that don't\
    \ have the substring in them\n        return strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toCollection(ArrayList::new));\n\
    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011488
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        ArrayList<String> filteredStrings = new\
    \ ArrayList<String>();\n        for (String string : strings) {\n            if(string.contains(substring))\
    \ {\n                filteredStrings.add(string);\n            }\n        }\n\
    \        return filteredStrings;\n}\n    public static void main(String[] args)\
    \ {\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList())), (\"\
    john\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\"\
    , (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011488
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        ArrayList<String> result = new ArrayList<String>();\n\
    \        for (String s : strings) {\n            if (s.contains(substring)) {\n\
    \                result.add(s);\n            }\n        }\n        return result;\n\
    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011357
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        ArrayList<String> result = new ArrayList<>();\n\
    \        if (strings != null && substring != null) {\n            strings.stream().filter(s\
    \ -> s.contains(substring)).forEach(result -> result.add(strings));\n        }\n\
    \        return result;\n}\n    public static void main(String[] args) {\n   \
    \ assert(filterBySubstring((new ArrayList<String>(Arrays.asList())), (\"john\"\
    )).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\"\
    , (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7u84y4wg.java:17: error: variable result is already defined in\
    \ method filterBySubstring(ArrayList<String>,String)\n            strings.stream().filter(s\
    \ -> s.contains(substring)).forEach(result -> result.add(strings));\n        \
    \                                                                ^\n/tmp/tmp7u84y4wg.java:17:\
    \ error: cannot find symbol\n            strings.stream().filter(s -> s.contains(substring)).forEach(result\
    \ -> result.add(strings));\n                                                 \
    \                                       ^\n  symbol:   method add(ArrayList<String>)\n\
    \  location: variable result of type String\n2 errors\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        ArrayList<String> result = new ArrayList<>();\n\
    \        // Filter using Java 8 Stream\n        strings.stream().filter(item ->\
    \ item.contains(substring)).forEach(item -> result.add(item));\n        return\
    \ result;\n}\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011488
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        ArrayList<String> result = new ArrayList<String>();\n\
    \        for (String s : strings) {\n            if (s.contains(substring)) {\n\
    \                result.add(s);\n            }\n        }\n        return result;\n\
    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011357
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        ArrayList<String> result = new ArrayList<>();\n\
    \        strings.stream().filter(s -> s.contains(substring)).forEach(result ::add);\n\
    \        return result;\n}\n    public static void main(String[] args) {\n   \
    \ assert(filterBySubstring((new ArrayList<String>(Arrays.asList())), (\"john\"\
    )).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\"\
    , (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011488
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        ArrayList<String> result = new ArrayList<String>();\n\
    \        for (String string : strings) {\n            if (string.contains(substring))\
    \ {\n                result.add(string);\n            }\n        }\n        return\
    \ result;\n}\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011357
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        ArrayList<String> result = new ArrayList<>();\n\
    \        for (String string : strings) {\n            if (string.contains(substring))\
    \ {\n                result.add(string);\n            }\n        }\n        return\
    \ result;\n}\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011487
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        ArrayList<String> newList = new ArrayList<String>();\n\
    \        for (String string : strings) {\n            if (string.contains(substring))\
    \ {\n                newList.add(string);\n            }\n        }\n        return\
    \ newList;\n}\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011488
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        ArrayList<String> result = new ArrayList<String>();\n\
    \        for(String s : strings) {\n            if (s.contains(substring)) {\n\
    \                result.add(s);\n            }\n        }\n        return result;\n\
    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011488
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        ArrayList<String> filtered = new ArrayList<>();\n\
    \        for (String s : strings) {\n            if (s.contains(substring))\n\
    \                filtered.add(s);\n        }\n        return filtered;\n}\n  \
    \  public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011488
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        ArrayList<String> result = new ArrayList<>();\n\
    \        for(int i = 0; i < strings.size(); i++) {\n            if(strings.get(i).contains(substring))\
    \ {\n                result.add(strings.get(i));\n            }\n        }\n \
    \       return result;\n}\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011488
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        ArrayList<String> filtered = new ArrayList<>();\n\
    \        for (String s : strings) {\n            if (s.contains(substring)) {\n\
    \                filtered.add(s);\n            }\n        }\n        return filtered;\n\
    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011488
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        ArrayList<String> filteredList = new ArrayList<>();\n\
    \        for (String s: strings) {\n            if (s.contains(substring)) {\n\
    \                filteredList.add(s);\n            }\n        }\n        return\
    \ filteredList;\n}\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011488
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        // Add more filtering here\n        ArrayList<String>\
    \ result = new ArrayList<>();\n        for (String s : strings) {\n          \
    \  if (s.contains(substring)) {\n                result.add(s);\n            }\n\
    \        }\n        return result;\n}\n    public static void main(String[] args)\
    \ {\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList())), (\"\
    john\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\"\
    , (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011488
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        ArrayList<String> result = new ArrayList<>();\n\
    \        for (String s : strings) {\n            if (s.contains(substring)) {\n\
    \                result.add(s);\n            }\n        }\n        return result;\n\
    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011487
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        return strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toCollection(ArrayList::new));\n\
    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011357
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        ArrayList<String> result = new ArrayList<>();\n\
    \n        // O(n) where n is the number of strings\n        for (String s : strings)\
    \ {\n            if (s.contains(substring)) {\n                result.add(s);\n\
    \            }\n        }\n        return result;\n}\n    public static void main(String[]\
    \ args) {\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\"\
    , (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011488
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        ArrayList<String> filtered = new ArrayList<String>();\n\
    \        for (String str : strings) {\n            if (str.contains(substring))\
    \ {\n                filtered.add(str);\n            }\n        }\n        return\
    \ filtered;\n}\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011360
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        ArrayList<String> filtered = new ArrayList<>();\n\
    \        for (int i = 0; i < strings.size(); i++) {\n            if (strings.get(i).contains(substring))\
    \ {\n                filtered.add(strings.get(i));\n            }\n        }\n\
    \        return filtered;\n}\n    public static void main(String[] args) {\n \
    \   assert(filterBySubstring((new ArrayList<String>(Arrays.asList())), (\"john\"\
    )).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\"\
    , (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011488
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        // 1. Initialize result set with original\
    \ list\n        ArrayList<String> result = new ArrayList<>();\n        // 2. Loop\
    \ over original list items\n        for (String string : strings) {\n        \
    \    // 2a. If substring is in string, add to result set\n            if (string.contains(substring))\
    \ {\n                result.add(string);\n            }\n        }\n        return\
    \ result;\n}\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011488
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        return strings.stream().filter(e -> e.contains(substring)).collect(toList());\n\
    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3b4ctbbl.java:15: error: cannot find symbol\n        return strings.stream().filter(e\
    \ -> e.contains(substring)).collect(toList());\n                             \
    \                                              ^\n  symbol:   method toList()\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011488
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        return strings.stream()\n            \
    \    .filter(s -> s.contains(substring))\n                .collect(Collectors.toCollection(ArrayList::new));\n\
    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011489
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        // Write your code here\n\n        return\
    \ strings;\n}\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqqzpnwkx.java:21)\n"
  stdout: ''
  timestamp: 1660011489
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        ArrayList<String> filtered = new ArrayList<String>();\n\
    \        for (String string : strings) {\n            if (string.contains(substring))\
    \ {\n                filtered.add(string);\n            }\n        }\n       \
    \ return filtered;\n}\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011358
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        ArrayList<String> result = new ArrayList<>();\n\
    \        for (String string : strings) {\n            if (string.contains(substring))\
    \ {\n                result.add(string);\n            }\n        }\n        return\
    \ result;\n}\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011487
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        ArrayList<String> result = new ArrayList<>();\n\
    \        for (String string : strings) {\n            if (string.contains(substring))\
    \ {\n                result.add(string);\n            }\n        }\n        return\
    \ result;\n}\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011487
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        ArrayList<String> filtered = new ArrayList<String>();\n\
    \        for (String string : strings) {\n            if (string.contains(substring))\
    \ {\n                filtered.add(string);\n            }\n        }\n       \
    \ return filtered;\n}\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011358
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        ArrayList<String> filtered = new ArrayList<>();\n\
    \        for (String s: strings) {\n            if (s.contains(substring)) {\n\
    \                filtered.add(s);\n            }\n        }\n        return filtered;\n\
    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011489
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        String lowerStr = substring.toLowerCase();\n\
    \        return strings.stream().filter(s -> s.toLowerCase().contains(lowerStr)).collect(Collectors.toCollection(ArrayList::new));\n\
    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011490
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        return strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toCollection(ArrayList::new));\n\
    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011357
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        ArrayList<String> result = new ArrayList<String>();\n\
    \        for (String string : strings) {\n            if (string.contains(substring))\
    \ {\n                result.add(string);\n            }\n        }\n        return\
    \ result;\n}\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011357
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        ArrayList<String> result = new ArrayList<String>();\n\
    \        for(String string : strings) {\n            if(string.contains(substring))\
    \ {\n                result.add(string);\n            }\n        }\n        return\
    \ result;\n}\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011489
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        ArrayList<String> result = new ArrayList<String>();\n\
    \        for (String s : strings) {\n            if (s.contains(substring))\n\
    \                result.add(s);\n        }\n        return result;\n}\n    public\
    \ static void main(String[] args) {\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\"\
    , (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011357
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        return strings.stream()\n            .filter(s\
    \ -> s.contains(substring))\n            .collect(Collectors.toList());\n}\n \
    \   public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvkxt3m6z.java:17: error: incompatible types: inference variable\
    \ R has incompatible bounds\n            .collect(Collectors.toList());\n    \
    \                ^\n    equality constraints: List<T#2>\n    lower bounds: ArrayList<String>,Object\n\
    \  where R,A,T#1,T#2 are type-variables:\n    R extends Object declared in method\
    \ <R,A>collect(Collector<? super T#1,A,R>)\n    A extends Object declared in method\
    \ <R,A>collect(Collector<? super T#1,A,R>)\n    T#1 extends Object declared in\
    \ interface Stream\n    T#2 extends Object declared in method <T#2>toList()\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011490
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        ArrayList<String> result = new ArrayList<>();\n\
    \        // String is immutable, so we could just use a list to store our strings\
    \ and\n        // then return a new list with the filtered substring removed.\n\
    \        for (String s : strings) {\n            if (s.contains(substring)) {\n\
    \                result.add(s);\n            }\n        }\n        return result;\n\
    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011489
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        ArrayList<String> answer = new ArrayList<>();\n\
    \        for (String str : strings) {\n            if (str.contains(substring))\
    \ {\n                answer.add(str);\n            }\n        }\n        return\
    \ answer;\n}\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011490
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        ArrayList<String> filtered = new ArrayList<>();\n\
    \        for (String s : strings) {\n            if (s.contains(substring)) {\n\
    \                filtered.add(s);\n            }\n        }\n        return filtered;\n\
    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011488
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        ArrayList<String> result = new ArrayList<>();\n\
    \        for (String string : strings) {\n            if (string.contains(substring))\
    \ {\n                result.add(string);\n            }\n        }\n        return\
    \ result;\n}\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011487
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        ArrayList<String> filtered = new ArrayList<String>();\n\
    \        for (String s : strings) {\n            if (s.contains(substring)) {\n\
    \                filtered.add(s);\n            }\n        }\n        return filtered;\n\
    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011358
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        ArrayList<String> filtered = new ArrayList<>();\n\
    \        for (String s : strings) {\n            if (substring.contains(s)) {\n\
    \                filtered.add(s);\n            }\n        }\n        return filtered;\n\
    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp060jgsif.java:25)\n"
  stdout: ''
  timestamp: 1660011490
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        ArrayList<String> result = new ArrayList<>();\n\
    \        for (String string : strings) {\n            if (string.contains(substring))\
    \ {\n                result.add(string);\n            }\n        }\n        return\
    \ result;\n}\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011487
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        return filterBySubstring2(strings, substring,\
    \ new HashSet<String>());\n}\n    public static void main(String[] args) {\n \
    \   assert(filterBySubstring((new ArrayList<String>(Arrays.asList())), (\"john\"\
    )).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\"\
    , (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzp0eoo3i.java:15: error: cannot find symbol\n        return filterBySubstring2(strings,\
    \ substring, new HashSet<String>());\n               ^\n  symbol:   method filterBySubstring2(ArrayList<String>,String,HashSet<String>)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011489
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        ArrayList<String> filtered = new ArrayList<String>();\n\
    \        for (String string : strings) {\n            if (string.contains(substring))\n\
    \                filtered.add(string);\n        }\n        return filtered;\n\
    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011358
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        if (strings == null) {\n            return\
    \ null;\n        }\n        ArrayList<String> result = new ArrayList<>();\n  \
    \      for (String s : strings) {\n            if (s.contains(substring)) {\n\
    \                result.add(s);\n            }\n        }\n        return result;\n\
    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011490
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        ArrayList<String> result = new ArrayList<String>();\n\
    \        for (String s : strings) {\n            if (s.toLowerCase().contains(substring.toLowerCase()))\
    \ {\n                result.add(s);\n            }\n        }\n        return\
    \ result;\n}\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011490
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        ArrayList<String> filtered = new ArrayList<>();\n\
    \        for (String s : strings) {\n            if (s.contains(substring))\n\
    \                filtered.add(s);\n        }\n        return filtered;\n}\n  \
    \  public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011488
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        ArrayList<String> ret = new ArrayList<>();\n\
    \        for (String s : strings) {\n            if (s.contains(substring)) {\n\
    \                ret.add(s);\n            }\n        }\n        return ret;\n\
    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011487
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        ArrayList<String> filteredStrings = new\
    \ ArrayList<>();\n        for (String string : strings) {\n            if (string.contains(substring))\n\
    \                filteredStrings.add(string);\n        }\n        return filteredStrings;\n\
    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011490
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        ArrayList<String> filtered = new ArrayList<>();\n\
    \        ArrayList<String> substrings = new ArrayList<>();\n        ArrayList<String>\
    \ filters = new ArrayList<>();\n\n        for(String string : strings) {\n   \
    \         String[] splitArray = string.split(substring);\n            if(splitArray.length\
    \ > 1) {\n                substrings.add(splitArray[0]);\n                filters.add(splitArray[1]);\n\
    \                filtered.add(string);\n            }\n        }\n\n        filtered.addAll(substrings);\n\
    \        filtered.addAll(filters);\n\n        return filtered;\n}\n    public\
    \ static void main(String[] args) {\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\"\
    , (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1clm0yvb.java:35)\n"
  stdout: ''
  timestamp: 1660011490
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        ArrayList<String> result = new ArrayList<>();\n\
    \        ArrayList<String> filtered = new ArrayList<>();\n        for (String\
    \ s : strings) {\n            if (s.contains(substring)) {\n                filtered.add(s);\n\
    \            }\n        }\n        result.addAll(filtered);\n        return result;\n\
    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011490
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        ArrayList<String> filteredList = new ArrayList<>();\n\
    \        for (String string : strings) {\n            if (string.contains(substring))\
    \ {\n                filteredList.add(string);\n            }\n        }\n   \
    \     return filteredList;\n}\n    public static void main(String[] args) {\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList())), (\"john\"\
    )).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\"\
    , (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011490
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        return strings.stream()\n            \
    \    .filter(s -> s.contains(substring))\n                .collect(Collectors.toCollection(ArrayList::new));\n\
    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011489
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        ArrayList<String> filtered = new ArrayList<>();\n\
    \        for (String string : strings) {\n            if (string.contains(substring))\
    \ {\n                filtered.add(string);\n            }\n        }\n       \
    \ return filtered;\n}\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011490
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        ArrayList<String> result = new ArrayList<>();\n\
    \        for (int i = 0; i < strings.size(); i++) {\n            if (strings.get(i).contains(substring))\
    \ {\n                result.add(strings.get(i));\n            }\n        }\n \
    \       return result;\n}\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011490
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        ArrayList<String> filtered = new ArrayList<String>();\n\
    \        for (String string : strings) {\n            if (string.contains(substring))\
    \ {\n                filtered.add(string);\n            }\n        }\n       \
    \ return filtered;\n}\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011358
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        if (strings == null || substring == null)\
    \ return null;\n        ArrayList<String> filtered = new ArrayList<>();\n    \
    \    for (String string : strings) {\n            if (string.contains(substring))\
    \ filtered.add(string);\n        }\n        return filtered;\n}\n    public static\
    \ void main(String[] args) {\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\"\
    , (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011490
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        ArrayList<String> filtered = new ArrayList<>();\n\
    \        for(String s : strings) {\n            if(s.contains(substring)) {\n\
    \                filtered.add(s);\n            }\n        }\n        return filtered;\n\
    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011490
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        ArrayList<String> filtered = new ArrayList<String>();\n\
    \        for (String string : strings) {\n            if (string.contains(substring))\
    \ {\n                filtered.add(string);\n            }\n        }\n       \
    \ return filtered;\n}\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011358
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        ArrayList<String> filteredStrings = new\
    \ ArrayList<>();\n        for (String string : strings) {\n            if (string.contains(substring))\
    \ {\n                filteredStrings.add(string);\n            }\n        }\n\
    \        return filteredStrings;\n}\n    public static void main(String[] args)\
    \ {\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList())), (\"\
    john\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\"\
    , (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011490
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        return strings;\n}\n    public static\
    \ void main(String[] args) {\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\"\
    , (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplzf2qzom.java:19)\n"
  stdout: ''
  timestamp: 1660011361
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        return Collections.unmodifiableList(\n\
    \                strings\n                        .stream()\n                \
    \        .filter(s -> s.contains(substring))\n                        .collect(Collectors.toList()));\n\
    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbdxf4i68.java:15: error: incompatible types: no instance(s) of\
    \ type variable(s) T#1,R,T#3 exist so that List<T#1> conforms to ArrayList<String>\n\
    \        return Collections.unmodifiableList(\n                              \
    \             ^\n  where T#1,R,A,T#2,T#3 are type-variables:\n    T#1 extends\
    \ Object declared in method <T#1>unmodifiableList(List<? extends T#1>)\n    R\
    \ extends Object declared in method <R,A>collect(Collector<? super T#2,A,R>)\n\
    \    A extends Object declared in method <R,A>collect(Collector<? super T#2,A,R>)\n\
    \    T#2 extends Object declared in interface Stream\n    T#3 extends Object declared\
    \ in method <T#3>toList()\n1 error\n"
  stdout: ''
  timestamp: 1660011490
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        ArrayList<String> result = new ArrayList<String>();\n\
    \        for (String s : strings) {\n            if (s.contains(substring)) {\n\
    \                result.add(s);\n            }\n        }\n        return result;\n\
    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011357
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        ArrayList<String> filtered = new ArrayList<String>();\n\
    \        for (String s : strings) {\n            if (s.contains(substring))\n\
    \                filtered.add(s);\n        }\n        return filtered;\n}\n  \
    \  public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011490
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        ArrayList<String> filteredStrings = new\
    \ ArrayList<>();\n        for(String string : strings) {\n            if(string.contains(substring))\n\
    \                filteredStrings.add(string);\n        }\n        return filteredStrings;\n\
    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011490
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        ArrayList<String> filtered = new ArrayList<>();\n\
    \        if (strings == null || strings.size() == 0)\n            return filtered;\n\
    \        for(String string : strings) {\n            if (string.contains(substring))\n\
    \                filtered.add(string);\n        }\n        return filtered;\n\
    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011491
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        ArrayList<String> filtered = new ArrayList<>();\n\
    \        for (String string : strings) {\n            if(string.contains(substring))\
    \ {\n                filtered.add(string);\n            }\n        }\n       \
    \ return filtered;\n}\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011491
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        ArrayList<String> result = new ArrayList<String>();\n\
    \        // Using Java 8+ streams\n        strings.stream().filter(s -> s.contains(substring)).forEach(s\
    \ -> result.add(s));\n        // Using traditional loops\n        // for (int\
    \ i = 0; i < strings.length; ++i) {\n        // for (int i = 0; i < strings.size();\
    \ ++i) {\n        // for (int i = 0; i < strings.size(); ++i)\n        // if (strings[i].contains(substring))\
    \ {\n        // result.add(strings[i]);\n        // }\n        // }\n        return\
    \ result;\n}\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011491
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        ArrayList<String> filtered = new ArrayList<>();\n\
    \        for (String string : strings) {\n            if (string.contains(substring))\
    \ {\n                filtered.add(string);\n            }\n        }\n       \
    \ return filtered;\n}\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011490
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        return strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toList());\n\
    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7cd3ufc9.java:15: error: incompatible types: inference variable\
    \ R has incompatible bounds\n        return strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toList());\n\
    \                                                                          ^\n\
    \    equality constraints: List<T#2>\n    lower bounds: ArrayList<String>,Object\n\
    \  where R,A,T#1,T#2 are type-variables:\n    R extends Object declared in method\
    \ <R,A>collect(Collector<? super T#1,A,R>)\n    A extends Object declared in method\
    \ <R,A>collect(Collector<? super T#1,A,R>)\n    T#1 extends Object declared in\
    \ interface Stream\n    T#2 extends Object declared in method <T#2>toList()\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011487
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        ArrayList<String> result = new ArrayList<>();\n\
    \        // Filter all strings that contain the substring and add them to the\
    \ result list\n        strings.stream()\n               .filter(s -> s.contains(substring))\n\
    \               .forEach(s -> result.add(s));\n        return result;\n}\n   \
    \ public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011491
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        return Collections.singletonList(strings).stream()\n\
    \                .filter(s -> s.contains(substring))\n                .collect(toCollection(()\
    \ -> new ArrayList<String>()));\n}\n    public static void main(String[] args)\
    \ {\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList())), (\"\
    john\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\"\
    , (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpha0es6ab.java:17: error: cannot find symbol\n                .collect(toCollection(()\
    \ -> new ArrayList<String>()));\n                         ^\n  symbol:   method\
    \ toCollection(()->new Ar[...]ng>())\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011491
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        String pattern = String.format(\"\\\\\
    b%s\\\\b\", substring);\n        return strings.stream()\n                .filter(s\
    \ -> s.contains(pattern))\n                .collect(Collectors.toCollection(ArrayList::new));\n\
    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpoz8tnxme.java:22)\n"
  stdout: ''
  timestamp: 1660011491
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        return strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toList());\n\
    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7cd3ufc9.java:15: error: incompatible types: inference variable\
    \ R has incompatible bounds\n        return strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toList());\n\
    \                                                                          ^\n\
    \    equality constraints: List<T#2>\n    lower bounds: ArrayList<String>,Object\n\
    \  where R,A,T#1,T#2 are type-variables:\n    R extends Object declared in method\
    \ <R,A>collect(Collector<? super T#1,A,R>)\n    A extends Object declared in method\
    \ <R,A>collect(Collector<? super T#1,A,R>)\n    T#1 extends Object declared in\
    \ interface Stream\n    T#2 extends Object declared in method <T#2>toList()\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011487
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        ArrayList<String> result = new ArrayList<>();\n\
    \        for(int i = 0; i < strings.size(); i++) {\n            if (strings.get(i).contains(substring))\n\
    \                result.add(strings.get(i));\n        }\n        return result;\n\
    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011491
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        ArrayList<String> result = new ArrayList<>();\n\
    \        for (String value : strings) {\n            if (substring.equals(value))\
    \ {\n                result.add(value);\n            }\n        }\n        return\
    \ result;\n}\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphong5zq4.java:25)\n"
  stdout: ''
  timestamp: 1660011491
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        return strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toList());\n\
    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7cd3ufc9.java:15: error: incompatible types: inference variable\
    \ R has incompatible bounds\n        return strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toList());\n\
    \                                                                          ^\n\
    \    equality constraints: List<T#2>\n    lower bounds: ArrayList<String>,Object\n\
    \  where R,A,T#1,T#2 are type-variables:\n    R extends Object declared in method\
    \ <R,A>collect(Collector<? super T#1,A,R>)\n    A extends Object declared in method\
    \ <R,A>collect(Collector<? super T#1,A,R>)\n    T#1 extends Object declared in\
    \ interface Stream\n    T#2 extends Object declared in method <T#2>toList()\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011487
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        // Return the original list if substring\
    \ is not in the string\n        if (strings == null || strings.size() == 0)\n\
    \            return strings;\n        ArrayList<String> result = new ArrayList<>();\n\
    \        for(String s: strings) {\n            if(s.contains(substring))\n   \
    \             result.add(s);\n        }\n        return result;\n}\n    public\
    \ static void main(String[] args) {\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\"\
    , (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011491
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        return Collections.singletonList(strings);\n\
    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbkmgwwyj.java:15: error: incompatible types: no instance(s) of\
    \ type variable(s) T exist so that List<T> conforms to ArrayList<String>\n   \
    \     return Collections.singletonList(strings);\n                           \
    \             ^\n  where T is a type-variable:\n    T extends Object declared\
    \ in method <T>singletonList(T)\n1 error\n"
  stdout: ''
  timestamp: 1660011491
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        return strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toList());\n\
    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7cd3ufc9.java:15: error: incompatible types: inference variable\
    \ R has incompatible bounds\n        return strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toList());\n\
    \                                                                          ^\n\
    \    equality constraints: List<T#2>\n    lower bounds: ArrayList<String>,Object\n\
    \  where R,A,T#1,T#2 are type-variables:\n    R extends Object declared in method\
    \ <R,A>collect(Collector<? super T#1,A,R>)\n    A extends Object declared in method\
    \ <R,A>collect(Collector<? super T#1,A,R>)\n    T#1 extends Object declared in\
    \ interface Stream\n    T#2 extends Object declared in method <T#2>toList()\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011487
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        return strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toCollection(ArrayList::new));\n\
    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011357
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        ArrayList<String> filtered = new ArrayList<String>();\n\
    \        for(String s : strings){\n            if(s.contains(substring)){\n  \
    \              filtered.add(s);\n            }\n        }\n        return filtered;\n\
    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011491
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        ArrayList<String> result = new ArrayList<String>();\n\
    \        if (strings == null) return result;\n        for(int i = 0; i < strings.size();\
    \ i++) {\n            if (strings.get(i).contains(substring)) result.add(strings.get(i));\n\
    \        }\n        return result;\n}\n    public static void main(String[] args)\
    \ {\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList())), (\"\
    john\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\"\
    , (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011491
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        ArrayList<String> result = new ArrayList<>();\n\
    \        for (String string : strings) {\n            if (string.contains(substring))\
    \ {\n                result.add(string);\n            }\n        }\n        return\
    \ result;\n}\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011487
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        ArrayList<String> result = new ArrayList<String>();\n\
    \        for(String s : strings) {\n            if(s.contains(substring)) {\n\
    \                result.add(s);\n            }\n        }\n        return result;\n\
    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011491
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        ArrayList<String> filtered = new ArrayList<>();\n\
    \        if (strings == null || strings.size() == 0) {\n            return filtered;\n\
    \        }\n        for (String s : strings) {\n            if (s.toLowerCase().contains(substring.toLowerCase()))\
    \ {\n                filtered.add(s);\n            }\n        }\n        return\
    \ filtered;\n}\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011491
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        ArrayList<String> filtered = new ArrayList<>();\n\
    \        for (String string : strings) {\n            if (string.contains(substring))\
    \ {\n                filtered.add(string);\n            }\n        }\n       \
    \ return filtered;\n}\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011490
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        ArrayList<String> result = new ArrayList<>();\n\
    \        for (String string : strings) {\n            if (string.contains(substring))\
    \ {\n                result.add(string);\n            }\n        }\n        return\
    \ result;\n}\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011487
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        ArrayList<String> results = new ArrayList<>();\n\
    \        for (String string : strings) {\n            if (string.contains(substring))\
    \ {\n                results.add(string);\n            }\n        }\n        return\
    \ results;\n}\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011487
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        ArrayList<String> filteredList = new ArrayList<String>();\n\
    \n        for (String s : strings) {\n            if (s.contains(substring)) {\n\
    \                filteredList.add(s);\n            }\n        }\n        return\
    \ filteredList;\n}\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011491
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        return strings.stream()\n            .filter(x\
    \ -> x.contains(substring))\n            .collect(Collectors.toCollection(ArrayList::new));\n\
    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011492
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        return strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toCollection(ArrayList<String>::new));\n\
    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011491
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        return strings.stream()\n            \
    \    .filter(x -> x.contains(substring))\n                .collect(Collectors.toCollection(ArrayList::new));\n\
    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011492
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        return strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toCollection(ArrayList::new));\n\
    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011357
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        String regex = \".*\" + substring + \"\
    .*\";\n        ArrayList<String> res = new ArrayList<>();\n        for (String\
    \ string : strings) {\n            if (string.matches(regex)) {\n            \
    \    res.add(string);\n            }\n        }\n        return res;\n}\n    public\
    \ static void main(String[] args) {\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\"\
    , (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011492
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        ArrayList<String> result = new ArrayList<>();\n\
    \        for (String s : strings) {\n            if (s.contains(substring)) {\n\
    \                result.add(s);\n            }\n        }\n        return result;\n\
    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011487
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        return strings.stream().filter(e -> e.contains(substring)).collect(Collectors.toList());\n\
    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppa9lq1zb.java:15: error: incompatible types: inference variable\
    \ R has incompatible bounds\n        return strings.stream().filter(e -> e.contains(substring)).collect(Collectors.toList());\n\
    \                                                                          ^\n\
    \    equality constraints: List<T#2>\n    lower bounds: ArrayList<String>,Object\n\
    \  where R,A,T#1,T#2 are type-variables:\n    R extends Object declared in method\
    \ <R,A>collect(Collector<? super T#1,A,R>)\n    A extends Object declared in method\
    \ <R,A>collect(Collector<? super T#1,A,R>)\n    T#1 extends Object declared in\
    \ interface Stream\n    T#2 extends Object declared in method <T#2>toList()\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011491
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        return strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toList());\n\
    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7cd3ufc9.java:15: error: incompatible types: inference variable\
    \ R has incompatible bounds\n        return strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toList());\n\
    \                                                                          ^\n\
    \    equality constraints: List<T#2>\n    lower bounds: ArrayList<String>,Object\n\
    \  where R,A,T#1,T#2 are type-variables:\n    R extends Object declared in method\
    \ <R,A>collect(Collector<? super T#1,A,R>)\n    A extends Object declared in method\
    \ <R,A>collect(Collector<? super T#1,A,R>)\n    T#1 extends Object declared in\
    \ interface Stream\n    T#2 extends Object declared in method <T#2>toList()\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011487
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        return IntStream.range(0, strings.size()).filter(i\
    \ -> strings.subList(i, i + substring.length()).contains(substring))\n       \
    \         .mapToObj(strings::get)\n                .collect(Collectors.toCollection(ArrayList::new));\n\
    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: toIndex\
    \ = 7\n\tat java.base/java.util.AbstractList.subListRangeCheck(AbstractList.java:507)\n\
    \tat java.base/java.util.ArrayList.subList(ArrayList.java:1108)\n\tat Problem.lambda$filterBySubstring$0(tmpeasz0vb_.java:15)\n\
    \tat java.base/java.util.stream.IntPipeline$10$1.accept(IntPipeline.java:392)\n\
    \tat java.base/java.util.stream.Streams$RangeIntSpliterator.forEachRemaining(Streams.java:104)\n\
    \tat java.base/java.util.Spliterator$OfInt.forEachRemaining(Spliterator.java:711)\n\
    \tat java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)\n\
    \tat java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)\n\
    \tat java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:921)\n\
    \tat java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)\n\
    \tat java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:682)\n\
    \tat Problem.filterBySubstring(tmpeasz0vb_.java:17)\n\tat Problem.main(tmpeasz0vb_.java:21)\n"
  stdout: ''
  timestamp: 1660011492
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        ArrayList<String> result = new ArrayList<String>();\n\
    \        for (String string : strings) {\n            if (string.contains(substring))\
    \ {\n                result.add(string);\n            }\n        }\n        return\
    \ result;\n}\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011357
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        return strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toCollection(ArrayList<String>()));\n\
    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpq4b2f51d.java:15: error: -> expected\n        return strings.stream().filter(s\
    \ -> s.contains(substring)).collect(Collectors.toCollection(ArrayList<String>()));\n\
    \                                                                            \
    \                                          ^\n1 error\n"
  stdout: ''
  timestamp: 1660011491
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        String regex = \".*\" + substring + \"\
    .*\";\n        ArrayList<String> result = new ArrayList<>();\n        for(String\
    \ string : strings) {\n            if(string.matches(regex)) {\n             \
    \   result.add(string);\n            }\n        }\n        return result;\n}\n\
    \    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011492
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        ArrayList<String> filtered = new ArrayList<>();\n\
    \        for (String s : strings) {\n            if (s.contains(substring)) {\n\
    \                filtered.add(s);\n            }\n        }\n        return filtered;\n\
    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011488
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        ArrayList<String> result = new ArrayList<>();\n\
    \        for (String string : strings)\n            if (string.contains(substring))\n\
    \                result.add(string);\n        return result;\n}\n    public static\
    \ void main(String[] args) {\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\"\
    , (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011492
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        return strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toList());\n\
    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7cd3ufc9.java:15: error: incompatible types: inference variable\
    \ R has incompatible bounds\n        return strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toList());\n\
    \                                                                          ^\n\
    \    equality constraints: List<T#2>\n    lower bounds: ArrayList<String>,Object\n\
    \  where R,A,T#1,T#2 are type-variables:\n    R extends Object declared in method\
    \ <R,A>collect(Collector<? super T#1,A,R>)\n    A extends Object declared in method\
    \ <R,A>collect(Collector<? super T#1,A,R>)\n    T#1 extends Object declared in\
    \ interface Stream\n    T#2 extends Object declared in method <T#2>toList()\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011487
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        return strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toList());\n\
    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7cd3ufc9.java:15: error: incompatible types: inference variable\
    \ R has incompatible bounds\n        return strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toList());\n\
    \                                                                          ^\n\
    \    equality constraints: List<T#2>\n    lower bounds: ArrayList<String>,Object\n\
    \  where R,A,T#1,T#2 are type-variables:\n    R extends Object declared in method\
    \ <R,A>collect(Collector<? super T#1,A,R>)\n    A extends Object declared in method\
    \ <R,A>collect(Collector<? super T#1,A,R>)\n    T#1 extends Object declared in\
    \ interface Stream\n    T#2 extends Object declared in method <T#2>toList()\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011487
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        if (strings == null || strings.size()\
    \ == 0) {\n            System.out.println(\"No strings found!\");\n          \
    \  return strings;\n        }\n        ArrayList<String> out = new ArrayList<>();\n\
    \        boolean found = false;\n        for (String string : strings) {\n   \
    \         if (string.contains(substring)) {\n                found = true;\n \
    \               out.add(string);\n            }\n        }\n        if (found\
    \ == false)\n            out.add(\"None\");\n        return out;\n}\n    public\
    \ static void main(String[] args) {\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\"\
    , (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: 'No strings found!

    '
  timestamp: 1660011492
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        ArrayList<String> result = new ArrayList<>();\n\
    \        if (strings == null || strings.size() == 0) {\n            return result;\n\
    \        }\n        for (String s : strings) {\n            if (s.contains(substring))\
    \ {\n                result.add(s);\n            }\n        }\n        return\
    \ result;\n}\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011493
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        return objects.filter(strings -> strings.contains(substring)).collect(Collectors.toList());\n\
    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz_1xrlbr.java:15: error: cannot find symbol\n        return objects.filter(strings\
    \ -> strings.contains(substring)).collect(Collectors.toList());\n            \
    \   ^\n  symbol:   variable objects\n  location: class Problem\n/tmp/tmpz_1xrlbr.java:15:\
    \ error: variable strings is already defined in method filterBySubstring(ArrayList<String>,String)\n\
    \        return objects.filter(strings -> strings.contains(substring)).collect(Collectors.toList());\n\
    \                              ^\n2 errors\n"
  stdout: ''
  timestamp: 1660011492
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        ArrayList<String> filtered = new ArrayList<>();\n\
    \        for (String str : strings) {\n            if (str.contains(substring))\n\
    \                filtered.add(str);\n        }\n        return filtered;\n}\n\
    \    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011492
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        // O(n)\n        ArrayList<String> result\
    \ = new ArrayList<String>();\n        for (String string : strings) {\n      \
    \      if (string.contains(substring)) {\n                result.add(string);\n\
    \            }\n        }\n        return result;\n}\n    public static void main(String[]\
    \ args) {\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\"\
    , (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011493
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        ArrayList<String> result = new ArrayList<String>();\n\
    \        for (String s : strings) {\n            if (s.toLowerCase().contains(substring.toLowerCase()))\
    \ {\n                result.add(s);\n            }\n        }\n        return\
    \ result;\n}\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011490
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        ArrayList<String> result = new ArrayList<String>();\n\
    \        for (String s : strings) {\n            if(s.contains(substring))\n \
    \               result.add(s);\n        }\n        return result;\n}\n    public\
    \ static void main(String[] args) {\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\"\
    , (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011493
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        return strings\n                .stream()\n\
    \                .filter(s -> s.contains(substring))\n                .collect(Collectors.toCollection(ArrayList::new));\n\
    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011493
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        return strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toCollection(ArrayList<String>()));\n\
    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpq4b2f51d.java:15: error: -> expected\n        return strings.stream().filter(s\
    \ -> s.contains(substring)).collect(Collectors.toCollection(ArrayList<String>()));\n\
    \                                                                            \
    \                                          ^\n1 error\n"
  stdout: ''
  timestamp: 1660011491
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        // Implement this method.\n        return\
    \ strings;\n}\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnz8fdcl8.java:20)\n"
  stdout: ''
  timestamp: 1660011493
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        ArrayList<String> result = new ArrayList<>();\n\
    \        for (String string : strings) {\n            if (string.contains(substring))\
    \ {\n                result.add(string);\n            }\n        }\n        return\
    \ result;\n}\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011487
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        ArrayList<String> result = new ArrayList<>();\n\
    \n        // Sort so that shorter substring come first\n        strings.sort(Comparator.comparing(String::length));\n\
    \n        // Go through all strings and only add those with a matching substring\n\
    \        for (String string : strings) {\n            if (string.contains(substring))\n\
    \                result.add(string);\n        }\n\n        return result;\n}\n\
    \    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6mf6vti4.java:30)\n"
  stdout: ''
  timestamp: 1660011493
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        if (strings == null || substring.length()\
    \ == 0) return new ArrayList<String>();\n        ArrayList<String> result = new\
    \ ArrayList<>();\n        for (String s : strings) {\n            if (s.contains(substring))\
    \ result.add(s);\n        }\n        return result;\n}\n    public static void\
    \ main(String[] args) {\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\"\
    , (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011493
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        ArrayList<String> result = new ArrayList<String>();\n\
    \        for (String s : strings) {\n            if (s.contains(substring)) {\n\
    \                result.add(s);\n            }\n        }\n        return result;\n\
    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011357
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        return strings.stream().filter(x -> x.contains(substring)).collect(Collectors.toCollection(ArrayList::new));\n\
    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011358
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        ArrayList<String> filtered = new ArrayList<String>();\n\
    \        for (String s : strings) {\n            if (s.contains(substring)) {\n\
    \                filtered.add(s);\n            }\n        }\n        return filtered;\n\
    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011358
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        return filter(strings, x -> x.contains(substring));\n\
    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6y2kn9qu.java:15: error: cannot find symbol\n        return filter(strings,\
    \ x -> x.contains(substring));\n               ^\n  symbol:   method filter(ArrayList<String>,(x)->x.con[...]ring))\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011493
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        ArrayList<String> filtered = new ArrayList<String>();\n\
    \        for (String s: strings) {\n            if (substring.contains(s)) {\n\
    \                filtered.add(s);\n            }\n        }\n        return filtered;\n\
    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp93dm_3e0.java:25)\n"
  stdout: ''
  timestamp: 1660011493
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        ArrayList<String> result = new ArrayList<>();\n\
    \        for(String string : strings) {\n            if(string.contains(substring))\
    \ {\n                result.add(string);\n            }\n        }\n        return\
    \ result;\n}\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011493
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        ArrayList<String> filtered = new ArrayList<String>();\n\
    \        for (String string : strings) {\n            if (string.contains(substring))\
    \ {\n                filtered.add(string);\n            }\n        }\n       \
    \ return filtered;\n}\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011358
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        ArrayList<String> results = new ArrayList<String>();\n\
    \        \n        for (String s : strings) {\n            boolean contains =\
    \ false;\n            if (substring.contains(s)) {\n                contains =\
    \ true;\n            }\n            results.add(s);\n        }\n        \n   \
    \     return results;\n}\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvkt683vf.java:29)\n"
  stdout: ''
  timestamp: 1660011493
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        ArrayList<String> output = new ArrayList<>();\n\
    \        for (String string : strings) {\n            if (string.contains(substring))\
    \ {\n                output.add(string);\n            }\n        }\n        return\
    \ output;\n}\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011493
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        ArrayList<String> result = new ArrayList<>();\n\
    \        for(String str: strings) {\n            if(str.contains(substring)) {\n\
    \                result.add(str);\n            }\n        }\n        return result;\n\
    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011493
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        return strings.stream()\n            \
    \    .filter(s -> s.contains(substring))\n                .collect(Collectors.toCollection(ArrayList::new));\n\
    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011489
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        ArrayList<String> result = new ArrayList<>();\n\
    \        for(int i = 0; i < strings.size(); i++) {\n            if(!strings.get(i).contains(substring))\
    \ {\n                result.add(strings.get(i));\n            }\n        }\n \
    \       return result;\n}\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdspwi2j0.java:25)\n"
  stdout: ''
  timestamp: 1660011493
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        ArrayList<String> result = new ArrayList<String>();\n\
    \        for (String s : strings) {\n            if (s.contains(substring)) {\n\
    \                result.add(s);\n            }\n        }\n        return result;\n\
    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011357
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        ArrayList<String> results = new ArrayList<>();\n\
    \        // Your code here\n        for(String s : strings) {\n            if\
    \ (s.contains(substring)) {\n                results.add(s);\n            }\n\
    \        }\n        return results;\n}\n    public static void main(String[] args)\
    \ {\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList())), (\"\
    john\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\"\
    , (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011493
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        // Write your code here\n        if (strings\
    \ == null || strings.isEmpty()) return new ArrayList<String>();\n        ArrayList<String>\
    \ stringList = new ArrayList<>();\n        for(String s: strings){\n         \
    \   if(s.contains(substring)){\n                stringList.add(s);\n         \
    \   }\n        }\n        return stringList;\n}\n    public static void main(String[]\
    \ args) {\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\"\
    , (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011493
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        // O(1) because we only need to compare\
    \ the first element of each list against substring\n        ArrayList<String>\
    \ filtered = new ArrayList<>();\n        for (String string : strings) {\n   \
    \         if (string.contains(substring)) {\n                filtered.add(string);\n\
    \            }\n        }\n        return filtered;\n}\n    public static void\
    \ main(String[] args) {\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\"\
    , (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011493
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        ArrayList<String> result = new ArrayList<>();\n\
    \        if (strings == null || strings.size() == 0 || substring == null) {\n\
    \            return result;\n        }\n        for (String s : strings) {\n \
    \           if (s.contains(substring)) {\n                result.add(s);\n   \
    \         }\n        }\n        return result;\n}\n    public static void main(String[]\
    \ args) {\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\"\
    , (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011493
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        ArrayList<String> result = new ArrayList<>();\n\
    \        if (strings == null || strings.size() == 0) return result;\n\n      \
    \  boolean found = false;\n        for (String string : strings) {\n         \
    \   if (string.contains(substring)) {\n                found = true;\n       \
    \         result.add(string);\n                break;\n            }\n       \
    \ }\n        return found ? result : new ArrayList<>();\n}\n    public static\
    \ void main(String[] args) {\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\"\
    , (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvf7lzlli.java:30)\n"
  stdout: ''
  timestamp: 1660011493
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        return IntStream.range(0, strings.size()).filter(i\
    \ -> strings.get(i).contains(substring))\n            .mapToObj(i -> strings.get(i))\n\
    \            .collect(Collectors.toCollection(ArrayList::new));\n}\n    public\
    \ static void main(String[] args) {\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\"\
    , (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011494
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        if (substring.isEmpty()) {\n         \
    \   return strings;\n        }\n\n        ArrayList<String> result = new ArrayList<String>();\n\
    \        for (String string : strings) {\n            if (string.contains(substring))\
    \ {\n                result.add(string);\n            }\n        }\n        return\
    \ result;\n}\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011494
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        ArrayList<String> result = new ArrayList<String>();\n\
    \        if (strings == null || strings.length() == 0) {\n            return result;\n\
    \        }\n\n        for (String s : strings) {\n            if (s.contains(substring))\
    \ {\n                result.add(s);\n            }\n        }\n\n        return\
    \ result;\n}\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmph8i29cpu.java:16: error: cannot find symbol\n        if (strings\
    \ == null || strings.length() == 0) {\n                                      ^\n\
    \  symbol:   method length()\n  location: variable strings of type ArrayList<String>\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011493
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        // return early if null or substring is\
    \ empty\n        if (strings == null || substring == null) return strings;\n \
    \       // return early if list is empty\n        if (strings.size() == 0) return\
    \ strings;\n\n        ArrayList<String> filtered = new ArrayList<String>();\n\n\
    \        // use Java stream and split the strings into an ArrayList so we can\
    \ use indexOf\n        strings.stream()\n            .map(s -> s.split(substring))\n\
    \            // filter out any empty strings\n            .filter(a -> !a.isEmpty())\n\
    \            // filter out any nulls\n            .filter(a -> a != null)\n  \
    \          // now filter by the substring\n            .filter(a -> a.contains(substring))\n\
    \            .forEachOrdered(filtered.add);\n\n        return filtered;\n}\n \
    \   public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmviiexf2.java:31: error: cannot find symbol\n            .forEachOrdered(filtered.add);\n\
    \                                    ^\n  symbol:   variable add\n  location:\
    \ variable filtered of type ArrayList<String>\n/tmp/tmpmviiexf2.java:26: error:\
    \ cannot find symbol\n            .filter(a -> !a.isEmpty())\n               \
    \            ^\n  symbol:   method isEmpty()\n  location: variable a of type String[]\n\
    /tmp/tmpmviiexf2.java:30: error: cannot find symbol\n            .filter(a ->\
    \ a.contains(substring))\n                          ^\n  symbol:   method contains(String)\n\
    \  location: variable a of type String[]\n3 errors\n"
  stdout: ''
  timestamp: 1660011494
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        return strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toList());\n\
    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7cd3ufc9.java:15: error: incompatible types: inference variable\
    \ R has incompatible bounds\n        return strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toList());\n\
    \                                                                          ^\n\
    \    equality constraints: List<T#2>\n    lower bounds: ArrayList<String>,Object\n\
    \  where R,A,T#1,T#2 are type-variables:\n    R extends Object declared in method\
    \ <R,A>collect(Collector<? super T#1,A,R>)\n    A extends Object declared in method\
    \ <R,A>collect(Collector<? super T#1,A,R>)\n    T#1 extends Object declared in\
    \ interface Stream\n    T#2 extends Object declared in method <T#2>toList()\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011487
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        return objects.filter(strings -> strings.contains(substring)).collect(Collectors.toList());\n\
    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz_1xrlbr.java:15: error: cannot find symbol\n        return objects.filter(strings\
    \ -> strings.contains(substring)).collect(Collectors.toList());\n            \
    \   ^\n  symbol:   variable objects\n  location: class Problem\n/tmp/tmpz_1xrlbr.java:15:\
    \ error: variable strings is already defined in method filterBySubstring(ArrayList<String>,String)\n\
    \        return objects.filter(strings -> strings.contains(substring)).collect(Collectors.toList());\n\
    \                              ^\n2 errors\n"
  stdout: ''
  timestamp: 1660011492
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        ArrayList<String> result = new ArrayList<>();\n\
    \        for (String s: strings) {\n            if (s.contains(substring)) {\n\
    \                result.add(s);\n            }\n        }\n        return result;\n\
    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011494
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        ArrayList<String> result = new ArrayList<>();\n\
    \        for (String string : strings) {\n            if (string.contains(substring))\
    \ {\n                result.add(string);\n            }\n        }\n        return\
    \ result;\n}\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011487
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        return strings.stream()\n            \
    \    .filter(s -> s.contains(substring))\n                .collect(Collectors.toCollection(ArrayList::new));\n\
    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011489
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        return IntStream.range(0, strings.size())\n\
    \                .filter(i -> strings.get(i).contains(substring))\n          \
    \      .mapToObj(strings::get)\n                .collect(Collectors.toCollection(ArrayList::new));\n\
    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011494
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        ArrayList<String> filtered = new ArrayList<String>();\n\
    \        for (String s : strings) {\n            if (s.contains(substring)) {\n\
    \                filtered.add(s);\n            }\n        }\n        return filtered;\n\
    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011358
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        return strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toCollection(ArrayList::new));\n\
    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011357
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        ArrayList<String> result = new ArrayList<>();\n\
    \        for (String string : strings) {\n            if (string.contains(substring))\
    \ {\n                result.add(string);\n            }\n        }\n        return\
    \ result;\n}\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011487
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        if (strings == null || strings.size()\
    \ == 0 || substring == null || substring.equals(\"\"))\n            return strings;\n\
    \n        ArrayList<String> filtered = new ArrayList<>();\n        for (String\
    \ s : strings) {\n            if (s.contains(substring)) {\n                filtered.add(s);\n\
    \            }\n        }\n\n        return filtered;\n}\n    public static void\
    \ main(String[] args) {\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\"\
    , (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011494
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        ArrayList<String> ret = new ArrayList<>();\n\
    \        for(String s: strings) {\n            if(s.contains(substring)) {\n \
    \               ret.add(s);\n            }\n        }\n        return ret;\n}\n\
    \    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011494
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        ArrayList<String> result = new ArrayList<String>();\n\
    \        for (String s : strings) {\n            if (s.contains(substring)) {\n\
    \                result.add(s);\n            }\n        }\n        return result;\n\
    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011357
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        ArrayList<String> filtered = new ArrayList<String>();\n\
    \        for (int i = 0; i < strings.size(); i++) {\n            if (strings.contains(substring))\
    \ {\n                filtered.add(strings.get(i));\n            }\n        }\n\
    \        return filtered;\n}\n    public static void main(String[] args) {\n \
    \   assert(filterBySubstring((new ArrayList<String>(Arrays.asList())), (\"john\"\
    )).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\"\
    , (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2a5v892o.java:25)\n"
  stdout: ''
  timestamp: 1660011494
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        ArrayList<String> result = new ArrayList<String>();\n\
    \        for(String s : strings)\n            if(s.contains(substring))\n    \
    \            result.add(s);\n        return result;\n}\n    public static void\
    \ main(String[] args) {\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\"\
    , (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011494
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        return strings.stream().filter(str ->\
    \ str.contains(substring)).collect(Collectors.toCollection(ArrayList::new));\n\
    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011360
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        return IntStream.range(0, strings.size()).mapToObj(i\
    \ -> new Tuple1<>(strings.get(i), substring)).filter(t -> t.getT2().contains(substring))\n\
    \            .map(t -> t.getT1()).collect(Collectors.toCollection(ArrayList<String>::new));\n\
    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8u0aymmo.java:15: error: cannot find symbol\n        return IntStream.range(0,\
    \ strings.size()).mapToObj(i -> new Tuple1<>(strings.get(i), substring)).filter(t\
    \ -> t.getT2().contains(substring))\n                                        \
    \                            ^\n  symbol:   class Tuple1\n  location: class Problem\n\
    /tmp/tmp8u0aymmo.java:15: error: cannot find symbol\n        return IntStream.range(0,\
    \ strings.size()).mapToObj(i -> new Tuple1<>(strings.get(i), substring)).filter(t\
    \ -> t.getT2().contains(substring))\n                                        \
    \                                                                            \
    \  ^\n  symbol:   method getT2()\n  location: variable t of type Object\n/tmp/tmp8u0aymmo.java:16:\
    \ error: cannot find symbol\n            .map(t -> t.getT1()).collect(Collectors.toCollection(ArrayList<String>::new));\n\
    \                       ^\n  symbol:   method getT1()\n  location: variable t\
    \ of type Object\n/tmp/tmp8u0aymmo.java:16: error: incompatible types: inference\
    \ variable T has incompatible bounds\n            .map(t -> t.getT1()).collect(Collectors.toCollection(ArrayList<String>::new));\n\
    \                                        ^\n    equality constraints: String\n\
    \    lower bounds: Object\n  where T,C are type-variables:\n    T extends Object\
    \ declared in method <T,C>toCollection(Supplier<C>)\n    C extends Collection<T>\
    \ declared in method <T,C>toCollection(Supplier<C>)\n4 errors\n"
  stdout: ''
  timestamp: 1660011494
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        return Arrays.stream(strings)\n      \
    \      .filter(s -> s.contains(substring))\n            .collect(Collectors.toCollection(ArrayList::new));\n\
    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwictexm2.java:15: error: no suitable method found for stream(ArrayList<String>)\n\
    \        return Arrays.stream(strings)\n                     ^\n    method Arrays.<T#1>stream(T#1[])\
    \ is not applicable\n      (cannot infer type-variable(s) T#1\n        (argument\
    \ mismatch; ArrayList<String> cannot be converted to T#1[]))\n    method Arrays.<T#2>stream(T#2[],int,int)\
    \ is not applicable\n      (cannot infer type-variable(s) T#2\n        (actual\
    \ and formal argument lists differ in length))\n    method Arrays.stream(int[])\
    \ is not applicable\n      (argument mismatch; ArrayList<String> cannot be converted\
    \ to int[])\n    method Arrays.stream(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<String> cannot be converted to long[])\n    method Arrays.stream(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<String> cannot be converted\
    \ to double[])\n  where T#1,T#2 are type-variables:\n    T#1 extends Object declared\
    \ in method <T#1>stream(T#1[])\n    T#2 extends Object declared in method <T#2>stream(T#2[],int,int)\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1660011494
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input list of strings only for ones that contain\
    \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    //\
    \ >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc',\
    \ 'bacd', 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
    \ strings, String substring) {\n        return IntStream.range(0, strings.size())\n\
    \            .filter(idx -> strings.get(idx).contains(substring))\n          \
    \  .boxed()\n            .collect(Collectors.toCollection(ArrayList::new));\n\
    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfqemidr7.java:18: error: incompatible types: inference variable\
    \ E has incompatible bounds\n            .collect(Collectors.toCollection(ArrayList::new));\n\
    \                    ^\n    equality constraints: String,T\n    lower bounds:\
    \ Integer\n  where E,T,C are type-variables:\n    E extends Object declared in\
    \ class ArrayList\n    T extends Object declared in method <T,C>toCollection(Supplier<C>)\n\
    \    C extends Collection<T> declared in method <T,C>toCollection(Supplier<C>)\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011494
