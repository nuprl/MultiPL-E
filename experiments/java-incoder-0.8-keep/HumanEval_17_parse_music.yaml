completions:
- "        // Implement this function!\n        ArrayList<Integer> beats = new ArrayList<Integer>();\n\
  \        \n        return beats;"
- "        ArrayList<Integer> beats = new ArrayList<>();\n        music_string = music_string.toUpperCase();\n\
  \        for (int i = 0; i < music_string.length(); i++) {\n            int note\
  \ = music_string.charAt(i);\n            if (note == '.') {\n                note\
  \ = music_string.charAt(i + 1);\n                if (note == '|') {\n          \
  \          note = music_string.charAt(i + 2);\n                    if (note == '|')\
  \ {\n                        note = music_string.charAt(i + 3);\n              \
  \          if (note == '|') {\n                            note = music_string.charAt(i\
  \ + 4);\n                        }\n                    }\n                }\n \
  \           }\n            if (note != '|') {\n                beats.add(note);\n\
  \            }\n        }\n        return beats;"
- "        ArrayList<Integer> beats = new ArrayList<Integer>();\n        music_string\
  \ = music_string.trim();\n        String[] strings = music_string.split(\" \");\n\
  \        for(int i=0; i<strings.length; i++) {\n            String string = strings[i].trim();\n\
  \            if( !string.equals(\"\") ) {\n                beats.add(stringToNote(music_string).length);\n\
  \            }\n        }\n        return beats;"
- "        ArrayList<Integer> beats = new ArrayList<Integer>();\n        char note\
  \ = '0';\n        int index = 0;\n        while (index < music_string.length())\
  \ {\n            note = music_string.charAt(index++);\n            if (note == 'o')\
  \ {\n                beats.add(4);\n            }\n            else if (note ==\
  \ 'o|') {\n                beats.add(2);\n            }\n            else if (note\
  \ == '.|') {\n                beats.add(1);\n            }\n            else {\n\
  \                throw new IllegalArgumentException(\"Unexpected note \" + note);\n\
  \            }\n        }\n        return beats;"
- "        if (music_string.length() != 7) {\n            throw new IllegalArgumentException(\"\
  Incorrect music_string. Expected exactly 7 charactors.\");\n        }\n        int\
  \ beats_per_note = 4;\n        ArrayList<Integer> beats = new ArrayList<>();\n \
  \       for (int i = 0; i < music_string.length(); i++) {\n            if (music_string.charAt(i)\
  \ != '.' && music_string.charAt(i) != '|') {\n                beats_per_note++;\n\
  \            }\n            beats.add(beats_per_note);\n            beats_per_note\
  \ = 0;\n        }\n        return beats;"
- "        ArrayList<Integer> result = new ArrayList<>();\n        int current;\n\
  \        int max = 0;\n        for (char c : music_string.toCharArray()) {\n   \
  \         switch (c) {\n                case 'o':\n                    result.add(1);\n\
  \                    break;\n                case 'o|':\n                    result.add(2);\n\
  \                    break;\n                case '.|':\n                    result.add(3);\n\
  \                    break;\n                default:\n                    if (current\
  \ > max) {\n                        max = current;\n                    }\n    \
  \                result.add(current);\n            }\n            current++;\n \
  \       }\n        if (result.size() > max) {\n            int i = result.size()\
  \ - 1;\n            while (i > 0) {\n                result.set(i, result.get(i)\
  \ - 1);\n                i--;\n            }\n        }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<>();\n        music_string =\
  \ music_string.replaceAll(\"[^\\\\p{P}\\\\p{N} ]\", \"\");\n        music_string\
  \ = music_string.replaceAll(\"\\\\s+\", \" \");\n        music_string = music_string.replaceAll(\"\
  ^\\\\s+\", \"\");\n        music_string = music_string.replaceAll(\"\\\\s+$\", \"\
  \");\n        music_string = music_string.replaceAll(\"\\\\s+\\\\|+\\\\s+\", \"\
  |\");\n        music_string = music_string.replaceAll(\"\\\\s+\\\\|+\", \"|\");\n\
  \        music_string = music_string.replaceAll(\"\\\\s+\\\\|+\\\\s+\\\\|+\", \"\
  |\");\n        music_string = music_string.replaceAll(\"\\\\s+\\\\|+\\\\|+\", \"\
  |\");\n        music_string = music_string.replaceAll(\"\\\\s+\\\\|+\\\\s+\\\\s+\"\
  , \"|\");\n        music_string = music_string.replaceAll(\"\\\\s+\\\\|+\\\\s+\\\
  \\|+\\\\s+\", \"|\");\n        music_string = music_string.replaceAll(\"\\\\s+\\\
  \\|+\\\\s+\\\\s+\\\\s+\", \"|\");\n        music_string = music_string.replaceAll(\"\
  \\\\s+\\\\|+\\\\s+\\\\s+\\\\|+\", \"|\");\n        music_string = music_string.replaceAll(\"\
  \\\\s+\\\\|+\\\\s+\\\\s+\\\\|+\\\\s+\", \"|\");\n        music_string = music_string.replaceAll(\"\
  \\\\s+\\\\|+\\\\s+\\\\s+\\\\|+\\\\s+\", \"|\");\n        music_string = music_string.replaceAll(\"\
  \\\\s+\\\\|+\\\\s+\\\\s+\\\\|+\", \"|\");\n        music_string = music_string.replaceAll(\"\
  \\\\s+\\\\|+\\\\s+\\\\s+\\\\|+\\\\s+\", \"|\");\n        music_string = music_string.replaceAll(\"\
  \\\\s+\\\\|+\\\\s+\\\\s+\\\\|+\\\\s+\\\\s+\", \"|\");\n        music_string = music_string.replaceAll(\"\
  \\\\s+\\\\|+\\\\s+\\\\s+\\\\|+\", \"|\");\n        music_string = music_string.replaceAll(\"\
  \\\\s+\\\\|+\\\\s+\\\\s+\\\\|+\\\\s+\", \"|\");\n        music_string = music_string.replaceAll(\"\
  \\\\s+\\\\|+\\\\s+\\\\s+\\\\|+\\\\s+\\\\s+\", \"|\");\n        music_string = music_string.replaceAll(\"\
  \\\\s+\\\\|+\\\\s+\\\\s+\\\\"
- "        ArrayList<Integer> list = new ArrayList<Integer>();\n        String note\
  \ = null;\n        int beats = 1;\n        for (int i = 0; i < music_string.length();\
  \ i++) {\n            if (music_string.charAt(i) == '|') {\n                list.add(beats);\n\
  \                beats = 1;\n            } else if (music_string.charAt(i) == 'o')\
  \ {\n                if (note != null) {\n                    list.add(beats);\n\
  \                }\n                list.add(1);\n                note = music_string.charAt(i);\n\
  \            } else {\n                beats++;\n            }\n        }\n    \
  \    if (note != null) {\n            list.add(beats);\n        }\n        return\
  \ list;"
- "        ArrayList<Integer> results = new ArrayList<>();\n        // Here we parse\
  \ each note, for example 'o o' would be parsed as\n        // [Note.O, Note.O, Note.O]\n\
  \        String[] music_pieces = music_string.split(\"[| \\\\.\\\\s]+\");\n\n  \
  \      for (String piece : music_pieces) {\n            // Here we parse each musical\
  \ symbol separately, for example\n            // 'o' would be parsed as [Note.O]\n\
  \            String[] music_symbols = piece.split(\"[ \\\\.]+\");\n            //\
  \ Here we try to parse each symbol as a note or note name\n            for (String\
  \ symbol : music_symbols) {\n                // Here we try to parse symbol as a\
  \ note name\n                try {\n                    Note note = Note.valueOf(symbol.charAt(0));\n\
  \                    int beats_number = Integer.parseInt(symbol);\n\n          \
  \          // We try to parse symbol as note, if we succeed,\n                 \
  \   // we add the beat number to results and we skip to next musical symbol\n  \
  \                  results.add(beats_number);\n                    continue;\n \
  \               } catch (IllegalArgumentException e) {\n                    // If\
  \ symbol is not a note or note name, we skip it to next symbol\n               \
  \     // and try to parse it as a note\n                }\n            }\n     \
  \   }\n        return results;"
- '        // your implementation'
- "        ArrayList<Integer> beats = new ArrayList<Integer>();\n        String[]\
  \ notes = music_string.split(\" \");\n        ArrayList<String> notes_with_beats\
  \ = new ArrayList<String>();\n\n        // for each note, find beat number and add\
  \ it to beats\n        for (int i = 0; i < notes.length; i++) {\n            if\
  \ (notes[i].equals(\"o\")) {\n                // o - whole note, lasts four beats\n\
  \                beats.add(4);\n                notes_with_beats.add(notes[i]);\n\
  \            } else if (notes[i].equals(\"o|\")) {\n                // o| - half\
  \ note, lasts two beats\n                beats.add(2);\n                notes_with_beats.add(notes[i]);\n\
  \            } else if (notes[i].equals(\".|\")) {\n                // .| - quater\
  \ note, lasts one beat\n                beats.add(1);\n                notes_with_beats.add(notes[i]);\n\
  \            }\n        }\n\n        // if there is a missing beat, add an 'o' at\
  \ the end of notes\n        // this is important as otherwise the music string will\
  \ miss the last beat\n        if (notes_with_beats.size() < notes.length) {\n  \
  \          notes_with_beats.add(\"o\");\n        }\n\n        // convert notes with\
  \ beats to number\n        for (int i = 0; i < notes_with_beats.size(); i++) {\n\
  \            String beat = notes_with_beats.get(i);\n            String[] beats\
  \ = beat.replaceAll(\"o\", \"\").split(\"|\");\n            if (beats.length > 1)\
  \ {\n                beats.add(beats.length - 1);\n            }\n            for\
  \ (int j = 0; j < beats.length; j++) {\n                if (Integer.parseInt(beats[j])\
  \ > 0) {\n                    beats.add(j);\n                }\n            }\n\
  \            notes_with_beats.set(i, String.join(\"\", beats));\n        }\n\n \
  \       // convert to ints and return list\n        int[] ints = notes_with_beats.stream().map(String::valueOf).map(Integer::valueOf).toArray();\n\
  \        return Arrays.stream(ints).sorted().distinct().boxed().collect(Collectors.toCollection(ArrayList::new));"
- "        ArrayList<Integer> beats = new ArrayList<Integer>();\n        if (music_string.equalsIgnoreCase(\"\
  \")) {\n            return beats;\n        }\n        // first check that the music\
  \ string does not contain an open bracket\n        if (music_string.indexOf('[')\
  \ < 0) {\n            throw new IllegalArgumentException(\"Music string can not\
  \ contain open bracket\");\n        }\n        // then check that the music string\
  \ does not end with a close bracket\n        if (music_string.lastIndexOf(']') <\
  \ 0) {\n            throw new IllegalArgumentException(\"Music string can not end\
  \ with close bracket\");\n        }\n        // now parse the music string and extract\
  \ the beats\n        music_string = music_string.replace('[', '');\n        music_string\
  \ = music_string.replace(']', '');\n        int pos = 0;\n        boolean found\
  \ = false;\n        while (pos < music_string.length()) {\n            // find out\
  \ if this character is a dot\n            String note = music_string.substring(pos,\
  \ pos + 1);\n            if (note.equalsIgnoreCase(\".\")) {\n                found\
  \ = true;\n                // find out if this note is open (i.e. does not end with\
  \ bracket)\n                if (music_string.charAt(pos + 2) == '|') {\n       \
  \             // find out if this note is open (i.e. does not end with bracket)\n\
  \                    note = music_string.substring(pos + 3);\n                 \
  \   // if the note is closed, add one more beat to beats\n                    if\
  \ (note.equalsIgnoreCase(\"o\")) {\n                        beats.add(1);\n    \
  \                }\n                    else {\n                        // if the\
  \ note is opened, add four beats to beats\n                        beats.add(4);\n\
  \                    }\n                }\n            }\n            pos += 1;\n\
  \        }\n        if (found == false) {\n            throw new IllegalArgumentException(\"\
  Invalid music string given to parseMusic\");\n        }\n        return beats;"
- "        if (music_string == null || music_string.trim().equals(\"\")) {\n     \
  \       return new ArrayList<>();\n        }\n        ArrayList<Integer> beats =\
  \ new ArrayList<>();\n        StringTokenizer st = new StringTokenizer(music_string,\
  \ \" \");\n        while (st.hasMoreTokens()) {\n            String s = st.nextToken().trim();\n\
  \            if (s.equals(\".\") || s.equals(\"o\") || s.equals(\"o|\")) {\n   \
  \             beats.add(4);\n            } else if (s.equals(\"o|\")) {\n      \
  \          beats.add(2);\n            } else if (s.equals(\"o\")) {\n          \
  \      beats.add(1);\n            }\n        }\n        return beats;"
- "        ArrayList<Integer> beats = new ArrayList<>();\n        // Iterate over\
  \ every note and add its beats until we hit \"o\" or \"|\"\n        int note_length\
  \ = 0;\n        for (int i=0; i<music_string.length(); i++) {\n            char\
  \ c = music_string.charAt(i);\n            char next = music_string.charAt(i + 1);\n\
  \            if (c == 'o' || next == 'o') {\n                beats.add(note_length);\n\
  \                note_length = 0;\n            } else if (next == '|') {\n     \
  \           note_length += 2;\n            } else {\n                note_length++;\n\
  \            }\n        }\n        beats.add(note_length);\n        return beats;"
- "        ArrayList<Integer> beats = new ArrayList<>();\n        music_string = music_string.trim().toLowerCase();\n\
  \        for (int i = 0; i < music_string.length(); i++) {\n            char character\
  \ = music_string.charAt(i);\n            if (character == 'o') {\n             \
  \   beats.add((int) Math.pow(2, (4 - i)));\n            }\n            else if (character\
  \ == '|') {\n                beats.add((int) Math.pow(2, (2 - i)));\n          \
  \  }\n            else if (character == '.') {\n                beats.add(1);\n\
  \            }\n        }\n        return beats;"
- "        String [][] notes = {\"o\", \"o|\", \"|.\"};\n        int [] beats = new\
  \ int [notes.length];\n        \n        for(int i = 0; i < notes.length; i++){\n\
  \            notes[i] = music_string.toLowerCase().substring(0,notes[i].length()-3);\n\
  \        }\n        \n        int index = 0;\n        int sum = 0;\n        int\
  \ note = 0;\n        int length = music_string.length();\n        \n        while(notes[note].length()\
  \ < length){\n            beats[note] = sum;\n            sum += beats[note];\n\
  \            \n            note++;\n            if(note == notes.length)\n     \
  \           note = 0;\n        }\n        \n        for(int i = 0; i < notes.length;\
  \ i++){\n            System.out.println(notes[i]);\n            System.out.println(beats[i]);\n\
  \        }\n        \n        ArrayList<Integer> beats_output = new ArrayList<Integer>();\n\
  \        for(int i = 0; i < notes.length; i++){\n            beats_output.add(beats[i]);\n\
  \        }\n        \n        return beats_output;"
- "        ArrayList<Integer> result = new ArrayList<>();\n        music_string =\
  \ music_string.trim();\n        if (music_string.length() <= 0) {\n            return\
  \ result;\n        }\n        String[] notes = music_string.split(\" \");\n    \
  \    music_string = music_string.replaceAll(\"\\\\s\", \"\");\n        if (music_string.length()\
  \ <= 0) {\n            return result;\n        }\n        int total_beats = 0;\n\
  \        for (String note : notes) {\n            int beat_length = note.length();\n\
  \            int current_beat = 0;\n            char current_note_symbol = note.charAt(0);\n\
  \            if (note.length() == 1) {\n                if (current_note_symbol\
  \ == 'o') {\n                    result.add(total_beats);\n                } else\
  \ {\n                    result.add(total_beats);\n                }\n         \
  \   } else {\n                switch (current_note_symbol) {\n                 \
  \   case 'o':\n                        result.add(total_beats);\n              \
  \          break;\n                    case 'o|':\n                        result.add(total_beats);\n\
  \                        result.add(total_beats);\n                        break;\n\
  \                    case '.|':\n                        result.add(total_beats);\n\
  \                        result.add(total_beats);\n                        result.add(total_beats);\n\
  \                        break;\n                    default:\n                \
  \        throw new RuntimeException(\"Illegal note symbol '\" + current_note_symbol\
  \ + \"'!\");\n                }\n            }\n            for (int i = 0; i <\
  \ beat_length; i++) {\n                current_beat++;\n                current_note_symbol\
  \ = note.charAt(i);\n                switch (current_note_symbol) {\n          \
  \          case 'o':\n                        result.add(total_beats);\n       \
  \                 break;\n                    case 'o|':\n                     \
  \   result.add(total_beats);\n                        result.add(total_beats);\n\
  \                        break;\n                    case '.|':\n              \
  \          result.add(total_beats);\n                        result.add(total_beats);\n\
  \                        result.add(total_beats);\n                        break;\n\
  \                    default:\n                        throw new RuntimeException(\"\
  Illegal note symbol '\" + current_note_symbol + \"'!\");\n                }\n  \
  \          }\n            total_beats += beat_length;\n        }\n        return\
  \ result;"
- "        ArrayList<Integer> result = new ArrayList<>();\n        music_string =\
  \ music_string.trim().replaceAll(\"\\\\s\", \"\");\n        if (music_string.equals(\"\
  o\")) {\n            result.add(0);\n            return result;\n        }\n   \
  \     if (music_string.equals(\"o|\")) {\n            result.add(1);\n         \
  \   return result;\n        }\n        if (music_string.equals(\".|\")) {\n    \
  \        result.add(2);\n            return result;\n        }\n        int beats\
  \ = 0;\n        int prev_note = 0;\n        for (int i = music_string.length() -\
  \ 1; i >= 0; i--) {\n            char c = music_string.charAt(i);\n            switch\
  \ (c) {\n                case 'o':\n                case 'O':\n                case\
  \ '|':\n                    result.add(beats);\n                    result.add(prev_note);\n\
  \                    prev_note = 0;\n                    beats = 0;\n          \
  \          break;\n                case '.':\n                    beats++;\n   \
  \                 prev_note++;\n                    break;\n                case\
  \ '/':\n                    beats = 1;\n                    break;\n           \
  \     default:\n                    prev_note++;\n            }\n        }\n   \
  \     result.add(beats);\n        result.add(prev_note);\n        return result;"
- "        if (music_string == null) return null;\n        ArrayList<Integer> beats\
  \ = new ArrayList<Integer>();\n        String[] notes = music_string.split(\" \"\
  );\n        for (String note : notes) {\n            if (note.equals(\"o\") || note.equals(\"\
  o|\") || note.equals(\".|\")) {\n                beats.add(4);\n            } else\
  \ if (note.equals(\"o\")) {\n                beats.add(2);\n            } else if\
  \ (note.equals(\"o|\")) {\n                beats.add(2);\n            } else if\
  \ (note.equals(\".|\")) {\n                beats.add(1);\n            }\n      \
  \  }\n        return beats;"
- "        ArrayList<Integer> beats_array = new ArrayList<>();\n        music_string\
  \ = music_string.replace('o', '0');\n        music_string = music_string.replace('|',\
  \ '1');\n        music_string = music_string.replaceAll(\"\\\\.\", \"\");\n    \
  \    String[] arr = music_string.split(\"(?!^)\");\n        for (String beat : arr)\
  \ {\n            try {\n                beats_array.add(Integer.valueOf(beat));\n\
  \            } catch (NumberFormatException e) {\n                System.out.println(\"\
  Could not parse music string : \" + music_string);\n            }\n        }\n \
  \       return beats_array;"
- "        ArrayList<Integer> beats = new ArrayList<>();\n        for(int i = 0; i\
  \ < music_string.length(); i++) {\n            if(music_string.charAt(i) == '|')\
  \ {\n                beats.add(1);\n                beats.add(1);\n            }\
  \ else if(music_string.charAt(i) == 'o') {\n                beats.add(4);\n    \
  \        } else if(music_string.charAt(i) == '.') {\n                beats.add(1);\n\
  \            } else {\n                try {\n                    int beats_count\
  \ = Integer.parseInt(music_string.substring(0, i));\n                    for(int\
  \ j = 0; j < beats_count; j++) {\n                        beats.add(1);\n      \
  \              }\n                } catch(NumberFormatException ex) {\n        \
  \            System.out.println(\"Wrong value at position \" + i + \": \" + music_string.substring(0,\
  \ i));\n                }\n            }\n        }\n        return beats;"
- "        ArrayList<Integer> beats = new ArrayList<>();\n        for (int i = 0;\
  \ i < music_string.length(); ++i) {\n            char c = music_string.charAt(i);\n\
  \            if (c == '.') {\n                while (!music_string.charAt(++i) ==\
  \ '.');\n            } else if (c == 'o') {\n                beats.add(4);\n   \
  \         } else if ((c == '|') || (c == ' ')) {\n                beats.add(1);\n\
  \            } else {\n                throw new Exception(\"Invalid music\");\n\
  \            }\n        }\n        return beats;"
- '        // TODO: Your code goes here'
- "        ArrayList<Integer> beats = new ArrayList<>();\n        for (char character\
  \ : music_string.toCharArray()) {\n            int beats = Character.getNumericValue(character);\n\
  \            int total = beats == Character.getNumericValue('o') ? 4 : 2;\n    \
  \        beats.add(total * beats);\n        }\n        return beats;"
- "        ArrayList<Integer> beats = new ArrayList<>();\n\n        if (music_string\
  \ == null || music_string.length() == 0) {\n            return beats;\n        }\n\
  \n        // Get array of all symbols from string\n        String[] symbols = music_string.split(\"\
  \ \");\n\n        // Split symbols into note name and rest of symbols.\n       \
  \ String[] note_name = symbols[0].split(\"\\\\.\");\n        String[] other_symbols\
  \ = symbols[1].split(\"\\\\.|\");\n\n        note_name[0] = \"a\";\n\n        for\
  \ (int i = 0; i < other_symbols.length; i++) {\n            // Create note-name\
  \ array from note-name\n            String[] note_name_copy = note_name.clone();\n\
  \            // Make note name start with 'a' so we have some way to distinguish\
  \ between notes.\n            note_name_copy[0] = note_name_copy[0].substring(1);\n\
  \n            int beats_in_note = 0;\n            // Count beats in note and set\
  \ 'beats_in_note' variable\n            for (int j = 0; j < note_name_copy.length;\
  \ j++) {\n                for (int k = 0; k < note_name_copy[j].length(); k++) {\n\
  \                    if (note_name_copy[j].charAt(k) == 'o') {\n               \
  \         beats_in_note++;\n                    }\n                }\n         \
  \   }\n\n            // Add this note to beats array\n            beats.add(beats_in_note);\n\
  \        }\n\n        return beats;"
- "        ArrayList<Integer> notes = new ArrayList<Integer>();\n        music_string\
  \ = music_string.replaceAll(\"\\\\s+\", \"\");\n        for (String note : music_string.split(\"\
  \ \")) {\n            if (note.equals(\"o\")) {\n                notes.add(4);\n\
  \            } else if (note.equals(\"o|\")) {\n                notes.add(2);\n\
  \            } else if (note.equals(\".|\")) {\n                notes.add(1);\n\
  \            } else {\n                throw new IllegalArgumentException(\"Can't\
  \ parse music string \" + music_string);\n            }\n        }\n        return\
  \ notes;"
- "        if (music_string.isEmpty()) {\n            return new ArrayList<Integer>();\n\
  \        }\n        ArrayList<Integer> notes = new ArrayList<Integer>();\n\n   \
  \     int last_beat = 0;\n\n        int pos = 0;\n        while (pos < music_string.length())\
  \ {\n            char c = music_string.charAt(pos);\n            if (c == '|') {\n\
  \                // do nothing\n            } else if (c == 'o') {\n           \
  \     last_beat = 4;\n            } else if (c == 'o|') {\n                last_beat\
  \ = 2;\n            } else if (c == '.') {\n                last_beat = 1;\n   \
  \         } else {\n                throw new RuntimeException(\"Invalid note: \"\
  \ + c);\n            }\n\n            notes.add(last_beat);\n\n            pos +=\
  \ 1;\n        }\n\n        return notes;"
- "        ArrayList<Integer> result = new ArrayList<>();\n        if (music_string.isEmpty())\
  \ {\n            return result;\n        }\n\n        StringBuilder stringBuilder\
  \ = new StringBuilder();\n        int count = 0;\n        int maxCount = -1;\n \
  \       for (int i = 0; i < music_string.length(); i++) {\n            char c =\
  \ music_string.charAt(i);\n            if (c == ' ') {\n                stringBuilder.append(c);\n\
  \                count = 0;\n            } else if (c == '|') {\n              \
  \  count++;\n                stringBuilder.append(c);\n                maxCount\
  \ = Math.max(count, maxCount);\n            } else if (c == 'o') {\n           \
  \     if (count > 0 && count % 4 == 0) {\n                    result.add(count);\n\
  \                }\n                stringBuilder.append(c);\n                count\
  \ = 1;\n            } else if (c == '.') {\n                if (count > 0 && count\
  \ % 4 == 0) {\n                    result.add(count);\n                }\n     \
  \           stringBuilder.append(c);\n                count = 1;\n            }\
  \ else if (c == 'o|') {\n                if (count > 0 && count % 4 == 1) {\n  \
  \                  result.add(count);\n                }\n                stringBuilder.append(c);\n\
  \                count = 2;\n            } else if (c == '.|') {\n             \
  \   if (count > 0 && count % 4 == 1) {\n                    result.add(count);\n\
  \                }\n                stringBuilder.append(c);\n                count\
  \ = 1;\n            } else {\n                stringBuilder.append(c);\n       \
  \     }\n        }\n\n        if (count > 0 && count % 4 == 0) {\n            result.add(count);\n\
  \        }\n\n        return result;"
- "        ArrayList<Integer> beats = new ArrayList<>();\n        String[] parts =\
  \ music_string.split(\" \");\n        for(int i = 0; i < parts.length; i += 1) {\n\
  \            if(parts[i].startsWith(\"o\")) {\n                String note = parts[i];\n\
  \                int beats_per_note = 4;\n                for (int j = (note.length()\
  \ - 1); j >= 0; j--)\n                    if (note.charAt(j) == '|')\n         \
  \               beats_per_note = 2;\n                    else if (note.charAt(j)\
  \ == '.')\n                        beats_per_note = 1;\n                beats.add(beats_per_note);\n\
  \            }\n        }\n        return beats;"
- "        ArrayList<Integer> beats = new ArrayList<>();\n        String[] pieces\
  \ = music_string.split(\" \");\n        for (String piece : pieces) {\n        \
  \    String[] note = piece.split(\"\\\\|\");\n            int beatsLength = note.length\
  \ / 2;\n            int beatsRepetitions = note.length - beatsLength;\n        \
  \    for (int i = 0; i < beatsLength; i++) {\n                beats.add(0);\n  \
  \          }\n            for (int i = 0; i < beatsRepetitions; i++) {\n       \
  \         beats.add(1);\n            }\n        }\n        return beats;"
- "        ArrayList<Integer> notes = new ArrayList<>();\n        String[] note_strings\
  \ = music_string.split(\" \");\n        for (String s : note_strings) {\n      \
  \      notes.add(note(s));\n        }\n        return notes;"
- "        ArrayList<Integer> beats = new ArrayList<>();\n        StringTokenizer\
  \ st = new StringTokenizer(music_string);\n        while (st.hasMoreTokens()) {\n\
  \            String token = st.nextToken();\n            if (token.equals(\"o\"\
  )) {\n                beats.add(4);\n            } else if (token.equals(\"o|\"\
  )) {\n                beats.add(2);\n            } else if (token.equals(\".|\"\
  )) {\n                beats.add(1);\n            } else {\n                throw\
  \ new RuntimeException(\"Invalid music string!\");\n            }\n        }\n \
  \       return beats;"
- "        ArrayList<Integer> ret = new ArrayList<>();\n        music_string = music_string.trim();\n\
  \        if (music_string.length() == 0) {\n            return ret;\n        }\n\
  \        int prev_note = 0;\n        char current_note = ' ';\n        char prev_note_last_beat\
  \ = ' ';\n        int beats_without_last = 0;\n        for (int i = 0; i < music_string.length();\
  \ i++) {\n            current_note = music_string.charAt(i);\n            if (current_note\
  \ == '|' || current_note == 'o') {\n                ret.add(beats_without_last);\n\
  \                beats_without_last = 0;\n                prev_note_last_beat =\
  \ current_note;\n            } else if (current_note != prev_note_last_beat) {\n\
  \                beats_without_last++;\n            }\n            prev_note_last_beat\
  \ = current_note;\n        }\n        return ret;"
- "        // Part 1: Parsing music string.\n        String delimiter = \" \";\n \
  \       String[] lines = music_string.split(delimiter);\n        // Part 2: Converting\
  \ music strings to music arrays.\n        ArrayList<Integer> music = new ArrayList<Integer>();\n\
  \        StringBuilder music_array = new StringBuilder();\n        for (String line\
  \ : lines) {\n            if (line.length() != 0) {\n                music_array.append(line.charAt(0)).append(\"\
  |\").append(line.charAt(line.length() - 1));\n                music.add(new Integer(music_array.toString().replace(\"\
  |\", \"\")));\n                music_array = new StringBuilder();\n            }\n\
  \        }\n        return music;"
- "        ArrayList<Integer> music_notes = new ArrayList<Integer>();\n        int\
  \ current_beat_length = -1;\n\n        for (char c : music_string.toCharArray())\
  \ {\n            try {\n                switch (c) {\n                    case 'o':\n\
  \                        if (current_beat_length == -1) {\n                    \
  \        current_beat_length = 4 * 4;\n                            music_notes.add(0);\n\
  \                        }\n                        break;\n                   \
  \ case 'o|':\n                        if (current_beat_length == -1) {\n       \
  \                     current_beat_length = 4 * 2;\n                           \
  \ music_notes.add(0);\n                        }\n                        break;\n\
  \                    case '.|':\n                        if (current_beat_length\
  \ == -1) {\n                            current_beat_length = 1;\n             \
  \               music_notes.add(0);\n                        }\n               \
  \         break;\n                    default:\n                        if (current_beat_length\
  \ != -1) {\n                            music_notes.add(current_beat_length);\n\
  \                            current_beat_length = -1;\n                       \
  \ }\n                        break;\n                }\n            } catch (NumberFormatException\
  \ ex) {\n                System.out.println(\"NumberFormatException thrown: \" +\
  \ ex);\n            }\n        }\n\n        return music_notes;"
- "        ArrayList<Integer> beats = new ArrayList<Integer>();\n\n        // Split\
  \ string with notes and chords separated by white spaces.\n        String[] music_notes\
  \ = music_string.split(\" \");\n        int total_beats = 0;\n        for(int i\
  \ = 0; i < music_notes.length; i++) {\n            if(!music_notes[i].equals(\"\
  .\") && !music_notes[i].equals(\"o\") && music_notes[i].length() > 0) {\n      \
  \          beats.add(total_beats);\n                total_beats += 4;\n        \
  \    }\n        }\n        return beats;"
- "        ArrayList<Integer> music = new ArrayList<Integer>();\n        int music_length\
  \ = music_string.length();\n        for (int i = 0; i <= music_length; i++) {\n\
  \            String substring = music_string.substring(i, music_length);\n     \
  \       if (substring.equals(\"o\")) {\n                music.add(4);\n        \
  \    } else if (substring.equals(\"o|\")) {\n                music.add(2);\n   \
  \         } else if (substring.equals(\".|\")) {\n                music.add(1);\n\
  \            } else {\n                music.add(0);\n            }\n        }\n\
  \        return music;"
- "        // Implement this function\n        ArrayList<Integer> beats = new ArrayList<Integer>();\n\
  \        music_string = music_string.replaceAll(\"\\\\s\",\"\");\n        music_string\
  \ = music_string.replaceAll(\"\\\\|\",\"\");\n        int i = 0;\n        int j\
  \ = 0;\n        int current_note = 0;\n        int current_count = 1;\n        while(i\
  \ < music_string.length()) {\n            if(music_string.charAt(i) == 'o') {\n\
  \                if(current_count == 4) {\n                    if(current_note ==\
  \ 0) {\n                        if(j < music_string.length()) {\n              \
  \              if(music_string.charAt(j) == '|') {\n                           \
  \     current_note = 1;\n                                current_count = 1;\n  \
  \                          } else {\n                                j++;\n    \
  \                            current_count++;\n                            }\n \
  \                       }\n                    } else if(current_note == 1) {\n\
  \                        if(j < music_string.length()) {\n                     \
  \       if(music_string.charAt(j) == '|') {\n                                current_note\
  \ = 2;\n                                current_count = 1;\n                   \
  \         } else {\n                                j++;\n                     \
  \           current_count++;\n                            }\n                  \
  \      }\n                    } else if(current_note == 2) {\n                 \
  \       if(j < music_string.length()) {\n                            if(music_string.charAt(j)\
  \ == '|') {\n                                current_note = 3;\n               \
  \                 current_count = 1;\n                            } else {\n   \
  \                             j++;\n                                current_count++;\n\
  \                            }\n                        }\n                    }\
  \ else if(current_note == 3) {\n                        if(j < music_string.length())\
  \ {\n                            if(music_string.charAt(j) == '|') {\n         \
  \                       current_note = 4;\n                                current_count\
  \ = 1;\n                            } else {\n                                j++;\n\
  \                                current_count++;\n                            }\n\
  \                        }\n                    }\n                } else if(current_count\
  \ == 2) {\n                    if(j < music_string.length()) {\n               \
  \         if(music_string.charAt(j) == '|') {\n                            current_note\
  \ = 1;\n                            current_count = 1;\n                       \
  \ } else {\n                            j++;\n                            current_count++;\n\
  \                        }\n                    }\n                } else {\n  \
  \                  if(j < music_string.length()) {\n                        if(music_string.charAt(j)\
  \ == '|') {\n                            current_note = 2;\n                   \
  \         current_count = 1;\n                        } else {\n               \
  \             j++;\n                            current_count++;\n             \
  \           }\n                    }\n                }\n            } else if(music_string.charAt(i)\
  \ == '|') {\n                j++;\n                current_count++;\n          \
  \  } else if(music_string.charAt(i) == '.') {\n                j++;\n          \
  \  } else {\n                current_note = 0;\n                current_count =\
  \ 1;\n            }\n            i++;\n        }\n        return beats;"
- "        ArrayList<Integer> beats = new ArrayList<>();\n        int beat = 0;\n\
  \        int offset = 0;\n        int octave = 0;\n        int notLast = 0;\n  \
  \      boolean octaveWasOn = false;\n        boolean notLastWasOn = false;\n   \
  \     int count = 0;\n        while ((offset < music_string.length()) && (music_string.charAt(offset)\
  \ != '.')) {\n            // Only do something on '.' char\n            notLast++;\n\
  \            count++;\n            if ((music_string.charAt(offset) == ' ') || (music_string.charAt(offset)\
  \ == '\\n')) {\n                offset++;\n            }\n            beat = 0;\n\
  \            while ((offset < music_string.length()) && (music_string.charAt(offset)\
  \ != '.')) {\n                if ((music_string.charAt(offset) == 'o') && (music_string.charAt(offset\
  \ + 1) != '|')) {\n                    octave++;\n                    octaveWasOn\
  \ = true;\n                }\n                if ((music_string.charAt(offset) ==\
  \ 'o') && (music_string.charAt(offset + 1) != '|') && (octaveWasOn == false)) {\n\
  \                    octave--;\n                    octaveWasOn = false;\n     \
  \           }\n                beat++;\n                beats.add(beat);\n     \
  \           count++;\n                if ((music_string.charAt(offset) == ' ') ||\
  \ (music_string.charAt(offset) == '\\n')) {\n                    offset++;\n   \
  \             }\n            }\n            notLast = 0;\n            octave = 0;\n\
  \            beat = 0;\n            offset++;\n        }\n        notLast = 0;\n\
  \        octave = 0;\n        offset++;\n        while ((offset < music_string.length())\
  \ && (music_string.charAt(offset) != '.')) {\n            notLast++;\n         \
  \   count++;\n            if ((music_string.charAt(offset) == 'o') && (music_string.charAt(offset\
  \ + 1) != '|')) {\n                octave++;\n                octaveWasOn = true;\n\
  \            }\n            if ((music_string.charAt(offset) == 'o') && (music_string.charAt(offset\
  \ + 1) != '|') && (octaveWasOn == false)) {\n                octave--;\n       \
  \         octaveWasOn = false;\n            }\n            beat = 0;\n         \
  \   while ((offset < music_string.length()) && (music_string.charAt(offset) != '.'))\
  \ {\n                beat++;\n                beats.add(beat);\n               \
  \ count++;\n                if ((music_string.charAt(offset) == ' ') || (music_string.charAt(offset)\
  \ == '\\n')) {\n                    offset++;\n                }\n            }\n\
  \            notLast = 0;\n            octave = 0;\n            beat = 0;\n    \
  \        offset++;\n        }\n        return beats;"
- "        // Your code here!\n        ArrayList<Integer> beats = new ArrayList<>();\n\
  \        String current_note = music_string;\n        int current_beat = 0;\n  \
  \      int current_note_num = 0;\n        int last_note = 0;\n        int last_beat\
  \ = 0;\n        char note_char;\n        for (int i = 0; i < music_string.length();\
  \ i++) {\n            note_char = music_string.charAt(i);\n            switch (note_char)\
  \ {\n                case 'o':\n                    if (current_note_num == 0)\n\
  \                        current_note_num = 1;\n                    else {\n   \
  \                     current_note_num = 0;\n                        current_beat\
  \ = current_beat + 1;\n                    }\n                    break;\n     \
  \           case '|':\n                    if (current_note_num <= 0) {\n      \
  \                  current_note_num = 0;\n                        current_beat =\
  \ current_beat + 1;\n                    } else {\n                        current_note_num--;\n\
  \                        current_beat = current_beat + 1;\n                    }\n\
  \                    break;\n                case '.':\n                    if (current_note_num\
  \ == 0)\n                        current_note_num = 1;\n                    else\
  \ {\n                        current_note_num = 0;\n                        current_beat\
  \ = current_beat + 1;\n                    }\n                    break;\n     \
  \       }\n            if (current_note_num == 0)\n                last_note = current_note;\n\
  \            if (last_note != current_note) {\n                last_note = current_note;\n\
  \                last_beat = current_beat;\n            }\n        }\n        beats.add(current_beat);\n\
  \        return beats;"
- "        // Your code here\n        ArrayList<Integer> music_string = new ArrayList<>();\n\
  \        music_string.add(music_string.indexOf('o'));\n        music_string.add(music_string.indexOf('o|'));\n\
  \        music_string.add(music_string.indexOf('.|'));\n        return music_string;"
- "        ArrayList<Integer> note_lengths = new ArrayList<>();\n        music_string\
  \ = music_string.toLowerCase();\n        music_string.replaceAll(\"(^| )o(| $)\"\
  , \"\");\n        music_string.replaceAll(\"(^| )o|(| $)\", \"\");\n        music_string.replaceAll(\"\
  (^| )\\.|(| $)\", \"\");\n        music_string.replaceAll(\"(^| )o(| $)\", \"$1\"\
  );\n        music_string.replaceAll(\"(^| )o|(| $)\", \"$1\");\n        music_string.replaceAll(\"\
  (^| )\\.|(| $)\", \"$1\");\n        music_string.replaceAll(\"(^| )o(| $)\", \"\
  $1\");\n        music_string.replaceAll(\"(^| )o|(| $)\", \"$1\");\n        music_string.replaceAll(\"\
  (^| )\\.|(| $)\", \"$1\");\n        music_string.replaceAll(\"(^| )o(| $)\", \"\
  $1\");\n        music_string.replaceAll(\"(^| )o|(| $)\", \"$1\");\n        music_string.replaceAll(\"\
  (^| )\\.|(| $)\", \"$1\");\n        music_string.replaceAll(\"(^| )o(| $)\", \"\
  $1\");\n        music_string.replaceAll(\"(^| )o|(| $)\", \"$1\");\n        music_string.replaceAll(\"\
  (^| )\\.|(| $)\", \"$1\");\n        music_string.replaceAll(\"(^| )o(| $)\", \"\
  $1\");\n        music_string.replaceAll(\"(^| )o|(| $)\", \"$1\");\n        music_string.replaceAll(\"\
  (^| )\\.|(| $)\", \"$1\");\n        music_string.replaceAll(\"(^| )o(| $)\", \"\
  $1\");\n        music_string.replaceAll(\"(^| )o|(| $)\", \"$1\");\n        music_string.replaceAll(\"\
  (^| )\\.|(| $)\", \"$1\");\n        music_string.replaceAll(\"(^| )o(| $)\", \"\
  $1\");\n        music_string.replaceAll(\"(^| )o|(| $)\", \"$1\");\n        music_string.replaceAll(\"\
  (^| )\\.|(| $)\", \"$1\");\n"
- "        ArrayList<Integer> notes = new ArrayList<Integer>();\n        boolean lastNote\
  \ = false;\n        for (int i = 0; i < music_string.length(); i++) {\n        \
  \    char c = music_string.charAt(i);\n            boolean isNote = (c == 'o' ||\
  \ c == 'o|' || c == '.|');\n            if (isNote) {\n                notes.add(lastNote\
  \ ? 4 : 2);\n                lastNote = !lastNote;\n            } else {\n     \
  \           notes.add(1);\n            }\n        }\n        return notes;"
- "        // Use try/catch to check if the input string is a legal music string.\n\
  \        // If input isn't legal, throw an exception.\n        try {\n         \
  \   // Input is legal\n            // Create a Scanner object to read the music\
  \ string input.\n            Scanner scanner = new Scanner(music_string);\n\n  \
  \          // Create a list to hold the beats per each note.\n            ArrayList<Integer>\
  \ notes_beats = new ArrayList<Integer>();\n\n            // Read and process all\
  \ musical symbols until the end.\n            while (scanner.hasNextLine()) {\n\
  \                // Read and process the musical symbol.\n                String\
  \ music_symbol = scanner.nextLine();\n\n                // Process the symbol.\n\
  \                String music_symbol_name = music_symbol.toUpperCase();\n\n    \
  \            // Process all musical symbols except '.|' and '+|'.\n            \
  \    for (int i = 0; i < music_symbol_name.length(); i++) {\n                  \
  \  if (music_symbol_name.charAt(i) == '|') {\n                        notes_beats.add(1);\n\
  \                    } else if (music_symbol_name.charAt(i) == '+') {\n        \
  \                notes_beats.add(-1);\n                    } else if (music_symbol_name.charAt(i)\
  \ == 'o') {\n                        notes_beats.add(4);\n                    }\
  \ else {\n                        // Ignore all other symbols.\n               \
  \     }\n                }\n            }\n\n            // Close the scanner object.\n\
  \            scanner.close();\n\n            // Return the list of beats per each\
  \ note.\n            return notes_beats;\n        }\n        catch (Exception e)\
  \ {\n            // Print exception message and exit.\n            e.printStackTrace();\n\
  \        }\n\n        // Return an empty list.\n        return new ArrayList<Integer>();"
- "        ArrayList<Integer> notes = new ArrayList<Integer>();\n        music_string\
  \ = music_string.toUpperCase();\n        music_string = music_string.replaceAll(\"\
  [^A-Z]\", \" \");\n        String[] parts = music_string.split(\" \");\n       \
  \ for (int i = 0; i < parts.length; ++i) {\n            if (parts[i].length() >\
  \ 1) {\n                String part = parts[i];\n                part = part.trim();\n\
  \                part = part.replaceAll(\"\\\\.\", \"\");\n                part\
  \ = part.replaceAll(\"\\\\|\", \"\");\n                part = part.replaceAll(\"\
  o\", \"0\");\n                part = part.replaceAll(\"o|\", \"1\");\n         \
  \       part = part.replaceAll(\"\\\\.|\", \"2\");\n                part = part.replaceAll(\"\
  \\\\)\", \"\");\n                part = part.replaceAll(\"\\\\(\", \"\");\n    \
  \            part = part.replaceAll(\"\\\\+\", \"\");\n                part = part.replaceAll(\"\
  \\\\*\", \"\");\n                part = part.replaceAll(\"\\\\*|\", \"\");\n   \
  \             part = part.replaceAll(\"\\\\-\", \"\");\n                part = part.replaceAll(\"\
  \\\\-\\\\)\", \"\");\n                part = part.replaceAll(\"\\\\-\\\\(\", \"\"\
  );\n                part = part.replaceAll(\"\\\\-\\\\+\", \"\");\n            \
  \    part = part.replaceAll(\"\\\\-\\\\*\", \"\");\n                part = part.replaceAll(\"\
  \\\\-\\\\*\\\\|\", \"\");\n                part = part.replaceAll(\"\\\\^\", \"\"\
  );\n                part = part.replaceAll(\"\\\\^\\\\)\", \"\");\n            \
  \    part = part.replaceAll(\"\\\\^\\\\(\", \"\");\n                part = part.replaceAll(\"\
  \\\\^\\\\+\", \"\");\n                part = part.replaceAll(\"\\\\^\\\\*\", \"\"\
  );\n                part = part.replaceAll(\"\\\\^\\\\*\\\\|\", \"\");\n       \
  \         part = part.replaceAll(\"\\\\%\", \"\");\n                part = part.replaceAll(\"\
  \\\\%\\\\)\", \"\");\n                part = part.replaceAll(\"\\\\%\\\\(\", \"\"\
  );\n                part = part.replaceAll(\"\\\\%\\\\+\", \"\");\n            \
  \    part = part.replaceAll(\"\\\\%\\\\*\", \"\");\n                part = part.replaceAll(\"\
  \\\\%\\\\*\\\\|\", \"\");\n                part = part.replaceAll(\"\\\\&\", \"\"\
  );\n                part = part.replaceAll(\"\\\\&\\\\)\", \"\");\n            \
  \    part = part.replaceAll(\"\\\\&\\\\(\", \"\");\n                part = part.replaceAll(\"\
  \\\\&\\\\+\", \"\");\n                part = part.replaceAll(\"\\\\&\\\\*\", \"\"\
  );\n                part = part.replaceAll(\"\\\\&\\\\*\\\\|\", \"\");\n       \
  \         part = part.replaceAll(\"\\\\&\\\\^\", \"\");\n                part = "
- "        String notes = music_string;\n        ArrayList<Integer> beats = new ArrayList<Integer>();\n\
  \        String[] notes_arr = notes.split(\" \");\n        for(int i=0;i<notes_arr.length;i++)\
  \ {\n            int beats = 4;\n            char c = notes_arr[i].charAt(0);\n\
  \            if(c=='o'||c=='o|')\n                beats = beats*2;\n           \
  \ else if(notes_arr[i].charAt(0)=='.|')\n                beats = beats*1;\n    \
  \        beats.add(beats);\n        }\n        return beats;"
- "        ArrayList<Integer> beats = new ArrayList<>();\n        // For each character\
  \ in music_string\n        for (char character : music_string.toCharArray()) {\n\
  \            // Check if character is note\n            if (character == 'o' ||\
  \ character == 'o|' || character == '.|') {\n                // If yes, get last\
  \ note and add beat count to beats list\n                String last_note = music_string.substring(0,\
  \ music_string.length() - 1);\n                beats.add(beatCount(last_note));\n\
  \            }\n        }\n        return beats;"
- "        // Your implementation should read music_string one character at a time,\
  \ character by character, and keep\n        // count of how many of each type of\
  \ note is currently playing.\n        // If there is no more input, the function\
  \ should return a list containing 0s.\n        // Your implementation should NOT\
  \ allocate any new memory, and should use the string you pass in\n        // for\
  \ storage."
- "        ArrayList<Integer> music_numbers = new ArrayList<>();\n\n        for (String\
  \ note : music_string.split(\" \")) {\n            String note_name = note.toLowerCase();\n\
  \            int note_count = 0;\n            boolean last_beat = false;\n\n   \
  \         for (int i = 0; i < note_name.length(); i++) {\n                char c\
  \ = note_name.charAt(i);\n                note_count = note_count + 1;\n       \
  \         if (last_beat) {\n                    if (c == 'o') {\n              \
  \          music_numbers.add(note_count);\n                    }\n             \
  \   } else if (c == 'o' || c == '|') {\n                    last_beat = true;\n\
  \                } else if (c != '.') {\n                    last_beat = false;\n\
  \                }\n            }\n        }\n        return music_numbers;"
- '        // Your code here'
- "        // TODO: Implement this function\n        return new ArrayList<>();"
- "        ArrayList<Integer> beats = new ArrayList<>();\n        int note = 0;\n\
  \        int counter = 0;\n        int last_beat = 0;\n        int last_note = 0;\n\
  \        music_string = music_string.trim();\n        if (music_string.contains(\"\
  o\")) {\n            note = Note.O;\n        }\n        else if (music_string.contains(\"\
  .\") && music_string.contains(\"|\")) {\n            note = Note.D;\n        }\n\
  \        else if (music_string.contains(\".\") && !music_string.contains(\"|\"))\
  \ {\n            note = Note.D;\n        }\n        else if (music_string.contains(\"\
  |\")) {\n            note = Note.D;\n        }\n        music_string = music_string.replace(\"\
  o\", \"\");\n        music_string = music_string.replace(\".\", \"\");\n       \
  \ music_string = music_string.replace(\"|\", \"\");\n        int counter = 0;\n\
  \        int last_beat = 0;\n        int last_note = 0;\n        int last_index\
  \ = 0;\n        for (int i = 0; i < music_string.length(); i++) {\n            char\
  \ character = music_string.charAt(i);\n            if (character == 'o') {\n   \
  \             if (last_note == Note.O) {\n                    last_beat++;\n   \
  \             }\n                else {\n                    last_beat = 1;\n  \
  \              }\n                last_note = Note.O;\n                beats.add(last_beat);\n\
  \                last_beat = 0;\n            }\n            else if (character ==\
  \ '.') {\n                if (last_note == Note.D && last_index != i) {\n      \
  \              last_beat++;\n                }\n                else {\n       \
  \             last_beat = 1;\n                }\n                last_note = Note.D;\n\
  \                beats.add(last_beat);\n                last_beat = 0;\n       \
  \     }\n            else if (character == '|') {\n                if (last_note\
  \ == Note.D) {\n                    last_beat++;\n                }\n          \
  \      else {\n                    last_beat = 1;\n                }\n         \
  \       last_note = Note.D;\n                beats.add(last_beat);\n           \
  \     last_beat = 0;\n            }\n            else {\n                last_beat\
  \ = 1;\n                last_note = Note.D;\n            }\n            last_index\
  \ = i;\n        }\n        for (int i = 0; i < beats.size(); i++) {\n          \
  \  beats.get(i) = beats.get(i).intValue();\n        }\n        return beats;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        for (String\
  \ notes: music_string.split(\" \")) {\n            if (notes.equals(\"o\")) {\n\
  \                result.add(4);\n            } else if (notes.equals(\"o|\")) {\n\
  \                result.add(2);\n            } else if (notes.equals(\".|\")) {\n\
  \                result.add(1);\n            } else {\n                throw new\
  \ RuntimeException(\"Can't parse notes\");\n            }\n        }\n        return\
  \ result;"
- "        ArrayList<Integer> beats = new ArrayList<Integer>();\n        for (int\
  \ i = 0; i < music_string.length(); i++) {\n            char letter = music_string.charAt(i);\n\
  \            switch (letter) {\n                case 'o':\n                    beats.add(4);\n\
  \                    break;\n                case 'o|':\n                    beats.add(2);\n\
  \                    break;\n                case '.|':\n                    beats.add(1);\n\
  \                    break;\n                default:\n                    throw\
  \ new RuntimeException(\"Unexpected letter: \" + letter);\n            }\n     \
  \   }\n        return beats;"
- "        ArrayList<Integer> beats = new ArrayList<Integer>();\n        int note,\
  \ last_beat, quarter, whole_note;\n        for (char letter : music_string.toCharArray())\
  \ {\n            note = Character.getNumericValue(letter);\n            switch (letter)\
  \ {\n                case 'o':\n                    last_beat = 4;\n           \
  \         quarter = 0;\n                    whole_note = 0;\n                  \
  \  break;\n                case 'o|':\n                    last_beat = 2;\n    \
  \                quarter = 1;\n                    whole_note = 0;\n           \
  \         break;\n                case '.|':\n                    last_beat = 1;\n\
  \                    quarter = 1;\n                    whole_note = 1;\n       \
  \             break;\n                default:\n                    last_beat =\
  \ 1;\n                    quarter = 0;\n                    whole_note = 0;\n  \
  \                  break;\n            }\n            beats.add(last_beat * 4 +\
  \ quarter * 2 + whole_note);\n        }\n        return beats;"
- "        ArrayList<Integer> music_notes = new ArrayList<>();\n        music_notes.clear();\n\
  \        int beat = 1;\n        int note = 0;\n        for (int i = 0; i < music_string.length();\
  \ i++) {\n            char symbol = music_string.charAt(i);\n            switch\
  \ (symbol) {\n                case 'o':\n                    music_notes.add(note);\n\
  \                    beat = 1;\n                    note++;\n                  \
  \  break;\n                case '|':\n                    music_notes.add(note);\n\
  \                    beat = 2;\n                    note++;\n                  \
  \  break;\n                case '.':\n                    music_notes.add(note);\n\
  \                    beat = 1;\n                    note++;\n                  \
  \  break;\n                default:\n                    break;\n            }\n\
  \        }\n        return music_notes;"
- "        // Your code goes here\n        String notes = music_string;\n        char\
  \ note;\n        int counter = 0;\n        ArrayList<Integer> list = new ArrayList<Integer>();\n\
  \        for(int i = 0; i<notes.length();i++){\n            note = notes.charAt(i);\n\
  \            if(note!='.') {\n                if(note=='|') {\n                \
  \    list.add(counter);\n                    counter = 0;\n                }\n \
  \               counter+=1;\n            }\n            else{\n                counter+=1;\n\
  \            }\n        }\n        list.add(counter);\n        return list;"
- "        ArrayList<Integer> note_list = new ArrayList<>();\n        int last_beat\
  \ = 0;\n        note_list.add(4);\n        note_list.add(4);\n        note_list.add(4);\n\
  \        note_list.add(4);\n        note_list.add(4);\n        note_list.add(4);\n\
  \        note_list.add(4);\n        note_list.add(4);\n        note_list.add(4);\n\
  \        note_list.add(4);\n        note_list.add(4);\n        note_list.add(4);\n\
  \        note_list.add(4);\n        note_list.add(4);\n        note_list.add(4);\n\
  \        note_list.add(4);\n        note_list.add(4);\n        note_list.add(4);\n\
  \        note_list.add(4);\n        note_list.add(4);\n        note_list.add(4);\n\
  \        note_list.add(4);\n        note_list.add(4);\n        note_list.add(4);\n\
  \        note_list.add(4);\n        note_list.add(4);\n        note_list.add(4);\n\
  \        note_list.add(4);\n        note_list.add(4);\n        note_list.add(4);\n\
  \        note_list.add(4);\n        note_list.add(4);\n        note_list.add(4);\n\
  \        note_list.add(4);\n        note_list.add(4);\n        note_list.add(4);\n\
  \        note_list.add(4);\n        note_list.add(4);\n        note_list.add(4);\n\
  \        note_list.add(4);\n        note_list.add(4);\n        note_list.add(4);\n\
  \        note_list.add(4);\n        note_list.add(4);\n        note_list.add(4);\n\
  \        note_list.add(4);\n        note_list.add(4);\n        note_list.add(4);\n\
  \        note_list.add(4);\n        note_list.add(4);\n        note_list.add(4);\n\
  \        note_list.add(4);\n        note_list.add(4);\n        note_list.add(4);\n\
  \        note_list.add(4);\n        note_list.add(4);\n        note_list.add(4);\n\
  \        note_list.add(4);\n        note_list.add(4);\n        note_list.add(4);\n\
  \        note_list.add(4);\n        note_list.add(4);\n        note_list.add(4);\n\
  \        note_list.add(4);\n        note_list.add(4);\n        note_list.add(4);\n\
  \        note_list.add(4);\n        note_list.add(4);\n        note_list.add(4);\n\
  \        note_list.add(4);\n        note_list.add(4);\n        note_list.add(4);\n\
  \        note_list.add(4);\n        note_list.add(4);\n        note_list.add(4);\n\
  \        note_list.add(4);\n        note_list.add(4);\n        note_list.add(4);\n\
  \        note_list.add(4);\n        note_list.add(4);\n        note_list.add(4);\n\
  \        note_list.add(4);\n        note_list.add(4);"
- "        ArrayList<Integer> beats = new ArrayList<Integer>();\n        String note\
  \ = \"\";\n        int beats_parsed = 0;\n        for (int i = 0; i < music_string.length();\
  \ i++) {\n            char c = music_string.charAt(i);\n            String next\
  \ = c.toString();\n            if (next.equals(\"o\") || next.equals(\"o|\")) {\n\
  \                // Whole note\n                note = next;\n                beats_parsed\
  \ = 0;\n                beats.add(beats_parsed);\n            } else if (next.equals(\"\
  .\") || next.equals(\".|\")) {\n                // Whole note\n                note\
  \ = next;\n                beats_parsed = 0;\n                beats.add(beats_parsed);\n\
  \            } else if (note.length() > 0) {\n                // Note name\n   \
  \             beats_parsed += 4;\n                beats.add(beats_parsed);\n   \
  \             note = \"\";\n            } else if (next.length() > 0) {\n      \
  \          // Beats parsed\n                beats_parsed += next.length();\n   \
  \             beats.add(beats_parsed);\n            }\n        }\n        return\
  \ beats;"
- "        ArrayList<Integer> notes = new ArrayList<Integer>();\n        char note\
  \ = ' ';\n        int beats = 1;\n        for (int i = 0; i < music_string.length();\
  \ i++) {\n            note = music_string.charAt(i);\n            if (note == 'o')\
  \ {\n                if (beats != 4) {\n                    notes.add(beats);\n\
  \                }\n                beats = 1;\n            } else {\n         \
  \       if (note == '.') {\n                    notes.add(beats);\n            \
  \        beats = 1;\n                } else {\n                    if (note == '|')\
  \ {\n                        notes.add(beats);\n                        beats =\
  \ 1;\n                    } else {\n                        beats++;\n         \
  \           }\n                }\n            }\n        }\n        if (beats !=\
  \ 1) {\n            notes.add(beats);\n        }\n        return notes;"
- "        ArrayList<Integer> notes = new ArrayList<>();\n        ArrayList<String>\
  \ note_strings = new ArrayList<>();\n        StringBuilder music_buffer = new StringBuilder();\n\
  \        String[] tokens = music_string.split(\" \");\n        for (String token\
  \ : tokens) {\n            if (token.equals(\"o\")) {\n                note_strings.add(music_buffer.toString());\n\
  \                music_buffer.delete(0, music_buffer.length());\n            } else\
  \ {\n                music_buffer.append(token).append(\" \");\n            }\n\
  \        }\n        music_buffer.delete(0, music_buffer.length());\n        note_strings.add(music_buffer.toString());\n\
  \        music_buffer.delete(0, music_buffer.length());\n        for (String note\
  \ : note_strings) {\n            String[] note_tokens = note.split(\" \");\n   \
  \         int times = 4;\n            notes.add(times); // the note is lasts 4 beats\n\
  \            int current_beat = 1;\n            for (String token : note_tokens)\
  \ {\n                if (token.equals(\"|\")) {\n                    notes.add((times\
  \ * current_beat)); // the note is lasts two beats\n                    current_beat\
  \ += 1;\n                } else if (token.equals(\".\") || token.equals(\"o\"))\
  \ {\n                    notes.add((times * current_beat)); // the note is lasts\
  \ one beat\n                    current_beat += 1;\n                }\n        \
  \    }\n        }\n        return notes;"
- "        // Your code goes here\n        \n        ArrayList<Integer> music_notes\
  \ = new ArrayList<Integer>();\n        int note_index = 0;\n        \n        while(note_index\
  \ < music_string.length()) {\n            String note = music_string.substring(note_index).trim();\n\
  \            String note_delimiter = note.substring(0,1);\n            String note_string\
  \ = note.substring(1).trim();\n            int note_delimiter_int = note_delimiter.charAt(0);\n\
  \            int note_int = Integer.parseInt(note_string);\n            \n     \
  \       if(note_int%4 == note_delimiter_int) {\n                music_notes.add(note_index);\n\
  \                note_index+=4;\n            }\n            else if(note_int%2 ==\
  \ note_delimiter_int) {\n                music_notes.add(note_index);\n        \
  \        note_index+=2;\n            }\n            else {\n                music_notes.add(note_index);\n\
  \                note_index+=1;\n            }\n        }\n        return music_notes;"
- "        music_string  = music_string.replaceAll(\"\\\\s\", \"\");\n        music_string\
  \ = music_string.toLowerCase();\n        music_string = music_string.replaceAll(\"\
  o\", \"0\");\n        music_string = music_string.replaceAll(\"o|\", \"1\");\n \
  \       music_string = music_string.replaceAll(\".|\", \"2\");\n        music_string\
  \ = music_string.replaceAll(\"o|\", \"1\");\n        music_string = music_string.replaceAll(\"\
  .|\", \"2\");\n        music_string = music_string.replaceAll(\".|\", \"2\");\n\
  \        music_string = music_string.replaceAll(\".|\", \"2\");\n        music_string\
  \ = music_string.replaceAll(\".|\", \"2\");\n        music_string = music_string.replaceAll(\"\
  .|\", \"2\");\n        music_string = music_string.replaceAll(\".|\", \"2\");\n\
  \        music_string = music_string.replaceAll(\".|\", \"2\");\n        music_string\
  \ = music_string.replaceAll(\".|\", \"2\");\n        music_string = music_string.replaceAll(\"\
  .|\", \"2\");\n        music_string = music_string.replaceAll(\".|\", \"2\");\n\
  \        music_string = music_string.replaceAll(\".|\", \"2\");\n        music_string\
  \ = music_string.replaceAll(\".|\", \"2\");\n        music_string = music_string.replaceAll(\"\
  .|\", \"2\");\n        music_string = music_string.replaceAll(\".|\", \"2\");\n\
  \        music_string = music_string.replaceAll(\".|\", \"2\");\n        music_string\
  \ = music_string.replaceAll(\".|\", \"2\");\n        music_string = music_string.replaceAll(\"\
  .|\", \"2\");\n        music_string = music_string.replaceAll(\".|\", \"2\");\n\
  \        music_string = music_string.replaceAll(\".|\", \"2\");\n        music_string\
  \ = music_string.replaceAll(\".|\", \"2\");\n        music_string = music_string.replaceAll(\"\
  .|\", \"2\");\n        music_string = music_string.replaceAll(\".|\", \"2\");\n\
  \        music_string = music_string.replaceAll(\".|\", \"2\");\n        music_string\
  \ = music_string.replaceAll(\".|\", \"2\");\n        music_string = music_string.replaceAll(\"\
  .|\", \"2\");\n        music_string = music_string.replaceAll(\".|\", \"2\");\n\
  \        music_string = music_string.replaceAll(\".|\", \"2\");\n        music_string\
  \ = music_string.replaceAll(\".|\", \"2\");\n        music_string = music_"
- "        ArrayList<Integer> beats = new ArrayList<Integer>();\n        for (String\
  \ note : music_string.split(\"\\\\|\")) {\n            if (note.equals(\".\"))\n\
  \                beats.add(0);\n            else if (note.equals(\"o\")) {\n   \
  \             beats.add(4);\n            }\n            else if (note.equals(\"\
  o|\")) {\n                beats.add(2);\n            }\n            else {\n   \
  \             int lastbeat = note.lastIndexOf('o');\n                for (int beat\
  \ = lastbeat; beat >= 0; beat--) {\n                    if (note.charAt(beat) ==\
  \ '|')\n                        beats.add(1);\n                    else\n      \
  \                  break;\n                }\n            }\n        }\n       \
  \ return beats;"
- "        // Complete this function\n        return null;"
- "        return music_string.chars()\n                            .mapToObj(c ->\
  \ (c == '.' ? 1 : c == 'o' ? 4 : c == 'o|' ? 2 : 0))\n                         \
  \   .collect(Collectors.toCollection(ArrayList::new));"
- "        ArrayList<Integer> beats = new ArrayList<>();\n        music_string = music_string.toLowerCase();\n\
  \        // Step one: separate note from rest\n        music_string = music_string.replaceAll(\"\
  (\\\\b\\\\d+?)\\\\b\", \"$1\");\n        String rest = music_string.replaceAll(\"\
  ^\\\\D+\", \"\");\n        int rest_beats = rest.length() / 4; // We assume rest's\
  \ length is divisible by 4\n        // Step two: separate notes from rest\n    \
  \    music_string = music_string.replaceAll(\"(\\\\b\\\\d+?)\\\\b\", \"$1\");\n\
  \        String[] notes = music_string.split(\" \"); // Split note by space\n  \
  \      // Step three: parse rest\n        int note_count = 0; // Count how many\
  \ notes we have\n        for (int i = 0; i < notes.length; i++) {\n            if\
  \ (notes[i].equals(\"o\")) {\n                beat_count = 1;\n                note_count++;\n\
  \            }\n            if (notes[i].equals(\"o|\")) {\n                beat_count\
  \ = 2;\n                note_count++;\n            }\n            if (notes[i].equals(\"\
  .|\")) {\n                beat_count = 1;\n                note_count++;\n     \
  \       }\n            if (notes[i].equals(\".|\")) {\n                beat_count\
  \ = 2;\n                note_count++;\n            }\n            if (notes[i].equals(\"\
  .|\")) {\n                beat_count = 4;\n                note_count++;\n     \
  \       }\n        }\n        // Step four: construct beat sequence\n        StringBuilder\
  \ notes_beats = new StringBuilder();\n        for (int i = 0; i < note_count; i++)\
  \ {\n            if (i == 0) {\n                notes_beats.append(notes[i]).append(\"\
  \ \");\n            } else {\n                notes_beats.append(notes[i]).append(\"\
  \ \");\n            }\n            beat_count -= 1;\n        }\n        if (beat_count\
  \ > 0) {\n            notes_beats.append(rest).append(\" \");\n        }\n     \
  \   beat_count = rest_beats + beat_count;\n        beat_count++;\n        // Step\
  \ five: parse notes and beats sequence\n        String[] notes_beats_arr = notes_beats.toString().split(\"\
  \ \");\n        ArrayList<Integer> current_beats = new ArrayList<>();\n        for\
  \ (int i = 0; i < notes_beats_arr.length; i++) {\n            if (notes_beats_arr[i].equals(\"\
  o\")) {\n                current_beats.add(4);\n                note_count--;\n\
  \            } else {\n                current_beats.add(Integer.valueOf(notes_beats_arr[i]));\n\
  \            }\n        }\n        ArrayList<Integer> current_notes = new ArrayList<>();\n\
  \        for (int i = 0; i < notes_beats_arr.length; i++) {\n            if (notes_beats_arr[i].equals(\"\
  o|\")) {\n                current_notes.add(2);\n                note_count--;\n\
  \            } else {\n                current_notes.add(Integer.valueOf(notes_beats_arr[i]));\n"
- "        music_string = (music_string.toLowerCase()\n                .replaceAll(\"\
  \\\\o\\\\|\\\\.\\\\|\", \"\"));\n        int result[] = new int[music_string.length()];\n\
  \        int notes = music_string.length();\n        int beats = 4;\n        for(int\
  \ i = 0; i < notes; i++) {\n            String s = music_string.substring(i, i +\
  \ 1);\n            if (s.equals(\"o\")) {\n                result[i] = beats;\n\
  \                beats /= 2;\n            } else if (s.equals(\"|\")) {\n      \
  \          result[i] = beats;\n                beats /= 2;\n            } else {\n\
  \                result[i] = beats;\n                beats *= 2;\n            }\n\
  \        }\n        return new ArrayList<>(Arrays.asList(result));"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        ArrayList<String>\
  \ notes = music_string.split(\"\\\\s*\");\n        for (int i = 0; i < notes.size();\
  \ i++) {\n            if (i % 2 == 0) {\n                if (notes.get(i).equals(\"\
  o\")) {\n                    result.add(notes.get(i).length());\n              \
  \  } else {\n                    result.add(1);\n                }\n           \
  \ } else {\n                if (notes.get(i).equals(\"o\")) {\n                \
  \    result.add(notes.get(i).length());\n                } else {\n            \
  \        result.add(notes.get(i).length() / 2);\n                }\n           \
  \ }\n        }\n        return result;"
- "        ArrayList<Integer> beats = new ArrayList<Integer>();\n        char musicChar\
  \ = music_string.charAt(0);\n        musicChar = (musicChar == '.') ? '|' : musicChar;\n\
  \        musicChar = (musicChar == '|') ? 'o' : musicChar;\n        musicChar =\
  \ (musicChar == 'o') ? 'o' : musicChar;\n        musicChar = (musicChar == '#')\
  \ ? '.' : musicChar;\n\n        for (char musicChar2 = music_string.charAt(1); musicChar2\
  \ != ' '; musicChar2 = music_string.charAt(1)) {\n            musicChar2 = (musicChar2\
  \ == '.') ? '|' : musicChar2;\n            musicChar2 = (musicChar2 == '|') ? 'o'\
  \ : musicChar2;\n            musicChar2 = (musicChar2 == 'o') ? 'o' : musicChar2;\n\
  \            musicChar2 = (musicChar2 == '#') ? '.' : musicChar2;\n            musicChar\
  \ = (musicChar == '.') ? '|' : musicChar;\n            musicChar = (musicChar ==\
  \ '|') ? 'o' : musicChar;\n            musicChar = (musicChar == 'o') ? 'o' : musicChar;\n\
  \            musicChar = (musicChar == '#') ? '.' : musicChar;\n\n            if\
  \ (musicChar == 'o') {\n                beats.add(4);\n            } else if (musicChar\
  \ == '|') {\n                beats.add(2);\n            } else if (musicChar ==\
  \ '.') {\n                beats.add(1);\n            } else if (musicChar == 'o')\
  \ {\n                beats.add(1);\n            }\n        }\n\n        return beats;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        music_string=music_string.toUpperCase();\n\
  \        music_string=music_string.trim();\n        int counter = 0;\n        int\
  \ i = 0;\n        boolean is_note_first = false;\n        boolean is_note_second\
  \ = false;\n        boolean is_note_third = false;\n        boolean is_note_fourth\
  \ = false;\n        while ( i < music_string.length() ) {\n            if ( music_string.charAt(i)\
  \ == '|' ) {\n                i++;\n                result.add(1);\n           \
  \     counter++;\n            }\n            if ( music_string.charAt(i) == 'o'\
  \ ) {\n                result.add(4);\n                counter++;\n            }\n\
  \            if ( music_string.charAt(i) == '|' ) {\n                i++;\n    \
  \            result.add(1);\n                counter++;\n            }\n       \
  \     if ( music_string.charAt(i) == '.' ) {\n                i++;\n           \
  \     result.add(1);\n                counter++;\n            }\n            if\
  \ ( music_string.charAt(i) == '|' ) {\n                i++;\n                result.add(1);\n\
  \                counter++;\n            }\n            if ( music_string.charAt(i)\
  \ == 'o' ) {\n                result.add(4);\n                counter++;\n     \
  \       }\n            if ( music_string.charAt(i) == '|' ) {\n                i++;\n\
  \                result.add(1);\n                counter++;\n            }\n   \
  \         if ( music_string.charAt(i) == '.' ) {\n                i++;\n       \
  \         result.add(1);\n                counter++;\n            }\n          \
  \  if ( music_string.charAt(i) == '|' ) {\n                i++;\n              \
  \  result.add(1);\n                counter++;\n            }\n            if ( music_string.charAt(i)\
  \ == 'o' ) {\n                result.add(4);\n                counter++;\n     \
  \       }\n            if ( music_string.charAt(i) == '.' ) {\n                i++;\n\
  \                result.add(1);\n                counter++;\n            }\n   \
  \         if ( music_string.charAt(i) == '.' ) {\n                result.add(1);\n\
  \                counter++;\n            }\n            if ( music_string.charAt(i)\
  \ == '.' ) {\n                result.add(1);\n                counter++;\n     \
  \       }\n            if ( music_string.charAt(i) == '.' ) {\n                result.add(1);\n\
  \                counter++;\n            }\n            if ( music_string.charAt(i)\
  \ == '.' ) {\n                result.add(1);\n                counter++;\n     \
  \       }\n            if ( music_string.charAt(i) == 'o' ) {\n                result.add(4);\n\
  \                counter++;\n            }\n            if ( music_string.charAt(i)\
  \ == '.' ) {\n                result.add(1);\n                counter++;\n     \
  \       }\n            if ( music_string.charAt(i) == '|' ) {"
- "        ArrayList<Integer> list = new ArrayList<>();\n        for (char c : music_string.toCharArray())\
  \ {\n            String note = Character.toString(c);\n            if (note.length()\
  \ == 1) {\n                list.add(1);\n            } else if (note.charAt(0) ==\
  \ '.') {\n                list.add(2);\n            } else if (note.charAt(0) ==\
  \ 'o') {\n                list.add(4);\n            } else if (note.charAt(0) ==\
  \ '|') {\n                list.add(2);\n            } else if (note.charAt(0) ==\
  \ '\\\\') {\n                list.add(1);\n            }\n        }\n        return\
  \ list;"
- "        ArrayList<Integer> beats = new ArrayList<>();\n\n        music_string =\
  \ music_string.trim();\n\n        String[] splitted = music_string.split(\"\\\\\
  |\");\n\n        // remove empty strings\n        splitted = splitted.filter(item\
  \ -> item.length() > 0);\n\n        // split music in 4 parts according to |\n \
  \       for (int i = 0; i < splitted.length; i++) {\n            // check if we\
  \ already added beats, because we found | but we didn't found a beat\n         \
  \   if (splitted[i].equals(\".\")) {\n                beats.add(4);\n          \
  \  } else if (splitted[i].equals(\"o\")) {\n                beats.add(1);\n    \
  \        } else if (splitted[i].equals(\"o|\")) {\n                beats.add(2);\n\
  \            } else {\n                throw new Exception(\"Music string is not\
  \ valid.\");\n            }\n        }\n\n        return beats;"
- "        ArrayList<Integer> notes = new ArrayList<Integer>();\n        String[]\
  \ notes = music_string.split(\"(?!^)\");\n        for (String note : notes) {\n\
  \            int note_in_music = parseNote(note);\n            notes.add(note_in_music);\n\
  \        }\n        return notes;"
- "        ArrayList<Integer> output = new ArrayList<Integer>();\n        // Initialize\
  \ variables.\n        StringBuilder output_builder = new StringBuilder();\n    \
  \    char note;\n        int note_length = 0;\n        int beats = 0;\n        int\
  \ beat_length = 0;\n        int current_beat = 0;\n\n        // Iterate over music\
  \ string.\n        for (int i = 0; i < music_string.length(); i++) {\n         \
  \   note = music_string.charAt(i);\n            note_length = 1;\n            if\
  \ (note == '.') {\n                output.add(current_beat);\n                current_beat\
  \ = 0;\n            } else if (note == 'o') {\n                current_beat += 4;\n\
  \            } else if (note == 'o|') {\n                current_beat += 2;\n  \
  \          } else if (note == '|') {\n                beats++;\n            } else\
  \ {\n                throw new IllegalArgumentException(\"Input music string is\
  \ not valid: \" + music_string);\n            }\n            output_builder.append(note);\n\
  \        }\n        if (current_beat > 0) {\n            output.add(current_beat);\n\
  \        }\n        if (beats > 0) {\n            output.add(beats);\n        }\n\
  \        return output;"
- "        if (music_string == null || music_string.trim().isEmpty()) {\n        \
  \    return new ArrayList<Integer>();\n        }\n\n        music_string = \"o o|\
  \ .| o| o| .| .| .| .| .| o o\".trim();\n\n        // The only special symbols we\
  \ care about are '.' and 'o'.\n        // And we want to know how many beats each\
  \ note lasts.\n        ArrayList<Integer> beats = new ArrayList<Integer>();\n  \
  \      music_string = music_string.replace(\"o\", \"001\").replace(\"o|\", \"002\"\
  ).replace(\".|\", \"003\").replace(\"o\", \"004\").replace(\"o|\", \"005\").replace(\"\
  .|\", \"006\").replace(\"o\", \"007\").replace(\"o|\", \"008\").replace(\".|\",\
  \ \"009\").replace(\"o\", \"010\").replace(\"o|\", \"011\").replace(\".|\", \"012\"\
  ).replace(\"o\", \"013\").replace(\"o|\", \"014\").replace(\".|\", \"015\").replace(\"\
  o\", \"016\").replace(\"o|\", \"017\").replace(\".|\", \"018\").replace(\"o\", \"\
  019\").replace(\"o|\", \"020\").replace(\".|\", \"021\").replace(\"o\", \"022\"\
  ).replace(\"o|\", \"023\").replace(\".|\", \"024\").replace(\"o\", \"025\").replace(\"\
  o|\", \"026\").replace(\".|\", \"027\").replace(\"o\", \"028\").replace(\"o|\",\
  \ \"029\").replace(\".|\", \"030\").replace(\"o\", \"031\").replace(\"o|\", \"032\"\
  ).replace(\".|\", \"033\").replace(\"o\", \"034\").replace(\"o|\", \"035\").replace(\"\
  .|\", \"036\").replace(\"o\", \"037\").replace(\"o|\", \"038\").replace(\".|\",\
  \ \"039\").replace(\"o\", \"040\").replace(\"o|\", \"041\").replace(\".|\", \"042\"\
  ).replace(\"o\", \"043\").replace(\"o|\", \"044\").replace(\".|\", \"045\").replace(\"\
  o\", \"046\").replace(\"o|\", \"047\").replace(\".|\", \"048\").replace(\"o\", \"\
  049\").replace(\"o|\", \"050\").replace(\".|\", \"051\").replace(\"o\", \"052\"\
  ).replace(\"o|\", \"053\").replace(\".|\", \"054\").replace(\"o\", \"055\").replace(\"\
  o|\", \"056\").replace(\".|\", \"057\").replace(\"o\", \"058\").replace(\"o|\",\
  \ \"059\").replace(\".|\", \"060\").replace(\"o\", \"061\").replace(\"o|\", \"062\"\
  ).replace(\".|\", \"063\").replace(\"o\", \"064\").replace(\"o|\", \"065\").replace(\"\
  ."
- "        ArrayList<Integer> beats = new ArrayList<Integer>();\n        int current_beat\
  \ = 0;\n        boolean note_end = false;\n        for (int i = 0; i < music_string.length();\
  \ i++) {\n            String str = music_string.substring(i, i + 1);\n         \
  \   if (str.equals(\"o\") || str.equals(\"o|\") || str.equals(\".|\")) {\n     \
  \           note_end = true;\n                beats.add(current_beat);\n       \
  \         current_beat = 0;\n                continue;\n            }\n        \
  \    if (str.equals(\"..\") || str.equals(\"...\")) {\n                note_end\
  \ = false;\n                beats.add(current_beat);\n                current_beat\
  \ = 0;\n                continue;\n            }\n            if (note_end) {\n\
  \                current_beat += 1;\n            }\n        }\n        beats.add(current_beat);\n\
  \        return beats;"
- "        ArrayList<Integer> beats = new ArrayList<>();\n\n        int note;\n  \
  \      char next_note;\n        int note_duration;\n        char next_note_duration;\n\
  \        for (int i = 0; i < music_string.length(); i++) {\n            note = music_string.charAt(i);\n\
  \            next_note = music_string.charAt(i + 1);\n            note_duration\
  \ = next_note == '|' ? 2 : 1;\n            next_note_duration = next_note == 'o'\
  \ ? 4 : 2;\n\n            i += note_duration;\n            while (i < music_string.length()\
  \ && music_string.charAt(i) != '.') {\n                beats.add(note);\n      \
  \          i++;\n            }\n            i += next_note_duration;\n        }\n\
  \        return beats;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        music_string\
  \ = music_string.trim();\n\n        // Use StringTokenizer to split string into\
  \ chunks\n        StringTokenizer token = new StringTokenizer(music_string, \"|\
  \ .\");\n        // Count notes in each chunk\n        while (token.hasMoreTokens())\
  \ {\n            String note = token.nextToken();\n            if (note.equals(\"\
  o\")) {\n                // Whole note\n                result.add(4);\n       \
  \     } else if (note.equals(\"o|\")) {\n                // Half note\n        \
  \        result.add(2);\n            } else if (note.equals(\".|\")) {\n       \
  \         // Quarter note\n                result.add(1);\n            } else {\n\
  \                throw new IllegalArgumentException(\"Invalid musical note \" +\
  \ note);\n            }\n        }\n        return result;"
- "        ArrayList<Integer> beats = new ArrayList<Integer>();\n        // Initialize\
  \ note counter that will be used to determine when to stop.\n        int note_counter\
  \ = 0;\n        // Iterate through every symbol in the music string.\n        for\
  \ (char symbol : music_string.toCharArray()) {\n            // If this is a symbol\
  \ we care about, add one beat.\n            if (symbol == 'o' || symbol == 'o|'\
  \ || symbol == '.|') {\n                beats.add(note_counter);\n             \
  \   // Increment note counter by 1.\n                note_counter++;\n         \
  \   }\n        }\n        // Return list of beats.\n        return beats;"
- "        ArrayList<Integer> results = new ArrayList<Integer>();\n\n        music_string\
  \ = music_string.replaceAll(\"o\", \"o|\");\n        music_string = music_string.replaceAll(\"\
  o|\", \"o|o|\");\n        music_string = music_string.replaceAll(\".|\", \"o|o|o|o|\"\
  );\n\n        music_string = music_string.replaceAll(\"o|o|o|o|\", \"o|o|o|\");\n\
  \n        music_string = music_string.replaceAll(\"o|o|o|\", \"o|o|o|o|o|\");\n\n\
  \        music_string = music_string.replaceAll(\"o|o|\", \"o|o|o|o|o|o|\");\n\n\
  \        music_string = music_string.replaceAll(\"o|o\", \"o|o|o|o|o|o|o|\");\n\n\
  \        music_string = music_string.replaceAll(\"o|o\", \"o|o|o|o|o|o|o|o|\");\n\
  \n        music_string = music_string.replaceAll(\"o|\", \"o|o|o|o|o|o|o|o|\");\n\
  \n        music_string = music_string.replaceAll(\"o|\", \"o|o|o|o|o|o|o|o|o|\"\
  );\n\n        music_string = music_string.replaceAll(\"o|\", \"o|o|o|o|o|o|o|o|o|o|\"\
  );\n\n        music_string = music_string.replaceAll(\"o|\", \"o|o|o|o|o|o|o|o|o|o|o|\"\
  );\n\n        music_string = music_string.replaceAll(\"o|\", \"o|o|o|o|o|o|o|o|o|o|o|o|\"\
  );\n\n        music_string = music_string.replaceAll(\"o|\", \"o|o|o|o|o|o|o|o|o|o|o|o|o|\"\
  );\n\n        music_string = music_string.replaceAll(\"o|\", \"o|o|o|o|o|o|o|o|o|o|o|o|o|o|o|\"\
  );\n\n        music_string = music_string.replaceAll(\"o|\", \"o|o|o|o|o|o|o|o|o|o|o|o|"
- "        // your code goes here\n        int beats_array[] = new int[128];\n   \
  \     int beats_array[128];\n        String current_note = music_string;\n     \
  \   ArrayList<Integer> beats = new ArrayList<Integer>();\n        Scanner s = new\
  \ Scanner(music_string);\n        while (s.hasNext()) {\n            String n =\
  \ s.next();\n            int i = n.charAt(0);\n            if (i >= 0 && i <= 127\
  \ && beats_array[i] > 0) {\n                beats_array[i] -= 1;\n             \
  \   beats.add(beats_array[i]);\n            }\n        }\n        return beats;"
- "        ArrayList<Integer> beats = new ArrayList<Integer>();\n        String[]\
  \ notes = music_string.split(\" \");\n\n        for(int i = 0; i < notes.length;\
  \ i++) {\n            String note = notes[i];\n            if(note.length() == 2)\
  \ {\n                beats.add(4);\n                beats.add(1);\n            }\
  \ else if(note.length() == 4) {\n                beats.add(2);\n               \
  \ beats.add(1);\n            } else if(note.length() == 6) {\n                beats.add(1);\n\
  \                beats.add(1);\n            } else {\n                beats.add(1);\n\
  \                beats.add(1);\n                beats.add(1);\n            }\n \
  \       }\n        return beats;"
- "        // Parse music_string and get note and octave of each note.\n        ArrayList<Integer>\
  \ parsed_notes = new ArrayList<>();\n        String notes = music_string;\n    \
  \    notes = notes.replace(\"o\", \"\").replace(\"|\", \"\");\n        String[]\
  \ notes_split = notes.split(\" \");\n\n        for(String note : notes_split) {\n\
  \            int note_in_octave = note.charAt(0)-'0';\n            int note_in_note\
  \ = note.charAt(1)-'0';\n\n            // For each note, find out it's note length\
  \ and add it to parsed_notes.\n            parsed_notes.add(note_in_note);\n   \
  \     }\n\n        return parsed_notes;"
- "        ArrayList<Integer> notes = new ArrayList<>();\n        String[] notes_array\
  \ = music_string.split(\" \");\n        for (int i = 0; i < notes_array.length;\
  \ i++) {\n            notes.add(Integer.parseInt(notes_array[i]));\n        }\n\
  \        Arrays.sort(notes);\n        return notes;"
- "        ArrayList<Integer> beats = new ArrayList<Integer>();\n        music_string\
  \ = music_string.toLowerCase();\n        int note_position = 0;\n        boolean\
  \ note_last = true;\n\n        while (note_position < music_string.length()) {\n\
  \            char c = music_string.charAt(note_position);\n\n            if (note_last)\
  \ {\n                beats.add(note_position);\n                note_last = false;\n\
  \            }\n\n            if (c == '.' || c == 'o') {\n                note_last\
  \ = true;\n                note_position++;\n            } else if (c == '|') {\n\
  \                beats.add(note_position - 1);\n                note_position++;\n\
  \            } else if (c != '.') {\n                note_last = false;\n      \
  \          note_position++;\n            }\n        }\n\n        return beats;"
- "        ArrayList<Integer> music_notes = new ArrayList<>();\n        music_string.toLowerCase().replace('|',\
  \ '||');\n        music_string.toLowerCase().replace('o|', '|');\n        music_string.toLowerCase().replace('o',\
  \ '|');\n        music_string.toLowerCase().replace('|', '||');\n        music_string.toLowerCase().replace('o|',\
  \ '|');\n        music_string.toLowerCase().replace('o', '|');\n        music_string.toLowerCase().replace('|',\
  \ '||');\n        music_string.toLowerCase().replace('o|', '|');\n        music_string.toLowerCase().replace('o',\
  \ '|');\n        music_string.toLowerCase().replace('|', '||');\n        music_string.toLowerCase().replace('o|',\
  \ '|');\n        music_string.toLowerCase().replace('o', '|');\n        music_string.toLowerCase().replace('|',\
  \ '||');\n        music_string.toLowerCase().replace('o|', '|');\n        music_string.toLowerCase().replace('o',\
  \ '|');\n        music_string.toLowerCase().replace('|', '||');\n        music_string.toLowerCase().replace('o|',\
  \ '|');\n        music_string.toLowerCase().replace('o', '|');\n        music_string.toLowerCase().replace('|',\
  \ '||');\n        music_string.toLowerCase().replace('o|', '|');\n        music_string.toLowerCase().replace('o',\
  \ '|');\n        music_string.toLowerCase().replace('|', '||');\n        music_string.toLowerCase().replace('o|',\
  \ '|');\n        music_string.toLowerCase().replace('o', '|');\n        music_string.toLowerCase().replace('|',\
  \ '||');\n        music_string.toLowerCase().replace('o|', '|');\n        music_string.toLowerCase().replace('o',\
  \ '|');\n        music_string.toLowerCase().replace('|', '||');\n        music_string.toLowerCase().replace('o|',\
  \ '|');\n        music_string.toLowerCase().replace('o', '|');\n        music_string.toLowerCase().replace('|',\
  \ '||');\n        music_string.toLowerCase().replace('o|', '|');\n        music_string.toLowerCase().replace('o',\
  \ '|');\n        music_string.toLowerCase().replace('|', '||');\n        music_string.toLowerCase().replace('o|',\
  \ '|');\n        music_string.toLowerCase().replace('o', '|');\n        music_string.toLowerCase().replace('|',\
  \ '||');\n        music_string.toLowerCase().replace('o|', '|');\n        music_string.toLowerCase().replace('o',\
  \ '|');\n        music_string.toLowerCase().replace('"
- "        ArrayList<Integer> beats = new ArrayList<Integer>();\n        int note\
  \ = 0;\n        int index = 0;\n        int n = 0;\n        boolean is_octave =\
  \ false;\n        while ((index < music_string.length()) && (music_string.charAt(index)\
  \ == '|')) {\n            note = (note << 1) + 1;\n            index++;\n      \
  \  }\n        int octave = 0;\n        if (note != 0) {\n            is_octave =\
  \ true;\n            while (index < music_string.length()) {\n                note\
  \ = (note << 1) + 1;\n                if (note > 127)\n                    break;\n\
  \                if (music_string.charAt(index) == 'o')\n                    index++;\n\
  \                else {\n                    note = note - 16;\n               \
  \     index++;\n                }\n            }\n            octave = note % 12;\n\
  \        }\n        index = 0;\n        while (index < music_string.length()) {\n\
  \            note = (note << 1) + 1;\n            if (music_string.charAt(index)\
  \ == '|') {\n                index++;\n                if (note % 12 == 0)\n   \
  \                 note = note - 12;\n                else\n                    note\
  \ = note - 16;\n            }\n            if (note > 127)\n                break;\n\
  \            if ((is_octave && note < 12) || (!is_octave && note == 0))\n      \
  \          note = 0;\n            else\n                note = note - 16;\n    \
  \        beats.add(note);\n            index++;\n        }\n        return beats;"
- "        ArrayList<Integer> beats = new ArrayList<>();\n        music_string = music_string.toLowerCase();\n\
  \        for (char note : music_string.toCharArray()) {\n            char current_char\
  \ = note;\n            boolean is_note_last = false;\n            int current_beat\
  \ = 0;\n\n            do {\n                is_note_last = (current_char == 'o');\n\
  \                beats.add(current_beat);\n                current_beat++;\n   \
  \             current_char = (char) current_char.nextElement();\n            } while\
  \ (is_note_last);\n        }\n        return beats;"
- "        int num_notes = 0;\n        ArrayList<Integer> beats = new ArrayList<>();\n\
  \        music_string = music_string.replace('o', ' ');\n        music_string =\
  \ music_string.replace('o|', ' ');\n        music_string = music_string.replace('|',\
  \ ' ');\n        music_string = music_string.replace('o|', ' ');\n        music_string\
  \ = music_string.replace('|', ' ');\n        music_string = music_string.replace('.',\
  \ ' ');\n        music_string = music_string.replace('.', ' ');\n        music_string\
  \ = music_string.replace('.', ' ');\n        music_string = music_string.replace('.',\
  \ ' ');\n        music_string = music_string.replace('.', ' ');\n        music_string\
  \ = music_string.replace('o', ' ');\n        for (int i = 0; i < music_string.length();\
  \ i++) {\n            char c = music_string.charAt(i);\n            if (c == 'o')\
  \ {\n                beats.add(num_notes);\n                num_notes++;\n     \
  \       } else if (c == '|') {\n                beats.add(num_notes);\n        \
  \        num_notes++;\n            } else if (c == '.') {\n                beats.add(num_notes);\n\
  \                num_notes++;\n            }\n        }\n        beats.add(num_notes);\n\
  \        return beats;"
- "        ArrayList<Integer> notes = new ArrayList<Integer>();\n        // The function\
  \ should return list of integers representing number of beats for notes which are\n\
  \        // not last.\n        // Notes which have three or more notes below them\
  \ are considered \"chords\".\n        // Chord notes are represented as a list of\
  \ integers. Chord notes are separated by '|' symbol. Each\n        // integer represents\
  \ number of beats below this note.\n        // Example:\n        // >>> parse_music('o\
  \ o| .| o| o| .| .| .| .| o o')\n        // [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n\
  \        String s = music_string;\n        String[] pieces = s.split(\" \");\n \
  \       for (int i = 0; i < pieces.length; i++) {\n            if (pieces[i].equals(\"\
  .\") || pieces[i].equals(\"|\")) {\n                notes.add(4);\n            }\
  \ else if (pieces[i].equals(\"o\")) {\n                notes.add(1);\n         \
  \   } else {\n                String[] pieces1 = pieces[i].split(\"|\");\n     \
  \           for (int j = 0; j < pieces1.length; j++) {\n                    notes.add(Integer.parseInt(pieces1[j]));\n\
  \                }\n            }\n        }\n        return notes;"
- "        // Create empty list to store results.\n        ArrayList<Integer> results\
  \ = new ArrayList<Integer>();\n\n        // Keep track of the starting position.\n\
  \        int start_pos = 0;\n\n        // Loop over input string.\n        for (char\
  \ letter : music_string.toCharArray()) {\n            // If current letter is '.|'\
  \ then check if previous letter is 'o|' and if not add one.\n            // If previous\
  \ letter is 'o|' then check if previous letter is 'o' and if not add one.\n    \
  \        // This goes for all cases.\n            if (letter == '.' || letter ==\
  \ '|') {\n                if (music_string.charAt(start_pos - 1) != 'o' || music_string.charAt(start_pos\
  \ - 2) != 'o') {\n                    results.add(1);\n                } else {\n\
  \                    results.add(2);\n                }\n                start_pos++;\n\
  \            } else {\n                // Otherwise, add previous letter to the\
  \ results.\n                results.add(music_string.charAt(start_pos - 1));\n \
  \               start_pos++;\n            }\n        }\n\n        // Add last letter.\n\
  \        if (music_string.charAt(start_pos) == 'o' || music_string.charAt(start_pos)\
  \ == '|') {\n            if (music_string.charAt(start_pos - 1) != 'o' || music_string.charAt(start_pos\
  \ - 2) != 'o') {\n                results.add(1);\n            } else {\n      \
  \          results.add(2);\n            }\n            start_pos++;\n        }\n\
  \n        return results;"
- "        ArrayList<Integer> beats = new ArrayList<>();\n\n        for(int i = 0;\
  \ i < music_string.length(); i++) {\n            char c = music_string.charAt(i);\n\
  \            int last = -1;\n            int length = -1;\n\n            switch(c)\
  \ {\n                case 'o':\n                    last = length - 4;\n       \
  \             length = 4;\n                    break;\n                case 'o|':\n\
  \                    last = length - 2;\n                    length = 2;\n     \
  \               break;\n                case '.|':\n                    last = 1;\n\
  \                    length = 1;\n                    break;\n            }\n\n\
  \            if (length != -1) {\n                beats.add(length);\n         \
  \   }\n\n            if (last != -1) {\n                beats.add(last);\n     \
  \       }\n        }\n\n        return beats;"
- "        // TODO: Implement this function\n        ArrayList<Integer> beats = new\
  \ ArrayList<Integer>();\n\n        char[] musicChars = music_string.toCharArray();\n\
  \n        int note_length = 0;\n\n        boolean first_note = true;\n\n       \
  \ boolean last_note = true;\n\n        for (int i = 0; i < musicChars.length; i++)\
  \ {\n            int current_char = 0;\n\n            // Note end if on note or\
  \ if last note in string\n            if (musicChars[i] == 'o' || musicChars[i]\
  \ == 'o|' || musicChars[i] == '.|'\n                    || musicChars[i] == 'o|'\
  \ || musicChars[i] == '.|' || musicChars[i] == '.|'\n                    || musicChars[i]\
  \ == '.|' || musicChars[i] == '.|' || musicChars[i] == 'o'\n                   \
  \ || musicChars[i] == 'o|' || musicChars[i] == '.|' || musicChars[i] == 'o|'\n \
  \                   || musicChars[i] == 'o|' || musicChars[i] == 'o|' || musicChars[i]\
  \ == 'o|'\n                    || musicChars[i] == 'o|' || musicChars[i] == 'o|'\
  \ || musicChars[i] == '.|'\n                    || musicChars[i] == 'o|' || musicChars[i]\
  \ == 'o|' || musicChars[i] == 'o|'\n                    || musicChars[i] == '.|'\
  \ || musicChars[i] == '.|' || musicChars[i] == '.|'\n                    || musicChars[i]\
  \ == 'o|' || musicChars[i] == 'o|' || musicChars[i] == '.|'\n                  \
  \  || musicChars[i] == 'o|' || musicChars[i] == 'o|' || musicChars[i] == '.|'\n\
  \                    || musicChars[i] == 'o|' || musicChars[i] == '.|' || musicChars[i]\
  \ == '.|'\n                    || musicChars[i] == 'o|' || musicChars[i] == 'o|'\
  \ || musicChars[i] == 'o|'\n                    || musicChars[i] == 'o|' || musicChars[i]\
  \ == 'o|' || musicChars[i] == 'o|'\n                    || musicChars[i] == 'o|'\
  \ || musicChars[i] == 'o|' || musicChars[i] == 'o|'\n                    || musicChars[i]\
  \ == 'o|' || musicChars[i] == 'o|' || musicChars[i] == 'o|'\n                  \
  \  || musicChars[i] == 'o|' || musicChars[i] == '.|' || musicChars[i] == '.|'\n\
  \                    || musicChars[i] == '.|' || musicChars[i] == '.|' || musicChars[i]\
  \ == '.|'\n                    || musicChars[i] == '.|' || musicChars[i] == '.|'\
  \ || musicChars[i] == '.|'\n                    || musicChars[i] == '.|' || musicChars[i]\
  \ == '.|' || musicChars[i] == '.|'\n                    || music"
- "        ArrayList<Integer> beats = new ArrayList<Integer>();\n        music_string\
  \ = music_string.replaceAll(\"(\\\\s)\", \"\");\n        music_string = music_string.replaceAll(\"\
  \ \", \"\");\n        int current_beat = 0;\n        int current_beat_size = 0;\n\
  \        for (int i = 0; i < music_string.length(); i++) {\n            char c =\
  \ music_string.charAt(i);\n            char last_note = music_string.charAt(music_string.length()\
  \ - 1);\n            if (c == '.' || c == 'o') {\n                current_beat_size\
  \ += 1;\n            } else if (c == '|' && last_note == 'o') {\n              \
  \  current_beat_size += 1;\n            } else if (c == '|' && last_note != '.')\
  \ {\n                beats.add(current_beat_size);\n                current_beat\
  \ = 0;\n                current_beat_size = 0;\n            } else {\n         \
  \       current_beat += 1;\n            }\n        }\n        return beats;"
- "        ArrayList<Integer> notes = new ArrayList<>();\n        List<Integer> temp\
  \ = new ArrayList<>();\n        notes.addAll(temp.stream().mapToInt(Integer::valueOf).collect(Collectors.toList()));\n\
  \        music_string.chars().filter(c -> c == 'o' || c == '.' || c == '|').forEachOrdered(c\
  \ -> {\n            if (c == '|')\n                notes.addAll(temp.stream().mapToInt(Integer::valueOf).collect(Collectors.toList()));\n\
  \            temp.add(c);\n        });\n        return notes;"
- "        ArrayList<Integer> beats = new ArrayList<>();\n        music_string = music_string.toLowerCase();\n\
  \n        String note_character = \"[\" + Music.notes.toArray(new char[Music.notes.size()])\
  \ + \"]\";\n\n        // Get musical note numbers and check if they are valid (note\
  \ symbols are surrounded by brackets)\n        for (String music_note_string: music_string.split(note_character))\
  \ {\n            if (music_note_string.startsWith(\"(\") && music_note_string.endsWith(\"\
  )\")) {\n                music_note_string = music_note_string.substring(1, music_note_string.length()\
  \ - 1);\n                int music_note = Integer.parseInt(music_note_string);\n\
  \                if (music_note >= 0 && music_note <= Music.notes.size()) {\n  \
  \                  int current_beat = 1;\n                    int note_counter =\
  \ 0;\n                    int note_octave = music_note - Music.notes.get(0); //\
  \ note in octave (notes can be multiple octaves)\n                    music_note_string\
  \ = music_note_string.toLowerCase();\n\n                    while (music_note_string.startsWith(\"\
  (\") && music_note_string.endsWith(\")\")) {\n                        music_note_string\
  \ = music_note_string.substring(1, music_note_string.length() - 1);\n          \
  \              note_counter++;\n                    }\n\n                    music_note_string\
  \ = music_note_string.toLowerCase();\n\n                    // Here we determine\
  \ how long each note lasts\n                    while (note_counter > 0) {\n   \
  \                     music_note_string = music_note_string.toLowerCase();\n\n \
  \                       note_octave++;\n\n                        if (music_note_string\
  \ == note_character) {\n                            note_octave = 1;\n         \
  \                   current_beat++;\n                        }\n\n             \
  \           note_counter--;\n                    }\n\n                    int music_note_bpm\
  \ = Music.notes.get(music_note).bpm * Music.note_duration.get(music_note) * 1000;\n\
  \                    beats.add(current_beat / music_note_bpm);\n               \
  \ }\n            }\n        }\n\n        return beats;"
- '        // TODO implement this function'
- "        ArrayList<Integer> beats = new ArrayList<>();\n        music_string = music_string.replaceAll(\"\
  \ \", \"\");\n        music_string = music_string.replaceAll(\"o\", \"00\");\n \
  \       music_string = music_string.replaceAll(\"o|\", \"01\");\n        music_string\
  \ = music_string.replaceAll(\".|\", \"10\");\n        music_string = music_string.replaceAll(\"\
  .|\", \"11\");\n        music_string = music_string.replaceAll(\"o|\", \"00\");\n\
  \        music_string = music_string.replaceAll(\"o|\", \"01\");\n        music_string\
  \ = music_string.replaceAll(\".|\", \"10\");\n        music_string = music_string.replaceAll(\"\
  .|\", \"11\");\n        music_string = music_string.replaceAll(\"o\", \"00\");\n\
  \        music_string = music_string.replaceAll(\"o\", \"01\");\n        music_string\
  \ = music_string.replaceAll(\".|\", \"10\");\n        music_string = music_string.replaceAll(\"\
  .|\", \"11\");\n        music_string = music_string.replaceAll(\"o\", \"00\");\n\
  \        music_string = music_string.replaceAll(\"o\", \"01\");\n        music_string\
  \ = music_string.replaceAll(\".|\", \"10\");\n        music_string = music_string.replaceAll(\"\
  .|\", \"11\");\n        music_string = music_string.replaceAll(\"o\", \"00\");\n\
  \        music_string = music_string.replaceAll(\"o\", \"01\");\n        music_string\
  \ = music_string.replaceAll(\".|\", \"10\");\n        music_string = music_string.replaceAll(\"\
  .|\", \"11\");\n        music_string = music_string.replaceAll(\"o\", \"00\");\n\
  \        music_string = music_string.replaceAll(\"o\", \"01\");\n        music_string\
  \ = music_string.replaceAll(\".|\", \"10\");\n        music_string = music_string.replaceAll(\"\
  .|\", \"11\");\n        music_string = music_string.replaceAll(\"o\", \"00\");\n\
  \        music_string = music_string.replaceAll(\"o\", \"01\");\n        music_string\
  \ = music_string.replaceAll(\".|\", \"10\");\n        music_string = music_string.replaceAll(\"\
  .|\", \"11\");\n        music_string = music_string.replaceAll(\"o\", \"00\");\n\
  \        music_string = music_string.replaceAll(\"o\", \"01\");\n        music_string\
  \ = music_string.replaceAll(\".|\", \"10\");\n        music_string = music_string.replaceAll(\"\
  .|\", \"11\");\n        music_string = music_string"
- "        // Your code here\n        ArrayList<Integer> beats = new ArrayList<>();\n\
  \        music_string = music_string.toUpperCase();\n        for (int i = 0; i <\
  \ music_string.length(); i++) {\n            if (music_string.charAt(i) == '|')\
  \ {\n                int count = 0;\n                for (int j = i + 1; j < music_string.length();\
  \ j++) {\n                    if (music_string.charAt(j) != '|') {\n           \
  \             count++;\n                    }\n                }\n             \
  \   beats.add(count);\n                i += count - 1;\n            }\n        \
  \    if (music_string.charAt(i) == 'o') {\n                int count = 0;\n    \
  \            for (int j = i + 1; j < music_string.length(); j++) {\n           \
  \         if (music_string.charAt(j) == 'o') {\n                        count++;\n\
  \                    }\n                }\n                beats.add(count * 4);\n\
  \                i += count - 1;\n            }\n        }\n        return beats;"
- "        ArrayList<Integer> beats = new ArrayList<>();\n\n        // TODO: Your\
  \ solution here\n        return beats;"
- "        ArrayList<Integer> beats = new ArrayList<Integer>();\n        int number_of_notes\
  \ = 0;\n        int note_number = 0;\n        // Let's iterate over input string.\n\
  \        for(int i = 0; i < music_string.length(); ++i) {\n            String note\
  \ = music_string.substring(i, i+1);\n            // If note is note - we're on note\
  \ - count it.\n            if(\"o\".equals(note) || \"o|\".equals(note)) {\n   \
  \             beats.add(note_number);\n                number_of_notes++;\n    \
  \            note_number = 0;\n            }\n            else if(\".\".equals(note)\
  \ || \".|\".equals(note)) {\n                beats.add(note_number);\n         \
  \       number_of_notes++;\n                note_number = 0;\n            }\n  \
  \          else if(\"o\".equals(note)) {\n                note_number++;\n     \
  \       }\n            else {\n                note_number++;\n                note_number++;\n\
  \            }\n        }\n        // If last note is of non-note length.\n    \
  \    if(note_number > 0) {\n            beats.add(note_number);\n            number_of_notes++;\n\
  \        }\n        for(int i = 0; i < number_of_notes; ++i) {\n            int\
  \ beat_count = beats.get(i) / 4;\n            beats.remove(i);\n            beats.add(beat_count);\n\
  \        }\n        return beats;"
- "        ArrayList<Integer> beats = new ArrayList<>();\n        // Add 1 to each\
  \ beat because we already consider it 1 beat.\n        music_string = music_string.toLowerCase();\n\
  \        music_string = music_string.replaceAll(\"[|]\", \"\");\n        music_string\
  \ = music_string.replaceAll(\"[\\\\s]\", \"\");\n        for (int i = 0; i < music_string.length();\
  \ i++) {\n            char current_char = music_string.charAt(i);\n            if\
  \ (Character.isLetterOrDigit(current_char)) {\n                if (current_char\
  \ == '.') {\n                    beats.add(1);\n                } else {\n     \
  \               beats.add(1);\n                    beats.add(1);\n             \
  \   }\n            } else {\n                beats.add(0);\n            }\n    \
  \    }\n        return beats;"
- "        ArrayList<Integer> beat_lengths = new ArrayList<Integer>();\n        //\
  \ Part A: parse input music_string to a list of beats\n        ArrayList<Character>\
  \ notes = new ArrayList<Character>();\n        music_string.replace('|', ' ').toCharArray().forEach(note\
  \ -> {\n            if (note == '.' || note == 'o' || note == 'o|') {\n        \
  \        notes.add(note);\n            } else if(notes.isEmpty() && note == 'o'){\n\
  \                notes.add('o');\n            } else {\n                notes.add(note);\n\
  \                beat_lengths.add(notes.size());\n            }\n        });\n \
  \       // Part B: count beats for each note\n        int beats_counter = 0;\n \
  \       notes.forEach(note -> {\n            if (note == '.') {\n              \
  \  beat_lengths.add(1);\n            } else if (note == 'o') {\n               \
  \ beat_lengths.add(4);\n            } else if (note == 'o|') {\n               \
  \ beat_lengths.add(2);\n            } else if (note == ' ') {\n                beat_lengths.add(1);\n\
  \            } else {\n                beat_lengths.add(1);\n            }\n   \
  \     });\n        return beat_lengths;"
- "        ArrayList<Integer> beats = new ArrayList<>();\n        for (int i = 0;\
  \ i < music_string.length(); i++) {\n            char c = music_string.charAt(i);\n\
  \            switch (c) {\n                case 'o':\n                    beats.add(((i\
  \ / 4) % 12) * 4);\n                    break;\n                case 'o|':\n   \
  \                 beats.add(((i / 4) % 12) * 2 + 1);\n                    break;\n\
  \                case '.|':\n                    beats.add(i % 12);\n          \
  \          break;\n                default:\n                    break;\n      \
  \      }\n        }\n        return beats;"
- "        ArrayList<Integer> results = new ArrayList<>();\n\n        // First step:\
  \ parse musical note into its frequency and duration (number of beats).\n      \
  \  String[] notes = music_string.split(\" \");\n        Map<String, Integer> frequencies\
  \ = new HashMap<>();\n\n        // Let's process all notes\n        for (String\
  \ note : notes) {\n            int frequency = frequencies.getOrDefault(note, 0);\n\
  \            frequencies.put(note, frequency + 1);\n        }\n\n        // Now\
  \ let's compute duration for each note in the list\n        for (String note : frequencies.keySet())\
  \ {\n            frequencies.put(note, frequencies.get(note) / 4);\n        }\n\n\
  \        // Now let's parse frequencies into a list of integers\n        for (String\
  \ note : frequencies.keySet()) {\n            results.add(frequencies.get(note));\n\
  \        }\n\n        return results;"
- "        ArrayList<Integer> beats = new ArrayList<Integer>();\n        for(int i\
  \ = 1; i < music_string.length(); ++i) {\n            String note = music_string.substring(i\
  \ - 1, i);\n            if(note.length() == 1) {\n                beats.add(1);\n\
  \            }\n            else if(note.equals(\"|\")) {\n                beats.add(2);\n\
  \            }\n            else if(note.equals(\"o\")) {\n                beats.add(4);\n\
  \            }\n            else {\n                throw new IllegalArgumentException(\"\
  Can't parse music string: \" + music_string);\n            }\n        }\n      \
  \  return beats;"
- "        if (music_string.contains(\"|\"))\n            return parse_music(music_string.replace(\"\
  |\", \"\").replace(\"|\", \"\").replace(\"|\", \"\"));\n        else {\n       \
  \     String first = \".\";\n            int last_beat_count = music_string.indexOf(first);\n\
  \            if (music_string.contains(\".\"))\n                return parse_music(music_string.replace(\"\
  o\", \"\").replace(\"o\", \"\").replace(\"o\", \"\"));\n            int last_beat\
  \ = music_string.indexOf(first, last_beat_count + 1);\n            if (music_string.contains(\"\
  .\"))\n                return parse_music(music_string.replace(\"o\", \"\").replace(\"\
  o\", \"\").replace(\"o\", \"\"));\n            else\n                return parse_music(music_string.substring(0,\
  \ last_beat));\n        }"
- "        music_string = music_string.toLowerCase(); // Convert all letters to lower-case\
  \ and trim off whitespace (if any).\n        music_string = music_string.replaceAll(\"\
  (\\\\s|[\\.\\|\\-])\", \"\"); // Strip out all whitespace, dots, pipes or dashes.\n\
  \        music_string = music_string.replaceAll(\"^[o|.]$\", \"\"); // Strip out\
  \ anything other than 'o', 'o|' or '.'.\n        music_string = music_string.replaceAll(\"\
  ^(o|.)\\1$\", \"o\"); // Convert 'o|.' into 'o.'\n        music_string = music_string.replaceAll(\"\
  ^(o|.)(\\1|\\2)$\", \"o.\"); // Convert 'o|.' into 'o.'\n        music_string =\
  \ music_string.replaceAll(\"^(o|.)(\\1|\\2)$\", \"o.\"); // Convert 'o|.' into 'o.'\n\
  \        music_string = music_string.replaceAll(\"^(o|.)(\\1|\\2)$\", \"o.\"); //\
  \ Convert 'o|.' into 'o.'\n        music_string = music_string.replaceAll(\"^(o|.)(\\\
  1|\\2)$\", \"o.\"); // Convert 'o|.' into 'o.'\n        music_string = music_string.replaceAll(\"\
  ^(o|.)(\\1|\\2)$\", \"o.\"); // Convert 'o|.' into 'o.'\n        music_string =\
  \ music_string.replaceAll(\"^(o|.)(\\1|\\2)$\", \"o.\"); // Convert 'o|.' into 'o.'\n\
  \        music_string = music_string.replaceAll(\"^(o|.)(\\1|\\2)$\", \"o.\"); //\
  \ Convert 'o|.' into 'o.'\n        music_string = music_string.replaceAll(\"^(o|.)(\\\
  1|\\2)$\", \"o.\"); // Convert 'o|.' into 'o.'\n        music_string = music_string.replaceAll(\"\
  ^(o|.)(\\1|\\2)$\", \"o.\"); // Convert 'o|.' into 'o.'\n        music_string =\
  \ music_string.replaceAll(\"^(o|.)(\\1|\\2)$\", \"o.\"); // Convert 'o|.' into 'o.'\n\
  \        music_string = music_string.replaceAll(\"^(o|.)(\\1|\\2)$\", \"o.\"); //\
  \ Convert 'o|."
- "        ArrayList<Integer> beats = new ArrayList<Integer>();\n        String split_string\
  \ = music_string.trim().replaceAll(\"\\\\s\", \"\");\n        if (music_string.length()\
  \ % 4 != 0) {\n            throw new RuntimeException(\"music_string length \" +\
  \ music_string.length() + \" is not a multiple of four.\");\n        }\n       \
  \ int last_index = 0;\n        for (int i = 0; i < music_string.length(); i++) {\n\
  \            char ch = split_string.charAt(i);\n            int ch_index = split_string.indexOf(ch);\n\
  \            if (ch_index > last_index) {\n                last_index = ch_index;\n\
  \                beats.add(1);\n            } else if (ch_index == last_index) {\n\
  \                beats.add(1);\n            } else if (ch_index > last_index + 1\
  \ && ch_index < last_index + 3) {\n                beats.add(2);\n            }\
  \ else if (ch_index == last_index + 1) {\n                beats.add(2);\n      \
  \      } else if (ch_index == last_index + 3) {\n                beats.add(1);\n\
  \            } else if (ch_index == last_index + 2) {\n                beats.add(1);\n\
  \            } else {\n                throw new RuntimeException(\"Invalid note\
  \ character: \" + ch);\n            }\n        }\n        return beats;"
- "        ArrayList<Integer> array = new ArrayList<>();\n        // Create note objects\
  \ with proper notation\n        Note note1, note2;\n        // Go through string,\
  \ check for different kind of notes and store their notes in appropriate note object\n\
  \        for (int i = 0; i < music_string.length(); i++) {\n            if (music_string.charAt(i)\
  \ == 'o') {\n                note1 = new Note(Note.WHOLE_NOTE, 1);\n           \
  \     array.add(note1.getBeats());\n            } else if (music_string.charAt(i)\
  \ == 'o|') {\n                note1 = new Note(Note.HALF_NOTE, 2);\n           \
  \     array.add(note1.getBeats());\n            } else if (music_string.charAt(i)\
  \ == '.|') {\n                note2 = new Note(Note.QUARTER_NOTE, 1);\n        \
  \        array.add(note2.getBeats());\n            }\n        }\n        return\
  \ array;"
- '        // Your code here'
- "        ArrayList<Integer> beats = new ArrayList<Integer>();\n        int index\
  \ = 0;\n        while (index<music_string.length()) {\n            int note = music_string.charAt(index);\n\
  \            if (note=='o') {\n                index+=1;\n                beats.add(4);\n\
  \            }\n            else if (note=='o|') {\n                index+=1;\n\
  \                beats.add(2);\n            }\n            else if (note=='.|')\
  \ {\n                index+=1;\n                beats.add(1);\n            }\n \
  \           index+=1;\n        }\n        return beats;"
- "        ArrayList<Integer> beats = new ArrayList<Integer>();\n        String[]\
  \ notes = music_string.split(\"[|.]\");\n        for (String note : notes) {\n \
  \           note = note.replaceFirst(\"^\\\\s\", \"\");\n            if (note.equals(\"\
  .\")) continue;\n            int beat = 0;\n            if (note.equals(\"o\"))\
  \ {\n                beat = 4;\n            } else if (note.equals(\"o|\")) {\n\
  \                beat = 2;\n            } else if (note.equals(\"o+\")) {\n    \
  \            beat = 1;\n            } else if (note.equals(\"o+\")) {\n        \
  \        beat = 1;\n            }\n            beats.add(beat);\n        }\n   \
  \     return beats;"
- '        // TODO: Your code goes here.'
- "        ArrayList<Integer> beats = new ArrayList<>();\n        for (char character\
  \ : music_string.toCharArray()) {\n            if (character == '.') {\n       \
  \         beats.add(0);\n            }\n            if (character == 'o') {\n  \
  \              beats.add(4);\n            }\n            if (character == '|') {\n\
  \                beats.add(2);\n            }\n        }\n        return beats;"
- '        // your code here'
- "        ArrayList<Integer> beats = new ArrayList<>();\n        music_string = music_string.toLowerCase();\n\
  \        for (int i = 0; i < music_string.length(); i++) {\n            char c =\
  \ music_string.charAt(i);\n            if (c == 'o') {\n                beats.add(4);\n\
  \            } else if (c == '.') {\n                beats.add(1);\n           \
  \ } else if (c == '|') {\n                beats.add(2);\n            } else if (c\
  \ == 'o|') {\n                beats.add(1);\n            }\n        }\n        return\
  \ beats;"
- "        ArrayList<Integer> list = new ArrayList<Integer>();\n        // TODO: fill\
  \ in code here\n        // ...\n        return list;"
- "        ArrayList<Integer> result = new ArrayList<>();\n        music_string =\
  \ music_string.trim();\n        for (char c: music_string.toCharArray()) {\n   \
  \         int value = c - '0';\n            result.add(value);\n        }\n    \
  \    return result;"
- "        // Write your code here\n        ArrayList<Integer> returns = new ArrayList<>();\n\
  \        music_string = music_string.replace(\".\", \"|\");\n        music_string\
  \ = music_string.replace(\"o\", \"o|\");\n        music_string = music_string.replace(\"\
  |\", \"o\");\n        music_string = music_string.replace(\"o|\", \"|\");\n    \
  \    music_string = music_string.replace(\"o\", \"o\");\n        music_string =\
  \ music_string.replace(\"|\", \"|\");\n        music_string = music_string.replace(\"\
  .|\", \".\");\n        music_string = music_string.replace(\"|\", \"|\");\n    \
  \    music_string = music_string.replace(\"o\", \"o\");\n        music_string =\
  \ music_string.replace(\"|\", \"|\");\n        music_string = music_string.replace(\"\
  o|\", \"|\");\n        music_string = music_string.replace(\"o\", \"o\");\n    \
  \    music_string = music_string.replace(\"|\", \"|\");\n        music_string =\
  \ music_string.replace(\"o|\", \"|\");\n        music_string = music_string.replace(\"\
  o\", \"o\");\n        music_string = music_string.replace(\"|\", \"|\");\n     \
  \   music_string = music_string.replace(\"o|\", \"|\");\n        music_string =\
  \ music_string.replace(\"o\", \"o\");\n        music_string = music_string.replace(\"\
  |\", \"|\");\n        music_string = music_string.replace(\"o|\", \"|\");\n    \
  \    music_string = music_string.replace(\"o\", \"o\");\n        music_string =\
  \ music_string.replace(\"|\", \"|\");\n        music_string = music_string.replace(\"\
  o|\", \"|\");\n        music_string = music_string.replace(\"o\", \"o\");\n    \
  \    music_string = music_string.replace(\"|\", \"|\");\n        music_string =\
  \ music_string.replace(\"o|\", \"|\");\n        music_string = music_string.replace(\"\
  o\", \"o\");\n        music_string = music_string.replace(\"|\", \"|\");\n     \
  \   music_string = music_string.replace(\"o|\", \"|\");\n        music_string =\
  \ music_string.replace(\"o\", \"o\");\n        music_string = music_string.replace(\"\
  |\", \"|\");\n        music_string = music_string.replace(\"o|\", \"|\");\n    \
  \    music_string = music_string.replace(\"o\", \"o\");\n        music_string =\
  \ music_string.replace(\"|\", \"|\");\n        music_string = music_string.replace(\"\
  o|\", \"|\");\n        music_string = music_string.replace(\"o\", \"o\");\n    \
  \    music_string = music_string.replace(\"|\", \"|\");\n        music_string =\
  \ music_"
- "        // Add your code here\n        ArrayList<Integer> beats = new ArrayList<>();\n\
  \        StringTokenizer st = new StringTokenizer(music_string);\n        boolean\
  \ lastNote = false;\n        while (st.hasMoreTokens()) {\n            String token\
  \ = st.nextToken();\n            if (token.equals(\".\")) {\n                lastNote\
  \ = false;\n            } else if (token.equals(\"|\")) {\n                lastNote\
  \ = true;\n            } else if (lastNote) {\n                beats.add(4);\n \
  \           } else {\n                beats.add(1);\n            }\n        }\n\
  \        return beats;"
- "        ArrayList<Integer> beats = new ArrayList<Integer>();\n        StringBuilder\
  \ sb = new StringBuilder();\n        for (int i = 0; i < music_string.length();\
  \ i++) {\n            char c = music_string.charAt(i);\n            if (c == 'o')\
  \ {\n                sb.append(\"o\");\n                beats.add(4);\n        \
  \    } else if (c == 'o|') {\n                sb.append(\"o|\");\n             \
  \   beats.add(2);\n            } else if (c == '.|') {\n                sb.append(\"\
  .|\");\n                beats.add(1);\n            } else if (c == '.') {\n    \
  \            sb.append(\".\");\n                beats.add(1);\n            } else\
  \ if (c == '|') {\n                sb.append(\"|\");\n                beats.add(1);\n\
  \            } else if (c == '.') {\n                sb.append(\".\");\n       \
  \         beats.add(1);\n            } else if (c == '|') {\n                sb.append(\"\
  |\");\n                beats.add(1);\n            } else if (c == '.') {\n     \
  \           sb.append(\".\");\n                beats.add(1);\n            } else\
  \ if (c == '|') {\n                sb.append(\"|\");\n                beats.add(1);\n\
  \            } else if (c == '.') {\n                sb.append(\".\");\n       \
  \         beats.add(1);\n            } else if (c == '|') {\n                sb.append(\"\
  |\");\n                beats.add(1);\n            } else if (c == '.') {\n     \
  \           sb.append(\".\");\n                beats.add(1);\n            } else\
  \ if (c == '|') {\n                sb.append(\"|\");\n                beats.add(1);\n\
  \            } else if (c == '.') {\n                sb.append(\".\");\n       \
  \         beats.add(1);\n            } else if (c == '|') {\n                sb.append(\"\
  |\");\n                beats.add(1);\n            } else if (c == '.') {\n     \
  \           sb.append(\".\");\n                beats.add(1);\n            } else\
  \ if (c == '|') {\n                sb.append(\"|\");\n                beats.add(1);\n\
  \            } else if (c == '.') {\n                sb.append(\".\");\n       \
  \         beats.add(1);\n            } else if (c == '|') {\n                sb.append(\"\
  |\");\n                beats.add(1);\n            } else if (c == 'o') {\n     \
  \           sb.append(\"o\");\n                beats.add(4);\n            } else\
  \ if (c == 'o|') {\n                sb.append(\"o|\");\n                beats.add(2);\n\
  \            } else if (c == '.|') {\n                sb.append(\".|\");\n     \
  \           beats.add(1);\n            } else if (c == '.') {\n                sb.append(\"\
  .\");\n                beats.add(1);\n            } else if (c == '|') {\n     \
  \           sb.append(\"|\");\n                beats.add(1);\n            } else\
  \ if (c == '.') {\n                sb.append(\".\");\n                beats.add(1);\n\
  \            } else if (c == '|') {\n                sb.append(\"|\");\n       \
  \         beats.add(1);\n"
- "        music_string = music_string.toUpperCase();\n        ArrayList<Integer>\
  \ music_note_lengths = new ArrayList<Integer>();\n        for (int i = 0; i < music_string.length();\
  \ i++) {\n            char c = music_string.charAt(i);\n            if (c == ' ')\
  \ {\n                music_note_lengths.add(0);\n            } else {\n        \
  \        music_note_lengths.add((int) (Math.abs(music_string.charAt(i) - 'A')));\n\
  \            }\n        }\n        return music_note_lengths;"
- "        // Write your code here.\n        String notes[] = music_string.split(\"\
  \ \");\n        ArrayList<Integer> notes_beats = new ArrayList<Integer>();\n   \
  \     int temp[] = new int[notes.length];\n        for(int i = 0; i<notes.length;\
  \ i++)\n        {\n            notes[i] = notes[i].toUpperCase();\n            if(notes[i].startsWith(\"\
  O\"))\n            {\n                temp[i] = 4;\n            }\n            else\
  \ if (notes[i].startsWith(\"o|\"))\n            {\n                temp[i] = 2;\n\
  \            }\n            else if (notes[i].startsWith(\"|.\"))\n            {\n\
  \                temp[i] = 1;\n            }\n            else \n            {\n\
  \                temp[i] = 0;\n            }\n        }\n        for(int i = 0;\
  \ i<notes.length; i++)\n        {\n            notes_beats.add(temp[i]);\n     \
  \   }\n        return notes_beats;"
- "        ArrayList<Integer> beat_lengths = new ArrayList<Integer>();\n        if\
  \ (music_string == null || music_string.isEmpty()) {\n            throw new IllegalArgumentException(\"\
  Music string cannot be empty or null.\");\n        }\n        music_string = music_string.toLowerCase();\n\
  \        music_string = music_string.replace(' ', '_');\n        music_string =\
  \ music_string.replaceAll(\"[/]\", \"\");\n        // Split music string into separate\
  \ notes based on space.\n        String[] music_notes = music_string.split(\" \"\
  );\n        // Remove empty notes from array.\n        music_notes = Arrays.stream(music_notes).filter(s\
  \ -> !s.isEmpty()).toArray(String[]::new);\n        // Iterate over notes and count\
  \ notes ending with '|'.\n        for (String note : music_notes) {\n          \
  \  int beat_length = 1;\n            int last_beat = -1;\n            if (note.length()\
  \ % 2 == 0) {\n                note = note + '|';\n            }\n            while\
  \ (note.length() > 0) {\n                char c = note.charAt(0);\n            \
  \    note = note.substring(1);\n                if (c == '|' && note.length() >\
  \ 0) {\n                    beat_length++;\n                }\n                last_beat++;\n\
  \            }\n            beat_lengths.add(beat_length);\n        }\n        return\
  \ beat_lengths;"
- "        ArrayList<Integer> beats = new ArrayList<Integer>();\n        for (int\
  \ i = 0; i < music_string.length(); i++) {\n            String s = music_string.substring(i,\
  \ i + 1);\n            if (s.equals(\"o\")) {\n                beats.add(4);\n \
  \           } else if (s.equals(\"o|\")) {\n                beats.add(2);\n    \
  \        } else if (s.equals(\".|\")) {\n                beats.add(1);\n       \
  \     }\n        }\n        return beats;"
- "        ArrayList<Integer> notes = new ArrayList<Integer>();\n        // Go through\
  \ each of the symbols in the music_string and see if it is a note or an accidental\n\
  \        // and see if it is the last note.\n        for(int i = 0; i < music_string.length();\
  \ i++) {\n            char symbol = music_string.charAt(i);\n            if(!Character.isLetter(symbol))\
  \ {\n                notes.add(i);\n            } else {\n                if(symbol\
  \ == '|') {\n                    notes.add(i+1);\n                } else if(symbol\
  \ == 'o') {\n                    notes.add(i+2);\n                }\n          \
  \  }\n        }\n        return notes;"
- "        ArrayList<Integer> beats = new ArrayList<Integer>();\n\n        // Split\
  \ music string into array based on blank spaces. Use stream to improve performance\
  \ on large strings.\n        // Side note: I used map to convert map to array but\
  \ forgot about it :(\n        String[] music_array = music_string.split(\" +\");\n\
  \        for (String music_element : music_array) {\n            int i = 0;\n  \
  \          for (char element : music_element.toCharArray()) {\n                //\
  \ If current char is 'o', then add its length to current beat count\n          \
  \      if (element == 'o') {\n                    beats.add(i);\n              \
  \      // If it isn't 'o', then increment current beat count\n                }\
  \ else {\n                    i++;\n                }\n            }\n        }\n\
  \        return beats;"
- "        // Your implementation here\n        ArrayList<Integer> beats = new ArrayList<Integer>();\n\
  \        for (int i = 0; i < music_string.length(); i++) {\n            String note\
  \ = music_string.substring(i, i + 1);\n            if (note.equals(\"o\")) {\n \
  \               beats.add(4);\n            } else if (note.equals(\"o|\")) {\n \
  \               beats.add(2);\n            } else if (note.equals(\".|\")) {\n \
  \               beats.add(1);\n            } else {\n                throw new RuntimeException(\"\
  Unknown musical note \" + note);\n            }\n        }\n        return beats;"
- "        ArrayList<Integer> beats = new ArrayList<Integer>();\n        char separator\
  \ = ' ';\n        String note_char = \"\";\n        char note_length = music_string.charAt(0);\n\
  \        for (int i = 1; i < music_string.length(); i++) {\n            note_char\
  \ = music_string.charAt(i);\n            if (note_length == 'o') {\n           \
  \     if (note_char == '|') {\n                    beats.add(4);\n             \
  \   } else if (note_char == 'o') {\n                    beats.add(4);\n        \
  \        } else {\n                    beats.add(1);\n                }\n      \
  \          note_length = '.';\n            } else if (note_length == 'o|') {\n \
  \               if (note_char == '|') {\n                    beats.add(2);\n   \
  \             } else if (note_char == 'o') {\n                    beats.add(2);\n\
  \                } else {\n                    beats.add(1);\n                }\n\
  \                note_length = '.';\n            } else if (note_length == '.|')\
  \ {\n                if (note_char == '|') {\n                    beats.add(1);\n\
  \                } else if (note_char == 'o') {\n                    beats.add(1);\n\
  \                } else {\n                    beats.add(1);\n                }\n\
  \                note_length = '.';\n            }\n        }\n        return beats;"
- "        // Your code goes here\n        \n        //TODO: Declare variables\n \
  \       ArrayList<Integer> beats = new ArrayList<Integer>();\n        \n       \
  \ //TODO: Implement parseMusic functionality\n\n        //TODO: Return your answer\n\
  \        return beats;"
- "        // Write your code here\n        ArrayList<Integer> beats = new ArrayList<>();\n\
  \        music_string = music_string.replace(\"o|\", \"o|\").replace(\"o|\", \"\
  o|\").replace(\"|\", \"\").replace(\"|\", \"\");\n        String[] split = music_string.split(\"\
  \ \");\n        for(int i = 0; i < split.length; i++) {\n            beats.add(i);\n\
  \        }\n        return beats;"
- "        ArrayList<Integer> beats = new ArrayList<Integer>();\n        StringTokenizer\
  \ str_tok = new StringTokenizer(music_string);\n        String note = \"\";\n  \
  \      while (str_tok.hasMoreTokens()) {\n            note = str_tok.nextToken();\n\
  \            if (note.equals(\".\")) {\n                beats.add(1);\n        \
  \    } else if (note.equals(\"o\")) {\n                beats.add(4);\n         \
  \   } else {\n                int count = 0;\n                for (int i = 0; i\
  \ < note.length(); i++) {\n                    switch (note.charAt(i)) {\n     \
  \                   case '|':\n                            count++;\n          \
  \                  break;\n                        case 'o':\n                 \
  \           count += 4;\n                            break;\n                  \
  \      default:\n                            break;\n                    }\n   \
  \             }\n                beats.add(count);\n            }\n        }\n \
  \       return beats;"
- "        ArrayList<Integer> musicNotes = new ArrayList<>();\n        int last_beat\
  \ = 0;\n        int curr_beat = 0;\n        for(int i = 0; i < music_string.length();\
  \ i++) {\n            char currChar = music_string.charAt(i);\n            if (currChar\
  \ == '.') {\n                last_beat++;\n                curr_beat = 0;\n    \
  \        }\n            if (currChar == '|') {\n                last_beat++;\n \
  \               curr_beat = 1;\n            }\n            else if (currChar ==\
  \ 'o') {\n                if (curr_beat == last_beat) {\n                    musicNotes.add(last_beat);\n\
  \                }\n                last_beat = 0;\n                curr_beat =\
  \ 0;\n            }\n        }\n        return musicNotes;"
- "        // Your code goes here\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
  \        music_string = music_string.trim().replaceAll(\"\\\\s+\", \"\");\n    \
  \    music_string.replaceAll(\"\\\\W\", \"\");\n        music_string = music_string.toLowerCase();\n\
  \        music_string = music_string.replaceAll(\"^[^a-z]+\", \"\");\n        music_string\
  \ = music_string.replaceAll(\"[^a-z0-9]+$\", \"\");\n        music_string = music_string.replaceAll(\"\
  ^[a-z]+\", \"\");\n        music_string = music_string.replaceAll(\"[a-z]+$\", \"\
  \");\n        music_string = music_string.replaceAll(\"^[a-z]+\", \"\");\n     \
  \   music_string = music_string.replaceAll(\"[a-z]+$\", \"\");\n        music_string\
  \ = music_string.replaceAll(\"^[a-z]+\", \"\");\n        music_string = music_string.replaceAll(\"\
  [a-z]+$\", \"\");\n        music_string = music_string.replaceAll(\"^[a-z]+\", \"\
  \");\n        music_string = music_string.replaceAll(\"[a-z]+$\", \"\");\n     \
  \   music_string = music_string.replaceAll(\"^[a-z]+\", \"\");\n        music_string\
  \ = music_string.replaceAll(\"[a-z]+$\", \"\");\n        music_string = music_string.replaceAll(\"\
  ^[a-z]+\", \"\");\n        music_string = music_string.replaceAll(\"[a-z]+$\", \"\
  \");\n        music_string = music_string.replaceAll(\"^[a-z]+\", \"\");\n     \
  \   music_string = music_string.replaceAll(\"[a-z]+$\", \"\");\n        music_string\
  \ = music_string.replaceAll(\"^[a-z]+\", \"\");\n        music_string = music_string.replaceAll(\"\
  [a-z]+$\", \"\");\n        music_string = music_string.replaceAll(\"^[a-z]+\", \"\
  \");\n        music_string = music_string.replaceAll(\"[a-z]+$\", \"\");\n     \
  \   music_string = music_string.replaceAll(\"^[a-z]+\", \"\");\n        music_string\
  \ = music_string.replaceAll(\"[a-z]+$\", \"\");\n        music_string = music_string.replaceAll(\"\
  ^[a-z]+\", \"\");\n        music_string = music_string.replaceAll(\"[a-z]+$\", \"\
  \");\n        music_string = music_string.replaceAll(\"^[a-z]+\", \"\");\n     \
  \   music_string = music_string.replaceAll(\"[a-z]+$\", \"\");\n        music_string\
  \ = music_string.replaceAll(\"^[a-z]+\", \"\");\n        music_string = music_string.replaceAll(\"\
  [a-z]+$\", \"\");\n        music_string = music_string.replace"
- "        // The answer is returned as a list of integers, where each integer represents\
  \ how many beats each\n        // note lasts. The answer is sorted by how long the\
  \ note lasts.\n\n        ArrayList<Integer> notes = new ArrayList<Integer>();\n\n\
  \        // The music string should be parsed in such way that all notes are separated\
  \ by spaces.\n        String[] music = music_string.split(\" \");\n        for (String\
  \ element : music) {\n            if (element.startsWith(\"o|\") || element.startsWith(\"\
  o.|\")) {\n                notes.add(notes.size() + 4);\n            } else if (element.startsWith(\"\
  .|\")) {\n                notes.add(notes.size() + 2);\n            } else if (element.startsWith(\"\
  o\")) {\n                notes.add(notes.size() + 1);\n            }\n        }\n\
  \n        return notes;"
- "        ArrayList<Integer> beats = new ArrayList<>();\n        String[] music_note_elements\
  \ = music_string.split(\" \");\n        boolean last_note = false;\n        for\
  \ (String note_element : music_note_elements) {\n            boolean last_beat =\
  \ note_element.equals(\"o\");\n            if (last_beat) {\n                last_note\
  \ = true;\n                beats.add(4);\n            } else {\n               \
  \ last_note = false;\n                beats.add(beats.size());\n            }\n\
  \        }\n        return beats;"
- "        ArrayList<Integer> beats = new ArrayList<>();\n        int note = music_string.charAt(0);\n\
  \        String rest = music_string.substring(1);\n        if (note == '.') {\n\
  \            int beat = 1;\n            while (rest.charAt(0) == '.') {\n      \
  \          beat++;\n                rest = rest.substring(1);\n            }\n \
  \           beats.add(beat);\n        } else if (note == 'o') {\n            int\
  \ beat = 1;\n            while (rest.charAt(0) == '|') {\n                beat++;\n\
  \                rest = rest.substring(1);\n            }\n            beats.add(beat);\n\
  \        } else {\n            int beat = 1;\n            while (rest.charAt(0)\
  \ != '|' && rest.charAt(0) != '.') {\n                beat++;\n                rest\
  \ = rest.substring(1);\n            }\n            beats.add(beat);\n        }\n\
  \        return beats;"
- "        ArrayList<Integer> beats = new ArrayList<Integer>();\n        String[]\
  \ parts = music_string.split(\"\\\\|\");\n        for (String part : parts) {\n\
  \            String[] note_parts = part.split(\"o\");\n            int beats_part\
  \ = Integer.parseInt(note_parts[1]);\n            beats.add(beats_part);\n     \
  \   }\n        return beats;"
- "        ArrayList<Integer> notes = new ArrayList<>();\n        String s = music_string;\n\
  \        String note = \"\";\n        boolean repeat = false;\n        for (int\
  \ i = 0; i < s.length(); i++) {\n            switch (s.charAt(i)) {\n          \
  \      case 'o':\n                    note = note + \"0\";\n                   \
  \ break;\n                case 'o|':\n                    note = note + \"1\";\n\
  \                    break;\n                case '.|':\n                    note\
  \ = note + \"2\";\n                    break;\n                case '|':\n     \
  \               note = note + \"3\";\n                    break;\n             \
  \   default:\n                    note = note + s.charAt(i);\n                 \
  \   break;\n            }\n        }\n        note = note.substring(0, note.length()\
  \ - 1);\n        int[] intNote = Integer.parseInt(note);\n        for (int i = 0;\
  \ i < intNote.length; i++) {\n            String new_note = \"\";\n            if\
  \ (intNote[i] == 1) {\n                for (int j = 0; j < intNote.length; j++)\
  \ {\n                    if (j == i) {\n                        continue;\n    \
  \                } else {\n                        new_note = new_note + intNote[j]\
  \ + \"0\";\n                    }\n                }\n            } else if (intNote[i]\
  \ == 2) {\n                for (int j = 0; j < intNote.length; j++) {\n        \
  \            if (j == i) {\n                        continue;\n                \
  \    } else {\n                        new_note = new_note + intNote[j] + \"1\"\
  ;\n                    }\n                }\n            } else if (intNote[i] ==\
  \ 3) {\n                for (int j = 0; j < intNote.length; j++) {\n           \
  \         if (j == i) {\n                        continue;\n                   \
  \ } else {\n                        new_note = new_note + intNote[j] + \"2\";\n\
  \                    }\n                }\n            } else {\n              \
  \  continue;\n            }\n            notes = notes.stream()\n              \
  \      .map(n -> Integer.parseInt(new_note))\n                    .collect(Collectors.toList());\n\
  \        }\n        return notes;"
- "        ArrayList<Integer> beats = new ArrayList<Integer>();\n        for (char\
  \ c : music_string.toCharArray()) {\n            if (c == 'o') {\n             \
  \   if (beats.size() == 0) {\n                    beats.add(4);\n              \
  \  }\n                else {\n                    beats.add(beats.get(beats.size()\
  \ - 1) * 4 + 1);\n                }\n            }\n            else if (c == '.')\
  \ {\n                if (beats.size() > 1) {\n                    beats.add(beats.get(beats.size()\
  \ - 1) * 4 + 1);\n                }\n            }\n            else if (c == '|')\
  \ {\n                beats.add(1);\n            }\n        }\n        return beats;"
- "        ArrayList<Integer> beat_count = new ArrayList<Integer>();\n        for\
  \ (int i = 0; i < music_string.length(); i++) {\n            char note = music_string.charAt(i);\n\
  \            switch (note) {\n                case 'o': beat_count.add(4); break;\n\
  \                case 'o|': beat_count.add(2); break;\n                case '.|':\
  \ beat_count.add(1, 1); break;\n                default: break;\n            }\n\
  \        }\n        return beat_count;"
- "        ArrayList<Integer> music_list = new ArrayList<Integer>();\n        String[]\
  \ song = music_string.split(\"\\\\|\");\n        String[] notes = song[0].split(\"\
  \ \");\n        for (int i = 0; i < notes.length; i++) {\n            music_list.add(Integer.parseInt(notes[i]));\n\
  \        }\n        for (int i = 1; i < song.length; i++) {\n            String[]\
  \ song_notes = song[i].split(\" \");\n            music_list.add(music_list.get(i)\
  \ - music_list.get(i - 1));\n            for (int j = 0; j < song_notes.length;\
  \ j++)\n                music_list.add(music_list.get(i) + Integer.parseInt(song_notes[j]));\n\
  \        }\n        return music_list;"
- "        // Your code here\n        ArrayList<Integer> notes = new ArrayList<Integer>();\n\
  \        \n        for(int i = 0; i < music_string.length(); i++){\n           \
  \ if(music_string.charAt(i) == 'o'){\n                notes.add(4);\n          \
  \  }\n            else if(music_string.charAt(i) == 'o|'){\n                notes.add(2);\n\
  \            }\n            else if(music_string.charAt(i) == '.|'){\n         \
  \       notes.add(1);\n            }\n        }\n        return notes;"
- "        music_string = music_string.replaceAll(\"(.+)\", \"$1\");\n        music_string\
  \ = music_string.replaceAll(\"\\\\s\", \"\");\n        music_string = music_string.replaceAll(\"\
  \\\\.\", \"\");\n        music_string = music_string.replaceAll(\"\\\\[\", \"\"\
  );\n        music_string = music_string.replaceAll(\"\\\\]\", \"\");\n        music_string\
  \ = music_string.replaceAll(\"\\\\|\", \"\");\n        music_string = music_string.replaceAll(\"\
  \\\\+\", \"\");\n        music_string = music_string.replaceAll(\"\\\\-\", \"\"\
  );\n        music_string = music_string.replaceAll(\"\\\\(\", \"\");\n        music_string\
  \ = music_string.replaceAll(\"\\\\)\", \"\");\n        music_string = music_string.replaceAll(\"\
  \\\\^\", \"\");\n        music_string = music_string.replaceAll(\"\\\\:\", \"\"\
  );\n        music_string = music_string.replaceAll(\"\\\\{\", \"\");\n        music_string\
  \ = music_string.replaceAll(\"\\\\}\", \"\");\n        music_string = music_string.replaceAll(\"\
  \\\\+\", \"\");\n        music_string = music_string.replaceAll(\"\\\\-\", \"\"\
  );\n        music_string = music_string.replaceAll(\"\\\\(\", \"\");\n        music_string\
  \ = music_string.replaceAll(\"\\\\)\", \"\");\n        music_string = music_string.replaceAll(\"\
  \\\\^\", \"\");\n        music_string = music_string.replaceAll(\"\\\\:\", \"\"\
  );\n        music_string = music_string.replaceAll(\"\\\\{\", \"\");\n        music_string\
  \ = music_string.replaceAll(\"\\\\}\", \"\");\n        music_string = music_string.replaceAll(\"\
  \\\\+\", \"\");\n        music_string = music_string.replaceAll(\"\\\\-\", \"\"\
  );\n        music_string = music_string.replaceAll(\"\\\\(\", \"\");\n        music_string\
  \ = music_string.replaceAll(\"\\\\)\", \"\");\n        music_string = music_string.replaceAll(\"\
  \\\\^\", \"\");\n        music_string = music_string.replaceAll(\"\\\\:\", \"\"\
  );\n        music_string = music_string.replaceAll(\"\\\\{\", \"\");\n        music_string\
  \ = music_string.replaceAll(\"\\\\}\", \"\");\n        music_string = music_string.replaceAll(\"\
  \\\\+\", \"\");\n        music_string = music_string.replaceAll(\"\\\\-\", \"\"\
  );\n        music_string = music_string.replaceAll(\"\\\\(\", \"\");\n        music_string\
  \ = music_string.replaceAll(\"\\\\)\", \"\");\n        music_"
- "        ArrayList<Integer> beats = new ArrayList<>();\n\n        music_string.trim().replaceAll(\"\
  (.)\", \"$1|\").split(\"[|]\");\n\n        for (int i = 0; i < music_string.length();\
  \ i++) {\n            String c = music_string.charAt(i);\n\n            int beats\
  \ = 4;\n\n            if (c.equals(\".\")) {\n                beats = 2;\n     \
  \       } else if (c.equals(\"o\")) {\n                beats = 1;\n            }\
  \ else if (c.equals(\"o|\")) {\n                beats = 2;\n            }\n\n  \
  \          beats.add(beats);\n        }\n\n        return beats;"
- "        ArrayList<Integer> results = new ArrayList<>();\n        music_string =\
  \ music_string.trim();\n        for (int i = 0; i < music_string.length(); i++)\
  \ {\n            if (music_string.charAt(i) == '|') {\n                int note\
  \ = music_string.charAt(i + 1);\n                int last_beat = (int) Math.pow(2,\
  \ (note-'0')-1);\n                results.add(last_beat);\n                i +=\
  \ 1;\n            } else {\n                results.add((int) Math.pow(2, music_string.charAt(i)\
  \ - '0'));\n            }\n        }\n        return results;"
- "        ArrayList<Integer> beats = new ArrayList<Integer>();\n        for (int\
  \ i = 0; i < music_string.length(); i++) {\n            char c = music_string.charAt(i);\n\
  \            if ('o' == c || 'o|' == c) {\n                beats.add(4);\n     \
  \           continue;\n            }\n            if ('.|' == c) {\n           \
  \     beats.add(1);\n                continue;\n            }\n            if (i\
  \ == 0) {\n                beats.add(0);\n            }\n        }\n        return\
  \ beats;"
- "        ArrayList<Integer> results = new ArrayList<Integer>();\n        music_string\
  \ = music_string.replaceAll(\"\\\\P{P}\", \"\");\n\n        StringBuilder builder\
  \ = new StringBuilder(music_string);\n        builder.trim();\n        int i = 0;\n\
  \        while (i < builder.length()) {\n            char c = builder.charAt(i);\n\
  \            if (c == '.' || c == 'o') {\n                int beat_length = builder.length()\
  \ - i - 2;\n                results.add(beat_length);\n                i++;\n  \
  \              continue;\n            }\n\n            int note_length = 0;\n  \
  \          char note_char = 'o';\n\n            if (c == ']') {\n              \
  \  note_char = '[';\n            }\n\n            do {\n                note_char++;\n\
  \                note_length++;\n            } while (!Character.isDigit(builder.charAt(i\
  \ + note_length)));\n\n            results.add(note_length);\n            i += note_length;\n\
  \        }\n        return results;"
- "        ArrayList<Integer> beats = new ArrayList<Integer>();\n\n        music_string\
  \ = music_string.toLowerCase();\n\n        music_string = music_string.replace(\"\
  o\", \"o|\").replace(\"o|\", \"o|\").replace(\"o|o\", \"o|o|\")\n              \
  \  .replace(\"o|o|o\", \"o|o|o|o|\").replace(\"o|o|o|o|o\", \"o|o|o|o|o|o\").replace(\"\
  o|o|o|o|o|o|o\", \"o|o|o|o|o|o|o|o\");\n        music_string = music_string.replace(\"\
  .|\", \"o|o|o|o|o|o|o|\");\n\n        music_string = music_string.replace(\"o|o\"\
  , \"o|o|\").replace(\"o|o|o|o\", \"o|o|o|o|\").replace(\"o|o|o|o|o|o\", \"o|o|o|o|o|o|o\"\
  );\n        music_string = music_string.replace(\"o|o|o|o\", \"o|o|o|o|\").replace(\"\
  o|o|o|o|o|o\", \"o|o|o|o|o|o|\");\n        music_string = music_string.replace(\"\
  o|o|o|o|o\", \"o|o|o|o|o|\").replace(\"o|o|o|o|o|o|o\", \"o|o|o|o|o|o|o|\");\n \
  \       music_string = music_string.replace(\"o|o|o|o|o|o\", \"o|o|o|o|o|o\").replace(\"\
  o|o|o|o|o|o|o\", \"o|o|o|o|o|o|o|\");\n        music_string = music_string.replace(\"\
  o|o|o|o|o|o\", \"o|o|o|o|o|o|\").replace(\"o|o|o|o|o|o|o|o\", \"o|o|o|o|o|o|o|o|o\"\
  );\n        music_string = music_string.replace(\"o|o|o|o|o|o|o\", \"o|o|o|o|o|o|o\"\
  ).replace(\"o|o|o|o|o|o|o|o\", \"o|o"
- "        ArrayList<Integer> beats = new ArrayList<Integer>();\n        String[]\
  \ tokens = music_string.split(\"[ .]\");\n\n        for (String token : tokens)\
  \ {\n            if (token.equals(\".\"))\n                beats.add(0);\n     \
  \       else if (token.equals(\"o\"))\n                beats.add(4);\n         \
  \   else if (token.equals(\"o|\"))\n                beats.add(2);\n            else\n\
  \                throw new IllegalArgumentException();\n        }\n\n        return\
  \ beats;"
- "        String split[] = music_string.split(\"\\\\|\");\n        ArrayList<Integer>\
  \ ans = new ArrayList<Integer>();\n        for (int i = 0; i < split.length; i++)\
  \ {\n            int note = split[i].charAt(0) - '0';\n            ans.add(note);\n\
  \        }\n        return ans;"
- "        // Write your code here\n        ArrayList<Integer> beats = new ArrayList<Integer>();\n\
  \        String note = null;\n        char note_char = null;\n        char next_note_char\
  \ = null;\n        boolean note_end = false;\n        beats.add(0);\n        int\
  \ beat = 1;\n        for (int i = 0; i < music_string.length(); i++) {\n       \
  \     note_char = music_string.charAt(i);\n            next_note_char = music_string.charAt(i\
  \ + 1);\n            if (note_end && note_char == note_char) {\n               \
  \ if (next_note_char == note_char) {\n                    beat++;\n            \
  \    } else {\n                    beats.add(beat);\n                    beats.add(0);\n\
  \                    beat++;\n                }\n                beats.add(beat);\n\
  \                beats.add(0);\n                beat++;\n                note_end\
  \ = false;\n            } else if (note_char == '.') {\n                note_end\
  \ = true;\n            } else if (note_end && note_char == 'o') {\n            \
  \    note_end = false;\n            }\n        }\n        beats.add(beat);\n   \
  \     return beats;"
- '        // Implement this function!'
- "        ArrayList<Integer> array = new ArrayList<>();\n        boolean last;\n\
  \        StringBuilder stringBuilder = new StringBuilder();\n        for (int i\
  \ = 0; i < music_string.length(); i++) {\n            char c = music_string.charAt(i);\n\
  \            if (c == 'o') {\n                if (stringBuilder.length() > 0) {\n\
  \                    array.add(Integer.parseInt(stringBuilder.toString()));\n  \
  \              }\n                last = !last;\n                stringBuilder.setLength(0);\n\
  \            } else if (c == '|') {\n                if (stringBuilder.length()\
  \ > 0) {\n                    array.add(Integer.parseInt(stringBuilder.toString()));\n\
  \                }\n                last = !last;\n                stringBuilder.setLength(0);\n\
  \            } else if (c == ' ') {\n                if (stringBuilder.length()\
  \ > 0) {\n                    array.add(Integer.parseInt(stringBuilder.toString()));\n\
  \                }\n                last = !last;\n                stringBuilder.setLength(0);\n\
  \            } else if (c.equals('.')) {\n                if (stringBuilder.length()\
  \ > 0) {\n                    array.add(Integer.parseInt(stringBuilder.toString()));\n\
  \                }\n                last = !last;\n                stringBuilder.setLength(0);\n\
  \            } else {\n                stringBuilder.append(c);\n            }\n\
  \        }\n        if (stringBuilder.length() > 0) {\n            array.add(Integer.parseInt(stringBuilder.toString()));\n\
  \        }\n        return array;"
- "        ArrayList<Integer> beats = new ArrayList<Integer>();\n        // We will\
  \ keep track of number of beats already printed to output string\n        int beats_printed\
  \ = 0;\n        // We will store all the notes we are currently parsing\n      \
  \  ArrayList<String> notes = new ArrayList<String>();\n        // If we are currently\
  \ parsing a single note, store it in our notes list\n        if (music_string.charAt(0)\
  \ == 'o') {\n            notes.add(music_string);\n        }\n        // We will\
  \ keep track of how many notes we have parsed\n        int note_count = 0;\n   \
  \     // Iterate over each character in input string\n        for (int i = 0; i\
  \ < music_string.length(); i++) {\n            // Store current character in a variable\n\
  \            char c = music_string.charAt(i);\n            // Print out current\
  \ character as output\n            System.out.print(c + \" \");\n            //\
  \ Check if current character represents end of current note\n            if (c ==\
  \ '|') {\n                // We will store previous note in variable (we will need\
  \ to store it when parsing\n                // multiple notes)\n               \
  \ String last_note = notes.get(note_count);\n                // We will store new\
  \ note we are currently parsing\n                String new_note = \"\";\n     \
  \           // If there is more than one note we are parsing, we will parse all\
  \ of them, incrementing\n                // the counter note_count each time\n \
  \               if (note_count > 0) {\n                    // Iterate over all notes\
  \ we had parsed\n                    for (int j = 0; j < note_count; j++) {\n  \
  \                      // Add last note to new note\n                        new_note\
  \ += last_note;\n                        // Remove last note from list of notes\
  \ we had\n                        notes.remove(notes.get(j));\n                \
  \    }\n                }\n                // We will store new note we are currently\
  \ parsing\n                String new_note2 = \"\";\n                // If there\
  \ is more than one note we are parsing, we will parse all of them, incrementing\n\
  \                // the counter note_count each time\n                if (note_count\
  \ > 0) {\n                    // Iterate over all notes we had parsed\n        \
  \            for (int j = 0; j < note_count; j++) {\n                        //\
  \ Add last note to new note\n                        new_note2 += last_note;\n \
  \                       // Remove last note from list of notes we had\n        \
  \                notes.remove(notes.get(j));\n                    }\n          \
  \      }\n                // We will store new note we are currently parsing\n \
  \               String new_note3 = \"\";\n                // If there is more than\
  \ one note we are parsing, we will parse all of them, incrementing\n           \
  \     // the counter note_count each time\n                if (note_count > 0) {\n\
  \                    // Iterate over all notes we had parsed\n                 \
  \   for (int j = 0; j < note_count; j++) {\n                        // Add last\
  \ note to new note\n                        new_note3 += last_note;\n          \
  \              // Remove last note from list of notes we had\n                 \
  \       notes.remove(notes.get(j));\n                    }\n                }\n\
  \                // We will store new "
- "        ArrayList<Integer> beats = new ArrayList<>();\n        // This part is\
  \ pretty straightforward:\n        // 1. Split your musical string on spaces ('\
  \ ')\n        // 2. Then go over your array and collect how many beats each element\
  \ lasts\n        // 3. Then you just need to sum them\n        for (String musicalElement\
  \ : music_string.split(\"\\\\s\")) {\n            int beatCount = 0;\n         \
  \   for (int i = 0; i < musicalElement.length(); i++) {\n                char currentChar\
  \ = musicalElement.charAt(i);\n                switch (currentChar) {\n        \
  \            case 'o':\n                    case '|':\n                        beatCount++;\n\
  \                        break;\n                    default:\n                \
  \        // do nothing\n                        break;\n                }\n    \
  \        }\n            beats.add(beatCount);\n        }\n        return beats;"
- "        ArrayList<Integer> beats = new ArrayList<>();\n        String[] parts =\
  \ music_string.split(\" \");\n        Arrays.stream(parts).filter(part -> part.matches(\"\
  o|\\\\.|\")).forEach(part -> {\n            String[] note = part.split(\"\\\\.|\"\
  );\n            beats.add(Integer.valueOf(note[0]));\n        });\n        return\
  \ beats;"
- "        ArrayList<Integer> beats = new ArrayList<Integer>();\n        music_string=music_string.trim();\n\
  \        for (int i=0; i<music_string.length(); i++) {\n            if (music_string.charAt(i)=='.')\
  \ {\n                beats.add(1);\n            } else if (music_string.charAt(i)=='|')\
  \ {\n                beats.add(2);\n            } else if (music_string.charAt(i)=='o')\
  \ {\n                beats.add(4);\n            } else {\n                beats.add(1);\n\
  \            }\n        }\n        return beats;"
- '        // Write your code here'
- "        // Your code here\n        ArrayList<Integer> music_notes = new ArrayList<>();\n\
  \        String[] parts = music_string.split(\" \");\n        Arrays.sort(parts);\n\
  \        for (int i = 0; i < parts.length; i++) {\n            switch (parts[i])\
  \ {\n                case \"o\":\n                    music_notes.add(4);\n    \
  \                break;\n                case \"o|\":\n                    music_notes.add(2);\n\
  \                    break;\n                case \".|\":\n                    music_notes.add(1);\n\
  \                    break;\n                default:\n                    music_notes.add(1);\n\
  \                    break;\n            }\n        }\n        return music_notes;"
- "        ArrayList<Integer> notes = new ArrayList<Integer>();\n        for (int\
  \ i = 0; i < music_string.length(); i++) {\n            notes.add(i);\n        }\n\
  \        int counter = 0;\n        StringBuilder builder = new StringBuilder();\n\
  \        for (String note : music_string.split(\" \")) {\n            if (note.equals(\"\
  .\") || note.equals(\"|\") || note.equals(\"o\")) {\n                builder.deleteCharAt(builder.length()\
  \ - 1);\n            } else if (note.equals(\"o|\")) {\n                builder.deleteCharAt(builder.length()\
  \ - 1);\n                notes.add(counter++);\n            } else if (note.equals(\"\
  o\")) {\n                builder.deleteCharAt(builder.length() - 1);\n         \
  \   } else if (note.equals(\"|\")) {\n                builder.deleteCharAt(builder.length()\
  \ - 1);\n            }\n        }\n        notes.add(music_string.length());\n \
  \       return notes;"
- "        ArrayList<Integer> notes = new ArrayList<Integer>();\n        music_string\
  \ = music_string.trim();\n        String[] arr = music_string.split(\"[|]\");\n\n\
  \        for (String s : arr) {\n            if (s.trim().isEmpty()) {\n       \
  \         continue;\n            }\n            int beats = 1;\n            String\
  \ note = s.trim();\n            if (note.contains(\"o\")) {\n                beats\
  \ = 4;\n            } else if (note.contains(\"|\")) {\n                beats =\
  \ 2;\n            } else if (note.contains(\".\")) {\n                beats = 1;\n\
  \            } else {\n                note = s.replaceAll(\"\\\\s\", \"\");\n \
  \           }\n            notes.add(beats);\n        }\n        return notes;"
- "        ArrayList<Integer> ans = new ArrayList<Integer>();\n        StringTokenizer\
  \ st = new StringTokenizer(music_string, \"| \");\n        while (st.hasMoreTokens())\
  \ {\n            String token = st.nextToken();\n            if (token.equals(\"\
  .\"))\n                ans.add(1);\n            else if (token.equals(\"o\")) {\n\
  \                ans.add(4);\n            }\n            else {\n              \
  \  ans.add(1);\n                ans.add(4);\n            }\n        }\n        return\
  \ ans;"
- "        ArrayList<Integer> beats = new ArrayList<>();\n        music_string = music_string.toLowerCase().replaceAll(\"\
  o\", \"\").replaceAll(\".\", \"\");\n        String[] split = music_string.split(\"\
  [^a-z]\");\n        Arrays.stream(split).forEach(str -> {\n            if (str.equals(\"\
  o\")) {\n                beats.add(4);\n            } else if (str.equals(\"|\"\
  )) {\n                beats.add(2);\n            } else if (str.equals(\".\")) {\n\
  \                beats.add(1);\n            } else {\n                throw new\
  \ Exception(\"Invalid music string format: \" + music_string);\n            }\n\
  \        });\n        return beats;"
- "        ArrayList<Integer> beats = new ArrayList<Integer>();\n        music_string\
  \ = music_string.trim();\n        int length = music_string.length();\n        int\
  \ i = 0;\n        while (i < length) {\n            int c = music_string.charAt(i++);\n\
  \            if (c == '.') {\n                while (i < length && music_string.charAt(i)\
  \ != '.') {\n                    i++;\n                }\n                if (i\
  \ < length) {\n                    i++;\n                    while (i < length &&\
  \ music_string.charAt(i) != '|') {\n                        i++;\n             \
  \       }\n                    if (i < length) {\n                        int l\
  \ = music_string.charAt(i++);\n                        switch (l) {\n          \
  \                  case 'o':\n                            case '|':\n          \
  \                  case ' ':\n                                beats.add(4);\n  \
  \                              break;\n                            case 'o|':\n\
  \                            case '.|':\n                            case 'o':\n\
  \                                beats.add(2);\n                               \
  \ break;\n                            default:\n                               \
  \ beats.add(1);\n                                break;\n                      \
  \  }\n                    }\n                }\n            }\n        }\n     \
  \   return beats;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        if (music_string\
  \ == null || music_string.isEmpty())\n            return result;\n        // Convert\
  \ each note to its ASCII counterpart\n        music_string = music_string.replaceAll(\"\
  \\\\s\", \"\");\n        music_string = music_string.replaceAll(\"\\\\|\", \"\"\
  );\n        music_string = music_string.replaceAll(\"o\", \"\");\n        music_string\
  \ = music_string.replaceAll(\".\", \"\");\n        // Split string by spaces and\
  \ remove empty values\n        String[] notes = music_string.split(\" \");\n   \
  \     for (String note: notes) {\n            if (note.isEmpty())\n            \
  \    continue;\n            music_string = \"\";\n            // Convert each note\
  \ to its ASCII counterpart\n            note = note.replaceAll(\"\\\\s\", \"\");\n\
  \            note = note.replaceAll(\"\\\\|\", \"\");\n            note = note.replaceAll(\"\
  o\", \"\");\n            note = note.replaceAll(\".\", \"\");\n            // Split\
  \ string by spaces and remove empty values\n            String[] beats = note.split(\"\
  \ \");\n            for (String beat: beats) {\n                if (beat.isEmpty())\n\
  \                    continue;\n                music_string = \"\";\n         \
  \       // Convert each note to its ASCII counterpart\n                beat = beat.replaceAll(\"\
  \\\\s\", \"\");\n                beat = beat.replaceAll(\"\\\\|\", \"\");\n    \
  \            beat = beat.replaceAll(\"o\", \"\");\n                beat = beat.replaceAll(\"\
  .\", \"\");\n                // Split string by spaces and remove empty values\n\
  \                String[] notes = beat.split(\"-\");\n                if (notes.length\
  \ == 2) {\n                    result.add(Integer.parseInt(notes[0]) * 4);\n   \
  \                 result.add(Integer.parseInt(notes[1]) * 2);\n                }\
  \ else if (notes.length == 1) {\n                    result.add(Integer.parseInt(notes[0]));\n\
  \                } else {\n                    throw new IllegalArgumentException(\"\
  Unknown note format: '\" + music_string + \"'\");\n                }\n         \
  \   }\n        }\n        return result;"
- "        ArrayList<Integer> beats = new ArrayList<Integer>();\n        int i = 0;\n\
  \        while (i < music_string.length() && music_string.charAt(i) != '|') {\n\
  \            if (music_string.charAt(i) == 'o') {\n                beats.add(4);\n\
  \            }\n            if (music_string.charAt(i) == 'o|') {\n            \
  \    beats.add(2);\n            }\n            if (music_string.charAt(i) == '.|')\
  \ {\n                beats.add(1);\n            }\n            ++i;\n        }\n\
  \        return beats;"
- "        // write your code here\n        ArrayList<Integer> notes = new ArrayList<Integer>();\n\
  \        if (music_string.isEmpty()) return notes;\n        String[] parts = music_string.split(\"\
  \ \");\n        for (int i = 0; i < parts.length; i++) {\n            notes.add(getBeatCount(parts[i]));\n\
  \        }\n        return notes;"
- "        ArrayList<Integer> music_list = new ArrayList<Integer>();\n        music_list.addAll(Arrays.stream(music_string.split(\"\
  \ \"))\n                .map(music_string::length)\n                .collect(Collectors.toList()));\n\
  \        return music_list;"
- "        ArrayList<Integer> beats = new ArrayList<>();\n        music_string.toLowerCase().replaceAll(\"\
  \\\\s\", \"\");\n        String[] split = music_string.split(\"|\");\n        for\
  \ (int i = 0; i < split.length; i++) {\n            int beats = split[i].length();\n\
  \            while (beats % 4 != 0) {\n                beats--;\n            }\n\
  \            beats.add(beats);\n        }\n        return beats;"
- "        ArrayList<Integer> beats = new ArrayList<Integer>();\n        int beat\
  \ = 0;\n        String symbol;\n        for (int i = 0; i < music_string.length();\
  \ i++) {\n            symbol = music_string.substring(i, i + 1);\n            switch(symbol)\
  \ {\n                case 'o':\n                    beats.add(beat);\n         \
  \           beat = 0;\n                    break;\n                case 'o|':\n\
  \                    beats.add(beat + 4);\n                    beat += 2;\n    \
  \                break;\n                case '.|':\n                    beats.add(beat\
  \ + 1);\n                    beat += 1;\n                    break;\n          \
  \      default:\n                    break;\n            }\n        }\n        return\
  \ beats;"
- "        ArrayList<Integer> notes = new ArrayList<>();\n        // Get length of\
  \ music string\n        int len = music_string.length();\n        // Start at first\
  \ note and go through string incrementing\n        // current note counter when\
  \ encountering dot character\n        for (int i = 0; i < len; i++) {\n        \
  \    char c = music_string.charAt(i);\n            // If dot encountered then store\
  \ note and increment counter by one\n            if (c == '.') {\n             \
  \   notes.add(notes.size());\n                notes.add(1);\n            }\n   \
  \         // If not dot then just increment current note counter\n            else\n\
  \                notes.add(notes.size());\n        }\n        return notes;"
- "        // Return list of integers corresponding to musical notes.\n        ArrayList<Integer>\
  \ beats = new ArrayList<>();\n        int note_length = music_string.length();\n\
  \        int i = -1;\n        while (i < note_length) {\n            i = nextNote(music_string,\
  \ i);\n            while (i < note_length) {\n                String c = music_string.charAt(i);\n\
  \                if (isNote(c)) {\n                    int beats = countBeats(music_string,\
  \ i);\n                    beats.add(beats);\n                    i = nextNote(music_string,\
  \ i);\n                } else {\n                    ++i;\n                }\n \
  \           }\n        }\n        return beats;"
- "        ArrayList<Integer> notes = new ArrayList<Integer>();\n        String s\
  \ = music_string;\n        music_string.trim();\n        music_string.replaceAll(\"\
  \ \", \"\");\n        music_string.replaceAll(\"\\\\{\", \"\");\n        music_string.replaceAll(\"\
  \\\\}\", \"\");\n        music_string.replaceAll(\"\\\\[\", \"\");\n        music_string.replaceAll(\"\
  \\\\]\", \"\");\n        music_string.replaceAll(\"\\\\\\\\\", \"\");\n        music_string.replaceAll(\"\
  \\\\[\\\\]\", \"\");\n        music_string.replaceAll(\"\\\\{\", \"\");\n      \
  \  music_string.replaceAll(\"\\\\}\", \"\");\n        music_string.replaceAll(\"\
  \\\\\\\\\", \"\");\n        music_string.replaceAll(\"\\\\]\", \"\");\n        music_string.replaceAll(\"\
  \\\\[\", \"\");\n        music_string.replaceAll(\"\\\\]\", \"\");\n        music_string.replaceAll(\"\
  \\\\{\", \"\");\n        music_string.replaceAll(\"\\\\}\", \"\");\n        s =\
  \ music_string;\n        music_string.trim();\n        music_string.replaceAll(\"\
  \ \", \"\");\n        music_string.replaceAll(\"\\\\{\", \"\");\n        music_string.replaceAll(\"\
  \\\\}\", \"\");\n        music_string.replaceAll(\"\\\\[\", \"\");\n        music_string.replaceAll(\"\
  \\\\]\", \"\");\n        music_string.replaceAll(\"\\\\]\", \"\");\n        music_string.replaceAll(\"\
  \\\\{\", \"\");\n        music_string.replaceAll(\"\\\\}\", \"\");\n        s =\
  \ music_string;\n        music_string.trim();\n        music_string.replaceAll(\"\
  \ \", \"\");\n        music_string.replaceAll(\"\\\\{\", \"\");\n        music_string.replaceAll(\"\
  \\\\}\", \"\");\n        music_string.replaceAll(\"\\\\[\", \"\");\n        music_string.replaceAll(\"\
  \\\\]\", \"\");\n        music_string.replaceAll(\"\\\\[\", \"\");\n        music_string.replaceAll(\"\
  \\\\]\", \"\");\n        music_string.replaceAll(\"\\\\{\", \"\");\n        music_string.replaceAll(\"\
  \\\\}\", \"\");\n        s = music_string;\n        music_string.trim();\n     \
  \   music_string.replaceAll(\" \", \"\");\n        music_string.replaceAll(\"\\\\\
  {\", \"\");\n        music_string.replaceAll(\"\\\\}\", \"\");\n        music_string.replaceAll(\"\
  \\\\[\", \"\");\n        music_string.replaceAll(\"\\\\]\", \"\");\n        music_string.replaceAll(\"\
  \\\\]\", \"\");\n        music_string.replace"
- "        ArrayList<Integer> beats = new ArrayList<Integer>();\n        String split[]\
  \ = music_string.split(\"|\");\n        for (int i = 0; i < split.length; i++) {\n\
  \            String current_note = split[i];\n            if (current_note.equals(\"\
  o\")) {\n                int current_beat = 1;\n                beats.add(current_beat);\n\
  \            } else if (current_note.equals(\"o|\")) {\n                int current_beat\
  \ = 1;\n                int half_note = current_beat/2;\n                beats.add(half_note);\n\
  \            } else {\n                int current_beat = 1;\n                int\
  \ quater_note = current_beat/4;\n                beats.add(quater_note);\n     \
  \       }\n        }\n        return beats;"
- "        // TODO: Implement this function\n        ArrayList<Integer> beats = new\
  \ ArrayList<>();\n        int number_of_beats = 0, beats_per_note = 4, number_of_notes\
  \ = 0;\n        int note_index = 0;\n        char c = ' ';\n        for (int i =\
  \ 0; i < music_string.length(); i++) {\n            c = music_string.charAt(i);\n\
  \            if (c == '.') {\n                beats_per_note = 1;\n            }\
  \ else if (c == '|') {\n                beats_per_note = 2;\n            } else\
  \ if (c == 'o') {\n                number_of_notes++;\n                if (number_of_notes\
  \ == 4) {\n                    number_of_beats++;\n                    beats_per_note\
  \ = 4;\n                    number_of_notes = 0;\n                } else if (number_of_notes\
  \ == 8) {\n                    beats_per_note = 4;\n                }\n        \
  \    } else if (c == 'o|') {\n                number_of_notes++;\n             \
  \   if (number_of_notes == 2) {\n                    number_of_beats++;\n      \
  \              beats_per_note = 2;\n                    number_of_notes = 0;\n \
  \               } else if (number_of_notes == 6) {\n                    beats_per_note\
  \ = 2;\n                }\n            } else if (c == '.|') {\n               \
  \ number_of_notes++;\n                if (number_of_notes == 1) {\n            \
  \        number_of_beats++;\n                    beats_per_note = 1;\n         \
  \           number_of_notes = 0;\n                }\n            }\n           \
  \ beats.add(beats_per_note);\n        }\n        System.out.println(beats);\n  \
  \      return beats;"
- "        ArrayList<Integer> beats = new ArrayList<Integer>();\n        String note_chunks\
  \ = music_string.split(\" \");\n        for (String chunk: note_chunks) {\n    \
  \        if (chunk.contains(\"|\")) {\n                String note = chunk.substring(0,\
  \ chunk.indexOf(\"|\"));\n                int duration = Integer.parseInt(chunk.substring(chunk.indexOf(\"\
  |\") + 1));\n                beats.add(note.equals(\"o\") ? 4 : note.equals(\"o|\"\
  ) ? 2 : note.equals(\".|\") ? 1 : 0);\n            } else if (chunk.contains(\"\
  o\")) {\n                beats.add(4);\n            } else {\n                beats.add(Integer.parseInt(chunk));\n\
  \            }\n        }\n        return beats;"
- "        ArrayList<Integer> temp = new ArrayList<>();\n        // To parse music\
  \ string, we use regular expressions to find out what is the note type and what\
  \ is the length.\n        // To find out what are the notes, we use the noteType\
  \ variable and set it to note type.\n        // The length variable will hold how\
  \ many beats each note lasts.\n        // To find out what are the lengths, we use\
  \ the length variable and set it to length type.\n        // We use regex to find\
  \ out what is the note length and what is the note type. Next, we set the\n    \
  \    // noteType variable to the note type and set lengthType variable to the note\
  \ length.\n        String noteType = \"\";\n        String lengthType = \"\";\n\
  \        String noteLength = \"\";\n        Pattern noteTypePattern = Pattern.compile(\"\
  (\\\\.|o|\\\\.|\\\\.|\\\\.|\\\\.|\\\\.|\\\\.|\\\\.|\\\\.|\\\\.|\\\\.|\\\\.|\\\\\
  .)\");\n        Pattern lengthTypePattern = Pattern.compile(\"([bB]?)\");\n    \
  \    Pattern noteLengthPattern = Pattern.compile(\"([0-9]+)(|[bB]?)\");\n      \
  \  Matcher noteTypeMatcher = noteTypePattern.matcher(music_string);\n        Matcher\
  \ lengthTypeMatcher = lengthTypePattern.matcher(music_string);\n        Matcher\
  \ noteLengthMatcher = noteLengthPattern.matcher(music_string);\n        // Check\
  \ whether the music string has any note or not.\n        if (noteTypeMatcher.find())\
  \ {\n            noteType = noteTypeMatcher.group(1);\n        }\n        if (lengthTypeMatcher.find())\
  \ {\n            lengthType = lengthTypeMatcher.group(1);\n        }\n        if\
  \ (noteLengthMatcher.find()) {\n            noteLength = noteLengthMatcher.group(1);\n\
  \        }\n        int length = 0;\n        if (lengthType.equals(\"b\")) {\n \
  \           length = Integer.parseInt(noteLength) - 1;\n        } else {\n     \
  \       length = Integer.parseInt(noteLength);\n        }\n        int noteLengthInt\
  \ = Integer.parseInt(noteLength);\n        ArrayList<Integer> music_list = music_string.split(\"\
  \ \").stream().filter(StringUtils::isNotEmpty).map(s -> Integer.parseInt(s)).collect(Collectors.toList());\n\
  \        if (music_list.size() > 0) {\n            for (int i = 0; i < music_list.size();\
  \ i++) {\n                if (music_list.get(i) == noteLengthInt && noteType.equals(\"\
  o\")) {\n                    music_list.set(i, length);\n                } else\
  \ {\n                    music_list.set(i, music_list.get(i) / noteLengthInt);\n\
  \                }\n            }\n        }\n        System.out.println(music_list);\n\
  \        return music_list;"
- "        // Your code goes here\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
  \n        // parse music string and split into note and rest\n        String[] music\
  \ = music_string.split(\" \");\n        // first element is note and rest is rest\n\
  \        note = music[0];\n        rest = music[1];\n\n        int note_counter\
  \ = 0;\n        int rest_counter = 0;\n\n        // loop through each character\
  \ of the music string\n        for (int i = 0; i < music.length; ++i) {\n      \
  \      // first loop through the rest of notes\n            if (note_counter ==\
  \ 0 && rest[rest_counter] == '.') {\n                // if next character is '.'\
  \ then count this rest\n                rest_counter++;\n            }\n       \
  \     else if (note_counter == 0 && rest[rest_counter] == 'o') {\n             \
  \   // if next character is 'o' then count this note\n                note_counter++;\n\
  \            }\n            else if (note_counter == 0 && rest[rest_counter] ==\
  \ '|') {\n                // if next character is '|' then count this rest\n   \
  \             rest_counter++;\n            }\n            else if (note_counter\
  \ == 0 && rest[rest_counter] == '.') {\n                // if next character is\
  \ '.' then count this rest\n                rest_counter++;\n            }\n   \
  \         else if (note_counter == 0 && rest[rest_counter] == '|') {\n         \
  \       // if next character is '|' then count this rest\n                rest_counter++;\n\
  \            }\n            else {\n                result.add(note_counter);\n\
  \                note_counter = 0;\n                rest_counter = 0;\n        \
  \    }\n        }\n        // add last rest\n        result.add(note_counter);\n\
  \n        return result;"
- "        // Initialize output to an empty list\n        ArrayList<Integer> output\
  \ = new ArrayList<Integer>();\n        // Iterate over music string\n        for\
  \ (char music_symbol : music_string.toCharArray()) {\n            // Determine what\
  \ type of music symbol we have\n            switch (music_symbol) {\n          \
  \      case 'o':\n                    // Add 1 to the output\n                 \
  \   output.add(1);\n                    break;\n                case 'o|':\n   \
  \                 // Add 2 to the output\n                    output.add(2);\n \
  \                   break;\n                case '|':\n                    // Add\
  \ 1 to the output\n                    output.add(1);\n                    break;\n\
  \                default:\n                    // Add 0 to the output\n        \
  \            output.add(0);\n            }\n        }\n        // Return output\n\
  \        return output;"
- "        if (music_string == null || music_string.trim().isEmpty()) return new ArrayList<>();\n\
  \        ArrayList<Integer> beats = new ArrayList<>();\n        music_string = music_string.toLowerCase();\n\
  \        music_string = music_string.trim();\n        music_string = music_string.replaceAll(\"\
  [\\\\. ]+\", \" \");\n        music_string = music_string.replaceAll(\"^\\\\s\"\
  , \"\");\n        music_string = music_string.replaceAll(\"\\\\s+$\", \"\");\n \
  \       // Find all notes in music string.\n        // Each note is marked with\
  \ prefix and suffix, and each note is separated by whitespace.\n        // We need\
  \ these two to parse notes.\n        String[] notes = music_string.split(\" \");\n\
  \        // Go through notes and mark all notes that begins with 'o' or '|' with\
  \ number 1, others with number 0.\n        for (String note : notes) {\n       \
  \     if (note.startsWith(\"o\") || note.startsWith(\"|\")) {\n                beats.add(1);\n\
  \            } else {\n                beats.add(0);\n            }\n        }\n\
  \        // Go through notes and mark all notes that ends with 'o' or '|' with number\
  \ 4, others with number 3.\n        for (int i = 0; i < notes.length; i++) {\n \
  \           if (notes[i].endsWith(\"o\") || notes[i].endsWith(\"|\")) {\n      \
  \          beats.add(4);\n            } else {\n                beats.add(3);\n\
  \            }\n        }\n        return beats;"
- "        ArrayList<Integer> beats = new ArrayList<Integer>();\n        music_string\
  \ = music_string.toUpperCase();\n        StringBuilder output = new StringBuilder();\n\
  \        boolean last = false;\n        music_string = music_string.replaceAll(\"\
  \\\\s\", \"\");\n        for (int i = 0; i < music_string.length(); i++) {\n   \
  \         if (music_string.charAt(i) == '.') {\n                last = true;\n \
  \           } else {\n                beats.add(0);\n                last = false;\n\
  \            }\n        }\n        for (int i = 0; i < music_string.length(); i++)\
  \ {\n            if (last && music_string.charAt(i) != '.') {\n                beats.add(1);\n\
  \            } else if (last && music_string.charAt(i) == '.') {\n             \
  \   beats.add(2);\n            } else if (last && music_string.charAt(i) == '|')\
  \ {\n                beats.add(2);\n            } else if (last && music_string.charAt(i)\
  \ == 'o') {\n                beats.add(4);\n            } else if (music_string.charAt(i)\
  \ == 'o') {\n                beats.add(4);\n                last = true;\n     \
  \       }\n        }\n        return beats;"
- "        ArrayList<Integer> notes = new ArrayList<>();\n\n        String[] notes_array\
  \ = music_string.split(\" \");\n        for (String note : notes_array) {\n    \
  \        if (note.equals(\"o\")) {\n                notes.add(4);\n            }\
  \ else if (note.equals(\"o|\")) {\n                notes.add(2);\n            }\
  \ else if (note.equals(\".|\")) {\n                notes.add(1);\n            }\n\
  \        }\n        return notes;"
- "        return music_string.split(\"\\\\|\").map(s -> s.startsWith(\"o\") ? 4\n\
  \                : s.startsWith(\"o|\") ? 2 : s.startsWith(\".|\") ? 1 : 0).collect(toList());"
- "        // TODO: Complete this method.\n\n        ArrayList<Integer> beats = new\
  \ ArrayList<Integer>();\n        music_string = music_string.toUpperCase();\n  \
  \      music_string.replaceAll(\"\\\\D\", \"\");\n        int split_point = music_string.indexOf(\"\
  |\");\n        music_string = music_string.substring(0, split_point);\n        String\
  \ notes = music_string.substring(split_point + 1);\n        String[] note_list =\
  \ notes.split(\"\\\\|\");\n        int i = 0;\n        int j = music_string.length();\n\
  \        for (String s : note_list) {\n            while (i >= j) {\n          \
  \      beats.add(0);\n                i--;\n            }\n            if (s.equals(\"\
  o\")) {\n                beats.add(4);\n                i = j;\n            } else\
  \ if (s.equals(\"o|\")) {\n                beats.add(2);\n                i = j;\n\
  \            } else if (s.equals(\".|\")) {\n                beats.add(1);\n   \
  \             i = j;\n            }\n            j--;\n        }\n        return\
  \ beats;"
- "        ArrayList<Integer> beats = new ArrayList<Integer>();\n        for (int\
  \ i = 0; i < music_string.length(); i++) {\n            char c = music_string.charAt(i);\n\
  \            int beat;\n            if ((c == 'o' || c == 'o|') && ((i + 2) == music_string.length()\
  \ || music_string.charAt(i + 2) == '|')) {\n                beat = 4;\n        \
  \        i += 3;\n            } else if (c == '.') {\n                beat = 1;\n\
  \                i++;\n            } else {\n                throw new IllegalArgumentException(\"\
  No such note in string\");\n            }\n            beats.add(beat);\n      \
  \  }\n        return beats;"
- "        // Your code here\n        String[] array = music_string.split(\"\\\\.|\\\
  \\|\");\n        ArrayList<Integer> array2 = new ArrayList<Integer>();\n       \
  \ for (int i = 0; i < array.length; i++) {\n            array2.add(Integer.valueOf(array[i]));\n\
  \        }\n        return array2;"
- "        ArrayList<Integer> beats = new ArrayList<Integer>();\n        StringBuilder\
  \ music_builder = new StringBuilder();\n        int beat = 0;\n        int last\
  \ = 1;\n        for (char note : music_string.toCharArray()) {\n            if (note\
  \ == 'o') {\n                music_builder.append(note + note + note + note + note);\n\
  \                beat += 4;\n                beats.add(beat);\n            } else\
  \ if (note == 'o|') {\n                music_builder.append(note + note + note);\n\
  \                beat += 2;\n                beats.add(beat);\n            } else\
  \ if (note == '.|') {\n                music_builder.append(note + note);\n    \
  \            beat++;\n                beats.add(beat);\n            }\n        \
  \    last++;\n        }\n        music_builder.append(music_builder.toString());\n\
  \        return beats;"
- "        ArrayList<Integer> beats = new ArrayList<>();\n        int n = music_string.length();\n\
  \        int m = music_string.indexOf('|', 1);\n        if (m == -1) return beats;\n\
  \        if (n == 0) return beats;\n        int current_beat = 0;\n        int current_beat2\
  \ = 0;\n        int current_beat3 = 0;\n        while (m >= 0) {\n            if\
  \ (music_string.charAt(m) == '|') {\n                current_beat2++;\n        \
  \        m++;\n            } else if (music_string.charAt(m) == '.') {\n       \
  \         current_beat3++;\n                m++;\n            } else if (music_string.charAt(m)\
  \ == 'o') {\n                current_beat++;\n                m++;\n           \
  \ }\n            m--;\n        }\n        beats.add(current_beat);\n        beats.add(current_beat2);\n\
  \        beats.add(current_beat3);\n        return beats;"
- '        return music_string.split("\\|").stream().map(s -> s.length() == 0 ? 1
  : s.substring(1).length() / 4).collect(toList());'
- "        ArrayList<Integer> beats = new ArrayList<>();\n        music_string.replaceAll(\"\
  [ \\\\.\\\\(\\\\)\\\\[]\", \"\");\n        music_string = music_string.replaceAll(\"\
  \\\\|$\", \"\");\n\n        music_string = music_string.replaceAll(\"(^|\\\\s|$)\"\
  , \"\");\n\n        music_string = music_string.replaceAll(\"^o\", \"o\");\n   \
  \     music_string = music_string.replaceAll(\"^o\\\\|\", \"o|\");\n        music_string\
  \ = music_string.replaceAll(\"^\\\\.\\\\|\", \".|\");\n\n        music_string =\
  \ music_string.replaceAll(\"^o$\", \"o\");\n        music_string = music_string.replaceAll(\"\
  ^o\\\\|$\", \"o|\");\n        music_string = music_string.replaceAll(\"^\\\\.\\\\\
  |$\", \".|\");\n\n        music_string = music_string.replaceAll(\"^o+\", \"o\"\
  );\n        music_string = music_string.replaceAll(\"^o\\\\|+\", \"o|\");\n    \
  \    music_string = music_string.replaceAll(\"^\\\\.\\\\|+\", \".|\");\n\n     \
  \   music_string = music_string.replaceAll(\"^.+\", \"o\");\n        music_string\
  \ = music_string.replaceAll(\"^o\\\\|.+\", \"o|\");\n        music_string = music_string.replaceAll(\"\
  ^\\\\.\\\\|.+\", \".|\");\n\n        music_string = music_string.replaceAll(\"^.+$\"\
  , \"o\");\n        music_string = music_string.replaceAll(\"^o\\\\|.+$\", \"o|\"\
  );\n        music_string = music_string.replaceAll(\"^\\\\.\\\\|.+$\", \".|\");\n\
  \n        music_string = music_string.replaceAll(\"^.+.+\", \"o\");\n        music_string\
  \ = music_string.replaceAll(\"^o\\\\|.+.+\", \"o|\");\n        music_string = music_string.replaceAll(\"\
  ^\\\\.\\\\|.+.+\", \".|\");\n\n        music_string = music_string.replaceAll(\"\
  ^.+.+$\", \"o\");\n        music_string = music_string.replaceAll(\"^o\\\\|.+.+$\"\
  , \"o|\");\n        music_string = music_string.replaceAll(\"^\\\\.\\\\|.+.+$\"\
  , \".|\");\n\n        music_string = music_string.replaceAll(\"^.+.+.+\", \"o\"\
  );\n        music_string = music_string.replaceAll(\"^o\\\\|.+.+.+\", \"o|\");\n\
  \        music_string = music_string.replaceAll(\"^\\\\.\\\\|"
- "        ArrayList<Integer> result = new ArrayList<>();\n        ArrayList<String>\
  \ notes = new ArrayList<>();\n        // Convert string into array of musical notes,\
  \ each of length 4\n        notes.add(music_string.substring(0, 2));\n        notes.add(music_string.substring(2,\
  \ 4));\n        notes.add(music_string.substring(4, 6));\n        notes.add(music_string.substring(6,\
  \ 8));\n        // Convert array of musical notes to list of integers\n        notes.stream().forEach((note)\
  \ -> {\n            result.add(note_to_int(note));\n        });\n        return\
  \ result;"
- "        ArrayList<Integer> beats = new ArrayList<>();\n        int counter = 0;\n\
  \        char currentChar = ' ';\n        for (char note : music_string.toCharArray())\
  \ {\n            switch (note) {\n            case 'o':\n                beats.add(4);\n\
  \                break;\n            case 'o|':\n                beats.add(2);\n\
  \                break;\n            case '.|':\n                beats.add(1);\n\
  \                break;\n            default:\n                counter++;\n    \
  \            beats.add(counter);\n            }\n            currentChar = note;\n\
  \        }\n        return beats;"
- "        ArrayList<Integer> notes = new ArrayList<>();\n        StringTokenizer\
  \ st = new StringTokenizer(music_string);\n        while (st.hasMoreTokens()) {\n\
  \            notes.add(getNoteBeatCount(st.nextToken()));\n        }\n        return\
  \ notes;"
- "        // your code goes here\n        ArrayList<Integer> notes = new ArrayList<>();\n\
  \        String last = \"\";\n        String current = \"\";\n        for (int i\
  \ = 0; i < music_string.length(); i++) {\n            char c = music_string.charAt(i);\n\
  \            if (c == '.') {\n                if (last != \".\") {\n           \
  \         notes.add(0);\n                }\n                else {\n           \
  \         notes.add(notes.get(notes.size()) - 1);\n                }\n         \
  \       last = \".\";\n            }\n            else if (c == 'o') {\n       \
  \         if (last != \".\") {\n                    notes.add(notes.get(notes.size())\
  \ - 4);\n                }\n                else {\n                    notes.add(notes.get(notes.size())\
  \ - 1);\n                }\n                last = \"o\";\n            }\n     \
  \       else if (c == '|') {\n                if (last != \".\") {\n           \
  \         notes.add(notes.get(notes.size()) - 2);\n                }\n         \
  \       else {\n                    notes.add(notes.get(notes.size()) - 1);\n  \
  \              }\n                last = \"|\";\n            }\n        }\n    \
  \    return notes;"
- "        ArrayList<Integer> notes = new ArrayList<Integer>();\n        if (music_string.length()\
  \ == 0) {\n            return notes;\n        }\n        if (music_string.charAt(0)\
  \ == 'o') {\n            notes.add(4);\n        }\n        if (music_string.charAt(music_string.length()\
  \ - 1) == 'o') {\n            notes.add(4);\n        }\n        if (music_string.charAt(0)\
  \ == 'o|') {\n            notes.add(2);\n        }\n        if (music_string.charAt(music_string.length()\
  \ - 1) == 'o|') {\n            notes.add(2);\n        }\n        if (music_string.charAt(0)\
  \ == '.|') {\n            notes.add(1);\n        }\n        if (music_string.charAt(music_string.length()\
  \ - 1) == '.|') {\n            notes.add(1);\n        }\n        if (music_string.charAt(0)\
  \ == '...') {\n            notes.add(1);\n        }\n        if (music_string.charAt(music_string.length()\
  \ - 1) == '...') {\n            notes.add(1);\n        }\n        return notes;"
- "        // Your code goes here\n        music_string = music_string.toUpperCase();\n\
  \n        ArrayList<Integer> beats = new ArrayList<Integer>();\n        HashMap<String,\
  \ Integer> notes = new HashMap<String, Integer>();\n        HashMap<String, Integer>\
  \ last = new HashMap<String, Integer>();\n        music_string = music_string.replaceAll(\"\
  [^a-zA-Z]\", \"\");\n        music_string = music_string.replaceAll(\"\\\\^\", \"\
  \");\n\n        // Odd notes, even beats\n        notes.put(\"o\", -1);\n      \
  \  notes.put(\"O\", -1);\n        notes.put(\"0\", -1);\n        notes.put(\"1\"\
  , -1);\n        notes.put(\"2\", -1);\n        notes.put(\"3\", -1);\n        notes.put(\"\
  4\", -1);\n        notes.put(\"5\", -1);\n        notes.put(\"6\", -1);\n      \
  \  notes.put(\"7\", -1);\n        notes.put(\"8\", -1);\n        notes.put(\"9\"\
  , -1);\n\n        ArrayList<String> notes_splitted = new ArrayList<String>();\n\
  \        for (String s: music_string.split(\" \"))\n            notes_splitted.add(s);\n\
  \n        // Odd notes, odd beats\n        for (int i = 0; i < notes_splitted.size();\
  \ i++)\n        {\n            String note = notes_splitted.get(i);\n          \
  \  String beat = \"\";\n            if (note.contains(\"|\"))\n            {\n \
  \               beat = note.split(\"|\")[1];\n                if (beat.equals(\"\
  o\"))\n                    beat = note.split(\"|\")[0] + \"|\" + note.split(\"|\"\
  )[1] + \"|\";\n                else\n                    beat = note.split(\"|\"\
  )[0] + beat;\n            }\n\n            if (note.contains(\"o\"))\n         \
  \   {\n                note = note.split(\"o\")[0];\n            }\n           \
  \ if (note.contains(\"o|\"))\n            {\n                note = note.split(\"\
  o|\")[0];\n            }\n            if (note.contains(\".\"))\n            {\n\
  \                note = note.split(\".\")[0];\n            }\n\n            // If\
  \ note is already existing in hashmap, just increment beat value\n            if\
  \ (notes.containsKey(note))\n                beat = notes.get(note) + 1;\n     \
  \       else\n            {\n                // If note is not existing in hashmap,\
  \ add new note and increment beat value\n                notes.put(note, 1);\n \
  \               beat += \"1\";\n            }\n            beats.add(Integer.parseInt(beat));\n\
  \        }\n\n        HashMap<String, Integer> last_beat = new HashMap<String, Integer>();\n\
  \        for (String key: notes.keySet())\n        {\n            Integer value\
  \ = notes.get(key);\n"
- "        ArrayList<Integer> notes = new ArrayList<>();\n        for (char symbol\
  \ : music_string.chars()) {\n            if (symbol == 'o') {\n                notes.add(4);\n\
  \            } else if (symbol == 'o|') {\n                notes.add(2);\n     \
  \       } else if (symbol == '.|') {\n                notes.add(1);\n          \
  \  } else {\n                throw new RuntimeException(\"Unexpected symbol:\" +\
  \ symbol);\n            }\n        }\n        return notes;"
language: java
name: HumanEval_17_parse_music
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Input to this function is a string representing musical\
  \ notes in a special ASCII format.\n    // Your task is to parse this string and\
  \ return list of integers corresponding to how many beats does each\n    // not\
  \ last.\n    // Here is a legend:\n    // 'o' - whole note, lasts four beats\n \
  \   // 'o|' - half note, lasts two beats\n    // '.|' - quater note, lasts one beat\n\
  \    // >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    // [4, 2, 1, 2, 2,\
  \ 1, 1, 1, 1, 4, 4]\n    public static ArrayList<Integer> parseMusic(String music_string)\
  \ {\n"
stop_tokens:
- "    }\n    //"
- "    }\n    p"
- '    }

  }'
- "\n    }\n"
tests: "}\n    public static void main(String[] args) {\n    assert(parseMusic((\"\
  \")).equals((new ArrayList<Integer>(Arrays.asList()))));\n    assert(parseMusic((\"\
  o o o o\")).equals((new ArrayList<Integer>(Arrays.asList((int)4, (int)4, (int)4,\
  \ (int)4)))));\n    assert(parseMusic((\".| .| .| .|\")).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
  \ (int)1, (int)1, (int)1)))));\n    assert(parseMusic((\"o| o| .| .| o o o o\")).equals((new\
  \ ArrayList<Integer>(Arrays.asList((int)2, (int)2, (int)1, (int)1, (int)4, (int)4,\
  \ (int)4, (int)4)))));\n    assert(parseMusic((\"o| .| o| .| o o| o o|\")).equals((new\
  \ ArrayList<Integer>(Arrays.asList((int)2, (int)1, (int)2, (int)1, (int)4, (int)2,\
  \ (int)4, (int)2)))));\n    }\n\n}\n"
