name: HumanEval_7_filter_by_substring
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Filter an input list of strings only for ones that contain\
  \ given substring\n    // >>> filter_by_substring([], 'a')\n    // []\n    // >>>\
  \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    // ['abc', 'bacd',\
  \ 'array']\n    public static ArrayList<String> filterBySubstring(ArrayList<String>\
  \ strings, String substring) {\n"
tests: "return new ArrayList<String>(Arrays.asList());\n    }\n    public static void\
  \ main(String[] args) {\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList())),\
  \ (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterBySubstring((new\
  \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"xxy\"\
  , (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\")).equals((new\
  \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\", (String)\"\
  xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
  xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\"\
  , (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
  xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
  \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
  prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
  grunt\", (String)\"prune\")))));\n    }\n\n}\n"
completions: ["        ArrayList<String> filtered = new ArrayList<String>();\n   \
    \     for (int i = 0; i < strings.size(); i++) {\n            if (strings.get(i).contains(substring))\n\
    \                filtered.add(strings.get(i));\n        }\n        return filtered;",
  "        // Return the filtered list if substring\n        ArrayList<String> filteredList\
    \ = new ArrayList<>();\n        for (String string : strings) {\n            if\
    \ (string.contains(substring)) {\n                filteredList.add(string);\n\
    \            }\n        }\n        return filteredList;", "        ArrayList<String>\
    \ result = new ArrayList<>();\n        for (String str : strings) {\n        \
    \    if (substring.indexOf(str) != -1) {\n                result.add(str);\n \
    \           }\n        }\n        return result;", "        ArrayList<String>\
    \ filteredList = new ArrayList<>();\n        for (String str : strings) {\n  \
    \          if (str.contains(substring)) {\n                filteredList.add(str);\n\
    \            }\n        }\n        return filteredList;", "        return filters.stream()\n\
    \            .filter(s -> s.contains(substring))\n            .collect(Collectors.toCollection(ArrayList::new));",
  "        ArrayList<String> ret = new ArrayList<>();\n        for (String s : strings)\
    \ {\n            if (s.contains(substring)) {\n                ret.add(s);\n \
    \           }\n        }\n        return ret;", "        // TODO: Implement your\
    \ filtering logic here\n        return strings;", '        return strings.stream().filter(s
    -> s.contains(substring)).collect(Collectors.toList());', "        ArrayList<String>\
    \ result = new ArrayList<>();\n        for(String s : strings) {\n           \
    \ if(s.contains(substring)) {\n                result.add(s);\n            }\n\
    \        }\n        return result;", "        ArrayList<String> returnList = new\
    \ ArrayList<String>();\n        List<String> filteredList = strings.stream()\n\
    \                .filter(s -> s.contains(substring))\n                .collect(Collectors.toList());\n\
    \        returnList.addAll(filteredList);\n        return returnList;", "    \
    \    ArrayList<String> results = new ArrayList<>();\n        for (String string\
    \ : strings) {\n            if (string.contains(substring)) {\n              \
    \  results.add(string);\n            }\n        }\n        return results;", " \
    \       return strings.stream()\n            .filter(x -> x.contains(substring))\n\
    \            .collect(Collectors.toList());", '        return strings.stream().filter(s
    -> s.contains(substring)).collect(Collectors.toCollection(ArrayList<String>));',
  "        ArrayList<String> result = new ArrayList<>();\n        for (String s :\
    \ strings) {\n            if (s.contains(substring))\n                result.add(s);\n\
    \        }\n        return result;", "        ArrayList<String> result = new ArrayList<>();\n\
    \        for (String string : strings) {\n            if (string.contains(substring))\
    \ {\n                result.add(string);\n            }\n        }\n        return\
    \ result;", '        return strings.stream().filter((string) -> string.contains(substring)).collect(Collectors.toList());',
  '        return filterBySubstring(strings, substring, null);', '        return strings.stream().filter(s
    -> s.contains(substring)).collect(Collectors.toCollection(ArrayList::new));',
  "        ArrayList<String> result = new ArrayList<>();\n        for (String s :\
    \ strings) {\n            if (s.contains(substring)) {\n                result.add(s);\n\
    \            }\n        }\n        return result;", "        ArrayList<String>\
    \ filtered = new ArrayList<String>();\n        for (String s : strings) {\n  \
    \          if (s.contains(substring)) {\n                filtered.add(s);\n  \
    \          }\n        }\n        return filtered;", "        ArrayList<String>\
    \ result = new ArrayList<String>();\n        for (String s : strings) {\n    \
    \        if (s.contains(substring))\n                result.add(s);\n        }\n\
    \        return result;", "        ArrayList<String> filteredList = new ArrayList<String>();\n\
    \        for (String s : strings) {\n            if (s.contains(substring)) {\n\
    \                filteredList.add(s);\n            }\n        }\n        return\
    \ filteredList;", "        // Return the list of strings that does not contain\
    \ the substring\n        ArrayList<String> filtered = new ArrayList<>();\n   \
    \     if (strings != null && substring != null) {\n            for (String s :\
    \ strings) {\n                if (s.contains(substring) == false)\n          \
    \          filtered.add(s);\n            }\n        }\n        return filtered;",
  "        ArrayList<String> result = new ArrayList<String>();\n        for (String\
    \ string : strings) {\n            if (string.contains(substring)) {\n       \
    \         result.add(string);\n            }\n        }\n        return result;",
  '        return strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toCollection(ArrayList::new));',
  "        ArrayList<String> result = new ArrayList<>();\n        for (String s :\
    \ strings)\n            if (s.contains(substring))\n                result.add(s);\n\
    \        return result;", "        ArrayList<String> result = new ArrayList<>();\n\
    \        for(String s : strings) {\n            if(s.contains(substring)) {\n\
    \                result.add(s);\n            }\n        }\n        return result;",
  "        if (strings == null || substring.isEmpty()) {\n            return strings;\n\
    \        }\n        ArrayList<String> filtered = new ArrayList<>(strings);\n \
    \       for(String s: strings) {\n            if(s.contains(substring)) {\n  \
    \              filtered.add(s);\n            }\n        }\n        return filtered;",
  "        return IntStream.range(0, strings.size())\n                .filter(i ->\
    \ string.contains(substring))\n                .boxed()\n                .collect(Collectors.toCollection(ArrayList::new));",
  "        return strings == null || strings.size() == 0 ?\n                new ArrayList<String>()\
    \ :\n                strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toCollection(ArrayList::new));",
  '        return strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toCollection(ArrayList::new));',
  "        ArrayList<String> result = new ArrayList<>();\n        if (strings == null\
    \ || strings.length() == 0) {\n            return result;\n        }\n       \
    \ for (int i = 0; i < strings.length; i++) {\n            if (strings[i].contains(substring))\
    \ {\n                result.add(strings[i]);\n            }\n        }\n     \
    \   return result;", "        ArrayList<String> filteredList = new ArrayList<String>();\n\
    \        for (String string : strings) {\n            if (string.contains(substring))\
    \ {\n                filteredList.add(string);\n            }\n        }\n   \
    \     return filteredList;", "        ArrayList<String> result = new ArrayList<String>();\n\
    \        for (int i = 0; i < strings.size(); i++) {\n            if (strings.get(i).contains(substring))\n\
    \                result.add(strings.get(i));\n        }\n        return result;",
  "        ArrayList<String> res = new ArrayList<String>();\n        for (String str\
    \ : strings) {\n            if (str.contains(substring)) {\n                res.add(str);\n\
    \            }\n        }\n        return res;", '        return strings.stream().filter(s
    -> s.contains(substring)).collect(Collectors.toCollection(ArrayList::new));',
  "        return strings.stream()\n            .filter(s -> s.contains(substring))\n\
    \            .collect(Collectors.toCollection(ArrayList::new));", '        return
    strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toCollection(ArrayList::new));',
  "        ArrayList<String> filtered = new ArrayList<>();\n        for (String s\
    \ : strings) {\n            if (s.contains(substring)) {\n                filtered.add(s);\n\
    \            }\n        }\n        return filtered;", "        String pattern\
    \ = \".*\"+substring+\".*\";\n        ArrayList<String> matches = new ArrayList<String>();\n\
    \n        for(String str : strings) {\n            Pattern p = Pattern.compile(pattern);\n\
    \            Matcher m = p.matcher(str);\n            if (m.find())\n        \
    \        matches.add(str);\n        }\n\n        return matches;", "        //\
    \ Filter out all the strings that don't have the substring in them\n        return\
    \ strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toCollection(ArrayList::new));",
  "        ArrayList<String> filteredStrings = new ArrayList<String>();\n        for\
    \ (String string : strings) {\n            if(string.contains(substring)) {\n\
    \                filteredStrings.add(string);\n            }\n        }\n    \
    \    return filteredStrings;", "        ArrayList<String> result = new ArrayList<String>();\n\
    \        for (String s : strings) {\n            if (s.contains(substring)) {\n\
    \                result.add(s);\n            }\n        }\n        return result;",
  "        ArrayList<String> result = new ArrayList<>();\n        if (strings != null\
    \ && substring != null) {\n            strings.stream().filter(s -> s.contains(substring)).forEach(result\
    \ -> result.add(strings));\n        }\n        return result;", "        ArrayList<String>\
    \ result = new ArrayList<>();\n        // Filter using Java 8 Stream\n       \
    \ strings.stream().filter(item -> item.contains(substring)).forEach(item -> result.add(item));\n\
    \        return result;", "        ArrayList<String> result = new ArrayList<String>();\n\
    \        for (String s : strings) {\n            if (s.contains(substring)) {\n\
    \                result.add(s);\n            }\n        }\n        return result;",
  "        ArrayList<String> result = new ArrayList<>();\n        strings.stream().filter(s\
    \ -> s.contains(substring)).forEach(result ::add);\n        return result;", " \
    \       ArrayList<String> result = new ArrayList<String>();\n        for (String\
    \ string : strings) {\n            if (string.contains(substring)) {\n       \
    \         result.add(string);\n            }\n        }\n        return result;",
  "        ArrayList<String> result = new ArrayList<>();\n        for (String string\
    \ : strings) {\n            if (string.contains(substring)) {\n              \
    \  result.add(string);\n            }\n        }\n        return result;", " \
    \       ArrayList<String> newList = new ArrayList<String>();\n        for (String\
    \ string : strings) {\n            if (string.contains(substring)) {\n       \
    \         newList.add(string);\n            }\n        }\n        return newList;",
  "        ArrayList<String> result = new ArrayList<String>();\n        for(String\
    \ s : strings) {\n            if (s.contains(substring)) {\n                result.add(s);\n\
    \            }\n        }\n        return result;", "        ArrayList<String>\
    \ filtered = new ArrayList<>();\n        for (String s : strings) {\n        \
    \    if (s.contains(substring))\n                filtered.add(s);\n        }\n\
    \        return filtered;", "        ArrayList<String> result = new ArrayList<>();\n\
    \        for(int i = 0; i < strings.size(); i++) {\n            if(strings.get(i).contains(substring))\
    \ {\n                result.add(strings.get(i));\n            }\n        }\n \
    \       return result;", "        ArrayList<String> filtered = new ArrayList<>();\n\
    \        for (String s : strings) {\n            if (s.contains(substring)) {\n\
    \                filtered.add(s);\n            }\n        }\n        return filtered;",
  "        ArrayList<String> filteredList = new ArrayList<>();\n        for (String\
    \ s: strings) {\n            if (s.contains(substring)) {\n                filteredList.add(s);\n\
    \            }\n        }\n        return filteredList;", "        // Add more\
    \ filtering here\n        ArrayList<String> result = new ArrayList<>();\n    \
    \    for (String s : strings) {\n            if (s.contains(substring)) {\n  \
    \              result.add(s);\n            }\n        }\n        return result;",
  "        ArrayList<String> result = new ArrayList<>();\n        for (String s :\
    \ strings) {\n            if (s.contains(substring)) {\n                result.add(s);\n\
    \            }\n        }\n        return result;", '        return strings.stream().filter(s
    -> s.contains(substring)).collect(Collectors.toCollection(ArrayList::new));',
  "        ArrayList<String> result = new ArrayList<>();\n\n        // O(n) where\
    \ n is the number of strings\n        for (String s : strings) {\n           \
    \ if (s.contains(substring)) {\n                result.add(s);\n            }\n\
    \        }\n        return result;", "        ArrayList<String> filtered = new\
    \ ArrayList<String>();\n        for (String str : strings) {\n            if (str.contains(substring))\
    \ {\n                filtered.add(str);\n            }\n        }\n        return\
    \ filtered;", "        ArrayList<String> filtered = new ArrayList<>();\n     \
    \   for (int i = 0; i < strings.size(); i++) {\n            if (strings.get(i).contains(substring))\
    \ {\n                filtered.add(strings.get(i));\n            }\n        }\n\
    \        return filtered;", "        // 1. Initialize result set with original\
    \ list\n        ArrayList<String> result = new ArrayList<>();\n        // 2. Loop\
    \ over original list items\n        for (String string : strings) {\n        \
    \    // 2a. If substring is in string, add to result set\n            if (string.contains(substring))\
    \ {\n                result.add(string);\n            }\n        }\n        return\
    \ result;", '        return strings.stream().filter(e -> e.contains(substring)).collect(toList());',
  "        return strings.stream()\n                .filter(s -> s.contains(substring))\n\
    \                .collect(Collectors.toCollection(ArrayList::new));", "      \
    \  // Write your code here\n\n        return strings;", "        ArrayList<String>\
    \ filtered = new ArrayList<String>();\n        for (String string : strings) {\n\
    \            if (string.contains(substring)) {\n                filtered.add(string);\n\
    \            }\n        }\n        return filtered;", "        ArrayList<String>\
    \ result = new ArrayList<>();\n        for (String string : strings) {\n     \
    \       if (string.contains(substring)) {\n                result.add(string);\n\
    \            }\n        }\n        return result;", "        ArrayList<String>\
    \ result = new ArrayList<>();\n        for (String string : strings) {\n     \
    \       if (string.contains(substring)) {\n                result.add(string);\n\
    \            }\n        }\n        return result;", "        ArrayList<String>\
    \ filtered = new ArrayList<String>();\n        for (String string : strings) {\n\
    \            if (string.contains(substring)) {\n                filtered.add(string);\n\
    \            }\n        }\n        return filtered;", "        ArrayList<String>\
    \ filtered = new ArrayList<>();\n        for (String s: strings) {\n         \
    \   if (s.contains(substring)) {\n                filtered.add(s);\n         \
    \   }\n        }\n        return filtered;", "        String lowerStr = substring.toLowerCase();\n\
    \        return strings.stream().filter(s -> s.toLowerCase().contains(lowerStr)).collect(Collectors.toCollection(ArrayList::new));",
  '        return strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toCollection(ArrayList::new));',
  "        ArrayList<String> result = new ArrayList<String>();\n        for (String\
    \ string : strings) {\n            if (string.contains(substring)) {\n       \
    \         result.add(string);\n            }\n        }\n        return result;",
  "        ArrayList<String> result = new ArrayList<String>();\n        for(String\
    \ string : strings) {\n            if(string.contains(substring)) {\n        \
    \        result.add(string);\n            }\n        }\n        return result;",
  "        ArrayList<String> result = new ArrayList<String>();\n        for (String\
    \ s : strings) {\n            if (s.contains(substring))\n                result.add(s);\n\
    \        }\n        return result;", "        return strings.stream()\n      \
    \      .filter(s -> s.contains(substring))\n            .collect(Collectors.toList());",
  "        ArrayList<String> result = new ArrayList<>();\n        // String is immutable,\
    \ so we could just use a list to store our strings and\n        // then return\
    \ a new list with the filtered substring removed.\n        for (String s : strings)\
    \ {\n            if (s.contains(substring)) {\n                result.add(s);\n\
    \            }\n        }\n        return result;", "        ArrayList<String>\
    \ answer = new ArrayList<>();\n        for (String str : strings) {\n        \
    \    if (str.contains(substring)) {\n                answer.add(str);\n      \
    \      }\n        }\n        return answer;", "        ArrayList<String> filtered\
    \ = new ArrayList<>();\n        for (String s : strings) {\n            if (s.contains(substring))\
    \ {\n                filtered.add(s);\n            }\n        }\n        return\
    \ filtered;", "        ArrayList<String> result = new ArrayList<>();\n       \
    \ for (String string : strings) {\n            if (string.contains(substring))\
    \ {\n                result.add(string);\n            }\n        }\n        return\
    \ result;", "        ArrayList<String> filtered = new ArrayList<String>();\n \
    \       for (String s : strings) {\n            if (s.contains(substring)) {\n\
    \                filtered.add(s);\n            }\n        }\n        return filtered;",
  "        ArrayList<String> filtered = new ArrayList<>();\n        for (String s\
    \ : strings) {\n            if (substring.contains(s)) {\n                filtered.add(s);\n\
    \            }\n        }\n        return filtered;", "        ArrayList<String>\
    \ result = new ArrayList<>();\n        for (String string : strings) {\n     \
    \       if (string.contains(substring)) {\n                result.add(string);\n\
    \            }\n        }\n        return result;", '        return filterBySubstring2(strings,
    substring, new HashSet<String>());', "        ArrayList<String> filtered = new\
    \ ArrayList<String>();\n        for (String string : strings) {\n            if\
    \ (string.contains(substring))\n                filtered.add(string);\n      \
    \  }\n        return filtered;", "        if (strings == null) {\n           \
    \ return null;\n        }\n        ArrayList<String> result = new ArrayList<>();\n\
    \        for (String s : strings) {\n            if (s.contains(substring)) {\n\
    \                result.add(s);\n            }\n        }\n        return result;",
  "        ArrayList<String> result = new ArrayList<String>();\n        for (String\
    \ s : strings) {\n            if (s.toLowerCase().contains(substring.toLowerCase()))\
    \ {\n                result.add(s);\n            }\n        }\n        return\
    \ result;", "        ArrayList<String> filtered = new ArrayList<>();\n       \
    \ for (String s : strings) {\n            if (s.contains(substring))\n       \
    \         filtered.add(s);\n        }\n        return filtered;", "        ArrayList<String>\
    \ ret = new ArrayList<>();\n        for (String s : strings) {\n            if\
    \ (s.contains(substring)) {\n                ret.add(s);\n            }\n    \
    \    }\n        return ret;", "        ArrayList<String> filteredStrings = new\
    \ ArrayList<>();\n        for (String string : strings) {\n            if (string.contains(substring))\n\
    \                filteredStrings.add(string);\n        }\n        return filteredStrings;",
  "        ArrayList<String> filtered = new ArrayList<>();\n        ArrayList<String>\
    \ substrings = new ArrayList<>();\n        ArrayList<String> filters = new ArrayList<>();\n\
    \n        for(String string : strings) {\n            String[] splitArray = string.split(substring);\n\
    \            if(splitArray.length > 1) {\n                substrings.add(splitArray[0]);\n\
    \                filters.add(splitArray[1]);\n                filtered.add(string);\n\
    \            }\n        }\n\n        filtered.addAll(substrings);\n        filtered.addAll(filters);\n\
    \n        return filtered;", "        ArrayList<String> result = new ArrayList<>();\n\
    \        ArrayList<String> filtered = new ArrayList<>();\n        for (String\
    \ s : strings) {\n            if (s.contains(substring)) {\n                filtered.add(s);\n\
    \            }\n        }\n        result.addAll(filtered);\n        return result;",
  "        ArrayList<String> filteredList = new ArrayList<>();\n        for (String\
    \ string : strings) {\n            if (string.contains(substring)) {\n       \
    \         filteredList.add(string);\n            }\n        }\n        return\
    \ filteredList;", "        return strings.stream()\n                .filter(s\
    \ -> s.contains(substring))\n                .collect(Collectors.toCollection(ArrayList::new));",
  "        ArrayList<String> filtered = new ArrayList<>();\n        for (String string\
    \ : strings) {\n            if (string.contains(substring)) {\n              \
    \  filtered.add(string);\n            }\n        }\n        return filtered;",
  "        ArrayList<String> result = new ArrayList<>();\n        for (int i = 0;\
    \ i < strings.size(); i++) {\n            if (strings.get(i).contains(substring))\
    \ {\n                result.add(strings.get(i));\n            }\n        }\n \
    \       return result;", "        ArrayList<String> filtered = new ArrayList<String>();\n\
    \        for (String string : strings) {\n            if (string.contains(substring))\
    \ {\n                filtered.add(string);\n            }\n        }\n       \
    \ return filtered;", "        if (strings == null || substring == null) return\
    \ null;\n        ArrayList<String> filtered = new ArrayList<>();\n        for\
    \ (String string : strings) {\n            if (string.contains(substring)) filtered.add(string);\n\
    \        }\n        return filtered;", "        ArrayList<String> filtered = new\
    \ ArrayList<>();\n        for(String s : strings) {\n            if(s.contains(substring))\
    \ {\n                filtered.add(s);\n            }\n        }\n        return\
    \ filtered;", "        ArrayList<String> filtered = new ArrayList<String>();\n\
    \        for (String string : strings) {\n            if (string.contains(substring))\
    \ {\n                filtered.add(string);\n            }\n        }\n       \
    \ return filtered;", "        ArrayList<String> filteredStrings = new ArrayList<>();\n\
    \        for (String string : strings) {\n            if (string.contains(substring))\
    \ {\n                filteredStrings.add(string);\n            }\n        }\n\
    \        return filteredStrings;", '        return strings;', "        return\
    \ Collections.unmodifiableList(\n                strings\n                   \
    \     .stream()\n                        .filter(s -> s.contains(substring))\n\
    \                        .collect(Collectors.toList()));", "        ArrayList<String>\
    \ result = new ArrayList<String>();\n        for (String s : strings) {\n    \
    \        if (s.contains(substring)) {\n                result.add(s);\n      \
    \      }\n        }\n        return result;", "        ArrayList<String> filtered\
    \ = new ArrayList<String>();\n        for (String s : strings) {\n           \
    \ if (s.contains(substring))\n                filtered.add(s);\n        }\n  \
    \      return filtered;", "        ArrayList<String> filteredStrings = new ArrayList<>();\n\
    \        for(String string : strings) {\n            if(string.contains(substring))\n\
    \                filteredStrings.add(string);\n        }\n        return filteredStrings;",
  "        ArrayList<String> filtered = new ArrayList<>();\n        if (strings ==\
    \ null || strings.size() == 0)\n            return filtered;\n        for(String\
    \ string : strings) {\n            if (string.contains(substring))\n         \
    \       filtered.add(string);\n        }\n        return filtered;", "       \
    \ ArrayList<String> filtered = new ArrayList<>();\n        for (String string\
    \ : strings) {\n            if(string.contains(substring)) {\n               \
    \ filtered.add(string);\n            }\n        }\n        return filtered;",
  "        ArrayList<String> result = new ArrayList<String>();\n        // Using Java\
    \ 8+ streams\n        strings.stream().filter(s -> s.contains(substring)).forEach(s\
    \ -> result.add(s));\n        // Using traditional loops\n        // for (int\
    \ i = 0; i < strings.length; ++i) {\n        // for (int i = 0; i < strings.size();\
    \ ++i) {\n        // for (int i = 0; i < strings.size(); ++i)\n        // if (strings[i].contains(substring))\
    \ {\n        // result.add(strings[i]);\n        // }\n        // }\n        return\
    \ result;", "        ArrayList<String> filtered = new ArrayList<>();\n       \
    \ for (String string : strings) {\n            if (string.contains(substring))\
    \ {\n                filtered.add(string);\n            }\n        }\n       \
    \ return filtered;", '        return strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toList());',
  "        ArrayList<String> result = new ArrayList<>();\n        // Filter all strings\
    \ that contain the substring and add them to the result list\n        strings.stream()\n\
    \               .filter(s -> s.contains(substring))\n               .forEach(s\
    \ -> result.add(s));\n        return result;", "        return Collections.singletonList(strings).stream()\n\
    \                .filter(s -> s.contains(substring))\n                .collect(toCollection(()\
    \ -> new ArrayList<String>()));", "        String pattern = String.format(\"\\\
    \\b%s\\\\b\", substring);\n        return strings.stream()\n                .filter(s\
    \ -> s.contains(pattern))\n                .collect(Collectors.toCollection(ArrayList::new));",
  '        return strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toList());',
  "        ArrayList<String> result = new ArrayList<>();\n        for(int i = 0; i\
    \ < strings.size(); i++) {\n            if (strings.get(i).contains(substring))\n\
    \                result.add(strings.get(i));\n        }\n        return result;",
  "        ArrayList<String> result = new ArrayList<>();\n        for (String value\
    \ : strings) {\n            if (substring.equals(value)) {\n                result.add(value);\n\
    \            }\n        }\n        return result;", '        return strings.stream().filter(s
    -> s.contains(substring)).collect(Collectors.toList());', "        // Return the\
    \ original list if substring is not in the string\n        if (strings == null\
    \ || strings.size() == 0)\n            return strings;\n        ArrayList<String>\
    \ result = new ArrayList<>();\n        for(String s: strings) {\n            if(s.contains(substring))\n\
    \                result.add(s);\n        }\n        return result;", '        return
    Collections.singletonList(strings);', '        return strings.stream().filter(s
    -> s.contains(substring)).collect(Collectors.toList());', '        return strings.stream().filter(s
    -> s.contains(substring)).collect(Collectors.toCollection(ArrayList::new));',
  "        ArrayList<String> filtered = new ArrayList<String>();\n        for(String\
    \ s : strings){\n            if(s.contains(substring)){\n                filtered.add(s);\n\
    \            }\n        }\n        return filtered;", "        ArrayList<String>\
    \ result = new ArrayList<String>();\n        if (strings == null) return result;\n\
    \        for(int i = 0; i < strings.size(); i++) {\n            if (strings.get(i).contains(substring))\
    \ result.add(strings.get(i));\n        }\n        return result;", "        ArrayList<String>\
    \ result = new ArrayList<>();\n        for (String string : strings) {\n     \
    \       if (string.contains(substring)) {\n                result.add(string);\n\
    \            }\n        }\n        return result;", "        ArrayList<String>\
    \ result = new ArrayList<String>();\n        for(String s : strings) {\n     \
    \       if(s.contains(substring)) {\n                result.add(s);\n        \
    \    }\n        }\n        return result;", "        ArrayList<String> filtered\
    \ = new ArrayList<>();\n        if (strings == null || strings.size() == 0) {\n\
    \            return filtered;\n        }\n        for (String s : strings) {\n\
    \            if (s.toLowerCase().contains(substring.toLowerCase())) {\n      \
    \          filtered.add(s);\n            }\n        }\n        return filtered;",
  "        ArrayList<String> filtered = new ArrayList<>();\n        for (String string\
    \ : strings) {\n            if (string.contains(substring)) {\n              \
    \  filtered.add(string);\n            }\n        }\n        return filtered;",
  "        ArrayList<String> result = new ArrayList<>();\n        for (String string\
    \ : strings) {\n            if (string.contains(substring)) {\n              \
    \  result.add(string);\n            }\n        }\n        return result;", " \
    \       ArrayList<String> results = new ArrayList<>();\n        for (String string\
    \ : strings) {\n            if (string.contains(substring)) {\n              \
    \  results.add(string);\n            }\n        }\n        return results;", " \
    \       ArrayList<String> filteredList = new ArrayList<String>();\n\n        for\
    \ (String s : strings) {\n            if (s.contains(substring)) {\n         \
    \       filteredList.add(s);\n            }\n        }\n        return filteredList;",
  "        return strings.stream()\n            .filter(x -> x.contains(substring))\n\
    \            .collect(Collectors.toCollection(ArrayList::new));", '        return
    strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toCollection(ArrayList<String>::new));',
  "        return strings.stream()\n                .filter(x -> x.contains(substring))\n\
    \                .collect(Collectors.toCollection(ArrayList::new));", '        return
    strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toCollection(ArrayList::new));',
  "        String regex = \".*\" + substring + \".*\";\n        ArrayList<String>\
    \ res = new ArrayList<>();\n        for (String string : strings) {\n        \
    \    if (string.matches(regex)) {\n                res.add(string);\n        \
    \    }\n        }\n        return res;", "        ArrayList<String> result = new\
    \ ArrayList<>();\n        for (String s : strings) {\n            if (s.contains(substring))\
    \ {\n                result.add(s);\n            }\n        }\n        return\
    \ result;", '        return strings.stream().filter(e -> e.contains(substring)).collect(Collectors.toList());',
  '        return strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toList());',
  "        return IntStream.range(0, strings.size()).filter(i -> strings.subList(i,\
    \ i + substring.length()).contains(substring))\n                .mapToObj(strings::get)\n\
    \                .collect(Collectors.toCollection(ArrayList::new));", "      \
    \  ArrayList<String> result = new ArrayList<String>();\n        for (String string\
    \ : strings) {\n            if (string.contains(substring)) {\n              \
    \  result.add(string);\n            }\n        }\n        return result;", '        return
    strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toCollection(ArrayList<String>()));',
  "        String regex = \".*\" + substring + \".*\";\n        ArrayList<String>\
    \ result = new ArrayList<>();\n        for(String string : strings) {\n      \
    \      if(string.matches(regex)) {\n                result.add(string);\n    \
    \        }\n        }\n        return result;", "        ArrayList<String> filtered\
    \ = new ArrayList<>();\n        for (String s : strings) {\n            if (s.contains(substring))\
    \ {\n                filtered.add(s);\n            }\n        }\n        return\
    \ filtered;", "        ArrayList<String> result = new ArrayList<>();\n       \
    \ for (String string : strings)\n            if (string.contains(substring))\n\
    \                result.add(string);\n        return result;", '        return
    strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toList());',
  '        return strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toList());',
  "        if (strings == null || strings.size() == 0) {\n            System.out.println(\"\
    No strings found!\");\n            return strings;\n        }\n        ArrayList<String>\
    \ out = new ArrayList<>();\n        boolean found = false;\n        for (String\
    \ string : strings) {\n            if (string.contains(substring)) {\n       \
    \         found = true;\n                out.add(string);\n            }\n   \
    \     }\n        if (found == false)\n            out.add(\"None\");\n       \
    \ return out;", "        ArrayList<String> result = new ArrayList<>();\n     \
    \   if (strings == null || strings.size() == 0) {\n            return result;\n\
    \        }\n        for (String s : strings) {\n            if (s.contains(substring))\
    \ {\n                result.add(s);\n            }\n        }\n        return\
    \ result;", '        return objects.filter(strings -> strings.contains(substring)).collect(Collectors.toList());',
  "        ArrayList<String> filtered = new ArrayList<>();\n        for (String str\
    \ : strings) {\n            if (str.contains(substring))\n                filtered.add(str);\n\
    \        }\n        return filtered;", "        // O(n)\n        ArrayList<String>\
    \ result = new ArrayList<String>();\n        for (String string : strings) {\n\
    \            if (string.contains(substring)) {\n                result.add(string);\n\
    \            }\n        }\n        return result;", "        ArrayList<String>\
    \ result = new ArrayList<String>();\n        for (String s : strings) {\n    \
    \        if (s.toLowerCase().contains(substring.toLowerCase())) {\n          \
    \      result.add(s);\n            }\n        }\n        return result;", "  \
    \      ArrayList<String> result = new ArrayList<String>();\n        for (String\
    \ s : strings) {\n            if(s.contains(substring))\n                result.add(s);\n\
    \        }\n        return result;", "        return strings\n               \
    \ .stream()\n                .filter(s -> s.contains(substring))\n           \
    \     .collect(Collectors.toCollection(ArrayList::new));", '        return strings.stream().filter(s
    -> s.contains(substring)).collect(Collectors.toCollection(ArrayList<String>()));',
  "        // Implement this method.\n        return strings;", "        ArrayList<String>\
    \ result = new ArrayList<>();\n        for (String string : strings) {\n     \
    \       if (string.contains(substring)) {\n                result.add(string);\n\
    \            }\n        }\n        return result;", "        ArrayList<String>\
    \ result = new ArrayList<>();\n\n        // Sort so that shorter substring come\
    \ first\n        strings.sort(Comparator.comparing(String::length));\n\n     \
    \   // Go through all strings and only add those with a matching substring\n \
    \       for (String string : strings) {\n            if (string.contains(substring))\n\
    \                result.add(string);\n        }\n\n        return result;", " \
    \       if (strings == null || substring.length() == 0) return new ArrayList<String>();\n\
    \        ArrayList<String> result = new ArrayList<>();\n        for (String s\
    \ : strings) {\n            if (s.contains(substring)) result.add(s);\n      \
    \  }\n        return result;", "        ArrayList<String> result = new ArrayList<String>();\n\
    \        for (String s : strings) {\n            if (s.contains(substring)) {\n\
    \                result.add(s);\n            }\n        }\n        return result;",
  '        return strings.stream().filter(x -> x.contains(substring)).collect(Collectors.toCollection(ArrayList::new));',
  "        ArrayList<String> filtered = new ArrayList<String>();\n        for (String\
    \ s : strings) {\n            if (s.contains(substring)) {\n                filtered.add(s);\n\
    \            }\n        }\n        return filtered;", '        return filter(strings,
    x -> x.contains(substring));', "        ArrayList<String> filtered = new ArrayList<String>();\n\
    \        for (String s: strings) {\n            if (substring.contains(s)) {\n\
    \                filtered.add(s);\n            }\n        }\n        return filtered;",
  "        ArrayList<String> result = new ArrayList<>();\n        for(String string\
    \ : strings) {\n            if(string.contains(substring)) {\n               \
    \ result.add(string);\n            }\n        }\n        return result;", "  \
    \      ArrayList<String> filtered = new ArrayList<String>();\n        for (String\
    \ string : strings) {\n            if (string.contains(substring)) {\n       \
    \         filtered.add(string);\n            }\n        }\n        return filtered;",
  "        ArrayList<String> results = new ArrayList<String>();\n        \n      \
    \  for (String s : strings) {\n            boolean contains = false;\n       \
    \     if (substring.contains(s)) {\n                contains = true;\n       \
    \     }\n            results.add(s);\n        }\n        \n        return results;",
  "        ArrayList<String> output = new ArrayList<>();\n        for (String string\
    \ : strings) {\n            if (string.contains(substring)) {\n              \
    \  output.add(string);\n            }\n        }\n        return output;", " \
    \       ArrayList<String> result = new ArrayList<>();\n        for(String str:\
    \ strings) {\n            if(str.contains(substring)) {\n                result.add(str);\n\
    \            }\n        }\n        return result;", "        return strings.stream()\n\
    \                .filter(s -> s.contains(substring))\n                .collect(Collectors.toCollection(ArrayList::new));",
  "        ArrayList<String> result = new ArrayList<>();\n        for(int i = 0; i\
    \ < strings.size(); i++) {\n            if(!strings.get(i).contains(substring))\
    \ {\n                result.add(strings.get(i));\n            }\n        }\n \
    \       return result;", "        ArrayList<String> result = new ArrayList<String>();\n\
    \        for (String s : strings) {\n            if (s.contains(substring)) {\n\
    \                result.add(s);\n            }\n        }\n        return result;",
  "        ArrayList<String> results = new ArrayList<>();\n        // Your code here\n\
    \        for(String s : strings) {\n            if (s.contains(substring)) {\n\
    \                results.add(s);\n            }\n        }\n        return results;",
  "        // Write your code here\n        if (strings == null || strings.isEmpty())\
    \ return new ArrayList<String>();\n        ArrayList<String> stringList = new\
    \ ArrayList<>();\n        for(String s: strings){\n            if(s.contains(substring)){\n\
    \                stringList.add(s);\n            }\n        }\n        return\
    \ stringList;", "        // O(1) because we only need to compare the first element\
    \ of each list against substring\n        ArrayList<String> filtered = new ArrayList<>();\n\
    \        for (String string : strings) {\n            if (string.contains(substring))\
    \ {\n                filtered.add(string);\n            }\n        }\n       \
    \ return filtered;", "        ArrayList<String> result = new ArrayList<>();\n\
    \        if (strings == null || strings.size() == 0 || substring == null) {\n\
    \            return result;\n        }\n        for (String s : strings) {\n \
    \           if (s.contains(substring)) {\n                result.add(s);\n   \
    \         }\n        }\n        return result;", "        ArrayList<String> result\
    \ = new ArrayList<>();\n        if (strings == null || strings.size() == 0) return\
    \ result;\n\n        boolean found = false;\n        for (String string : strings)\
    \ {\n            if (string.contains(substring)) {\n                found = true;\n\
    \                result.add(string);\n                break;\n            }\n\
    \        }\n        return found ? result : new ArrayList<>();", "        return\
    \ IntStream.range(0, strings.size()).filter(i -> strings.get(i).contains(substring))\n\
    \            .mapToObj(i -> strings.get(i))\n            .collect(Collectors.toCollection(ArrayList::new));",
  "        if (substring.isEmpty()) {\n            return strings;\n        }\n\n\
    \        ArrayList<String> result = new ArrayList<String>();\n        for (String\
    \ string : strings) {\n            if (string.contains(substring)) {\n       \
    \         result.add(string);\n            }\n        }\n        return result;",
  "        ArrayList<String> result = new ArrayList<String>();\n        if (strings\
    \ == null || strings.length() == 0) {\n            return result;\n        }\n\
    \n        for (String s : strings) {\n            if (s.contains(substring)) {\n\
    \                result.add(s);\n            }\n        }\n\n        return result;",
  "        // return early if null or substring is empty\n        if (strings == null\
    \ || substring == null) return strings;\n        // return early if list is empty\n\
    \        if (strings.size() == 0) return strings;\n\n        ArrayList<String>\
    \ filtered = new ArrayList<String>();\n\n        // use Java stream and split\
    \ the strings into an ArrayList so we can use indexOf\n        strings.stream()\n\
    \            .map(s -> s.split(substring))\n            // filter out any empty\
    \ strings\n            .filter(a -> !a.isEmpty())\n            // filter out any\
    \ nulls\n            .filter(a -> a != null)\n            // now filter by the\
    \ substring\n            .filter(a -> a.contains(substring))\n            .forEachOrdered(filtered.add);\n\
    \n        return filtered;", '        return strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toList());',
  '        return objects.filter(strings -> strings.contains(substring)).collect(Collectors.toList());',
  "        ArrayList<String> result = new ArrayList<>();\n        for (String s: strings)\
    \ {\n            if (s.contains(substring)) {\n                result.add(s);\n\
    \            }\n        }\n        return result;", "        ArrayList<String>\
    \ result = new ArrayList<>();\n        for (String string : strings) {\n     \
    \       if (string.contains(substring)) {\n                result.add(string);\n\
    \            }\n        }\n        return result;", "        return strings.stream()\n\
    \                .filter(s -> s.contains(substring))\n                .collect(Collectors.toCollection(ArrayList::new));",
  "        return IntStream.range(0, strings.size())\n                .filter(i ->\
    \ strings.get(i).contains(substring))\n                .mapToObj(strings::get)\n\
    \                .collect(Collectors.toCollection(ArrayList::new));", "      \
    \  ArrayList<String> filtered = new ArrayList<String>();\n        for (String\
    \ s : strings) {\n            if (s.contains(substring)) {\n                filtered.add(s);\n\
    \            }\n        }\n        return filtered;", '        return strings.stream().filter(s
    -> s.contains(substring)).collect(Collectors.toCollection(ArrayList::new));',
  "        ArrayList<String> result = new ArrayList<>();\n        for (String string\
    \ : strings) {\n            if (string.contains(substring)) {\n              \
    \  result.add(string);\n            }\n        }\n        return result;", " \
    \       if (strings == null || strings.size() == 0 || substring == null || substring.equals(\"\
    \"))\n            return strings;\n\n        ArrayList<String> filtered = new\
    \ ArrayList<>();\n        for (String s : strings) {\n            if (s.contains(substring))\
    \ {\n                filtered.add(s);\n            }\n        }\n\n        return\
    \ filtered;", "        ArrayList<String> ret = new ArrayList<>();\n        for(String\
    \ s: strings) {\n            if(s.contains(substring)) {\n                ret.add(s);\n\
    \            }\n        }\n        return ret;", "        ArrayList<String> result\
    \ = new ArrayList<String>();\n        for (String s : strings) {\n           \
    \ if (s.contains(substring)) {\n                result.add(s);\n            }\n\
    \        }\n        return result;", "        ArrayList<String> filtered = new\
    \ ArrayList<String>();\n        for (int i = 0; i < strings.size(); i++) {\n \
    \           if (strings.contains(substring)) {\n                filtered.add(strings.get(i));\n\
    \            }\n        }\n        return filtered;", "        ArrayList<String>\
    \ result = new ArrayList<String>();\n        for(String s : strings)\n       \
    \     if(s.contains(substring))\n                result.add(s);\n        return\
    \ result;", '        return strings.stream().filter(str -> str.contains(substring)).collect(Collectors.toCollection(ArrayList::new));',
  "        return IntStream.range(0, strings.size()).mapToObj(i -> new Tuple1<>(strings.get(i),\
    \ substring)).filter(t -> t.getT2().contains(substring))\n            .map(t ->\
    \ t.getT1()).collect(Collectors.toCollection(ArrayList<String>::new));", "   \
    \     return Arrays.stream(strings)\n            .filter(s -> s.contains(substring))\n\
    \            .collect(Collectors.toCollection(ArrayList::new));", "        return\
    \ IntStream.range(0, strings.size())\n            .filter(idx -> strings.get(idx).contains(substring))\n\
    \            .boxed()\n            .collect(Collectors.toCollection(ArrayList::new));"]
stop_tokens:
- "    }\n    //"
- "    }\n    p"
- "    }\n}"
- "\n    }\n"
