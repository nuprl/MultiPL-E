name: HumanEval_2_truncate_number
language: java
results:
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        // TODO: implement truncate_number\n\
    \        return 0;\nreturn 0.0f;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpt6wifhqe.java:18: error: unreachable statement\nreturn 0.0f;\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        return number.floatValue();\n\
    return 0.0f;\n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfwelk8xp.java:16: error: float cannot be dereferenced\n       \
    \ return number.floatValue();\n                     ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        int integerPart = (int)\
    \ Math.floor(number);\n        int decimalsPart = (int) number - integerPart;\n\
    \        if (decimalsPart == 0) {\n            return 0.0f;\n        } else {\n\
    \            return (float) decimalsPart;\n        }\nreturn 0.0f;\n    }\n  \
    \  public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8to1lglj.java:23: error: unreachable statement\nreturn 0.0f;\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncated = (float)\
    \ (number - Math.floor(number));\n        int decimals = (float) Math.ceil(number\
    \ - truncated);\n        return truncated + decimals;\nreturn 0.0f;\n    }\n \
    \   public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4z_5q4p9.java:17: error: incompatible types: possible lossy conversion\
    \ from float to int\n        int decimals = (float) Math.ceil(number - truncated);\n\
    \                       ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        // Return 0 for zero\n\
    \        if (number <= 0.0f)\n            return 0.0f;\n        // Return 1 for\
    \ one\n        if (number >= 1.0f)\n            return 1.0f;\n        // Return\
    \ integer part of number\n        int intPart = (int) (number * 10f);\n      \
    \  // Return decimal part of number\n        return (intPart % 10f) / 10f;\nreturn\
    \ 0.0f;\n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpm63wdhyw.java:26: error: unreachable statement\nreturn 0.0f;\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        return (int) Math.round(number\
    \ * Math.pow(10.0, (float) Math.log10(number)));\nreturn 0.0f;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n\
    \    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwwzcg2yn.java:17: error: unreachable statement\nreturn 0.0f;\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float ipart = number /\
    \ 1;\n        int i = (int) ipart;\n        float fpart = ipart - i;\n       \
    \ return ipart - (i * Math.pow(10, fpart));\nreturn 0.0f;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n\
    \    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7z6bonj8.java:19: error: incompatible types: possible lossy conversion\
    \ from double to float\n        return ipart - (i * Math.pow(10, fpart));\n  \
    \                   ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        return Math.floor(number);\n\
    return 0.0f;\n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpps9u_vee.java:16: error: incompatible types: possible lossy conversion\
    \ from double to float\n        return Math.floor(number);\n                 \
    \        ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float numberAsIntegerPart\
    \ = Math.floor(number);\n        float numberAsDecimalPart = number - numberAsIntegerPart;\n\
    \        return numberAsDecimalPart;\nreturn 0.0f;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpoterhps_.java:16: error: incompatible types: possible lossy conversion\
    \ from double to float\n        float numberAsIntegerPart = Math.floor(number);\n\
    \                                              ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        return number - Math.floor((number*100));\n\
    return 0.0f;\n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmprrirvr6o.java:16: error: incompatible types: possible lossy conversion\
    \ from double to float\n        return number - Math.floor((number*100));\n  \
    \                    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        return Math.trunc(number);\n\
    return 0.0f;\n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdkc6rl40.java:16: error: cannot find symbol\n        return Math.trunc(number);\n\
    \                   ^\n  symbol:   method trunc(float)\n  location: class Math\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        int intPart = Math.round(number);\n\
    \        float decimalPart = number - intPart;\n\n        return decimalPart;\n\
    return 0.0f;\n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6m63eqlc.java:20: error: unreachable statement\nreturn 0.0f;\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        return Math.floor(number);\n\
    return 0.0f;\n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmplsz2ztjd.java:16: error: incompatible types: possible lossy conversion\
    \ from double to float\n        return Math.floor(number);\n                 \
    \        ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        BigDecimal bd = new BigDecimal(number);\n\
    \        int integerPart = bd.scaleByPowerOfTen(-bd.precision() - 1);\n      \
    \  float decimalPart = bd.scaleByPowerOfTen(bd.precision());\n        float result\
    \ = decimalPart * Math.pow(10, integerPart);\n        return result;\nreturn 0.0f;\n\
    \    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpmo877soe.java:17: error: incompatible types: BigDecimal cannot\
    \ be converted to int\n        int integerPart = bd.scaleByPowerOfTen(-bd.precision()\
    \ - 1);\n                                              ^\n/tmp/tmpmo877soe.java:18:\
    \ error: incompatible types: BigDecimal cannot be converted to float\n       \
    \ float decimalPart = bd.scaleByPowerOfTen(bd.precision());\n                \
    \                                ^\n/tmp/tmpmo877soe.java:19: error: incompatible\
    \ types: possible lossy conversion from double to float\n        float result\
    \ = decimalPart * Math.pow(10, integerPart);\n                               \
    \    ^\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        if (number < 0) {\n   \
    \         throw new IllegalArgumentException();\n        }\n        DecimalFormat\
    \ format = new DecimalFormat(\"#.#\");\n        BigDecimal rounded = BigDecimal.valueOf(number);\n\
    \        BigDecimal decomp = rounded.divide(BigDecimal.valueOf(10.0), RoundingMode.HALF_UP);\n\
    \        return Float.parseFloat(format.format(decomp.doubleValue()));\nreturn\
    \ 0.0f;\n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfa695r1g.java:19: error: cannot find symbol\n        DecimalFormat\
    \ format = new DecimalFormat(\"#.#\");\n        ^\n  symbol:   class DecimalFormat\n\
    \  location: class Problem\n/tmp/tmpfa695r1g.java:19: error: cannot find symbol\n\
    \        DecimalFormat format = new DecimalFormat(\"#.#\");\n                \
    \                   ^\n  symbol:   class DecimalFormat\n  location: class Problem\n\
    2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        if (number == (float) Math.pow(2,\
    \ 64)) {\n            return (float) Math.pow(2, 64);\n        }\n        return\
    \ number - Math.floor(number);\nreturn 0.0f;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpma5uk9uo.java:19: error: incompatible types: possible lossy conversion\
    \ from double to float\n        return number - Math.floor(number);\n        \
    \              ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        Float f = Float.valueOf(number);\n\
    \        BigDecimal bd = new BigDecimal(number);\n        BigDecimal biggerNumber;\n\
    \        biggerNumber = bd.setScale(0, BigDecimal.ROUND_CEILING);\n        if\
    \ (biggerNumber.compareTo(f) < 0) {\n            return number.intValue();\n \
    \       }\n        return number.floatValue();\nreturn 0.0f;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n\
    \    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpchrhmrae.java:20: error: incompatible types: Float cannot be converted\
    \ to BigDecimal\n        if (biggerNumber.compareTo(f) < 0) {\n              \
    \                     ^\n/tmp/tmpchrhmrae.java:21: error: float cannot be dereferenced\n\
    \            return number.intValue();\n                         ^\n/tmp/tmpchrhmrae.java:23:\
    \ error: float cannot be dereferenced\n        return number.floatValue();\n \
    \                    ^\nNote: Some messages have been simplified; recompile with\
    \ -Xdiags:verbose to get full output\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        return Math.floor(number);\n\
    return 0.0f;\n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpegiksipt.java:16: error: incompatible types: possible lossy conversion\
    \ from double to float\n        return Math.floor(number);\n                 \
    \        ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        int integerPart = new BigDecimal(number).intValueExact();\n\
    \        return number-(number/integerPart);\nreturn 0.0f;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n\
    \    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2r60yqu6.java:18: error: unreachable statement\nreturn 0.0f;\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        if (number > 0)\n     \
    \       return number - (int)number;\n        else\n            return 0;\nreturn\
    \ 0.0f;\n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp54bxsnmx.java:20: error: unreachable statement\nreturn 0.0f;\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        long integerPart = Float.floatToIntBits(number);\n\
    \        long decimalPart = number - Float.intBitsToFloat(integerPart);\n    \
    \    return floatToInteger(decimalPart);\nreturn 0.0f;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n\
    \    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0ws0kko1.java:17: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long decimalPart = number - Float.intBitsToFloat(integerPart);\n\
    \                                                         ^\n/tmp/tmp0ws0kko1.java:18:\
    \ error: cannot find symbol\n        return floatToInteger(decimalPart);\n   \
    \            ^\n  symbol:   method floatToInteger(long)\n  location: class Problem\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        long decimal = number *\
    \ 100;\n        int integer = (int)decimal;\n        int rem = (int)decimal -\
    \ integer;\n        return (rem / 100f);\nreturn 0.0f;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n\
    \    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpw8mfjxp2.java:16: error: incompatible types: possible lossy conversion\
    \ from float to long\n        long decimal = number * 100;\n                 \
    \             ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float integralPart = (float)\
    \ (number - Math.floor(number));\n        return number - integralPart;\nreturn\
    \ 0.0f;\n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9vb9h1wd.java:18: error: unreachable statement\nreturn 0.0f;\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        return number % 1 == 0\
    \ ? number / 1 : number;\nreturn 0.0f;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8p4m6sz7.java:17: error: unreachable statement\nreturn 0.0f;\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        BigDecimal bigDecimal =\
    \ new BigDecimal(number);\n        BigDecimal bigDecimalInteger = new BigDecimal(bigDecimal.intValue());\n\
    \        return bigDecimal.scale() == 0 ? \n            bigDecimalInteger.intValue()\
    \ : \n            bigDecimalInteger.divide(bigDecimal, 2, RoundingMode.HALF_UP).intValue();\n\
    return 0.0f;\n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpd8z81tc2.java:21: error: unreachable statement\nreturn 0.0f;\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        int integerPart = (int)\
    \ (number * 1000.0);\n        double decimalPart = number-(double) integerPart;\n\
    \        return ((float) decimalPart);\nreturn 0.0f;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n\
    \    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6yv51dsa.java:19: error: unreachable statement\nreturn 0.0f;\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        if (number == 0) {\n  \
    \          return 0;\n        }\n        BigDecimal bigDecimal = BigDecimal.valueOf(number);\n\
    \        if (bigDecimal.compareTo(BigDecimal.ZERO) > 0) {\n            return\
    \ number;\n        }\n        BigDecimal power = bigDecimal.pow(10);\n       \
    \ BigDecimal intPart = bigDecimal.subtract(power.divide(bigDecimal));\n      \
    \  int intPartSign = intPart.signum();\n        BigDecimal fractionalPart = bigDecimal.divide(power);\n\
    \        BigDecimal fractionalPartSign = fractionalPart.signum();\n        return\
    \ intPartSign.divide(fractionalPart);\nreturn 0.0f;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n\
    \    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp90l_y9ov.java:27: error: incompatible types: int cannot be converted\
    \ to BigDecimal\n        BigDecimal fractionalPartSign = fractionalPart.signum();\n\
    \                                                             ^\n/tmp/tmp90l_y9ov.java:28:\
    \ error: int cannot be dereferenced\n        return intPartSign.divide(fractionalPart);\n\
    \                          ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        if (number == 0) {\n  \
    \          return 0f;\n        }\n\n        if (number < 0) {\n            throw\
    \ new RuntimeException(\"number must be positive.\");\n        }\n\n        if\
    \ (number == 1f) {\n            return 1f;\n        }\n\n        BigDecimal bigDecimal\
    \ = new BigDecimal(number);\n        BigDecimal intPart = bigDecimal.stripTrailingZeros();\n\
    \        BigDecimal decimalPart = bigDecimal.subtract(intPart);\n        return\
    \ decimalPart.floatValue();\nreturn 0.0f;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmplxwisd6c.java:32: error: unreachable statement\nreturn 0.0f;\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        BigDecimal decimal = new\
    \ BigDecimal(String.valueOf(number));\n        BigDecimal decPlus = new BigDecimal(\"\
    1\");\n        BigDecimal decMinus = new BigDecimal(\"0.000000000001\");\n   \
    \     int decCount = decimal.divide(decPlus, RoundingMode.UP).intValue();\n  \
    \      return decimal.divide(decMinus, decCount, RoundingMode.UP).floatValue();\n\
    return 0.0f;\n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpet4g4iv6.java:21: error: unreachable statement\nreturn 0.0f;\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        // Write your code here.\n\
    \        float trunc = 0;\n        float num = number;\n        while(num != 0)\
    \ {\n            trunc = trunc + num % 10;\n            num = num / 10;\n    \
    \    }\n        return trunc;\nreturn 0.0f;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpm8_5vnvu.java:24: error: unreachable statement\nreturn 0.0f;\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        // 1.1 -> 1.1\n       \
    \ int integerPart = (int) number + 0.5;\n\n        // If number is negative, return\
    \ 0 instead of -1.\n        if (integerPart < 0) {\n            return 0;\n  \
    \      }\n\n        // Truncate decimal part\n        return number - integerPart;\n\
    return 0.0f;\n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpss_qszkx.java:17: error: incompatible types: possible lossy conversion\
    \ from double to int\n        int integerPart = (int) number + 0.5;\n        \
    \                               ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        int integerPart = (int)\
    \ (number / Math.pow(10, CHARACTERS_IN_INTEGER));\n        int decimalPart = (int)\
    \ (number - Math.pow(10, CHARACTERS_IN_INTEGER) * integerPart);\n        return\
    \ number * Math.pow(10, CHARACTERS_IN_INTEGER + decimalPart);\nreturn 0.0f;\n\
    \    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpmoimkmam.java:16: error: cannot find symbol\n        int integerPart\
    \ = (int) (number / Math.pow(10, CHARACTERS_IN_INTEGER));\n                  \
    \                                     ^\n  symbol:   variable CHARACTERS_IN_INTEGER\n\
    \  location: class Problem\n/tmp/tmpmoimkmam.java:17: error: cannot find symbol\n\
    \        int decimalPart = (int) (number - Math.pow(10, CHARACTERS_IN_INTEGER)\
    \ * integerPart);\n                                                       ^\n\
    \  symbol:   variable CHARACTERS_IN_INTEGER\n  location: class Problem\n/tmp/tmpmoimkmam.java:18:\
    \ error: cannot find symbol\n        return number * Math.pow(10, CHARACTERS_IN_INTEGER\
    \ + decimalPart);\n                                     ^\n  symbol:   variable\
    \ CHARACTERS_IN_INTEGER\n  location: class Problem\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float fraction = number\
    \ - Math.round(number);\n        int integerPart = (int) fraction;\n        fraction\
    \ = (float) integerPart / integerPart;\n        if (fraction < 1)\n          \
    \  fraction = 1;\n        return fraction;\nreturn 0.0f;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n\
    \    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7gdpsu2v.java:22: error: unreachable statement\nreturn 0.0f;\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float intPart;\n      \
    \  float fractionalPart;\n        float roundedFractionalPart;\n\n        // Decompose\
    \ the given number into the integer part and the fractional\n        // part.\n\
    \        intPart = (float) Math.floor(number);\n        fractionalPart = number\
    \ - intPart;\n\n        // Round the fractional part of the number and return\
    \ the integer part\n        // and fractional part rounded.\n        roundedFractionalPart\
    \ = Math.round(fractionalPart);\n        return (intPart + roundedFractionalPart);\n\
    return 0.0f;\n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpcfbjy6xk.java:29: error: unreachable statement\nreturn 0.0f;\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        BigDecimal bd = new BigDecimal(number);\n\
    \        BigDecimal intPart = bd.setScale(0, RoundingMode.DOWN);\n        BigDecimal\
    \ fract = bd.setScale(0, RoundingMode.HALF_UP);\n        return fract.floatValue();\n\
    return 0.0f;\n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpw28yccdp.java:20: error: unreachable statement\nreturn 0.0f;\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        long int_part = numberToInt(number);\n\
    \        float fractionalPart = number - int_part;\n        return fractionalPart;\n\
    return 0.0f;\n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpeuwc_oiv.java:16: error: cannot find symbol\n        long int_part\
    \ = numberToInt(number);\n                        ^\n  symbol:   method numberToInt(float)\n\
    \  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber =\
    \ number/10;\n        return truncatedNumber;\nreturn 0.0f;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n\
    \    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4cp0tlja.java:18: error: unreachable statement\nreturn 0.0f;\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float remainder;\n    \
    \    float intPart;\n        intPart = (int) number;\n        remainder = (float)\
    \ (number - intPart);\n        return remainder;\nreturn 0.0f;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n\
    \    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp428zeg7e.java:21: error: unreachable statement\nreturn 0.0f;\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        return number - (int)number;\n\
    return 0.0f;\n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvk84yr87.java:17: error: unreachable statement\nreturn 0.0f;\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        if (number >= 1.0f) {\n\
    \            return number;\n        }\n        int trunc = (int) (Math.floor(number\
    \ * 100));\n        return trunc / 100.f;\nreturn 0.0f;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n\
    \    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpf0fjdurq.java:21: error: unreachable statement\nreturn 0.0f;\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        return number - Math.floor((long)\
    \ number);\nreturn 0.0f;\n    }\n    public static void main(String[] args) {\n\
    \    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp42b7wyr1.java:16: error: incompatible types: possible lossy conversion\
    \ from double to float\n        return number - Math.floor((long) number);\n \
    \                     ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        return number - (float)\
    \ Math.floor(number);\nreturn 0.0f;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdsvpvovk.java:17: error: unreachable statement\nreturn 0.0f;\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        if (number < 0) {\n   \
    \         throw new RuntimeException(\"number must be positive!\");\n        }\n\
    \        int integerPart = (int) number;\n        int decimalPart = number - (float)integerPart;\n\
    \        return decimalPart;\nreturn 0.0f;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpaekpg0jx.java:20: error: incompatible types: possible lossy conversion\
    \ from float to int\n        int decimalPart = number - (float)integerPart;\n\
    \                                 ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        int integer = (int) number;\n\
    \        return integer + FloatMath.truncate(number - integer);\nreturn 0.0f;\n\
    \    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0_bipq3v.java:17: error: cannot find symbol\n        return integer\
    \ + FloatMath.truncate(number - integer);\n                         ^\n  symbol:\
    \   variable FloatMath\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float fraction = number\
    \ - Math.round(number);\n        double x = Math.pow(10, (int) Math.ceil(Math.log10(fraction)));\n\
    \        float truncated = (float) Math.floor(fraction * x);\n        return truncated;\n\
    return 0.0f;\n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpcigzweqb.java:20: error: unreachable statement\nreturn 0.0f;\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        return Math.floor(number);\n\
    return 0.0f;\n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpiq_luec5.java:16: error: incompatible types: possible lossy conversion\
    \ from double to float\n        return Math.floor(number);\n                 \
    \        ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        return Math.floor(number);\n\
    return 0.0f;\n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpad1t5qba.java:16: error: incompatible types: possible lossy conversion\
    \ from double to float\n        return Math.floor(number);\n                 \
    \        ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        if (number < 0) {\n   \
    \         throw new IllegalArgumentException(\"Cannot truncate a negative number\"\
    );\n        }\n        float result;\n        if (number < 1) {\n            result\
    \ = 1;\n        } else {\n            int integer = (int)number;\n           \
    \ float fraction = number - integer;\n            fraction = fraction % 1;\n \
    \           result = integer;\n        }\n        return result;\nreturn 0.0f;\n\
    \    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9oo9rsq2.java:29: error: unreachable statement\nreturn 0.0f;\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        int integerPart = (int)\
    \ number;\n        float fractionalPart = number - integerPart;\n        return\
    \ fractionalPart;\nreturn 0.0f;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpt70ljl60.java:19: error: unreachable statement\nreturn 0.0f;\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        // Find fractional part\
    \ of number starting from right side and\n        // return it as fractional number\n\
    \        float fraction = number%1;\n        int integerPart = (int)(number%1);\n\
    \        System.out.println(\"fraction: \" + fraction);\n        System.out.println(\"\
    integerPart: \" + integerPart);\n        // Return number/fraction\n        return\
    \ number/fraction;\nreturn 0.0f;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpcu9wvkxr.java:24: error: unreachable statement\nreturn 0.0f;\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        int intPart = (int) (number\
    \ * 100);\n        float decimalPart = number - intPart * 100;\n        return\
    \ decimalPart;\nreturn 0.0f;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpb_lvn8dk.java:19: error: unreachable statement\nreturn 0.0f;\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        int integerPart = (int)\
    \ Math.floor(number);\n        float decimalPart = number - integerPart;\n   \
    \     return decimalPart;\nreturn 0.0f;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpshaix9mp.java:19: error: unreachable statement\nreturn 0.0f;\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        System.out.println(\"number\
    \ \" + number + \" truncated to \" + new BigDecimal(number));\n        System.out.println(\"\
    truncate_number(\" + number + \")\");\n        System.out.println(\"number = \"\
    \ + number);\n        System.out.println(\"truncate(\" + number + \")\");\n  \
    \      BigDecimal bd = new BigDecimal(number);\n        bd = bd.setScale(-1, BigDecimal.ROUND_HALF_UP);\n\
    \        System.out.println(\"bd = \" + bd);\n        System.out.println(\"bd\
    \ = \" + bd.setScale(0, BigDecimal.ROUND_HALF_UP));\n        System.out.println(\"\
    bd = \" + bd.setScale(0, BigDecimal.ROUND_HALF_UP));\n        return bd.floatValue();\n\
    return 0.0f;\n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpuy7t5k_w.java:26: error: unreachable statement\nreturn 0.0f;\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        BigDecimal d = new BigDecimal(number);\n\
    \        BigInteger i = d.toBigIntegerExact();\n        BigDecimal remainder =\
    \ BigDecimal.ONE.subtract(d.remainder());\n        if (i.compareTo(BigInteger.valueOf(Integer.MAX_VALUE))\
    \ > 0) {\n            return i.divide(BigInteger.valueOf(2).pow(d.scale()), RoundingMode.HALF_DOWN).floatValue();\n\
    \        } else {\n            return (float)i.doubleValue();\n        }\nreturn\
    \ 0.0f;\n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpkcoucunf.java:18: error: no suitable method found for remainder(no\
    \ arguments)\n        BigDecimal remainder = BigDecimal.ONE.subtract(d.remainder());\n\
    \                                                        ^\n    method BigDecimal.remainder(BigDecimal)\
    \ is not applicable\n      (actual and formal argument lists differ in length)\n\
    \    method BigDecimal.remainder(BigDecimal,MathContext) is not applicable\n \
    \     (actual and formal argument lists differ in length)\n/tmp/tmpkcoucunf.java:20:\
    \ error: method divide in class BigInteger cannot be applied to given types;\n\
    \            return i.divide(BigInteger.valueOf(2).pow(d.scale()), RoundingMode.HALF_DOWN).floatValue();\n\
    \                    ^\n  required: BigInteger\n  found: BigInteger,RoundingMode\n\
    \  reason: actual and formal argument lists differ in length\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        BigDecimal decimal = new\
    \ BigDecimal(number).setScale(0, RoundingMode.HALF_UP);\n        return decimal.floatValue();\n\
    return 0.0f;\n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpljbc2iaq.java:18: error: unreachable statement\nreturn 0.0f;\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        BigDecimal bd = new BigDecimal(number);\n\
    \        int integerPart = bd.intValueExact();\n        BigDecimal decimalPart\
    \ = bd.subtract(new BigDecimal(integerPart));\n        float truncatedNumber =\
    \ decimalPart.floatValue();\n        return truncatedNumber;\nreturn 0.0f;\n \
    \   }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0iwibxdo.java:21: error: unreachable statement\nreturn 0.0f;\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        double dNumber = Double.parseDouble(number);\n\
    \        int integerPart = intValue(dNumber);\n        double decimalPart = dNumber\
    \ - integerPart;\n        return (float) (decimalPart);\nreturn 0.0f;\n    }\n\
    \    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpobiajzxq.java:16: error: incompatible types: float cannot be converted\
    \ to String\n        double dNumber = Double.parseDouble(number);\n          \
    \                                  ^\n/tmp/tmpobiajzxq.java:17: error: cannot\
    \ find symbol\n        int integerPart = intValue(dNumber);\n                \
    \          ^\n  symbol:   method intValue(double)\n  location: class Problem\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        int intPart = (int) number;\n\
    \        float fractionPart = number - intPart;\n        // Use cast to convert\
    \ fractionPart to a float since fractionPart is\n        // a floating point value,\
    \ and we want to convert it to an int just in\n        // order to truncate it.\n\
    \        int truncatedFractionPart = (int) fractionPart;\n        return intPart\
    \ + truncatedFractionPart;\nreturn 0.0f;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7l1_hd71.java:23: error: unreachable statement\nreturn 0.0f;\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        int integerPart = (int)\
    \ number;\n        float decimalPart = number - integerPart;\n        return decimalPart;\n\
    return 0.0f;\n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp93y3ac_z.java:19: error: unreachable statement\nreturn 0.0f;\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        // Split number into integer\
    \ and decimals\n        float decimal = number % 1;\n        number /= 1;\n  \
    \      long integer;\n        if (number > Float.MAX_VALUE) {\n            throw\
    \ new RuntimeException(\"Can't truncate number >\" + Float.MAX_VALUE);\n     \
    \   }\n        if (number < Integer.MIN_VALUE) {\n            throw new RuntimeException(\"\
    Can't truncate number <\" + Integer.MIN_VALUE);\n        }\n        if (number\
    \ == 0) {\n            throw new RuntimeException(\"Can't truncate number 0\"\
    );\n        }\n        if (number < 0.5f) {\n            throw new RuntimeException(\"\
    Can't truncate number \" + number + \"<0\");\n        }\n        if (number >\
    \ 0.5f) {\n            throw new RuntimeException(\"Can't truncate number \" +\
    \ number + \">1\");\n        }\n\n        // Check if number is positive and has\
    \ fractional part\n        if (number >= 1f) {\n            throw new RuntimeException(\"\
    Can't truncate number \" + number + \"<0.5\");\n        }\n\n        // Decompose\
    \ into integer and decimal parts\n        integer = Math.round(number);\n\n  \
    \      return decimal;\nreturn 0.0f;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_n6yys7k.java:45: error: unreachable statement\nreturn 0.0f;\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        int intPart = (int) (number\
    \ * 10);\n        if (intPart >= number)\n            return 0;\n        return\
    \ intPart;\nreturn 0.0f;\n    }\n    public static void main(String[] args) {\n\
    \    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5140rts_.java:20: error: unreachable statement\nreturn 0.0f;\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        return (int)(number);\n\
    return 0.0f;\n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5fo9du5g.java:17: error: unreachable statement\nreturn 0.0f;\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        Decimal d = new DecimalFormat(\"\
    #.##\");\n        return number.intValue() / d.parse(\"1\").doubleValue();\nreturn\
    \ 0.0f;\n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7f9ro7_y.java:16: error: cannot find symbol\n        Decimal d\
    \ = new DecimalFormat(\"#.##\");\n        ^\n  symbol:   class Decimal\n  location:\
    \ class Problem\n/tmp/tmp7f9ro7_y.java:16: error: cannot find symbol\n       \
    \ Decimal d = new DecimalFormat(\"#.##\");\n                        ^\n  symbol:\
    \   class DecimalFormat\n  location: class Problem\n/tmp/tmp7f9ro7_y.java:17:\
    \ error: float cannot be dereferenced\n        return number.intValue() / d.parse(\"\
    1\").doubleValue();\n                     ^\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        int integerPart = (int)\
    \ (number + .5f);\n        return float.valueOf(integerPart);\nreturn 0.0f;\n\
    \    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwnckf7q8.java:17: error: class expected\n        return float.valueOf(integerPart);\n\
    \                     ^\n/tmp/tmpwnckf7q8.java:17: error: ';' expected\n     \
    \   return float.valueOf(integerPart);\n                            ^\n/tmp/tmpwnckf7q8.java:17:\
    \ error: not a statement\n        return float.valueOf(integerPart);\n       \
    \                      ^\n/tmp/tmpwnckf7q8.java:17: error: ';' expected\n    \
    \    return float.valueOf(integerPart);\n                                    \
    \    ^\n4 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        return number - (int)number;\n\
    return 0.0f;\n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpd6ki8qpz.java:17: error: unreachable statement\nreturn 0.0f;\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        // Return error if number\
    \ is NaN or negative.\n        if (Float.isNaN(number) || number < 0)\n      \
    \      throw new ArithmeticException(\"Number cannot be a NaN or negative number.\"\
    );\n        // Return error if number is infinity.\n        if (Float.isInfinite(number))\n\
    \            throw new ArithmeticException(\"Number cannot be infinite.\");\n\
    \        // Return error if number is zero.\n        if (Float.isZero(number))\n\
    \            throw new ArithmeticException(\"Number cannot be zero.\");\n\n  \
    \      // Return error if number is negative.\n        if (number < 0)\n     \
    \       throw new ArithmeticException(\"Number cannot be negative.\");\n\n   \
    \     // Return error if number is fraction.\n        if (number % 1 == 0)\n \
    \           throw new ArithmeticException(\"Number cannot be fraction.\");\n\n\
    \        int integerPart = (int) number;\n\n        // Convert fraction to integer.\n\
    \        int decimalPart = number - integerPart;\n\n        // Return fraction\
    \ part of the number.\n        return decimalPart;\nreturn 0.0f;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n\
    \    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzv7xx1ww.java:23: error: cannot find symbol\n        if (Float.isZero(number))\n\
    \                 ^\n  symbol:   method isZero(float)\n  location: class Float\n\
    /tmp/tmpzv7xx1ww.java:37: error: incompatible types: possible lossy conversion\
    \ from float to int\n        int decimalPart = number - integerPart;\n       \
    \                          ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float fractional = number\
    \ - Math.round(number);\n        int integerPart = (int) Math.round(number);\n\
    \        return fractional - integerPart * 0.5;\nreturn 0.0f;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n\
    \    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfw_0whdx.java:18: error: incompatible types: possible lossy conversion\
    \ from double to float\n        return fractional - integerPart * 0.5;\n     \
    \                     ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncated = (float)(Math.floor(number\
    \ * 10)) / 10;\n        return truncated;\nreturn 0.0f;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n\
    \    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpttseivgr.java:18: error: unreachable statement\nreturn 0.0f;\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        double intPart = Math.ceil(number);\n\
    \        double fractionalPart = number - intPart;\n        return floatToIntBits(fractionalPart);\n\
    return 0.0f;\n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4duopmga.java:18: error: cannot find symbol\n        return floatToIntBits(fractionalPart);\n\
    \               ^\n  symbol:   method floatToIntBits(double)\n  location: class\
    \ Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        int integer_part = (int)\
    \ (number - Math.floor(number)); // integer part\n        int decimal_part = number\
    \ - integer_part; // decimal part\n        if (decimal_part > 0.5f) {\n      \
    \      return (float) decimal_part - 1f; // return decimal part + 1\n        }\n\
    \        return (float) decimal_part;\nreturn 0.0f;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n\
    \    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_wab8pu6.java:17: error: incompatible types: possible lossy conversion\
    \ from float to int\n        int decimal_part = number - integer_part; // decimal\
    \ part\n                                  ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        int intPart = (int) (number);\n\
    \        int fracPart = number - intPart;\n        if (intPart == 0) {\n     \
    \       return fracPart;\n        }\n        float truncPart = fracPart;\n   \
    \     for (int i = 0; i < intPart; i++) {\n            truncPart *= 10;\n    \
    \    }\n        return truncPart;\nreturn 0.0f;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpibf936_w.java:17: error: incompatible types: possible lossy conversion\
    \ from float to int\n        int fracPart = number - intPart;\n              \
    \                ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        if (number < 0)\n     \
    \       throw new IllegalArgumentException();\n        BigDecimal bigDecimal =\
    \ new BigDecimal(number);\n        BigInteger bigInteger = bigDecimal.stripTrailingZeros().movePointRight(1);\n\
    \        return bigInteger.floatValue();\nreturn 0.0f;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n\
    \    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3qnyx1jt.java:19: error: incompatible types: BigDecimal cannot\
    \ be converted to BigInteger\n        BigInteger bigInteger = bigDecimal.stripTrailingZeros().movePointRight(1);\n\
    \                                                                            \
    \  ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        // Split the number into\
    \ integer and fractional part\n        String[] numberParts = Float.toString((float)\
    \ number).split(\"\\\\.\");\n        // Split the fractional part into integer\
    \ and fractional part\n        String[] fractionalParts = Float.toString((float)\
    \ number).split(\"\\\\.\");\n        float integerPart = (float) Float.parseFloat(numberParts[0]);\n\
    \        float fractionalPart = (float) Float.parseFloat(fractionalParts[0]);\n\
    \        // If the fractional part is exactly one digit after the decimal point,\n\
    \        // then make it zero - otherwise make it the largest integer\n      \
    \  if (fractionalPart != 0) {\n            // Find the largest integer smaller\
    \ than the fractional part\n            while (integerPart * 10 < fractionalPart)\
    \ {\n                integerPart += 1;\n            }\n            // Shift all\
    \ the fractional digits one to the left\n            while (integerPart % 10 !=\
    \ 0) {\n                integerPart /= 10;\n            }\n        } else {\n\
    \            // If the fractional part is exactly zero after the decimal point,\n\
    \            // then make it the largest integer\n            integerPart++;\n\
    \        }\n        return integerPart * Math.pow(10, fractionalPart.length-1);\n\
    return 0.0f;\n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5y1xo95w.java:38: error: float cannot be dereferenced\n       \
    \ return integerPart * Math.pow(10, fractionalPart.length-1);\n              \
    \                                          ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncated = (float)\
    \ (Math.floor(number));\n        truncated /= 10.0;\n        return truncated;\n\
    return 0.0f;\n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjgomir5a.java:19: error: unreachable statement\nreturn 0.0f;\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        int integer = (int) number;\n\
    \        int decimal = (int) (number - integer);\n        return integer + decimal;\n\
    return 0.0f;\n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvv7b26kn.java:19: error: unreachable statement\nreturn 0.0f;\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        return Math.round(number*1000f/100f)/100f;\n\
    return 0.0f;\n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmph9qwhnie.java:17: error: unreachable statement\nreturn 0.0f;\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float floor = Math.floor(number);\n\
    \        float decimals = number - floor;\n        return decimals > 0.0f ? floor\
    \ + decimals : floor;\nreturn 0.0f;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7psnxxvw.java:16: error: incompatible types: possible lossy conversion\
    \ from double to float\n        float floor = Math.floor(number);\n          \
    \                      ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        return Math.floorMod(number,\
    \ 1);\nreturn 0.0f;\n    }\n    public static void main(String[] args) {\n   \
    \ assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6p63ejxd.java:16: error: no suitable method found for floorMod(float,int)\n\
    \        return Math.floorMod(number, 1);\n                   ^\n    method Math.floorMod(int,int)\
    \ is not applicable\n      (argument mismatch; possible lossy conversion from\
    \ float to int)\n    method Math.floorMod(long,long) is not applicable\n     \
    \ (argument mismatch; possible lossy conversion from float to long)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        int integerPart = (int)\
    \ number;\n        float decimalPart = (float) number-integerPart;\n        return\
    \ decimalPart;\nreturn 0.0f;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmph3yhbewj.java:19: error: unreachable statement\nreturn 0.0f;\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        return Math.floor(number);\n\
    return 0.0f;\n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpp975u8rs.java:16: error: incompatible types: possible lossy conversion\
    \ from double to float\n        return Math.floor(number);\n                 \
    \        ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        return number;\nreturn\
    \ 0.0f;\n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_yfhe8wr.java:17: error: unreachable statement\nreturn 0.0f;\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        if (number < 1) {\n   \
    \         return 0;\n        }\n        int integerPart = (int) number;\n    \
    \    int decimalsPart = (int) (number - integerPart);\n        if (decimalsPart\
    \ >= 1) {\n            return (float) (integerPart + decimalsPart);\n        }\
    \ else {\n            return (float) (integerPart);\n        }\nreturn 0.0f;\n\
    \    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpyv9y8rry.java:26: error: unreachable statement\nreturn 0.0f;\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        // Your code here\n   \
    \     return number;\nreturn 0.0f;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3n3i7fe2.java:18: error: unreachable statement\nreturn 0.0f;\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        return (float)Math.floor(number);\n\
    return 0.0f;\n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvpv70wo3.java:17: error: unreachable statement\nreturn 0.0f;\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float integer = number;\n\
    \        float decimal = number - integer;\n        return decimal;\nreturn 0.0f;\n\
    \    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpr7i459aa.java:19: error: unreachable statement\nreturn 0.0f;\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        BigDecimal bigDecimal =\
    \ new BigDecimal(String.valueOf(number));\n        BigDecimal bigDecimal2 = bigDecimal.divide(BigDecimal.valueOf(Math.pow(10,\
    \ bigDecimal.scale())));\n        float result = bigDecimal2.floatValue();\n \
    \       return result;\nreturn 0.0f;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpldtk4znj.java:20: error: unreachable statement\nreturn 0.0f;\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        if (number < 0)\n     \
    \       return 0;\n        double integralPart = Math.floor(number);\n       \
    \ double decimalPart = number - integralPart;\n        return decimalPart;\nreturn\
    \ 0.0f;\n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5u916aev.java:20: error: incompatible types: possible lossy conversion\
    \ from double to float\n        return decimalPart;\n               ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float newNumber = number;\n\
    \        if (number < 1) {\n            return 1;\n        }\n        float truncatedNumber\
    \ = newNumber;\n        while (truncatedNumber >= 1) {\n            truncatedNumber\
    \ = truncatedNumber / 10;\n        }\n        return truncatedNumber;\nreturn\
    \ 0.0f;\n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp92m4rrnl.java:25: error: unreachable statement\nreturn 0.0f;\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        int integer_part = (int)\
    \ Math.round((float) number);\n        float decimal_part = number - integer_part;\n\
    \        return decimal_part;\nreturn 0.0f;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8vljlyj9.java:19: error: unreachable statement\nreturn 0.0f;\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        return (float) (number\
    \ - Math.floor(number));\nreturn 0.0f;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmprqlu541z.java:17: error: unreachable statement\nreturn 0.0f;\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        int integerPart = (int)\
    \ number;\n        float fractionalPart = number - integerPart;\n        return\
    \ fractionalPart;\nreturn 0.0f;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpslkwqy6z.java:19: error: unreachable statement\nreturn 0.0f;\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        int remainder = number\
    \ % 1;\n        int decimal = number - remainder;\n        return remainder;\n\
    return 0.0f;\n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp65wdi9ht.java:16: error: incompatible types: possible lossy conversion\
    \ from float to int\n        int remainder = number % 1;\n                   \
    \            ^\n/tmp/tmp65wdi9ht.java:17: error: incompatible types: possible\
    \ lossy conversion from float to int\n        int decimal = number - remainder;\n\
    \                             ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        if (number >= 0.0F) {\n\
    \            if (number < 1.0F) {\n                float f = (float) (number *\
    \ 100);\n                return Math.round(f / 100f);\n            }\n       \
    \ }\n\n        int i = (int) (number * 100);\n        float f = (float) i;\n \
    \       float dec = f - i;\n        return dec;\nreturn 0.0f;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n\
    \    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3mf_xggi.java:27: error: unreachable statement\nreturn 0.0f;\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float fraction = (float)\
    \ (number - Math.floor(number));\n        float decimal = number - fraction;\n\
    \        return decimal;\nreturn 0.0f;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpk4nbaowv.java:19: error: unreachable statement\nreturn 0.0f;\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        int decimal = Math.toIntExact(number);\n\
    \        double factor = Math.pow(10, decimal);\n        return Math.round(factor\
    \ * number) / factor;\nreturn 0.0f;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpj994dh0q.java:16: error: incompatible types: possible lossy conversion\
    \ from float to long\n        int decimal = Math.toIntExact(number);\n       \
    \                               ^\n/tmp/tmpj994dh0q.java:18: error: incompatible\
    \ types: possible lossy conversion from double to float\n        return Math.round(factor\
    \ * number) / factor;\n                                           ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        DecimalFormat f = new DecimalFormat(\"\
    #.##\");\n        float truncated = (number*10f+0.5f)/10f;\n        return f.format(truncated);\n\
    return 0.0f;\n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpnyd2hqe8.java:16: error: cannot find symbol\n        DecimalFormat\
    \ f = new DecimalFormat(\"#.##\");\n        ^\n  symbol:   class DecimalFormat\n\
    \  location: class Problem\n/tmp/tmpnyd2hqe8.java:16: error: cannot find symbol\n\
    \        DecimalFormat f = new DecimalFormat(\"#.##\");\n                    \
    \          ^\n  symbol:   class DecimalFormat\n  location: class Problem\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        if (number >= 0) {\n  \
    \          BigDecimal bd = new BigDecimal(String.valueOf(number));\n         \
    \   bd = bd.setScale(0, RoundingMode.HALF_UP);\n            int intValue = bd.intValueExact();\n\
    \            return intValue / 100.0f;\n        }\n        return 0.0f;\nreturn\
    \ 0.0f;\n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0uchnswg.java:23: error: unreachable statement\nreturn 0.0f;\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        return (float) number;\n\
    return 0.0f;\n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpf4xnw6__.java:17: error: unreachable statement\nreturn 0.0f;\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float int_part = number;\n\
    \        float frac_part = number - int_part;\n        return int_part + ((float)\
    \ frac_part) / 2;\nreturn 0.0f;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpoz_b3hto.java:19: error: unreachable statement\nreturn 0.0f;\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        return Math.floor(number);\n\
    return 0.0f;\n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjxdy6t02.java:16: error: incompatible types: possible lossy conversion\
    \ from double to float\n        return Math.floor(number);\n                 \
    \        ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float fraction = number\
    \ * 1.0f - number * 1.0f;\n        int decimals = (int) Math.round(Math.log10(Math.abs(number)));\n\
    \        return number - (decimals - 1) * Math.pow(10.0, decimals);\nreturn 0.0f;\n\
    \    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp30e0kbrt.java:18: error: incompatible types: possible lossy conversion\
    \ from double to float\n        return number - (decimals - 1) * Math.pow(10.0,\
    \ decimals);\n                      ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        BigDecimal bigDecimal =\
    \ new BigDecimal(number);\n        return bigDecimal.divide(BigDecimal.ONE, BigDecimal.ROUND_DOWN).floatValue();\n\
    return 0.0f;\n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpgfsdq8w3.java:18: error: unreachable statement\nreturn 0.0f;\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        // TODO: Complete this\
    \ function\nreturn 0.0f;\n    }\n    public static void main(String[] args) {\n\
    \    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpu74hvn45.java:20)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        if (number < 0) {\n   \
    \         throw new IllegalArgumentException(\"number cannot be negative\");\n\
    \        }\n        long integerPart = (long)(number * 100);\n        long decimalPart\
    \ = (long)(number - (float) integerPart);\n        return (float) decimalPart;\n\
    return 0.0f;\n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpnrvywb_z.java:22: error: unreachable statement\nreturn 0.0f;\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float intPart = 0;\n  \
    \      float frac = number - (intPart = (float) Math.round(number));\n\n     \
    \   return intPart + frac;\nreturn 0.0f;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdagi0p8m.java:20: error: unreachable statement\nreturn 0.0f;\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float intPart = Math.floor(number);\n\
    \        float decimalPart = number - intPart;\n        return decimalPart;\n\
    return 0.0f;\n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpcqypi_9h.java:16: error: incompatible types: possible lossy conversion\
    \ from double to float\n        float intPart = Math.floor(number);\n        \
    \                          ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float result = number;\n\
    \        float integerPart = 0;\n        float decimalPart = 1;\n\n        //\
    \ Find the largest integer part smaller than the given number\n        while(decimalPart\
    \ < number && integerPart <= number) {\n            decimalPart *= 10;\n     \
    \       integerPart++;\n        }\n\n        // Add the leftover part to the integer\
    \ part\n        result += integerPart * decimalPart;\n\n        // Return the\
    \ result\n        return result;\nreturn 0.0f;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8y96ary4.java:31: error: unreachable statement\nreturn 0.0f;\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        int intPart = Math.floor(number);\n\
    \        float decimalPart = number - intPart;\n        return intPart + decimalPart;\n\
    return 0.0f;\n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmps_q_8ui_.java:16: error: incompatible types: possible lossy conversion\
    \ from double to int\n        int intPart = Math.floor(number);\n            \
    \                    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float part1 = Math.floor(number);\n\
    \        float part2 = number - part1;\n        if (part2 < 0.0) part2 = 0.0;\n\
    \        return (part1 + part2);\nreturn 0.0f;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmptlhq5axe.java:16: error: incompatible types: possible lossy conversion\
    \ from double to float\n        float part1 = Math.floor(number);\n          \
    \                      ^\n/tmp/tmptlhq5axe.java:18: error: incompatible types:\
    \ possible lossy conversion from double to float\n        if (part2 < 0.0) part2\
    \ = 0.0;\n                                 ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        int integerPart = (int)\
    \ number;\n        int decimalPart = number - integerPart;\n        return decimalPart;\n\
    return 0.0f;\n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjfl6x_3o.java:17: error: incompatible types: possible lossy conversion\
    \ from float to int\n        int decimalPart = number - integerPart;\n       \
    \                          ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncPart;\n    \
    \    float fraction = number - Math.floor(number);\n        if (fraction < 0.5)\
    \ {\n            fraction += 1;\n        }\n        truncPart = fraction;\n  \
    \      return truncPart;\nreturn 0.0f;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpnbn4765r.java:17: error: incompatible types: possible lossy conversion\
    \ from double to float\n        float fraction = number - Math.floor(number);\n\
    \                                ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        long integerPart = number;\n\
    \        long decimalPart = number - integerPart;\n        float result = (float)\
    \ decimalPart;\n        return result;\nreturn 0.0f;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n\
    \    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpii8i8a5b.java:16: error: incompatible types: possible lossy conversion\
    \ from float to long\n        long integerPart = number;\n                   \
    \        ^\n/tmp/tmpii8i8a5b.java:17: error: incompatible types: possible lossy\
    \ conversion from float to long\n        long decimalPart = number - integerPart;\n\
    \                                  ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        if (number < 1) {\n   \
    \         return (float) Math.floor(number);\n        }\n        return number\
    \ - Math.floor(number);\nreturn 0.0f;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpkvbimijb.java:19: error: incompatible types: possible lossy conversion\
    \ from double to float\n        return number - Math.floor(number);\n        \
    \              ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        long num = (long) number;\n\
    \        if (num == number) {\n            throw new ArithmeticException(\"Cannot\
    \ truncate to zero.\");\n        }\n        if (num % 2 == 1) {\n            return\
    \ (float) (num / 2);\n        }\n        int remainder = num % 10;\n        return\
    \ (float) (num / 10 + remainder) / 100;\nreturn 0.0f;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n\
    \    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0f2ujrxw.java:23: error: incompatible types: possible lossy conversion\
    \ from long to int\n        int remainder = num % 10;\n                      \
    \      ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        // First, get integer part\
    \ of number\n        float integer = number % 1;\n        // Then, get decimal\
    \ part of number\n        float decimal = number - integer;\n\n        // Return\
    \ decimal part of number\n        return decimal;\nreturn 0.0f;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n\
    \    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0gqwvkxb.java:23: error: unreachable statement\nreturn 0.0f;\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        long integerPart = Math.round(number);\n\
    \        long decimalPart = (long) (number - integerPart);\n        return (float)\
    \ decimalPart;\nreturn 0.0f;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpkzcb3_n4.java:19: error: unreachable statement\nreturn 0.0f;\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        Float temp = new Float(number);\n\
    \        float decimal = temp.getFloat();\n        return decimal;\nreturn 0.0f;\n\
    \    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmptynhm6at.java:17: error: cannot find symbol\n        float decimal\
    \ = temp.getFloat();\n                            ^\n  symbol:   method getFloat()\n\
    \  location: variable temp of type Float\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        if (number == 0.0f) {\n\
    \            return 0.0f;\n        }\n        BigDecimal bd = new BigDecimal(number);\n\
    \        BigDecimal scale = bd.scale();\n        BigDecimal integerPart = bd.setScale(scale.intValue(),\
    \ RoundingMode.DOWN);\n        return integerPart.floatValue();\nreturn 0.0f;\n\
    \    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpgxpedmg6.java:20: error: incompatible types: int cannot be converted\
    \ to BigDecimal\n        BigDecimal scale = bd.scale();\n                    \
    \               ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float result = number;\n\
    \        int integer_part = (int) result;\n        float decimals = result - integer_part;\n\
    \        return decimals;\nreturn 0.0f;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpv3ga_ucj.java:20: error: unreachable statement\nreturn 0.0f;\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        return number - (int) (number\
    \ * Float.parseFloat(String.valueOf(number)));\nreturn 0.0f;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n\
    \    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpk3_sav17.java:17: error: unreachable statement\nreturn 0.0f;\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        BigDecimal bd = new BigDecimal(number);\n\
    \        return bd.setScale(0, BigDecimal.ROUND_DOWN).floatValue();\nreturn 0.0f;\n\
    \    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpcgyhwlul.java:18: error: unreachable statement\nreturn 0.0f;\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        if (number == 0.0f) {\n\
    \            return 0.0f;\n        }\n\n        int i = 1;\n        while (((int)\
    \ (number * Math.pow(10, i)) % 10) != 0) {\n            i++;\n        }\n    \
    \    float dec = number / Math.pow(10, i);\n        return dec;\nreturn 0.0f;\n\
    \    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmprpbbcxya.java:24: error: incompatible types: possible lossy conversion\
    \ from double to float\n        float dec = number / Math.pow(10, i);\n      \
    \                     ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float num = 0;\n      \
    \  float num2 = 0;\n        float num3 = 0;\n        float num4 = 0;\n       \
    \ float num5 = 0;\n        float num6 = 0;\n        float num7 = 0;\n        float\
    \ num8 = 0;\n        float num9 = 0;\n        float num10 = 0;\n        float\
    \ num11 = 0;\n        float num12 = 0;\n        float num13 = 0;\n        float\
    \ num14 = 0;\n        float num15 = 0;\n        float num16 = 0;\n        float\
    \ num17 = 0;\n        float num18 = 0;\n        float num19 = 0;\n        float\
    \ num20 = 0;\n        float num21 = 0;\n        float num22 = 0;\n        float\
    \ num23 = 0;\n        float num24 = 0;\n        float num25 = 0;\n        float\
    \ num26 = 0;\n        float num27 = 0;\n        float num28 = 0;\n        float\
    \ num29 = 0;\n        float num30 = 0;\n        float num31 = 0;\n        float\
    \ num32 = 0;\n        float num33 = 0;\n        float num34 = 0;\n        float\
    \ num35 = 0;\n        float num36 = 0;\n        float num37 = 0;\n        float\
    \ num38 = 0;\n        float num39 = 0;\n        float num40 = 0;\n        float\
    \ num41 = 0;\n        float num42 = 0;\n        float num43 = 0;\n        float\
    \ num44 = 0;\n        float num45 = 0;\n        float num46 = 0;\n        float\
    \ num47 = 0;\n        float num48 = 0;\n        float num49 = 0;\n        float\
    \ num50 = 0;\n        float num51 = 0;\n        float num52 = 0;\n        float\
    \ num53 = 0;\n        float num54 = 0;\n        float num55 = 0;\n        float\
    \ num56 = 0;\n        float num57 = 0;\n        float num58 = 0;\n        float\
    \ num59 = 0;\n        float num60 = 0;\n        float num61 = 0;\n        float\
    \ num62 = 0;\n        float num63 = 0;\n        float num64 = 0;\n        float\
    \ num65 = 0;\n        float num66 = 0;\n        float num67 = 0;\n        float\
    \ num68 = 0;\n        float num69 = 0;\n        float num70 = 0;\n        float\
    \ num71 = 0;\n        float num72 = 0;\n        float num73 = 0;\n        float\
    \ num74 = 0;\n        float num75 = 0;\n        float num76 = 0;\n        float\
    \ num77 = 0;\n        float num78 = 0;\n        float num79 = 0;\n        float\
    \ num80 = 0;\n        float num81 = 0;\n        float num82 = 0;\n        float\
    \ num83 = 0;\n        float num84 = 0;\n        float num85 = 0;\n        float\
    \ num86 = 0;\n        \nreturn 0.0f;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2yz_no5a.java:106)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        // We use integer division\
    \ here to keep the decimal part as close as\n        // possible:\n        return\
    \ Math.floor(number * 100f) / 100f;\nreturn 0.0f;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6d_mfltn.java:18: error: incompatible types: possible lossy conversion\
    \ from double to float\n        return Math.floor(number * 100f) / 100f;\n   \
    \                                      ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        if (number == 0) {\n  \
    \          return 0;\n        }\n        int integerPart = (int) Math.floor(number);\n\
    \        int decimalPart = (int) Math.floor(number - integerPart);\n        return\
    \ decimalPart;\nreturn 0.0f;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_j7alix5.java:22: error: unreachable statement\nreturn 0.0f;\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        int integerPart = (int)\
    \ number;\n        float decimalPart = number - integerPart;\n        return decimalPart;\n\
    return 0.0f;\n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpshh4dnp9.java:19: error: unreachable statement\nreturn 0.0f;\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        int integerPart = (int)\
    \ number;\n        int decimalsPart = (int) number - integerPart;\n        return\
    \ number - decimalsPart;\nreturn 0.0f;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1xl3ta9i.java:19: error: unreachable statement\nreturn 0.0f;\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        // First, get the fractional\
    \ part (we already have the integer part).\n        float fraction = number -\
    \ (int) number;\n        // Now, get the integer part.\n        float integer_part\
    \ = ((int) number);\n        // Now we get the remainder and multiply it by 10,\
    \ then divide it by\n        // 10 to get the decimal part.\n        // We need\
    \ an epsilon value to ensure that we never divide by 0 in\n        // this process.\n\
    \        float epsilon = 1.0;\n        float remainder = integer_part - (fraction\
    \ * 10.0);\n        // Now, we have the remainder and the integer part, now we\
    \ calculate\n        // the decimal part by dividing it by 10.\n        float\
    \ decimal_part = remainder / (float) 10.0;\n        // Now, we multiply the decimal\
    \ part with the remainder and divide it by\n        // 10, to get the decimal\
    \ part.\n        // We also need to make sure that the decimal part is never zero,\n\
    \        // otherwise we may end up with a decimal part that has a 1 as\n    \
    \    // fractional part.\n        if (decimal_part > epsilon)\n            decimal_part\
    \ *= (float) remainder / (float) 10.0;\n        return decimal_part;\nreturn 0.0f;\n\
    \    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1ngq6n88.java:24: error: incompatible types: possible lossy conversion\
    \ from double to float\n        float epsilon = 1.0;\n                       \
    \ ^\n/tmp/tmp1ngq6n88.java:25: error: incompatible types: possible lossy conversion\
    \ from double to float\n        float remainder = integer_part - (fraction * 10.0);\n\
    \                                       ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        BigDecimal bd = new BigDecimal(number);\n\
    \        BigDecimal biggerThan = bd.subtract(BigDecimal.ONE);\n        int intPart\
    \ = biggerThan.intValue();\n        int decimals = biggerThan.compareTo(BigDecimal.ONE)\
    \ < 0 ? 0 : biggerThan.intValue();\n        return (float) intPart / Math.pow(10,\
    \ decimals);\nreturn 0.0f;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvwdr_jrj.java:20: error: incompatible types: possible lossy conversion\
    \ from double to float\n        return (float) intPart / Math.pow(10, decimals);\n\
    \                               ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        if (number < 0) {\n   \
    \         throw new IllegalArgumentException(\"Negative numbers not allowed!\"\
    );\n        }\n        if (number == 0) {\n            return number;\n      \
    \  }\n        int truncatedDecimal = Integer.parseInt(String.valueOf(Math.round(number)));\n\
    \        float truncatedNumber = number - truncatedDecimal;\n        return truncatedNumber;\n\
    return 0.0f;\n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpt95fx66f.java:25: error: unreachable statement\nreturn 0.0f;\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        return (float) number /\
    \ BigDecimal.valueOf(10).pow(BigDecimal.valueOf(24)).divide(BigDecimal.valueOf(100),\
    \ RoundingMode.CEILING);\nreturn 0.0f;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_vqvgb6i.java:16: error: incompatible types: BigDecimal cannot\
    \ be converted to int\n        return (float) number / BigDecimal.valueOf(10).pow(BigDecimal.valueOf(24)).divide(BigDecimal.valueOf(100),\
    \ RoundingMode.CEILING);\n                                                   \
    \                          ^\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        BigDecimal bd = BigDecimal.valueOf(number);\n\
    \        int intPart = bd.intValueExact();\n        int decimals = bd.scale();\n\
    \        return floatToInt(intPart / 10f);\nreturn 0.0f;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n\
    \    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpu7so93vg.java:19: error: cannot find symbol\n        return floatToInt(intPart\
    \ / 10f);\n               ^\n  symbol:   method floatToInt(float)\n  location:\
    \ class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        return number - (int) (number);\n\
    return 0.0f;\n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpn1t9yh_x.java:17: error: unreachable statement\nreturn 0.0f;\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float result = number;\n\
    \        while (result > 1) {\n            result /= 10;\n        }\n        return\
    \ result;\nreturn 0.0f;\n    }\n    public static void main(String[] args) {\n\
    \    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6oaca3gu.java:21: error: unreachable statement\nreturn 0.0f;\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        return Math.round(number);\n\
    return 0.0f;\n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpcm37gvbr.java:17: error: unreachable statement\nreturn 0.0f;\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        BigDecimal bd = new BigDecimal(number);\n\
    \        BigDecimal intPart = bd.setScale(0, RoundingMode.HALF_DOWN);\n      \
    \  BigDecimal fractPart = bd.subtract(intPart);\n        return fractPart.floatValue();\n\
    return 0.0f;\n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpporgp3ay.java:20: error: unreachable statement\nreturn 0.0f;\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        return number < 0.0\n \
    \           ? 0.0\n            : Math.floor(number);\nreturn 0.0f;\n    }\n  \
    \  public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpc7q_6ign.java:17: error: incompatible types: possible lossy conversion\
    \ from double to float\n            ? 0.0\n            ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        BigDecimal b = new BigDecimal(String.valueOf(number));\n\
    \        int intPart = b.intValue();\n        BigDecimal decimal = b.remainder(new\
    \ BigDecimal(\"10.0\"));\n        return float.intBitsToFloat(intPart) / float.intBitsToFloat(decimal.intValue());\n\
    return 0.0f;\n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpeh3xvpdz.java:19: error: class expected\n        return float.intBitsToFloat(intPart)\
    \ / float.intBitsToFloat(decimal.intValue());\n                     ^\n/tmp/tmpeh3xvpdz.java:19:\
    \ error: ';' expected\n        return float.intBitsToFloat(intPart) / float.intBitsToFloat(decimal.intValue());\n\
    \                                   ^\n/tmp/tmpeh3xvpdz.java:19: error: not a\
    \ statement\n        return float.intBitsToFloat(intPart) / float.intBitsToFloat(decimal.intValue());\n\
    \                                    ^\n/tmp/tmpeh3xvpdz.java:19: error: ';' expected\n\
    \        return float.intBitsToFloat(intPart) / float.intBitsToFloat(decimal.intValue());\n\
    \                                           ^\n/tmp/tmpeh3xvpdz.java:19: error:\
    \ class expected\n        return float.intBitsToFloat(intPart) / float.intBitsToFloat(decimal.intValue());\n\
    \                                                     ^\n/tmp/tmpeh3xvpdz.java:19:\
    \ error: ';' expected\n        return float.intBitsToFloat(intPart) / float.intBitsToFloat(decimal.intValue());\n\
    \                                                                   ^\n/tmp/tmpeh3xvpdz.java:19:\
    \ error: ';' expected\n        return float.intBitsToFloat(intPart) / float.intBitsToFloat(decimal.intValue());\n\
    \                                                                            \
    \          ^\n7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        // No decimals\n      \
    \  if (number == 0)\n            return 0;\n\n        // Find the largest integer\
    \ smaller than given number\n        int integerPart = (int) (number * 10f);\n\
    \n        // Find the decimal part of the number\n        float decimalPart =\
    \ number - integerPart;\n\n        // Return decimal part\n        return decimalPart;\n\
    return 0.0f;\n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwny17nd6.java:28: error: unreachable statement\nreturn 0.0f;\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        // Avoid division by zero\
    \ and check if we could get an integer result\n        if (number == 0 || number\
    \ < 1) {\n            return 0;\n        }\n        int exponent = 0;\n      \
    \  int fractionalPart = 1;\n        while (number > 1) {\n            number *=\
    \ 10;\n            exponent++;\n            fractionalPart *= 10;\n        }\n\
    \        if (exponent > 0) {\n            return number / (float)Math.pow(10,\
    \ exponent - 1);\n        } else {\n            return number;\n        }\nreturn\
    \ 0.0f;\n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5srqcqja.java:32: error: unreachable statement\nreturn 0.0f;\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        if (number == 0) {\n  \
    \          throw new IllegalArgumentException(\"Can't truncate to 0!\");\n   \
    \     }\n        if (number == (float)number) {\n            return (float)number;\n\
    \        }\n        BigDecimal big = new BigDecimal(number);\n        BigDecimal\
    \ small = new BigDecimal(\"1\");\n        BigDecimal divided = big.divide(small,\
    \ 2, RoundingMode.HALF_EVEN);\n        int decimals = divided.compareTo(small)\
    \ == -1 ? 1 : 0;\n        return divided.floatValue();\nreturn 0.0f;\n    }\n\
    \    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpcn7fa552.java:27: error: unreachable statement\nreturn 0.0f;\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        if (number < 0) {\n   \
    \         throw new IllegalArgumentException(\"Number must be positive\");\n \
    \       }\n        BigDecimal bd = new BigDecimal(number);\n        BigDecimal\
    \ bd_integer = bd.subtract(BigDecimal.ONE);\n        BigDecimal bd_decimal = bd_integer.divide(BigDecimal.ONE,\
    \ 2, RoundingMode.HALF_UP);\n        return bd_decimal.floatValue();\nreturn 0.0f;\n\
    \    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpulv5hf7d.java:23: error: unreachable statement\nreturn 0.0f;\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        BigDecimal bigDecimal =\
    \ new BigDecimal(number);\n        BigInteger bigInteger = bigDecimal.toBigIntegerExact();\n\
    \        int intPart = (bigInteger.divide(BigInteger.valueOf(1000)))\n       \
    \         .intValueExact();\n        int decimalPart = (bigInteger.remainder(BigInteger.valueOf(1000))).intValueExact();\n\
    \        float truncatedDecimalPart = number - floatToInt(bigDecimal\n       \
    \         .toString()\n                .substring(\n                        0,\
    \ \n                        bigDecimal.toString().length() - decimalPart)\n  \
    \              .trim());\n        return truncatedDecimalPart;\nreturn 0.0f;\n\
    \    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpz4_24pfa.java:21: error: cannot find symbol\n        float truncatedDecimalPart\
    \ = number - floatToInt(bigDecimal\n                                         \
    \     ^\n  symbol:   method floatToInt(String)\n  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        return number - (int) number;\n\
    return 0.0f;\n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmps2ro2hm0.java:17: error: unreachable statement\nreturn 0.0f;\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float fractionalPart =\
    \ number-(int)number;\n        return fractionalPart;\nreturn 0.0f;\n    }\n \
    \   public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5y1q_dov.java:18: error: unreachable statement\nreturn 0.0f;\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float fraction = number\
    \ - Math.floor(number);\n        return Math.floorf(fraction * 100000) / 100000;\n\
    return 0.0f;\n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpnt_d791n.java:16: error: incompatible types: possible lossy conversion\
    \ from double to float\n        float fraction = number - Math.floor(number);\n\
    \                                ^\n/tmp/tmpnt_d791n.java:17: error: cannot find\
    \ symbol\n        return Math.floorf(fraction * 100000) / 100000;\n          \
    \         ^\n  symbol:   method floorf(float)\n  location: class Math\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        int integerPart = (int)\
    \ Math.floor(number);\n        float decimalPart = number - integerPart;\n   \
    \     return decimalPart;\nreturn 0.0f;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpc0nefcoh.java:19: error: unreachable statement\nreturn 0.0f;\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        // Check if number is integer.\n\
    \        if (number % 1 == 0) {\n            // Check if number is zero.\n   \
    \         if (number == 0) {\n                return 0;\n            }\n     \
    \       // Check if number is positive.\n            if (number > 0) {\n     \
    \           // The largest integer smaller than given number.\n              \
    \  float result = Math.floor(number);\n                // Check if number is decimal.\n\
    \                if (number - result > 0.5) {\n                    result = number\
    \ - result;\n                }\n                // Check if result is negative.\n\
    \                if (result < 0) {\n                    result = result * -1;\n\
    \                }\n                return result;\n            }\n          \
    \  // If number is negative, return zero.\n            return 0;\n        }\n\
    \        // If number is not integer, return the original number.\n        return\
    \ number;\nreturn 0.0f;\n    }\n    public static void main(String[] args) {\n\
    \    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpv6q6kevo.java:25: error: incompatible types: possible lossy conversion\
    \ from double to float\n                float result = Math.floor(number);\n \
    \                                        ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        return number;\nreturn\
    \ 0.0f;\n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpt6wf8yap.java:17: error: unreachable statement\nreturn 0.0f;\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        return (int) (Math.rint(number\
    \ * 100) / 100.0);\nreturn 0.0f;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpa83aakvz.java:17: error: unreachable statement\nreturn 0.0f;\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        // Find integer part of\
    \ the number and decimals left of it\n        BigDecimal bigDecimal = BigDecimal.valueOf(number);\n\
    \        BigInteger bigInteger = bigDecimal.multiply(BigDecimal.valueOf(10.0)).intValueExact();\n\
    \        float fractionalPart = bigDecimal.floatValue();\n        int integerPart\
    \ = bigInteger.intValue();\n        float truncatedNumber = fractionalPart + (integerPart\
    \ - integerPart);\n\n        return truncatedNumber;\nreturn 0.0f;\n    }\n  \
    \  public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpinn6qu2w.java:18: error: incompatible types: int cannot be converted\
    \ to BigInteger\n        BigInteger bigInteger = bigDecimal.multiply(BigDecimal.valueOf(10.0)).intValueExact();\n\
    \                                                                            \
    \               ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float a = number%1;\n \
    \       return (float) Math.floor(number);\nreturn 0.0f;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n\
    \    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5usdscoz.java:18: error: unreachable statement\nreturn 0.0f;\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float floor = Math.floor(number);\n\
    \        float frac;\n        int decimal = 0;\n        if (number > floor) {\n\
    \            frac = number - floor;\n            while (frac > 0) {\n        \
    \        decimal++;\n                frac /= 10.0;\n            }\n        }\n\
    \        return floor;\nreturn 0.0f;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpq5zm9j0o.java:16: error: incompatible types: possible lossy conversion\
    \ from double to float\n        float floor = Math.floor(number);\n          \
    \                      ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        return (int) (Math.rint(number\
    \ * Math.pow(10, getDecimalPlaces(number))));\nreturn 0.0f;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n\
    \    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfcq4a7jm.java:16: error: cannot find symbol\n        return (int)\
    \ (Math.rint(number * Math.pow(10, getDecimalPlaces(number))));\n            \
    \                                          ^\n  symbol:   method getDecimalPlaces(float)\n\
    \  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        return number - (float)Math.floor(number);\n\
    return 0.0f;\n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp07zy90m7.java:17: error: unreachable statement\nreturn 0.0f;\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        return (int) (number +\
    \ 0.5f);\nreturn 0.0f;\n    }\n    public static void main(String[] args) {\n\
    \    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpp45l55xy.java:17: error: unreachable statement\nreturn 0.0f;\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        BigDecimal bd = new BigDecimal(number);\n\
    \        if (bd.compareTo(BigDecimal.ZERO) < 0) {\n            bd = bd.setScale(0,\
    \ RoundingMode.DOWN);\n        } else {\n            bd = bd.setScale(0, RoundingMode.HALF_UP);\n\
    \        }\n        return bd.floatValue();\nreturn 0.0f;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n\
    \    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp65fo2xxg.java:23: error: unreachable statement\nreturn 0.0f;\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        return number.floatValue();\n\
    return 0.0f;\n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdmdh2uj3.java:16: error: float cannot be dereferenced\n       \
    \ return number.floatValue();\n                     ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float decPart = Math.rint(number);\n\
    \        int intPart = (int) number;\n        float finalFloat = decPart - intPart;\n\
    \        return finalFloat;\nreturn 0.0f;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpf942tejv.java:16: error: incompatible types: possible lossy conversion\
    \ from double to float\n        float decPart = Math.rint(number);\n         \
    \                        ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        int integerPart = number\
    \ / Math.pow(10, (float)Math.floor(Math.log10(number)));\n        float decimalPart\
    \ = number - integerPart * Math.pow(10, (float)Math.floor(Math.log10(number)));\n\
    \        return decimalPart;\nreturn 0.0f;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmppq2s6wp2.java:16: error: incompatible types: possible lossy conversion\
    \ from double to int\n        int integerPart = number / Math.pow(10, (float)Math.floor(Math.log10(number)));\n\
    \                                 ^\n/tmp/tmppq2s6wp2.java:17: error: incompatible\
    \ types: possible lossy conversion from double to float\n        float decimalPart\
    \ = number - integerPart * Math.pow(10, (float)Math.floor(Math.log10(number)));\n\
    \                                   ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        int integerPart = (int)\
    \ number;\n        int decimalPart = (int) (number - integerPart);\n        return\
    \ number%1f + decimalPart;\nreturn 0.0f;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1504mvut.java:19: error: unreachable statement\nreturn 0.0f;\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        int i = (int)(number *\
    \ 10 + 0.5);\n        return i/10;\nreturn 0.0f;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpcme956ih.java:18: error: unreachable statement\nreturn 0.0f;\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        return number - (int) (number\
    \ * 0.00000001);\nreturn 0.0f;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0kx1ozlp.java:17: error: unreachable statement\nreturn 0.0f;\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        long integerPart = number;\n\
    \        int decimalPart = Integer.parseInt(String.valueOf(number).substring(0,\
    \ 1));\n        return number - (integerPart / Math.pow(10, decimalPart));\nreturn\
    \ 0.0f;\n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4mjbrzyq.java:16: error: incompatible types: possible lossy conversion\
    \ from float to long\n        long integerPart = number;\n                   \
    \        ^\n/tmp/tmp4mjbrzyq.java:18: error: incompatible types: possible lossy\
    \ conversion from double to float\n        return number - (integerPart / Math.pow(10,\
    \ decimalPart));\n                      ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        int i = (int) Math.floor(number);\n\
    \        float f = number - i;\n        return f;\nreturn 0.0f;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n\
    \    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9qt64df6.java:19: error: unreachable statement\nreturn 0.0f;\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float remainder = fmod(number,\
    \ 1); // Get remainder in float precision\n        long integerPart = number -\
    \ (int)number; // Get integer part (rounds down)\n\n        return remainder +\
    \ integerPart; // Return remaining part + integer part\nreturn 0.0f;\n    }\n\
    \    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpu3whtx06.java:16: error: cannot find symbol\n        float remainder\
    \ = fmod(number, 1); // Get remainder in float precision\n                   \
    \       ^\n  symbol:   method fmod(float,int)\n  location: class Problem\n/tmp/tmpu3whtx06.java:17:\
    \ error: incompatible types: possible lossy conversion from float to long\n  \
    \      long integerPart = number - (int)number; // Get integer part (rounds down)\n\
    \                                  ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        double n = (double) number;\n\
    \        int integer = (int) (Math.floor(n));\n        float fractionalPart =\
    \ n - integer;\n        return (float) fractionalPart;\nreturn 0.0f;\n    }\n\
    \    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmphgl_krl_.java:18: error: incompatible types: possible lossy conversion\
    \ from double to float\n        float fractionalPart = n - integer;\n        \
    \                         ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float num = (float) number\
    \ - number % 1;\n        return num;\nreturn 0.0f;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjsiaba9l.java:18: error: unreachable statement\nreturn 0.0f;\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        // TODO: Implement the\
    \ solution here\n        System.out.println(\"truncate_number\");\n        return\
    \ (float)Math.round(number*100);\nreturn 0.0f;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6wg64p67.java:19: error: unreachable statement\nreturn 0.0f;\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        // Get the floor of number\
    \ (positive value -> 0).\n        double floatNumber = Math.floor(number);\n\n\
    \        // Get the remainder of (number - floor). Truncate the remainder\n  \
    \      // by adding 0.\n        float decimal = number - floatNumber;\n      \
    \  return (float)floatNumber;\nreturn 0.0f;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpq15hz0pw.java:21: error: incompatible types: possible lossy conversion\
    \ from double to float\n        float decimal = number - floatNumber;\n      \
    \                         ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        // TODO: Complete the implementation.\n\
    return 0.0f;\n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpz5zj1omg.java:20)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        int integerPart = (int)\
    \ Math.floor(number);\n        int decimalPart = number - integerPart;\n\n   \
    \     if (integerPart == 0 || decimalPart < 0) {\n            return 0;\n    \
    \    }\n\n        float truncatedPart = new Float(integerPart + decimalPart);\n\
    \        return truncatedPart;\nreturn 0.0f;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpejl2qyux.java:17: error: incompatible types: possible lossy conversion\
    \ from float to int\n        int decimalPart = number - integerPart;\n       \
    \                          ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        int integerPart = (int)\
    \ (number - Math.floor(number));\n        float decimalPart = number - integerPart;\n\
    \        return decimalPart;\nreturn 0.0f;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpllt9zpyl.java:19: error: unreachable statement\nreturn 0.0f;\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        int integerPart = (int)number;\n\
    \        float decimalPart = number - integerPart;\n        return decimalPart;\n\
    return 0.0f;\n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpchn5qvuy.java:19: error: unreachable statement\nreturn 0.0f;\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        if (number == 0.0f) {\n\
    \            return 0.0f;\n        }\n\n        long integer = (long) Math.floor(number);\n\
    \        float decimal = (number - integer) / Math.pow(10, (float) Math.ceil(Math.log10(number)));\n\
    \n        return decimal;\nreturn 0.0f;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbvf18zhs.java:21: error: incompatible types: possible lossy conversion\
    \ from double to float\n        float decimal = (number - integer) / Math.pow(10,\
    \ (float) Math.ceil(Math.log10(number)));\n                                  \
    \         ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        BigDecimal bd = new BigDecimal(number);\n\
    \        BigInteger bx = bd.setScale(0, RoundingMode.HALF_UP).movePointRight(1);\n\
    \        float trunc = (float) bx.intValue();\n        if (number - trunc < 0.5f)\
    \ {\n            float res = (number - trunc);\n            return res;\n    \
    \    }\n        return trunc;\nreturn 0.0f;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpic9dbm2v.java:17: error: incompatible types: BigDecimal cannot\
    \ be converted to BigInteger\n        BigInteger bx = bd.setScale(0, RoundingMode.HALF_UP).movePointRight(1);\n\
    \                                                                           ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float decimalPart = number\
    \ - (int) number;\n        if (decimalPart >= 1f) {\n            return number;\
    \ // already truncated to integer part\n        } else {\n            return (float)\
    \ number - decimalPart;\n        }\nreturn 0.0f;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpq6uaglip.java:22: error: unreachable statement\nreturn 0.0f;\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        double d = (double) number;\n\
    \        double decimalPart = (double) Math.floor(d % 1);\n        int integerPart\
    \ = (int) d;\n        double result = decimalPart + integerPart;\n        return\
    \ result;\nreturn 0.0f;\n    }\n    public static void main(String[] args) {\n\
    \    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfxnquo3h.java:20: error: incompatible types: possible lossy conversion\
    \ from double to float\n        return result;\n               ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float fraction = number\
    \ - (int) number;\n        if (fraction < 1) {\n            return (float) Math.floor(number);\n\
    \        } else {\n            return (float) Math.ceil(number);\n        }\n\
    return 0.0f;\n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqbgm0udt.java:22: error: unreachable statement\nreturn 0.0f;\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        int intPart = (int) Math.round(number);\n\
    \        float decimalPart = number - intPart;\n        return decimalPart;\n\
    return 0.0f;\n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpmmstoga9.java:19: error: unreachable statement\nreturn 0.0f;\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        int integerPart = (int)\
    \ number;\n        int decimalPart = number - integerPart;\n        if (decimalPart\
    \ < 0) {\n            return number; // overflow\n        }\n        return decimalPart\
    \ / (float) Math.pow(10, integerPart);\nreturn 0.0f;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n\
    \    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqm00n05f.java:17: error: incompatible types: possible lossy conversion\
    \ from float to int\n        int decimalPart = number - integerPart;\n       \
    \                          ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        // Write your code here\n\
    \        Float result = new Float(number);\n        BigDecimal dec = new BigDecimal(result.floatValue());\n\
    \        int i = dec.intValue();\n        while(dec.compareTo(BigDecimal.ZERO)\
    \ > 0){\n            dec = dec.divide(BigDecimal.ONE);\n            i++;\n   \
    \     }\n        return result.floatValue();\nreturn 0.0f;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n\
    \    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpio8y0a0g.java:25: error: unreachable statement\nreturn 0.0f;\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        if (number == 0 || number\
    \ == 1) {\n            return number;\n        }\n        float integerPart =\
    \ (int) (number * 100);\n        float decimalPart = (int) (number - (int) number);\n\
    \        return decimalPart;\nreturn 0.0f;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1jpmg_vs.java:22: error: unreachable statement\nreturn 0.0f;\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        long tempLong = Float.floatToRawIntBits(number);\n\
    \        long tempHalf = tempLong >>> 1;\n        float finalResult = (float)tempHalf;\n\
    \        return finalResult;\nreturn 0.0f;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpk3z0a9kd.java:20: error: unreachable statement\nreturn 0.0f;\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        // Get integer part as\
    \ float\n        int intPart = Float.floatToIntBits(number);\n        // Get decimal\
    \ part as double\n        double decimalPart = Double.doubleToLongBits(number)\
    \ - intPart;\n        // return float from double\n        return Float.intBitsToFloat(intPart);\n\
    return 0.0f;\n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfmkg0wts.java:22: error: unreachable statement\nreturn 0.0f;\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        return number - (int)number\
    \ / Float.parseFloat(Float.toString(number));\nreturn 0.0f;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n\
    \    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzs2l92p1.java:17: error: unreachable statement\nreturn 0.0f;\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        int intPart = (int) (number\
    \ + .5);\n        float decimalPart = number - intPart;\n        return decimalPart;\n\
    return 0.0f;\n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpur30so1o.java:19: error: unreachable statement\nreturn 0.0f;\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        BigDecimal bigDecimal =\
    \ new BigDecimal(number);\n        return bigDecimal.movePointRight(1);\nreturn\
    \ 0.0f;\n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3k18equd.java:17: error: incompatible types: BigDecimal cannot\
    \ be converted to float\n        return bigDecimal.movePointRight(1);\n      \
    \                                  ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float truncatedNumber;\n\
    \        truncatedNumber = number / (int)number;\n        return truncatedNumber;\n\
    return 0.0f;\n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwgxepjfm.java:19: error: unreachable statement\nreturn 0.0f;\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        // Truncate integer part\
    \ (round down to nearest integer).\n        number = Math.round(number);\n   \
    \     return number - (int) number;\nreturn 0.0f;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfl3woeu_.java:19: error: unreachable statement\nreturn 0.0f;\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        int integer = (int) number;\n\
    \        int decimal = (number - integer);\n        if (decimal >= 1) {\n    \
    \        decimal -= 1;\n        }\n        return integer + decimal;\nreturn 0.0f;\n\
    \    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmphox77d7f.java:17: error: incompatible types: possible lossy conversion\
    \ from float to int\n        int decimal = (number - integer);\n             \
    \                 ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        int intPart = (int) number;\n\
    \        int decimalPart = number - intPart;\n        return intPart + (float)decimalPart;\n\
    return 0.0f;\n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpycdq77n2.java:17: error: incompatible types: possible lossy conversion\
    \ from float to int\n        int decimalPart = number - intPart;\n           \
    \                      ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        return number - (int)number;\n\
    return 0.0f;\n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp95nsen4b.java:17: error: unreachable statement\nreturn 0.0f;\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        // Create an integer part\n\
    \        int integerPart = 0;\n        // Keep shifting until we encounter a number\
    \ smaller than the one we have\n        // seen before\n        while (number\
    \ * 10 < integerPart) {\n            integerPart++;\n        }\n        // Return\
    \ the decimal part of the number\n        return number - (float) integerPart\
    \ * 0.1f;\nreturn 0.0f;\n    }\n    public static void main(String[] args) {\n\
    \    assert(truncateNumber((3.5f)) == (0.5f));\n    assert(truncateNumber((1.25f))\
    \ == (0.25f));\n    assert(truncateNumber((123.0f)) == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpt79mskej.java:25: error: unreachable statement\nreturn 0.0f;\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        // Write your code here\n\
    \        return number - Math.floor(number);\nreturn 0.0f;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(truncateNumber((3.5f)) == (0.5f));\n\
    \    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9t8s6293.java:17: error: incompatible types: possible lossy conversion\
    \ from double to float\n        return number - Math.floor(number);\n        \
    \              ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        return (float) Math.round((number\
    \ * Math.pow(10, (float) Math.log10(number)))\n                / Math.pow(10,\
    \ (float) Math.log10(Math.pow(10, (number) + 1.0))));\nreturn 0.0f;\n    }\n \
    \   public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp59x3c9rm.java:18: error: unreachable statement\nreturn 0.0f;\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        if (number == (float)number)\
    \ return number;\n        float integer = (int) number;\n        float decimal\
    \ = number - integer;\n        return integer + (decimal * Math.pow(10, -(int)Math.log10(decimal)));\n\
    return 0.0f;\n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1cuksd1d.java:19: error: incompatible types: possible lossy conversion\
    \ from double to float\n        return integer + (decimal * Math.pow(10, -(int)Math.log10(decimal)));\n\
    \                       ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        int integerPart = (int)\
    \ (number - (int) number);\n        int decimalPart = int\n                .parseInt((number\
    \ - integerPart) * Math.pow(10, number.toString().length()));\n        return\
    \ float\n                .parseInt((decimalPart / Math.pow(10, decimalPart\n \
    \                       .toString().length()))\n                        * Math.pow(10,\
    \ decimalPart\n                                .toString().length()));\nreturn\
    \ 0.0f;\n    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpg2vtvs_q.java:18: error: class expected\n                .parseInt((number\
    \ - integerPart) * Math.pow(10, number.toString().length()));\n              \
    \   ^\n/tmp/tmpg2vtvs_q.java:18: error: ';' expected\n                .parseInt((number\
    \ - integerPart) * Math.pow(10, number.toString().length()));\n              \
    \           ^\n/tmp/tmpg2vtvs_q.java:18: error: not a statement\n            \
    \    .parseInt((number - integerPart) * Math.pow(10, number.toString().length()));\n\
    \                                  ^\n/tmp/tmpg2vtvs_q.java:18: error: ';' expected\n\
    \                .parseInt((number - integerPart) * Math.pow(10, number.toString().length()));\n\
    \                                               ^\n/tmp/tmpg2vtvs_q.java:18: error:\
    \ ';' expected\n                .parseInt((number - integerPart) * Math.pow(10,\
    \ number.toString().length()));\n                                            \
    \                                               ^\n/tmp/tmpg2vtvs_q.java:20: error:\
    \ class expected\n                .parseInt((decimalPart / Math.pow(10, decimalPart\n\
    \                 ^\n/tmp/tmpg2vtvs_q.java:20: error: ';' expected\n         \
    \       .parseInt((decimalPart / Math.pow(10, decimalPart\n                  \
    \       ^\n/tmp/tmpg2vtvs_q.java:20: error: not a statement\n                .parseInt((decimalPart\
    \ / Math.pow(10, decimalPart\n                                       ^\n/tmp/tmpg2vtvs_q.java:21:\
    \ error: ';' expected\n                        .toString().length()))\n      \
    \                                       ^\n/tmp/tmpg2vtvs_q.java:23: error: ';'\
    \ expected\n                                .toString().length()));\n        \
    \                                             ^\n10 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        float decimalPart = number-floor(number);\n\
    \        if(decimalPart > 0) {\n            return decimalPart;\n        }\n \
    \       else {\n            return number-floor(number);\n        }\nreturn 0.0f;\n\
    \    }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4sj7o5_3.java:16: error: cannot find symbol\n        float decimalPart\
    \ = number-floor(number);\n                                   ^\n  symbol:   method\
    \ floor(float)\n  location: class Problem\n/tmp/tmp4sj7o5_3.java:21: error: cannot\
    \ find symbol\n            return number-floor(number);\n                    \
    \      ^\n  symbol:   method floor(float)\n  location: class Problem\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> truncate_number(3.5)\n    // 0.5\n    public\
    \ static float truncateNumber(float number) {\n        if (number == (float)number)\
    \ {\n            throw new ArithmeticException(\"truncate to float failed\");\n\
    \        }\n        BigDecimal bd = new BigDecimal(number);\n        bd = bd.setScale(2);\n\
    \        number = bd.doubleValue();\n        return number;\nreturn 0.0f;\n  \
    \  }\n    public static void main(String[] args) {\n    assert(truncateNumber((3.5f))\
    \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpum2_brnh.java:21: error: incompatible types: possible lossy conversion\
    \ from double to float\n        number = bd.doubleValue();\n                 \
    \              ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
