completions:
- "        int a=0;\n        int b=0;\n        if (n>1){\n            if(n==1 || n==2){\n\
  \                return n;\n            }\n            if(n==3){\n             \
  \   return 1;\n            }\n            if(n==4){\n                return 2;\n\
  \            }\n            if(n<=0){\n                System.out.println(\"Incorrect\
  \ value of n\");\n            }\n            int temp=fib(n-1);\n            a=a+b;\n\
  \            b=temp;\n        }\n        return a;"
- "        if (n <= 1) return n;\n        return fib(n - 1) + fib(n - 2);"
- "        if (n == 0)\n            return 0;\n        else if (n == 1)\n        \
  \    return 1;\n        return fib(n - 1) + fib(n - 2);"
- "        if (n <= 1)\n            return n;\n        else\n            return fib(n\
  \ - 1) + fib(n - 2);"
- "        if (n == 0 || n == 1) {\n            return n;\n        }\n        return\
  \ fib(n - 1) + fib(n - 2);"
- "        int a = 0,b = 1,c = 1;\n        while (n > 1) {\n            int t = a\
  \ * b;\n            a = b;\n            b = c;\n            c = t;\n           \
  \ n--;\n        }\n        return a;"
- "        if (n == 0 || n == 1)\n            return n;\n        return fib(n - 1)\
  \ + fib(n - 2);"
- "        int[] arr = new int[n];\n        arr[0] = 0;\n        arr[1] = 1;\n   \
  \     for (int i = 2; i < n; i++) {\n            arr[i] = arr[i - 1] + arr[i - 2];\n\
  \        }\n        return arr[n];"
- "        if (n <= 2) {\n            return n;\n        } else {\n            return\
  \ fib(n - 1) + fib(n - 2);\n        }"
- "        if (n <= 1) return n;\n        return fib(n - 1) + fib(n - 2);"
- "        if (n == 0 || n == 1) return n;\n        return fib(n - 1) + fib(n - 2);"
- "        if (n < 0 || n > 1000000000)\n            throw new IllegalArgumentException();\n\
  \        if (n == 0)\n            return 0;\n        if (n == 1)\n            return\
  \ 1;\n        return fib(n - 1) + fib(n - 2);"
- "        if (n == 0 || n == 1)\n            return n;\n        return fib(n - 1)\
  \ + fib(n - 2);"
- "        if (n < 2) {\n            return 1;\n        } else {\n            return\
  \ fib(n - 2) + fib(n - 1);\n        }"
- "        Object retVal = null;\n        if (n == 0 || n == 1) {\n            retVal\
  \ = n;\n        } else {\n            retVal = fib(n - 1) + fib(n - 2);\n      \
  \  }\n        return retVal.intValue();"
- '        return n < 2 ? 1 : fib(n - 1) + fib(n - 2);'
- "        if (n <= 1) return n;\n        return fib(n-2) + fib(n-1);"
- "        int a = 0, b = 1;\n        for(int i = 0; i < n; i++) {\n            int\
  \ next = b;\n            b = a + b;\n            a = next;\n        }\n        return\
  \ a;"
- "        if (n <= 1) return n;\n        return fib(n - 1) + fib(n - 2);"
- '        return n < 2 ? n : fib(n-1) + fib(n-2);'
- '        return n < 2 ? n : fib(n - 1) + fib(n - 2);'
- "        if (n < 0) {\n            throw new IllegalArgumentException(\"n must be\
  \ >= 0\");\n        } else if (n == 0) {\n            return 0;\n        } else\
  \ if (n == 1) {\n            return 1;\n        } else {\n            return fib(n\
  \ - 1) + fib(n - 2);\n        }"
- "        if (n <= 1) {\n            return 1;\n        }\n        return fib(n -\
  \ 1) + fib(n - 2);"
- "        if (n < 2)\n            return n;\n        return fib(n - 1) + fib(n -\
  \ 2);"
- "        if (n <= 1)\n            return n;\n        return fib(n - 1) + fib(n -\
  \ 2);"
- "        if (n <= 2) {\n            return 1;\n        } else if (n <= 5) {\n  \
  \          return 1;\n        } else {\n            return fib(n - 1) + fib(n -\
  \ 2);\n        }"
- "        int result = 0;\n        if (n <= 1) {\n            return n;\n       \
  \ }\n        result = fib(n - 1) + fib(n - 2);\n        return result;"
- "        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return fib(n\
  \ - 1) + fib(n - 2);"
- "        if (n <= 1) {\n            return n;\n        } else {\n            return\
  \ fib(n - 1) + fib(n - 2);\n        }"
- "        if (n <= 1) return n;\n        if (n == 2) return 1;\n        return fib(n\
  \ - 1) + fib(n - 2);"
- "        if (n == 1 || n == 2) {\n            return 1;\n        }\n        return\
  \ fib(n - 1) + fib(n - 2);"
- "        if (n == 0 || n == 1)\n            return n;\n        return fib(n - 1)\
  \ + fib(n - 2);"
- "        if (n <= 1) return n;\n        return fib(n-2) + fib(n-1);"
- "        if (n < 2) {\n            return 1;\n        }\n        return fib(n -\
  \ 1) + fib(n - 2);"
- "        List<Integer> cache = new ArrayList<>();\n        if (n < 2) return n;\n\
  \        if (n <= cache.size()) return cache.get(n - 1);\n        List<Integer>\
  \ rec = fibs(n);\n        cache.add(rec);\n        return rec;"
- "        if (n <= 1) return n;\n        int first = 1;\n        int second = 1;\n\
  \        for (int i = 2; i <= n; i++) {\n            int temp = first + second;\n\
  \            first = second;\n            second = temp;\n        }\n        return\
  \ first;"
- "        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return fib(n\
  \ - 1) + fib(n - 2);"
- "        if (n == 0) { return 0; }\n        if (n == 1) { return 1; }\n        return\
  \ fib(n - 2) + fib(n - 1);"
- "        int a = 0, b = 1;\n        while (b < n) {\n            int temp = a;\n\
  \            a = b;\n            b = temp + b;\n        }\n        return a;"
- "        if (n <= 1)\n            return n;\n        return fib(n-1) + fib(n-2);"
- "        if (n <= 1)\n            return n;\n        return fib(n - 2) + fib(n -\
  \ 1);"
- "        if (n == 0 || n == 1)\n            return n;\n\n        return fib(n -\
  \ 1) + fib(n - 2);"
- "        if (n <= 1) {\n            return n;\n        } else {\n            return\
  \ fib(n - 1) + fib(n - 2);\n        }"
- "        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return fib(n\
  \ - 1) + fib(n - 2);"
- '        return n < 2 ? n : fib(n - 1) + fib(n - 2);'
- "        if (n <= 1)\n            return n;\n        else\n            return fib(n\
  \ - 1) + fib(n - 2);"
- "        if (n <= 2) {\n            return n;\n        } else {\n            return\
  \ fib(n-2) + fib(n-1);\n        }"
- "        if (n <= 1)\n            return n;\n        return fib(n - 1) + fib(n -\
  \ 2);"
- "        if (n < 0) throw new IllegalArgumentException(\"negative n\");\n      \
  \  if (n <= 2)\n            return n;\n        return fib(n - 2) + fib(n - 1);"
- "        int f = 0;\n        if (n <= 1) return n;\n        int a = 1;\n       \
  \ int b = 1;\n        for (int i = 2; i <= n; i++) {\n            int c = a + b;\n\
  \            a = b;\n            b = c;\n        }\n        f = b;\n        return\
  \ f;"
- '        return fib(n, new int[]{0, 1});'
- "        if (n <= 1) return n;\n        return fib(n - 1) + fib(n - 2);"
- "        if (n == 0)\n            return 0;\n        if (n == 1)\n            return\
  \ 1;\n        return fib(n - 1) + fib(n - 2);"
- "        if (n <= 2) {\n            return n;\n        } else {\n            return\
  \ fib(n - 2) + fib(n - 1);\n        }"
- "        int a = 1;\n        int b = 1;\n        if (n <= 1) return n;\n       \
  \ while (n < 5)\n            a = b;\n            b = a + b;\n            a = a -\
  \ b;\n            a = a + b;\n            return a;\n        }"
- "        if (n == 0 || n == 1) {\n            return n;\n        } else {\n    \
  \        return fib(n - 1) + fib(n - 2);\n        }"
- "        if(n<0)\n            throw new IllegalArgumentException();\n        if(n<2)\n\
  \            return 1;\n        return fib(n -1)+fib(n -2);"
- "        if (n <= 2) return n;\n        return fib(n-2) + fib(n-1);"
- "        if (n < 2) {\n            return n;\n        }\n        return fib(n -\
  \ 1) + fib(n - 2);"
- "        // Recursion is fine.\n        if (n < 2) {\n            return n;\n  \
  \      } else {\n            return fib(n - 1) + fib(n - 2);\n        }"
- "        if (n < 2) return n;\n        else return fib(n - 1) + fib(n - 2);"
- "        if (n <= 2) {\n            return n;\n        }\n        return fib(n -\
  \ 2) + fib(n - 1);"
- "        if (n <= 1) return n;\n        return fib(n - 1) + fib(n - 2);"
- "        int a = 0;\n        int b = 1;\n        int fibN = 1;\n        int index\
  \ = 0;\n        if (n == 0) {\n            return 0;\n        }\n        do {\n\
  \            fibN = fibN * a;\n            a = b;\n            b = fibN + b;\n \
  \           index++;\n        } while (fibN != n && fibN != n && fibN != n && fibN\
  \ != n && fibN != n && fibN != n && fibN != n && fibN != n && fibN != n && fibN\
  \ != n && fibN != n && fibN != n && fibN != n && fibN != n && fibN != n && fibN\
  \ != n && fibN != n && fibN != n && fibN != n && fibN != n && fibN != n && fibN\
  \ != n && fibN != n && fibN != n && fibN != n && fibN != n && fibN != n && fibN\
  \ != n && fibN != n && fibN != n && fibN != n && fibN != n && fibN != n && fibN\
  \ != n && fibN != n && fibN != n && fibN != n && fibN != n && fibN != n && fibN\
  \ != n && fibN != n && fibN != n && fibN != n && fibN != n && fibN != n && fibN\
  \ != n && fibN != n && fibN != n && fibN != n && fibN != n && fibN != n && fibN\
  \ != n && fibN != n && fibN != n && fibN != n && fibN != n && fibN != n && fibN\
  \ != n && fibN != n && fibN != n && fibN != n && fibN != n && fibN != n && fibN\
  \ != n && fibN != n && fibN != n && fibN != n && fibN != n && fibN != n && fibN\
  \ != n && fibN != n && fibN != n && fibN != n && fibN != n && fibN != n && fibN\
  \ != n && fibN != n && fibN != n && fibN != n && fibN != n && fibN != n && fibN\
  \ != n && fibN != n && fibN != n && fibN != n && fibN != n && fibN != n && fibN\
  \ != n && fibN != n && fibN != n && fibN != n && fibN != n && fib"
- '        return n == 0 ? 1 : fib(n - 1) + fib(n - 2);'
- "        if (n <= 1) return n;\n        return fib(n - 1) + fib(n - 2);"
- "        if (n <= 2) return 1;\n        return fib(n-1) + fib(n-2);"
- "        if (n <= 1)\n            return n;\n        return fib(n - 1) + fib(n -\
  \ 2);"
- "        if (n < 2)\n            return n;\n        return fib(n - 1) + fib(n -\
  \ 2);"
- "        if (n <= 1) {\n            return n;\n        }\n        return fib(n -\
  \ 1) + fib(n - 2);"
- "        if (n == 0)\n            return 1;\n        if (n == 1)\n            return\
  \ 1;\n        return fib(n - 1) + fib(n - 2);"
- "        if (n < 0) throw new IllegalArgumentException(\"Invalid input: \" + n);\n\
  \        if (n <= 2)\n            return n;\n        return fib(n-1) + fib(n-2);"
- "        if (n <= 1)\n            return n;\n\n        return fib(n - 1) + fib(n\
  \ - 2);"
- "        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return fib(n\
  \ - 1) + fib(n - 2);"
- "        if (n == 0) return 0;\n        else if (n == 1) return 1;\n        return\
  \ fib(n - 1) + fib(n - 2);"
- "        if (n == 0 || n == 1) {\n            return n;\n        }\n\n        return\
  \ fib(n - 1) + fib(n - 2);"
- "        if (n == 0) {\n            return 0;\n        } else if (n == 1) {\n  \
  \          return 1;\n        } else if (n >= 1 && n <= 2) {\n            return\
  \ 1;\n        } else {\n            return fib(n - 1) + fib(n - 2);\n        }"
- "        int first = 0, second = 1;\n        for (int i = 1; i < n; i++) {\n   \
  \         first = second;\n            second = first + second;\n        }\n   \
  \     return first;"
- "        // Write your code here\n        BigInteger first = new BigInteger(\"1\"\
  );\n        BigInteger second = new BigInteger(\"1\");\n        for (int i = 0;\
  \ i <= n; i++) {\n            first = second.add(first);\n            second = second.add(second);\n\
  \        }\n        return first.intValue();"
- "        // Base cases:\n        if (n == 0 || n == 1)\n            return n;\n\
  \        return fib(n - 1) + fib(n - 2);"
- "        if (n == 0)\n            return 0;\n        if (n == 1)\n            return\
  \ 1;\n        return fib(n - 1) + fib(n - 2);"
- "        // Use tail recursion.\n        if (n < 2) {\n            return n;\n \
  \       } else {\n            return fib(n - 1) + fib(n - 2);\n        }"
- "        int f1 = 1;\n        int f2 = 1;\n        \n        if( n <= 1 )\n    \
  \        return n; \n        else {\n            while( n >= 2 ) {\n           \
  \     int tmp = f1 + f2;\n                f1 = f2;\n                f2 = tmp;\n\
  \                --n;\n            }\n            \n            return f2;\n   \
  \     }"
- "        if (n <= 1) return n;\n        return fib(n - 1) + fib(n - 2);"
- "        if (n <= 1) return 1;\n        return fib(n - 1) + fib(n - 2);"
- "        Object result = null;\n        if (n < 0) {\n            throw new IllegalArgumentException(\"\
  Not a Fibonacci number!\");\n        } else if (n == 1) {\n            result =\
  \ 1;\n        } else if (n == 2) {\n            result = 1;\n        } else if (n\
  \ == 3) {\n            result = 2;\n        } else {\n            result = fib(n\
  \ - 1) + fib(n - 2);\n        }\n        return (int) result;"
- "        if(n == 0)\n            return 0;\n        if(n == 1)\n            return\
  \ 1;\n        return fib(n - 1) + fib(n - 2);"
- "        if (n == 0 || n == 1) {\n            return n;\n        } else {\n    \
  \        return fib(n - 1) + fib(n - 2);\n        }"
- "        int prev = 0;\n        int cur = 1;\n        if (n == 0) {\n          \
  \  return 0;\n        } else if (n == 1) {\n            return 1;\n        }\n \
  \       for (int i = 2; i <= n; i++) {\n            prev += cur;\n            cur\
  \ = prev;\n        }\n        return prev;"
- "        if (n == 0 || n == 1)\n            return n;\n        return fib(n - 1)\
  \ + fib(n - 2);"
- "        if (n <= 1)\n            return 1;\n        return fib(n - 1) + fib(n -\
  \ 2);"
- "        if (n <= 1)\n            return n;\n        else\n            return fib(n\
  \ - 1) + fib(n - 2);"
- "        if (n == 0 || n == 1) {\n            return n;\n        }\n        return\
  \ fib(n - 1) + fib(n - 2);"
- "        if (n == 0 || n == 1) {\n            return n;\n        } else {\n    \
  \        return fib(n - 1) + fib(n - 2);\n        }"
- "        if (n == 0)\n            return 0;\n        if (n == 1)\n            return\
  \ 1;\n        return fib(n - 1) + fib(n - 2);"
- "        if (n <= 1) return 1;\n        return fib(n - 2) + fib(n - 1);"
- "        if (n <= 1)\n            return n;\n        else\n            return fib(n-1)\
  \ + fib(n-2);"
- '        return n < 2 ? n : fib(n - 1) + fib(n - 2);'
- "        if (n <= 2) {\n            return 1;\n        }\n        return fib(n -\
  \ 1) + fib(n - 2);"
- "        if (n <= 2) {\n            return n;\n        } else {\n            return\
  \ fib(n - 1) + fib(n - 2);\n        }"
- "        if (n <= 1) return 1;\n        return fib(n - 1) + fib(n - 2);"
- "        if (n < 0) throw new IllegalArgumentException(\"Argument 'n' must be a\
  \ non-negative integer.\");\n        if (n == 0 || n == 1) {\n            return\
  \ n;\n        }\n        return fib(n - 2) + fib(n - 1);"
- '        return n < 2 ? n : fib(n-1) + fib(n-2);'
- "        if (n <= 1)\n            return n;\n\n        return fib(n-1) + fib(n-2);"
- "        int[] nums = new int[n];\n        if (n == 0) return 0;\n        else if\
  \ (n == 1) return 1;\n        else return nums[n - 2] = fib(n - 1) + fib(n - 2);"
- "        if (n <= 1)\n            return n;\n        return fib(n - 1) + fib(n -\
  \ 2);"
- "        if (n <= 2)\n            return n;\n        return fib(n - 2) + fib(n -\
  \ 1);"
- "        if (n <= 1) return n;\n        return fib(n - 1) + fib(n - 2);"
- "        if (n <= 1) {\n            return n;\n        } else {\n            return\
  \ fib(n - 1) + fib(n - 2);\n        }"
- "        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return fib(n\
  \ - 1) + fib(n - 2);"
- "        int a = 0;\n        int b = 1;\n        \n        for (int i = 2; i <=\
  \ n; i++) {\n            int temp = a;\n            a = b;\n            b = temp\
  \ + b;\n        }\n        \n        return b;"
- "        if (n < 0) {\n            return fib(n - 1);\n        }\n        if (n\
  \ <= 1) {\n            return n;\n        }\n        return fib(n - 1) + fib(n -\
  \ 2);"
- '        return n < 2 ? n : fib(n - 1) + fib(n - 2);'
- "        if (n < 2) return n;\n        int first = 0;\n        int second = 1;\n\
  \        for(int i = 1; i < n; ++i) {\n            int temp = first;\n         \
  \   first = second;\n            second = temp + second;\n        }\n        return\
  \ first;"
- "        if (n < 2) return n;\n        return fib(n - 2) + fib(n - 1);"
- "        if (n <= 1) return n;\n        return fib(n - 1) + fib(n - 2);"
- "        if (n <= 1) return n;\n        System.out.println(\"fib(\"+n+\"): \");\n\
  \        return fib(n - 1) + fib(n - 2);"
- "        if (n <= 1) return 1;\n        else return fib(n - 1) + fib(n - 2);"
- "        if (n < 1) {\n            throw new RuntimeException(\"No such fibonacci\
  \ number: \" + n);\n        }\n        return n < 2 ? n : fib(n - 1) + fib(n - 2);"
- "        if (n < 2) return n;\n        if (n <= 2) return 1;\n        return fib(n\
  \ - 2) + fib(n - 1);"
- "        if (n <= 1) return n;\n        return fib(n - 1) + fib(n - 2);"
- "        if (n < 0) {\n            throw new IllegalArgumentException(\"Negative\
  \ input\");\n        } else if (n == 0) {\n            return 0;\n        } else\
  \ if (n == 1) {\n            return 1;\n        } else {\n            return fib(n\
  \ - 1) + fib(n - 2);\n        }"
- "        if (n <= 1) return n;\n        return fib(n - 1) + fib(n - 2);"
- "        if (n < 0) throw new IllegalArgumentException();\n        if (n == 0 ||\
  \ n == 1) return n;\n        if (n >= 2) return fib(n-1) + fib(n-2);\n        throw\
  \ new IllegalArgumentException();"
- "        if (n <= 1) {\n            return 1;\n        }\n        return fib(n -\
  \ 2) + fib(n - 1);"
- "        if (n < 0) throw new IllegalArgumentException();\n        if (n <= 2) return\
  \ 1;\n        return fib(n - 2) + fib(n - 1);"
- "        if (n < 2)\n            return n;\n        int a = 1;\n        int b =\
  \ 1;\n        for (int i = 0; i < n; i++)\n            int c = a + b;\n        \
  \    a = b;\n            b = c;\n        return b;"
- "        if (n <= 2) {\n            return n;\n        } else {\n            return\
  \ fib(n - 2) + fib(n - 1);\n        }"
- "        if (n == 0 || n == 1)\n            return n;\n        else\n          \
  \  return fib(n - 1) + fib(n - 2);"
- "        if(n == 0) return 0;\n        if(n == 1) return 1;\n        return fib(n\
  \ - 2) + fib(n - 1);"
- "        if (n == 0 || n == 1)\n            return n;\n        return fib(n - 1)\
  \ + fib(n - 2);"
- "        if (n <= 1) {\n            return n;\n        }\n        int f1 = 0, f2\
  \ = 1;\n        for (int i = 3; i <= n; i++) {\n            f1 = f2;\n         \
  \   f2 = f1 + f2;\n        }\n        return f2;"
- "        if (n <= 1)\n            return n;\n        return fib(n-1) + fib(n-2);"
- "        if (n == 0 || n == 1)\n            return n;\n        return fib(n - 1)\
  \ + fib(n - 2);"
- "        if (n == 0)\n            return 0;\n        if (n == 1)\n            return\
  \ 1;\n        return fib(n - 1) + fib(n - 2);"
- "        int num = 0;\n        if (n == 0) {\n            return 1;\n        }\n\
  \        else if (n == 1) {\n            return 1;\n        }\n        else {\n\
  \            int previous = fib(n - 1);\n            int current = fib(n - 2);\n\
  \            num = current + previous;\n        }\n        return num;"
- "        if( n <= 1 ) return n;\n        return fib(n-1) + fib(n-2);"
- "        if (n < 2) return n;\n        return fib(n-1) + fib(n-2);"
- "        if (n <= 1) return 1;\n        if (n <= 2) return 1;\n        return fib(n\
  \ - 1) + fib(n - 2);"
- "        if (n <= 1)\n            return n;\n        return fib(n - 1) + fib(n -\
  \ 2);"
- "        if (n <= 1) return 1;\n        return fib(n - 1) + fib(n - 2);"
- "        if (n < 0 || n > 20) return -1;\n        if (n < 2) return 1;\n       \
  \ return fib(n - 1) + fib(n - 2);"
- "        if (n == 0 || n == 1) {\n            return n;\n        }\n        return\
  \ fib(n - 1) + fib(n - 2);"
- "        if(n<=0)\n            throw new IllegalArgumentException(\"n must be non-negative\"\
  );\n        if (n==1)\n            return 1;\n        if (n==2)\n            return\
  \ 1;\n        return fib(n - 1) + fib(n - 2);"
- "        if (n == 0 || n == 1)\n            return n;\n        return fib(n - 1)\
  \ + fib(n - 2);"
- "        if (n < 2) {\n            return n;\n        }\n        int next = 0;\n\
  \        int prev = 1;\n        for (int i = 0; i < n; i++) {\n            next\
  \ = prev + next;\n            prev = next;\n        }\n        return next;"
- "        return IntStream.rangeClosed(0,n)\n                .map(i -> {\n      \
  \              if(i==1)\n                        return 1;\n                   \
  \ if(i==2)\n                        return 1;\n                    return fib(i\
  \ - 1) + fib(i - 2);\n                })\n                .findFirst()\n       \
  \         .orElse(1);"
- "        if (n < 0) {\n            throw new IllegalArgumentException(\"Fibonacci\
  \ number must be non-negative\");\n        }\n        if (n <= 2) {\n          \
  \  return n;\n        }\n        return fib(n - 1) + fib(n - 2);"
- "        if (n == 0 || n == 1)\n            return n;\n        return fib(n - 1)\
  \ + fib(n - 2);"
- "        if (n <= 1) {\n            return n;\n        }\n        return fib(n -\
  \ 1) + fib(n - 2);"
- "        if (n < 2) return n;\n        return fib(n - 1) + fib(n - 2);"
- "        boolean fibIsEven = (n == 0 || n == 1);\n        if(fibIsEven) return n;\n\
  \        if (n == 2) return 1;\n        if(n < 2) return 0;\n        return fib(n-2)\
  \ + fib(n-1);"
- "        if (n <= 1)\n            return 1;\n        return fib(n - 1) + fib(n -\
  \ 2);"
- "        if (n <= 1) return n;\n        return fib(n-1) + fib(n-2);"
- '        return n > 1 ? fib(n - 2) + fib(n - 1) : n;'
- "        if (n <= 2) {\n            return n;\n        } else {\n            return\
  \ fib(n - 1) + fib(n - 2);\n        }"
- "        int a=0, b=1, c;\n        while (n>0) {\n            c=a+b;\n         \
  \   a=b;\n            b=c;\n            n--;\n        }\n        return c;"
- "        if (n <= 1) return n;\n        return fib(n-1) + fib(n-2);"
- "        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return fib(n\
  \ - 1) + fib(n - 2);"
- "        if (n <= 0) return 0;\n        if (n == 1) return 1;\n        return fib(n\
  \ - 1) + fib(n - 2);"
- "        int first = 1;\n        int second = 1;\n        if (n <= 1) {\n      \
  \      return 1;\n        }\n        for (int i = 2; i <= n; i++) {\n          \
  \  int temp;\n            temp = first + second;\n            first = second;\n\
  \            second = temp;\n        }\n        return first;"
- "        if (n <= 1)\n            return n;\n        return fib(n - 1) + fib(n -\
  \ 2);"
- "        int[] numbers = new int[n];\n        numbers[0] = 0;\n        numbers[1]\
  \ = 1;\n        for (int i = 2; i < n; i++) {\n            numbers[i] = numbers[i\
  \ - 1] + numbers[i - 2];\n        }\n        return numbers[n];"
- "        if (n <= 1)\n            return n;\n\n        return fib(n - 1) + fib(n\
  \ - 2);"
- "        if (n < 0)\n            throw new IllegalArgumentException(\"Fibonacci\
  \ number should be non-negative.\");\n        if (n == 0 || n == 1)\n          \
  \  return n;\n        return fib(n - 2) + fib(n - 1);"
- "        if (n <= 1) return 1;\n        return fib(n - 1) + fib(n - 2);"
- "        if (n <= 1)\n            return n;\n        return fib(n - 1) + fib(n -\
  \ 2);"
- "        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return fib(n\
  \ - 1) + fib(n - 2);"
- "        if (n == 1 || n == 0)\n            return n;\n\n        return fib(n -\
  \ 1) + fib(n - 2);"
- "        // base case\n        if (n <= 1) {\n            return n;\n        }\n\
  \n        // recursive case\n        return fib(n-1) + fib(n-2);"
- "        if (n == 0 || n == 1) {\n            return n;\n        }\n        return\
  \ fib(n - 1) + fib(n - 2);"
- "        int n1, n2;\n        if ((n & 1) == 0) { // If n is even.\n           \
  \ n1 = 1;\n            n2 = 1;\n        }\n        else {\n            n1 = 1;\n\
  \            n2 = 1;\n            for(int i = 3; i <= n; i+= 2) {\n            \
  \    n1 = n1 + n2;\n                n2 = n1 + n2;\n            }\n        }\n  \
  \      return n1;"
- "        if (n < 2) {\n            return n;\n        }\n        return fib(n -\
  \ 1) + fib(n - 2);"
- "        if (n <= 2) {\n            return n;\n        } else {\n            return\
  \ fib(n - 2) + fib(n - 1);\n        }"
- "        if (n <= 1) return n;\n        return fib(n-2) + fib(n-1);"
- "        int result = 0;\n        if (n <= 1)\n            return n;\n        for\
  \ (int i = 2; i < n; i++) {\n            result = result + i;\n        }\n     \
  \   return result;"
- "        if (n <= 1) {\n            return n;\n        } else {\n            return\
  \ fib(n - 1) + fib(n - 2);\n        }"
- "        if (n <= 1)\n            return n;\n        return fib(n - 1) + fib(n -\
  \ 2);"
- "        if (n < 2) return n;\n        return fib(n - 1) + fib(n - 2);"
- "        if (n < 2) return n;\n        return fib(n - 1) + fib(n - 2);"
- "        if (n == 0 || n == 1) {\n            return n;\n        } else {\n    \
  \        return fib(n - 1) + fib(n - 2);\n        }"
- "        if (n <= 1) return n;\n        return fib(n - 1) + fib(n - 2);"
- "        if (n <= 0) return 0;\n        if (n <= 1) return 1;\n        return fib(n\
  \ - 1) + fib(n - 2);"
- "        if (n <= 1) {\n            return n;\n        }\n        return fib(n-1)\
  \ + fib(n-2);"
- "        if(n<0) throw new IllegalArgumentException(\"fib arg is negative\");\n\
  \        if(n==0) return 0;\n        if(n==1) return 1;\n        return fib(n-2)\
  \ + fib(n-1);"
- "        if (n <= 0) return 0;\n        if (n == 1 || n == 2) return 1;\n      \
  \  return fib(n-1) + fib(n-2);"
- "        if (n <= 2) {\n            return n;\n        } else {\n            return\
  \ fib(n - 1) + fib(n - 2);\n        }"
- "        if (n <= 1) {\n            return n;\n        }\n        return fib(n -\
  \ 1) + fib(n - 2);"
- "        // Write your Java here!\n        if (n < 2) {\n            return n;\n\
  \        } else {\n            return fib(n - 1) + fib(n - 2);\n        }"
- "        if (n <= 1)\n            return n;\n        return fib(n - 1) + fib(n -\
  \ 2);"
- "        if (n <= 1) return 1;\n        else return fib(n - 1) + fib(n - 2);"
- "        // write your code here\n        if(n==0)\n            return 0;\n    \
  \    else if(n==1)\n            return 1;\n        else\n            return fib(fib(fib(fib(fib(n-1)))))+fib(n-1);"
- "        if (n <= 1) return n;\n        return fib(n - 1) + fib(n - 2);"
- "        if (n < 0 || n > 3) return -1;\n\n        return n < 2 ? 1 : fib(n - 2)\
  \ + fib(n - 1);"
- "        if (n < 2) return 1;\n        return fib(n - 2) + fib(n - 1);"
- "        if(n == 0 || n == 1) {\n            return n;\n        }\n        return\
  \ fib(n - 1) + fib(n - 2);"
- "        if (n < 2) {\n            return 1;\n        }\n        return fib(n -\
  \ 1) + fib(n - 2);"
- "        if (n == 0 || n == 1)\n            return n;\n        return fib(n - 1)\
  \ + fib(n - 2);"
- "        if (n <= 1) return 1;\n        else if (n == 2) return 2;\n        else\
  \ return fib(n - 2) + fib(n - 1);"
- "        if (n < 2) {\n            return n;\n        }\n\n        int first = 0;\n\
  \        int second = 1;\n\n        for (int i = 3; i <= n; i++) {\n           \
  \ int sumFirst = first + second;\n            first = second;\n            second\
  \ = sumFirst;\n        }\n\n        return first;"
language: java
name: HumanEval_55_fib
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Return n-th Fibonacci number.\n    // >>> fib(10)\n    //\
  \ 55\n    // >>> fib(1)\n    // 1\n    // >>> fib(8)\n    // 21\n    public static\
  \ int fib(int n) {\n"
stop_tokens:
- "    }\n    //"
- "    }\n    p"
- '    }

  }'
- "\n    }\n"
tests: "}\n    public static void main(String[] args) {\n    assert(fib((10)) == (55));\n\
  \    assert(fib((1)) == (1));\n    assert(fib((8)) == (21));\n    assert(fib((11))\
  \ == (89));\n    assert(fib((12)) == (144));\n    }\n\n}\n"
