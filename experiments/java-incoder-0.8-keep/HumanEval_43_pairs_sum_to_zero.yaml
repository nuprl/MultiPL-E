completions:
- "        int max = 0;\n        int sum = 0;\n        for (int i = 1; i < l.size();\
  \ i++) {\n            sum = sum + l.get(i);\n            if (sum > 0) {\n      \
  \          if (sum > max)\n                    max = sum;\n            }\n     \
  \       else\n                sum = 0;\n        }\n        return max == 0;"
- "        Set<Integer> set = new HashSet<Integer>();\n        for(int i = 0; i<l.size();\
  \ i++){\n            set.add(l.get(i));\n        }\n        return set.size()>=2;"
- "        List<Integer> lst = new ArrayList<>(l);\n        int sum = 0;\n       \
  \ for (int i = 0; i < lst.size(); i++) {\n            sum += lst.get(i);\n     \
  \   }\n        return sum % 2 == 0 && lst.size() > 1\n                && sum ==\
  \ 0 || sum == -1 && lst.size() == 0;"
- "        Map<Integer, Integer> map = new HashMap<>();\n        for(int i : l)\n\
  \            map.put(i, map.getOrDefault(i, 0) + 1);\n        Set<Integer> set =\
  \ new HashSet<>();\n        for(Map.Entry<Integer, Integer> e : map.entrySet())\n\
  \            if(e.getValue() == 2)\n                set.add(e.getKey());\n     \
  \   return set.size() == 2;"
- "        if (l.size() < 2) return true;\n        ArrayList<Integer> ans = new ArrayList<>();\n\
  \        l.forEach(i -> {\n            if (ans.contains(i)) return;\n          \
  \  if (ans.size() > 0) ans.remove(i);\n            ans.add(i);\n        });\n  \
  \      int sum = 0;\n        for (Integer i : ans) sum += i;\n        return sum\
  \ == 0;"
- "        int i = 0;\n        boolean ans = false;\n        for (Integer j : l) {\n\
  \            if (j < 0 || j > 0) {\n                ans = false;\n             \
  \   break;\n            }\n            int sum = i + j;\n            if (sum ==\
  \ 0) {\n                ans = true;\n            }\n            i = sum;\n     \
  \   }\n        return ans;"
- "        if (l.size() < 2) return false;\n        int sum = 0;\n        for (int\
  \ i : l) sum += i;\n        for (int i = 0; i < l.size(); i++) \n            for\
  \ (int j = i + 1; j < l.size(); j++)\n                if (l.get(i) + l.get(j) ==\
  \ 0) return true;\n        return false;"
- "        if (l.size() == 0) return false;\n        IntTuple pairs = new IntTuple(l.size()/2);\n\
  \        int sum = 0;\n        for (Integer i : l) {\n            sum += i;\n  \
  \          pairs.add(sum, i);\n        }\n        return pairs.tuples().distinct().count()\
  \ == 1;"
- "        int a = 0, b = 0;\n        for (Integer i : l) {\n            a += i;\n\
  \            b += i;\n        }\n        return b != 0 && b == a;"
- "        // write your code here\n        int sum=0;\n        for(Integer i:l){\n\
  \            sum+=i;\n        }\n        return l.size()==2&&Math.abs(sum)==0;"
- '        return !l.stream().flatMapToInt(x -> Arrays.asList(x, x + 1)).distinct().findFirst().isPresent()
  && l.size() % 2 == 0;'
- "        if (l.size() < 2) {\n            return false;\n        }\n        int\
  \ sum = 0;\n        for (Integer i : l) {\n            sum += i;\n        }\n  \
  \      if (sum == 0) {\n            return true;\n        }\n        l.sort(null);\n\
  \        Iterator<Integer> iter1 = l.iterator();\n        Iterator<Integer> iter2\
  \ = l.iterator();\n        while (iter1.hasNext() && iter2.hasNext()) {\n      \
  \      int currSum = iter1.next() + iter2.next();\n            if (currSum == 0)\
  \ {\n                return true;\n            }\n        }\n        return false;"
- "        ArrayList<Integer> l1 = new ArrayList<>(l);\n        for(int i=0; i < l.size();\
  \ i++) {\n            for(int j=i+1; j < l.size(); j++) {\n                if(!l1.contains(l.get(i)+l.get(j)))\n\
  \                    return false;\n            }\n        }\n        return true;"
- "        int n = l.size();\n        int sum = 0;\n        for(int i = 0; i < n;\
  \ i++) {\n            sum += l.get(i);\n        }\n        for(int i = 0; i < n;\
  \ i++) {\n            sum += l.get(i);\n            if(sum < 0 || sum != 0) {\n\
  \                return false;\n            }\n        }\n        return true;"
- "        int[] arr1 = new int[l.size()];\n        int[] arr2 = new int[l.size()];\n\
  \        for (int i = 0; i < l.size(); i++) {\n            arr1[i] = l.get(i);\n\
  \        }\n\n        int count = 0;\n        for (int i = 0; i < l.size() - 1;\
  \ i++) {\n            count += arr1[i];\n        }\n        boolean found = false;\n\
  \        for (int i = 0; i < l.size() - 1; i++) {\n            if (arr1[i] == 0)\
  \ {\n                arr1[i] = arr1[i + 1];\n                arr2[i] = arr2[i +\
  \ 1];\n                count -= arr1[i + 1];\n            } else {\n           \
  \     if (arr1[i] + arr2[i] == 0) {\n                    found = true;\n       \
  \         }\n            }\n        }\n        return found;"
- "        Set<Integer> s = new HashSet<>();\n        for (int num : l) {\n      \
  \      if (s.contains(num)) {\n                return false;\n            }\n  \
  \          s.add(num);\n        }\n        return true;"
- '        return Collections.frequency(l, l.stream().reduce((a, b) -> a + b) == 1);'
- '        return l.stream().map(i -> new Pair<>(0, i)).reduce(new Pair<>(0, 0)).equals(new
  Pair<>(0, 0));'
- "        Set<Integer> set = new HashSet<Integer>(l);\n        boolean hasTwoElementsSameSum\
  \ = true;\n        for(int i=0;i<set.size();i++) {\n            for(int j=0;j<set.size();j++)\
  \ {\n                if(j<i && set.contains(i-j)) {\n                    hasTwoElementsSameSum\
  \ = false;\n                }\n            }\n        }\n        return hasTwoElementsSameSum;"
- "        if (l.size() < 3) return false; // If list is empty return false\n    \
  \    if (l.size() == 3) return true; // If list is of length 3 return true\n   \
  \     ArrayList<Integer> sub = new ArrayList<Integer>(l.size() - 2);\n        Pair<Integer>\
  \ one = new Pair<Integer>(l.get(0), l.get(1));\n        Pair<Integer> two = new\
  \ Pair<Integer>(l.get(2), l.get(3));\n        Pair<Integer> three = new Pair<Integer>(l.get(4),\
  \ l.get(5));\n        Pair<Integer> four = new Pair<Integer>(l.get(6), l.get(7));\n\
  \        sub.add(one);\n        sub.add(two);\n        sub.add(three);\n       \
  \ sub.add(four);\n        Collections.sort(sub);\n        int leftSum = one.getLeft();\n\
  \        int rightSum = two.getRight();\n        if (leftSum + rightSum == 0) {\n\
  \            return true;\n        } else if (leftSum + rightSum < 0) {\n      \
  \      leftSum = Integer.MIN_VALUE;\n            rightSum = Integer.MIN_VALUE;\n\
  \        }\n        for (int i = 0; i <= sub.size() - 2; i++) {\n            int\
  \ sum = Math.abs(l.get(i) + l.get(i + 1));\n            if (sum > 0) {\n       \
  \         boolean leftMatch = true;\n                boolean rightMatch = true;\n\
  \                if (i == 0) {\n                    leftMatch = (sum == leftSum);\n\
  \                } else if (i == 1) {\n                    rightMatch = (sum ==\
  \ rightSum);\n                } else {\n                    int leftVal = l.get(i\
  \ + 2);\n                    int rightVal = l.get(i + 3);\n                    int\
  \ sum = leftVal + rightVal;\n                    int leftSum = leftVal - rightVal;\n\
  \                    int rightSum = leftSum + rightVal;\n                    leftMatch\
  \ = (sum == leftSum);\n                    rightMatch = (sum == rightSum);\n   \
  \             }\n                if (leftMatch && rightMatch) return true;\n   \
  \         }\n        }\n        return false;"
- "        if (l.size() < 2) {\n            return false;\n        }\n\n        HashSet<Integer>\
  \ set1 = new HashSet<Integer>(l);\n        HashSet<Integer> set2 = new HashSet<Integer>(l);\n\
  \        set1.removeAll(set2);\n        return set1.size() == 0;"
- "        if (l.size() < 2) {\n            return false;\n        }\n        ArrayList<Integer>\
  \ l2 = new ArrayList<>();\n        for (int i = 0; i < l.size() - 1; i++) {\n  \
  \          int k = i + 1;\n            for (int j = 0; j < l.size() - 1 - i; j++)\
  \ {\n                l2.add(l.get(k) + l.get(j));\n            }\n        }\n  \
  \      Set<Integer> set = new HashSet<>();\n        for (Integer i : l2) {\n   \
  \         if (set.contains(i)) {\n                return false;\n            }\n\
  \            set.add(i);\n        }\n        return true;"
- "        long ln = l.size();\n        if (ln == 0) {\n            return true;\n\
  \        }\n        if (ln >= 2) {\n            long first = l.get(0);\n       \
  \     long second = l.get(1);\n            if (first == second) {\n            \
  \    ArrayList<Integer> remaining = new ArrayList<Integer>(l.subList(2, l));\n \
  \               if (pairsSumToZero(remaining)) {\n                    return true;\n\
  \                }\n            }\n        }\n        return false;"
- "        // Your code here\n        Set<Integer> set = new HashSet<Integer>(l);\n\
  \        if (set.size() < 2) {\n            return false;\n        }\n        boolean\
  \ pairExists = false;\n        int total = 0;\n        for (int i = 0; i < l.size();\
  \ i++) {\n            total += l.get(i);\n            if (total < 0) {\n       \
  \         total *= -1;\n            }\n            if (set.contains(total)) {\n\
  \                pairExists = true;\n                break;\n            }\n   \
  \     }\n        return pairExists;"
- "        if (l.size() < 2) {\n            return false;\n        }\n        int\
  \ zeros = 0;\n        int positive = 0;\n        for (int i = 0; i < l.size(); i++)\
  \ {\n            if (l.get(i) == 0) {\n                zeros++;\n            } else\
  \ {\n                if (l.get(i) > 0) {\n                    positive++;\n    \
  \            }\n            }\n        }\n        if (zeros > 1) {\n           \
  \ return false;\n        }\n        if (positive < 2) {\n            return false;\n\
  \        }\n        return true;"
- "        int sum = 0;\n        for (Integer i : l) {\n            sum += i;\n  \
  \      }\n        return l.size() == l.stream().distinct().count() && sum == 0;"
- "        if (l.isEmpty()) {\n            throw new IllegalArgumentException(\"Input\
  \ list can't be empty.\");\n        }\n        Map<Integer, Integer> map = new HashMap<>();\n\
  \        for (int i : l) {\n            if (map.containsKey(i)) {\n            \
  \    map.put(i, map.get(i) + 1);\n            } else {\n                map.put(i,\
  \ 1);\n            }\n        }\n        Set<Integer> set = new HashSet<>();\n \
  \       for (int i : map.keySet()) {\n            if (map.get(i) == 1) {\n     \
  \           set.add(i);\n            }\n        }\n        return set.size() < 2;"
- "        // write your code in Java 7\n        if(l.size() == 0){\n            return\
  \ false;\n        }\n        int sum = 0;\n        int first = 0;\n        int last\
  \ = l.size()-1;\n        for(int i = 0; i < l.size(); i++){\n            sum +=\
  \ l.get(i);\n            if(sum == 0){\n                first++;\n            }\n\
  \            if(sum < 0){\n                last--;\n            }\n        }\n \
  \       if(first == last + 1){\n            return true;\n        }\n        return\
  \ false;"
- "        // Declare a variable to hold our result\n        boolean resultSet = false;\n\
  \        // Declare a variable to hold our pairs\n        Pair<ArrayList<Integer>,\
  \ ArrayList<Integer>> pairs = null;\n        // Loop through the list l and pair\
  \ up elements with the elements\n        // before them that sum to zero.\n    \
  \    for (Integer n : l) {\n            int lastElement = -1;\n            int sum\
  \ = 0;\n            for (int i = 0; i < l.size(); i++) {\n                sum +=\
  \ l.get(i);\n                if (sum == 0)\n                    break;\n       \
  \         if (sum > 0) {\n                    if (i == 0)\n                    \
  \    lastElement = i;\n                    if (l.get(i) > l.get(lastElement)) {\n\
  \                        pairs = new Pair<>(l, new ArrayList<Integer>());\n    \
  \                    pairs.left.add(l.get(i));\n                        pairs.right.add(l.get(lastElement));\n\
  \                    }\n                    lastElement = i;\n                 \
  \   sum = 0;\n                }\n            }\n            if (sum > 0)\n     \
  \           resultSet = true;\n        }\n        // Return our result\n       \
  \ return resultSet;"
- "        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();\n    \
  \    for(Integer i : l) {\n            map.put(i, map.getOrDefault(i, 0) + 1);\n\
  \        }\n        for(Map.Entry<Integer, Integer> entry : map.entrySet()) {\n\
  \            if(entry.getValue() == 1) {\n                return false;\n      \
  \      }\n        }\n        return true;"
- "        int[] a = new int[l.size()];\n        int count = 0;\n        for (Integer\
  \ i : l)\n            count += i;\n        for (int i = 0; i < a.length - 1; i++)\n\
  \            a[i] = 0;\n        int k = l.size() - 1;\n        for (int i = 0; i\
  \ < a.length; i++) {\n            a[i] = 1;\n            k /= 2;\n            while\
  \ (k >= 0) {\n                int j = i + k;\n                if (j > a.length -\
  \ 1)\n                    break;\n                if (l.contains(j)) {\n       \
  \             a[i] = 0;\n                    k /= 2;\n                } else\n \
  \                   k /= 2;\n            }\n        }\n        return a[0] == 0;"
- "        boolean arePairsEqual = l.stream().reduce(false, (x, y) -> x && y) == false;\n\
  \        System.out.println(arePairsEqual);\n        return arePairsEqual;"
- "        // Create all pairs of the list\n        List<Pair<Integer, Integer>> allPairsOfList\
  \ = createPairs(l);\n        // Filter out pairs that sum to zero.\n        List<Pair<Integer,\
  \ Integer>> allPairsOfListFiltered = allPairsOfList\n                .stream().filter(pair\
  \ ->\n                pair.getRight().equals(pair.getLeft())\n                &&\
  \ pair.getRight().equals(0))\n                .collect(Collectors.toList());\n \
  \       // Check if there are two distinct elements in the list that\n        //\
  \ sum to zero.\n        return allPairsOfListFiltered.size() > 1;"
- "        if (l == null || l.isEmpty()) {\n            return false;\n        }\n\
  \        if (l.size() < 2) {\n            return false;\n        }\n        int\
  \ sum = 0;\n        int counter = 0;\n        for (int i = 0; i < l.size(); i++)\
  \ {\n            sum = sum + l.get(i);\n            if (sum == 0) {\n          \
  \      counter++;\n            }\n        }\n        return counter > 1;"
- "        Set<Integer> a = new HashSet<Integer>();\n        a.add(0);\n        for\
  \ (int i = 0; i < l.size(); i++) {\n            int n = l.get(i);\n            a.add(n);\n\
  \        }\n        if (a.size() != a.size() - 1) {\n            return false;\n\
  \        }\n        return true;"
- "        if (l.size() < 2)\n            return false;\n        Integer sum = null;\n\
  \        for (Integer i : l)\n            sum += i;\n        return sum.equals(0);"
- "        if (l.size() < 2)\n            return false;\n        Map<Integer, Integer>\
  \ countMap = Arrays.stream(l).boxed().collect(Collectors.groupingBy(Function.identity(),\
  \ Collectors.counting()));\n        return !countMap.values().stream().filter(c\
  \ -> c < 2).findFirst().isPresent();"
- "        int min = Math.min(l.size(), 2);\n        int[] a = new int[min];\n   \
  \     l.forEach((a)->System.out.print(a));\n        boolean ans = false;\n     \
  \   l.forEach((a)->{ans = true; return false;});\n        return ans;"
- "        if (l.size() < 2) {\n            return false;\n        }\n        if (l.size()\
  \ == 2) {\n            if (l.get(0) + l.get(1) == 0) {\n                return true;\n\
  \            } else {\n                return false;\n            }\n        }\n\
  \        List<Integer> sum = new ArrayList<Integer>();\n        for (int i = 0;\
  \ i <= l.size() - 1; i++) {\n            sum.add(l.get(i));\n        }\n       \
  \ int i = 0;\n        while (i < sum.size()) {\n            int j = sum.size() -\
  \ 1 - i;\n            int sum = sum.get(j) + sum.get(j + 1);\n            if (sum\
  \ == 0) {\n                return true;\n            }\n            sum.remove(sum.size()\
  \ - 1);\n            sum.set(j, sum);\n            sum.set(j + 1, sum);\n      \
  \  }\n        return false;"
- "        int sum = 0;\n        boolean found = true;\n        for (Integer i : l)\
  \ {\n            if (i.intValue() == 0) {\n                return false;\n     \
  \       }\n            sum += i;\n            if (sum == 0) {\n                found\
  \ = true;\n                break;\n            }\n        }\n        return found;"
- "        boolean result = false;\n        if (l != null && !l.isEmpty()) {\n   \
  \         int n = 0;\n            for (int i = 0; i < l.size() - 1; i++) {\n   \
  \             int a = l.get(i);\n                int b = l.get(i + 1);\n       \
  \         if (a == b) continue;\n                n = Math.abs(a) + Math.abs(b);\n\
  \                if (n == 0) result = true;\n            }\n        }\n        return\
  \ result;"
- "        Set<Integer> set = new HashSet<Integer>(l);\n        set.remove(l.get(0));\n\
  \        if (set.size() > 1) {\n            return true;\n        } else {\n   \
  \         return false;\n        }"
- "        return l.stream()\n                .distinct()\n                .allMatch(i\
  \ -> l.stream().anyMatch(j -> i + j == 0));"
- "        if (l.size() < 2) {\n            return false;\n        }\n        int\
  \ x = 0;\n        for (int i = 0; i < l.size(); i++) {\n            if (l.get(i)\
  \ > 0) {\n                x = x + l.get(i);\n            }\n        }\n        if\
  \ (l.get(l.size() - 1) == 0) {\n            if (x == 0) {\n                return\
  \ true;\n            }\n        }\n        if (l.get(l.size() - 1) == 0) {\n   \
  \         if (x == l.get(l.size() - 1)) {\n                return true;\n      \
  \      }\n        }\n        return false;"
- "        int[] a = l.stream().mapToInt(Integer::intValue).toArray();\n        Arrays.sort(a);\n\
  \        return Arrays.binarySearch(a, 0, a.length - 1, 0) == (Arrays.binarySearch(a,\
  \ 0, a.length - 1, 0) - 1);"
- "        int n = l.size();\n        HashMap<Integer, Integer> map = new HashMap<>();\n\
  \        for (int i = 0; i < n; ++i) {\n            Integer val = l.get(i);\n  \
  \          if (map.containsKey(val)) {\n                if (map.get(val) == 0) {\n\
  \                    return false;\n                }\n                map.put(val,\
  \ map.get(val) - 1);\n            } else {\n                map.put(val, 1);\n \
  \           }\n        }\n        for (Integer val : map.keySet()) {\n         \
  \   if (map.get(val) != 0) {\n                return false;\n            }\n   \
  \     }\n        return true;"
- "        \n        \n        \n        for(int i = 0; i < l.size()-1; i++){\n  \
  \          int x = l.get(i);\n            int y = l.get(i+1);\n            if(x<y){\n\
  \                for(int j = i+1; j < l.size(); j++){\n                    int z=\
  \ l.get(j);\n                    if(z<y){\n                        return false;\n\
  \                    }\n                }\n            }\n        }\n        return\
  \ true;"
- "        if (l.isEmpty()) return true;\n        int firstPair = 0;\n        int\
  \ secondPair = 0;\n        int sum = 0;\n        int length = l.size();\n      \
  \  for (int i = 0; i < length; i++) {\n            if (i != 0) {\n             \
  \   sum += l.get(i - 1);\n            }\n            if (i != length -1 ) {\n  \
  \              sum += l.get(i);\n            }\n            if (sum < 0) {\n   \
  \             return false;\n            }\n            if (sum == firstPair) {\n\
  \                firstPair = 0;\n                secondPair = i;\n            }\n\
  \            if (sum == secondPair) {\n                firstPair = i;\n        \
  \        secondPair = 0;\n            }\n        }\n        return true;"
- "        Integer[] pairs = new Integer[l.size() - 1];\n        for (int i = 0; i\
  \ < pairs.length; i++) {\n            for (int j = i + 1; j < pairs.length; j++)\
  \ {\n                if (l.get(i) + l.get(j) == 0) {\n                    pairs[i]\
  \ = l.get(i);\n                    pairs[j] = l.get(j);\n                }\n   \
  \         }\n        }\n        if (pairs.length < 2) return false;\n        for\
  \ (int i = 0; i < pairs.length; i++) {\n            if (pairs[i] != l.get(i)) return\
  \ false;\n        }\n        return true;"
- "        if (l.size() <= 2) {\n            return false;\n        }\n        if\
  \ (l.size() >= 6) {\n            Map<Integer, Integer> counts = new HashMap<>();\n\
  \            for (int i = 0; i < l.size(); i++) {\n                int currentElement\
  \ = l.get(i);\n                int previousElement = l.get(i-1);\n             \
  \   if (currentElement - previousElement > 1) {\n                    counts.put(currentElement,\
  \ counts.get(previousElement) + 1);\n                } else {\n                \
  \    counts.put(currentElement, 1);\n                }\n            }\n        \
  \    for (int i = 0; i < l.size(); i++) {\n                int currentElement =\
  \ l.get(i);\n                int previousElement = l.get(i-1);\n               \
  \ if (counts.get(currentElement) == 1) {\n                    if (counts.get(previousElement)\
  \ == 0) {\n                        return false;\n                    }\n      \
  \          }\n            }\n        }\n        return true;"
- "        int size = l.size();\n        List<Integer> l1 = l.subList(0, size);\n\
  \        List<Integer> l2 = l.subList(size, 2 * size);\n        return l1.stream().anyMatch(\
  \ l2 -> l2.sum() == 0 );"
- "        Integer a = 0, b = 0;\n        for (int i : l) {\n            a += i;\n\
  \            b += a;\n        }\n        return a == 0;"
- "        Set<Integer> set = new HashSet<Integer>();\n        for (int x : l) {\n\
  \            set.add(x + (x==0) ? 0 : 0);\n        }\n        return set.size()\
  \ > 1;"
- "        Integer[] arr = l.toArray(new Integer[0]);\n        Arrays.sort(arr);\n\
  \        int zeros = 0;\n        int total = 0;\n        for (int i = 1; i < arr.length\
  \ - 1; i++) {\n            total = total + arr[i];\n            if (arr[i] == 0)\n\
  \                zeros++;\n            else\n                break;\n        }\n\
  \        if (total == 0)\n            return false;\n        if (arr[0] == 0 &&\
  \ zeros == 0)\n            return false;\n        if (arr[0] == 0 && zeros > 1)\n\
  \            return false;\n        if (arr[0] == 0 && zeros == 1)\n           \
  \ return true;\n        if (arr[0] == 0)\n            return true;\n        return\
  \ false;"
- "        // The first pair is non-zero, no more pairs to check.\n        if (l.isEmpty())\n\
  \            return false;\n\n        // The current sum of the first element is\
  \ non-zero.\n        int first = l.get(0);\n\n        // For all pairs in the list,\n\
  \        for (Integer element : l) {\n            // The sum of the current element\
  \ is zero.\n            if (element == 0)\n                return false;\n\n   \
  \         // The current sum of the current element is non-zero.\n            int\
  \ current = first + element;\n\n            // If the sum of the current element\
  \ is not zero, there is no\n            // other pair whose sum to zero.\n     \
  \       if (current != 0)\n                return false;\n\n            // The current\
  \ sum of the first element has been exhausted and there\n            // are no more\
  \ pairs to check.\n            first = current;\n        }\n\n        // The first\
  \ element in the list has been exhausted and there are no more\n        // pairs\
  \ to check.\n        return true;"
- "        return l.stream()\n                .map(i -> Pair.of(i, i))\n         \
  \       .noneMatch(pair -> pair.left.add(pair.right).equals(new ArrayList<Integer>()));"
- "        return l.stream()\n                .filter(t -> l.indexOf(t) == l.lastIndexOf(t)\
  \ + 1)\n                .distinct()\n                .count() > 1;"
- "        HashSet<Integer> set = new HashSet<Integer>();\n        HashSet<Integer>\
  \ set2 = new HashSet<Integer>();\n        int sum = 0;\n        for (int i: l) {\n\
  \            sum += i;\n            if (set.contains(sum)) {\n                set2.add(sum);\n\
  \            }\n            set.add(sum);\n        }\n        return set2.size()\
  \ == 1;"
- "        IntStream.range(0, l.size() - 1).forEach(i ->\n                IntStream.range(i\
  \ + 1, l.size()).forEach(j -> {\n                    if (l.get(i) > l.get(i + 1)\
  \ || l.get(j) > l.get(j + 1)) {\n                        boolean pair1 = l.get(i)\
  \ == l.get(i + 1);\n                        boolean pair2 = l.get(j) == l.get(j\
  \ + 1);\n                        boolean pair = (pair1 & pair2) ? true : false;\n\
  \                        if (pair) {\n                            return true;\n\
  \                        }\n                    }\n                }));\n      \
  \  return false;"
- "        Integer[] l2 = l.stream().mapToInt(Integer::intValue).toArray();\n    \
  \    int ln = l2.length;\n        Arrays.sort(l2);\n        int i1 = 0, i2 = 0;\n\
  \        if (ln == 0)\n            return true;\n        for (int i = 0; i < ln;\
  \ i++) {\n            if (i2 == ln - 1)\n                i1 = i + 1;\n         \
  \   else if (l2[i] == l2[i + 1])\n                i1 = i + 1;\n            else\
  \ if (l2[i] != 0)\n                i2 = i;\n        }\n        if (i1 == i2)\n \
  \           return true;\n        return false;"
- "        if (l.size() <= 1) {\n            return false;\n        }\n        Map<Integer,\
  \ Integer> counts = new HashMap<>();\n        for (int i : l) {\n            int\
  \ count = counts.get(i);\n            if (count == null) {\n                counts.put(i,\
  \ 1);\n            } else {\n                counts.put(i, count + 1);\n       \
  \     }\n        }\n        if (counts.values().stream().mapToInt(x -> x).sum()\
  \ != 0) {\n            return false;\n        }\n        boolean[] found = new boolean[l.size()];\n\
  \        int n = 0;\n        for (int i : l) {\n            int count = counts.get(i);\n\
  \            if (count == 1) {\n                found[n] = true;\n            }\n\
  \            if (count > 1) {\n                for (int j = 1; j < count; j++) {\n\
  \                    found[n + j] = true;\n                }\n            }\n  \
  \          n += count;\n        }\n        for (int i = 0; i < found.length; i++)\
  \ {\n            if (found[i]) {\n                return true;\n            }\n\
  \        }\n        return false;"
- "        if (l.size() == 0)\n            return false;\n        int count = 0;\n\
  \        int x = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n     \
  \       count += x - l.get(i);\n            if (count != 0)\n                return\
  \ false;\n        }\n        return true;"
- "        if (l.size() < 2) {\n            return false;\n        }\n\n        List<Integer>\
  \ positives = l.stream().filter(x -> x >= 0).collect(Collectors.toList());\n   \
  \     List<Integer> negatives = l.stream().filter(x -> x < 0).collect(Collectors.toList());\n\
  \n        if (positives.size() == 1 && negatives.size() == 1) {\n            return\
  \ l.stream().map(x -> Math.abs(x) + Math.abs(positives.get(0)) + Math.abs(negatives.get(0)))\n\
  \                            .distinct().count() == 2;\n        }\n        else\
  \ {\n            return false;\n        }"
- "        l.sort(Comparator.naturalOrder());\n        l.stream().collect(Collectors.groupingBy(v\
  \ -> v)).entrySet().stream().filter(p -> p.getValue().size() == 2 && p.getValue().stream().filter(x\
  \ -> x < 0).count() == 1).findFirst().isPresent();"
- "        int n = l.size();\n        // loop over pairs of consecutive elements\n\
  \        for (int i = 0; i < n - 1; ) {\n            for (int j = i + 1; j < n;\
  \ j++) {\n                // if the pairs sum to zero, return True\n           \
  \     if (l.get(i) + l.get(j) == 0)\n                    return true;\n        \
  \    }\n        }\n        // return False otherwise\n        return false;"
- "        // write your code here\n        int n = l.size();\n        boolean flag;\n\
  \        int[] xs = l.stream().mapToInt(Integer::intValue).toArray();\n        int\
  \ x = 0;\n        int y = 0;\n        int sum = 0;\n        for (int i = 0; i <\
  \ xs.length; i++) {\n            x += xs[i];\n            if (y != 0) {\n      \
  \          sum = x + y;\n                if (sum == 0) {\n                    flag\
  \ = true;\n                    break;\n                } else {\n              \
  \      y = sum - x;\n                }\n            } else {\n                x\
  \ = xs[i];\n            }\n        }\n        return flag;"
- "        HashSet<Integer> hs = new HashSet<>();\n        hs.add(0); // first element\n\
  \        for (Integer i : l) {\n            if (hs.size() <= 2) {\n            \
  \    return false;\n            }\n            if (hs.size() == 3) {\n         \
  \       if (i + hs.size() > hs.size()) {\n                    return false;\n  \
  \              }\n            }\n            hs.add(i);\n        }\n        return\
  \ true;"
- "        List<Integer> l1 = new ArrayList<Integer>();\n        List<Integer> l2\
  \ = new ArrayList<Integer>();\n        Collections.sort(l);\n        for(int i=0;\
  \ i<l.size()-1; i++) {\n            l1.add(l.get(i));\n            l2.add(l.get(i+1));\n\
  \        }\n        boolean b1 = l1.equals(l2);\n        boolean b2 = pairsSumToZero(l1);\n\
  \        if(!b1) {\n            return false;\n        }\n        else {\n     \
  \       return true;\n        }"
- "        // Your code goes here!\n        // write your code here\n        int sum\
  \ = 0;\n        int count = 0;\n        l.stream().forEach(i -> {\n            sum\
  \ += i;\n            if (sum == 0) {\n                count++;\n            }\n\
  \        });\n        if (count == 2) return true;\n        else return false;"
- "        int sum = 0;\n        for (Integer i : l) {\n            sum += i;\n  \
  \      }\n        l.sort(null);\n        Collections.reverse(l, null);\n       \
  \ Collections.reverse(l, null);\n        for (Integer i : l) {\n            if (i\
  \ > 0 && i != sum) {\n                return false;\n            }\n        }\n\
  \        return true;"
- "        ArrayList<Integer> list = new ArrayList<>(l);\n        Iterator<Integer>\
  \ iter = list.iterator();\n        while (iter.hasNext()) {\n            int a =\
  \ iter.next();\n            for (int b : l) {\n                if (b - a == 0) {\n\
  \                    iter.remove();\n                }\n            }\n        }\n\
  \        return list.size() < 2;"
- "        // initialize pairs and sum values\n        Pairs pairs = new Pairs();\n\
  \        int sum = 0;\n        for (int i = 0; i < l.size(); i++) {\n          \
  \  pairs.addPair(l.elementAt(i), 0);\n            sum += l.elementAt(i);\n     \
  \   }\n\n        // initialize two variables\n        boolean flag = false;\n  \
  \      int pair1 = 0, pair2 = 0;\n\n        // check each pair for equality\n  \
  \      for (int i = 0; i < pairs.size(); i++) {\n            pair1 = pairs.getPair(i);\n\
  \            pair2 = i;\n\n            // if pairs are equal, check for sum of pairs\n\
  \            if ((pair1.equals(pair2)) && (pair1.getSum() == 0)) {\n           \
  \     flag = true;\n                break;\n            }\n        }\n\n       \
  \ return flag;"
- "        boolean b = false;\n        for (int i = 0; i < l.size(); i++) {\n    \
  \        for (int j = i + 1; j < l.size(); j++) {\n                int s = l.get(i)\
  \ + l.get(j);\n                if (s == 0)\n                    b = true;\n    \
  \        }\n        }\n        return b;"
- "        int size = l.size();\n        int sum = 0;\n        for (int i = 0; i <\
  \ size - 1; i++) {\n            sum += l.get(i);\n        }\n        if (sum > 0)\
  \ {\n            for (int j = i+1; j < size; j++) {\n                sum += l.get(j);\n\
  \                if (sum < 0) {\n                    return false;\n           \
  \     }\n            }\n        }\n        return true;"
- "        ArrayList<Integer> a = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ b = new ArrayList<Integer>();\n        for(int n : l) {\n            if(b.get(b.size()-1)\
  \ == n - 1) {\n                a.add(n);\n            }\n            else {\n  \
  \              b.add(n);\n                if(a.size() > 0 && b.get(a.size()-1) ==\
  \ 0) {\n                    return true;\n                }\n            }\n   \
  \     }\n        return false;"
- "        HashSet<Integer> hs = new HashSet<>();\n        l.forEach(a -> hs.add(a));\n\
  \        ArrayList<Integer> hs1 = new ArrayList<>();\n        hs1.addAll(l.subList(0,\
  \ l.size() / 2));\n        if (hs.size() == hs1.size()) {\n            boolean found\
  \ = false;\n            for (int i : l) {\n                if (hs.contains(i)) {\n\
  \                    found = true;\n                    break;\n               \
  \ }\n            }\n            return found;\n        }\n        return false;"
- "        HashSet<Integer> set = new HashSet<>();\n        for (Integer i : l) {\n\
  \            if (set.contains(i))\n                return false;\n            else\n\
  \                set.add(i);\n        }\n        return true;"
- "        return l.stream().distinct().count() == 2\n            && l.stream().map(p\
  \ -> Math.abs(p)).sum()\n            == 0;"
- "        List<Integer> pairs = new ArrayList<Integer>();\n        pairs.add(l.get(0));\n\
  \        pairs.add(l.get(1));\n        pairs.add(l.get(2));\n        pairs.add(l.get(3));\n\
  \        for(int i : pairs) {\n            if(i != 0) {\n                if(i ==\
  \ l.get(1) + l.get(2)) {\n                    return true;\n                }\n\
  \            }\n        }\n        return false;"
- "        if (l.size() <= 2) {\n            return true;\n        }\n        int\
  \ sum = 0;\n        for (int i = 1; i < l.size(); i++) {\n            sum += l.get(i);\n\
  \        }\n        HashSet<Integer> set = new HashSet<Integer>();\n        boolean\
  \ flag = false;\n        for (int i = 0; i < l.size(); i++) {\n            if (set.contains(l.get(i)))\
  \ {\n                flag = true;\n                break;\n            } else {\n\
  \                set.add((l.get(i)));\n            }\n        }\n        return\
  \ flag;"
- "        ArrayList<Integer> numList = new ArrayList<Integer>();\n        numList.addAll(Arrays.asList(l));\n\
  \        boolean found = true;\n        long sum = 0;\n        int max = 0;\n  \
  \      for (int i = 0; i < l.size(); i++) {\n            for (int j = i+1; j < l.size();\
  \ j++) {\n                sum += l.get(i);\n                sum += l.get(j);\n \
  \               if (sum > 0) {\n                    found = true;\n            \
  \        max = Math.max(l.get(i), l.get(j));\n                }\n            }\n\
  \            if (found) {\n                found = false;\n                sum =\
  \ 0;\n            }\n        }\n        if (found) {\n            Collections.sort(numList);\n\
  \            if (numList.get(0) == max) {\n                return true;\n      \
  \      }\n        }\n        return false;"
- "        int sum = 0;\n        for (int i : l) {\n            sum += i;\n      \
  \  }\n        if (l.size() < 2) {\n            return false;\n        }\n      \
  \  int a = l.get(0);\n        int b = l.get(1);\n        int c = l.get(l.size()\
  \ - 1);\n        return Math.abs(a * b + c) == 0;"
- "        ArrayList<Integer> pairs = new ArrayList<Integer>();\n        for (int\
  \ i : l) {\n            int j = i + i;\n            if (j < 0) j += Integer.MAX_VALUE;\n\
  \            if (pairs.size() > 0) {\n                if (j == pairs.get(0)) {\n\
  \                    pairs.set(0, j);\n                } else {\n              \
  \      if (pairs.get(0) > j) pairs.set(0, j);\n                }\n            }\
  \ else {\n                pairs.add(j);\n            }\n        }\n        return\
  \ pairs.size() > 1;"
- "        if(l.isEmpty()){\n            return false;\n        }\n        Arrays.sort(l);\n\
  \        for(int i : l){\n            for(int j : l){\n                if(i != j\
  \ && j - i == 0){\n                    return true;\n                }\n       \
  \     }\n        }\n        return false;"
- "        HashSet<Integer> hs = new HashSet<>();\n        for (int i=0; i<l.size();\
  \ i++) {\n            hs.add(l.get(i));\n        }\n        for (int i=0; i<l.size();\
  \ i++) {\n            if (!hs.contains(l.subList(i, i+1).stream().reduce(0, Integer::sum)))\
  \ {\n                return false;\n            }\n        }\n        return true;"
- "        HashSet<Integer> set = new HashSet<>();\n        for(Integer i : l) set.add(i\
  \ - 0);\n        if(set.size() < 2) return false;\n        HashSet<Integer> zeros\
  \ = new HashSet<>();\n        for(Integer i : l) if(!set.contains(i - 0)) return\
  \ false;\n        return true;"
- "        int[] nums = l.getData();\n        int n = nums.length;\n        for (int\
  \ i = 0; i < n - 1; i++) {\n            for (int j = i + 1; j < n; j++) {\n    \
  \            if (nums[i] + nums[j] == 0) {\n                    return true;\n \
  \               }\n            }\n        }\n        return false;"
- "        Set<Integer> set = new HashSet<>(l);\n        System.out.println(set);\n\
  \        for (int i : l) {\n            System.out.println(set);\n            if\
  \ (!set.add(Math.abs(i) - 1)) {\n                return false;\n            }\n\
  \            set.clear();\n        }\n        return true;"
- "        // write your code here\n        if (l.isEmpty()) {\n            return\
  \ true;\n        }\n        if (l.size() == 1) {\n            return false;\n  \
  \      }\n\n        int[] vals = new int[l.size()];\n        int j = 0;\n      \
  \  for (int i = 0; i < l.size(); i++) {\n            if (l.get(i) == 0) {\n    \
  \            vals[j] = 1;\n            } else {\n                vals[j] += 1;\n\
  \            }\n            j++;\n        }\n        Collections.sort(vals);\n \
  \       int k = 0;\n        for (int i = 1; i < vals.length; i++) {\n          \
  \  if (vals[k] == vals[i]) {\n                return true;\n            }\n    \
  \        k++;\n        }\n        return false;"
- "        if (l.size() < 2) return false;\n        int pair = l.get(0) + l.get(1);\n\
  \        return l.size() == 2 || (l.size() == 3 && Math.abs(pair - l.get(2)) ==\
  \ 0);"
- "        HashSet<Integer> hs = new HashSet<>();\n        for (int i : l) {\n   \
  \         hs.add(i);\n        }\n        return hs.size() < 2;"
- "        boolean a = true;\n        int max = -1;\n        int x = l.size();\n \
  \       for (int i = 0; i < x; i++) {\n            int y = l.get(i);\n         \
  \   int sum = 0;\n            for(int k = 0; k < x; k++) {\n                if(i!=k)\
  \ {\n                    sum += l.get(k);\n                }\n            }\n  \
  \          if((y==0 && sum==0) || (max==-1 && sum>0)) {\n                a = false;\n\
  \            } else if(y>max) {\n                max = y;\n            }\n     \
  \   }\n        return a;"
- "        l.sort();\n        int diff = 0;\n        int sum = 0;\n        for(int\
  \ i = 0; i < l.size(); i++)\n            sum += l.get(i);\n        for(int i = 0;\
  \ i < l.size(); i++)\n            diff += Math.abs(l.get(i) - sum);\n        if(diff%2\
  \ == 1)\n            return false;\n        return true;"
- "        HashSet<Integer> set = new HashSet<>();\n        for (int i = 0; i < l.size();\
  \ i++) {\n            if (!set.add(l.get(i))) {\n                return false;\n\
  \            }\n        }\n        return true;"
- "        if (l.isEmpty()) return false;\n\n        int s = 0;\n        int t = l.get(0);\n\
  \        for (int i = 1; i < l.size(); i++) {\n            if (Math.abs(t - l.get(i))\
  \ == 0) return true;\n            if (Math.abs(s - l.get(i)) == 0) return false;\n\
  \            s = t;\n            t = l.get(i);\n        }\n        return false;"
- "        return Arrays.asList(l.stream().collect(Collectors.toList()))\n       \
  \     .stream().anyMatch(e -> l.stream().filter(f -> e + f == 0).count() == 2);"
- "        int n = l.size();\n        int sum = 0;\n        for (int i = 0; i < n;\
  \ i++) {\n            sum = sum + l.get(i);\n        }\n        for (int i = 0;\
  \ i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (i\
  \ == j) continue;\n                sum = sum - l.get(i) + l.get(j);\n          \
  \      if (sum == 0) return true;\n            }\n        }\n        return false;"
- "        Collections.sort(l);\n        int sum = 0;\n        for (int i = 0; i <=\
  \ l.size(); ++i) {\n            int val = l.get(i);\n            if (val > 0) return\
  \ false;\n            sum += val;\n        }\n        if (sum != 0) return false;\n\
  \        int i = 0;\n        while (i < l.size()) {\n            int val = l.get(i);\n\
  \            if (val > 0) return false;\n            sum += val;\n            i++;\n\
  \        }\n        return true;"
- "        int twoSum = 0;\n        int len = l.size();\n        for (int i = 0; i\
  \ < len - 1; i++) {\n            twoSum += l.get(i);\n            twoSum += l.get(i\
  \ + 1);\n            if (twoSum == 0) {\n                return true;\n        \
  \    }\n        }\n        return false;"
- "        if (l.size() < 2) {\n            return false;\n        }\n        int\
  \ s = 0;\n        for (int i = 0; i < l.size(); i++) {\n            if (l.contains(i))\
  \ {\n                s += i;\n            }\n        }\n        for (int i = 0;\
  \ i < l.size(); i++) {\n            for (int j = i + 1; j < l.size(); j++) {\n \
  \               if (l.get(i) + l.get(j) == 0) {\n                    return true;\n\
  \                }\n            }\n        }\n        return false;"
- "        boolean b = true;\n        boolean l = false;\n        l.forEach(i -> {\n\
  \            if(l.contains(i)) {\n                b = (b.equals(false));\n     \
  \           l = (l.equals(true));\n            }\n        });\n        return b;"
- "        final Set<Integer> seen = new HashSet<>();\n        for (int i : l) {\n\
  \            final int j = l.remove(i);\n            if (seen.contains(j - i)) {\n\
  \                return true;\n            } else {\n                seen.add(j\
  \ - i);\n            }\n        }\n        return false;"
- "        Integer a = l.get(0), b = l.get(1);\n        return a == 0 || (Math.abs(a\
  \ - b) == Math.abs(a - l.get(0)))\n            && (Math.abs(b - l.get(0)) == Math.abs(b\
  \ - l.get(1)));"
- "        int lSum = 0;\n        boolean retval = false;\n        for (Integer i\
  \ : l) {\n            lSum += i;\n            if (lSum < 0) {\n                retval\
  \ = true;\n                break;\n            }\n        }\n        return retval;"
- "        l.sort(Collections.reverseOrder());\n        if (l.size() < 2) {\n    \
  \        return false;\n        }\n        for (int i = 0; i < l.size() - 1; i++)\
  \ {\n            if (l.get(i) + l.get(i + 1) != 0) {\n                return false;\n\
  \            }\n        }\n        return true;"
- "        Set<Integer> set = new HashSet<>();\n        for (Integer i : l) {\n  \
  \          int s = i + i;\n            if (set.add(s)) {\n                return\
  \ true;\n            }\n        }\n        return false;"
- "        Collections.sort(l);\n        final int n = l.size();\n        int minSum\
  \ = l.get(0);\n        boolean result = true;\n        for (int i = 1; i < n; i++)\
  \ {\n            int sum = 0;\n            for (int j = 0; j < i; j++) {\n     \
  \           sum += l.get(j);\n            }\n            sum += l.get(i);\n    \
  \        if (sum < minSum) {\n                result = false;\n            }\n \
  \           if (sum > minSum) {\n                minSum = sum;\n            }\n\
  \        }\n        return result;"
- "        l.sort(Collections.reverseOrder());\n        int prev = 0;\n        int\
  \ curr = 0;\n        int count = 0;\n        for(Integer i : l) {\n            if(count\
  \ >= 2) {\n                if (i != prev) {\n                    return false;\n\
  \                }\n            }\n            prev = i;\n            curr += i;\n\
  \            count++;\n        }\n        if(prev != 0) {\n            return false;\n\
  \        }\n        return true;"
- "        int n = l.size();\n        if (n <= 0) return false;\n        if (n >=\
  \ 2) return l.stream()\n            .filter(i -> i + l.get(n - 1) == 0)\n      \
  \      .count() == 2;\n        int s = l.stream()\n            .map(Math::abs)\n\
  \            .sum();\n        if (s == 0) return false;\n        Arrays.sort(l);\n\
  \        for (int i = 0; i < n; i++) {\n            if (l[i] < 0 && l[i + 1] > 0)\
  \ return false;\n        }\n        return true;"
- "        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();\n    \
  \    int sum = 0;\n        for (Integer i : l) {\n            sum += i;\n      \
  \      if (!map.containsKey(sum)) {\n                map.put(sum, 1);\n        \
  \    } else {\n                map.put(sum, map.get(sum) + 1);\n            }\n\
  \        }\n        if (map.size() > 1) {\n            return true;\n        } else\
  \ {\n            return false;\n        }"
- "        HashSet<Integer> hs = new HashSet<>();\n        for (Integer i : l) {\n\
  \            hs.add(i);\n        }\n        for (Integer i : l) {\n            if\
  \ (hs.contains(i)) return true;\n        }\n        return false;"
- "        boolean res = false;\n        for (Integer i : l)\n            for (int\
  \ j = 0; j < l.size(); j++) {\n                int k = j;\n                while\
  \ (j != k && i != l.get(j))\n                    k++;\n                if (i ==\
  \ l.get(j) && (j != k || i != l.get(k)))\n                    res = true;\n    \
  \        }\n        return res;"
- "        int[] arr = l.stream().sorted().toArray();\n        if (arr.length != 2)\
  \ return false;\n        int[] left = new int[arr.length];\n        int[] right\
  \ = new int[arr.length];\n        int leftSum = 0;\n        int rightSum = 0;\n\
  \        for (int i = 0; i < arr.length; i++) {\n            left[i] = arr[i] -\
  \ leftSum;\n            right[i] = arr[i] - rightSum;\n            leftSum += arr[i];\n\
  \            rightSum += arr[i];\n        }\n        int left = left[0];\n     \
  \   int right = right[0];\n        boolean ret = (left == right) && (left == 0);\n\
  \        for (int i = 1; i < arr.length; i++) {\n            left += arr[i];\n \
  \           right += arr[i];\n            ret = ret && (left == right) && (left\
  \ == 0);\n        }\n        return ret;"
- "        boolean firstNonZero=false;\n        boolean secondNonZero=false;\n   \
  \     int firstSum=Integer.MIN_VALUE;\n        int secondSum=Integer.MIN_VALUE;\n\
  \        for(Integer i : l) {\n            if (firstNonZero && !secondNonZero) {\n\
  \                firstSum+=i;\n            } else if (secondNonZero && !firstNonZero)\
  \ {\n                secondSum+=i;\n            } else if (firstNonZero && secondNonZero)\
  \ {\n                if(firstSum==secondSum) {\n                    return true;\n\
  \                }\n            }\n            firstNonZero = firstNonZero || i!=0\
  \ ;\n            secondNonZero = secondNonZero || i!=0;\n        }\n        return\
  \ false;"
- "        for(int i = 0; i <l.size()-2; i++) {\n            if(l.get(i) == l.get(i+2))\
  \ {\n                return true;\n            }\n        }\n        return false;"
- "        HashSet<Integer> set = new HashSet<Integer>(l);\n        for (Integer i\
  \ : l) {\n            int j = l.indexOf(i);\n            if (j != -1) {\n      \
  \          int value = l.get(j);\n                if (!set.contains(value - i))\
  \ {\n                    return false;\n                }\n            }\n     \
  \   }\n        return true;"
- "        return l.stream()\n                .map(x -> x.equals(l.get(l.size()-1)))\n\
  \                .filter(x -> l.stream().map(y -> x + y).distinct().count() > 1).count()\
  \ == 2;"
- "        Set<Integer> set = new HashSet<Integer>(l);\n        Integer zero = null;\n\
  \        for (Integer i : l)\n            if (set.remove(i) && set.contains(Math.abs(i)))\n\
  \                zero = i;\n        return null != zero;"
- "        if (l.size() < 2) {\n            return false;\n        }\n        HashMap<Integer,\
  \ Integer> map = new HashMap<Integer, Integer>();\n        for (int i = 0; i < l.size();\
  \ i++) {\n            if (map.containsKey(l.get(i) - l.get(i-1))) {\n          \
  \      return true;\n            }\n            map.put(l.get(i), 0);\n        }\n\
  \        return false;"
- "        int max = Collections.max(l);\n        int min = Collections.min(l);\n\
  \        int total = max - min + 1;\n        int sum = 0;\n        for (Integer\
  \ i : l) {\n            sum += i;\n            if (sum == 0 || sum == total) {\n\
  \                return true;\n            }\n        }\n        return false;"
- "        long a = 0, b = 0, c = 0;\n        boolean first = true;\n        for (int\
  \ i = 0; i < l.size(); i++) {\n            int x = l.get(i);\n            if (first)\
  \ {\n                a = x;\n                first = false;\n            } else\
  \ {\n                b = x;\n            }\n        }\n        long e = 0;\n   \
  \     for (int i = 0; i < l.size(); i++) {\n            int x = l.get(i);\n    \
  \        if (first) {\n                e = a + x;\n                c = b - x;\n\
  \            } else {\n                e = a + x - c;\n                c = b - x;\n\
  \            }\n            if (e == 0) {\n                return true;\n      \
  \      }\n        }\n        return false;"
- "        Arrays.sort(l);\n        \n        Set<Integer> set = new HashSet<Integer>();\n\
  \        for(int i = 0; i < l.size(); i++) {\n            int n = l.get(i);\n  \
  \          set.add(n);\n        }\n        \n        return set.size() > 1;"
- "        \n        Arrays.sort(l);\n        for(int i=1;i<l.size();i++) {\n    \
  \        if(l.get(i)==l.get(i-1) && l.get(i-1)==0) return true;\n        }\n   \
  \     return false;"
- "        Set<Integer> s = new HashSet<Integer>();\n        l.forEach(x -> {\n  \
  \          if (s.contains(x + l.get(l.indexOf(x)))) {\n                return false;\n\
  \            } else {\n                s.add(x);\n            }\n        });\n \
  \       if (s.size() == 0) {\n            return true;\n        }\n        return\
  \ false;"
- "        if(l.size() < 3)\n            return false;\n        HashMap<Integer, Integer>\
  \ map = new HashMap<Integer, Integer>();\n        for(Integer i : l)\n         \
  \   map.put(i, 0);\n        l.forEach(x -> {\n            Integer tmp = map.get(x);\n\
  \            map.put(x, tmp + 1);\n        });\n        int sum = l.stream().mapToInt(x\
  \ -> map.get(x)).sum();\n        if(sum == 0)\n            return true;\n      \
  \  else\n            return false;"
- "        int len = l.size();\n        int sum = 0;\n        for (int i = 0; i <\
  \ len; i++) {\n            sum += l.get(i);\n        }\n        for (int i = 0;\
  \ i < len; i++) {\n            int value = l.get(i);\n            if (i != 0 &&\
  \ sum != 0) {\n                if (value == l.get(i-1)) return false;\n        \
  \    }\n        }\n        return true;"
- "        Map<Integer, Integer> pairs = new HashMap<>();\n        List<Integer> duplicates\
  \ = new ArrayList<>();\n        for (int i = 0; i < l.size(); i++) {\n         \
  \   Integer first = l.get(i);\n            for (int j = i + 1; j < l.size(); j++)\
  \ {\n                if (l.get(i) == l.get(j)) {\n                    duplicates.add(l.get(i));\n\
  \                    duplicates.add(l.get(j));\n                    pairs.put(first,\
  \ 1);\n                    pairs.put(first, l.get(j));\n                }\n    \
  \            else {\n                    Integer second = l.get(j);\n          \
  \          if (pairs.containsKey(first)) {\n                        Integer add\
  \ = pairs.get(first) + second;\n                        if (pairs.containsKey(second))\
  \ {\n                            pairs.put(second, add);\n                     \
  \       pairs.remove(first);\n                        }\n                      \
  \  else {\n                            pairs.put(second, add);\n               \
  \         }\n                    }\n                    else {\n               \
  \         pairs.put(first, second);\n                    }\n                }\n\
  \            }\n        }\n        return duplicates.isEmpty();"
- "        if (l.size() < 2) return false;\n        int zero = 0;\n        for (int\
  \ i = 0; i < l.size(); ++i) {\n            int x = l.get(i);\n            if (x<0)\
  \ x = -x;\n            int y = 0;\n            while (x != 0) {\n              \
  \  y = y+x;\n                x /= 10;\n            }\n            z = Math.abs(y);\n\
  \            if (z > zero) return false;\n            zero = z;\n        }\n   \
  \     return true;"
- "        List<Integer> pairs = new ArrayList<>();\n        Collections.sort(l);\n\
  \        for (int i = 0; i < l.size() - 1; i++) {\n            int j = i + 1;\n\
  \            while (j < l.size() && l.get(i) == l.get(j)) {\n                j++;\n\
  \            }\n            if (j - i != 1) {\n                pairs.add(new Integer(l.get(i)));\n\
  \                pairs.add(new Integer(l.get(j)));\n            }\n        }\n \
  \       boolean found = false;\n        for (Integer p : pairs) {\n            if\
  \ (p.intValue() == 0) {\n                found = true;\n                break;\n\
  \            }\n        }\n        return found;"
- "        // Complete the function below.\n        return false;"
- "        int k = 0;\n        for(int i = 0; i<l.size()-1; i++) {\n            k\
  \ = k+l.get(i);\n            for(int j=i+1; j<l.size(); j++) {\n               \
  \ if(k == l.get(j)) {\n                    return true;\n                }\n   \
  \         }\n        }\n        return false;"
- "        List<Integer> pairsSumToZero = new ArrayList<Integer>();\n        for (Integer\
  \ a : l) {\n            for (Integer b : l) {\n                if ((a + b) == 0)\
  \ {\n                    pairsSumToZero.add(a);\n                    pairsSumToZero.add(b);\n\
  \                }\n            }\n        }\n        return pairsSumToZero.size()\
  \ > 1;"
- "        HashSet<Integer> s = new HashSet<>();\n        for(Integer x: l){\n   \
  \         if(s.contains(x)){\n                return false;\n            }\n   \
  \         s.add(x);\n        }\n        return true;"
- "        if (l.size() < 2) return false;\n        Arrays.sort(l);\n        int l\
  \ = l.get(0); // l[0] = first element\n        int r = l.get(1); // l[1] = second\
  \ element\n        long ans = 0;\n        for (int i = 2; i < l.size(); i++) {\n\
  \            int next = l.get(i);\n            ans += next * next;\n           \
  \ if (ans <= 0) {\n                // found a pair with a sum of zero\n        \
  \        return true;\n            }\n        }\n        return false;"
- "        int s = 0, c = 0;\n        for (int i : l)\n            if (0 == s) {\n\
  \                s = i;\n                c = 1;\n            }\n            else\
  \ if (s == i)\n                c++;\n            else {\n                return\
  \ false;\n            }\n        return c == 2;"
- "        // write your code here\n        return l.stream().distinct().filter(x\
  \ -> l.stream().filter( y -> Math.abs(y-x)==0).count() == 2).count() == 2;"
- "        int a = l.size();\n        if(a == 0)\n            return false;\n    \
  \    int b = Integer.MIN_VALUE;\n        int count = 0;\n        for(int i = 0;\
  \ i < a - 1; i++) {\n            b = Math.max(b, l.get(i));\n            if(b ==\
  \ 0)\n                count++;\n        }\n        return ((count % 2) == 0);"
- "        int[] arr = new int[l.size()];\n        int j = 0;\n        int sum = 0;\n\
  \        for (int i = 0; i < l.size(); i++) {\n            sum += l.get(i);\n  \
  \          arr[j++] = sum;\n        }\n        int count = 0;\n        for (int\
  \ i = 0; i < arr.length; i++) {\n            if (arr[i] == 0) {\n              \
  \  if (++count == 2) {\n                    return true;\n                }\n  \
  \          }\n        }\n        return false;"
- "        int sum = 0;\n        for (int i = 0; i < l.size(); i++) {\n          \
  \  sum += l.get(i);\n        }\n        return sum > 0;"
- "        if (l.size() < 2) {\n            return false;\n        }\n        Pair<Integer,\
  \ Integer> sumToZero = Pair.create(l.get(0), 0);\n        for (int i = 1; i < l.size();\
  \ i++) {\n            sumToZero = Pair.create(sumToZero, sumToZero.getSecond() +\
  \ l.get(i));\n        }\n        return sumToZero.getSecond() == 0;"
- "        int sum = 0;\n        for(int num : l) {\n            sum += num;\n   \
  \     }\n        boolean twoDiff = false;\n        int first = 0;\n        int second\
  \ = 0;\n        for(int i = 0; i < l.size(); i++) {\n            int sum = l.get(i);\n\
  \            if(sum == 0) return false;\n            if(sum > 0) {\n           \
  \     if(l.get(first) == sum) {\n                    first++;\n                }\
  \ else {\n                    twoDiff = true;\n                    break;\n    \
  \            }\n            } else {\n                if(l.get(second) == sum) {\n\
  \                    second++;\n                } else {\n                    twoDiff\
  \ = true;\n                    break;\n                }\n            }\n      \
  \  }\n        return twoDiff;"
- "        int sum = 0;\n        int two = 0;\n        int three = 0;\n        for\
  \ (int i = 0; i<l.size(); i++) {\n            sum = sum + l.get(i);\n        }\n\
  \        if (sum < 0) {\n            return false;\n        }\n        if (sum ==\
  \ 0) {\n            return true;\n        }\n        for (int i = 0; i<l.size();\
  \ i++) {\n            two = two + l.get(i);\n            if (l.get(i) == 0) {\n\
  \                return false;\n            }\n        }\n        for (int i = 0;\
  \ i<l.size(); i++) {\n            three = three + l.get(i);\n            if (l.get(i)\
  \ == 2) {\n                return false;\n            }\n        }\n        return\
  \ true;"
- "        int n = l.size();\n        // initialize an array that stores all pairs\
  \ whose sum equals to zero\n        int[] a = new int[n];\n        Arrays.fill(a,\
  \ 0, n, -1);\n        // initialize an array that stores all pairs whose sum equals\
  \ to zero\n        int[] b = new int[n];\n        Arrays.fill(b, 0, n, -1);\n  \
  \      // store pairs whose sum equals to zero in a and b\n        for (int i =\
  \ 0; i < n; ++i) {\n            if (a[i] == -1 && a[n-i-1] == -1) {\n          \
  \      a[n-i-1] = l.size() - i;\n                a[n-i] = l.size() - i;\n      \
  \      } else if (b[i] == -1 && b[n-i-1] == -1) {\n                b[n-i-1] = l.size()\
  \ - i;\n                b[n-i] = l.size() - i;\n            } else if (l.size()\
  \ - i < 0) {\n                return false;\n            }\n        }\n        //\
  \ if there is a pair that sum to zero in either array, return True\n        for\
  \ (int i = 0; i < n; ++i) {\n            if (a[i] == b[i]) {\n                return\
  \ true;\n            }\n        }\n        // no pairs sum to zero, return False\n\
  \        return false;"
- "        Collections.sort(l);\n        int[] sums = new int[l.size()];\n       \
  \ int sums_index = 0;\n        for (int i : l) {\n            if (sums_index ==\
  \ sums.length) sums = Arrays.copyOf(sums, 2 * sums.length);\n            sums[sums_index++]\
  \ = i;\n            sums[sums_index++] = -i;\n        }\n\n        return sums[sums_index\
  \ - 1] == 0;"
- "        if (l.size() < 2) return false;\n        int i = 0;\n        int j = 0;\n\
  \        for ( ; i < l.size(); i++) {\n            if (l[i] < 0) continue;\n   \
  \         for ( ; j < l.size(); j++) {\n                if (l[j] < 0) continue;\n\
  \                if (Math.abs(l[i] + l[j]) == 0) return true;\n            }\n \
  \       }\n        return false;"
- "        HashSet<Integer> set = new HashSet<>();\n        l.stream().filter(x ->\
  \ set.add(x + 0)).findFirst().isPresent();\n        return set.isEmpty();"
- "        int[] sum = new int[l.size()];\n        int n = l.size();\n\n        for\
  \ (int i = 0; i < n; i++)\n            sum[i] = l.get(i) + l.get(i + 1);\n\n   \
  \     int k = sum.length - 1;\n        for (int i = 0; i < k; i++)\n           \
  \ if (sum[i] == 0)\n                k = i;\n\n        for (int i = k + 1; i < sum.length;\
  \ i++) {\n            if (sum[i] == 0)\n                return false;\n        }\n\
  \n        return true;"
- "        l.sort(null); // not necessary\n        boolean result = true;\n      \
  \  for (int i = 0; i < l.size() - 1; i++) {\n            int j = i + 1;\n      \
  \      while (j < l.size() && l.get(i) == l.get(j)) {\n                j++;\n  \
  \          }\n            if (j != l.size() - 1 && l.get(i) + l.get(j) == 0) {\n\
  \                result = false;\n                break;\n            }\n      \
  \  }\n        return result;"
- "        int sum = 0;\n        for (int i=0; i < l.size(); i++) {\n            int\
  \ ele = l.get(i);\n            sum += ele;\n        }\n        int count = l.size()\
  \ - 1;\n        for (int i= 0; i < l.size(); i++) {\n            int ele = l.get(i);\n\
  \            if ( sum - ele == 0) {\n                count--;\n            }\n \
  \           sum += ele;\n        }\n        return count == 0;"
- "        // Your code goes here\n        \n        \n        \n        \n      \
  \  \n        \n        return false; "
- "        ArrayList<Integer> l1 = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ l2 = new ArrayList<Integer>();\n        for (int i : l) {\n            l1.add(i);\n\
  \        }\n        for (int i = 0; i < l.size(); i++) {\n            for (int j\
  \ = 0; j < l.size(); j++) {\n                if (i != j && l1.get(i) + l1.get(j)\
  \ == 0) {\n                    l2.add(l.get(i));\n                    l2.add(l.get(j));\n\
  \                }\n            }\n        }\n        return l2.size() == 0;"
- "        HashSet<Integer> set = new HashSet<>();\n        for(Integer i : l) {\n\
  \            set.add(Math.abs(i));\n        }\n        Integer firstSum = set.stream().collect(Collectors.summingInt(Integer::abs)).get();\n\
  \        Integer secondSum = set.stream().collect(Collectors.summingInt(Integer::abs)).get();\n\
  \        return firstSum == 0 && secondSum == 0;"
- "        int[] a = new int[l.size()];\n        int[] b = new int[l.size()];\n  \
  \      for (int i = 0; i < l.size(); i++)\n            a[i] = l.get(i);\n      \
  \  for (int i = 0; i < l.size(); i++)\n            b[i] = l.get(i);\n        for\
  \ (int i = 0; i < l.size(); i++)\n            a[i] += b[i];\n        for (int i\
  \ = l.size() - 1; i >= 0; i--)\n            if (a[i] != 0)\n                return\
  \ false;\n        return true;"
- "        for(int i : l) if(l.indexOf(i) == (l.indexOf(i - 1))) return false;\n \
  \       return true;"
- "        Set<Integer> s = new HashSet<Integer>(l);\n        if (s.contains(Math.abs(l.stream().reduce(Math::abs).orElse(0))))\
  \ \n           return true;\n        return false;"
- "        Set<Integer> mySet = new HashSet<Integer>(l);\n        for (Integer i :\
  \ l)\n            if (mySet.contains(i) && mySet.contains(i + (l.get(mySet.indexOf(i))))\
  \ && mySet.contains(-i - l.get(mySet.indexOf(i + (l.get(mySet.indexOf(i)))))))\n\
  \                return true;\n        return false;"
- "        int[] array = {0, 0, 0, 0};\n        for (int i : l) array[i] += i;\n \
  \       ArrayList<Integer> pairs = new ArrayList<Integer>();\n        for (int i\
  \ = 0; i < array.length; ++i) {\n            for (int j = i + 1; j < array.length;\
  \ ++j) {\n                if (array[i] == 0 && array[j] == 0) pairs.add(i);\n  \
  \              if (array[j] == 0 && array[i] == 0) pairs.add(j);\n            }\n\
  \        }\n        if (pairs.size() == 0) return false;\n        for (Integer i\
  \ : pairs) if (array[i] != 0) return false;\n        return true;"
- "        boolean a = false;\n        for (Integer i : l) {\n            for (Integer\
  \ j : l) {\n                if (i != j && (i + j) == 0) {\n                    a\
  \ = true;\n                    break;\n                }\n            }\n      \
  \  }\n        return a;"
- "        Set<Integer> unique = new HashSet<>();\n        for (int i : l)\n     \
  \       unique.add(i);\n        for (int i : l)\n            if (unique.contains(i))\
  \ return false;\n        return true;"
- "        // Sort first\n        Collections.sort(l);\n        int lo = 0;\n    \
  \    int hi = l.size()-1;\n        while (lo < hi) {\n            int mid = (lo\
  \ + hi) >>> 1;\n            if (l.get(mid) == l.get(lo)) {\n                lo =\
  \ mid+1;\n            } else {\n                hi = mid-1;\n            }\n   \
  \     }\n        return lo == hi;"
- "        Arrays.sort(l);\n        int n1 = l.get(0); // sum of first element to\
  \ zero\n        int n2 = l.get(1); // sum of second element to zero\n        int\
  \ n3 = l.get(2); // sum of third element to zero\n        int n4 = l.get(3); //\
  \ sum of fourth element to zero\n        int n5 = l.get(4); // sum of fifth element\
  \ to zero\n        int n6 = l.get(5); // sum of sixth element to zero\n        int\
  \ n7 = l.get(6); // sum of seventh element to zero\n        int n8 = l.get(7); //\
  \ sum of eighth element to zero\n        int n9 = l.get(8); // sum of ninth element\
  \ to zero\n        int n10 = l.get(9); // sum of tenth element to zero\n       \
  \ if (n1 == n2 && n1 == n3 && n1 == n4 && n1 == n5 && n1 == n6 && n1 == n7 && n1\
  \ == n8 && n1 == n9 && n1 == n10) return true;\n        return false;"
- "        int[] arr = new int[l.size()];\n        for (int i = 0; i < l.size(); i++)\
  \ {\n            arr[i] = l.get(i);\n        }\n        for (int i = 0; i < l.size();\
  \ i++) {\n            for (int j = i + 1; j < l.size(); j++) {\n               \
  \ if (arr[i] + arr[j] == 0) {\n                    return true;\n              \
  \  }\n            }\n        }\n        return false;"
- "        boolean result = false;\n        for (int i = 0; i < l.size() - 1; i++)\
  \ {\n            int j = (i + 1);\n            if (l.get(i) + l.get(j) == 0) {\n\
  \                result = true;\n                break;\n            }\n       \
  \ }\n        return result;"
- "        Arrays.sort(l);\n        Integer prev = l.get(0);\n        for (int i =\
  \ 1; i < l.size(); i++) {\n            Integer current = l.get(i);\n           \
  \ if (current - prev == 0) return false;\n            prev = current;\n        }\n\
  \        return true;"
- "        //\n        HashSet<Integer> set = new HashSet<>();\n        for (int i\
  \ : l) set.add(i);\n        //\n        HashSet<Integer> set1 = new HashSet<>();\n\
  \        for (int i : l) set1.add(-i);\n        //\n        if (set.isEmpty() ||\
  \ set1.isEmpty()) return false;\n        // \n        return set.size() == 2 &&\
  \ set1.size() == 2;"
- "        int a=0;\n        int b=l.size();\n        ArrayList<Integer> list1=new\
  \ ArrayList<Integer>();\n        ArrayList<Integer> list2=new ArrayList<Integer>();\n\
  \        for(int i=0;i<b;i++){\n            list1.add(l.get(i));\n        }\n  \
  \      for(int i=b;i>0;i--){\n            list2.add(l.get(i));\n        }\n    \
  \    list2.remove(0);\n        boolean flag=true;\n        for(int i=0;i<b;i++){\n\
  \            a+=list1.get(i);\n            if(a==0){\n                flag=false;\n\
  \                break;\n            }\n        }\n        for(int i=b;i>0;i--){\n\
  \            a+=list2.get(i);\n            if(a==0){\n                flag=false;\n\
  \                break;\n            }\n        }\n        return flag;"
- '        return l.stream().distinct().anyMatch(i -> l.stream().filter(j -> i + j
  == 0).count() == 2);'
- "        int zero = 0;\n        int n = l.size();\n        int one = n;\n      \
  \  for(int i = 0;i<n;i++) {\n            if(i==0) {\n                one = l.get(i);\n\
  \            }\n            else {\n                if(l.get(i) > 0) {\n       \
  \             if(l.get(i) == one + l.get(i-1)) {\n                        zero++;\n\
  \                        one = l.get(i);\n                    }\n              \
  \  }\n            }\n        }\n        return (n == zero);"
- "        boolean ret = false;\n        for (int i = 0; i < l.size(); i++) {\n  \
  \          for (int j = 0; j < i; j++) {\n                int temp = l.get(i);\n\
  \                if (l.get(j) > 0) {\n                    temp = l.get(j);\n   \
  \             }\n                if (temp == (l.get(i) + l.get(j))) {\n        \
  \            ret = true;\n                }\n            }\n        }\n        return\
  \ ret;"
- "        Integer zero = l.stream().reduce(0l, (x, y) -> x + y);\n        return\
  \ l.stream().distinct().filter(n -> n + 0 == zero).count() == 2;"
- "        int n = l.size();\n        if (n == 0)\n            return true;\n    \
  \    int sum = 0;\n        Arrays.sort(l);\n        for (int i = 0; i < n - 1; i++)\
  \ {\n            if (l.get(i) > l.get(i + 1))\n                sum += l.get(i);\n\
  \        }\n        if (sum != 0)\n            return false;\n        return true;"
- "        HashMap<Integer, Integer> map = new HashMap<>();\n        for (int i :\
  \ l) {\n            map.put(i, map.getOrDefault(i, 0) + 1);\n        }\n       \
  \ return map.values().stream().anyMatch(n -> n == 1);"
- "        Set<Integer> s = new HashSet<Integer>();\n        for(int n: l){\n    \
  \        if(!s.contains(n-s.sum()))\n                s.add(n);\n        }\n    \
  \    return !s.isEmpty();"
- "        int first = l.get(0);\n        for(int i = 1; i < l.size(); i++) {\n  \
  \          int next = l.get(i);\n            boolean isFirst = first == next;\n\
  \            boolean isLast = l.get(l.size() - 1) == next;\n            boolean\
  \ isPair = first != next && first != l.get(0);\n            boolean isSum = next\
  \ == 0;\n            if(isFirst && isLast && isPair && isSum)\n                return\
  \ true;\n        }\n        return false;"
- "        HashSet<Integer> h = new HashSet<>();\n        for(int x:l) {\n       \
  \     h.add(Math.abs(x));\n        }\n        return h.size() == 2;"
- "        int n = l.size();\n        if (n <= 0) {\n            return false;\n \
  \       }\n        // create an array of pairs (x, y), where\n        // x is the\
  \ sum of the first n elements in l,\n        // y is x + l.get (n - 1).\n      \
  \  Pair[] pairs = new Pair[n];\n        for (int i = 0; i < n; i++) {\n        \
  \    pairs[i] = new Pair(l.get(i - 1), l.get(i));\n        }\n        Arrays.sort(pairs);\n\
  \n        // loop through the pairs until you find two elements that sum to zero.\n\
  \        for (int i = 0; i < (n - 1); i++) {\n            int x = pairs[i].x;\n\
  \            int y = pairs[i].y;\n            while (y > 0) {\n                if\
  \ (x + y < 0 || x - y < 0) {\n                    // found two that sum to zero.\
  \ return false.\n                    return false;\n                }\n        \
  \        // add x to the sum and decrement y.\n                y += pairs[(i + 1)\
  \ % n].y;\n                x -= pairs[(i + 1) % n].x;\n            }\n        }\n\
  \        // if we get here then we found two that sum to zero.\n        // return\
  \ true.\n        return true;"
- '        // write your code in Java 11'
- "        ArrayList<Integer> zero = new ArrayList<Integer>();\n        for (int i\
  \ = 0; i < l.size(); i++) {\n            int sum = l.get(i);\n            for (int\
  \ j = i + 1; j < l.size(); j++) {\n                sum += l.get(j);\n          \
  \      if (sum == 0) zero.add(j);\n            }\n        }\n        return zero.size()\
  \ < 2;"
- "        if (l.size() == 0) return false;\n        int x = l.get(0);\n        for\
  \ (int i = 1; i < l.size(); i++) {\n            int y = l.get(i);\n            int\
  \ sum = x+y;\n            if (sum < 0) {\n                x = -sum;\n          \
  \  } else {\n                y = sum;\n            }\n            if (x == y) return\
  \ false;\n        }\n        return true;"
- "        ArrayList<Integer> a = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ b = new ArrayList<Integer>();\n        for (int i = 0; i < l.size(); i++) {\n\
  \            if (l.get(i) >= 0) a.add(l.get(i));\n        }\n        for (int i\
  \ = 0; i < l.size(); i++) {\n            if (l.get(i) < 0) b.add(-l.get(i));\n \
  \       }\n        return pairsSumToZero(a, b);"
- "        int len = l.size();\n        HashSet<Integer> sums = new HashSet<>();\n\
  \        int sum = 0;\n        for(int i=0; i< len; i++) {\n            sum += l.get(i);\n\
  \            if(sums.contains(sum)) {\n                return true;\n          \
  \  }\n            sums.add(sum);\n        }\n        return false;"
- "        for(int i = 0; i < l.size(); i++) {\n            for(int j = i+1; j < l.size();\
  \ j++) {\n                if(l.get(i) + l.get(j) == 0) {\n                    return\
  \ true;\n                }\n            }\n        }\n        return false;"
- "        List<Integer> oneToK = new ArrayList<Integer>(l.size());\n        for(int\
  \ i=0;i<l.size();i++) {\n            oneToK.add(i, l.get(i));\n        }\n     \
  \   int k = 0;\n        for (int i=0;i<oneToK.size()-1;i++) {\n            if (oneToK.get(i)\
  \ + oneToK.get(i+1) > k) {\n                k=oneToK.get(i) + oneToK.get(i+1);\n\
  \            }\n        }\n        for(int i=oneToK.size()-1;i>=0;i--) {\n     \
  \       if (oneToK.get(i) + oneToK.get(i-1) < k) {\n                return false;\n\
  \            }\n        }\n        return true;"
- "        HashSet<Integer> hs = new HashSet<>();\n        HashSet<Integer> hs_notZero\
  \ = new HashSet<>();\n        for(int x :l)\n        {\n            hs.add(x);\n\
  \            hs_notZero.add(-x);\n        }\n        return hs.size() <= hs_notZero.size()\
  \ && hs.equals(hs_notZero);"
- "        int sum = 0;\n        for(int i = 0; i < l.size(); ++i) {\n           \
  \ sum += l.get(i);\n        }\n        for(int i = 0; i < l.size(); ++i) {\n   \
  \         sum += l.get(i);\n            if(sum == 0) {\n                return true;\n\
  \            }\n        }\n        return false;"
- "        Collections.shuffle(l, new Random());\n        int N = l.size();\n    \
  \    int[] a = new int[N];\n        Arrays.fill(a, 0);\n        for (int i = 0;\
  \ i < N; i++) {\n            int sum = 0;\n            for (int j = 0; j < N; j++)\n\
  \                sum += l.get(j);\n            if (i == 0 || sum != 0)\n       \
  \         a[i - 1] = sum;\n            else if (sum != 0)\n                return\
  \ false;\n        }\n        return true;"
- '        return pairs_sum_to_zero(l, new ArrayList<>(), 0);'
- "        if (l.size() < 2) {\n            return false;\n        }\n        HashSet<Integer>\
  \ s = new HashSet<>(l);\n        int last = l.size() - 1;\n        for (int i =\
  \ 0; i < l.size() - 1; i++) {\n            if (s.contains(last)) {\n           \
  \     return true;\n            }\n            s.add(l.get(i));\n        }\n   \
  \     return false;"
- "        boolean pairs = false;\n        int pairs = 0;\n        for (int i = 0;\
  \ i < l.size(); i++) {\n            int value = l.get(i);\n            if (i > 0\
  \ && l.get(i - 1) > 0) {\n                boolean lastIsZero = value % l.get(i-1)\
  \ == 0;\n                if (lastIsZero) {\n                    pairs++;\n     \
  \               if (pairs == 2) {\n                        pairs = true;\n     \
  \               }\n                }\n            }\n        }\n        return pairs;"
- "        // write your code here\n        int n = l.size();\n        for (int i\
  \ = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n          \
  \      if (l.get(i) + l.get(j) == 0) {\n                    return true;\n     \
  \           }\n            }\n        }\n        return false;"
- "        if (l.isEmpty()) {\n            return false;\n        }\n        if (l.size()\
  \ == 1) {\n            return l.contains(1);\n        }\n        Map<Integer, Integer>\
  \ map = new HashMap<Integer, Integer>();\n        for (int i = 0; i < l.size();\
  \ ++i) {\n            Integer j = l.get(i);\n            if (map.containsKey(j))\
  \ {\n                return false;\n            }\n            map.put(j, i);\n\
  \        }\n        return true;"
- "        HashSet<Integer> set = new HashSet<Integer>();\n        for(int i : l){\n\
  \            if(!set.contains(i) && set.size() != 0){\n                return false;\n\
  \            }\n            if(i == 0){\n                return true;\n        \
  \    }\n            set.add(Math.abs(i));\n        }\n        return false;"
- "        return l.stream().collect(Collectors.groupingBy(Function.identity(), Collectors.counting())).entrySet().stream()\n\
  \                .anyMatch(e -> e.getValue() == 1 && e.getKey().stream().filter(n\
  \ -> n == 0 || n == -e.getKey().stream().reduce(0, Integer::sum)).count() == 1);"
- '        return Arrays.asList(l.stream().filter(x -> l.contains(x - x))).stream().anyMatch(
  x -> x.equals(0));'
- "        return l.stream().collect(Collectors.groupingBy(\n            i -> Math.abs(i),\n\
  \            Collectors.counting()\n        ))\n            .values()\n        \
  \    .stream()\n            .map(count -> count.intValue() > 1)\n            .any();"
- "        // TODO: For extra credit, use a stream instead of iterating through\n\
  \        // the list to find the two elements.\n        HashMap<Integer, Integer>\
  \ pairs = new HashMap<Integer, Integer>();\n        for(int i = 0; i < l.size();\
  \ i += 2) {\n            pairs.put(l.get(i), l.get(i + 1));\n        }\n\n     \
  \   return pairs.size() > 1;"
- "        return l.stream().filter(x -> 0 != x - l.get(x)).distinct().count() ==\
  \ 2\n                && l.stream().allMatch(x -> 0 == x + l.get(x));"
- "        return l.stream().collect(Collectors.toList()).stream().collect(Collectors.toSet()).stream()\n\
  \                .allMatch(t -> Math.abs(t.get(0)) == Math.abs(t.get(1)) && t.get(0)\
  \ == 0);"
- "        HashMap<Integer, Integer> sumToZeroMap = new HashMap<>();\n        Arrays.stream(l).forEach((Integer\
  \ e) -> {\n            if (sumToZeroMap.containsKey(e - 1)) {\n                sumToZeroMap.put(e,\
  \ sumToZeroMap.get(e) - 1);\n            } else {\n                sumToZeroMap.put(e,\
  \ 1);\n            }\n        });\n\n        return sumToZeroMap.size() == 2;"
- "        // write your code here\n        ArrayList<Integer> newl = new ArrayList<Integer>();\n\
  \        Set<Integer> set = new HashSet<Integer>();\n\n        for (Integer i :\
  \ l) {\n            int j = i;\n            while (j != 0) {\n                if\
  \ (j % 2 == 0) {\n                    j = (j - 2) / 2;\n                }\n    \
  \            else {\n                    j = (j - 1) / 2;\n                }\n \
  \           }\n            set.add(j);\n        }\n        if (set.size() == 1)\
  \ {\n            newl.addAll(l);\n        }\n        else if (set.size() == 2) {\n\
  \            return true;\n        }\n        return false;"
language: java
name: HumanEval_43_pairs_sum_to_zero
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // pairs_sum_to_zero takes a list of integers as an input.\n\
  \    // it returns True if there are two distinct elements in the list that\n  \
  \  // sum to zero, and False otherwise.\n    // >>> pairs_sum_to_zero([1, 3, 5,\
  \ 0])\n    // False\n    // >>> pairs_sum_to_zero([1, 3, -2, 1])\n    // False\n\
  \    // >>> pairs_sum_to_zero([1, 2, 3, 7])\n    // False\n    // >>> pairs_sum_to_zero([2,\
  \ 4, -5, 3, 5, 7])\n    // True\n    // >>> pairs_sum_to_zero([1])\n    // False\n\
  \    public static boolean pairsSumToZero(ArrayList<Integer> l) {\n"
stop_tokens:
- "    }\n    //"
- "    }\n    p"
- '    }

  }'
- "\n    }\n"
tests: "}\n    public static void main(String[] args) {\n    assert(pairsSumToZero((new\
  \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)5, (int)0)))) == (false));\n\
  \    assert(pairsSumToZero((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
  \ (int)-2, (int)1)))) == (false));\n    assert(pairsSumToZero((new ArrayList<Integer>(Arrays.asList((int)1,\
  \ (int)2, (int)3, (int)7)))) == (false));\n    assert(pairsSumToZero((new ArrayList<Integer>(Arrays.asList((int)2,\
  \ (int)4, (int)-5, (int)3, (int)5, (int)7)))) == (true));\n    assert(pairsSumToZero((new\
  \ ArrayList<Integer>(Arrays.asList((int)1)))) == (false));\n    assert(pairsSumToZero((new\
  \ ArrayList<Integer>(Arrays.asList((int)-3, (int)9, (int)-1, (int)3, (int)2, (int)30))))\
  \ == (true));\n    assert(pairsSumToZero((new ArrayList<Integer>(Arrays.asList((int)-3,\
  \ (int)9, (int)-1, (int)3, (int)2, (int)31)))) == (true));\n    assert(pairsSumToZero((new\
  \ ArrayList<Integer>(Arrays.asList((int)-3, (int)9, (int)-1, (int)4, (int)2, (int)30))))\
  \ == (false));\n    assert(pairsSumToZero((new ArrayList<Integer>(Arrays.asList((int)-3,\
  \ (int)9, (int)-1, (int)4, (int)2, (int)31)))) == (false));\n    }\n\n}\n"
