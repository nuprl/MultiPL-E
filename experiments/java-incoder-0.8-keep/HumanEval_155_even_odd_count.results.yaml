language: java
name: HumanEval_155_even_odd_count
results:
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        // base cases\n        if (num < 0)\
    \ {\n            return Pair.of(0, 1);\n        }\n        if (num == 0) {\n \
    \           return Pair.of(0, 0);\n        }\n\n        // recursive case\n  \
    \      int[] digits = convertToArray(num);\n        int count = 0;\n        for\
    \ (int i = 0; i < digits.length; i++) {\n            if (digits[i] % 2 == 0) {\n\
    \                count++;\n            } else {\n                count--;\n  \
    \          }\n        }\n        return Pair.of(count, digits.length - count);\n\
    }\n    public static void main(String[] args) {\n    assert(evenOddCount((7)).equals((Pair.with(0,\
    \ 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1, 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2,\
    \ 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3, 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmprhkh3uou.java:16: error: cannot find symbol\n            return\
    \ Pair.of(0, 1);\n                       ^\n  symbol:   method of(int,int)\n \
    \ location: class Pair\n/tmp/tmprhkh3uou.java:19: error: cannot find symbol\n\
    \            return Pair.of(0, 0);\n                       ^\n  symbol:   method\
    \ of(int,int)\n  location: class Pair\n/tmp/tmprhkh3uou.java:23: error: cannot\
    \ find symbol\n        int[] digits = convertToArray(num);\n                 \
    \      ^\n  symbol:   method convertToArray(int)\n  location: class Problem\n\
    /tmp/tmprhkh3uou.java:32: error: cannot find symbol\n        return Pair.of(count,\
    \ digits.length - count);\n                   ^\n  symbol:   method of(int,int)\n\
    \  location: class Pair\n4 errors\n"
  stdout: ''
  timestamp: 1660011180
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        // Your code here\n        Pair<Integer,\
    \ Integer> even = new Pair<>(0,0);\n        Pair<Integer, Integer> odd = new Pair<>(0,0);\n\
    \        \n        for(int i=0;i<=num;i++){\n            if(i%2 == 0){\n     \
    \           even.first++;\n            }\n            if(i%2 != 0){\n        \
    \        odd.first++;\n            }\n        }\n        \n        return new\
    \ Pair<>(even, odd);\n}\n    public static void main(String[] args) {\n    assert(evenOddCount((7)).equals((Pair.with(0,\
    \ 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1, 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2,\
    \ 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3, 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmppr_l0fof.java:20: error: cannot find symbol\n                even.first++;\n\
    \                    ^\n  symbol:   variable first\n  location: variable even\
    \ of type Pair<Integer,Integer>\n/tmp/tmppr_l0fof.java:23: error: cannot find\
    \ symbol\n                odd.first++;\n                   ^\n  symbol:   variable\
    \ first\n  location: variable odd of type Pair<Integer,Integer>\n/tmp/tmppr_l0fof.java:27:\
    \ error: incompatible types: cannot infer type arguments for Pair<>\n        return\
    \ new Pair<>(even, odd);\n                       ^\n    reason: inference variable\
    \ A has incompatible bounds\n      equality constraints: Integer\n      lower\
    \ bounds: Pair<Integer,Integer>\n  where A is a type-variable:\n    A extends\
    \ Object declared in class Pair\n3 errors\n"
  stdout: ''
  timestamp: 1660011180
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        if(num == 0){\n            return\
    \ new Pair<>(1,0);\n        }\n        else if(num % 2 == 0) {\n            return\
    \ new Pair<>(1,0);\n        }\n        else {\n            int countEven = 0;\n\
    \            int countOdd = 0;\n            while (num != 0) {\n             \
    \   if (num % 2 == 0) {\n                    countEven++;\n                }\n\
    \                else {\n                    countOdd++;\n                }\n\
    \                num /= 10;\n            }\n            return new Pair<>(countEven,\
    \ countOdd);\n        }\n}\n    public static void main(String[] args) {\n   \
    \ assert(evenOddCount((7)).equals((Pair.with(0, 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1,\
    \ 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2, 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3, 3))));\n   \
    \ assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: 'Error: Unable to initialize main class Problem

    Caused by: java.lang.NoClassDefFoundError: org/javatuples/Pair

    '
  stdout: ''
  timestamp: 1660011181
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        if (num == 0) {\n            return\
    \ new Pair<>(0,0);\n        }\n        if (num < 0) {\n            return new\
    \ Pair<>(0,0);\n        }\n        int n = Integer.highestOneBit(num);\n     \
    \   if (n == 0) {\n            return new Pair<>(0,0);\n        }\n\n        int\
    \ remaining = num - n;\n        int odd = 0, even = 0;\n\n        if (num > 0)\
    \ {\n            int quotient = num / n;\n            if (quotient > 0) {\n  \
    \              even += quotient;\n                num -= n * quotient;\n     \
    \       }\n            if (num > 0) {\n                num -= n * remaining =\
    \ num;\n            }\n            odd += num;\n        }\n\n        if (even\
    \ > 0 && odd > 0) {\n            return new Pair<>(even, odd);\n        }\n  \
    \      return new Pair<>(0,0);\n}\n    public static void main(String[] args)\
    \ {\n    assert(evenOddCount((7)).equals((Pair.with(0, 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1,\
    \ 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2, 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3, 3))));\n   \
    \ assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp6crpxy0d.java:35: error: unexpected type\n                num -=\
    \ n * remaining = num;\n                         ^\n  required: variable\n  found:\
    \    value\n1 error\n"
  stdout: ''
  timestamp: 1660011180
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        int odd = 1;\n        int even = 0;\n\
    \        while (odd <= 9 && num != 0) {\n            int tmp = num % 10;\n   \
    \         even = even * 10 + (tmp % 2);\n            num = num / 10;\n       \
    \     odd = odd * 10 + tmp / 2;\n        }\n        return new Pair<>(even, odd);\n\
    }\n    public static void main(String[] args) {\n    assert(evenOddCount((7)).equals((Pair.with(0,\
    \ 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1, 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2,\
    \ 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3, 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: 'Error: Unable to initialize main class Problem

    Caused by: java.lang.NoClassDefFoundError: org/javatuples/Pair

    '
  stdout: ''
  timestamp: 1660011181
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        \n        int numDig = num.toString().length();\n\
    \        int evenDig = 0;\n        int oddDig = 0;\n        \n        if (numDig\
    \ %2 == 0) {\n            evenDig = numDig/2;\n            oddDig = numDig-evenDig;\n\
    \        } \n        else {\n            oddDig = numDig/2;\n            evenDig\
    \ = numDig-oddDig;\n        }\n        \n        return Pair.create(evenDig, oddDig);\n\
    }\n    public static void main(String[] args) {\n    assert(evenOddCount((7)).equals((Pair.with(0,\
    \ 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1, 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2,\
    \ 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3, 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp5imeh550.java:15: error: int cannot be dereferenced\n        int\
    \ numDig = num.toString().length();\n                        ^\n/tmp/tmp5imeh550.java:28:\
    \ error: cannot find symbol\n        return Pair.create(evenDig, oddDig);\n  \
    \                 ^\n  symbol:   method create(int,int)\n  location: class Pair\n\
    2 errors\n"
  stdout: ''
  timestamp: 1660011180
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        // base case (no odd or even)\n  \
    \      if (num < 0) {\n            return new Pair<Integer, Integer>(-1, 0);\n\
    \        }\n\n        // if num has only 1 digit, we return it as is.\n      \
    \  if (num < 10) {\n            return new Pair<Integer, Integer>(num, 1);\n \
    \       }\n\n        // find even number of digits\n        int even = 0;\n  \
    \      while (num >= 10) {\n            num /= 10;\n            even++;\n    \
    \    }\n\n        // find the odd number of digits\n        int odd = 0;\n   \
    \     while (num > 0) {\n            num /= 10;\n            odd++;\n        }\n\
    \n        return new Pair<Integer, Integer>(even, odd);\n}\n    public static\
    \ void main(String[] args) {\n    assert(evenOddCount((7)).equals((Pair.with(0,\
    \ 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1, 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2,\
    \ 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3, 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: 'Error: Unable to initialize main class Problem

    Caused by: java.lang.NoClassDefFoundError: org/javatuples/Pair

    '
  stdout: ''
  timestamp: 1660011181
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        if (num < 0) {\n            return\
    \ new Pair<>(0, 0);\n        }\n\n        List<Integer> oddNumbers = new ArrayList<>();\n\
    \        List<Integer> evenNumbers = new ArrayList<>();\n\n        while (num\
    \ >= 0) {\n            int digit = num % 10;\n            int counter = 0;\n \
    \           if (digit % 2 != 0) {\n                counter++;\n            }\n\
    \n            digit = num / 10;\n            if (digit % 2 != 0) {\n         \
    \       counter++;\n            }\n            num = num / 10;\n            if\
    \ (num < 0) {\n                break;\n            }\n\n            evenNumbers.add(digit);\n\
    \            oddNumbers.add(counter);\n        }\n        return new Pair<>(evenNumbers.size(),\
    \ oddNumbers.size());\n}\n    public static void main(String[] args) {\n    assert(evenOddCount((7)).equals((Pair.with(0,\
    \ 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1, 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2,\
    \ 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3, 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: 'Error: Unable to initialize main class Problem

    Caused by: java.lang.NoClassDefFoundError: org/javatuples/Pair

    '
  stdout: ''
  timestamp: 1660011181
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        int odd = 0, even = 0;\n        int\
    \ div = 1;\n        int remainder = num;\n        while (div <= num) {\n     \
    \       if (num % div == 0) {\n                even++;\n            } else {\n\
    \                odd++;\n            }\n            div++;\n        }\n      \
    \  return new Pair<Integer, Integer>(odd, even);\n}\n    public static void main(String[]\
    \ args) {\n    assert(evenOddCount((7)).equals((Pair.with(0, 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1,\
    \ 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2, 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3, 3))));\n   \
    \ assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: 'Error: Unable to initialize main class Problem

    Caused by: java.lang.NoClassDefFoundError: org/javatuples/Pair

    '
  stdout: ''
  timestamp: 1660011181
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        Pair<Integer, Integer> even = new\
    \ Pair<>(num / 10, num % 10);\n        Pair<Integer, Integer> odd = new Pair<>();\n\
    \        for (int i = num; i > 0; i = i / 10) {\n            odd.addAll(even,\
    \ new Pair<>(i / 10, i % 10));\n        }\n        return Pair.of(even.second.sum(),\
    \ odd.second.sum());\n}\n    public static void main(String[] args) {\n    assert(evenOddCount((7)).equals((Pair.with(0,\
    \ 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1, 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2,\
    \ 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3, 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp18xaokrg.java:15: error: cannot infer type arguments for Pair<>\n\
    \        Pair<Integer, Integer> odd = new Pair<>();\n                        \
    \             ^\n  reason: cannot infer type-variable(s) A,B\n    (actual and\
    \ formal argument lists differ in length)\n  where A,B are type-variables:\n \
    \   A extends Object declared in class Pair\n    B extends Object declared in\
    \ class Pair\n/tmp/tmp18xaokrg.java:17: error: cannot find symbol\n          \
    \  odd.addAll(even, new Pair<>(i / 10, i % 10));\n               ^\n  symbol:\
    \   method addAll(Pair<Integer,Integer>,Pair<Integer,Integer>)\n  location: variable\
    \ odd of type Pair<Integer,Integer>\n/tmp/tmp18xaokrg.java:19: error: cannot find\
    \ symbol\n        return Pair.of(even.second.sum(), odd.second.sum());\n     \
    \                      ^\n  symbol:   variable second\n  location: variable even\
    \ of type Pair<Integer,Integer>\n/tmp/tmp18xaokrg.java:19: error: cannot find\
    \ symbol\n        return Pair.of(even.second.sum(), odd.second.sum());\n     \
    \                                        ^\n  symbol:   variable second\n  location:\
    \ variable odd of type Pair<Integer,Integer>\n4 errors\n"
  stdout: ''
  timestamp: 1660011180
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        int even = 0;\n        int odd = 0;\n\
    \        while (num >= 0) {\n            int digit = num % 10;\n            if\
    \ (digit % 2 == 0) {\n                even++;\n            } else {\n        \
    \        odd++;\n            }\n            num = num / 10;\n        }\n     \
    \   return new Pair<>(even, odd);\n}\n    public static void main(String[] args)\
    \ {\n    assert(evenOddCount((7)).equals((Pair.with(0, 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1,\
    \ 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2, 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3, 3))));\n   \
    \ assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: 'Error: Unable to initialize main class Problem

    Caused by: java.lang.NoClassDefFoundError: org/javatuples/Pair

    '
  stdout: ''
  timestamp: 1660011181
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        // write your code in Java 7\n   \
    \     // write your code in Java 8\n        // write your code in Java 9\n   \
    \     // write your code in Java 10\n        int even = 0;\n        int odd =\
    \ 0;\n        int x = 0;\n        int y = 0;\n        while(num > 0) {\n     \
    \       x = num % 10;\n            y = num % 10;\n            num = num / 10;\n\
    \            if (x%2 == 0 && y%2 == 0) {\n                even++;\n          \
    \  } else if(x%2 != 0 && y%2 != 0) {\n                odd++;\n            }\n\
    \        }\n        Pair ret = new Pair<Integer, Integer>(even, odd);\n      \
    \  return ret;\n}\n    public static void main(String[] args) {\n    assert(evenOddCount((7)).equals((Pair.with(0,\
    \ 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1, 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2,\
    \ 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3, 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: 'Error: Unable to initialize main class Problem

    Caused by: java.lang.NoClassDefFoundError: org/javatuples/Pair

    '
  stdout: ''
  timestamp: 1660011181
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        // Using a list to store and filter\
    \ even and odd digits separately\n        List<Integer> even = new ArrayList<>();\n\
    \        List<Integer> odd = new ArrayList<>();\n        for(int i = 0; i <= Math.sqrt(num);\
    \ i++){\n            if(num % i == 0)\n                even.add(i);\n        \
    \    else if(num % i != 0)\n                odd.add(i);\n        }\n        //\
    \ Using a pair to return\n        return Pair.of(even.size(), odd.size());\n}\n\
    \    public static void main(String[] args) {\n    assert(evenOddCount((7)).equals((Pair.with(0,\
    \ 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1, 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2,\
    \ 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3, 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp768aw_3x.java:24: error: cannot find symbol\n        return Pair.of(even.size(),\
    \ odd.size());\n                   ^\n  symbol:   method of(int,int)\n  location:\
    \ class Pair\n1 error\n"
  stdout: ''
  timestamp: 1660011180
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        Pair<Integer, Integer> even = new\
    \ Pair<Integer, Integer>();\n        Pair<Integer, Integer> odd = new Pair<Integer,\
    \ Integer>();\n        if (num < 0) {\n            odd = new Pair<Integer, Integer>();\n\
    \        }\n        if (num == 0) {\n            return even;\n        }\n   \
    \     int digit = num % 10;\n        if (digit == 0) {\n            even.first++;\n\
    \        } else {\n            odd.first++;\n        }\n        while (true) {\n\
    \            num = num / 10;\n            digit = num % 10;\n            if (digit\
    \ == 0) {\n                even.second++;\n            } else {\n            \
    \    odd.second++;\n            }\n        }\n        if (odd.first > odd.second)\
    \ {\n            return odd;\n        } else {\n            return even;\n   \
    \     }\n}\n    public static void main(String[] args) {\n    assert(evenOddCount((7)).equals((Pair.with(0,\
    \ 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1, 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2,\
    \ 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3, 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpo6_337rc.java:14: error: constructor Pair in class Pair<A,B> cannot\
    \ be applied to given types;\n        Pair<Integer, Integer> even = new Pair<Integer,\
    \ Integer>();\n                                      ^\n  required: Integer,Integer\n\
    \  found:    no arguments\n  reason: actual and formal argument lists differ in\
    \ length\n  where A,B are type-variables:\n    A extends Object declared in class\
    \ Pair\n    B extends Object declared in class Pair\n/tmp/tmpo6_337rc.java:15:\
    \ error: constructor Pair in class Pair<A,B> cannot be applied to given types;\n\
    \        Pair<Integer, Integer> odd = new Pair<Integer, Integer>();\n        \
    \                             ^\n  required: Integer,Integer\n  found:    no arguments\n\
    \  reason: actual and formal argument lists differ in length\n  where A,B are\
    \ type-variables:\n    A extends Object declared in class Pair\n    B extends\
    \ Object declared in class Pair\n/tmp/tmpo6_337rc.java:17: error: constructor\
    \ Pair in class Pair<A,B> cannot be applied to given types;\n            odd =\
    \ new Pair<Integer, Integer>();\n                  ^\n  required: Integer,Integer\n\
    \  found:    no arguments\n  reason: actual and formal argument lists differ in\
    \ length\n  where A,B are type-variables:\n    A extends Object declared in class\
    \ Pair\n    B extends Object declared in class Pair\n/tmp/tmpo6_337rc.java:24:\
    \ error: cannot find symbol\n            even.first++;\n                ^\n  symbol:\
    \   variable first\n  location: variable even of type Pair<Integer,Integer>\n\
    /tmp/tmpo6_337rc.java:26: error: cannot find symbol\n            odd.first++;\n\
    \               ^\n  symbol:   variable first\n  location: variable odd of type\
    \ Pair<Integer,Integer>\n/tmp/tmpo6_337rc.java:32: error: cannot find symbol\n\
    \                even.second++;\n                    ^\n  symbol:   variable second\n\
    \  location: variable even of type Pair<Integer,Integer>\n/tmp/tmpo6_337rc.java:34:\
    \ error: cannot find symbol\n                odd.second++;\n                 \
    \  ^\n  symbol:   variable second\n  location: variable odd of type Pair<Integer,Integer>\n\
    /tmp/tmpo6_337rc.java:37: er"
  stdout: ''
  timestamp: 1660011180
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        if (num == 0)\n            return\
    \ null;\n\n        double num1 = Math.log10(num);\n        int count = 0;\n\n\
    \        while (num1 != Math.log10(num)) {\n            num1 = Math.log10(num);\n\
    \            count++;\n        }\n        if (num % 2 == 0)\n            count++;\n\
    \        return new Pair<Integer, Integer>(count, num - count + 1);\n}\n    public\
    \ static void main(String[] args) {\n    assert(evenOddCount((7)).equals((Pair.with(0,\
    \ 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1, 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2,\
    \ 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3, 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: 'Error: Unable to initialize main class Problem

    Caused by: java.lang.NoClassDefFoundError: org/javatuples/Pair

    '
  stdout: ''
  timestamp: 1660011181
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        Pair<Integer, Integer> result = new\
    \ Pair<>();\n        while(num != 0) {\n            int remainder = num % 10;\n\
    \            result.first = result.first * 10 + remainder;\n            result.second\
    \ = result.second * 10 + remainder / 10;\n            num = num / 10;\n      \
    \  }\n        return result;\n}\n    public static void main(String[] args) {\n\
    \    assert(evenOddCount((7)).equals((Pair.with(0, 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1,\
    \ 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2, 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3, 3))));\n   \
    \ assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpiv_ftxs3.java:14: error: cannot infer type arguments for Pair<>\n\
    \        Pair<Integer, Integer> result = new Pair<>();\n                     \
    \                   ^\n  reason: cannot infer type-variable(s) A,B\n    (actual\
    \ and formal argument lists differ in length)\n  where A,B are type-variables:\n\
    \    A extends Object declared in class Pair\n    B extends Object declared in\
    \ class Pair\n/tmp/tmpiv_ftxs3.java:17: error: cannot find symbol\n          \
    \  result.first = result.first * 10 + remainder;\n                  ^\n  symbol:\
    \   variable first\n  location: variable result of type Pair<Integer,Integer>\n\
    /tmp/tmpiv_ftxs3.java:17: error: cannot find symbol\n            result.first\
    \ = result.first * 10 + remainder;\n                                 ^\n  symbol:\
    \   variable first\n  location: variable result of type Pair<Integer,Integer>\n\
    /tmp/tmpiv_ftxs3.java:18: error: cannot find symbol\n            result.second\
    \ = result.second * 10 + remainder / 10;\n                  ^\n  symbol:   variable\
    \ second\n  location: variable result of type Pair<Integer,Integer>\n/tmp/tmpiv_ftxs3.java:18:\
    \ error: cannot find symbol\n            result.second = result.second * 10 +\
    \ remainder / 10;\n                                  ^\n  symbol:   variable second\n\
    \  location: variable result of type Pair<Integer,Integer>\n5 errors\n"
  stdout: ''
  timestamp: 1660011180
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        return IntStream.range(num / 10, num\
    \ / 10 + 9).filter(x -> x % 2 == 0).count() * num / 10 + IntStream.range(num %\
    \ 10, num / 10).filter(x -> x % 2 != 0).count();\n}\n    public static void main(String[]\
    \ args) {\n    assert(evenOddCount((7)).equals((Pair.with(0, 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1,\
    \ 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2, 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3, 3))));\n   \
    \ assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpeqk6k2eb.java:14: error: incompatible types: long cannot be converted\
    \ to Pair<Integer,Integer>\n        return IntStream.range(num / 10, num / 10\
    \ + 9).filter(x -> x % 2 == 0).count() * num / 10 + IntStream.range(num % 10,\
    \ num / 10).filter(x -> x % 2 != 0).count();\n                               \
    \                                                                   ^\n1 error\n"
  stdout: ''
  timestamp: 1660011180
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        List<Integer> evenDigits = Arrays.stream(num).filter(i\
    \ -> i % 2 == 0).boxed().collect(Collectors.toList());\n        List<Integer>\
    \ oddDigits = Arrays.stream(num).filter(i -> i % 2 != 0).boxed().collect(Collectors.toList());\n\
    \        return Pair.of(evenDigits.size(), oddDigits.size());\n}\n    public static\
    \ void main(String[] args) {\n    assert(evenOddCount((7)).equals((Pair.with(0,\
    \ 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1, 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2,\
    \ 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3, 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpl1q2qizi.java:14: error: no suitable method found for stream(int)\n\
    \        List<Integer> evenDigits = Arrays.stream(num).filter(i -> i % 2 == 0).boxed().collect(Collectors.toList());\n\
    \                                         ^\n    method Arrays.<T#1>stream(T#1[])\
    \ is not applicable\n      (cannot infer type-variable(s) T#1\n        (argument\
    \ mismatch; int cannot be converted to T#1[]))\n    method Arrays.<T#2>stream(T#2[],int,int)\
    \ is not applicable\n      (cannot infer type-variable(s) T#2\n        (actual\
    \ and formal argument lists differ in length))\n    method Arrays.stream(int[])\
    \ is not applicable\n      (argument mismatch; int cannot be converted to int[])\n\
    \    method Arrays.stream(long[]) is not applicable\n      (argument mismatch;\
    \ int cannot be converted to long[])\n    method Arrays.stream(double[]) is not\
    \ applicable\n      (argument mismatch; int cannot be converted to double[])\n\
    \  where T#1,T#2 are type-variables:\n    T#1 extends Object declared in method\
    \ <T#1>stream(T#1[])\n    T#2 extends Object declared in method <T#2>stream(T#2[],int,int)\n\
    /tmp/tmpl1q2qizi.java:15: error: no suitable method found for stream(int)\n  \
    \      List<Integer> oddDigits = Arrays.stream(num).filter(i -> i % 2 != 0).boxed().collect(Collectors.toList());\n\
    \                                        ^\n    method Arrays.<T#1>stream(T#1[])\
    \ is not applicable\n      (cannot infer type-variable(s) T#1\n        (argument\
    \ mismatch; int cannot be converted to T#1[]))\n    method Arrays.<T#2>stream(T#2[],int,int)\
    \ is not applicable\n      (cannot infer type-variable(s) T#2\n        (actual\
    \ and formal argument lists differ in length))\n    method Arrays.stream(int[])\
    \ is not applicable\n      (argument mismatch; int cannot be converted to int[])\n\
    \    method Arrays.stream(long[]) is not applicable\n      (argument mismatch;\
    \ int cannot be converted to long[])\n    method Arrays.stream(double[]) is not\
    \ applicable\n      (argument mismatch; int cannot be converted to double[])\n\
    \  where T#1,T#2 are type-variables:\n    T#1 extends Object declared in method\
    \ <T#1>stream(T#1["
  stdout: ''
  timestamp: 1660011181
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        if (num == 0)\n            return\
    \ new Pair<>(0, 0);\n        int even = 0;\n        int odd = 0;\n        while(num\
    \ > 0) {\n            int remainder = num % 10;\n            if (remainder % 2\
    \ == 0) {\n                even++;\n            }\n            num = num / 10;\n\
    \        }\n        while(num > 0) {\n            int remainder = num % 10;\n\
    \            if (remainder % 2 != 0) {\n                odd++;\n            }\n\
    \            num = num / 10;\n        }\n        return new Pair<>(even, odd);\n\
    }\n    public static void main(String[] args) {\n    assert(evenOddCount((7)).equals((Pair.with(0,\
    \ 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1, 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2,\
    \ 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3, 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: 'Error: Unable to initialize main class Problem

    Caused by: java.lang.NoClassDefFoundError: org/javatuples/Pair

    '
  stdout: ''
  timestamp: 1660011181
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        if (num <= 0)\n            return\
    \ new Pair<>(0, 0);\n        String[] strNum = num.toString().split(\"\");\n \
    \       int evenCount = 0;\n        int oddCount = 0;\n        for (int i = 0;\
    \ i < strNum.length; i++) {\n            if (i % 2 == 0) {\n                evenCount++;\n\
    \            } else {\n                oddCount++;\n            }\n        }\n\
    \        return new Pair<>(evenCount, oddCount);\n}\n    public static void main(String[]\
    \ args) {\n    assert(evenOddCount((7)).equals((Pair.with(0, 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1,\
    \ 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2, 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3, 3))));\n   \
    \ assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpi93gweqf.java:16: error: int cannot be dereferenced\n        String[]\
    \ strNum = num.toString().split(\"\");\n                             ^\n1 error\n"
  stdout: ''
  timestamp: 1660011180
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        int even = 0, odd = 0;\n        while\
    \ (num > 0) {\n            int digit = num % 10;\n            if (digit % 2 ==\
    \ 0) {\n                even++;\n            } else {\n                odd++;\n\
    \            }\n            num /= 10;\n        }\n        return Pair.of(even,\
    \ odd);\n}\n    public static void main(String[] args) {\n    assert(evenOddCount((7)).equals((Pair.with(0,\
    \ 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1, 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2,\
    \ 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3, 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpo7u1ieod.java:24: error: cannot find symbol\n        return Pair.of(even,\
    \ odd);\n                   ^\n  symbol:   method of(int,int)\n  location: class\
    \ Pair\n1 error\n"
  stdout: ''
  timestamp: 1660011180
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        int countEven = 0, countOdd = 0;\n\
    \        for(int i=0;i<num;i++) {\n            if(num % 2 == 0)\n            \
    \    countEven++;\n            else {\n                countOdd++;\n         \
    \       num -= num % 2;\n            }\n        }\n        return new Pair<>(countEven,\
    \ countOdd);\n}\n    public static void main(String[] args) {\n    assert(evenOddCount((7)).equals((Pair.with(0,\
    \ 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1, 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2,\
    \ 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3, 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: 'Error: Unable to initialize main class Problem

    Caused by: java.lang.NoClassDefFoundError: org/javatuples/Pair

    '
  stdout: ''
  timestamp: 1660011181
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        int evenCount = 0;\n        int oddCount\
    \ = 0;\n        if (num < 0) {\n            num = -num;\n        }\n        num\
    \ = Math.abs(num);\n        int digits = 0;\n        while (num > 0) {\n     \
    \       digits++;\n            num = num / 10;\n        }\n        // System.out.println(\"\
    Digits: \" + digits);\n        int startOfNum = digits - 1;\n        if (startOfNum\
    \ > 0) {\n            startOfNum--;\n        }\n        // System.out.println(\"\
    Start of num: \" + startOfNum);\n        num = Math.abs(num);\n        while (startOfNum\
    \ > 0) {\n            int temp = num % 10;\n            if (temp % 2 == 0) {\n\
    \                evenCount++;\n            } else {\n                oddCount++;\n\
    \            }\n            num = num / 10;\n            startOfNum--;\n     \
    \   }\n        // System.out.println(\"ODD count: \" + oddCount);\n        //\
    \ System.out.println(\"EVEN count: \" + evenCount);\n        return Pair.of(evenCount,\
    \ oddCount);\n}\n    public static void main(String[] args) {\n    assert(evenOddCount((7)).equals((Pair.with(0,\
    \ 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1, 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2,\
    \ 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3, 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp064w12kv.java:44: error: cannot find symbol\n        return Pair.of(evenCount,\
    \ oddCount);\n                   ^\n  symbol:   method of(int,int)\n  location:\
    \ class Pair\n1 error\n"
  stdout: ''
  timestamp: 1660011180
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        Pair<Integer, Integer> tuple = new\
    \ Pair<>();\n        // int odd_count = 0;\n        // int even_count = 0;\n \
    \       // int sum = 0;\n        int digit;\n        int odd_count = 0;\n    \
    \    int even_count = 0;\n        int sum = 0;\n        while (num > 0) {\n  \
    \          digit = num % 10;\n            if (digit % 2 == 0) {\n            \
    \    even_count++;\n            }\n            if (digit % 2 != 0) {\n       \
    \         odd_count++;\n            }\n            sum += digit;\n           \
    \ num = num / 10;\n        }\n        tuple.first = even_count;\n        tuple.second\
    \ = odd_count;\n        return tuple;\n}\n    public static void main(String[]\
    \ args) {\n    assert(evenOddCount((7)).equals((Pair.with(0, 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1,\
    \ 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2, 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3, 3))));\n   \
    \ assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpupg1hdmf.java:14: error: cannot infer type arguments for Pair<>\n\
    \        Pair<Integer, Integer> tuple = new Pair<>();\n                      \
    \                 ^\n  reason: cannot infer type-variable(s) A,B\n    (actual\
    \ and formal argument lists differ in length)\n  where A,B are type-variables:\n\
    \    A extends Object declared in class Pair\n    B extends Object declared in\
    \ class Pair\n/tmp/tmpupg1hdmf.java:33: error: cannot find symbol\n        tuple.first\
    \ = even_count;\n             ^\n  symbol:   variable first\n  location: variable\
    \ tuple of type Pair<Integer,Integer>\n/tmp/tmpupg1hdmf.java:34: error: cannot\
    \ find symbol\n        tuple.second = odd_count;\n             ^\n  symbol:  \
    \ variable second\n  location: variable tuple of type Pair<Integer,Integer>\n\
    3 errors\n"
  stdout: ''
  timestamp: 1660011182
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        Pair<Integer, Integer> pair = new\
    \ Pair<>();\n        boolean evenDigit = false, oddDigit = false;\n        if\
    \ (num < 0) {\n            pair.left = -1;\n            pair.right = -1;\n   \
    \         return pair;\n        }\n        if (num == 0) {\n            pair.left\
    \ = 0;\n            pair.right = 0;\n            return pair;\n        }\n   \
    \     int leftCount = 0, rightCount = 0;\n        while (num !=0) {\n        \
    \    if (num % 2 == 0) {\n                evenDigit = true;\n                leftCount++;\n\
    \            }\n            if (num % 2 != 0) {\n                oddDigit = true;\n\
    \                rightCount++;\n            }\n            num /= 10;\n      \
    \  }\n        pair.left = leftCount;\n        pair.right = rightCount;\n     \
    \   return pair;\n}\n    public static void main(String[] args) {\n    assert(evenOddCount((7)).equals((Pair.with(0,\
    \ 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1, 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2,\
    \ 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3, 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpin9h_0x4.java:14: error: cannot infer type arguments for Pair<>\n\
    \        Pair<Integer, Integer> pair = new Pair<>();\n                       \
    \               ^\n  reason: cannot infer type-variable(s) A,B\n    (actual and\
    \ formal argument lists differ in length)\n  where A,B are type-variables:\n \
    \   A extends Object declared in class Pair\n    B extends Object declared in\
    \ class Pair\n/tmp/tmpin9h_0x4.java:17: error: cannot find symbol\n          \
    \  pair.left = -1;\n                ^\n  symbol:   variable left\n  location:\
    \ variable pair of type Pair<Integer,Integer>\n/tmp/tmpin9h_0x4.java:18: error:\
    \ cannot find symbol\n            pair.right = -1;\n                ^\n  symbol:\
    \   variable right\n  location: variable pair of type Pair<Integer,Integer>\n\
    /tmp/tmpin9h_0x4.java:22: error: cannot find symbol\n            pair.left = 0;\n\
    \                ^\n  symbol:   variable left\n  location: variable pair of type\
    \ Pair<Integer,Integer>\n/tmp/tmpin9h_0x4.java:23: error: cannot find symbol\n\
    \            pair.right = 0;\n                ^\n  symbol:   variable right\n\
    \  location: variable pair of type Pair<Integer,Integer>\n/tmp/tmpin9h_0x4.java:38:\
    \ error: cannot find symbol\n        pair.left = leftCount;\n            ^\n \
    \ symbol:   variable left\n  location: variable pair of type Pair<Integer,Integer>\n\
    /tmp/tmpin9h_0x4.java:39: error: cannot find symbol\n        pair.right = rightCount;\n\
    \            ^\n  symbol:   variable right\n  location: variable pair of type\
    \ Pair<Integer,Integer>\n7 errors\n"
  stdout: ''
  timestamp: 1660011182
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        int even_count = 0, odd_count = 0;\n\
    \        while (num >= 0) {\n            int digit = num % 10;\n            if\
    \ (digit % 2 == 0)\n                even_count++;\n            else\n        \
    \        odd_count++;\n            num = num / 10;\n        }\n        return\
    \ Pair.of((even_count, odd_count));\n}\n    public static void main(String[] args)\
    \ {\n    assert(evenOddCount((7)).equals((Pair.with(0, 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1,\
    \ 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2, 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3, 3))));\n   \
    \ assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpsas82vix.java:23: error: -> expected\n        return Pair.of((even_count,\
    \ odd_count));\n                                              ^\n1 error\n"
  stdout: ''
  timestamp: 1660011181
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        int even = 0, odd = 0, tens = 0, hundreds\
    \ = 0;\n\n        while (num > 0) {\n            int rem = num % 10;\n       \
    \     if (rem % 2 == 0) {\n                even++;\n                num /= 10;\n\
    \            } else {\n                odd++;\n                num /= 10;\n  \
    \          }\n        }\n        int tens = num / 10;\n        num = num % 10;\n\
    \        while (num > 0) {\n            int rem = num % 10;\n            if (rem\
    \ == 1) {\n                hundreds++;\n                num /= 10;\n         \
    \   } else {\n                tens++;\n                num /= 10;\n          \
    \  }\n        }\n        return new Pair<>(even, odd);\n}\n    public static void\
    \ main(String[] args) {\n    assert(evenOddCount((7)).equals((Pair.with(0, 1))));\n\
    \    assert(evenOddCount((-78)).equals((Pair.with(1, 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2,\
    \ 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3, 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp2hm0kj3s.java:26: error: variable tens is already defined in method\
    \ evenOddCount(int)\n        int tens = num / 10;\n            ^\n1 error\n"
  stdout: ''
  timestamp: 1660011182
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        // write your code here\n        return\
    \ null;\n}\n    public static void main(String[] args) {\n    assert(evenOddCount((7)).equals((Pair.with(0,\
    \ 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1, 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2,\
    \ 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3, 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: 'Error: Unable to initialize main class Problem

    Caused by: java.lang.NoClassDefFoundError: org/javatuples/Pair

    '
  stdout: ''
  timestamp: 1660011150
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        Pair<Integer, Integer> evenOdd = new\
    \ Pair<>();\n        if (num < 0) {\n            throw new IllegalArgumentException(\"\
    The input cannot be less than 0.\");\n        }\n        int numDigits = 0;\n\
    \        while (num >= 10) {\n            numDigits++;\n            num /= 10;\n\
    \        }\n        if (num == 0) {\n            evenOdd.first = 0;\n        \
    \    evenOdd.second = 0;\n            return evenOdd;\n        }\n        int\
    \ half = numDigits / 2;\n        // If numDigits is odd, then there are two digits\n\
    \        if (numDigits % 2 == 1) {\n            evenOdd.first = numDigits - half;\n\
    \            evenOdd.second = half;\n            return evenOdd;\n        } else\
    \ {\n            evenOdd.first = 0;\n            evenOdd.second = numDigits -\
    \ half;\n            return evenOdd;\n        }\n}\n    public static void main(String[]\
    \ args) {\n    assert(evenOddCount((7)).equals((Pair.with(0, 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1,\
    \ 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2, 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3, 3))));\n   \
    \ assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpo_5hrpjp.java:14: error: cannot infer type arguments for Pair<>\n\
    \        Pair<Integer, Integer> evenOdd = new Pair<>();\n                    \
    \                     ^\n  reason: cannot infer type-variable(s) A,B\n    (actual\
    \ and formal argument lists differ in length)\n  where A,B are type-variables:\n\
    \    A extends Object declared in class Pair\n    B extends Object declared in\
    \ class Pair\n/tmp/tmpo_5hrpjp.java:24: error: cannot find symbol\n          \
    \  evenOdd.first = 0;\n                   ^\n  symbol:   variable first\n  location:\
    \ variable evenOdd of type Pair<Integer,Integer>\n/tmp/tmpo_5hrpjp.java:25: error:\
    \ cannot find symbol\n            evenOdd.second = 0;\n                   ^\n\
    \  symbol:   variable second\n  location: variable evenOdd of type Pair<Integer,Integer>\n\
    /tmp/tmpo_5hrpjp.java:31: error: cannot find symbol\n            evenOdd.first\
    \ = numDigits - half;\n                   ^\n  symbol:   variable first\n  location:\
    \ variable evenOdd of type Pair<Integer,Integer>\n/tmp/tmpo_5hrpjp.java:32: error:\
    \ cannot find symbol\n            evenOdd.second = half;\n                   ^\n\
    \  symbol:   variable second\n  location: variable evenOdd of type Pair<Integer,Integer>\n\
    /tmp/tmpo_5hrpjp.java:35: error: cannot find symbol\n            evenOdd.first\
    \ = 0;\n                   ^\n  symbol:   variable first\n  location: variable\
    \ evenOdd of type Pair<Integer,Integer>\n/tmp/tmpo_5hrpjp.java:36: error: cannot\
    \ find symbol\n            evenOdd.second = numDigits - half;\n              \
    \     ^\n  symbol:   variable second\n  location: variable evenOdd of type Pair<Integer,Integer>\n\
    7 errors\n"
  stdout: ''
  timestamp: 1660011182
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        Pair<Integer, Integer> pair = new\
    \ Pair<>(num % 10, 0);\n        for (int i = 1; num >= 0; i++) {\n           \
    \ pair = pair.pair(pair.first % 10, 1);\n            if (pair.first == 0) break;\n\
    \            num = num / 10;\n        }\n        return pair;\n}\n    public static\
    \ void main(String[] args) {\n    assert(evenOddCount((7)).equals((Pair.with(0,\
    \ 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1, 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2,\
    \ 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3, 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpw_ny0okr.java:16: error: cannot find symbol\n            pair =\
    \ pair.pair(pair.first % 10, 1);\n                                 ^\n  symbol:\
    \   variable first\n  location: variable pair of type Pair<Integer,Integer>\n\
    /tmp/tmpw_ny0okr.java:17: error: cannot find symbol\n            if (pair.first\
    \ == 0) break;\n                    ^\n  symbol:   variable first\n  location:\
    \ variable pair of type Pair<Integer,Integer>\n2 errors\n"
  stdout: ''
  timestamp: 1660011182
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        int[] arr = new int[Integer.SIZE];\n\
    \        Arrays.fill(arr, num);\n        Arrays.sort(arr);\n        int odd =\
    \ 0, even = 0;\n        for (int i = 0; i < arr.length; i++) {\n            if\
    \ (arr[i] % 2 == 1) {\n                even++;\n            } else {\n       \
    \         odd++;\n            }\n        }\n        return new Pair<>(even, odd);\n\
    }\n    public static void main(String[] args) {\n    assert(evenOddCount((7)).equals((Pair.with(0,\
    \ 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1, 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2,\
    \ 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3, 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: 'Error: Unable to initialize main class Problem

    Caused by: java.lang.NoClassDefFoundError: org/javatuples/Pair

    '
  stdout: ''
  timestamp: 1660011182
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        int count = 0;\n        while (true)\
    \ {\n            if (num % 10 == 0) {\n                num = num / 10;\n     \
    \           count++;\n            }\n            if (num % 2 == 0) {\n       \
    \         num = num / 2;\n                count++;\n            }\n        }\n\
    \        return new Pair<>(count, 0);\n}\n    public static void main(String[]\
    \ args) {\n    assert(evenOddCount((7)).equals((Pair.with(0, 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1,\
    \ 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2, 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3, 3))));\n   \
    \ assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp_pg3mz8i.java:25: error: unreachable statement\n        return\
    \ new Pair<>(count, 0);\n        ^\n1 error\n"
  stdout: ''
  timestamp: 1660011182
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        if (num == 0) {\n            return\
    \ Pair.of(num, 1);\n        }\n        int remainder = (int)(num % 10);\n    \
    \    int even = 0;\n        int odd = 0;\n        if (remainder % 2 == 0) {\n\
    \            even++;\n        }\n        if (num > 0) {\n            while (num\
    \ > 0) {\n                remainder = (int)(num % 10);\n                if (remainder\
    \ % 2 == 0) {\n                    even++;\n                } else {\n       \
    \             odd++;\n                }\n                num = num / 10;\n   \
    \         }\n        }\n        return Pair.of(even, odd);\n}\n    public static\
    \ void main(String[] args) {\n    assert(evenOddCount((7)).equals((Pair.with(0,\
    \ 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1, 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2,\
    \ 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3, 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpjpn78k5d.java:15: error: cannot find symbol\n            return\
    \ Pair.of(num, 1);\n                       ^\n  symbol:   method of(int,int)\n\
    \  location: class Pair\n/tmp/tmpjpn78k5d.java:34: error: cannot find symbol\n\
    \        return Pair.of(even, odd);\n                   ^\n  symbol:   method\
    \ of(int,int)\n  location: class Pair\n2 errors\n"
  stdout: ''
  timestamp: 1660011182
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        int count = 0;\n        while (num\
    \ > 0) {\n            int tmp = num % 10;\n            num = num / 10;\n     \
    \       count++;\n        }\n        return Pair.of(count, count + 1);\n}\n  \
    \  public static void main(String[] args) {\n    assert(evenOddCount((7)).equals((Pair.with(0,\
    \ 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1, 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2,\
    \ 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3, 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpxiu34wls.java:20: error: cannot find symbol\n        return Pair.of(count,\
    \ count + 1);\n                   ^\n  symbol:   method of(int,int)\n  location:\
    \ class Pair\n1 error\n"
  stdout: ''
  timestamp: 1660011182
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        Pair<Integer, Integer> evenOdd = new\
    \ Pair<>();\n\n        int count = 0;\n\n        while (num >=0) {\n         \
    \   int digit = num % 10;\n            count++;\n            if (digit % 2 ==0){\n\
    \                evenOdd.first++;\n            }\n            num = num / 10;\n\
    \        }\n        return evenOdd;\n}\n    public static void main(String[] args)\
    \ {\n    assert(evenOddCount((7)).equals((Pair.with(0, 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1,\
    \ 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2, 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3, 3))));\n   \
    \ assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpl_9sn1g3.java:14: error: cannot infer type arguments for Pair<>\n\
    \        Pair<Integer, Integer> evenOdd = new Pair<>();\n                    \
    \                     ^\n  reason: cannot infer type-variable(s) A,B\n    (actual\
    \ and formal argument lists differ in length)\n  where A,B are type-variables:\n\
    \    A extends Object declared in class Pair\n    B extends Object declared in\
    \ class Pair\n/tmp/tmpl_9sn1g3.java:22: error: cannot find symbol\n          \
    \      evenOdd.first++;\n                       ^\n  symbol:   variable first\n\
    \  location: variable evenOdd of type Pair<Integer,Integer>\n2 errors\n"
  stdout: ''
  timestamp: 1660011182
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        long digit = num;\n        int evenCount\
    \ = 0;\n        int oddCount = 0;\n\n        // get number of digits\n       \
    \ int digits = 0;\n        while (digit != 0) {\n            digits++;\n     \
    \       digit = digit / 10;\n        }\n\n        // loop through digits\n   \
    \     for (int i = 0; i < digits; i++) {\n\n            int n = num % 10;\n  \
    \          if (n % 2 == 0) {\n                evenCount++;\n            } else\
    \ {\n                oddCount++;\n            }\n\n            num = num / 10;\n\
    \        }\n\n        // return tuple\n        return new Pair<>(evenCount, oddCount);\n\
    }\n    public static void main(String[] args) {\n    assert(evenOddCount((7)).equals((Pair.with(0,\
    \ 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1, 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2,\
    \ 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3, 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: 'Error: Unable to initialize main class Problem

    Caused by: java.lang.NoClassDefFoundError: org/javatuples/Pair

    '
  stdout: ''
  timestamp: 1660011182
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        int countEven = 0;\n        int countOdd\
    \ = 0;\n        while (num > 0) {\n            int digit = num % 10;\n       \
    \     if (digit % 2 == 0) {\n                countEven++;\n            } else\
    \ {\n                countOdd++;\n            }\n            num = num / 10;\n\
    \        }\n        return new Pair<>(countEven, countOdd);\n}\n    public static\
    \ void main(String[] args) {\n    assert(evenOddCount((7)).equals((Pair.with(0,\
    \ 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1, 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2,\
    \ 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3, 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: 'Error: Unable to initialize main class Problem

    Caused by: java.lang.NoClassDefFoundError: org/javatuples/Pair

    '
  stdout: ''
  timestamp: 1660011182
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        int odd = 0;\n        int even = 0;\n\
    \        for(int i=num; i>=0; i--){\n            int digit = num%10;\n       \
    \     if(digit < 0){\n                digit = abs(digit);\n            }\n   \
    \         if(digit % 2 == 0){\n                even++;\n            }else{\n \
    \               odd++;\n            }\n            num = num/10;\n        }\n\
    \        return Pair.of(even, odd);\n}\n    public static void main(String[] args)\
    \ {\n    assert(evenOddCount((7)).equals((Pair.with(0, 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1,\
    \ 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2, 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3, 3))));\n   \
    \ assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpt8nns63s.java:19: error: cannot find symbol\n                digit\
    \ = abs(digit);\n                        ^\n  symbol:   method abs(int)\n  location:\
    \ class Problem\n/tmp/tmpt8nns63s.java:28: error: cannot find symbol\n       \
    \ return Pair.of(even, odd);\n                   ^\n  symbol:   method of(int,int)\n\
    \  location: class Pair\n2 errors\n"
  stdout: ''
  timestamp: 1660011182
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        Pair<Integer, Integer> oddAndEvenPair\
    \ = new Pair<>();\n        int countEven = 0;\n        int countOdd = 0;\n   \
    \     int digit = num;\n        while (digit != 0) {\n            int rem = num\
    \ % 10;\n            countEven++;\n            if (rem % 2 == 0) {\n         \
    \       countOdd++;\n            }\n            num /= 10;\n        }\n      \
    \  oddAndEvenPair.first = countEven;\n        oddAndEvenPair.second = countOdd;\n\
    \        return oddAndEvenPair;\n}\n    public static void main(String[] args)\
    \ {\n    assert(evenOddCount((7)).equals((Pair.with(0, 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1,\
    \ 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2, 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3, 3))));\n   \
    \ assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpp4lyck8n.java:14: error: cannot infer type arguments for Pair<>\n\
    \        Pair<Integer, Integer> oddAndEvenPair = new Pair<>();\n             \
    \                                   ^\n  reason: cannot infer type-variable(s)\
    \ A,B\n    (actual and formal argument lists differ in length)\n  where A,B are\
    \ type-variables:\n    A extends Object declared in class Pair\n    B extends\
    \ Object declared in class Pair\n/tmp/tmpp4lyck8n.java:26: error: cannot find\
    \ symbol\n        oddAndEvenPair.first = countEven;\n                      ^\n\
    \  symbol:   variable first\n  location: variable oddAndEvenPair of type Pair<Integer,Integer>\n\
    /tmp/tmpp4lyck8n.java:27: error: cannot find symbol\n        oddAndEvenPair.second\
    \ = countOdd;\n                      ^\n  symbol:   variable second\n  location:\
    \ variable oddAndEvenPair of type Pair<Integer,Integer>\n3 errors\n"
  stdout: ''
  timestamp: 1660011182
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        int odd = num % 10;\n        int even\
    \ = num / 10;\n        Pair<Integer, Integer> pair = new Pair<Integer, Integer>(even,\
    \ odd);\n        System.out.println(pair);\n        return pair;\n}\n    public\
    \ static void main(String[] args) {\n    assert(evenOddCount((7)).equals((Pair.with(0,\
    \ 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1, 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2,\
    \ 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3, 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: 'Error: Unable to initialize main class Problem

    Caused by: java.lang.NoClassDefFoundError: org/javatuples/Pair

    '
  stdout: ''
  timestamp: 1660011182
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        return IntStream.range(num, 0).filter(num\
    \ -> num % 2 != 0)\n                .map(num -> num % 2 == 0 ? 1 : 2).sum();\n\
    }\n    public static void main(String[] args) {\n    assert(evenOddCount((7)).equals((Pair.with(0,\
    \ 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1, 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2,\
    \ 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3, 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmptba3uz9x.java:14: error: variable num is already defined in method\
    \ evenOddCount(int)\n        return IntStream.range(num, 0).filter(num -> num\
    \ % 2 != 0)\n                                              ^\n/tmp/tmptba3uz9x.java:15:\
    \ error: variable num is already defined in method evenOddCount(int)\n       \
    \         .map(num -> num % 2 == 0 ? 1 : 2).sum();\n                     ^\n/tmp/tmptba3uz9x.java:15:\
    \ error: incompatible types: int cannot be converted to Pair<Integer,Integer>\n\
    \                .map(num -> num % 2 == 0 ? 1 : 2).sum();\n                  \
    \                                   ^\n3 errors\n"
  stdout: ''
  timestamp: 1660011182
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        return Pair.of(even_digits(num), odd_digits(num));\n\
    }\n    public static void main(String[] args) {\n    assert(evenOddCount((7)).equals((Pair.with(0,\
    \ 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1, 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2,\
    \ 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3, 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpf4bsex5f.java:14: error: cannot find symbol\n        return Pair.of(even_digits(num),\
    \ odd_digits(num));\n                       ^\n  symbol:   method even_digits(int)\n\
    \  location: class Problem\n/tmp/tmpf4bsex5f.java:14: error: cannot find symbol\n\
    \        return Pair.of(even_digits(num), odd_digits(num));\n                \
    \                         ^\n  symbol:   method odd_digits(int)\n  location: class\
    \ Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660011182
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        boolean even = true;\n        boolean\
    \ odd = true;\n        int result = 0;\n        while (num != 0) {\n         \
    \   if (num % 10 == 0) even = false;\n            else if (num % 10 == 1) odd\
    \ = false;\n            num = num / 10;\n            result++;\n        }\n  \
    \      return new Pair<Integer, Integer>(even, odd);\n}\n    public static void\
    \ main(String[] args) {\n    assert(evenOddCount((7)).equals((Pair.with(0, 1))));\n\
    \    assert(evenOddCount((-78)).equals((Pair.with(1, 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2,\
    \ 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3, 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpmus_co6f.java:23: error: incompatible types: boolean cannot be\
    \ converted to Integer\n        return new Pair<Integer, Integer>(even, odd);\n\
    \                                          ^\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660011182
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        int remainder = num % 10;\n      \
    \  int oddDigits = (int)Math.ceil(num / 10);\n        int evenDigits = (num %\
    \ 10) + 1;\n        return Pair.pair(evenDigits, oddDigits);\n}\n    public static\
    \ void main(String[] args) {\n    assert(evenOddCount((7)).equals((Pair.with(0,\
    \ 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1, 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2,\
    \ 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3, 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpp_y9rsx0.java:17: error: cannot find symbol\n        return Pair.pair(evenDigits,\
    \ oddDigits);\n                   ^\n  symbol:   method pair(int,int)\n  location:\
    \ class Pair\n1 error\n"
  stdout: ''
  timestamp: 1660011182
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        if(num == 0) return Pair.of(0, 0);\n\
    \        BigInteger bI = BigInteger.valueOf(num);\n        Pair<Integer, Integer>\
    \ ret = new Pair<>();\n        for(int i = BigInteger.ZERO; i.compareTo(bI) >\
    \ 0; i = i.add(BigInteger.ONE)) {\n            if(i % 2 == 0) {\n            \
    \    ret.first++;\n            }\n            else {\n                ret.second++;\n\
    \            }\n        }\n        return ret;\n}\n    public static void main(String[]\
    \ args) {\n    assert(evenOddCount((7)).equals((Pair.with(0, 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1,\
    \ 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2, 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3, 3))));\n   \
    \ assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpz1hfn1uk.java:14: error: cannot find symbol\n        if(num ==\
    \ 0) return Pair.of(0, 0);\n                                ^\n  symbol:   method\
    \ of(int,int)\n  location: class Pair\n/tmp/tmpz1hfn1uk.java:16: error: cannot\
    \ infer type arguments for Pair<>\n        Pair<Integer, Integer> ret = new Pair<>();\n\
    \                                     ^\n  reason: cannot infer type-variable(s)\
    \ A,B\n    (actual and formal argument lists differ in length)\n  where A,B are\
    \ type-variables:\n    A extends Object declared in class Pair\n    B extends\
    \ Object declared in class Pair\n/tmp/tmpz1hfn1uk.java:17: error: incompatible\
    \ types: BigInteger cannot be converted to int\n        for(int i = BigInteger.ZERO;\
    \ i.compareTo(bI) > 0; i = i.add(BigInteger.ONE)) {\n                        \
    \      ^\n/tmp/tmpz1hfn1uk.java:17: error: int cannot be dereferenced\n      \
    \  for(int i = BigInteger.ZERO; i.compareTo(bI) > 0; i = i.add(BigInteger.ONE))\
    \ {\n                                      ^\n/tmp/tmpz1hfn1uk.java:17: error:\
    \ int cannot be dereferenced\n        for(int i = BigInteger.ZERO; i.compareTo(bI)\
    \ > 0; i = i.add(BigInteger.ONE)) {\n                                        \
    \                       ^\n/tmp/tmpz1hfn1uk.java:19: error: cannot find symbol\n\
    \                ret.first++;\n                   ^\n  symbol:   variable first\n\
    \  location: variable ret of type Pair<Integer,Integer>\n/tmp/tmpz1hfn1uk.java:22:\
    \ error: cannot find symbol\n                ret.second++;\n                 \
    \  ^\n  symbol:   variable second\n  location: variable ret of type Pair<Integer,Integer>\n\
    7 errors\n"
  stdout: ''
  timestamp: 1660011182
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        Map<Integer, Integer> count = new\
    \ HashMap<>();\n        int count = 0;\n        while(num > 0) {\n           \
    \ if(num % 2 == 0) {\n                count += 1;\n            }\n           \
    \ else if(num % 2 != 0) {\n                count += 2;\n            }\n      \
    \      num/=10;\n        }\n        return new Pair<>(count, count-1);\n}\n  \
    \  public static void main(String[] args) {\n    assert(evenOddCount((7)).equals((Pair.with(0,\
    \ 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1, 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2,\
    \ 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3, 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpf_6wl6bk.java:15: error: variable count is already defined in method\
    \ evenOddCount(int)\n        int count = 0;\n            ^\n1 error\n"
  stdout: ''
  timestamp: 1660011182
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        Pair<Integer, Integer> oddEven = new\
    \ Pair<>();\n        if (num < 0) {\n            oddEven = new Pair<>();\n   \
    \     } else if (num == 0) {\n            oddEven = new Pair<>();\n        } else\
    \ {\n            int oddCount = 0;\n            int evenCount = 0;\n         \
    \   while (num > 0) {\n                int digit = num % 10;\n               \
    \ num = num / 10;\n                if (digit % 2 == 0) {\n                   \
    \ evenCount++;\n                } else {\n                    oddCount++;\n  \
    \              }\n            }\n            oddEven = new Pair<>(oddCount, evenCount);\n\
    \        }\n        return oddEven;\n}\n    public static void main(String[] args)\
    \ {\n    assert(evenOddCount((7)).equals((Pair.with(0, 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1,\
    \ 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2, 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3, 3))));\n   \
    \ assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp7erlz00q.java:14: error: cannot infer type arguments for Pair<>\n\
    \        Pair<Integer, Integer> oddEven = new Pair<>();\n                    \
    \                     ^\n  reason: cannot infer type-variable(s) A,B\n    (actual\
    \ and formal argument lists differ in length)\n  where A,B are type-variables:\n\
    \    A extends Object declared in class Pair\n    B extends Object declared in\
    \ class Pair\n/tmp/tmp7erlz00q.java:16: error: cannot infer type arguments for\
    \ Pair<>\n            oddEven = new Pair<>();\n                      ^\n  reason:\
    \ cannot infer type-variable(s) A,B\n    (actual and formal argument lists differ\
    \ in length)\n  where A,B are type-variables:\n    A extends Object declared in\
    \ class Pair\n    B extends Object declared in class Pair\n/tmp/tmp7erlz00q.java:18:\
    \ error: cannot infer type arguments for Pair<>\n            oddEven = new Pair<>();\n\
    \                      ^\n  reason: cannot infer type-variable(s) A,B\n    (actual\
    \ and formal argument lists differ in length)\n  where A,B are type-variables:\n\
    \    A extends Object declared in class Pair\n    B extends Object declared in\
    \ class Pair\n3 errors\n"
  stdout: ''
  timestamp: 1660011182
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        // Your code here\n        if(num==0)\n\
    \            return new Pair<Integer,Integer>(0,0);\n        int odd=0,even=0;\n\
    \        int n=num%10;\n        while(num!=0){\n            if(n%2==0)\n     \
    \           even+=1;\n            else\n                odd+=1;\n            n=n%10;\n\
    \        }\n        return new Pair<Integer,Integer>(even,odd);\n}\n    public\
    \ static void main(String[] args) {\n    assert(evenOddCount((7)).equals((Pair.with(0,\
    \ 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1, 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2,\
    \ 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3, 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: 'Error: Unable to initialize main class Problem

    Caused by: java.lang.NoClassDefFoundError: org/javatuples/Pair

    '
  stdout: ''
  timestamp: 1660011183
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        Pair<Integer, Integer> pair = new\
    \ Pair<>();\n        if (num < 0) {\n            pair.first = (Integer) (-num);\n\
    \            pair.second = (Integer) -num;\n            return pair;\n       \
    \ }\n        List<Integer> evenDigits = new ArrayList<>();\n        List<Integer>\
    \ oddDigits = new ArrayList<>();\n        int remainder = num % 10;\n        while\
    \ (remainder > 0) {\n            evenDigits.add(remainder);\n            remainder\
    \ = (num / 10) % 10;\n        }\n        while (remainder > 0) {\n           \
    \ oddDigits.add(remainder);\n            remainder = (num / 10) % 10;\n      \
    \  }\n        int evenCount = 0;\n        int oddCount = 0;\n        evenDigits.forEach(i\
    \ -> {\n            int currentEvenCount = evenDigits.stream().filter(j -> j ==\
    \ i).count();\n            evenCount += currentEvenCount;\n        });\n     \
    \   oddDigits.forEach(i -> {\n            int currentOddCount = oddDigits.stream().filter(j\
    \ -> j == i).count();\n            oddCount += currentOddCount;\n        });\n\
    \        pair.first = (Integer) (evenCount);\n        pair.second = (Integer)\
    \ (oddCount);\n        return pair;\n}\n    public static void main(String[] args)\
    \ {\n    assert(evenOddCount((7)).equals((Pair.with(0, 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1,\
    \ 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2, 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3, 3))));\n   \
    \ assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpl_jvfw9w.java:14: error: cannot infer type arguments for Pair<>\n\
    \        Pair<Integer, Integer> pair = new Pair<>();\n                       \
    \               ^\n  reason: cannot infer type-variable(s) A,B\n    (actual and\
    \ formal argument lists differ in length)\n  where A,B are type-variables:\n \
    \   A extends Object declared in class Pair\n    B extends Object declared in\
    \ class Pair\n/tmp/tmpl_jvfw9w.java:16: error: cannot find symbol\n          \
    \  pair.first = (Integer) (-num);\n                ^\n  symbol:   variable first\n\
    \  location: variable pair of type Pair<Integer,Integer>\n/tmp/tmpl_jvfw9w.java:17:\
    \ error: cannot find symbol\n            pair.second = (Integer) -num;\n     \
    \           ^\n  symbol:   variable second\n  location: variable pair of type\
    \ Pair<Integer,Integer>\n/tmp/tmpl_jvfw9w.java:17: error: cannot find symbol\n\
    \            pair.second = (Integer) -num;\n                           ^\n  symbol:\
    \   variable Integer\n  location: class Problem\n/tmp/tmpl_jvfw9w.java:34: error:\
    \ incompatible types: possible lossy conversion from long to int\n           \
    \ int currentEvenCount = evenDigits.stream().filter(j -> j == i).count();\n  \
    \                                                                            \
    \  ^\n/tmp/tmpl_jvfw9w.java:38: error: incompatible types: possible lossy conversion\
    \ from long to int\n            int currentOddCount = oddDigits.stream().filter(j\
    \ -> j == i).count();\n                                                      \
    \                        ^\n/tmp/tmpl_jvfw9w.java:41: error: cannot find symbol\n\
    \        pair.first = (Integer) (evenCount);\n            ^\n  symbol:   variable\
    \ first\n  location: variable pair of type Pair<Integer,Integer>\n/tmp/tmpl_jvfw9w.java:42:\
    \ error: cannot find symbol\n        pair.second = (Integer) (oddCount);\n   \
    \         ^\n  symbol:   variable second\n  location: variable pair of type Pair<Integer,Integer>\n\
    8 errors\n"
  stdout: ''
  timestamp: 1660011183
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        int sumOdd = 0;\n        int sumEven\
    \ = 0;\n\n        while (num > 0) {\n            int remainder = num % 10;\n \
    \           num = num / 10;\n            if (remainder % 2 == 0) {\n         \
    \       sumEven++;\n            }\n            else {\n                sumOdd++;\n\
    \            }\n        }\n        return new Pair<>(sumEven, sumOdd);\n}\n  \
    \  public static void main(String[] args) {\n    assert(evenOddCount((7)).equals((Pair.with(0,\
    \ 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1, 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2,\
    \ 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3, 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: 'Error: Unable to initialize main class Problem

    Caused by: java.lang.NoClassDefFoundError: org/javatuples/Pair

    '
  stdout: ''
  timestamp: 1660011183
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        if (num < 0) {\n            throw\
    \ new IllegalArgumentException(\"num must be >= 0\");\n        }\n        if (num\
    \ == 0) {\n            return Pair.of(0, 0);\n        }\n        int nDigits =\
    \ countDigits(num);\n        if (nDigits == 1) {\n            return Pair.of(1,\
    \ 1);\n        }\n        Pair<Integer, Integer> firstOdd = Pair.of(1, 0);\n \
    \       int oddDigits = 1;\n        for (int i = 0; i < nDigits; i++) {\n    \
    \        Pair<Integer, Integer> pair = Pair.of(num % 10, 1);\n            num\
    \ = num / 10;\n            int currentDigit = pair.getLeft();\n            if\
    \ (currentDigit % 2 == 1) {\n                oddDigits += pair.getRight();\n \
    \           } else {\n                firstOdd = Pair.of(pair.getRight() + oddDigits,\
    \ firstOdd.getRight());\n                oddDigits = 1;\n            }\n     \
    \   }\n        return Pair.of(firstOdd.getRight(), oddDigits);\n}\n    public\
    \ static void main(String[] args) {\n    assert(evenOddCount((7)).equals((Pair.with(0,\
    \ 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1, 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2,\
    \ 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3, 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmptfyk81hs.java:18: error: cannot find symbol\n            return\
    \ Pair.of(0, 0);\n                       ^\n  symbol:   method of(int,int)\n \
    \ location: class Pair\n/tmp/tmptfyk81hs.java:20: error: cannot find symbol\n\
    \        int nDigits = countDigits(num);\n                      ^\n  symbol: \
    \  method countDigits(int)\n  location: class Problem\n/tmp/tmptfyk81hs.java:22:\
    \ error: cannot find symbol\n            return Pair.of(1, 1);\n             \
    \          ^\n  symbol:   method of(int,int)\n  location: class Pair\n/tmp/tmptfyk81hs.java:24:\
    \ error: cannot find symbol\n        Pair<Integer, Integer> firstOdd = Pair.of(1,\
    \ 0);\n                                              ^\n  symbol:   method of(int,int)\n\
    \  location: class Pair\n/tmp/tmptfyk81hs.java:27: error: cannot find symbol\n\
    \            Pair<Integer, Integer> pair = Pair.of(num % 10, 1);\n           \
    \                                   ^\n  symbol:   method of(int,int)\n  location:\
    \ class Pair\n/tmp/tmptfyk81hs.java:29: error: cannot find symbol\n          \
    \  int currentDigit = pair.getLeft();\n                                   ^\n\
    \  symbol:   method getLeft()\n  location: variable pair of type Pair<Integer,Integer>\n\
    /tmp/tmptfyk81hs.java:31: error: cannot find symbol\n                oddDigits\
    \ += pair.getRight();\n                                 ^\n  symbol:   method\
    \ getRight()\n  location: variable pair of type Pair<Integer,Integer>\n/tmp/tmptfyk81hs.java:33:\
    \ error: cannot find symbol\n                firstOdd = Pair.of(pair.getRight()\
    \ + oddDigits, firstOdd.getRight());\n                                       ^\n\
    \  symbol:   method getRight()\n  location: variable pair of type Pair<Integer,Integer>\n\
    /tmp/tmptfyk81hs.java:33: error: cannot find symbol\n                firstOdd\
    \ = Pair.of(pair.getRight() + oddDigits, firstOdd.getRight());\n             \
    \                                                           ^\n  symbol:   method\
    \ getRight()\n  location: variable firstOdd of type Pair<Integer,Integer>\n/tmp/tmptfyk81hs.java:37:\
    \ error: cannot find symbol\n        return Pair.of(firstOdd.getRight(), oddDigit"
  stdout: ''
  timestamp: 1660011183
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        Set<Integer> set = new HashSet<>();\n\
    \n        for (int i = 0; i < 10; i++) {\n            if (num / (int) Math.pow(10,\
    \ i) % 2 == 0) {\n                set.add(Math.pow(10, i));\n            }\n \
    \       }\n\n        return new Pair<>(set.size(), set.size() - (set.size() -\
    \ set.stream().filter(n -> n == num).count()));\n}\n    public static void main(String[]\
    \ args) {\n    assert(evenOddCount((7)).equals((Pair.with(0, 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1,\
    \ 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2, 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3, 3))));\n   \
    \ assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpq_y6n8s5.java:18: error: incompatible types: double cannot be converted\
    \ to Integer\n                set.add(Math.pow(10, i));\n                    \
    \            ^\n/tmp/tmpq_y6n8s5.java:22: error: incompatible types: cannot infer\
    \ type arguments for Pair<>\n        return new Pair<>(set.size(), set.size()\
    \ - (set.size() - set.stream().filter(n -> n == num).count()));\n            \
    \           ^\n    reason: inference variable B has incompatible bounds\n    \
    \  equality constraints: Integer\n      lower bounds: Long\n  where B is a type-variable:\n\
    \    B extends Object declared in class Pair\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1660011183
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        Pair<Integer, Integer> evenOdd = null;\n\
    \        if (num == Integer.MIN_VALUE || num < 0) {\n            evenOdd = new\
    \ Pair<>(Integer.MIN_VALUE, Integer.MIN_VALUE);\n        } else {\n          \
    \  int even = num / 10;\n            int odd = num % 10;\n            evenOdd\
    \ = new Pair<>(even, odd);\n        }\n        return evenOdd;\n}\n    public\
    \ static void main(String[] args) {\n    assert(evenOddCount((7)).equals((Pair.with(0,\
    \ 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1, 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2,\
    \ 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3, 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: 'Error: Unable to initialize main class Problem

    Caused by: java.lang.NoClassDefFoundError: org/javatuples/Pair

    '
  stdout: ''
  timestamp: 1660011183
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        // write your code in java 8.\n  \
    \      Integer evenCount = 0;\n        Integer oddCount = 0;\n        if (num\
    \ < 0) {\n            int abs = Math.abs(num);\n            evenCount += abs /\
    \ 10;\n            oddCount += abs % 10;\n        }\n        while (num != 0)\
    \ {\n            int temp = num % 10;\n            num = num / 10;\n         \
    \   if (temp % 2 == 0) {\n                evenCount += 1;\n            }\n   \
    \         if (temp % 2 != 0) {\n                oddCount += 1;\n            }\n\
    \        }\n        return new Tuple(evenCount, oddCount);\n}\n    public static\
    \ void main(String[] args) {\n    assert(evenOddCount((7)).equals((Pair.with(0,\
    \ 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1, 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2,\
    \ 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3, 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp8r45889i.java:32: error: Tuple is abstract; cannot be instantiated\n\
    \        return new Tuple(evenCount, oddCount);\n               ^\n1 error\n"
  stdout: ''
  timestamp: 1660011183
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        Set<Integer> set = new HashSet<Integer>();\n\
    \        int count = 0;\n        while(num>0) {\n            int digit = num %\
    \ 10;\n            if(set.contains(digit)) {\n                count++;\n     \
    \       } else {\n                set.add(digit);\n            }\n           \
    \ num/=10;\n        }\n        return new Pair<>(count, set.size());\n}\n    public\
    \ static void main(String[] args) {\n    assert(evenOddCount((7)).equals((Pair.with(0,\
    \ 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1, 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2,\
    \ 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3, 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: 'Error: Unable to initialize main class Problem

    Caused by: java.lang.NoClassDefFoundError: org/javatuples/Pair

    '
  stdout: ''
  timestamp: 1660011183
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        int odd = num % 10;\n        if (odd\
    \ % 2 == 0) {\n            int even = num / 10;\n            Pair<Integer, Integer>\
    \ pair = Pair.of(even, odd + 1);\n            return pair;\n        } else {\n\
    \            int even = num / 10;\n            Pair<Integer, Integer> pair = Pair.of(odd,\
    \ even);\n            return pair;\n        }\n}\n    public static void main(String[]\
    \ args) {\n    assert(evenOddCount((7)).equals((Pair.with(0, 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1,\
    \ 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2, 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3, 3))));\n   \
    \ assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpm3g2kwtb.java:17: error: cannot find symbol\n            Pair<Integer,\
    \ Integer> pair = Pair.of(even, odd + 1);\n                                  \
    \            ^\n  symbol:   method of(int,int)\n  location: class Pair\n/tmp/tmpm3g2kwtb.java:21:\
    \ error: cannot find symbol\n            Pair<Integer, Integer> pair = Pair.of(odd,\
    \ even);\n                                              ^\n  symbol:   method\
    \ of(int,int)\n  location: class Pair\n2 errors\n"
  stdout: ''
  timestamp: 1660011183
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        if (num < 0) {\n            return\
    \ Pair.of(0, 1);\n        }\n\n        List<Integer> digits = IntStream.rangeClosed(1,\
    \ num / 10)\n            .map(i -> num % 10 - i * 10)\n            .collect(Collectors.toList());\n\
    \        \n        List<Integer> evenDigits = digits.stream().filter(d -> d %\
    \ 2 == 0).collect(Collectors.toList());\n        \n        List<Integer> oddDigits\
    \ = digits.stream().filter(d -> d % 2 != 0).collect(Collectors.toList());\n\n\
    \        return Pair.of(evenDigits.size(), oddDigits.size());\n}\n    public static\
    \ void main(String[] args) {\n    assert(evenOddCount((7)).equals((Pair.with(0,\
    \ 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1, 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2,\
    \ 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3, 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp8nkzpq38.java:15: error: cannot find symbol\n            return\
    \ Pair.of(0, 1);\n                       ^\n  symbol:   method of(int,int)\n \
    \ location: class Pair\n/tmp/tmp8nkzpq38.java:20: error: method collect in interface\
    \ IntStream cannot be applied to given types;\n            .collect(Collectors.toList());\n\
    \            ^\n  required: Supplier<R>,ObjIntConsumer<R>,BiConsumer<R,R>\n  found:\
    \    Collector<Object,CAP#1,List<Object>>\n  reason: cannot infer type-variable(s)\
    \ R\n    (actual and formal argument lists differ in length)\n  where R is a type-variable:\n\
    \    R extends Object declared in method <R>collect(Supplier<R>,ObjIntConsumer<R>,BiConsumer<R,R>)\n\
    \  where CAP#1 is a fresh type-variable:\n    CAP#1 extends Object from capture\
    \ of ?\n/tmp/tmp8nkzpq38.java:20: error: incompatible types: cannot infer type-variable(s)\
    \ R\n            .collect(Collectors.toList());\n                    ^\n    (argument\
    \ mismatch; no instance(s) of type variable(s) CAP#1,T exist so that Collector<T,?,List<T>>\
    \ conforms to Supplier<R>)\n  where R,T are type-variables:\n    R extends Object\
    \ declared in method <R>collect(Supplier<R>,ObjIntConsumer<R>,BiConsumer<R,R>)\n\
    \    T extends Object declared in method <T>toList()\n  where CAP#1 is a fresh\
    \ type-variable:\n    CAP#1 extends Object from capture of ?\n/tmp/tmp8nkzpq38.java:26:\
    \ error: cannot find symbol\n        return Pair.of(evenDigits.size(), oddDigits.size());\n\
    \                   ^\n  symbol:   method of(int,int)\n  location: class Pair\n\
    4 errors\n"
  stdout: ''
  timestamp: 1660011183
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        ArrayList<Integer> even_digits = new\
    \ ArrayList<Integer>();\n        ArrayList<Integer> odd_digits = new ArrayList<Integer>();\n\
    \        String number = Integer.toString(num);\n        char digit;\n       \
    \ for(int i = 0; i < number.length(); i++) {\n            digit = number.charAt(i);\n\
    \            if(Character.isDigit(digit)) {\n                if(digit-'0' == 0)\
    \ even_digits.add(i);\n                else odd_digits.add(i);\n            }\n\
    \        }\n        return Pair.<Integer, Integer>of(even_digits.size(), odd_digits.size());\n\
    }\n    public static void main(String[] args) {\n    assert(evenOddCount((7)).equals((Pair.with(0,\
    \ 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1, 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2,\
    \ 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3, 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpwndj99l5.java:25: error: cannot find symbol\n        return Pair.<Integer,\
    \ Integer>of(even_digits.size(), odd_digits.size());\n                   ^\n \
    \ symbol:   method <Integer,Integer>of(int,int)\n  location: class Pair\n1 error\n"
  stdout: ''
  timestamp: 1660011183
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        List<Integer> list = new ArrayList<Integer>();\n\
    \        int even_count = 0;\n        int odd_count = 0;\n        int num0 = num;\n\
    \        while(num0 > 0){\n            list.add(num0 % 10);\n            num =\
    \ num0 / 10;\n        }\n        Collections.sort(list);\n        for(int i :\
    \ list){\n            if (i % 2 == 0){\n                even_count++;\n      \
    \      }\n            else if (i % 2 == 1){\n                odd_count++;\n  \
    \          }\n        }\n        return new Pair<>(even_count, odd_count);\n}\n\
    \    public static void main(String[] args) {\n    assert(evenOddCount((7)).equals((Pair.with(0,\
    \ 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1, 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2,\
    \ 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3, 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: 'Error: Unable to initialize main class Problem

    Caused by: java.lang.NoClassDefFoundError: org/javatuples/Pair

    '
  stdout: ''
  timestamp: 1660011183
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        long n = num;\n        long evenCount\
    \ = 0;\n        long oddCount = 0;\n        long remainder = 0;\n\n        while\
    \ (n > 0) {\n            long temp = n % 10;\n            evenCount = evenCount\
    \ + temp % 2;\n            oddCount = oddCount + temp / 2;\n            n = n\
    \ / 10;\n        }\n\n        return Pair.of(evenCount, oddCount);\n}\n    public\
    \ static void main(String[] args) {\n    assert(evenOddCount((7)).equals((Pair.with(0,\
    \ 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1, 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2,\
    \ 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3, 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmptokug59i.java:26: error: cannot find symbol\n        return Pair.of(evenCount,\
    \ oddCount);\n                   ^\n  symbol:   method of(long,long)\n  location:\
    \ class Pair\n1 error\n"
  stdout: ''
  timestamp: 1660011183
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        Pair<Integer, Integer> pair = new\
    \ Pair<>(0, 0);\n        int temp = num;\n        while (temp != 0) {\n      \
    \      int digit = temp % 10;\n            int lastDigit = num % 10;\n       \
    \     if (digit % 2 == 0 && lastDigit % 2 != 0) {\n                pair.first++;\n\
    \            } else if (digit % 2 != 0 && lastDigit % 2 == 0) {\n            \
    \    pair.second++;\n            }\n            num = num / 10;\n        }\n \
    \       return pair;\n}\n    public static void main(String[] args) {\n    assert(evenOddCount((7)).equals((Pair.with(0,\
    \ 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1, 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2,\
    \ 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3, 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpola_882m.java:20: error: cannot find symbol\n                pair.first++;\n\
    \                    ^\n  symbol:   variable first\n  location: variable pair\
    \ of type Pair<Integer,Integer>\n/tmp/tmpola_882m.java:22: error: cannot find\
    \ symbol\n                pair.second++;\n                    ^\n  symbol:   variable\
    \ second\n  location: variable pair of type Pair<Integer,Integer>\n2 errors\n"
  stdout: ''
  timestamp: 1660011183
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        Pair<Integer, Integer> result = null;\n\
    \        if(num == 0){\n            result = new Pair<>(0, 0);\n        }\n  \
    \      else if(num < 0){\n            result = new Pair<>(-1, -1);\n        }\n\
    \        else{\n            int max = (int) Math.floor(Math.log10(num) + 1);\n\
    \            int counter = 0;\n            for(int i = 1; i < max; i++){\n   \
    \             while(num % i == 0){\n                    counter ++;\n        \
    \            num = num / i;\n                }\n            }\n            result\
    \ = new Pair<>(counter, max - (int)Math.floor(Math.log10(num)));\n        }\n\
    \        return result;\n}\n    public static void main(String[] args) {\n   \
    \ assert(evenOddCount((7)).equals((Pair.with(0, 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1,\
    \ 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2, 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3, 3))));\n   \
    \ assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: 'Error: Unable to initialize main class Problem

    Caused by: java.lang.NoClassDefFoundError: org/javatuples/Pair

    '
  stdout: ''
  timestamp: 1660011184
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        int even = 0;\n        int odd = 0;\n\
    \        for (int i = num; i > 0; i /= 10) {\n            if ((i % 2) == 0) {\n\
    \                even += i;\n            } else {\n                odd += i;\n\
    \            }\n        }\n        return Pair.create(even, odd);\n}\n    public\
    \ static void main(String[] args) {\n    assert(evenOddCount((7)).equals((Pair.with(0,\
    \ 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1, 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2,\
    \ 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3, 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp47ms9zd9.java:23: error: cannot find symbol\n        return Pair.create(even,\
    \ odd);\n                   ^\n  symbol:   method create(int,int)\n  location:\
    \ class Pair\n1 error\n"
  stdout: ''
  timestamp: 1660011183
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        int oddCount = 0;\n        int evenCount\
    \ = 0;\n        long num = Math.abs(num);\n        while (num !=  0) {\n     \
    \       num = num / 10;\n            if (num % 2 == 0) {\n                evenCount++;\n\
    \            }\n            else {\n                oddCount++;\n            }\n\
    \        }\n        return new Pair<Integer, Integer>(evenCount, oddCount);\n\
    }\n    public static void main(String[] args) {\n    assert(evenOddCount((7)).equals((Pair.with(0,\
    \ 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1, 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2,\
    \ 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3, 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpc7v0ul8u.java:16: error: variable num is already defined in method\
    \ evenOddCount(int)\n        long num = Math.abs(num);\n             ^\n1 error\n"
  stdout: ''
  timestamp: 1660011183
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        Pair<Integer, Integer> pair = new\
    \ Pair<>(0,0);\n        int digit = num;\n        while (num != 0) {\n       \
    \     int remainder = num % 10;\n            num = num / 10;\n            pair.left\
    \ = pair.left + remainder;\n            pair.right = pair.right + digit;\n   \
    \     }\n        return pair;\n}\n    public static void main(String[] args) {\n\
    \    assert(evenOddCount((7)).equals((Pair.with(0, 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1,\
    \ 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2, 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3, 3))));\n   \
    \ assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp7hf9zzjk.java:19: error: cannot find symbol\n            pair.left\
    \ = pair.left + remainder;\n                ^\n  symbol:   variable left\n  location:\
    \ variable pair of type Pair<Integer,Integer>\n/tmp/tmp7hf9zzjk.java:19: error:\
    \ cannot find symbol\n            pair.left = pair.left + remainder;\n       \
    \                     ^\n  symbol:   variable left\n  location: variable pair\
    \ of type Pair<Integer,Integer>\n/tmp/tmp7hf9zzjk.java:20: error: cannot find\
    \ symbol\n            pair.right = pair.right + digit;\n                ^\n  symbol:\
    \   variable right\n  location: variable pair of type Pair<Integer,Integer>\n\
    /tmp/tmp7hf9zzjk.java:20: error: cannot find symbol\n            pair.right =\
    \ pair.right + digit;\n                             ^\n  symbol:   variable right\n\
    \  location: variable pair of type Pair<Integer,Integer>\n4 errors\n"
  stdout: ''
  timestamp: 1660011183
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        int even = 0;\n        int odd = 0;\n\
    \        for (int i = 1; i <= num; i++) {\n            if (num % i == 0) {\n \
    \               even++;\n            } else {\n                odd++;\n      \
    \      }\n        }\n        return new Pair<>(even, odd);\n}\n    public static\
    \ void main(String[] args) {\n    assert(evenOddCount((7)).equals((Pair.with(0,\
    \ 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1, 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2,\
    \ 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3, 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: 'Error: Unable to initialize main class Problem

    Caused by: java.lang.NoClassDefFoundError: org/javatuples/Pair

    '
  stdout: ''
  timestamp: 1660011184
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        if (num < 0)\n            throw new\
    \ IllegalArgumentException();\n        int remainder = num % 10;\n        if (remainder\
    \ >= 2)\n            return Pair.of(num, remainder);\n        else\n         \
    \   return Pair.of(remainder, num % 10);\n}\n    public static void main(String[]\
    \ args) {\n    assert(evenOddCount((7)).equals((Pair.with(0, 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1,\
    \ 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2, 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3, 3))));\n   \
    \ assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmppnf_8bsi.java:18: error: cannot find symbol\n            return\
    \ Pair.of(num, remainder);\n                       ^\n  symbol:   method of(int,int)\n\
    \  location: class Pair\n/tmp/tmppnf_8bsi.java:20: error: cannot find symbol\n\
    \            return Pair.of(remainder, num % 10);\n                       ^\n\
    \  symbol:   method of(int,int)\n  location: class Pair\n2 errors\n"
  stdout: ''
  timestamp: 1660011183
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        int evenDigits = 0;\n        int oddDigits\
    \ = 0;\n        int remainder;\n        int mod;\n\n        // Check whether number\
    \ is negative\n        if (num < 0) {\n            num = Math.abs(num);\n    \
    \    }\n        // Get digits by dividing by 10\n        int numDigits = Integer.numberOfDigits(num);\n\
    \n        // Check whether number is positive or negative\n        if (numDigits\
    \ == 0) {\n            evenDigits = 1;\n            oddDigits = 1;\n         \
    \   return new Pair<>(evenDigits, oddDigits);\n        } else {\n            int\
    \ remainder = num % 10;\n            mod = num % 10;\n\n            // Check if\
    \ the number is divisible by 2\n            if (mod == 0) {\n                evenDigits++;\n\
    \            } else {\n                oddDigits++;\n            }\n\n       \
    \     while (num > 0) {\n                remainder = num % 10;\n             \
    \   mod = num % 10;\n\n                // Check if the number is divisible by\
    \ 2\n                if (mod == 0) {\n                    evenDigits++;\n    \
    \            } else {\n                    oddDigits++;\n                }\n\n\
    \                num = num / 10;\n            }\n            return new Pair<>(evenDigits,\
    \ oddDigits);\n        }\n}\n    public static void main(String[] args) {\n  \
    \  assert(evenOddCount((7)).equals((Pair.with(0, 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1,\
    \ 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2, 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3, 3))));\n   \
    \ assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp2ylf1l7x.java:24: error: cannot find symbol\n        int numDigits\
    \ = Integer.numberOfDigits(num);\n                               ^\n  symbol:\
    \   method numberOfDigits(int)\n  location: class Integer\n/tmp/tmp2ylf1l7x.java:32:\
    \ error: variable remainder is already defined in method evenOddCount(int)\n \
    \           int remainder = num % 10;\n                ^\n2 errors\n"
  stdout: ''
  timestamp: 1660011184
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        if (num < 0) {\n            throw\
    \ new IllegalArgumentException(\"The input is not positive\");\n        }\n  \
    \      final int count = num / 100;\n        int evenCount = 0;\n        int oddCount\
    \ = 0;\n        while (count > 0) {\n            final int digit = num % 10;\n\
    \            if (digit % 2 == 0) {\n                evenCount++;\n           \
    \ } else {\n                oddCount++;\n            }\n            num = num\
    \ / 10;\n            count--;\n        }\n        return new Pair<>(evenCount,\
    \ oddCount);\n}\n    public static void main(String[] args) {\n    assert(evenOddCount((7)).equals((Pair.with(0,\
    \ 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1, 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2,\
    \ 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3, 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpmhu5h050.java:28: error: cannot assign a value to final variable\
    \ count\n            count--;\n            ^\n1 error\n"
  stdout: ''
  timestamp: 1660011183
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        Pair<Integer, Integer> pair = new\
    \ Pair<>();\n        BigInteger evenDigs = BigInteger.ZERO;\n        BigInteger\
    \ oddDigs = BigInteger.ZERO;\n\n        int remain = num;\n        while (remain\
    \ > 0) {\n            int currentDigit = remain % 10;\n            remain /= 10;\n\
    \            BigInteger currentBigNum = BigInteger.valueOf(currentDigit);\n  \
    \          if (currentBigNum.equals(BigInteger.ZERO)) {\n                evenDigs\
    \ = evenDigs.add(BigInteger.ONE);\n            } else {\n                evenDigs\
    \ = evenDigs.add(currentBigNum);\n            }\n        }\n\n        remain =\
    \ num;\n        while (remain > 0) {\n            int currentDigit = remain %\
    \ 10;\n            remain /= 10;\n            BigInteger currentBigNum = BigInteger.valueOf(currentDigit);\n\
    \            if (currentBigNum.equals(BigInteger.ZERO)) {\n                oddDigs\
    \ = oddDigs.add(BigInteger.ONE);\n            } else {\n                oddDigs\
    \ = oddDigs.add(currentBigNum);\n            }\n        }\n\n        pair.left\
    \ = evenDigs.divide(oddDigs);\n        pair.right = oddDigs.divide(evenDigs);\n\
    \        return pair;\n}\n    public static void main(String[] args) {\n    assert(evenOddCount((7)).equals((Pair.with(0,\
    \ 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1, 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2,\
    \ 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3, 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmph3z3162k.java:14: error: cannot infer type arguments for Pair<>\n\
    \        Pair<Integer, Integer> pair = new Pair<>();\n                       \
    \               ^\n  reason: cannot infer type-variable(s) A,B\n    (actual and\
    \ formal argument lists differ in length)\n  where A,B are type-variables:\n \
    \   A extends Object declared in class Pair\n    B extends Object declared in\
    \ class Pair\n/tmp/tmph3z3162k.java:42: error: cannot find symbol\n        pair.left\
    \ = evenDigs.divide(oddDigs);\n            ^\n  symbol:   variable left\n  location:\
    \ variable pair of type Pair<Integer,Integer>\n/tmp/tmph3z3162k.java:43: error:\
    \ cannot find symbol\n        pair.right = oddDigs.divide(evenDigs);\n       \
    \     ^\n  symbol:   variable right\n  location: variable pair of type Pair<Integer,Integer>\n\
    3 errors\n"
  stdout: ''
  timestamp: 1660011183
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        return Pair.of(IntStream.range(2,\
    \ num / 2).filter(num -> num % 2 == 0).count(), IntStream.range(2, num / 2).filter(num\
    \ -> num % 2 != 0).count());\n}\n    public static void main(String[] args) {\n\
    \    assert(evenOddCount((7)).equals((Pair.with(0, 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1,\
    \ 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2, 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3, 3))));\n   \
    \ assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpqlq96_sh.java:14: error: cannot find symbol\n        return Pair.of(IntStream.range(2,\
    \ num / 2).filter(num -> num % 2 == 0).count(), IntStream.range(2, num / 2).filter(num\
    \ -> num % 2 != 0).count());\n                   ^\n  symbol:   method of(long,long)\n\
    \  location: class Pair\n/tmp/tmpqlq96_sh.java:14: error: variable num is already\
    \ defined in method evenOddCount(int)\n        return Pair.of(IntStream.range(2,\
    \ num / 2).filter(num -> num % 2 == 0).count(), IntStream.range(2, num / 2).filter(num\
    \ -> num % 2 != 0).count());\n                                               \
    \           ^\n/tmp/tmpqlq96_sh.java:14: error: variable num is already defined\
    \ in method evenOddCount(int)\n        return Pair.of(IntStream.range(2, num /\
    \ 2).filter(num -> num % 2 == 0).count(), IntStream.range(2, num / 2).filter(num\
    \ -> num % 2 != 0).count());\n                                               \
    \                                                                            ^\n\
    3 errors\n"
  stdout: ''
  timestamp: 1660011184
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        int even = 0, odd = 0;\n        while(num\
    \ > 0) {\n            int digit = num % 10;\n            num = num / 10;\n   \
    \         if(digit % 2 == 0) {\n                even++;\n            }else {\n\
    \                odd++;\n            }\n        }\n        return new Pair<>(even,\
    \ odd);\n}\n    public static void main(String[] args) {\n    assert(evenOddCount((7)).equals((Pair.with(0,\
    \ 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1, 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2,\
    \ 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3, 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: 'Error: Unable to initialize main class Problem

    Caused by: java.lang.NoClassDefFoundError: org/javatuples/Pair

    '
  stdout: ''
  timestamp: 1660011185
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        final List<Integer> numbers = new\
    \ ArrayList<>(10);\n        while (num > 0) {\n            numbers.add(num % 10);\n\
    \            num /= 10;\n        }\n        final Set<Integer> oddNumbers = new\
    \ HashSet<>(10);\n        final Set<Integer> evenNumbers = new HashSet<>(10);\n\
    \        for (final int num : numbers) {\n            if (num % 2 == 0) {\n  \
    \              evenNumbers.add(num);\n            } else {\n                oddNumbers.add(num);\n\
    \            }\n        }\n        final Pair<Integer, Integer> evenOddPair =\
    \ new Pair<>(evenNumbers.size(), oddNumbers.size());\n        return evenOddPair;\n\
    }\n    public static void main(String[] args) {\n    assert(evenOddCount((7)).equals((Pair.with(0,\
    \ 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1, 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2,\
    \ 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3, 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpmwr3rvuv.java:21: error: variable num is already defined in method\
    \ evenOddCount(int)\n        for (final int num : numbers) {\n               \
    \        ^\n1 error\n"
  stdout: ''
  timestamp: 1660011184
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        if (num <= 0) {\n            throw\
    \ new IllegalArgumentException(\"Invalid Input - Cannot Count\");\n        }\n\
    \        int evenCount = 0;\n        int oddCount = 0;\n        if (num % 2 !=\
    \ 0) {\n            evenCount = num / 2;\n            oddCount = num % 2;\n  \
    \      } else {\n            oddCount = num / 2;\n            evenCount = (num\
    \ - oddCount) / 2;\n        }\n        return Pair.of(evenCount, oddCount);\n\
    }\n    public static void main(String[] args) {\n    assert(evenOddCount((7)).equals((Pair.with(0,\
    \ 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1, 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2,\
    \ 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3, 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpz94ut0x1.java:26: error: cannot find symbol\n        return Pair.of(evenCount,\
    \ oddCount);\n                   ^\n  symbol:   method of(int,int)\n  location:\
    \ class Pair\n1 error\n"
  stdout: ''
  timestamp: 1660011184
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        if (num < 0) return null;\n      \
    \  int evenCount = 0;\n        int oddCount = 0;\n        int digit;\n       \
    \ // Use a while loop to get the digit of num\n        while (num > 0) {\n   \
    \         digit = num % 10;\n            if (digit % 2 == 0) {\n             \
    \   evenCount++;\n            }\n            else if (digit % 2 != 0) {\n    \
    \            oddCount++;\n            }\n            num = num / 10;\n       \
    \ }\n        return new Tuple<>(evenCount, oddCount);\n}\n    public static void\
    \ main(String[] args) {\n    assert(evenOddCount((7)).equals((Pair.with(0, 1))));\n\
    \    assert(evenOddCount((-78)).equals((Pair.with(1, 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2,\
    \ 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3, 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmputol6b51.java:29: error: cannot infer type arguments for Tuple\n\
    \        return new Tuple<>(evenCount, oddCount);\n                        ^\n\
    \  reason: cannot use '<>' with non-generic class Tuple\n1 error\n"
  stdout: ''
  timestamp: 1660011184
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        // Only odd number is possible (no\
    \ leading zero).\n        if (num < 0) return null;\n        int odd = 0, even\
    \ = 0, countEven = 0;\n        while (true) {\n            int remainder = num\
    \ % 10;\n            num = num / 10;\n            if (remainder == 0) {\n    \
    \            if (countEven++ > 0) even++;\n            } else if (remainder %\
    \ 2 == 0) {\n                even++;\n            } else {\n                odd++;\n\
    \            }\n            if (num == 0) {\n                break;\n        \
    \    }\n        }\n        return Pair.of(even, odd);\n}\n    public static void\
    \ main(String[] args) {\n    assert(evenOddCount((7)).equals((Pair.with(0, 1))));\n\
    \    assert(evenOddCount((-78)).equals((Pair.with(1, 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2,\
    \ 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3, 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpefvid8yb.java:31: error: cannot find symbol\n        return Pair.of(even,\
    \ odd);\n                   ^\n  symbol:   method of(int,int)\n  location: class\
    \ Pair\n1 error\n"
  stdout: ''
  timestamp: 1660011184
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        if (num < 0) {\n            return\
    \ null;\n        }\n        int[] digits = new int[num / 10];\n        int count\
    \ = 0;\n        while (num > 0) {\n            digits[num % 10] = num % 10;\n\
    \            count++;\n            num /= 10;\n        }\n        Pair<Integer,\
    \ Integer> pair = new Pair<>();\n        if (count == 1) {\n            pair.first\
    \ = digits[0];\n            pair.second = digits[0];\n        } else if (count\
    \ % 2 == 0) {\n            pair.first = digits[count / 2];\n            pair.second\
    \ = digits[count / 2];\n        } else {\n            pair.first = digits[count\
    \ - 1];\n            pair.second = digits[count - 1];\n        }\n        return\
    \ pair;\n}\n    public static void main(String[] args) {\n    assert(evenOddCount((7)).equals((Pair.with(0,\
    \ 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1, 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2,\
    \ 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3, 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpo1svmy0g.java:24: error: cannot infer type arguments for Pair<>\n\
    \        Pair<Integer, Integer> pair = new Pair<>();\n                       \
    \               ^\n  reason: cannot infer type-variable(s) A,B\n    (actual and\
    \ formal argument lists differ in length)\n  where A,B are type-variables:\n \
    \   A extends Object declared in class Pair\n    B extends Object declared in\
    \ class Pair\n/tmp/tmpo1svmy0g.java:26: error: cannot find symbol\n          \
    \  pair.first = digits[0];\n                ^\n  symbol:   variable first\n  location:\
    \ variable pair of type Pair<Integer,Integer>\n/tmp/tmpo1svmy0g.java:27: error:\
    \ cannot find symbol\n            pair.second = digits[0];\n                ^\n\
    \  symbol:   variable second\n  location: variable pair of type Pair<Integer,Integer>\n\
    /tmp/tmpo1svmy0g.java:29: error: cannot find symbol\n            pair.first =\
    \ digits[count / 2];\n                ^\n  symbol:   variable first\n  location:\
    \ variable pair of type Pair<Integer,Integer>\n/tmp/tmpo1svmy0g.java:30: error:\
    \ cannot find symbol\n            pair.second = digits[count / 2];\n         \
    \       ^\n  symbol:   variable second\n  location: variable pair of type Pair<Integer,Integer>\n\
    /tmp/tmpo1svmy0g.java:32: error: cannot find symbol\n            pair.first =\
    \ digits[count - 1];\n                ^\n  symbol:   variable first\n  location:\
    \ variable pair of type Pair<Integer,Integer>\n/tmp/tmpo1svmy0g.java:33: error:\
    \ cannot find symbol\n            pair.second = digits[count - 1];\n         \
    \       ^\n  symbol:   variable second\n  location: variable pair of type Pair<Integer,Integer>\n\
    7 errors\n"
  stdout: ''
  timestamp: 1660011184
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        Map<Integer, Integer> evenCounts =\
    \ new HashMap<>();\n        Map<Integer, Integer> oddCounts = new HashMap<>();\n\
    \n        BigDecimal bigDecimal = BigDecimal.valueOf(num);\n        int lastDigit\
    \ = bigDecimal.intValue();\n\n        while (lastDigit >= 10) {\n            lastDigit\
    \ /= 10;\n            int currentDigit = lastDigit % 10;\n            if (evenCounts.get(currentDigit)\
    \ == null)\n                evenCounts.put(currentDigit, 0);\n            evenCounts.put(currentDigit,\
    \ evenCounts.get(currentDigit) + 1);\n        }\n\n        lastDigit = bigDecimal.intValue();\n\
    \        while (lastDigit >= 1) {\n            lastDigit /= 10;\n            int\
    \ currentDigit = lastDigit % 10;\n            if (oddCounts.get(currentDigit)\
    \ == null)\n                oddCounts.put(currentDigit, 0);\n            oddCounts.put(currentDigit,\
    \ oddCounts.get(currentDigit) + 1);\n        }\n\n        return new Tuple<>(evenCounts.get(0),\
    \ oddCounts.get(0));\n}\n    public static void main(String[] args) {\n    assert(evenOddCount((7)).equals((Pair.with(0,\
    \ 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1, 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2,\
    \ 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3, 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpjnyuznpu.java:37: error: cannot infer type arguments for Tuple\n\
    \        return new Tuple<>(evenCounts.get(0), oddCounts.get(0));\n          \
    \              ^\n  reason: cannot use '<>' with non-generic class Tuple\n1 error\n"
  stdout: ''
  timestamp: 1660011185
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        // Your code here!\n        \n   \
    \     \n        \n        return null;\n}\n    public static void main(String[]\
    \ args) {\n    assert(evenOddCount((7)).equals((Pair.with(0, 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1,\
    \ 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2, 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3, 3))));\n   \
    \ assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: 'Error: Unable to initialize main class Problem

    Caused by: java.lang.NoClassDefFoundError: org/javatuples/Pair

    '
  stdout: ''
  timestamp: 1660011185
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        // TODO: Implement this method\n \
    \       return null;\n}\n    public static void main(String[] args) {\n    assert(evenOddCount((7)).equals((Pair.with(0,\
    \ 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1, 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2,\
    \ 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3, 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: 'Error: Unable to initialize main class Problem

    Caused by: java.lang.NoClassDefFoundError: org/javatuples/Pair

    '
  stdout: ''
  timestamp: 1660011185
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        int even = 0;\n        int odd = 0;\n\
    \        int len = num.toString(10).length();\n        for (int i = 0; i < len;\
    \ i++) {\n            if (num % 10 == 0) {\n                even++;\n        \
    \    }\n            if (num % 10 != 0) {\n                odd++;\n           \
    \ }\n            num++;\n        }\n        return new Pair<>(even, odd);\n}\n\
    \    public static void main(String[] args) {\n    assert(evenOddCount((7)).equals((Pair.with(0,\
    \ 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1, 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2,\
    \ 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3, 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpepq25_gm.java:16: error: int cannot be dereferenced\n        int\
    \ len = num.toString(10).length();\n                     ^\n1 error\n"
  stdout: ''
  timestamp: 1660011185
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        Pair<Integer, Integer> tuple = new\
    \ Pair<Integer, Integer>(0, 0);\n        for(int i = 0; i< num / 10; i++) {\n\
    \            int remainder = num % 10;\n            if(remainder % 2 == 0) {\n\
    \                tuple.increment(0, 1);\n            }\n            else {\n \
    \               tuple.increment(1, 1);\n            }\n            num = num /\
    \ 10;\n        }\n        return tuple;\n}\n    public static void main(String[]\
    \ args) {\n    assert(evenOddCount((7)).equals((Pair.with(0, 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1,\
    \ 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2, 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3, 3))));\n   \
    \ assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpsztjn3_5.java:18: error: cannot find symbol\n                tuple.increment(0,\
    \ 1);\n                     ^\n  symbol:   method increment(int,int)\n  location:\
    \ variable tuple of type Pair<Integer,Integer>\n/tmp/tmpsztjn3_5.java:21: error:\
    \ cannot find symbol\n                tuple.increment(1, 1);\n               \
    \      ^\n  symbol:   method increment(int,int)\n  location: variable tuple of\
    \ type Pair<Integer,Integer>\n2 errors\n"
  stdout: ''
  timestamp: 1660011185
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        int total = 0;\n        Pair<Integer,\
    \ Integer> pair;\n        int i = 1;\n        while(i < num) {\n            int\
    \ c = num % 10;\n            total += (c == 2 ? 1 : 0);\n            num = num\
    \ / 10;\n            i++;\n        }\n        if(total % 2 != 0) {\n         \
    \   pair = new Pair<>(total / 2, 0);\n        } else {\n            pair = new\
    \ Pair<>(total / 2 + 1, 1);\n        }\n        return pair;\n}\n    public static\
    \ void main(String[] args) {\n    assert(evenOddCount((7)).equals((Pair.with(0,\
    \ 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1, 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2,\
    \ 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3, 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: 'Error: Unable to initialize main class Problem

    Caused by: java.lang.NoClassDefFoundError: org/javatuples/Pair

    '
  stdout: ''
  timestamp: 1660011185
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        // Write your code here\n        //\
    \ return Pair.of(even_digits, odd_digits);\n        Pair<Integer, Integer> pair\
    \ = new Pair<>();\n        StringBuilder evenDigits = new StringBuilder();\n \
    \       StringBuilder oddDigits = new StringBuilder();\n        int n = num;\n\
    \        int digits = Integer.MAX_VALUE;\n        int[] numbers = num == 0 ? new\
    \ int[0] : new int[(int)Math.ceil(Math.log10(num))];\n        // find out number\
    \ of digits\n        while (n > 0) {\n            numbers[--digits] = (n % 10);\n\
    \            n /= 10;\n        }\n        for (int i = 0; i < digits; i++)\n \
    \           if (numbers[i] != 0)\n                evenDigits.append(numbers[i]);\n\
    \        for (int i = digits; i > 0; i--)\n            if (numbers[i] != 0)\n\
    \                oddDigits.append(numbers[i]);\n        pair.first = Integer.parseInt(evenDigits.toString());\n\
    \        pair.second = Integer.parseInt(oddDigits.toString());\n        return\
    \ pair;\n}\n    public static void main(String[] args) {\n    assert(evenOddCount((7)).equals((Pair.with(0,\
    \ 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1, 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2,\
    \ 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3, 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmprrpzt7pr.java:16: error: cannot infer type arguments for Pair<>\n\
    \        Pair<Integer, Integer> pair = new Pair<>();\n                       \
    \               ^\n  reason: cannot infer type-variable(s) A,B\n    (actual and\
    \ formal argument lists differ in length)\n  where A,B are type-variables:\n \
    \   A extends Object declared in class Pair\n    B extends Object declared in\
    \ class Pair\n/tmp/tmprrpzt7pr.java:33: error: cannot find symbol\n        pair.first\
    \ = Integer.parseInt(evenDigits.toString());\n            ^\n  symbol:   variable\
    \ first\n  location: variable pair of type Pair<Integer,Integer>\n/tmp/tmprrpzt7pr.java:34:\
    \ error: cannot find symbol\n        pair.second = Integer.parseInt(oddDigits.toString());\n\
    \            ^\n  symbol:   variable second\n  location: variable pair of type\
    \ Pair<Integer,Integer>\n3 errors\n"
  stdout: ''
  timestamp: 1660011185
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        return Pair.create(num / 2, num %\
    \ 2 == 0 ? 1 : num % 2 == 1 ? 2 : 0);\n}\n    public static void main(String[]\
    \ args) {\n    assert(evenOddCount((7)).equals((Pair.with(0, 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1,\
    \ 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2, 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3, 3))));\n   \
    \ assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpmje70z4l.java:14: error: cannot find symbol\n        return Pair.create(num\
    \ / 2, num % 2 == 0 ? 1 : num % 2 == 1 ? 2 : 0);\n                   ^\n  symbol:\
    \   method create(int,int)\n  location: class Pair\n1 error\n"
  stdout: ''
  timestamp: 1660011185
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        int zeroCount = 0;\n        int oddCount\
    \ = 0;\n        int n = num;\n        while(n >= 10) {\n            n = n/10;\n\
    \            oddCount++;\n        }\n        while(n > 0) {\n            n = n/10;\n\
    \            zeroCount++;\n        }\n        return new Pair<>(zeroCount, oddCount);\n\
    }\n    public static void main(String[] args) {\n    assert(evenOddCount((7)).equals((Pair.with(0,\
    \ 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1, 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2,\
    \ 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3, 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: 'Error: Unable to initialize main class Problem

    Caused by: java.lang.NoClassDefFoundError: org/javatuples/Pair

    '
  stdout: ''
  timestamp: 1660011185
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        if (num < 0)\n            return null;\n\
    \        Pair<Integer, Integer> pair = new Pair<Integer, Integer>();\n       \
    \ pair = num % 2 != 0 ? pair.add(1L << num % 2) : null;\n        pair = num %\
    \ 2 != 0 ? pair.add(1L << (num % 2)) : null;\n        return pair;\n}\n    public\
    \ static void main(String[] args) {\n    assert(evenOddCount((7)).equals((Pair.with(0,\
    \ 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1, 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2,\
    \ 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3, 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpluuv0h_w.java:16: error: constructor Pair in class Pair<A,B> cannot\
    \ be applied to given types;\n        Pair<Integer, Integer> pair = new Pair<Integer,\
    \ Integer>();\n                                      ^\n  required: Integer,Integer\n\
    \  found:    no arguments\n  reason: actual and formal argument lists differ in\
    \ length\n  where A,B are type-variables:\n    A extends Object declared in class\
    \ Pair\n    B extends Object declared in class Pair\n/tmp/tmpluuv0h_w.java:17:\
    \ error: incompatible types: bad type in conditional expression\n        pair\
    \ = num % 2 != 0 ? pair.add(1L << num % 2) : null;\n                         \
    \             ^\n    no instance(s) of type variable(s) X0 exist so that Triplet<Integer,Integer,X0>\
    \ conforms to Pair<Integer,Integer>\n  where X0,A,B are type-variables:\n    X0\
    \ extends Object declared in method <X0>add(X0)\n    A extends Object declared\
    \ in class Pair\n    B extends Object declared in class Pair\n/tmp/tmpluuv0h_w.java:18:\
    \ error: incompatible types: bad type in conditional expression\n        pair\
    \ = num % 2 != 0 ? pair.add(1L << (num % 2)) : null;\n                       \
    \               ^\n    no instance(s) of type variable(s) X0 exist so that Triplet<Integer,Integer,X0>\
    \ conforms to Pair<Integer,Integer>\n  where X0,A,B are type-variables:\n    X0\
    \ extends Object declared in method <X0>add(X0)\n    A extends Object declared\
    \ in class Pair\n    B extends Object declared in class Pair\n3 errors\n"
  stdout: ''
  timestamp: 1660011185
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        Pair<Integer, Integer> even_odd_count\
    \ = new Pair<>();\n        int x = num;\n        int numOdd = 0;\n        int\
    \ numEven = 0;\n        while (x > 0) {\n            x /= 10;\n            if\
    \ (x % 2 != 0) {\n                numEven++;\n            }\n            else\
    \ {\n                numOdd++;\n            }\n        }\n        even_odd_count.setFirst(numEven);\n\
    \        even_odd_count.setSecond(numOdd);\n        return even_odd_count;\n}\n\
    \    public static void main(String[] args) {\n    assert(evenOddCount((7)).equals((Pair.with(0,\
    \ 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1, 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2,\
    \ 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3, 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpqq3bqpc1.java:14: error: cannot infer type arguments for Pair<>\n\
    \        Pair<Integer, Integer> even_odd_count = new Pair<>();\n             \
    \                                   ^\n  reason: cannot infer type-variable(s)\
    \ A,B\n    (actual and formal argument lists differ in length)\n  where A,B are\
    \ type-variables:\n    A extends Object declared in class Pair\n    B extends\
    \ Object declared in class Pair\n/tmp/tmpqq3bqpc1.java:27: error: cannot find\
    \ symbol\n        even_odd_count.setFirst(numEven);\n                      ^\n\
    \  symbol:   method setFirst(int)\n  location: variable even_odd_count of type\
    \ Pair<Integer,Integer>\n/tmp/tmpqq3bqpc1.java:28: error: cannot find symbol\n\
    \        even_odd_count.setSecond(numOdd);\n                      ^\n  symbol:\
    \   method setSecond(int)\n  location: variable even_odd_count of type Pair<Integer,Integer>\n\
    3 errors\n"
  stdout: ''
  timestamp: 1660011185
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        int even = 0;\n        int odd = 0;\n\
    \        BigInteger num1 = new BigInteger(String.valueOf(num));\n        BigInteger\
    \ even = num1.divide(BigInteger.valueOf(10));\n        BigInteger odd = num1.remainder(BigInteger.valueOf(10));\n\
    \        System.out.println(even.toString());\n        System.out.println(odd.toString());\n\
    \        return Pair.of(even, odd);\n}\n    public static void main(String[] args)\
    \ {\n    assert(evenOddCount((7)).equals((Pair.with(0, 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1,\
    \ 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2, 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3, 3))));\n   \
    \ assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpnsy7vqkl.java:17: error: variable even is already defined in method\
    \ evenOddCount(int)\n        BigInteger even = num1.divide(BigInteger.valueOf(10));\n\
    \                   ^\n/tmp/tmpnsy7vqkl.java:18: error: variable odd is already\
    \ defined in method evenOddCount(int)\n        BigInteger odd = num1.remainder(BigInteger.valueOf(10));\n\
    \                   ^\n/tmp/tmpnsy7vqkl.java:21: error: cannot find symbol\n \
    \       return Pair.of(even, odd);\n                   ^\n  symbol:   method of(BigInteger,BigInteger)\n\
    \  location: class Pair\n3 errors\n"
  stdout: ''
  timestamp: 1660011185
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        if (num == 0) {\n            return\
    \ Pair.of(0, 0);\n        }\n\n        int oddCount = 0;\n        int evenCount\
    \ = 0;\n\n        while (num >= 0) {\n            int digit = num % 10;\n    \
    \        num = num / 10;\n            if (digit % 2 == 0) {\n                evenCount++;\n\
    \            } else {\n                oddCount++;\n            }\n        }\n\
    \n        return Pair.of(evenCount, oddCount);\n}\n    public static void main(String[]\
    \ args) {\n    assert(evenOddCount((7)).equals((Pair.with(0, 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1,\
    \ 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2, 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3, 3))));\n   \
    \ assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpvp4k5lz2.java:15: error: cannot find symbol\n            return\
    \ Pair.of(0, 0);\n                       ^\n  symbol:   method of(int,int)\n \
    \ location: class Pair\n/tmp/tmpvp4k5lz2.java:31: error: cannot find symbol\n\
    \        return Pair.of(evenCount, oddCount);\n                   ^\n  symbol:\
    \   method of(int,int)\n  location: class Pair\n2 errors\n"
  stdout: ''
  timestamp: 1660011185
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        // Write your code here.\n       \
    \ int odd_count = 1;\n        int even_count = 1;\n        if(num < 0) {\n   \
    \         num = -num;\n            odd_count = evenOddCount(-num);\n         \
    \   even_count = evenOddCount(num);\n        }\n        int reminder = num;\n\
    \        while(num > 0) {\n            reminder = num % 10;\n            if((num\
    \ / 10) % 2 == 0) {\n                even_count++;\n            } else {\n   \
    \             odd_count++;\n            }\n            num = num / 10;\n     \
    \   }\n        return new Pair(even_count, odd_count);\n}\n    public static void\
    \ main(String[] args) {\n    assert(evenOddCount((7)).equals((Pair.with(0, 1))));\n\
    \    assert(evenOddCount((-78)).equals((Pair.with(1, 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2,\
    \ 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3, 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp6dpabmhv.java:19: error: incompatible types: Pair<Integer,Integer>\
    \ cannot be converted to int\n            odd_count = evenOddCount(-num);\n  \
    \                                  ^\n/tmp/tmp6dpabmhv.java:20: error: incompatible\
    \ types: Pair<Integer,Integer> cannot be converted to int\n            even_count\
    \ = evenOddCount(num);\n                                     ^\nNote: /tmp/tmp6dpabmhv.java\
    \ uses unchecked or unsafe operations.\nNote: Recompile with -Xlint:unchecked\
    \ for details.\n2 errors\n"
  stdout: ''
  timestamp: 1660011185
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        \n        // Convert the integer to\
    \ an array\n        Integer[] intArray = IntStream.rangeClosed(-num.intValue(),\
    \ num.intValue()).mapToObj(Integer::valueOf).toArray(Integer[]::new);\n      \
    \  \n        // Loop through the array and add each even and odd number into a\
    \ pair.\n        Pair<Integer, Integer> pair = new Pair<Integer, Integer>(0, 0);\n\
    \        for(int i = 0; i < intArray.length; i++) {\n            if(intArray[i]\
    \ % 2 == 0) {\n                pair.first += 1;\n            }\n            if(intArray[i]\
    \ % 2 == 1) {\n                pair.second += 1;\n            }\n        }\n \
    \       return pair;\n}\n    public static void main(String[] args) {\n    assert(evenOddCount((7)).equals((Pair.with(0,\
    \ 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1, 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2,\
    \ 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3, 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp3urzgwkk.java:16: error: int cannot be dereferenced\n        Integer[]\
    \ intArray = IntStream.rangeClosed(-num.intValue(), num.intValue()).mapToObj(Integer::valueOf).toArray(Integer[]::new);\n\
    \                                                       ^\n/tmp/tmp3urzgwkk.java:16:\
    \ error: int cannot be dereferenced\n        Integer[] intArray = IntStream.rangeClosed(-num.intValue(),\
    \ num.intValue()).mapToObj(Integer::valueOf).toArray(Integer[]::new);\n      \
    \                                                                 ^\n/tmp/tmp3urzgwkk.java:22:\
    \ error: cannot find symbol\n                pair.first += 1;\n              \
    \      ^\n  symbol:   variable first\n  location: variable pair of type Pair<Integer,Integer>\n\
    /tmp/tmp3urzgwkk.java:25: error: cannot find symbol\n                pair.second\
    \ += 1;\n                    ^\n  symbol:   variable second\n  location: variable\
    \ pair of type Pair<Integer,Integer>\n4 errors\n"
  stdout: ''
  timestamp: 1660011185
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        Pair<Integer, Integer> result = new\
    \ Pair<>();\n        int i = 0;\n        while (true) {\n            if (i % 2\
    \ == 0) {\n                result.first++;\n            } else {\n           \
    \     result.second++;\n            }\n            i++;\n        }\n        if\
    \ (num == 0) {\n            return result;\n        }\n        int count = 0;\n\
    \        while (true) {\n            while (num % 10 == 0) {\n               \
    \ num++;\n                count++;\n            }\n            num /= 10;\n  \
    \          if (num == 0) {\n                break;\n            }\n          \
    \  count++;\n        }\n        return new Pair<>(result.first, count);\n}\n \
    \   public static void main(String[] args) {\n    assert(evenOddCount((7)).equals((Pair.with(0,\
    \ 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1, 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2,\
    \ 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3, 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpawmnnblt.java:14: error: cannot infer type arguments for Pair<>\n\
    \        Pair<Integer, Integer> result = new Pair<>();\n                     \
    \                   ^\n  reason: cannot infer type-variable(s) A,B\n    (actual\
    \ and formal argument lists differ in length)\n  where A,B are type-variables:\n\
    \    A extends Object declared in class Pair\n    B extends Object declared in\
    \ class Pair\n/tmp/tmpawmnnblt.java:18: error: cannot find symbol\n          \
    \      result.first++;\n                      ^\n  symbol:   variable first\n\
    \  location: variable result of type Pair<Integer,Integer>\n/tmp/tmpawmnnblt.java:20:\
    \ error: cannot find symbol\n                result.second++;\n              \
    \        ^\n  symbol:   variable second\n  location: variable result of type Pair<Integer,Integer>\n\
    /tmp/tmpawmnnblt.java:39: error: cannot find symbol\n        return new Pair<>(result.first,\
    \ count);\n                                ^\n  symbol:   variable first\n  location:\
    \ variable result of type Pair<Integer,Integer>\n4 errors\n"
  stdout: ''
  timestamp: 1660011185
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        Pair<Integer, Integer> evenOdd = null;\n\
    \        if (num < 0) {\n            evenOdd = new Pair<>(evenOdd.getLeft() +\
    \ 1, evenOdd.getRight());\n        } else {\n            int count = 0;\n    \
    \        while (num > 0) {\n                count += num % 2 == 0 ? 1 : 0;\n \
    \               num /= 10;\n            }\n            if (count == 0) {\n   \
    \             evenOdd = new Pair<>(evenOdd.getLeft() + 1, evenOdd.getRight());\n\
    \            } else {\n                evenOdd = new Pair<>(evenOdd.getLeft()\
    \ + count, evenOdd.getRight());\n            }\n        }\n        return evenOdd;\n\
    }\n    public static void main(String[] args) {\n    assert(evenOddCount((7)).equals((Pair.with(0,\
    \ 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1, 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2,\
    \ 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3, 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpe44cwzpl.java:16: error: cannot find symbol\n            evenOdd\
    \ = new Pair<>(evenOdd.getLeft() + 1, evenOdd.getRight());\n                 \
    \                       ^\n  symbol:   method getLeft()\n  location: variable\
    \ evenOdd of type Pair<Integer,Integer>\n/tmp/tmpe44cwzpl.java:16: error: cannot\
    \ find symbol\n            evenOdd = new Pair<>(evenOdd.getLeft() + 1, evenOdd.getRight());\n\
    \                                                               ^\n  symbol: \
    \  method getRight()\n  location: variable evenOdd of type Pair<Integer,Integer>\n\
    /tmp/tmpe44cwzpl.java:24: error: cannot find symbol\n                evenOdd =\
    \ new Pair<>(evenOdd.getLeft() + 1, evenOdd.getRight());\n                   \
    \                         ^\n  symbol:   method getLeft()\n  location: variable\
    \ evenOdd of type Pair<Integer,Integer>\n/tmp/tmpe44cwzpl.java:24: error: cannot\
    \ find symbol\n                evenOdd = new Pair<>(evenOdd.getLeft() + 1, evenOdd.getRight());\n\
    \                                                                   ^\n  symbol:\
    \   method getRight()\n  location: variable evenOdd of type Pair<Integer,Integer>\n\
    /tmp/tmpe44cwzpl.java:26: error: cannot find symbol\n                evenOdd =\
    \ new Pair<>(evenOdd.getLeft() + count, evenOdd.getRight());\n               \
    \                             ^\n  symbol:   method getLeft()\n  location: variable\
    \ evenOdd of type Pair<Integer,Integer>\n/tmp/tmpe44cwzpl.java:26: error: cannot\
    \ find symbol\n                evenOdd = new Pair<>(evenOdd.getLeft() + count,\
    \ evenOdd.getRight());\n                                                     \
    \                  ^\n  symbol:   method getRight()\n  location: variable evenOdd\
    \ of type Pair<Integer,Integer>\n6 errors\n"
  stdout: ''
  timestamp: 1660011185
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        if (num < 0) {\n            return\
    \ null;\n        }\n\n        int evenCount = 0;\n        int oddCount = 0;\n\
    \        while (num > 0) {\n            int digit = num % 10;\n            if\
    \ (digit % 2 == 0) {\n                evenCount++;\n            } else {\n   \
    \             oddCount++;\n            }\n            num = num / 10;\n      \
    \  }\n        return new Pair<>(evenCount, oddCount);\n}\n    public static void\
    \ main(String[] args) {\n    assert(evenOddCount((7)).equals((Pair.with(0, 1))));\n\
    \    assert(evenOddCount((-78)).equals((Pair.with(1, 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2,\
    \ 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3, 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: 'Error: Unable to initialize main class Problem

    Caused by: java.lang.NoClassDefFoundError: org/javatuples/Pair

    '
  stdout: ''
  timestamp: 1660011186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        ArrayList<Integer> even = new ArrayList<Integer>();\n\
    \        ArrayList<Integer> odd = new ArrayList<Integer>();\n        while (num\
    \ > 0) {\n            int remainder = num % 10;\n            if (remainder % 2\
    \ == 0) {\n                even.add(remainder);\n            } else {\n      \
    \          odd.add(remainder);\n            }\n            num = num / 10;\n \
    \       }\n        return new Tuple<>(even.stream().mapToInt(Integer::intValue).sum(),\n\
    \            odd.stream().mapToInt(Integer::intValue).sum());\n}\n    public static\
    \ void main(String[] args) {\n    assert(evenOddCount((7)).equals((Pair.with(0,\
    \ 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1, 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2,\
    \ 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3, 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp20ylc74s.java:25: error: cannot infer type arguments for Tuple\n\
    \        return new Tuple<>(even.stream().mapToInt(Integer::intValue).sum(),\n\
    \                        ^\n  reason: cannot use '<>' with non-generic class Tuple\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        int evenCount = 0;\n        int oddCount\
    \ = 0;\n        if (num < 0) {\n            throw new IllegalArgumentException();\n\
    \        }\n\n        int digit = num;\n\n        while (num >= 10) {\n      \
    \      digit = num % 10;\n            num = num / 10;\n\n            if (digit\
    \ % 2 == 0) {\n                evenCount++;\n            } else {\n          \
    \      oddCount++;\n            }\n        }\n\n        return new Pair<>(evenCount,\
    \ oddCount);\n}\n    public static void main(String[] args) {\n    assert(evenOddCount((7)).equals((Pair.with(0,\
    \ 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1, 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2,\
    \ 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3, 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: 'Error: Unable to initialize main class Problem

    Caused by: java.lang.NoClassDefFoundError: org/javatuples/Pair

    '
  stdout: ''
  timestamp: 1660011186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        Pair<Integer, Integer> pair = new\
    \ Pair<>(num, 0);\n        for (int x = 1; x < num; x++) {\n            if ((num\
    \ % x) == 0) {\n                pair.first++;\n            } else {\n        \
    \        pair.second++;\n            }\n        }\n        return pair;\n}\n \
    \   public static void main(String[] args) {\n    assert(evenOddCount((7)).equals((Pair.with(0,\
    \ 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1, 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2,\
    \ 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3, 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp6ndmpik5.java:17: error: cannot find symbol\n                pair.first++;\n\
    \                    ^\n  symbol:   variable first\n  location: variable pair\
    \ of type Pair<Integer,Integer>\n/tmp/tmp6ndmpik5.java:19: error: cannot find\
    \ symbol\n                pair.second++;\n                    ^\n  symbol:   variable\
    \ second\n  location: variable pair of type Pair<Integer,Integer>\n2 errors\n"
  stdout: ''
  timestamp: 1660011186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        int evenCount = 0;\n        int oddCount\
    \ = 0;\n        int remainder = num % 10;\n        while (remainder > 0) {\n \
    \           evenCount++;\n            remainder = num % 10;\n            num =\
    \ num / 10;\n        }\n        while (num > 0) {\n            oddCount++;\n \
    \           num = num / 10;\n        }\n        return Pair.of(evenCount, oddCount);\n\
    }\n    public static void main(String[] args) {\n    assert(evenOddCount((7)).equals((Pair.with(0,\
    \ 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1, 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2,\
    \ 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3, 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpvdnfkece.java:26: error: cannot find symbol\n        return Pair.of(evenCount,\
    \ oddCount);\n                   ^\n  symbol:   method of(int,int)\n  location:\
    \ class Pair\n1 error\n"
  stdout: ''
  timestamp: 1660011186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        // write code here\n        int even\
    \ = 0;\n        int odd = 0;\n        int num2 = num / 10;\n        int rest =\
    \ num % 10;\n        if (num2 == 0) {\n            even = 1;\n        } else if\
    \ (rest % 2 == 0) {\n            even++;\n        }\n        if (rest % 2 != 0)\
    \ {\n            odd++;\n        }\n        return Pair.create(even, odd);\n}\n\
    \    public static void main(String[] args) {\n    assert(evenOddCount((7)).equals((Pair.with(0,\
    \ 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1, 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2,\
    \ 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3, 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpv7hrqdyi.java:27: error: cannot find symbol\n        return Pair.create(even,\
    \ odd);\n                   ^\n  symbol:   method create(int,int)\n  location:\
    \ class Pair\n1 error\n"
  stdout: ''
  timestamp: 1660011186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        Pair<Integer, Integer> evenOdd = Pair.of(1,\
    \ 1);\n        int digitCount = 1;\n        while (num > 0) {\n            digitCount++;\n\
    \            num = num / 10;\n        }\n        evenOdd = evenOdd.pairWith(digitCount,\
    \ digitCount - 1);\n        return evenOdd;\n}\n    public static void main(String[]\
    \ args) {\n    assert(evenOddCount((7)).equals((Pair.with(0, 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1,\
    \ 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2, 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3, 3))));\n   \
    \ assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpdyj53wxs.java:14: error: cannot find symbol\n        Pair<Integer,\
    \ Integer> evenOdd = Pair.of(1, 1);\n                                        \
    \     ^\n  symbol:   method of(int,int)\n  location: class Pair\n/tmp/tmpdyj53wxs.java:20:\
    \ error: cannot find symbol\n        evenOdd = evenOdd.pairWith(digitCount, digitCount\
    \ - 1);\n                         ^\n  symbol:   method pairWith(int,int)\n  location:\
    \ variable evenOdd of type Pair<Integer,Integer>\n2 errors\n"
  stdout: ''
  timestamp: 1660011186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        int even = 0, odd = 0;\n        while\
    \ (num > 0) {\n            if (num % 2 == 0) {\n                even++;\n    \
    \        } else {\n                odd++;\n            }\n            num = num\
    \ / 2;\n        }\n        return new Pair<>(even, odd);\n}\n    public static\
    \ void main(String[] args) {\n    assert(evenOddCount((7)).equals((Pair.with(0,\
    \ 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1, 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2,\
    \ 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3, 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: 'Error: Unable to initialize main class Problem

    Caused by: java.lang.NoClassDefFoundError: org/javatuples/Pair

    '
  stdout: ''
  timestamp: 1660011186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        Pair<Integer, Integer> pair = Pair.create(0,0);\n\
    \        int even = 0;\n        int odd = 0;\n        int digit = 0;\n       \
    \ while (digit < 10) {\n            int rem = num % 10;\n            num = (int)\
    \ num / 10;\n            pair = Pair.create(pair.first + ((rem % 2 == 0) ? 1 :\
    \ 0), pair.second + ((rem % 2 == 0) ? 0 : 1));\n            even = even * 10 +\
    \ (rem % 10);\n            odd = odd * 10 + (rem % 10);\n            digit++;\n\
    \        }\n        return Pair.create(pair.getFirst() + even, pair.getSecond()\
    \ + odd);\n}\n    public static void main(String[] args) {\n    assert(evenOddCount((7)).equals((Pair.with(0,\
    \ 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1, 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2,\
    \ 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3, 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmphpu35hck.java:14: error: cannot find symbol\n        Pair<Integer,\
    \ Integer> pair = Pair.create(0,0);\n                                        \
    \  ^\n  symbol:   method create(int,int)\n  location: class Pair\n/tmp/tmphpu35hck.java:21:\
    \ error: cannot find symbol\n            pair = Pair.create(pair.first + ((rem\
    \ % 2 == 0) ? 1 : 0), pair.second + ((rem % 2 == 0) ? 0 : 1));\n             \
    \                      ^\n  symbol:   variable first\n  location: variable pair\
    \ of type Pair<Integer,Integer>\n/tmp/tmphpu35hck.java:21: error: cannot find\
    \ symbol\n            pair = Pair.create(pair.first + ((rem % 2 == 0) ? 1 : 0),\
    \ pair.second + ((rem % 2 == 0) ? 0 : 1));\n                                 \
    \                                         ^\n  symbol:   variable second\n  location:\
    \ variable pair of type Pair<Integer,Integer>\n/tmp/tmphpu35hck.java:26: error:\
    \ cannot find symbol\n        return Pair.create(pair.getFirst() + even, pair.getSecond()\
    \ + odd);\n                               ^\n  symbol:   method getFirst()\n \
    \ location: variable pair of type Pair<Integer,Integer>\n/tmp/tmphpu35hck.java:26:\
    \ error: cannot find symbol\n        return Pair.create(pair.getFirst() + even,\
    \ pair.getSecond() + odd);\n                                                 \
    \      ^\n  symbol:   method getSecond()\n  location: variable pair of type Pair<Integer,Integer>\n\
    5 errors\n"
  stdout: ''
  timestamp: 1660011186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        int[] array = new int[num+1];\n  \
    \      int index = num;\n        array[index] = 1;\n        while (num > 0) {\n\
    \            int remainder = num % 10;\n            num = num / 10;\n        \
    \    array[index] += remainder % 2;\n            index++;\n        }\n       \
    \ return new Pair<>(array[index], array[index-1]);\n}\n    public static void\
    \ main(String[] args) {\n    assert(evenOddCount((7)).equals((Pair.with(0, 1))));\n\
    \    assert(evenOddCount((-78)).equals((Pair.with(1, 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2,\
    \ 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3, 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: 'Error: Unable to initialize main class Problem

    Caused by: java.lang.NoClassDefFoundError: org/javatuples/Pair

    '
  stdout: ''
  timestamp: 1660011186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        Pair odds = new Pair(0, 1);\n    \
    \    Pair evens = new Pair(0, 1);\n        while (num > 0) {\n            if (num\
    \ % 2 != 0) {\n                evens.first++;\n            } else {\n        \
    \        odds.first++;\n            }\n            num = num / 10;\n        }\n\
    \        return new Pair(evens.first, odds.first);\n}\n    public static void\
    \ main(String[] args) {\n    assert(evenOddCount((7)).equals((Pair.with(0, 1))));\n\
    \    assert(evenOddCount((-78)).equals((Pair.with(1, 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2,\
    \ 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3, 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpc9o43nko.java:18: error: cannot find symbol\n                evens.first++;\n\
    \                     ^\n  symbol:   variable first\n  location: variable evens\
    \ of type Pair\n/tmp/tmpc9o43nko.java:20: error: cannot find symbol\n        \
    \        odds.first++;\n                    ^\n  symbol:   variable first\n  location:\
    \ variable odds of type Pair\n/tmp/tmpc9o43nko.java:24: error: cannot find symbol\n\
    \        return new Pair(evens.first, odds.first);\n                         \
    \    ^\n  symbol:   variable first\n  location: variable evens of type Pair\n\
    /tmp/tmpc9o43nko.java:24: error: cannot find symbol\n        return new Pair(evens.first,\
    \ odds.first);\n                                         ^\n  symbol:   variable\
    \ first\n  location: variable odds of type Pair\nNote: /tmp/tmpc9o43nko.java uses\
    \ unchecked or unsafe operations.\nNote: Recompile with -Xlint:unchecked for details.\n\
    4 errors\n"
  stdout: ''
  timestamp: 1660011186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        int evenCount = 0;\n        int oddCount\
    \ = 0;\n        while (num != 0) {\n            int remain = num % 10;\n     \
    \       if (remain % 2 == 0) {\n                evenCount += 1;\n            }\n\
    \            num = num / 10;\n        }\n        return (new IntPair(evenCount,\
    \ oddCount));\n}\n    public static void main(String[] args) {\n    assert(evenOddCount((7)).equals((Pair.with(0,\
    \ 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1, 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2,\
    \ 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3, 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpbh5wwmr8.java:23: error: cannot find symbol\n        return (new\
    \ IntPair(evenCount, oddCount));\n                    ^\n  symbol:   class IntPair\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        int count = 0;\n        for (int i\
    \ = Math.abs(num); i > 0; i = i / 10) {\n            count++;\n            if\
    \ (num / i > 0)\n                num -= i;\n        }\n        if (num == 0)\n\
    \            return new Pair<Integer, Integer>(1, 0);\n        return new Pair<Integer,\
    \ Integer>(count, count / 2);\n}\n    public static void main(String[] args) {\n\
    \    assert(evenOddCount((7)).equals((Pair.with(0, 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1,\
    \ 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2, 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3, 3))));\n   \
    \ assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: 'Error: Unable to initialize main class Problem

    Caused by: java.lang.NoClassDefFoundError: org/javatuples/Pair

    '
  stdout: ''
  timestamp: 1660011186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        // Write your code here\n        int\
    \ even = 0, odd = 0;\n        int mod = num;\n        while (mod > 0) {\n    \
    \        if (mod % 2 == 0) {\n                even += 1;\n            }\n    \
    \        else {\n                odd += 1;\n            }\n            mod /=\
    \ 10;\n        }\n        return new ImmutablePair<>(even, odd);\n}\n    public\
    \ static void main(String[] args) {\n    assert(evenOddCount((7)).equals((Pair.with(0,\
    \ 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1, 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2,\
    \ 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3, 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpng5f_t66.java:26: error: cannot find symbol\n        return new\
    \ ImmutablePair<>(even, odd);\n                   ^\n  symbol:   class ImmutablePair\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        Pair<Integer, Integer> pair = new\
    \ Pair<Integer, Integer>(num % 10, num % 10);\n        System.out.println(pair.first\
    \ + \",\" + pair.second);\n        if(num > 0){\n            pair = evenOddCount(num/10);\n\
    \        }\n        return pair;\n}\n    public static void main(String[] args)\
    \ {\n    assert(evenOddCount((7)).equals((Pair.with(0, 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1,\
    \ 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2, 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3, 3))));\n   \
    \ assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpw9vccfia.java:15: error: cannot find symbol\n        System.out.println(pair.first\
    \ + \",\" + pair.second);\n                               ^\n  symbol:   variable\
    \ first\n  location: variable pair of type Pair<Integer,Integer>\n/tmp/tmpw9vccfia.java:15:\
    \ error: cannot find symbol\n        System.out.println(pair.first + \",\" + pair.second);\n\
    \                                                  ^\n  symbol:   variable second\n\
    \  location: variable pair of type Pair<Integer,Integer>\n2 errors\n"
  stdout: ''
  timestamp: 1660011186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        int count = 0;\n        boolean even\
    \ = true;\n        boolean odd = true;\n\n        while (num > 0) {\n        \
    \    int digit = num % 10;\n            if (digit == 0 || digit == -1) { //only\
    \ even digit\n                count++;\n                num /= 10;\n         \
    \   } else {\n                num = num / 10;\n                if (even) {\n \
    \                   even = false;\n                    odd ^= true;\n        \
    \        } else {\n                    even = true;\n                    odd ^=\
    \ false;\n                }\n            }\n        }\n        return new Pair<>(count,\
    \ odd);\n}\n    public static void main(String[] args) {\n    assert(evenOddCount((7)).equals((Pair.with(0,\
    \ 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1, 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2,\
    \ 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3, 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpwlwb152w.java:34: error: incompatible types: cannot infer type\
    \ arguments for Pair<>\n        return new Pair<>(count, odd);\n             \
    \          ^\n    reason: inference variable B has incompatible bounds\n     \
    \ equality constraints: Integer\n      lower bounds: Boolean\n  where B is a type-variable:\n\
    \    B extends Object declared in class Pair\n1 error\n"
  stdout: ''
  timestamp: 1660011186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        BigInteger b1 = new BigInteger(String.valueOf(num));\n\
    \        BigInteger b2 = b1.divide(10);\n        BigInteger b3 = b2.divide(10);\n\
    \        BigInteger b4 = b3.divide(10);\n        BigInteger b5 = b4.divide(10);\n\
    \        BigInteger b6 = b5.divide(10);\n        BigInteger b7 = b6.divide(10);\n\
    \        BigInteger b8 = b7.divide(10);\n        BigInteger b9 = b8.divide(10);\n\
    \        BigInteger b10 = b9.divide(10);\n        BigInteger b11 = b10.divide(10);\n\
    \        BigInteger b12 = b11.divide(10);\n        BigInteger b13 = b12.divide(10);\n\
    \        BigInteger b14 = b13.divide(10);\n        BigInteger b15 = b14.divide(10);\n\
    \        BigInteger b16 = b15.divide(10);\n        BigInteger b17 = b16.divide(10);\n\
    \        BigInteger b18 = b17.divide(10);\n        BigInteger b19 = b18.divide(10);\n\
    \        BigInteger b20 = b19.divide(10);\n        BigInteger b21 = b20.divide(10);\n\
    \        BigInteger b22 = b21.divide(10);\n        BigInteger b23 = b22.divide(10);\n\
    \        BigInteger b24 = b23.divide(10);\n        BigInteger b25 = b24.divide(10);\n\
    \        BigInteger b26 = b25.divide(10);\n        BigInteger b27 = b26.divide(10);\n\
    \        BigInteger b28 = b27.divide(10);\n        BigInteger b29 = b28.divide(10);\n\
    \        BigInteger b30 = b29.divide(10);\n        BigInteger b31 = b30.divide(10);\n\
    \        BigInteger b32 = b31.divide(10);\n        BigInteger b33 = b32.divide(10);\n\
    \        BigInteger b34 = b33.divide(10);\n        BigInteger b35 = b34.divide(10);\n\
    \        BigInteger b36 = b35.divide(10);\n        BigInteger b37 = b36.divide(10);\n\
    \        BigInteger b38 = b37.divide(10);\n        BigInteger b39 = b38.divide(10);\n\
    \        BigInteger b40 = b39.divide(10);\n        BigInteger b41 = b40.divide(10);\n\
    \        BigInteger b42 = b41.divide(10);\n        BigInteger b43 = b42.divide(10);\n\
    \        BigInteger b44 = b43.divide(10);\n        BigInteger b45 = b44.divide(10);\n\
    \        BigInteger b46 = b45.divide(10);\n        \n}\n    public static void\
    \ main(String[] args) {\n    assert(evenOddCount((7)).equals((Pair.with(0, 1))));\n\
    \    assert(evenOddCount((-78)).equals((Pair.with(1, 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2,\
    \ 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3, 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpi46pgyx_.java:15: error: incompatible types: int cannot be converted\
    \ to BigInteger\n        BigInteger b2 = b1.divide(10);\n                    \
    \              ^\n/tmp/tmpi46pgyx_.java:16: error: incompatible types: int cannot\
    \ be converted to BigInteger\n        BigInteger b3 = b2.divide(10);\n       \
    \                           ^\n/tmp/tmpi46pgyx_.java:17: error: incompatible types:\
    \ int cannot be converted to BigInteger\n        BigInteger b4 = b3.divide(10);\n\
    \                                  ^\n/tmp/tmpi46pgyx_.java:18: error: incompatible\
    \ types: int cannot be converted to BigInteger\n        BigInteger b5 = b4.divide(10);\n\
    \                                  ^\n/tmp/tmpi46pgyx_.java:19: error: incompatible\
    \ types: int cannot be converted to BigInteger\n        BigInteger b6 = b5.divide(10);\n\
    \                                  ^\n/tmp/tmpi46pgyx_.java:20: error: incompatible\
    \ types: int cannot be converted to BigInteger\n        BigInteger b7 = b6.divide(10);\n\
    \                                  ^\n/tmp/tmpi46pgyx_.java:21: error: incompatible\
    \ types: int cannot be converted to BigInteger\n        BigInteger b8 = b7.divide(10);\n\
    \                                  ^\n/tmp/tmpi46pgyx_.java:22: error: incompatible\
    \ types: int cannot be converted to BigInteger\n        BigInteger b9 = b8.divide(10);\n\
    \                                  ^\n/tmp/tmpi46pgyx_.java:23: error: incompatible\
    \ types: int cannot be converted to BigInteger\n        BigInteger b10 = b9.divide(10);\n\
    \                                   ^\n/tmp/tmpi46pgyx_.java:24: error: incompatible\
    \ types: int cannot be converted to BigInteger\n        BigInteger b11 = b10.divide(10);\n\
    \                                    ^\n/tmp/tmpi46pgyx_.java:25: error: incompatible\
    \ types: int cannot be converted to BigInteger\n        BigInteger b12 = b11.divide(10);\n\
    \                                    ^\n/tmp/tmpi46pgyx_.java:26: error: incompatible\
    \ types: int cannot be converted to BigInteger\n        BigInteger b13 = b12.divide(10);\n\
    \                                    ^\n/tmp/tmpi46pgyx_.java:27: error: incompati"
  stdout: ''
  timestamp: 1660011186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        if (num < 0) {\n            throw\
    \ new IllegalArgumentException(\"Negative numbers are not supported\");\n    \
    \    }\n        int count = 0;\n        int evenCount = 0;\n        int oddCount\
    \ = 0;\n        int digit = num;\n        do {\n            digit = num / 10;\n\
    \            count++;\n            if (digit % 2 == 0) {\n                evenCount++;\n\
    \            } else {\n                oddCount++;\n            }\n        } while\
    \ (num > 0);\n        return new Pair<>(evenCount, oddCount);\n}\n    public static\
    \ void main(String[] args) {\n    assert(evenOddCount((7)).equals((Pair.with(0,\
    \ 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1, 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2,\
    \ 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3, 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: 'Error: Unable to initialize main class Problem

    Caused by: java.lang.NoClassDefFoundError: org/javatuples/Pair

    '
  stdout: ''
  timestamp: 1660011186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        if (num <= 0) return Pair.of(0, 0);\n\
    \n        int count = 0;\n\n        while (num > 0) {\n            int mod = num\
    \ % 10;\n            num = num / 10;\n            if (mod % 2 == 0) count++;\n\
    \            else if (mod % 2 != 0) count--;\n        }\n\n        return Pair.of(count,\
    \ count);\n}\n    public static void main(String[] args) {\n    assert(evenOddCount((7)).equals((Pair.with(0,\
    \ 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1, 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2,\
    \ 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3, 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpvhstgwe1.java:14: error: cannot find symbol\n        if (num <=\
    \ 0) return Pair.of(0, 0);\n                                 ^\n  symbol:   method\
    \ of(int,int)\n  location: class Pair\n/tmp/tmpvhstgwe1.java:25: error: cannot\
    \ find symbol\n        return Pair.of(count, count);\n                   ^\n \
    \ symbol:   method of(int,int)\n  location: class Pair\n2 errors\n"
  stdout: ''
  timestamp: 1660011186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        \n}\n    public static void main(String[]\
    \ args) {\n    assert(evenOddCount((7)).equals((Pair.with(0, 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1,\
    \ 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2, 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3, 3))));\n   \
    \ assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: '/tmp/tmp_3dk32m0.java:15: error: missing return statement

    }

    ^

    1 error

    '
  stdout: ''
  timestamp: 1660011186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        int even = 0, odd = 0;\n        int\
    \ n = num;\n\n        // Check if number is positive\n        if (n < 0)\n   \
    \         throw new IllegalArgumentException();\n\n        // Check if number\
    \ is even\n        if (num % 2 == 0)\n            even++;\n        else\n    \
    \        odd++;\n\n        // Recur for odd digits\n        if (num > 0) {\n \
    \           int t = num / 10;\n            n = num - t * 10;\n            odd\
    \ += evenOddCount(t);\n        }\n        // Recur for even digits\n        if\
    \ (n > 0 && num != 0) {\n            int t = n / 10;\n            n = n - t *\
    \ 10;\n            even += evenOddCount(t);\n        }\n\n        // Return pair\n\
    \        return Pair.<Integer, Integer>of(even, odd);\n}\n    public static void\
    \ main(String[] args) {\n    assert(evenOddCount((7)).equals((Pair.with(0, 1))));\n\
    \    assert(evenOddCount((-78)).equals((Pair.with(1, 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2,\
    \ 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3, 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpoym6ek8f.java:31: error: bad operand types for binary operator\
    \ '+'\n            odd += evenOddCount(t);\n                ^\n  first type: \
    \ int\n  second type: Pair<Integer,Integer>\n/tmp/tmpoym6ek8f.java:37: error:\
    \ bad operand types for binary operator '+'\n            even += evenOddCount(t);\n\
    \                 ^\n  first type:  int\n  second type: Pair<Integer,Integer>\n\
    /tmp/tmpoym6ek8f.java:41: error: cannot find symbol\n        return Pair.<Integer,\
    \ Integer>of(even, odd);\n                   ^\n  symbol:   method <Integer,Integer>of(int,int)\n\
    \  location: class Pair\n3 errors\n"
  stdout: ''
  timestamp: 1660011186
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        List<Integer> evens = new ArrayList<>();\n\
    \        List<Integer> odds = new ArrayList<>();\n        for(int i = num; i >\
    \ 0; i /= 10) {\n            int rem = i % 10;\n            if (rem % 2 == 0)\
    \ {\n                evens.add(rem);\n            } else {\n                odds.add(rem);\n\
    \            }\n        }\n        return new ImmutablePair<>(evens.stream().filter(i\
    \ -> i % 2 == 0).count(), odds.stream().filter(i -> i % 2 == 1).count());\n}\n\
    \    public static void main(String[] args) {\n    assert(evenOddCount((7)).equals((Pair.with(0,\
    \ 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1, 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2,\
    \ 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3, 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmphc2550l_.java:24: error: cannot find symbol\n        return new\
    \ ImmutablePair<>(evens.stream().filter(i -> i % 2 == 0).count(), odds.stream().filter(i\
    \ -> i % 2 == 1).count());\n                   ^\n  symbol:   class ImmutablePair\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011187
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        Pair<Integer, Integer> evenOdd = null;\n\
    \        if(num < 0) {\n            return evenOdd;\n        }\n        int evenCount\
    \ = 0;\n        int oddCount = 0;\n\n        for(int i = num; i >= 10; i/=10)\
    \ {\n            int digit = i / 10;\n            if(i % 10 == 0) {\n        \
    \        evenCount++;\n            }\n            else {\n                oddCount++;\n\
    \            }\n        }\n        evenOdd = Pair.of(evenCount, oddCount);\n\n\
    \        return evenOdd;\n}\n    public static void main(String[] args) {\n  \
    \  assert(evenOddCount((7)).equals((Pair.with(0, 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1,\
    \ 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2, 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3, 3))));\n   \
    \ assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpng_xuwaf.java:30: error: cannot find symbol\n        evenOdd =\
    \ Pair.of(evenCount, oddCount);\n                      ^\n  symbol:   method of(int,int)\n\
    \  location: class Pair\n1 error\n"
  stdout: ''
  timestamp: 1660011187
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        int even = 0;\n        int odd = 0;\n\
    \        int lengthOfNum = Integer.toString(num).length();\n        if (num <\
    \ 0)\n            return Pair.of(1, 1);\n        int count = 0;\n        int i\
    \ = 1;\n        while (i < lengthOfNum) {\n            int num = Integer.parseInt(Integer.toString(num).substring(i,\
    \ i + 1));\n            if (num % 2 == 0) {\n                even++;\n       \
    \     } else {\n                odd++;\n            }\n            i++;\n    \
    \        count++;\n        }\n        return Pair.of(even, odd);\n}\n    public\
    \ static void main(String[] args) {\n    assert(evenOddCount((7)).equals((Pair.with(0,\
    \ 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1, 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2,\
    \ 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3, 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp_qwbzka5.java:18: error: cannot find symbol\n            return\
    \ Pair.of(1, 1);\n                       ^\n  symbol:   method of(int,int)\n \
    \ location: class Pair\n/tmp/tmp_qwbzka5.java:22: error: variable num is already\
    \ defined in method evenOddCount(int)\n            int num = Integer.parseInt(Integer.toString(num).substring(i,\
    \ i + 1));\n                ^\n/tmp/tmp_qwbzka5.java:31: error: cannot find symbol\n\
    \        return Pair.of(even, odd);\n                   ^\n  symbol:   method\
    \ of(int,int)\n  location: class Pair\n3 errors\n"
  stdout: ''
  timestamp: 1660011187
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        if (num < 0) {\n            throw\
    \ new RuntimeException(\"Invalid Input. Negative numbers are not allowed.\");\n\
    \        }\n\n        List<Integer> list = Arrays.asList(new Integer[]{num});\n\
    \n        List<Integer> evenNums = new ArrayList<Integer>();\n        List<Integer>\
    \ oddNums = new ArrayList<Integer>();\n\n        for (int i = 0; i < list.size();\
    \ i++) {\n            if (list.get(i) % 2 == 0) {\n                evenNums.add(list.get(i));\n\
    \            } else {\n                oddNums.add(list.get(i));\n           \
    \ }\n        }\n\n        return new Pair<Integer, Integer>(evenNums.size(), oddNums.size());\n\
    }\n    public static void main(String[] args) {\n    assert(evenOddCount((7)).equals((Pair.with(0,\
    \ 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1, 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2,\
    \ 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3, 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: 'Error: Unable to initialize main class Problem

    Caused by: java.lang.NoClassDefFoundError: org/javatuples/Pair

    '
  stdout: ''
  timestamp: 1660011188
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        return evenOddCount(num, num);\n}\n\
    \    public static void main(String[] args) {\n    assert(evenOddCount((7)).equals((Pair.with(0,\
    \ 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1, 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2,\
    \ 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3, 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpm347s6pt.java:14: error: method evenOddCount in class Problem cannot\
    \ be applied to given types;\n        return evenOddCount(num, num);\n       \
    \        ^\n  required: int\n  found:    int,int\n  reason: actual and formal\
    \ argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011187
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        int sumEven = 0;\n        int sumOdd\
    \ = 0;\n        int numDigits = num.toString().length();\n        for (int i =\
    \ numDigits - 1; i >= 0; i--) {\n            if (num % 10 == 0) {\n          \
    \      sumEven++;\n            }\n            else {\n                sumOdd++;\n\
    \            }\n            num/=10;\n        }\n        return new Pair<Integer,\
    \ Integer>(sumEven, sumOdd);\n}\n    public static void main(String[] args) {\n\
    \    assert(evenOddCount((7)).equals((Pair.with(0, 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1,\
    \ 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2, 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3, 3))));\n   \
    \ assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpk_8kd5bi.java:16: error: int cannot be dereferenced\n        int\
    \ numDigits = num.toString().length();\n                           ^\n1 error\n"
  stdout: ''
  timestamp: 1660011187
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        Integer evenDigits = 0;\n        Integer\
    \ oddDigits = 0;\n        if(num < 0) {\n            evenDigits = num / 10;\n\
    \            oddDigits = num % 10;\n        }\n        else {\n            int\
    \ evenDigit = num / 100;\n            int oddDigit = num % 100;\n            evenDigits\
    \ += evenDigit / 10;\n            oddDigits += oddDigit % 10;\n        }\n   \
    \     return Pair.of(evenDigits, oddDigits);\n}\n    public static void main(String[]\
    \ args) {\n    assert(evenOddCount((7)).equals((Pair.with(0, 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1,\
    \ 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2, 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3, 3))));\n   \
    \ assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpnrscltki.java:26: error: cannot find symbol\n        return Pair.of(evenDigits,\
    \ oddDigits);\n                   ^\n  symbol:   method of(Integer,Integer)\n\
    \  location: class Pair\n1 error\n"
  stdout: ''
  timestamp: 1660011187
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        // Write your code here\n        int\
    \ odd = 1;\n        int even = 0;\n        if (num < 0) {\n            return\
    \ new Pair<>(0, 0);\n        } else {\n            while (num > 0) {\n       \
    \         num /= 10;\n                even++;\n            }\n            while\
    \ (num > 0) {\n                num /= 10;\n                odd++;\n          \
    \  }\n            return new Pair<>(even, odd);\n        }\n}\n    public static\
    \ void main(String[] args) {\n    assert(evenOddCount((7)).equals((Pair.with(0,\
    \ 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1, 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2,\
    \ 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3, 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: 'Error: Unable to initialize main class Problem

    Caused by: java.lang.NoClassDefFoundError: org/javatuples/Pair

    '
  stdout: ''
  timestamp: 1660011188
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        int evenCount = 0;\n        int oddCount\
    \ = 0;\n        if (num < 0) {\n            throw new IllegalArgumentException(\"\
    Cannot count odd if number is negative\");\n        }\n        int i = 0;\n  \
    \      while (i < num) {\n            int current = num % 10;\n            if\
    \ (current % 2 == 0) {\n                evenCount++;\n            } else {\n \
    \               oddCount++;\n            }\n            num = num / 10;\n    \
    \        i++;\n        }\n        return new Pair<Integer, Integer>(evenCount,\
    \ oddCount);\n}\n    public static void main(String[] args) {\n    assert(evenOddCount((7)).equals((Pair.with(0,\
    \ 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1, 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2,\
    \ 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3, 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: 'Error: Unable to initialize main class Problem

    Caused by: java.lang.NoClassDefFoundError: org/javatuples/Pair

    '
  stdout: ''
  timestamp: 1660011188
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        return new IntPair(num, num % 10);\n\
    }\n    public static void main(String[] args) {\n    assert(evenOddCount((7)).equals((Pair.with(0,\
    \ 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1, 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2,\
    \ 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3, 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp9djktj7y.java:14: error: cannot find symbol\n        return new\
    \ IntPair(num, num % 10);\n                   ^\n  symbol:   class IntPair\n \
    \ location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011187
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        int a = num;\n        int remainder\
    \ = 0;\n        int even = 0;\n        int odd = 0;\n        int i = 0;\n    \
    \    int j = 0;\n        while (a != 0) {\n            remainder = a;\n      \
    \      a = a / 10;\n            even = even * 10 + (remainder % 10);\n       \
    \     odd = odd * 10 + (remainder / 10);\n            i++;\n        }\n      \
    \  return new Tuple<>(even, odd);\n}\n    public static void main(String[] args)\
    \ {\n    assert(evenOddCount((7)).equals((Pair.with(0, 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1,\
    \ 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2, 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3, 3))));\n   \
    \ assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpk_kzx2dd.java:27: error: cannot infer type arguments for Tuple\n\
    \        return new Tuple<>(even, odd);\n                        ^\n  reason:\
    \ cannot use '<>' with non-generic class Tuple\n1 error\n"
  stdout: ''
  timestamp: 1660011187
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        if (num < 0)\n            return null;\n\
    \        int evenDigits = 0;\n        int oddDigits = 0;\n        int result =\
    \ 0;\n        do {\n            int digit = num % 10;\n            if (digit %\
    \ 2 == 0) {\n                evenDigits++;\n            }\n            else {\n\
    \                oddDigits++;\n            }\n        } while ((num /= 10) > 0);\n\
    \        result = evenDigits - oddDigits;\n        return new Pair<>(evenDigits,\
    \ oddDigits);\n}\n    public static void main(String[] args) {\n    assert(evenOddCount((7)).equals((Pair.with(0,\
    \ 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1, 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2,\
    \ 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3, 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: 'Error: Unable to initialize main class Problem

    Caused by: java.lang.NoClassDefFoundError: org/javatuples/Pair

    '
  stdout: ''
  timestamp: 1660011188
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        Pair<Integer, Integer> pair = new\
    \ Pair<>(0, 0);\n        while (num != 0) {\n            int remainder = num %\
    \ 10;\n            if (remainder == 0) {\n                pair.f1 += 1;\n    \
    \            pair.f2 += 0;\n            }\n            num /= 10;\n          \
    \  if (num % 2 != 0) {\n                pair.f1 += 1;\n                pair.f2\
    \ += 1;\n            }\n        }\n        return pair;\n}\n    public static\
    \ void main(String[] args) {\n    assert(evenOddCount((7)).equals((Pair.with(0,\
    \ 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1, 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2,\
    \ 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3, 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpsgm1xl8m.java:18: error: cannot find symbol\n                pair.f1\
    \ += 1;\n                    ^\n  symbol:   variable f1\n  location: variable\
    \ pair of type Pair<Integer,Integer>\n/tmp/tmpsgm1xl8m.java:19: error: cannot\
    \ find symbol\n                pair.f2 += 0;\n                    ^\n  symbol:\
    \   variable f2\n  location: variable pair of type Pair<Integer,Integer>\n/tmp/tmpsgm1xl8m.java:23:\
    \ error: cannot find symbol\n                pair.f1 += 1;\n                 \
    \   ^\n  symbol:   variable f1\n  location: variable pair of type Pair<Integer,Integer>\n\
    /tmp/tmpsgm1xl8m.java:24: error: cannot find symbol\n                pair.f2 +=\
    \ 1;\n                    ^\n  symbol:   variable f2\n  location: variable pair\
    \ of type Pair<Integer,Integer>\n4 errors\n"
  stdout: ''
  timestamp: 1660011188
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        ArrayList<Integer> even = new ArrayList<>();\n\
    \        ArrayList<Integer> odd = new ArrayList<>();\n        for (int i = 0;\
    \ i <= num / 2; i++) {\n            if (i % 2 == 0) {\n                even.add(i);\n\
    \            } else {\n                odd.add(i);\n            }\n        }\n\
    \        return Pair.of((int)even.size()/2, (int)odd.size()/2);\n}\n    public\
    \ static void main(String[] args) {\n    assert(evenOddCount((7)).equals((Pair.with(0,\
    \ 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1, 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2,\
    \ 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3, 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpb7soqym1.java:23: error: cannot find symbol\n        return Pair.of((int)even.size()/2,\
    \ (int)odd.size()/2);\n                   ^\n  symbol:   method of(int,int)\n\
    \  location: class Pair\n1 error\n"
  stdout: ''
  timestamp: 1660011188
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        return new Pair<Integer, Integer>(\
    \ num % 2 == 0 ? num / 2 : num / 2 + 1, num % 2 == 0 ? num / 2 : num / 2 + 1 );\n\
    }\n    public static void main(String[] args) {\n    assert(evenOddCount((7)).equals((Pair.with(0,\
    \ 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1, 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2,\
    \ 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3, 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: 'Error: Unable to initialize main class Problem

    Caused by: java.lang.NoClassDefFoundError: org/javatuples/Pair

    '
  stdout: ''
  timestamp: 1660011188
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        Pair<Integer, Integer> evenOdd = Pair.of(0,\
    \ 0);\n        int sign = 1;\n        while (num > 0) {\n            int digit\
    \ = num % 10;\n            num = num / 10;\n            if (digit % 2 == 0) {\n\
    \                evenOdd.second = evenOdd.second + 1;\n            } else {\n\
    \                evenOdd.first = evenOdd.first + 1;\n            }\n         \
    \   sign = -sign;\n        }\n        return evenOdd;\n}\n    public static void\
    \ main(String[] args) {\n    assert(evenOddCount((7)).equals((Pair.with(0, 1))));\n\
    \    assert(evenOddCount((-78)).equals((Pair.with(1, 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2,\
    \ 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3, 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpg_70lq45.java:14: error: cannot find symbol\n        Pair<Integer,\
    \ Integer> evenOdd = Pair.of(0, 0);\n                                        \
    \     ^\n  symbol:   method of(int,int)\n  location: class Pair\n/tmp/tmpg_70lq45.java:20:\
    \ error: cannot find symbol\n                evenOdd.second = evenOdd.second +\
    \ 1;\n                       ^\n  symbol:   variable second\n  location: variable\
    \ evenOdd of type Pair<Integer,Integer>\n/tmp/tmpg_70lq45.java:20: error: cannot\
    \ find symbol\n                evenOdd.second = evenOdd.second + 1;\n        \
    \                                ^\n  symbol:   variable second\n  location: variable\
    \ evenOdd of type Pair<Integer,Integer>\n/tmp/tmpg_70lq45.java:22: error: cannot\
    \ find symbol\n                evenOdd.first = evenOdd.first + 1;\n          \
    \             ^\n  symbol:   variable first\n  location: variable evenOdd of type\
    \ Pair<Integer,Integer>\n/tmp/tmpg_70lq45.java:22: error: cannot find symbol\n\
    \                evenOdd.first = evenOdd.first + 1;\n                        \
    \               ^\n  symbol:   variable first\n  location: variable evenOdd of\
    \ type Pair<Integer,Integer>\n5 errors\n"
  stdout: ''
  timestamp: 1660011188
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        return IntStream.range(1, (int)Math.pow(10,\
    \ (int) Math.log10(num) + 1))\n            .mapToObj(i -> i * i)\n           \
    \ .filter(i -> num % i == 0)\n            .map(Integer::valueOf)\n           \
    \ .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));\n\
    }\n    public static void main(String[] args) {\n    assert(evenOddCount((7)).equals((Pair.with(0,\
    \ 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1, 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2,\
    \ 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3, 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp7rh3azi1.java:18: error: cannot find symbol\n            .collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting()));\n                                           ^\n  symbol:\
    \   variable Function\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011188
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        int odd_count = 0;\n        int even_count\
    \ = 0;\n        while (num !=0) {\n            int digit = num % 10;\n       \
    \     num = num / 10;\n            if (digit % 2 == 1) {\n                even_count++;\n\
    \            } else if (digit % 2 == 0) {\n                odd_count++;\n    \
    \        }\n        }\n        return new Pair<Integer, Integer>(even_count, odd_count);\n\
    }\n    public static void main(String[] args) {\n    assert(evenOddCount((7)).equals((Pair.with(0,\
    \ 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1, 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2,\
    \ 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3, 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: 'Error: Unable to initialize main class Problem

    Caused by: java.lang.NoClassDefFoundError: org/javatuples/Pair

    '
  stdout: ''
  timestamp: 1660011188
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        Pair<Integer, Integer> even_odd =\
    \ new Pair<>();\n        int countEven = 0;\n        int countOdd = 0;\n     \
    \   if (num < 0)\n            return even_odd;\n\n        // Get the digits of\
    \ the number\n        int num = Math.abs(num);\n        int[] digits = new int[num.toString().length()];\n\
    \        for (int i = 0; i < num.toString().length(); i++)\n            digits[i]\
    \ = (int) Math.pow(10, i) % 10;\n\n        // For each digit, count if its even\n\
    \        for (int i = 0; i < digits.length; i++) {\n            int digit = digits[i];\n\
    \            if (digit % 2 == 0)\n                countEven++;\n        }\n\n\
    \        // For each digit, count if its odd\n        for (int i = 0; i < digits.length;\
    \ i++) {\n            int digit = digits[i];\n            if (digit % 2 != 0)\n\
    \                countOdd++;\n        }\n\n        even_odd.first = countEven;\n\
    \        even_odd.second = countOdd;\n        return even_odd;\n}\n    public\
    \ static void main(String[] args) {\n    assert(evenOddCount((7)).equals((Pair.with(0,\
    \ 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1, 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2,\
    \ 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3, 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpvcs7d29r.java:14: error: cannot infer type arguments for Pair<>\n\
    \        Pair<Integer, Integer> even_odd = new Pair<>();\n                   \
    \                       ^\n  reason: cannot infer type-variable(s) A,B\n    (actual\
    \ and formal argument lists differ in length)\n  where A,B are type-variables:\n\
    \    A extends Object declared in class Pair\n    B extends Object declared in\
    \ class Pair\n/tmp/tmpvcs7d29r.java:21: error: variable num is already defined\
    \ in method evenOddCount(int)\n        int num = Math.abs(num);\n            ^\n\
    /tmp/tmpvcs7d29r.java:22: error: int cannot be dereferenced\n        int[] digits\
    \ = new int[num.toString().length()];\n                                  ^\n/tmp/tmpvcs7d29r.java:23:\
    \ error: int cannot be dereferenced\n        for (int i = 0; i < num.toString().length();\
    \ i++)\n                               ^\n/tmp/tmpvcs7d29r.java:40: error: cannot\
    \ find symbol\n        even_odd.first = countEven;\n                ^\n  symbol:\
    \   variable first\n  location: variable even_odd of type Pair<Integer,Integer>\n\
    /tmp/tmpvcs7d29r.java:41: error: cannot find symbol\n        even_odd.second =\
    \ countOdd;\n                ^\n  symbol:   variable second\n  location: variable\
    \ even_odd of type Pair<Integer,Integer>\n6 errors\n"
  stdout: ''
  timestamp: 1660011188
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        if (num < 0)\n            throw new\
    \ IllegalArgumentException();\n        if (num < 10)\n            return Pair.of(num,\
    \ 1);\n        int even = 0;\n        int odd = 1;\n        while (true) {\n \
    \           int rem = num % 10;\n            if (rem == 0) {\n               \
    \ even += 1;\n                num /= 10;\n            }\n            else if (rem\
    \ % 2 == 0) {\n                even += 1;\n            }\n            else {\n\
    \                odd += 1;\n            }\n            if (num == 0)\n       \
    \         break;\n        }\n        return Pair.of(even, odd);\n}\n    public\
    \ static void main(String[] args) {\n    assert(evenOddCount((7)).equals((Pair.with(0,\
    \ 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1, 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2,\
    \ 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3, 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp09_o9rx5.java:17: error: cannot find symbol\n            return\
    \ Pair.of(num, 1);\n                       ^\n  symbol:   method of(int,int)\n\
    \  location: class Pair\n/tmp/tmp09_o9rx5.java:35: error: cannot find symbol\n\
    \        return Pair.of(even, odd);\n                   ^\n  symbol:   method\
    \ of(int,int)\n  location: class Pair\n2 errors\n"
  stdout: ''
  timestamp: 1660011188
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        int even = 0;\n        int odd = 0;\n\
    \        if (num < 0) {\n            throw new IllegalArgumentException(\"Invalid\
    \ negative number\");\n        }\n        int x = Math.abs(num);\n        while\
    \ (num != 0) {\n            int y = num % 10;\n            num = num / 10;\n \
    \           if (y == 0) {\n                even++;\n            } else {\n   \
    \             odd++;\n            }\n        }\n        return new Tuple<>(even,\
    \ odd);\n}\n    public static void main(String[] args) {\n    assert(evenOddCount((7)).equals((Pair.with(0,\
    \ 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1, 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2,\
    \ 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3, 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp5js8g34h.java:29: error: cannot infer type arguments for Tuple\n\
    \        return new Tuple<>(even, odd);\n                        ^\n  reason:\
    \ cannot use '<>' with non-generic class Tuple\n1 error\n"
  stdout: ''
  timestamp: 1660011188
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        int count = 0;\n        if (num <\
    \ 0) {\n            System.out.println(\"Error!\");\n        }\n        while\
    \ (num !=0){\n            if (num % 2 == 0) {\n                count += 1;\n \
    \           }\n            else {\n                num -= 1;\n            }\n\
    \        }\n        return Pair.create(count, num);\n}\n    public static void\
    \ main(String[] args) {\n    assert(evenOddCount((7)).equals((Pair.with(0, 1))));\n\
    \    assert(evenOddCount((-78)).equals((Pair.with(1, 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2,\
    \ 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3, 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpttgiziol.java:26: error: cannot find symbol\n        return Pair.create(count,\
    \ num);\n                   ^\n  symbol:   method create(int,int)\n  location:\
    \ class Pair\n1 error\n"
  stdout: ''
  timestamp: 1660011188
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        int digit = num;\n        int evenCount\
    \ = 0;\n        int oddCount = 0;\n        while (digit > 0) {\n            int\
    \ rem = digit % 10;\n            if (rem == 0) {\n                evenCount++;\n\
    \                digit = digit / 10;\n            } else {\n                oddCount++;\n\
    \                digit = digit / 10;\n            }\n        }\n        return\
    \ Pair.of(1, evenCount + oddCount);\n}\n    public static void main(String[] args)\
    \ {\n    assert(evenOddCount((7)).equals((Pair.with(0, 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1,\
    \ 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2, 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3, 3))));\n   \
    \ assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp_zqzsllr.java:27: error: cannot find symbol\n        return Pair.of(1,\
    \ evenCount + oddCount);\n                   ^\n  symbol:   method of(int,int)\n\
    \  location: class Pair\n1 error\n"
  stdout: ''
  timestamp: 1660011188
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        Set<Integer> set = new HashSet<>();\n\
    \        while (num > 0) {\n            set.add(num % 10);\n            num /=\
    \ 10;\n        }\n        return new ImmutablePair<>(set.size(), set.size() -\
    \ set.stream().filter(x -> x % 2 == 0).count());\n}\n    public static void main(String[]\
    \ args) {\n    assert(evenOddCount((7)).equals((Pair.with(0, 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1,\
    \ 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2, 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3, 3))));\n   \
    \ assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp942vhr0m.java:19: error: cannot find symbol\n        return new\
    \ ImmutablePair<>(set.size(), set.size() - set.stream().filter(x -> x % 2 == 0).count());\n\
    \                   ^\n  symbol:   class ImmutablePair\n  location: class Problem\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011188
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        \n        int evenDigitCount = 0;\n\
    \        int oddDigitCount = 0;\n        int lastDigit = num / 10;\n\n       \
    \ while (lastDigit > 0) {\n            if (num % 10 == 0) {\n                evenDigitCount++;\n\
    \            }\n            lastDigit = num / 10;\n        }\n\n        lastDigit\
    \ = num % 10;\n\n        while (lastDigit > 0) {\n            if (num % 10 !=\
    \ 0) {\n                oddDigitCount++;\n            }\n            lastDigit\
    \ = num % 10;\n        }\n\n        return Pair.of(evenDigitCount, oddDigitCount);\n\
    }\n    public static void main(String[] args) {\n    assert(evenOddCount((7)).equals((Pair.with(0,\
    \ 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1, 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2,\
    \ 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3, 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp5ydmfht4.java:35: error: cannot find symbol\n        return Pair.of(evenDigitCount,\
    \ oddDigitCount);\n                   ^\n  symbol:   method of(int,int)\n  location:\
    \ class Pair\n1 error\n"
  stdout: ''
  timestamp: 1660011188
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        List<Integer> even = new ArrayList<>();\n\
    \        List<Integer> odd = new ArrayList<>();\n        \n        for (int i\
    \ = 0; i < 10; i++) {\n            if (num % 10 == i) {\n                even.add(i);\n\
    \            }\n            else {\n                odd.add(i);\n            }\n\
    \        }\n        \n        return new Pair<>(even.size(), odd.size());\n}\n\
    \    public static void main(String[] args) {\n    assert(evenOddCount((7)).equals((Pair.with(0,\
    \ 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1, 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2,\
    \ 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3, 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: 'Error: Unable to initialize main class Problem

    Caused by: java.lang.NoClassDefFoundError: org/javatuples/Pair

    '
  stdout: ''
  timestamp: 1660011189
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        // Complete the code here\n      \
    \  if (num < 0) {\n            throw new IllegalArgumentException(\"Input must\
    \ be non-negative\");\n        }\n        int numDigits = (int) Math.ceil(Math.log10(num));\n\
    \        Pair<Integer, Integer> pair = new Pair<>();\n        int evenNum = 0;\n\
    \        int oddNum = 0;\n        int oddDigit = 0;\n        int evenDigit = 0;\n\
    \        for (int i = 0; i < numDigits; i++) {\n            int digit = num /\
    \ Math.pow(10, i);\n            if (i % 2 == 0) {\n                evenNum +=\
    \ digit;\n            } else {\n                oddNum += digit;\n           \
    \ }\n        }\n        pair.setFirst(evenNum);\n        pair.setSecond(oddNum);\n\
    \        return pair;\n}\n    public static void main(String[] args) {\n    assert(evenOddCount((7)).equals((Pair.with(0,\
    \ 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1, 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2,\
    \ 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3, 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpqlhdb6zz.java:19: error: cannot infer type arguments for Pair<>\n\
    \        Pair<Integer, Integer> pair = new Pair<>();\n                       \
    \               ^\n  reason: cannot infer type-variable(s) A,B\n    (actual and\
    \ formal argument lists differ in length)\n  where A,B are type-variables:\n \
    \   A extends Object declared in class Pair\n    B extends Object declared in\
    \ class Pair\n/tmp/tmpqlhdb6zz.java:25: error: incompatible types: possible lossy\
    \ conversion from double to int\n            int digit = num / Math.pow(10, i);\n\
    \                            ^\n/tmp/tmpqlhdb6zz.java:32: error: cannot find symbol\n\
    \        pair.setFirst(evenNum);\n            ^\n  symbol:   method setFirst(int)\n\
    \  location: variable pair of type Pair<Integer,Integer>\n/tmp/tmpqlhdb6zz.java:33:\
    \ error: cannot find symbol\n        pair.setSecond(oddNum);\n            ^\n\
    \  symbol:   method setSecond(int)\n  location: variable pair of type Pair<Integer,Integer>\n\
    4 errors\n"
  stdout: ''
  timestamp: 1660011189
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        // The count of even and odd digits\
    \ is defined by:\n        // evenDigits = num / 10 // digits / 10\n        //\
    \ oddDigits = num % 10 // digits % 10\n        int evenDigits = num / 10;\n  \
    \      int oddDigits = num % 10;\n        return new Pair<>(evenDigits, oddDigits);\n\
    }\n    public static void main(String[] args) {\n    assert(evenOddCount((7)).equals((Pair.with(0,\
    \ 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1, 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2,\
    \ 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3, 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: 'Error: Unable to initialize main class Problem

    Caused by: java.lang.NoClassDefFoundError: org/javatuples/Pair

    '
  stdout: ''
  timestamp: 1660011189
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        int count = 0;\n        long oddDig\
    \ = num;\n        int oddNum = oddDig;\n        while (num > 0) {\n          \
    \  num = num / 10;\n            count++;\n        }\n        return Pair.makePair(count,\
    \ Math.abs(oddNum));\n}\n    public static void main(String[] args) {\n    assert(evenOddCount((7)).equals((Pair.with(0,\
    \ 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1, 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2,\
    \ 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3, 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp_4jz6q5o.java:16: error: incompatible types: possible lossy conversion\
    \ from long to int\n        int oddNum = oddDig;\n                     ^\n/tmp/tmp_4jz6q5o.java:21:\
    \ error: cannot find symbol\n        return Pair.makePair(count, Math.abs(oddNum));\n\
    \                   ^\n  symbol:   method makePair(int,int)\n  location: class\
    \ Pair\n2 errors\n"
  stdout: ''
  timestamp: 1660011189
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        int oddCount = 0;\n        int evenCount\
    \ = 0;\n        int numberToTest = num;\n        while(numberToTest != 0) {\n\
    \            int digit = numberToTest % 10;\n            numberToTest = numberToTest\
    \ / 10;\n            oddCount += digit % 2 == 0 ? 1 : 0;\n            evenCount\
    \ += digit % 2 == 0 ? 0 : 1 ;\n        }\n        return Pair.of(evenCount, oddCount);\n\
    }\n    public static void main(String[] args) {\n    assert(evenOddCount((7)).equals((Pair.with(0,\
    \ 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1, 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2,\
    \ 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3, 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpybc4dni2.java:23: error: cannot find symbol\n        return Pair.of(evenCount,\
    \ oddCount);\n                   ^\n  symbol:   method of(int,int)\n  location:\
    \ class Pair\n1 error\n"
  stdout: ''
  timestamp: 1660011189
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        Pair<Integer, Integer> pair = new\
    \ Pair<>(num % 10, num / 10);\n        Integer oddNum = pair.getSecond();\n  \
    \      Integer evenNum = pair.getFirst();\n        // If the number is even\n\
    \        if (num / 10 == 0) {\n            return new Pair<>(oddNum, 0);\n   \
    \     } else {\n            return new Pair<>(oddNum, 1);\n        }\n}\n    public\
    \ static void main(String[] args) {\n    assert(evenOddCount((7)).equals((Pair.with(0,\
    \ 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1, 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2,\
    \ 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3, 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpuc27g36_.java:15: error: cannot find symbol\n        Integer oddNum\
    \ = pair.getSecond();\n                             ^\n  symbol:   method getSecond()\n\
    \  location: variable pair of type Pair<Integer,Integer>\n/tmp/tmpuc27g36_.java:16:\
    \ error: cannot find symbol\n        Integer evenNum = pair.getFirst();\n    \
    \                          ^\n  symbol:   method getFirst()\n  location: variable\
    \ pair of type Pair<Integer,Integer>\n2 errors\n"
  stdout: ''
  timestamp: 1660011189
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        int count = 0;\n        int oddCount\
    \ = 0;\n        while(num > 0) {\n            int remainder = num % 10;\n    \
    \        if(remainder % 2 == 0) {\n                count++;\n            }\n \
    \           else {\n                oddCount++;\n            }\n            num\
    \ = num/10;\n        }\n        Pair<Integer, Integer> returnValue = Pair.of(count,\
    \ oddCount);\n        return returnValue;\n}\n    public static void main(String[]\
    \ args) {\n    assert(evenOddCount((7)).equals((Pair.with(0, 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1,\
    \ 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2, 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3, 3))));\n   \
    \ assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpb_rfqmm2.java:26: error: cannot find symbol\n        Pair<Integer,\
    \ Integer> returnValue = Pair.of(count, oddCount);\n                         \
    \                        ^\n  symbol:   method of(int,int)\n  location: class\
    \ Pair\n1 error\n"
  stdout: ''
  timestamp: 1660011189
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        // Your code goes here\n        Pair<Integer,\
    \ Integer> result = new Pair<>(0, 0);\n        \n        for(int i = 0; i < num.toString().length();\
    \ i++) {\n            int count = 0;\n            \n            int digit = Integer.parseInt(String.valueOf((num.toString().charAt(i))));\n\
    \            \n            if(num%10 != 0) {\n                count++;\n     \
    \       }\n            \n            if(digit % 2 == 0) {\n                count++;\n\
    \            }\n            \n            result.first(result.first() + count);\n\
    \            \n            num = num / 10;\n        }\n        \n        return\
    \ result;\n}\n    public static void main(String[] args) {\n    assert(evenOddCount((7)).equals((Pair.with(0,\
    \ 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1, 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2,\
    \ 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3, 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp9wwzrhyb.java:17: error: int cannot be dereferenced\n        for(int\
    \ i = 0; i < num.toString().length(); i++) {\n                              ^\n\
    /tmp/tmp9wwzrhyb.java:20: error: int cannot be dereferenced\n            int digit\
    \ = Integer.parseInt(String.valueOf((num.toString().charAt(i))));\n          \
    \                                                  ^\n/tmp/tmp9wwzrhyb.java:30:\
    \ error: cannot find symbol\n            result.first(result.first() + count);\n\
    \                               ^\n  symbol:   method first()\n  location: variable\
    \ result of type Pair<Integer,Integer>\n3 errors\n"
  stdout: ''
  timestamp: 1660011189
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        if (num == 0)\n            return\
    \ new Pair<>(0, 0);\n        Pair<Integer, Integer> evenOdd = new Pair<>(evenOddCount(num\
    \ / 10), evenOddCount(num % 10));\n        if (evenOdd.getFirst() == 0)\n    \
    \        return evenOdd;\n        return Pair.of(0, 1);\n}\n    public static\
    \ void main(String[] args) {\n    assert(evenOddCount((7)).equals((Pair.with(0,\
    \ 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1, 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2,\
    \ 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3, 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmprw76d11s.java:16: error: incompatible types: cannot infer type\
    \ arguments for Pair<>\n        Pair<Integer, Integer> evenOdd = new Pair<>(evenOddCount(num\
    \ / 10), evenOddCount(num % 10));\n                                          \
    \       ^\n    reason: inference variable A has incompatible bounds\n      equality\
    \ constraints: Integer\n      lower bounds: Pair<Integer,Integer>\n  where A is\
    \ a type-variable:\n    A extends Object declared in class Pair\n/tmp/tmprw76d11s.java:17:\
    \ error: cannot find symbol\n        if (evenOdd.getFirst() == 0)\n          \
    \         ^\n  symbol:   method getFirst()\n  location: variable evenOdd of type\
    \ Pair<Integer,Integer>\n/tmp/tmprw76d11s.java:19: error: cannot find symbol\n\
    \        return Pair.of(0, 1);\n                   ^\n  symbol:   method of(int,int)\n\
    \  location: class Pair\n3 errors\n"
  stdout: ''
  timestamp: 1660011189
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        return Pair.of(even_odd_count(num),\
    \ odd_even_count(num));\n}\n    public static void main(String[] args) {\n   \
    \ assert(evenOddCount((7)).equals((Pair.with(0, 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1,\
    \ 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2, 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3, 3))));\n   \
    \ assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpw2_uuwyu.java:14: error: cannot find symbol\n        return Pair.of(even_odd_count(num),\
    \ odd_even_count(num));\n                       ^\n  symbol:   method even_odd_count(int)\n\
    \  location: class Problem\n/tmp/tmpw2_uuwyu.java:14: error: cannot find symbol\n\
    \        return Pair.of(even_odd_count(num), odd_even_count(num));\n         \
    \                                   ^\n  symbol:   method odd_even_count(int)\n\
    \  location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660011189
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        // write your logic here\n       \
    \ Pair<Integer, Integer> evenAndOdd = new Pair<Integer, Integer>();\n        int\
    \ evenCount = 0;\n        int oddCount = 0;\n        int num = num;\n\n      \
    \  while (num > 0) {\n            if (num % 2 == 0) {\n                evenCount\
    \ += 1;\n            } else {\n                oddCount += 1;\n            }\n\
    \            num = (int) ((num / 10));\n        }\n        evenAndOdd.first(evenCount);\n\
    \        evenAndOdd.second(oddCount);\n        return evenAndOdd;\n}\n    public\
    \ static void main(String[] args) {\n    assert(evenOddCount((7)).equals((Pair.with(0,\
    \ 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1, 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2,\
    \ 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3, 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpvn5xilco.java:15: error: constructor Pair in class Pair<A,B> cannot\
    \ be applied to given types;\n        Pair<Integer, Integer> evenAndOdd = new\
    \ Pair<Integer, Integer>();\n                                            ^\n \
    \ required: Integer,Integer\n  found:    no arguments\n  reason: actual and formal\
    \ argument lists differ in length\n  where A,B are type-variables:\n    A extends\
    \ Object declared in class Pair\n    B extends Object declared in class Pair\n\
    /tmp/tmpvn5xilco.java:18: error: variable num is already defined in method evenOddCount(int)\n\
    \        int num = num;\n            ^\n/tmp/tmpvn5xilco.java:28: error: cannot\
    \ find symbol\n        evenAndOdd.first(evenCount);\n                  ^\n  symbol:\
    \   method first(int)\n  location: variable evenAndOdd of type Pair<Integer,Integer>\n\
    /tmp/tmpvn5xilco.java:29: error: cannot find symbol\n        evenAndOdd.second(oddCount);\n\
    \                  ^\n  symbol:   method second(int)\n  location: variable evenAndOdd\
    \ of type Pair<Integer,Integer>\n4 errors\n"
  stdout: ''
  timestamp: 1660011189
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        boolean even=false, odd=false;\n \
    \       int ndigits=(int) Math.log10(num)+1;\n        for (int i = ndigits - 1;\
    \ i >= 0; i--) {\n            if ((num % 10) % 2 == 0) {\n                even\
    \ = true;\n            }\n            else{\n                odd=true;\n     \
    \       }\n            num /= 10;\n        }\n        return new Pair<>(even,odd);\n\
    }\n    public static void main(String[] args) {\n    assert(evenOddCount((7)).equals((Pair.with(0,\
    \ 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1, 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2,\
    \ 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3, 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp0taaqk5e.java:25: error: incompatible types: cannot infer type\
    \ arguments for Pair<>\n        return new Pair<>(even,odd);\n               \
    \        ^\n    reason: inference variable A has incompatible bounds\n      equality\
    \ constraints: Integer\n      lower bounds: Boolean\n  where A is a type-variable:\n\
    \    A extends Object declared in class Pair\n1 error\n"
  stdout: ''
  timestamp: 1660011189
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        ArrayList<Integer> even = new ArrayList<>();\n\
    \        ArrayList<Integer> odd = new ArrayList<>();\n        int evenSum = 0;\n\
    \        int oddSum = 0;\n        while(num>0){\n            int digit = num%10;\n\
    \            if(digit%2==0){\n                even.add(digit);\n             \
    \   evenSum+=digit;\n            }else{\n                odd.add(digit);\n   \
    \             oddSum+=digit;\n            }\n            num /= 10;\n        }\n\
    \        return new Pair<>(evenSum,oddSum);\n}\n    public static void main(String[]\
    \ args) {\n    assert(evenOddCount((7)).equals((Pair.with(0, 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1,\
    \ 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2, 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3, 3))));\n   \
    \ assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: 'Error: Unable to initialize main class Problem

    Caused by: java.lang.NoClassDefFoundError: org/javatuples/Pair

    '
  stdout: ''
  timestamp: 1660011189
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        int even = 0;\n        int odd = 0;\n\
    \        while (num != 0) {\n            if (num % 2 == 0) {\n               \
    \ even++;\n                num/=2;\n            } else {\n                odd++;\n\
    \                num/=2;\n            }\n        }\n        return new Pair<Integer,\
    \ Integer>(even, odd);\n}\n    public static void main(String[] args) {\n    assert(evenOddCount((7)).equals((Pair.with(0,\
    \ 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1, 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2,\
    \ 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3, 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: 'Error: Unable to initialize main class Problem

    Caused by: java.lang.NoClassDefFoundError: org/javatuples/Pair

    '
  stdout: ''
  timestamp: 1660011189
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        int even = 0;\n        int odd = 0;\n\
    \        while (true) {\n            int num1 = num % 10;\n            int num2\
    \ = num / 10;\n            int num3 = num % 10;\n            int num4 = num /\
    \ 10;\n            int num5 = num % 10;\n            int num6 = num / 10;\n  \
    \          int num7 = num % 10;\n            int num8 = num / 10;\n          \
    \  int num9 = num % 10;\n            int num10 = num / 10;\n            int num11\
    \ = num % 10;\n            int num12 = num / 10;\n            int num13 = num\
    \ % 10;\n            int num14 = num / 10;\n            int num15 = num % 10;\n\
    \            int num16 = num / 10;\n            int num17 = num % 10;\n      \
    \      int num18 = num / 10;\n            int num19 = num % 10;\n            int\
    \ num20 = num / 10;\n            int num21 = num % 10;\n            int num22\
    \ = num / 10;\n            int num23 = num % 10;\n            int num24 = num\
    \ / 10;\n            int num25 = num % 10;\n            int num26 = num / 10;\n\
    \            int num27 = num % 10;\n            int num28 = num / 10;\n      \
    \      int num29 = num % 10;\n            int num30 = num / 10;\n            int\
    \ num31 = num % 10;\n            int num32 = num / 10;\n            int num33\
    \ = num % 10;\n            int num34 = num / 10;\n            int num35 = num\
    \ % 10;\n            int num36 = num / 10;\n            int num37 = num % 10;\n\
    \            int num38 = num / 10;\n            int num39 = num % 10;\n      \
    \      int num40 = num / 10;\n            int num41 = num % 10;\n            int\
    \ num42 = num / 10;\n            int num43 = num % 10;\n            int num44\
    \ = num / 10;\n            int num45 = num % 10;\n            int num46 = num\
    \ / 10;\n            int num47 = num % 10;\n            int num48 = num / 10;\n\
    \            int num49 = num % 10;\n            int num50 = num / 10;\n      \
    \      int num51 = num % 10;\n            int num52 = num / 10;\n            int\
    \ num53 = num % 10;\n            int num54 = num / 10;\n            int num55\
    \ = num % 10;\n            int num56 = num / 10;\n            int num57 = num\
    \ % 10;\n\n}\n    public static void main(String[] args) {\n    assert(evenOddCount((7)).equals((Pair.with(0,\
    \ 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1, 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2,\
    \ 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3, 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp15nrnyzm.java:76: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n1 error\n"
  stdout: ''
  timestamp: 1660011189
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        // write your Java here\n        int\
    \ even = 0;\n        int odd = 0;\n        int x = num;\n        while (x > 0)\
    \ {\n            if (x % 2 == 0) {\n                even++;\n            }\n \
    \           else {\n                odd++;\n            }\n            x = x /\
    \ 10;\n        }\n        return new Pair<>(even, odd);\n}\n    public static\
    \ void main(String[] args) {\n    assert(evenOddCount((7)).equals((Pair.with(0,\
    \ 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1, 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2,\
    \ 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3, 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: 'Error: Unable to initialize main class Problem

    Caused by: java.lang.NoClassDefFoundError: org/javatuples/Pair

    '
  stdout: ''
  timestamp: 1660011189
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        if (num < 0) {\n            throw\
    \ new IllegalArgumentException(\"Given value cannot be negative\");\n        }\n\
    \        int even = 0, odd = 0, result = 0;\n        if (num >= 0) {\n       \
    \     while (num != 0) {\n                num /= 10;\n                if (num\
    \ % 2 != 0) {\n                    odd++;\n                }\n               \
    \ else {\n                    even++;\n                }\n            }\n    \
    \    }\n        return new ImmutablePair(even, odd);\n}\n    public static void\
    \ main(String[] args) {\n    assert(evenOddCount((7)).equals((Pair.with(0, 1))));\n\
    \    assert(evenOddCount((-78)).equals((Pair.with(1, 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2,\
    \ 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3, 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpu9ji42um.java:29: error: cannot find symbol\n        return new\
    \ ImmutablePair(even, odd);\n                   ^\n  symbol:   class ImmutablePair\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011189
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        Map<Character, Integer> odd = new\
    \ HashMap<>();\n        Map<Character, Integer> even = new HashMap<>();\n    \
    \    int oddCount = 0;\n        int evenCount = 0;\n\n        while(num > 0) {\n\
    \            int digit = num % 10;\n            odd.put(Character.toString(digit),\
    \ odd.getOrDefault(Character.toString(digit), 0) + 1);\n            num = (num\
    \ - digit) / 10;\n        }\n\n        odd.forEach((k, v) -> {\n            if(v\
    \ % 2 != 0) {\n                even.put(k, v);\n                evenCount++;\n\
    \            }\n        });\n\n        return new ImmutablePair<>(evenCount, oddCount);\n\
    }\n    public static void main(String[] args) {\n    assert(evenOddCount((7)).equals((Pair.with(0,\
    \ 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1, 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2,\
    \ 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3, 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp3lzg5us_.java:21: error: incompatible types: String cannot be converted\
    \ to Character\n            odd.put(Character.toString(digit), odd.getOrDefault(Character.toString(digit),\
    \ 0) + 1);\n                                      ^\n/tmp/tmp3lzg5us_.java:32:\
    \ error: cannot find symbol\n        return new ImmutablePair<>(evenCount, oddCount);\n\
    \                   ^\n  symbol:   class ImmutablePair\n  location: class Problem\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n2 errors\n"
  stdout: ''
  timestamp: 1660011189
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        if (num < 0) {\n            return\
    \ null;\n        }\n\n        Pair<Integer, Integer> pair = new Pair<>();\n  \
    \      pair.setFirst(num % (int) Math.pow(10, 0));\n        int divisor = 1;\n\
    \        int remainder = num;\n        while (remainder > 0) {\n            divisor\
    \ *= 10;\n            pair.setSecond(remainder % divisor);\n            remainder\
    \ = Math.floor(remainder / divisor);\n        }\n\n        return pair;\n}\n \
    \   public static void main(String[] args) {\n    assert(evenOddCount((7)).equals((Pair.with(0,\
    \ 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1, 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2,\
    \ 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3, 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp_yalptr1.java:18: error: cannot infer type arguments for Pair<>\n\
    \        Pair<Integer, Integer> pair = new Pair<>();\n                       \
    \               ^\n  reason: cannot infer type-variable(s) A,B\n    (actual and\
    \ formal argument lists differ in length)\n  where A,B are type-variables:\n \
    \   A extends Object declared in class Pair\n    B extends Object declared in\
    \ class Pair\n/tmp/tmp_yalptr1.java:19: error: cannot find symbol\n        pair.setFirst(num\
    \ % (int) Math.pow(10, 0));\n            ^\n  symbol:   method setFirst(int)\n\
    \  location: variable pair of type Pair<Integer,Integer>\n/tmp/tmp_yalptr1.java:24:\
    \ error: cannot find symbol\n            pair.setSecond(remainder % divisor);\n\
    \                ^\n  symbol:   method setSecond(int)\n  location: variable pair\
    \ of type Pair<Integer,Integer>\n/tmp/tmp_yalptr1.java:25: error: incompatible\
    \ types: possible lossy conversion from double to int\n            remainder =\
    \ Math.floor(remainder / divisor);\n                                  ^\n4 errors\n"
  stdout: ''
  timestamp: 1660011189
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        List<Integer> list = Arrays.asList(num);\n\
    \        ArrayList<Integer> even = new ArrayList<>();\n        ArrayList<Integer>\
    \ odd = new ArrayList<>();\n\n        // Iterate through the list\n        for\
    \ (int i = 0; i < list.size(); i++) {\n            int num = list.get(i);\n  \
    \          // If number is even\n            if (num % 2 == 0) {\n           \
    \     even.add(num);\n            }\n            // If number is odd\n       \
    \     else {\n                odd.add(num);\n            }\n        }\n\n    \
    \    Pair<Integer, Integer> evenOdd = new Pair<>(even.size(), odd.size());\n\n\
    \        return evenOdd;\n}\n    public static void main(String[] args) {\n  \
    \  assert(evenOddCount((7)).equals((Pair.with(0, 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1,\
    \ 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2, 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3, 3))));\n   \
    \ assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpvq5i81z6.java:20: error: variable num is already defined in method\
    \ evenOddCount(int)\n            int num = list.get(i);\n                ^\n1\
    \ error\n"
  stdout: ''
  timestamp: 1660011189
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        List<Integer> even = new ArrayList<>();\n\
    \        List<Integer> odd = new ArrayList<>();\n        int remainder;\n    \
    \    int digit = num;\n        while (num > 0) {\n            remainder = num\
    \ % 10;\n            odd.add(remainder);\n            if (remainder % 2 == 0)\
    \ {\n                even.add(remainder);\n            }\n            num /= 10;\n\
    \        }\n        return new Pair<>(even.size(), odd.size());\n}\n    public\
    \ static void main(String[] args) {\n    assert(evenOddCount((7)).equals((Pair.with(0,\
    \ 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1, 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2,\
    \ 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3, 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: 'Error: Unable to initialize main class Problem

    Caused by: java.lang.NoClassDefFoundError: org/javatuples/Pair

    '
  stdout: ''
  timestamp: 1660011189
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        int evenCount = 0;\n        int oddCount\
    \ = 0;\n        if (num >= 0) {\n            while (num != 0) {\n            \
    \    if (num % 2 == 0) {\n                    evenCount++;\n                }\n\
    \                num = (int) Math.ceil(num / 2);\n            }\n            while\
    \ (num != 0) {\n                if (num % 2 != 0) {\n                    oddCount++;\n\
    \                }\n                num = (int) Math.floor(num / 2);\n       \
    \     }\n        }\n        return new Pair<>(evenCount, oddCount);\n}\n    public\
    \ static void main(String[] args) {\n    assert(evenOddCount((7)).equals((Pair.with(0,\
    \ 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1, 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2,\
    \ 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3, 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: 'Error: Unable to initialize main class Problem

    Caused by: java.lang.NoClassDefFoundError: org/javatuples/Pair

    '
  stdout: ''
  timestamp: 1660011190
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        Pair<Integer, Integer> pair = Pair.of(0,\
    \ 0);\n        StringBuilder even = new StringBuilder();\n        StringBuilder\
    \ odd = new StringBuilder();\n\n        int number = Math.abs(num);\n        int\
    \ temp = number % 10;\n\n        while(temp >= 0) {\n            even.append(temp);\n\
    \            temp = temp / 10;\n        }\n        int temp_even = even.length();\n\
    \        int temp_odd = num % 10;\n\n        while(temp_even > 0) {\n        \
    \    odd.append(temp_even);\n            temp_even /= 10;\n        }\n       \
    \ temp_odd = odd.length();\n        pair.first = Math.max(temp_even, temp_odd);\n\
    \        pair.second = Math.min(temp_even, temp_odd);\n\n        return pair;\n\
    }\n    public static void main(String[] args) {\n    assert(evenOddCount((7)).equals((Pair.with(0,\
    \ 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1, 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2,\
    \ 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3, 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpwau_0s2u.java:14: error: cannot find symbol\n        Pair<Integer,\
    \ Integer> pair = Pair.of(0, 0);\n                                          ^\n\
    \  symbol:   method of(int,int)\n  location: class Pair\n/tmp/tmpwau_0s2u.java:33:\
    \ error: cannot find symbol\n        pair.first = Math.max(temp_even, temp_odd);\n\
    \            ^\n  symbol:   variable first\n  location: variable pair of type\
    \ Pair<Integer,Integer>\n/tmp/tmpwau_0s2u.java:34: error: cannot find symbol\n\
    \        pair.second = Math.min(temp_even, temp_odd);\n            ^\n  symbol:\
    \   variable second\n  location: variable pair of type Pair<Integer,Integer>\n\
    3 errors\n"
  stdout: ''
  timestamp: 1660011189
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        Pair<Integer, Integer> even_odd_count\
    \ =  Pair.of(Integer.valueOf(0), Integer.valueOf(0));\n        boolean isEven\
    \ = true;\n        boolean isOdd = true;\n        for (int i = 0; i < num.length;\
    \ i++) {\n            Character c = num.charAt(i);\n            if (Character.isDigit(c))\
    \ {\n                if (isEven) {\n                    isEven = false;\n    \
    \                even_odd_count.first++;\n                }\n                if\
    \ (isOdd) {\n                    isOdd = false;\n                    even_odd_count.second++;\n\
    \                }\n            } else {\n                if (isEven) {\n    \
    \                even_odd_count.first++;\n                }\n                if\
    \ (isOdd) {\n                    even_odd_count.second++;\n                }\n\
    \                isEven = true;\n                isOdd = true;\n            }\n\
    \        }\n        return even_odd_count;\n}\n    public static void main(String[]\
    \ args) {\n    assert(evenOddCount((7)).equals((Pair.with(0, 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1,\
    \ 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2, 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3, 3))));\n   \
    \ assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpvs0hz4y8.java:14: error: cannot find symbol\n        Pair<Integer,\
    \ Integer> even_odd_count =  Pair.of(Integer.valueOf(0), Integer.valueOf(0));\n\
    \                                                     ^\n  symbol:   method of(Integer,Integer)\n\
    \  location: class Pair\n/tmp/tmpvs0hz4y8.java:17: error: int cannot be dereferenced\n\
    \        for (int i = 0; i < num.length; i++) {\n                            \
    \   ^\n/tmp/tmpvs0hz4y8.java:18: error: int cannot be dereferenced\n         \
    \   Character c = num.charAt(i);\n                             ^\n/tmp/tmpvs0hz4y8.java:22:\
    \ error: cannot find symbol\n                    even_odd_count.first++;\n   \
    \                               ^\n  symbol:   variable first\n  location: variable\
    \ even_odd_count of type Pair<Integer,Integer>\n/tmp/tmpvs0hz4y8.java:26: error:\
    \ cannot find symbol\n                    even_odd_count.second++;\n         \
    \                         ^\n  symbol:   variable second\n  location: variable\
    \ even_odd_count of type Pair<Integer,Integer>\n/tmp/tmpvs0hz4y8.java:30: error:\
    \ cannot find symbol\n                    even_odd_count.first++;\n          \
    \                        ^\n  symbol:   variable first\n  location: variable even_odd_count\
    \ of type Pair<Integer,Integer>\n/tmp/tmpvs0hz4y8.java:33: error: cannot find\
    \ symbol\n                    even_odd_count.second++;\n                     \
    \             ^\n  symbol:   variable second\n  location: variable even_odd_count\
    \ of type Pair<Integer,Integer>\n7 errors\n"
  stdout: ''
  timestamp: 1660011190
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        ArrayList<Integer> list = new ArrayList<>();\n\
    \        while (num > 0) {\n            list.add(num % 10);\n            num /=\
    \ 10;\n        }\n        Pair<Integer, Integer> pair = new Pair<>(list.size(),\
    \ list.size());\n        Collections.sort(list);\n        if (list.get(0) % 2\
    \ == 0) {\n            pair.setLeft(pair.getLeft() + 1);\n        }\n        return\
    \ pair;\n}\n    public static void main(String[] args) {\n    assert(evenOddCount((7)).equals((Pair.with(0,\
    \ 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1, 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2,\
    \ 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3, 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp44285_zz.java:22: error: cannot find symbol\n            pair.setLeft(pair.getLeft()\
    \ + 1);\n                             ^\n  symbol:   method getLeft()\n  location:\
    \ variable pair of type Pair<Integer,Integer>\n1 error\n"
  stdout: ''
  timestamp: 1660011190
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        Pair<Integer, Integer> pair = new\
    \ Pair<Integer, Integer>(1, 1);\n        if (num < 0) {\n            pair = Pair.of(0,\
    \ 0);\n            return pair;\n        }\n        int temp = num;\n        List<Integer>\
    \ digits = new ArrayList<>();\n        while (num != 0) {\n            int digit\
    \ = (num % 10);\n            digits.add(digit);\n            num = num / 10;\n\
    \        }\n        pair = Pair.of(digits.size(), digits.size());\n        return\
    \ pair;\n}\n    public static void main(String[] args) {\n    assert(evenOddCount((7)).equals((Pair.with(0,\
    \ 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1, 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2,\
    \ 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3, 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpjd3gqymm.java:16: error: cannot find symbol\n            pair =\
    \ Pair.of(0, 0);\n                       ^\n  symbol:   method of(int,int)\n \
    \ location: class Pair\n/tmp/tmpjd3gqymm.java:26: error: cannot find symbol\n\
    \        pair = Pair.of(digits.size(), digits.size());\n                   ^\n\
    \  symbol:   method of(int,int)\n  location: class Pair\n2 errors\n"
  stdout: ''
  timestamp: 1660011190
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        if (num > 0) {\n            List<Integer>\
    \ digits = Arrays.stream(\n                    String.valueOf(num).toCharArray())\n\
    \                    .mapToInt(x -> Character.getNumericValue(x))\n          \
    \          .collect(Collectors.toList());\n            List<Integer> odd = digits.stream().filter(x\
    \ -> x % 2 != 0).collect(Collectors.toList());\n            List<Integer> even\
    \ = digits.stream().filter(x -> x % 2 == 0).collect(Collectors.toList());\n  \
    \          return new Pair<>(even.size(), odd.size());\n        }\n        return\
    \ null;\n}\n    public static void main(String[] args) {\n    assert(evenOddCount((7)).equals((Pair.with(0,\
    \ 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1, 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2,\
    \ 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3, 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpsh7_em52.java:15: error: no suitable method found for stream(char[])\n\
    \            List<Integer> digits = Arrays.stream(\n                         \
    \                ^\n    method Arrays.<T#1>stream(T#1[]) is not applicable\n \
    \     (inference variable T#1 has incompatible bounds\n        equality constraints:\
    \ char\n        lower bounds: Object)\n    method Arrays.<T#2>stream(T#2[],int,int)\
    \ is not applicable\n      (cannot infer type-variable(s) T#2\n        (actual\
    \ and formal argument lists differ in length))\n    method Arrays.stream(int[])\
    \ is not applicable\n      (argument mismatch; char[] cannot be converted to int[])\n\
    \    method Arrays.stream(long[]) is not applicable\n      (argument mismatch;\
    \ char[] cannot be converted to long[])\n    method Arrays.stream(double[]) is\
    \ not applicable\n      (argument mismatch; char[] cannot be converted to double[])\n\
    \  where T#1,T#2 are type-variables:\n    T#1 extends Object declared in method\
    \ <T#1>stream(T#1[])\n    T#2 extends Object declared in method <T#2>stream(T#2[],int,int)\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1660011190
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        Pair<Integer, Integer> pair = new\
    \ Pair<>(0,0);\n        if (num < 0)\n            return pair;\n\n        int[]\
    \ digits = {Integer.toString(num).split(\"\").map(Integer::parseInt).toArray()};\n\
    \        int[] evenDigits = new int[digits.length];\n        int[] oddDigits =\
    \ new int[digits.length];\n        for (int i = 0; i < digits.length; i++) {\n\
    \            if (digits[i] % 2 == 0) {\n                evenDigits[i] = digits[i];\n\
    \            } else {\n                oddDigits[i] = digits[i];\n           \
    \ }\n        }\n\n        int evenCount = 0;\n        int oddCount = 0;\n    \
    \    for (int i = 0; i < digits.length; i++) {\n            if (digits[i] == evenDigits[i])\n\
    \                evenCount++;\n            else\n                oddCount++;\n\
    \        }\n\n        pair = Pair.of(evenCount, oddCount);\n        return pair;\n\
    }\n    public static void main(String[] args) {\n    assert(evenOddCount((7)).equals((Pair.with(0,\
    \ 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1, 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2,\
    \ 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3, 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpyegl2mx5.java:18: error: cannot find symbol\n        int[] digits\
    \ = {Integer.toString(num).split(\"\").map(Integer::parseInt).toArray()};\n  \
    \                                                     ^\n  symbol:   method map(Integer::parseInt)\n\
    \  location: class String[]\n/tmp/tmpyegl2mx5.java:38: error: cannot find symbol\n\
    \        pair = Pair.of(evenCount, oddCount);\n                   ^\n  symbol:\
    \   method of(int,int)\n  location: class Pair\n2 errors\n"
  stdout: ''
  timestamp: 1660011190
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        \n        if(num==0)\n           \
    \ return null;\n        \n        if(num<0)\n            return null;\n      \
    \  \n        int even=0;\n        int odd=1;\n        int lastEven=num%10;\n \
    \       int lastOdd=num/10;\n        while(lastEven>0){\n            lastEven=lastEven/10;\n\
    \            even++;\n        }\n        while(lastOdd>0){\n            lastOdd=lastOdd/10;\n\
    \            odd++;\n        }\n        \n        Pair<Integer, Integer> result=new\
    \ Pair<Integer, Integer>(even, odd);\n        \n        return result;\n}\n  \
    \  public static void main(String[] args) {\n    assert(evenOddCount((7)).equals((Pair.with(0,\
    \ 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1, 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2,\
    \ 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3, 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: 'Error: Unable to initialize main class Problem

    Caused by: java.lang.NoClassDefFoundError: org/javatuples/Pair

    '
  stdout: ''
  timestamp: 1660011191
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        int even = 0;\n        int odd = 0;\n\
    \        int count = 0;\n        while (num > 0) {\n            if (num % 2 ==\
    \ 0)\n                even++;\n            else\n                odd++;\n    \
    \        num = num / 10;\n            count++;\n        }\n        return new\
    \ Pair<>(even, odd);\n}\n    public static void main(String[] args) {\n    assert(evenOddCount((7)).equals((Pair.with(0,\
    \ 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1, 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2,\
    \ 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3, 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: 'Error: Unable to initialize main class Problem

    Caused by: java.lang.NoClassDefFoundError: org/javatuples/Pair

    '
  stdout: ''
  timestamp: 1660011190
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        List<Integer> even = new ArrayList<>();\n\
    \        List<Integer> odd = new ArrayList<>();\n        for (int i = num; i >\
    \ 0; i /= 10) {\n            int remainder = i % 10;\n            if (remainder\
    \ == 0) {\n                even.add(remainder);\n            } else {\n      \
    \          odd.add(remainder);\n            }\n        }\n        return new Pair<>(even.size(),\
    \ odd.size());\n}\n    public static void main(String[] args) {\n    assert(evenOddCount((7)).equals((Pair.with(0,\
    \ 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1, 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2,\
    \ 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3, 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: 'Error: Unable to initialize main class Problem

    Caused by: java.lang.NoClassDefFoundError: org/javatuples/Pair

    '
  stdout: ''
  timestamp: 1660011190
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        Pair<Integer, Integer> evenCountPair\
    \ = new Pair<Integer, Integer>(0,0);\n        int count = 1;\n        int oddCount\
    \ = 0;\n        while (count <= num) {\n            if ((num / Math.pow(10, count))\
    \ % 2 == 0) {\n                evenCountPair.setKey(evenCountPair.getKey() + 1);\n\
    \            }\n            else {\n                oddCount++;\n            }\n\
    \            count++;\n        }\n        return evenCountPair;\n}\n    public\
    \ static void main(String[] args) {\n    assert(evenOddCount((7)).equals((Pair.with(0,\
    \ 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1, 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2,\
    \ 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3, 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpvtbsg_ir.java:19: error: cannot find symbol\n                evenCountPair.setKey(evenCountPair.getKey()\
    \ + 1);\n                                                  ^\n  symbol:   method\
    \ getKey()\n  location: variable evenCountPair of type Pair<Integer,Integer>\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011190
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        int n = 0;\n        int even = 0;\n\
    \        int odd = 0;\n        for (int i = num; i > 0; i = i / 10) {\n      \
    \      n = i * 10;\n            if (n % 2 == 0) {\n                even++;\n \
    \           }\n            else {\n                odd++;\n            }\n   \
    \     }\n        return new Pair<>((int)even, (int)odd);\n}\n    public static\
    \ void main(String[] args) {\n    assert(evenOddCount((7)).equals((Pair.with(0,\
    \ 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1, 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2,\
    \ 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3, 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: 'Error: Unable to initialize main class Problem

    Caused by: java.lang.NoClassDefFoundError: org/javatuples/Pair

    '
  stdout: ''
  timestamp: 1660011190
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        int evenDigit, oddDigit;\n\n     \
    \   int digit = 0;\n        int count = 0;\n        int temp = num;\n        do\
    \ {\n            digit = num % 10;\n            if (digit % 2 == 0) {\n      \
    \          evenDigit = digit;\n            }\n            else {\n           \
    \     oddDigit = digit;\n            }\n            count++;\n            num\
    \ = num / 10;\n        } while (temp != 0);\n\n        Pair<Integer, Integer>\
    \ pair = new Pair<>(evenDigit, oddDigit);\n        if (count > 1) {\n        \
    \    pair = pair.pairWithLength(count);\n        }\n        return pair;\n}\n\
    \    public static void main(String[] args) {\n    assert(evenOddCount((7)).equals((Pair.with(0,\
    \ 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1, 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2,\
    \ 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3, 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp7mvyd4d9.java:33: error: cannot find symbol\n            pair =\
    \ pair.pairWithLength(count);\n                       ^\n  symbol:   method pairWithLength(int)\n\
    \  location: variable pair of type Pair<Integer,Integer>\n1 error\n"
  stdout: ''
  timestamp: 1660011190
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        ArrayList<Integer> even = new ArrayList<Integer>();\n\
    \        ArrayList<Integer> odd = new ArrayList<Integer>();\n        int i = 1;\n\
    \        while (i < num) {\n            if (num % 10 == 0) {\n               \
    \ even.add(num % 10);\n            }\n            if (num % 10 != 0) {\n     \
    \           odd.add(num % 10);\n            }\n            i++;\n        }\n \
    \       return new Pair<>(even.size(), odd.size());\n}\n    public static void\
    \ main(String[] args) {\n    assert(evenOddCount((7)).equals((Pair.with(0, 1))));\n\
    \    assert(evenOddCount((-78)).equals((Pair.with(1, 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2,\
    \ 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3, 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: 'Error: Unable to initialize main class Problem

    Caused by: java.lang.NoClassDefFoundError: org/javatuples/Pair

    '
  stdout: ''
  timestamp: 1660011191
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        int count = 0;\n        int odd_count\
    \ = 0;\n        while (num > 0) {\n            num = num / 10;\n            count++;\n\
    \            odd_count = odd_count * 10 + (num % 10);\n        }\n        return\
    \ new Pair<>(odd_count, count - odd_count);\n}\n    public static void main(String[]\
    \ args) {\n    assert(evenOddCount((7)).equals((Pair.with(0, 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1,\
    \ 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2, 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3, 3))));\n   \
    \ assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: 'Error: Unable to initialize main class Problem

    Caused by: java.lang.NoClassDefFoundError: org/javatuples/Pair

    '
  stdout: ''
  timestamp: 1660011191
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        int[] arrOfNum = new int[100];\n \
    \       arrOfNum[0]=num;\n        Set<Integer> numSet = new HashSet<>();\n   \
    \     Set<Integer> oddNumSet = new HashSet<>();\n        for(int i=0;i<num;i++)\n\
    \        {\n            if(arrOfNum[i]%2==0)\n            {\n                numSet.add(arrOfNum[i]);\n\
    \            }\n        }\n        for(Integer i : numSet)\n        {\n      \
    \      int pos = Collections.binarySearch(numSet,i);\n            if(pos < 0)\n\
    \            {\n                pos = -pos-1;\n            }\n            else\n\
    \            {\n                oddNumSet.add(i);\n            }\n        }\n\
    \        return Pair.of(oddNumSet.size(),numSet.size());\n}\n    public static\
    \ void main(String[] args) {\n    assert(evenOddCount((7)).equals((Pair.with(0,\
    \ 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1, 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2,\
    \ 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3, 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp5qdv1l4m.java:27: error: no suitable method found for binarySearch(Set<Integer>,Integer)\n\
    \            int pos = Collections.binarySearch(numSet,i);\n                 \
    \                ^\n    method Collections.<T#1>binarySearch(List<? extends Comparable<?\
    \ super T#1>>,T#1) is not applicable\n      (cannot infer type-variable(s) T#1\n\
    \        (argument mismatch; Set<Integer> cannot be converted to List<? extends\
    \ Comparable<? super T#1>>))\n    method Collections.<T#2>binarySearch(List<?\
    \ extends T#2>,T#2,Comparator<? super T#2>) is not applicable\n      (cannot infer\
    \ type-variable(s) T#2\n        (actual and formal argument lists differ in length))\n\
    \  where T#1,T#2 are type-variables:\n    T#1 extends Object declared in method\
    \ <T#1>binarySearch(List<? extends Comparable<? super T#1>>,T#1)\n    T#2 extends\
    \ Object declared in method <T#2>binarySearch(List<? extends T#2>,T#2,Comparator<?\
    \ super T#2>)\n/tmp/tmp5qdv1l4m.java:37: error: cannot find symbol\n        return\
    \ Pair.of(oddNumSet.size(),numSet.size());\n                   ^\n  symbol:  \
    \ method of(int,int)\n  location: class Pair\n2 errors\n"
  stdout: ''
  timestamp: 1660011191
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        // use string methods to get each\
    \ digit in a string then return each number in a Pair\n        String evenDigit\
    \ = String.valueOf(num);\n        String oddDigit = String.valueOf(Math.abs(num));\n\
    \n        // use a for loop to get the number of even and odd digits in a string\n\
    \        int evenDigitNum = 0;\n        int oddDigitNum = 0;\n\n        for (int\
    \ i = 0; i < evenDigit.length(); i++) {\n            if (evenDigit.charAt(i) ==\
    \ '2') {\n                evenDigitNum++;\n            }\n        }\n\n      \
    \  for (int i = 0; i < oddDigit.length(); i++) {\n            if (oddDigit.charAt(i)\
    \ == '2') {\n                oddDigitNum++;\n            }\n        }\n\n    \
    \    // return a pair with the number of even and odd digits\n        return Pair.of(evenDigitNum,\
    \ oddDigitNum);\n}\n    public static void main(String[] args) {\n    assert(evenOddCount((7)).equals((Pair.with(0,\
    \ 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1, 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2,\
    \ 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3, 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpe7cef59o.java:35: error: cannot find symbol\n        return Pair.of(evenDigitNum,\
    \ oddDigitNum);\n                   ^\n  symbol:   method of(int,int)\n  location:\
    \ class Pair\n1 error\n"
  stdout: ''
  timestamp: 1660011191
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        if (num < 0)\n            return null;\n\
    \        long[] nums = new long[(int) Math.log10(num) + 1];\n        Arrays.fill(nums,\
    \ 0);\n        while (num > 0) {\n            int index = num % 10;\n        \
    \    nums[index] = nums[index] + 1;\n            num = num / 10;\n        }\n\n\
    \        int evenCount = 0;\n        int oddCount = 0;\n        for (int i = 0;\
    \ i < nums.length; i++) {\n            if (nums[i] % 2 == 0)\n               \
    \ evenCount++;\n            else\n                oddCount++;\n        }\n\n \
    \       return new Pair<>(evenCount, oddCount);\n}\n    public static void main(String[]\
    \ args) {\n    assert(evenOddCount((7)).equals((Pair.with(0, 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1,\
    \ 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2, 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3, 3))));\n   \
    \ assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: 'Error: Unable to initialize main class Problem

    Caused by: java.lang.NoClassDefFoundError: org/javatuples/Pair

    '
  stdout: ''
  timestamp: 1660011191
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        if (num < 0)\n            return new\
    \ Pair<>(num, 0);\n\n        int count = 0;\n        long digit = num;\n     \
    \   do {\n            long rem2 = digit;\n            int even = 0, odd = 0;\n\
    \            while (rem2 != 0) {\n                int newEven = rem2 % 10;\n \
    \               even = even * 10 + newEven;\n                int newOdd = rem2\
    \ / 10;\n                odd = newOdd * 10 + odd;\n                rem2 %= 10;\n\
    \            }\n            count++;\n            digit = num / 10;\n        }\
    \ while (digit != 0 && digit != 1);\n        return new Pair<>(count, odd + 1);\n\
    }\n    public static void main(String[] args) {\n    assert(evenOddCount((7)).equals((Pair.with(0,\
    \ 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1, 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2,\
    \ 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3, 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpb6ubk8li.java:23: error: incompatible types: possible lossy conversion\
    \ from long to int\n                int newEven = rem2 % 10;\n               \
    \                    ^\n/tmp/tmpb6ubk8li.java:25: error: incompatible types: possible\
    \ lossy conversion from long to int\n                int newOdd = rem2 / 10;\n\
    \                                  ^\n/tmp/tmpb6ubk8li.java:32: error: cannot\
    \ find symbol\n        return new Pair<>(count, odd + 1);\n                  \
    \               ^\n  symbol:   variable odd\n  location: class Problem\n3 errors\n"
  stdout: ''
  timestamp: 1660011191
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        boolean isEven = true;\n        boolean\
    \ isOdd = true;\n        int evenCount = 0;\n        int oddCount = 0;\n     \
    \   if (num < 0) {\n            throw new IllegalArgumentException(\"cannot find\
    \ even and odd digits for negative number\");\n        }\n        while (num !=\
    \ 0) {\n            int num = num % 10;\n            if (isEven) {\n         \
    \       if (num % 2 == 0) {\n                    evenCount++;\n              \
    \  }\n            } else {\n                if (num % 2 == 1) {\n            \
    \        oddCount++;\n                }\n            }\n            if (isEven)\
    \ {\n                isEven = false;\n            } else {\n                isEven\
    \ = true;\n            }\n            num = num / 10;\n        }\n        return\
    \ new Pair<Integer, Integer>(evenCount, oddCount);\n}\n    public static void\
    \ main(String[] args) {\n    assert(evenOddCount((7)).equals((Pair.with(0, 1))));\n\
    \    assert(evenOddCount((-78)).equals((Pair.with(1, 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2,\
    \ 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3, 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpem9h9i9w.java:22: error: variable num is already defined in method\
    \ evenOddCount(int)\n            int num = num % 10;\n                ^\n1 error\n"
  stdout: ''
  timestamp: 1660011191
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        Integer even = 0;\n        Integer\
    \ odd = 0;\n        long temp = num;\n        while(temp != 0) {\n           \
    \ long remain = temp % 10;\n            if (remain == 0) {\n                even++;\n\
    \            }\n            temp /= 10;\n        }\n        temp = num;\n    \
    \    while(temp != 0) {\n            long remain = temp % 10;\n            if\
    \ (remain != 0) {\n                odd++;\n            }\n            temp /=\
    \ 10;\n        }\n        return Pair.create(even, odd);\n}\n    public static\
    \ void main(String[] args) {\n    assert(evenOddCount((7)).equals((Pair.with(0,\
    \ 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1, 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2,\
    \ 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3, 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpomc_me1v.java:32: error: cannot find symbol\n        return Pair.create(even,\
    \ odd);\n                   ^\n  symbol:   method create(Integer,Integer)\n  location:\
    \ class Pair\n1 error\n"
  stdout: ''
  timestamp: 1660011191
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        Pair<Integer, Integer> res = new Pair<>();\n\
    \        int evenCount = 0;\n        int oddCount = 0;\n        while (num > 0)\
    \ {\n            if (num % 2 == 0) {\n                evenCount++;\n         \
    \   } else {\n                oddCount++;\n            }\n            num /= 10;\n\
    \        }\n        res.first = evenCount;\n        res.second = oddCount;\n \
    \       return res;\n}\n    public static void main(String[] args) {\n    assert(evenOddCount((7)).equals((Pair.with(0,\
    \ 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1, 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2,\
    \ 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3, 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp1gehjbkc.java:14: error: cannot infer type arguments for Pair<>\n\
    \        Pair<Integer, Integer> res = new Pair<>();\n                        \
    \             ^\n  reason: cannot infer type-variable(s) A,B\n    (actual and\
    \ formal argument lists differ in length)\n  where A,B are type-variables:\n \
    \   A extends Object declared in class Pair\n    B extends Object declared in\
    \ class Pair\n/tmp/tmp1gehjbkc.java:25: error: cannot find symbol\n        res.first\
    \ = evenCount;\n           ^\n  symbol:   variable first\n  location: variable\
    \ res of type Pair<Integer,Integer>\n/tmp/tmp1gehjbkc.java:26: error: cannot find\
    \ symbol\n        res.second = oddCount;\n           ^\n  symbol:   variable second\n\
    \  location: variable res of type Pair<Integer,Integer>\n3 errors\n"
  stdout: ''
  timestamp: 1660011191
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        List<Integer> digits = getDigits(num);\n\
    \        int evenCount = 0;\n        int oddCount = 0;\n        for (int digit\
    \ : digits) {\n            if (digit % 2 == 0) {\n                evenCount++;\n\
    \            } else {\n                oddCount++;\n            }\n        }\n\
    \        return Pair.create(evenCount, oddCount);\n}\n    public static void main(String[]\
    \ args) {\n    assert(evenOddCount((7)).equals((Pair.with(0, 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1,\
    \ 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2, 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3, 3))));\n   \
    \ assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpxxe0qpat.java:14: error: cannot find symbol\n        List<Integer>\
    \ digits = getDigits(num);\n                               ^\n  symbol:   method\
    \ getDigits(int)\n  location: class Problem\n/tmp/tmpxxe0qpat.java:24: error:\
    \ cannot find symbol\n        return Pair.create(evenCount, oddCount);\n     \
    \              ^\n  symbol:   method create(int,int)\n  location: class Pair\n\
    2 errors\n"
  stdout: ''
  timestamp: 1660011191
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        if (num < 0)\n            return null;\n\
    \n        int evenCount = 0;\n        int oddCount = 0;\n\n        while (num\
    \ != 0) {\n            int digit = num % 10;\n            num /= 10;\n\n     \
    \       if (digit % 2 == 0) {\n                evenCount++;\n            } else\
    \ {\n                oddCount++;\n            }\n        }\n\n        return Pair.of(evenCount,\
    \ oddCount);\n}\n    public static void main(String[] args) {\n    assert(evenOddCount((7)).equals((Pair.with(0,\
    \ 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1, 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2,\
    \ 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3, 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpgse08nwq.java:31: error: cannot find symbol\n        return Pair.of(evenCount,\
    \ oddCount);\n                   ^\n  symbol:   method of(int,int)\n  location:\
    \ class Pair\n1 error\n"
  stdout: ''
  timestamp: 1660011191
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        int even = 0;\n        int odd = 0;\n\
    \        if (num < 0) {\n            num = Math.abs(num);\n        }\n       \
    \ if (num == 0) {\n            return Pair.of(1, 1);\n        }\n        while\
    \ (num > 0) {\n            int digit = num % 10;\n            if (digit % 2 ==\
    \ 0) {\n                even++;\n            } else {\n                odd++;\n\
    \            }\n            num = num / 10;\n        }\n        return Pair.of(even,\
    \ odd);\n}\n    public static void main(String[] args) {\n    assert(evenOddCount((7)).equals((Pair.with(0,\
    \ 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1, 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2,\
    \ 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3, 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpw6ipqltl.java:20: error: cannot find symbol\n            return\
    \ Pair.of(1, 1);\n                       ^\n  symbol:   method of(int,int)\n \
    \ location: class Pair\n/tmp/tmpw6ipqltl.java:31: error: cannot find symbol\n\
    \        return Pair.of(even, odd);\n                   ^\n  symbol:   method\
    \ of(int,int)\n  location: class Pair\n2 errors\n"
  stdout: ''
  timestamp: 1660011191
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        Pair<Integer, Integer> pair = new\
    \ Pair<Integer, Integer>();\n        String numString = String.valueOf(num);\n\
    \n        // Using Regular Expressions\n        Matcher m = Pattern.compile(\"\
    ([0-9]{2})\").matcher(numString);\n        while (m.find()) {\n            pair.left\
    \ = Integer.parseInt(m.group(1));\n            pair.right = Integer.parseInt(m.group(1));\n\
    \        }\n\n        // Using Logic\n        ArrayList<Integer> even = new ArrayList<Integer>();\n\
    \        ArrayList<Integer> odd = new ArrayList<Integer>();\n        even.add(Integer.valueOf(numString.substring(0,1)));\n\
    \        odd.add(Integer.valueOf(numString.substring(1,2)));\n\n        for (int\
    \ i = 1; i < numString.length(); i++) {\n            int newNum = Integer.valueOf(numString.substring(i,i+1));\n\
    \            if (newNum % 2 == 0) {\n                even.add(newNum);\n     \
    \       } else {\n                odd.add(newNum);\n            }\n        }\n\
    \        pair.left = even.size();\n        pair.right = odd.size();\n        return\
    \ pair;\n}\n    public static void main(String[] args) {\n    assert(evenOddCount((7)).equals((Pair.with(0,\
    \ 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1, 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2,\
    \ 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3, 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpcthsybxq.java:14: error: constructor Pair in class Pair<A,B> cannot\
    \ be applied to given types;\n        Pair<Integer, Integer> pair = new Pair<Integer,\
    \ Integer>();\n                                      ^\n  required: Integer,Integer\n\
    \  found:    no arguments\n  reason: actual and formal argument lists differ in\
    \ length\n  where A,B are type-variables:\n    A extends Object declared in class\
    \ Pair\n    B extends Object declared in class Pair\n/tmp/tmpcthsybxq.java:18:\
    \ error: cannot find symbol\n        Matcher m = Pattern.compile(\"([0-9]{2})\"\
    ).matcher(numString);\n        ^\n  symbol:   class Matcher\n  location: class\
    \ Problem\n/tmp/tmpcthsybxq.java:18: error: cannot find symbol\n        Matcher\
    \ m = Pattern.compile(\"([0-9]{2})\").matcher(numString);\n                  \
    \  ^\n  symbol:   variable Pattern\n  location: class Problem\n/tmp/tmpcthsybxq.java:20:\
    \ error: cannot find symbol\n            pair.left = Integer.parseInt(m.group(1));\n\
    \                ^\n  symbol:   variable left\n  location: variable pair of type\
    \ Pair<Integer,Integer>\n/tmp/tmpcthsybxq.java:21: error: cannot find symbol\n\
    \            pair.right = Integer.parseInt(m.group(1));\n                ^\n \
    \ symbol:   variable right\n  location: variable pair of type Pair<Integer,Integer>\n\
    /tmp/tmpcthsybxq.java:38: error: cannot find symbol\n        pair.left = even.size();\n\
    \            ^\n  symbol:   variable left\n  location: variable pair of type Pair<Integer,Integer>\n\
    /tmp/tmpcthsybxq.java:39: error: cannot find symbol\n        pair.right = odd.size();\n\
    \            ^\n  symbol:   variable right\n  location: variable pair of type\
    \ Pair<Integer,Integer>\n7 errors\n"
  stdout: ''
  timestamp: 1660011191
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        Set<Integer> set = new HashSet<>();\n\
    \        for (int i = 0; i < num.length; i++) {\n            if (i % 2 == 0) {\n\
    \                set.add(i);\n            }\n        }\n        Set<Integer> set2\
    \ = new HashSet<>();\n        int odd = 0;\n        int even = 0;\n        for\
    \ (int i = 0; i < num.length; i++) {\n            if (i % 2 == 1) {\n        \
    \        odd = (odd + num[i]);\n            } else {\n                even = (even\
    \ + num[i]);\n            }\n        }\n        return Pair.of(odd, even);\n}\n\
    \    public static void main(String[] args) {\n    assert(evenOddCount((7)).equals((Pair.with(0,\
    \ 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1, 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2,\
    \ 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3, 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpdxrk__fz.java:15: error: int cannot be dereferenced\n        for\
    \ (int i = 0; i < num.length; i++) {\n                               ^\n/tmp/tmpdxrk__fz.java:23:\
    \ error: int cannot be dereferenced\n        for (int i = 0; i < num.length; i++)\
    \ {\n                               ^\n/tmp/tmpdxrk__fz.java:25: error: array\
    \ required, but int found\n                odd = (odd + num[i]);\n           \
    \                     ^\n/tmp/tmpdxrk__fz.java:27: error: array required, but\
    \ int found\n                even = (even + num[i]);\n                       \
    \           ^\n/tmp/tmpdxrk__fz.java:30: error: cannot find symbol\n        return\
    \ Pair.of(odd, even);\n                   ^\n  symbol:   method of(int,int)\n\
    \  location: class Pair\n5 errors\n"
  stdout: ''
  timestamp: 1660011191
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        int odd = num % 10;\n        int even\
    \ = num / 10;\n        Pair<Integer, Integer> tuple = new Pair<>(even, odd);\n\
    \        return tuple;\n}\n    public static void main(String[] args) {\n    assert(evenOddCount((7)).equals((Pair.with(0,\
    \ 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1, 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2,\
    \ 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3, 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: 'Error: Unable to initialize main class Problem

    Caused by: java.lang.NoClassDefFoundError: org/javatuples/Pair

    '
  stdout: ''
  timestamp: 1660011191
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        // write your code in java 8\n   \
    \     // return a tuple that has the number of even and odd digits respectively.\n\
    \        if (num < 0) {\n            return null;\n        }\n        int even\
    \ = num / 2;\n        int odd = num % 2;\n        return new Tuple<>(even, odd);\n\
    }\n    public static void main(String[] args) {\n    assert(evenOddCount((7)).equals((Pair.with(0,\
    \ 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1, 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2,\
    \ 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3, 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp2rhvl2l6.java:21: error: cannot infer type arguments for Tuple\n\
    \        return new Tuple<>(even, odd);\n                        ^\n  reason:\
    \ cannot use '<>' with non-generic class Tuple\n1 error\n"
  stdout: ''
  timestamp: 1660011191
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        int even_sum = 0, odd_sum = 0;\n \
    \       if (num < 0) {\n            return null;\n        }\n        int digit\
    \ = num % 10;\n        while (digit != 0) {\n            digit /= 10;\n      \
    \      if (num % digit == 0) {\n                even_sum += digit;\n         \
    \   } else {\n                odd_sum += digit;\n            }\n        }\n  \
    \      return new Tuple(even_sum, odd_sum);\n}\n    public static void main(String[]\
    \ args) {\n    assert(evenOddCount((7)).equals((Pair.with(0, 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1,\
    \ 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2, 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3, 3))));\n   \
    \ assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmph8xkeuvp.java:27: error: Tuple is abstract; cannot be instantiated\n\
    \        return new Tuple(even_sum, odd_sum);\n               ^\n1 error\n"
  stdout: ''
  timestamp: 1660011191
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        Arrays.stream(Integer.toString(num).toCharArray()).forEach(x\
    \ -> {\n            if (x == '1') {\n                evenDigit++;\n          \
    \  } else {\n                oddDigit++;\n            }\n        });\n       \
    \ Pair<Integer, Integer> pair = new Pair<>(evenDigit, oddDigit);\n        return\
    \ pair;\n}\n    public static void main(String[] args) {\n    assert(evenOddCount((7)).equals((Pair.with(0,\
    \ 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1, 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2,\
    \ 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3, 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpaw87eykf.java:14: error: no suitable method found for stream(char[])\n\
    \        Arrays.stream(Integer.toString(num).toCharArray()).forEach(x -> {\n \
    \             ^\n    method Arrays.<T#1>stream(T#1[]) is not applicable\n    \
    \  (inference variable T#1 has incompatible bounds\n        equality constraints:\
    \ char\n        lower bounds: Object)\n    method Arrays.<T#2>stream(T#2[],int,int)\
    \ is not applicable\n      (cannot infer type-variable(s) T#2\n        (actual\
    \ and formal argument lists differ in length))\n    method Arrays.stream(int[])\
    \ is not applicable\n      (argument mismatch; char[] cannot be converted to int[])\n\
    \    method Arrays.stream(long[]) is not applicable\n      (argument mismatch;\
    \ char[] cannot be converted to long[])\n    method Arrays.stream(double[]) is\
    \ not applicable\n      (argument mismatch; char[] cannot be converted to double[])\n\
    \  where T#1,T#2 are type-variables:\n    T#1 extends Object declared in method\
    \ <T#1>stream(T#1[])\n    T#2 extends Object declared in method <T#2>stream(T#2[],int,int)\n\
    /tmp/tmpaw87eykf.java:16: error: cannot find symbol\n                evenDigit++;\n\
    \                ^\n  symbol:   variable evenDigit\n  location: class Problem\n\
    /tmp/tmpaw87eykf.java:18: error: cannot find symbol\n                oddDigit++;\n\
    \                ^\n  symbol:   variable oddDigit\n  location: class Problem\n\
    /tmp/tmpaw87eykf.java:21: error: cannot find symbol\n        Pair<Integer, Integer>\
    \ pair = new Pair<>(evenDigit, oddDigit);\n                                  \
    \               ^\n  symbol:   variable evenDigit\n  location: class Problem\n\
    /tmp/tmpaw87eykf.java:21: error: cannot find symbol\n        Pair<Integer, Integer>\
    \ pair = new Pair<>(evenDigit, oddDigit);\n                                  \
    \                          ^\n  symbol:   variable oddDigit\n  location: class\
    \ Problem\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n5 errors\n"
  stdout: ''
  timestamp: 1660011191
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        if (num == 0) return new Pair<>(0,0);\n\
    \        int evenDigCount = 0;\n        int oddDigCount = 0;\n        while(num\
    \ > 0) {\n            int digit = num % 10;\n            if (digit % 2 == 0) {\n\
    \                evenDigCount++;\n            }\n            else {\n        \
    \        oddDigCount++;\n            }\n            num /= 10;\n        }\n  \
    \      return new Pair<>(evenDigCount, oddDigCount);\n}\n    public static void\
    \ main(String[] args) {\n    assert(evenOddCount((7)).equals((Pair.with(0, 1))));\n\
    \    assert(evenOddCount((-78)).equals((Pair.with(1, 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2,\
    \ 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3, 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: Exception
  stderr: 'Error: Unable to initialize main class Problem

    Caused by: java.lang.NoClassDefFoundError: org/javatuples/Pair

    '
  stdout: ''
  timestamp: 1660011192
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        if (num < 0) {\n            return\
    \ Pair.create(Integer.MIN_VALUE, Integer.MIN_VALUE);\n        }\n        Map<Character,\
    \ Integer> digitCounts = new HashMap<>();\n        while (num >0) {\n        \
    \    digitCounts.merge(Character.forDigit(num %10, 10), 1, Integer::sum);\n  \
    \          num /= 10;\n        }\n        Set<Character> oddCounts = digitCounts.keySet().stream()\n\
    \                .filter(ch -> digitCounts.get(ch) % 2 == 1)\n               \
    \ .collect(Collectors.toSet());\n        return Pair.create(digitCounts.size(),\
    \ oddCounts.size());\n}\n    public static void main(String[] args) {\n    assert(evenOddCount((7)).equals((Pair.with(0,\
    \ 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1, 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2,\
    \ 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3, 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmphq6a2w60.java:15: error: cannot find symbol\n            return\
    \ Pair.create(Integer.MIN_VALUE, Integer.MIN_VALUE);\n                       ^\n\
    \  symbol:   method create(int,int)\n  location: class Pair\n/tmp/tmphq6a2w60.java:25:\
    \ error: cannot find symbol\n        return Pair.create(digitCounts.size(), oddCounts.size());\n\
    \                   ^\n  symbol:   method create(int,int)\n  location: class Pair\n\
    2 errors\n"
  stdout: ''
  timestamp: 1660011191
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        int even = 0;\n        int odd = 0;\n\
    \        while (num > 0) {\n            int digit = num % 10;\n            if\
    \ (digit % 2 == 0) {\n                even += digit;\n            } else {\n \
    \               odd += digit;\n            }\n            num = num / 10;\n  \
    \      }\n        return Pair.of(even, odd);\n}\n    public static void main(String[]\
    \ args) {\n    assert(evenOddCount((7)).equals((Pair.with(0, 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1,\
    \ 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2, 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3, 3))));\n   \
    \ assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpn4rg69cw.java:25: error: cannot find symbol\n        return Pair.of(even,\
    \ odd);\n                   ^\n  symbol:   method of(int,int)\n  location: class\
    \ Pair\n1 error\n"
  stdout: ''
  timestamp: 1660011191
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        return Pair.create(\n            \
    \    num % 10, num /= 10, num %2 == 0 ? 1 : 2\n        );\n}\n    public static\
    \ void main(String[] args) {\n    assert(evenOddCount((7)).equals((Pair.with(0,\
    \ 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1, 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2,\
    \ 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3, 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpb_6zna6w.java:14: error: cannot find symbol\n        return Pair.create(\n\
    \                   ^\n  symbol:   method create(int,int,int)\n  location: class\
    \ Pair\n1 error\n"
  stdout: ''
  timestamp: 1660011191
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        return Pair.of(0, 0);\n}\n    public\
    \ static void main(String[] args) {\n    assert(evenOddCount((7)).equals((Pair.with(0,\
    \ 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1, 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2,\
    \ 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3, 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpy5de1jrf.java:14: error: cannot find symbol\n        return Pair.of(0,\
    \ 0);\n                   ^\n  symbol:   method of(int,int)\n  location: class\
    \ Pair\n1 error\n"
  stdout: ''
  timestamp: 1660011191
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        return Pair.tuple(num % 10, num /\
    \ 10);\n}\n    public static void main(String[] args) {\n    assert(evenOddCount((7)).equals((Pair.with(0,\
    \ 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1, 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2,\
    \ 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3, 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp843h__vs.java:14: error: cannot find symbol\n        return Pair.tuple(num\
    \ % 10, num / 10);\n                   ^\n  symbol:   method tuple(int,int)\n\
    \  location: class Pair\n1 error\n"
  stdout: ''
  timestamp: 1660011191
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        List<Integer> list = new ArrayList<>();\n\
    \        list.add(num);\n        return evenOddCountRecursively(list, 0, 0);\n\
    }\n    public static void main(String[] args) {\n    assert(evenOddCount((7)).equals((Pair.with(0,\
    \ 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1, 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2,\
    \ 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3, 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp_1edrkec.java:16: error: cannot find symbol\n        return evenOddCountRecursively(list,\
    \ 0, 0);\n               ^\n  symbol:   method evenOddCountRecursively(List<Integer>,int,int)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011191
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a tuple that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // even_odd_count(-12)\
    \ ==> (1, 1)\n    // even_odd_count(123) ==> (1, 2)\n    public static Pair<Integer,\
    \ Integer> evenOddCount(int num) {\n        if (num < 0) {\n            throw\
    \ new RuntimeException(\"Bad input\");\n        }\n        // 1. first store the\
    \ result in a Map\n        Map<Integer, Integer> map = new HashMap<>();\n\n  \
    \      // 2. then go through the input number\n        for (int i = 0; i < num;\
    \ i++) {\n            if (map.containsKey(num - i)) {\n                map.put(num\
    \ - i, map.get(num - i) + 1);\n            } else {\n                map.put(num\
    \ - i, 1);\n            }\n        }\n\n        // 3. create output tuple\n  \
    \      Pair<Integer, Integer> tuple = new Pair<>();\n        tuple._1 = map.get(num);\n\
    \        tuple._2 = map.get(-num);\n\n        return tuple;\n}\n    public static\
    \ void main(String[] args) {\n    assert(evenOddCount((7)).equals((Pair.with(0,\
    \ 1))));\n    assert(evenOddCount((-78)).equals((Pair.with(1, 1))));\n    assert(evenOddCount((3452)).equals((Pair.with(2,\
    \ 2))));\n    assert(evenOddCount((346211)).equals((Pair.with(3, 3))));\n    assert(evenOddCount((-345821)).equals((Pair.with(3,\
    \ 3))));\n    assert(evenOddCount((-2)).equals((Pair.with(1, 0))));\n    assert(evenOddCount((-45347)).equals((Pair.with(2,\
    \ 3))));\n    assert(evenOddCount((0)).equals((Pair.with(1, 0))));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpp8t20q9c.java:30: error: cannot infer type arguments for Pair<>\n\
    \        Pair<Integer, Integer> tuple = new Pair<>();\n                      \
    \                 ^\n  reason: cannot infer type-variable(s) A,B\n    (actual\
    \ and formal argument lists differ in length)\n  where A,B are type-variables:\n\
    \    A extends Object declared in class Pair\n    B extends Object declared in\
    \ class Pair\n/tmp/tmpp8t20q9c.java:31: error: cannot find symbol\n        tuple._1\
    \ = map.get(num);\n             ^\n  symbol:   variable _1\n  location: variable\
    \ tuple of type Pair<Integer,Integer>\n/tmp/tmpp8t20q9c.java:32: error: cannot\
    \ find symbol\n        tuple._2 = map.get(-num);\n             ^\n  symbol:  \
    \ variable _2\n  location: variable tuple of type Pair<Integer,Integer>\n3 errors\n"
  stdout: ''
  timestamp: 1660011191
