completions:
- "        // write your code in Java 9+\n        if (words.size() == 0) {\n     \
  \       return \"\";\n        }\n        \n        Set<String> set = new HashSet<>();\n\
  \        \n        for (int i = 0; i < words.size(); i++) {\n            String\
  \ word = words.get(i);\n            if (set.contains(word)) {\n                int\
  \ index = set.indexOf(word);\n                \n                if (set.size() >\
  \ (index + 1)) {\n                    set.remove(index);\n                    set.add(i);\n\
  \                    set.clear();\n                }\n            } else {\n   \
  \             set.add(i);\n                set.clear();\n            }\n       \
  \ }\n        return words.get(0);"
- "        \n        //create set\n        HashSet<String> hs = new HashSet<String>();\n\
  \        for(int i = 0; i < words.size(); i++)\n        {\n            hs.add(words.get(i));\n\
  \        }\n        //remove duplicates\n        List<String> w = new ArrayList<String>(hs);\n\
  \        //sort alphabetically\n        w.sort(Comparator.comparing(String::toLowerCase));\n\
  \        \n        //get first item\n        String firstItem = w.get(0);\n    \
  \    //get number of unique characters\n        int count1 = firstItem.chars().distinct().count();\n\
  \        \n        //return first item if max unique count is same for all strings\n\
  \        if (count1 == words.size())\n        {\n            return firstItem;\n\
  \        }\n        \n        //otherwise find max unique count for each string\
  \ and return the one with highest count\n        int maxUniqueCount = 0;\n     \
  \   String maxItem = \"\";\n        for (int i = 0; i < words.size(); i++)\n   \
  \     {\n            String item = w.get(i);\n            int count2 = item.chars().distinct().count();\n\
  \            //if count is higher, save it\n            if (count2 > maxUniqueCount)\n\
  \            {\n                maxUniqueCount = count2;\n                maxItem\
  \ = item;\n            }\n        }\n        return maxItem;"
- "        String maxWord = \"\";\n        Set<String> uniqueChars = new HashSet<String>();\n\
  \        for (String word : words) {\n            for (char character : word.toCharArray())\
  \ {\n                uniqueChars.add(character);\n            }\n        }\n   \
  \     for (String word : words) {\n            if (uniqueChars.size() < word.length())\
  \ {\n                maxWord = word;\n            } else if (uniqueChars.size()\
  \ == word.length()) {\n                boolean isFirst = true;\n               \
  \ for (char character : word.toCharArray()) {\n                    if (uniqueChars.contains(Character.toString(character)))\
  \ {\n                        if (!isFirst) {\n                            maxWord\
  \ = word;\n                            break;\n                        }\n     \
  \               }\n                    isFirst = false;\n                }\n   \
  \         }\n        }\n        return maxWord;"
- "        Map<Integer, String> map = new HashMap<Integer, String>();\n        for(String\
  \ word : words) {\n            int count = map.get(word);\n            if(count\
  \ == null) map.put(word, word);\n            else map.put(word, count + 1);\n  \
  \      }\n        for(String word : map.keySet()) {\n            int count = map.get(word);\n\
  \            if(count > map.size() - 1) return word;\n        }\n        return\
  \ \"\";"
- "        Map<Integer, Integer> counter = new HashMap<Integer, Integer>();\n    \
  \    for (String word : words) {\n            counter.merge(word.length(), 1, Integer::sum);\n\
  \        }\n        List<String> max = new ArrayList<>();\n        int maxLength\
  \ = -1;\n        for (Map.Entry<Integer, Integer> entry : counter.entrySet()) {\n\
  \            if (entry.getValue() > maxLength) {\n                maxLength = entry.getKey();\n\
  \            }\n        }\n        for (String word : words) {\n            if (word.length()\
  \ == maxLength) {\n                max.add(word);\n            }\n        }\n  \
  \      if (max.size() == 0) {\n            return \"\";\n        }\n        if (max.size()\
  \ > 1) {\n            return max.stream().min(Comparator.comparingInt(String::length)).orElse(null);\n\
  \        } else {\n            return max.iterator().next();\n        }"
- "        return words.stream().map(x -> x.replaceAll(\"[^\\\\w]\", \"\")).distinct().count().max()\
  \ + 1\n                == words.stream().map(x -> x.replaceAll(\"[^\\\\w]\", \"\"\
  )).distinct().count() ? words.get(0) : \"\";"
- "        Map<String, Integer> unique = new HashMap<String, Integer>();\n       \
  \ Set<String> uniqueKeys = new HashSet<>();\n        for (String word : words) {\n\
  \            for (char c : word.toCharArray()) {\n                if (!uniqueKeys.contains(String.valueOf(c)))\
  \ {\n                    uniqueKeys.add(String.valueOf(c));\n                  \
  \  unique.put(String.valueOf(c), uniqueKeys.size());\n                }\n      \
  \      }\n        }\n        uniqueKeys.clear();\n        Integer maxValue = unique.get(Collections.max(unique.keySet()));\n\
  \        for (String word : unique.keySet()) {\n            if (unique.get(word)\
  \ == maxValue) {\n                return word;\n            }\n        }\n     \
  \   return \"\";"
- "        ArrayList<Integer> count = new ArrayList<Integer>();\n        HashMap<String,\
  \ Integer> map = new HashMap<String, Integer>();\n        for (String word : words)\
  \ {\n            if (map.containsKey(word)) {\n                map.put(word, map.get(word)\
  \ + 1);\n            } else {\n                map.put(word, 1);\n            }\n\
  \            count.add(map.get(word));\n        }\n        int max = Collections.max(count);\n\
  \        boolean found = false;\n        for(int i=0; i<count.size(); i++) {\n \
  \           if(count.get(i) == max) {\n                found = true;\n         \
  \       break;\n            }\n        }\n        if(!found) {\n            return\
  \ \"\";\n        }\n        int index = 0;\n        for(String word : words) {\n\
  \            if (map.containsKey(word)) {\n                if (map.get(word) ==\
  \ max) {\n                    return word;\n                }\n            }\n \
  \       }\n        return \"\";"
- "        Map<Character, Integer> charCount = new TreeMap<>((a, b) -> Integer.compare(a,\
  \ b));\n        for(String s : words) {\n            charCount.mergeAll(s\n    \
  \                .chars()\n                    .map(c -> new Character(c))\n   \
  \                 .filter(Character::isLetter)\n                    .map(c -> c)\n\
  \                    .collect(Collectors.toSet())\n            );\n        }\n \
  \       Optional<String> max;\n        if(!charCount.isEmpty()) {\n            max\
  \ = Optional.of(charCount.entrySet().stream()\n                    .filter(e ->\
  \ e.getValue().equals(e.getValue()))\n                    .min(Map.Entry.comparingByValue())\n\
  \                    .get().getKey());\n        } else {\n            max = Optional.of(\"\
  <empty>\");\n        }\n        return max.orElse(\"\");"
- "        int uniqueCount = 0;\n        int maxIndex = 0;\n        String maxString\
  \ = \"\";\n        for(int i = 0; i < words.size(); i++) {\n            String currentWord\
  \ = words.get(i);\n            for(int j = 0; j < currentWord.length(); j++) {\n\
  \                if(currentWord.charAt(j) != currentWord.charAt(j)) {\n        \
  \            uniqueCount++;\n                    maxIndex = i;\n               \
  \     break;\n                }\n            }\n            if(uniqueCount > maxCount)\
  \ {\n                maxCount = uniqueCount;\n                maxIndex = i;\n  \
  \              maxString = currentString;\n            }\n        }\n        if(maxCount\
  \ == maxString.length()) {\n            return \"\";\n        } else {\n       \
  \     return maxString;\n        }"
- "        Comparator<String> comparator = Comparator.comparing((String s) -> (int)s.chars().distinct().count());\n\
  \        Optional<String> maxWord = words.stream()\n                .max(comparator);\n\
  \        return maxWord.orElse(\"\");"
- "        Map<String, Integer> counts = new HashMap<>();\n        for (String str\
  \ : words) {\n            int count = counts.getOrDefault(str, 0);\n           \
  \ counts.put(str, count + 1);\n        }\n        Integer max = Collections.max(counts.values());\n\
  \        for (Map.Entry<String, Integer> entry : counts.entrySet()) {\n        \
  \    if (entry.getValue() == max) {\n                return entry.getKey();\n  \
  \          }\n        }\n        return \"\";"
- "        Map<String, Integer> counts = new HashMap<>();\n        for(String s :\
  \ words) {\n            String t = s;\n            for(int i = 0, n = s.length();\
  \ i <= n; ++i) {\n                t = s.substring(0, i) + s.substring(i);\n    \
  \            Integer count = counts.get(t);\n                count = (count == null)\
  \ ? 1 : count + 1;\n                counts.put(t, count);\n            }\n     \
  \   }\n        Integer maxCount = 0;\n        for(String s : counts.keySet()) {\n\
  \            Integer count = counts.get(s);\n            if(count == null || count\
  \ > maxCount) {\n                maxCount = count;\n                maxWord = s;\n\
  \            }\n        }\n        return maxWord;"
- "        int max = 0;\n        String temp = \"\";\n        for (String str : words)\
  \ {\n            int unique = 0;\n            char[] chars = str.toCharArray();\n\
  \            for (int i = 0; i < chars.length; i++) {\n                if (chars.indexOf(chars[i])\
  \ == chars.lastIndexOf(chars[i])) {\n                    unique++;\n           \
  \     }\n            }\n            if (unique > max) {\n                max = unique;\n\
  \                temp = str;\n            }\n        }\n        return temp;"
- "        Map<String, Integer> charCounts = new HashMap<>();\n        for (String\
  \ word : words) {\n            charCounts.merge(word, 1, (count1, count2) -> count1\
  \ + count2);\n        }\n        String maxWord = charCounts.entrySet().stream()\n\
  \                .max(Map.Entry.comparingByValue())\n                .map(Map.Entry::getKey)\n\
  \                .orElse(null);\n        if (maxWord != null) {\n            return\
  \ maxWord;\n        }\n        int maxCount = 0;\n        for (String word : words)\
  \ {\n            int count = charCounts.get(word);\n            if (count > maxCount)\
  \ {\n                maxCount = count;\n                maxWord = word;\n      \
  \      }\n        }\n        return maxWord;"
- "        final Map<String, Integer> counter = new HashMap<>();\n        for (String\
  \ word : words) {\n            counter.merge(word, 1, (count1, count2) -> count1\
  \ + count2);\n        }\n\n        Integer max = null;\n        String maxStr =\
  \ \"\";\n        for (String str : words) {\n            Integer count = counter.get(str);\n\
  \            if (count != null) {\n                if (max < count) {\n        \
  \            max = count;\n                    maxStr = str;\n                }\n\
  \            }\n        }\n\n        return maxStr;"
- "        StringBuilder builder = new StringBuilder();\n\n        for (int i = 0;\
  \ i < words.size(); i++) {\n            int uniqueChars = getUniqueCharacters(words.get(i));\n\
  \            if (uniqueChars > 0) {\n                builder.append(words.get(i));\n\
  \                if (uniqueChars > builder.length()) {\n                    builder.setLength(uniqueChars);\n\
  \                }\n                builder.append(\" \");\n            }\n    \
  \    }\n\n        if (builder.length() > 0) {\n            builder.deleteCharAt(builder.length()\
  \ - 1);\n        }\n\n        return builder.toString();"
- "        int maximum = -1;\n        int currentMax = -1;\n        ArrayList<String>\
  \ currentWord = new ArrayList<>();\n        for (String word : words) {\n      \
  \      char[] characters = new char[word.length()];\n            for (int i = 0;\
  \ i < word.length(); i++) {\n                characters[i] = word.charAt(i);\n \
  \           }\n            int newMax = 0;\n            for (int i = 0; i < characters.length;\
  \ i++) {\n                char c = characters[i];\n                int newCount\
  \ = 1;\n                for (int j = i; j < characters.length; j++) {\n        \
  \            if (characters[j] == c)\n                        newCount++;\n    \
  \            }\n                if (newCount > newMax) {\n                    newMax\
  \ = newCount;\n                }\n            }\n            if (newMax > maximum)\
  \ {\n                currentWord = word;\n                currentMax = newMax;\n\
  \            } else if (currentMax == newMax) {\n                currentWord.add(word);\n\
  \            }\n        }\n        if (currentMax == 0) {\n            return \"\
  \";\n        } else {\n            return currentWord.get(0);\n        }"
- "        List<String> word = new ArrayList<String>();\n        Collections.sort(words);\n\
  \        for (String i : words) {\n            if (i.length() > word.size()) {\n\
  \                word.add(i);\n            }\n        }\n        int unique = 0;\n\
  \        for (String i : word) {\n            unique += i.length();\n        }\n\
  \        if (unique > words.size())\n            return \"\";\n        String max\
  \ = \"\";\n        for (String i : word) {\n            if (i.length() == word.size())\
  \ {\n                if (max.compareTo(i) < 0) {\n                    max = i;\n\
  \                }\n            }\n        }\n        return max;"
- "        ArrayList<String> maxList = new ArrayList<>();\n        char maxChar =\
  \ 0;\n        \n        for (String word : words) {\n            int uniqueChar\
  \ = word.chars().distinct().count();\n            if(uniqueChar > maxChar) {\n \
  \               maxChar = uniqueChar;\n            }\n            maxList.add(word);\n\
  \        }\n        return maxList.get(maxList.size() - 1);"
- "        String maxWord = null;\n        int maxChar = 0;\n        \n        words.stream()\n\
  \            .flatMap(x -> Arrays.asList(x.split(\"\")))\n            .forEach(x\
  \ -> {\n                int xCount = 0;\n                for (char c : x.toCharArray())\
  \ {\n                    xCount += words.get(x).indexOf(c) + 1;\n              \
  \  }\n                \n                if (xCount > maxChar) {\n              \
  \      maxWord = x;\n                    maxChar = xCount;\n                }\n\
  \            });\n\n        return maxWord;"
- "        // Your code here\n        ArrayList <Integer> counts = new ArrayList();\n\
  \        for (int i : words) {\n            int c=0;\n            for (int j = 0;\
  \ j < words.length; j++) {\n                if(!words[j].contains(i))\n        \
  \        {\n                    c++;\n                }\n            }\n       \
  \     counts.add(c);\n        }\n        Collections.sort(counts);\n        for(int\
  \ i = 0; i < counts.size(); i++)\n        {\n            if(counts.get(i)==counts.size()-1)\n\
  \            {\n                return words.get(i);\n            }\n          \
  \  else\n            {\n                if(counts.get(i)<counts.get(counts.size()-1))\n\
  \                {\n                    return words.get(counts.size());\n     \
  \           }\n                else\n                {\n                    return\
  \ words.get(counts.size()-1);\n                }\n            }\n        }\n   \
  \     return \"\";"
- "        Set<String> set = new HashSet<>();\n        ArrayList<String> dup = new\
  \ ArrayList<>();\n        for (String string : words) {\n            for (int i\
  \ = 0; i < string.length(); i++) {\n                if (set.add((string).substring(i,\
  \ i+1))) {\n                    dup.add(string);\n                    break;\n \
  \               }\n            }\n        }\n        Collections.sort(dup);\n  \
  \      if (dup.size() > 1)\n            return dup.get(0);\n        return \"\";"
- "        int max = 0;\n        String answer = \"\";\n        for (String word :\
  \ words) {\n            int numChar = word.length();\n            if (numChar >\
  \ max) {\n                max = numChar;\n                answer = word;\n     \
  \       }\n        }\n        return answer;"
- "        int count = new HashMap<>();\n        for (String word : words) {\n   \
  \         for (int i = 0; i < word.length(); i++) {\n                int c = count.get(word.charAt(i));\n\
  \                if (c == null) {\n                    count.put(word.charAt(i),\
  \ 1);\n                } else {\n                    count.put(word.charAt(i), c\
  \ + 1);\n                }\n            }\n        }\n\n        int maxCount = Integer.MIN_VALUE;\n\
  \        String maxWord = \"\";\n\n        for (Map.Entry entry : count.entrySet())\
  \ {\n            int count = entry.getValue();\n            if (count > maxCount)\
  \ {\n                maxCount = count;\n                maxWord = entry.getKey();\n\
  \            }\n        }\n\n        return maxWord;"
- "        // Create a map to count the character for each string.\n        Map<String,\
  \ Integer> map = new HashMap<String, Integer>();\n        for (String w : words)\
  \ {\n            if (map.containsKey(w)) {\n                map.put(w, map.get(w)\
  \ + 1);\n            } else {\n                map.put(w, 1);\n            }\n \
  \       }\n\n        // Find maximum\n        Integer maxValue = 0;\n        String\
  \ maxWord = \"\";\n        for (String word : map.keySet()) {\n            if (maxValue\
  \ < map.get(word)) {\n                maxValue = map.get(word);\n              \
  \  maxWord = word;\n            }\n        }\n\n        // If multiple strings have\
  \ maximum number of unique characters, return\n        // the one which comes first\
  \ in lexicographical order.\n        ArrayList<String> ordered = new ArrayList<>();\n\
  \        for (String word : words) {\n            if (maxWord == word) {\n     \
  \           ordered.add(word);\n            } else if (ordered.size() > 0 && ordered.get(0).compareTo(word)\
  \ < 0) {\n                ordered.add(word);\n            }\n        }\n       \
  \ return ordered.get(0); // return the first string as our answer"
- "        int count[] = new int[256];\n        for (String word : words) {\n    \
  \        int i;\n            for (i = 0; i < word.length(); i++) {\n           \
  \     count[word.charAt(i)]++;\n            }\n        }\n        int maxCount =\
  \ -Integer.MAX_VALUE;\n        String max = \"\";\n        for (String word : words)\
  \ {\n            int count = count[word.charAt(0)];\n            for (int i = 1;\
  \ i < word.length(); i++) {\n                count += count[word.charAt(i)];\n \
  \               if (count > maxCount) {\n                    maxCount = count;\n\
  \                    max = word;\n                }\n            }\n        }\n\
  \        return max;"
- "        Map<String, Integer> counts = new HashMap<>();\n        for (String word\
  \ : words) {\n            Integer count = counts.getOrDefault(word, 0);\n      \
  \      counts.put(word, ++count);\n        }\n        \n        // Sort the keys\
  \ of counts based on the number of occurrences\n        List<String> sortedKeys\
  \ = counts.entrySet().stream()\n            .sorted(Map.Entry.comparingByValue())\n\
  \            .map(Map.Entry::getKey)\n            .collect(Collectors.toList());\n\
  \        \n        // Return the element with the highest count\n        return\
  \ sortedKeys.get(0);"
- "        int maxLength = 1;\n        Collections.sort(words);\n        int maxIndex\
  \ = 0;\n        for (int i = 0; i < words.size(); i++) {\n            if (words.get(i).length()\
  \ > maxLength) {\n                maxLength = words.get(i).length();\n         \
  \       maxIndex = i;\n            }\n        }\n        return words.get(maxIndex);"
- "        Map<String, Integer> map = new HashMap<>();\n        for (String word :\
  \ words) {\n            for (int i = 0; i < word.length(); i++) {\n            \
  \    String key = word.substring(0, i);\n                if (map.get(key) == null)\
  \ map.put(key, 0);\n                map.put(key, map.get(key) + 1);\n          \
  \  }\n        }\n        System.out.println(map);\n        Iterator<String> it =\
  \ words.iterator();\n        String max = null;\n        int maxCount = 0;\n   \
  \     while (it.hasNext()) {\n            String word = it.next();\n           \
  \ int count = map.get(word);\n            if (count > maxCount) {\n            \
  \    max = word;\n                maxCount = count;\n            }\n        }\n\
  \        return max;"
- "        if (words == null || words.size() < 1) {\n            return \"\";\n  \
  \      }\n        Map<String, Integer> wordMap = new HashMap<>();\n        for (String\
  \ word : words) {\n            Integer count = wordMap.getOrDefault(word, 0);\n\
  \            wordMap.put(word, count + 1);\n        }\n        Integer maxCount\
  \ = Collections.max(wordMap.values());\n        if (maxCount == null || maxCount\
  \ < 1) {\n            return \"\";\n        }\n        ArrayList<String> maxWords\
  \ = new ArrayList<>();\n        for (String word : wordMap.values()) {\n       \
  \     if (word == maxCount) {\n                maxWords.add(word);\n           \
  \ }\n        }\n        return Collections.max(maxWords, (a, b) -> {\n         \
  \   return a.compareTo(b);\n        }).orElse(\"\");"
- "        // TODO: Fill the body of the function.\n        String max = \"\";\n \
  \       HashMap<Character, Integer> charCountMap = new HashMap<>();\n        for(String\
  \ word: words) {\n            for (char c: word.toCharArray()) {\n             \
  \   if (!charCountMap.containsKey(c)) {\n                    charCountMap.put(c,\
  \ 1);\n                } else {\n                    charCountMap.put(c, charCountMap.get(c)\
  \ + 1);\n                }\n            }\n        }\n        if (charCountMap.values().stream().max().orElse(0)\
  \ != 0) {\n            max = charCountMap.entrySet().stream().filter(e -> e.getValue()\
  \ == charCountMap.values().stream().max().orElse(0)).map(Map.Entry::getKey).findFirst().orElse(\"\
  \");\n        }\n        return max;"
- "        Set<String> unique = new HashSet<>();\n        for(String word : words)\
  \ {\n            unique.add(word);\n        }\n        int max = 0;\n        for(String\
  \ word : unique) {\n            int count = 1;\n            for(String s : words)\
  \ {\n                if(s.equals(word)) {\n                    count++;\n      \
  \          }\n            }\n            if(count > max) {\n                max\
  \ = count;\n            }\n        }\n        return unique.size() > max ? unique.iterator().next()\
  \ : \"\";"
- "        List<String> sorted = new ArrayList<>();\n        HashMap<String, Integer>\
  \ map = new HashMap<>();\n        for (String word : words) {\n            if (map.containsKey(word))\
  \ {\n                map.put(word, map.get(word) + 1);\n            } else {\n \
  \               map.put(word, 1);\n            }\n        }\n        map.entrySet().stream().sorted(Map.Entry.comparingByValue())\n\
  \                .map(Map.Entry::getKey).forEach(s -> sorted.add(s));\n        return\
  \ sorted.isEmpty() ? \"\" : sorted.get(sorted.size() - 1);"
- "        // TODO: Write your code here.\n        int max = 0;\n        String maxString\
  \ = \"\";\n        for(String word: words) {\n            int currentCount = 1;\n\
  \            for(char c: word.toCharArray()) {\n                currentCount *=\
  \ word.toCharArray().length;\n            }\n            if(currentCount > max)\
  \ {\n                max = currentCount;\n                maxString = word;\n  \
  \          }\n        }\n        return maxString;"
- "        HashMap<String, Integer> counter = new HashMap<>();\n        for (String\
  \ word : words) {\n            int count = counter.get(word);\n            if (count\
  \ == null || count > word.length()) {\n                counter.put(word, word.length());\n\
  \            }\n        }\n        Iterator<String> iterator = counter.keySet().iterator();\n\
  \        if (iterator.hasNext()) {\n            String next = iterator.next();\n\
  \            while (iterator.hasNext()) {\n                String first = iterator.next();\n\
  \                int count2 = counter.get(first);\n                if (count2 ==\
  \ 0 || count2 > counter.get(next)) {\n                    counter.put(first, counter.get(next));\n\
  \                }\n                next = first;\n            }\n            return\
  \ counter.get(next) + \"\";\n        }\n        return \"\";"
- "        // Your code here\n        \n        // Initialize variables\n        \n\
  \        int uniqueCharacterCount = 0;\n        int maxCharacterCount = 0;\n   \
  \     \n        // Loop over all words\n        \n        for(int i = 0; i < words.size();\
  \ i++) {\n            String word = words.get(i);\n            \n            //\
  \ Initialize variables\n            \n            String tempWord = \"\";\n    \
  \        \n            // Loop over all letters of each word\n            \n   \
  \         for(int j = 0; j < word.length(); j++) {\n                char letter\
  \ = word.charAt(j);\n                \n                // Check to see if letter\
  \ has already been used\n                \n                if(tempWord.contains(letter)\
  \ == true) {\n                    uniqueCharacterCount++;\n                } else\
  \ {\n                    uniqueCharacterCount = 0;\n                    tempWord\
  \ += letter;\n                }\n                \n                // Check to see\
  \ if the current letter has the maximum count of unique characters\n           \
  \     \n                if(uniqueCharacterCount > maxCharacterCount) {\n       \
  \             maxCharacterCount = uniqueCharacterCount;\n                }\n   \
  \         }\n        }\n        \n        // Return the word with maximum number\
  \ of unique characters\n        \n        return words.get(0);"
- "        ArrayList<String> maxWord = new ArrayList<String>();\n        ArrayList<String>\
  \ maxCount = new ArrayList<String>();\n        Map<String, Integer> map = new HashMap<>();\n\
  \        for (String word : words) {\n            if (map.containsKey(word)) {\n\
  \                Integer count = map.get(word);\n                map.put(word, count\
  \ + 1);\n            } else {\n                map.put(word, 1);\n            }\n\
  \        }\n        for (Map.Entry<String, Integer> entry : map.entrySet()) {\n\
  \            int count = entry.getValue();\n            if (count > maxCount.get(0))\
  \ {\n                maxWord.add(entry.getKey());\n                maxCount.add(String.valueOf(count));\n\
  \            }\n        }\n        if (maxCount.size() > 0) {\n            return\
  \ maxWord.get(0);\n        }\n        return \"\";"
- "        Map<String, Integer> map = new TreeMap<>();\n        for (String word :\
  \ words) {\n            int count = getWordCount(word, map);\n            if (count\
  \ > map.get(word)) {\n                map.put(word, count);\n            }\n   \
  \     }\n        return map.isEmpty() ? \"\" : getWordWithMaxCount(map, words);"
- "        if (words.size() == 0) {\n            return \"\";\n        }\n       \
  \ // Use a set to count the characters, which is faster than ArrayList.\n      \
  \  Set<Character> counts = new HashSet<>();\n        for (String word : words) {\n\
  \            for (char c : word.toCharArray()) {\n                counts.put(c);\n\
  \            }\n        }\n        Integer maxCount = null;\n        Integer minCount\
  \ = Integer.MAX_VALUE;\n        String maxWord = null;\n        for (String word\
  \ : words) {\n            int count = 0;\n            for (char c : word.toCharArray())\
  \ {\n                count = (counts.contains(c)) ? count+1 : count;\n         \
  \   }\n            if (count > maxCount) {\n                maxCount = count;\n\
  \                maxWord = word;\n            } else if (count < minCount) {\n \
  \               minCount = count;\n            }\n        }\n        if (maxCount\
  \ == null || maxCount.intValue() >= minCount.intValue()) {\n            return maxWord;\n\
  \        }\n        // If the max count is zero, the max word is empty.\n      \
  \  return \"\";"
- "        String max = \"\";\n        ArrayList<String> unique = new ArrayList<>();\n\
  \n        for(String word : words) {\n            char [] chars = word.toCharArray();\n\
  \            String s = \"\";\n            for (int i = 0; i < chars.length; i++)\
  \ {\n                s = s + chars[i];\n            }\n            if (!unique.contains(s))\
  \ {\n                unique.add(s);\n                if (s.length() > max.length())\
  \ {\n                    max = s;\n                }\n            }\n        }\n\
  \        return max;"
- "        int max = 0;\n        String result = \"\";\n        for (String word :\
  \ words) {\n            Set<String> uniqueChars = new HashSet<>();\n           \
  \ for (char c : word.toCharArray()) {\n                if (!uniqueChars.contains(String.valueOf(c)))\
  \ {\n                    uniqueChars.add(String.valueOf(c));\n                }\n\
  \            }\n            if (uniqueChars.size() > max) {\n                result\
  \ = word;\n                max = uniqueChars.size();\n            } else if (uniqueChars.size()\
  \ == max) {\n                if (uniqueChars.contains(word)) {\n               \
  \     result = word;\n                }\n            }\n        }\n        return\
  \ result;"
- "        String result = \"\";\n        Map<String, Integer> wordsMap = new HashMap<>();\n\
  \        for(int i = 0; i < words.size(); i++) {\n            String word = words.get(i);\n\
  \            Integer count = wordsMap.getOrDefault(word, 0);\n            wordsMap.put(word,\
  \ count + 1);\n        }\n        for(Map.Entry<String, Integer> entry : wordsMap.entrySet())\
  \ {\n            if(entry.getValue() > result.length()) {\n                result\
  \ = entry.getKey();\n            }\n        }\n        return result;"
- "        if (words == null || words.size() == 0) {\n            return \"\";\n \
  \       }\n\n        TreeMap<Integer, String> wordsCount = new TreeMap<Integer,\
  \ String>();\n\n        // Create a map of all unique characters and their count\n\
  \        for (String word : words) {\n            for (char letter : word.toCharArray())\
  \ {\n                int count = 0;\n                if (wordsCount.containsKey(letter))\
  \ {\n                    count = wordsCount.get(letter);\n                }\n\n\
  \                wordsCount.put(letter, ++count);\n            }\n        }\n\n\
  \        // If there are multiple words with max number of unique characters, return\
  \ the first one\n        if (wordsCount.size() > 1) {\n            int maxCount\
  \ = wordsCount.lastKey();\n            String maxWord = wordsCount.get(maxCount);\n\
  \            int lowestCount = maxCount - 1;\n            for (String word : words)\
  \ {\n                int count = 0;\n                if (wordsCount.containsKey(word))\
  \ {\n                    count = wordsCount.get(word);\n                }\n\n  \
  \              if (count == maxCount) {\n                    lowestCount = Math.min(lowestCount,\
  \ count - 1);\n                    if (lowestCount == 0) {\n                   \
  \     return word;\n                    }\n                }\n            }\n  \
  \      }\n\n        // If there are no words with max number of unique characters,\
  \ return an empty string\n        return \"\";"
- "        // write your code here\n        "
- "        Map<String, Integer> charMap = new HashMap<>();\n        for (String word\
  \ : words) {\n            for (int i = 0; i < word.length(); i++) {\n          \
  \      charMap.put(word.substring(i, i + 1), charMap.get(word.substring(i, i + 1))\
  \ + 1);\n            }\n        }\n        \n        // sort the map and find the\
  \ max value\n        List<String> result = new ArrayList<>(charMap.entrySet());\n\
  \        result.sort(Comparator.comparing(Map.Entry::getValue).reversed());\n  \
  \      \n        // if we have multiple strings, select the one which comes first\
  \ in lexicographical order\n        if (result.size() > 1) {\n            return\
  \ result.get(0);\n        } else {\n            return \"\";\n        }"
- "        // sort the array in reverse order\n        Collections.sort(words, (o1,\
  \ o2) -> {\n            return o2.length() - o1.length();\n        });\n       \
  \ int maxCount = 0;\n        Iterator<String> it = words.iterator();\n        while\
  \ (it.hasNext()) {\n            String word = it.next();\n            int count\
  \ = 1;\n            while (it.hasNext()) {\n                if (word.equalsIgnoreCase(it.next()))\
  \ {\n                    count++;\n                }\n            }\n          \
  \  if (count > maxCount) {\n                maxCount = count;\n            }\n \
  \       }\n        // return the word with maximum number of unique characters\n\
  \        if (maxCount == words.size()) {\n            return words.get(0);\n   \
  \     }\n        return words.get(maxCount - 1);"
- "        Set<String> s = new HashSet<>();\n        int maxCount = 0;\n        for\
  \ (String w : words) {\n            if (s.contains(w)) {\n                maxCount++;\n\
  \            } else {\n                s.add(w);\n                maxCount = 1;\n\
  \            }\n        }\n        return words.get(words.indexOf(s.toArray(new\
  \ String[s.size()])[0]));"
- "        Map<Integer, Integer> charMap = new HashMap<>();\n        for (String word\
  \ : words) {\n            charMap.merge(Arrays.asList(word).stream().distinct().count(),\
  \ 1, Integer::sum);\n        }\n        int maxVal = Collections.max(charMap.values());\n\
  \        for (Map.Entry<Integer, Integer> entry : charMap.entrySet()) {\n      \
  \      if (entry.getValue() == maxVal) {\n                return entry.getKey().toString();\n\
  \            }\n        }\n        return \"\";"
- "        TreeMap<String,Integer> map = new TreeMap<String,Integer>();\n        for(String\
  \ word: words) {\n            map.put(word,map.getOrDefault(word,0)+1);\n      \
  \  }\n        String maxWord = Collections.max(map.keySet());\n        int maxCount\
  \ = map.get(maxWord);\n        for(String word : words) {\n            int count\
  \ = map.getOrDefault(word,0);\n            if(maxCount < count) {\n            \
  \    maxWord = word;\n                maxCount = count;\n            }\n       \
  \ }\n        return maxWord;"
- '        // TODO: Complete the implementation.'
- "        int maxCount = 0;\n        String max = null;\n        for (String word\
  \ : words) {\n            int count = getUniqueCharCount(word);\n            if\
  \ (count > maxCount) {\n                maxCount = count;\n                max =\
  \ word;\n            }\n        }\n        if (maxCount == 0) {\n            return\
  \ \"\";\n        }\n        if (maxCount == 1) {\n            return max;\n    \
  \    }\n        return max;"
- "        // TODO: write your logic here\n        return words.get(0);"
- "        Collections.sort(words);\n        int maxSize = 0, maxCount = 0;\n    \
  \    for (String str : words) {\n            char[] chs = str.toCharArray();\n \
  \           int count = 0;\n            for (char c : chs) {\n                count\
  \ += 1;\n                if (count > maxCount) {\n                    maxCount =\
  \ count;\n                    maxSize = chs.length;\n                }\n       \
  \     }\n        }\n        return maxSize <= maxCount ? null : words.get(0);"
- "        int maxUniqueChars = Collections.frequency(words, \"\");\n        int maxIndex\
  \ = 0;\n        int maxValue = 0;\n\n        for (int i = 0; i < words.size(); i++)\
  \ {\n            String word = words.get(i);\n            int countUniqueChars =\
  \ Collections.frequency(words, word);\n\n            if (countUniqueChars > maxUniqueChars)\
  \ {\n                maxIndex = i;\n                maxUniqueChars = countUniqueChars;\n\
  \            }\n        }\n\n        return words.get(maxIndex);"
- "        // write your code here\n        int max = Collections.max(words, (Comparator<String>)\
  \ String::length).length();\n        System.out.println(max);\n        System.out.println(Collections.max(words,\
  \ (Comparator<String>) String::length));\n        for (String s:words){\n      \
  \      int n = s.length();\n            if (n > max){\n                max = n;\n\
  \            }\n        }\n        for (String s:words){\n            if (s.length()\
  \ == max){\n                return s;\n            }\n        }\n        return\
  \ \"\";"
- "        int[] counts = new int[256];\n        for( String word: words ) {\n   \
  \         for( int ch: word.toCharArray() ) {\n                counts[ch]++;\n \
  \           }\n        }\n        int max_count = -1;\n        for( int i = 1; i\
  \ <= 256; i++) {\n            if( counts[i] > max_count ) {\n                max_count\
  \ = counts[i];\n                String result = \"\";\n                for( int\
  \ j = 0; j <= i; j++) {\n                    result += String.valueOf(j);\n    \
  \            }\n                return result;\n            }\n        }\n     \
  \   return \"\";"
- "        String[] arr = words.toArray(new String[words.size()]);\n        String[]\
  \ arr1 = new String[arr.length];\n        Arrays.sort(arr);\n        for (int i\
  \ = 0; i < arr.length; i++) {\n            String k = arr[i];\n            int count\
  \ = 0;\n            for (int j = 0; j < arr1.length; j++) {\n                if\
  \ (k.compareTo(arr1[j]) == 0) {\n                    count++;\n                }\n\
  \            }\n            if (count == arr1.length) {\n                arr1[i]\
  \ = k;\n            }\n        }\n        String result = \"\";\n        for (int\
  \ i = 0; i < arr1.length; i++) {\n            if (arr1[i] != \"\") {\n         \
  \       result = arr1[i];\n                break;\n            }\n        }\n  \
  \      return result;"
- "        if (words.size() < 1) {\n            return \"\";\n        }\n        Set<Character>\
  \ characters = new HashSet<>();\n        int maxCount = 0;\n        for(String word\
  \ : words) {\n            for (char character : word.toCharArray()) {\n        \
  \        characters.add(character);\n            }\n            int count = characters.size();\n\
  \            if (count > maxCount) {\n                maxCount = count;\n      \
  \      }\n        }\n        if (maxCount > 1) {\n            String maxWord = null;\n\
  \            for(String word : words) {\n                int count = characters.size();\n\
  \                if (count > 1) {\n                    if (maxCount == count) {\n\
  \                        maxWord = word;\n                    }\n              \
  \  }\n            }\n            return maxWord;\n        } else {\n           \
  \ return words.get(0);\n        }"
- "        Map<String, Integer> map = new HashMap<String, Integer>();\n        for\
  \ (String word : words) {\n            int count = 0;\n            for (int i =\
  \ 0; i < word.length(); i++) {\n                if (!map.containsKey(word.substring(0,\
  \ i))) {\n                    map.put(word.substring(0, i), 1);\n              \
  \  } else {\n                    map.put(word.substring(0, i), map.get(word.substring(0,\
  \ i)) + 1);\n                }\n            }\n        }\n\n        for (String\
  \ key : map.keySet()) {\n            Integer val = map.get(key);\n            if\
  \ (val > 0) {\n                if (val > map.get(key)) {\n                    map.put(key,\
  \ val);\n                }\n            }\n        }\n\n        // This will be\
  \ a list with words with maximum count of unique characters in lexicographical order\n\
  \        List<String> maxList = new ArrayList<>();\n        for (String key : map.keySet())\
  \ {\n            Integer val = map.get(key);\n            if (val > 0) {\n     \
  \           maxList.add(key);\n            }\n        }\n\n        // For finding\
  \ max we always take first element from maxList in lexicographical order\n     \
  \   Optional<String> maxItem = maxList.stream().reduce((x, y) -> x.compareTo(y)).orElse(maxList.get(0));\n\
  \        return maxItem;"
- "        Set<String> s = new HashSet<>();\n        int max = 0;\n        for (String\
  \ word : words) {\n            int n = word.chars().distinct().count();\n      \
  \      if (n > max) {\n                max = n;\n                s.clear();\n  \
  \          }\n            s.add(word);\n        }\n        return s.isEmpty() ?\
  \ null : Collections.max(s);"
- "        // Write your code here\n        int max = 0;\n        int maxCount = 0;\n\
  \        String word = \"\";\n        for (String word : words) {\n            int\
  \ count = 0;\n            for (int i = 0; i < word.length(); i++) {\n          \
  \      char letter = word.charAt(i);\n                if (letter == word.charAt(0))\
  \ {\n                    count++;\n                }\n            }\n          \
  \  if (count > maxCount) {\n                maxCount = count;\n                word\
  \ = word;\n            }\n        }\n        return word;"
- "        Collections.sort(words);\n\n        return words.get(0);"
- "        List<String> uniques = new ArrayList<>();\n        Set<Character> charSet\
  \ = new HashSet<>();\n        uniques.addAll(words);\n        charSet.addAll(words.stream().flatMap(w\
  \ -> w.chars().distinct().boxed().collect(Collectors.toSet())).collect(Collectors.toSet()));\n\
  \n        Set<String> charList = new HashSet<>();\n        charSet.removeAll(uniques);\n\
  \        charList.addAll(uniques);\n\n        Iterator<String> it = charList.iterator();\n\
  \        String temp = \"\";\n\n        while (it.hasNext()) {\n            temp\
  \ = temp + it.next();\n        }\n\n        for (Iterator<String> i = charSet.iterator();\
  \ i.hasNext();) {\n            if (i.next().equals(temp)) {\n                i.remove();\n\
  \            }\n        }\n\n        return temp;"
- "        ArrayList<String> res = new ArrayList<>();\n        int max_char_sum =\
  \ 0;\n        String max_word = \"\";\n        for (String word : words) {\n   \
  \         int charCount = word.length();\n            if (charCount > max_char_sum)\
  \ {\n                max_char_sum = charCount;\n                max_word = word;\n\
  \            }\n        }\n        if (max_char_sum > 0) {\n            res.add(max_word);\n\
  \            Collections.sort(res);\n        }\n        return res.isEmpty() ? \"\
  \" : res.get(0);"
- "        Map<String, Integer> countMap = new HashMap<>();\n        for (String word\
  \ : words) {\n            int count = countMap.get(word);\n            if (count\
  \ != null)\n                countMap.put(word, count + 1);\n            else\n \
  \               countMap.put(word, 1);\n        }\n        return counts.entrySet().stream().max(Comparator.comparing(Map.Entry::getValue)).get().getKey();"
- "        // Write code here\n        ArrayList<String> temp = new ArrayList<String>();\n\
  \        for(int i = 0;i < words.size();i++){\n            if(temp.contains(words.get(i))){\n\
  \                temp.remove(words.get(i));\n            }else{\n              \
  \  temp.add(words.get(i));\n            }\n        }\n        return words.get(0);"
- "        \n        // Write your code here\n\n        String max = null;\n     \
  \   Map<String, Integer> countMap = new HashMap<>();\n        for (String word :\
  \ words) {\n            Integer count = countMap.get(word);\n            if (count\
  \ == null) {\n                count = 1;\n            } else {\n               \
  \ count += 1;\n            }\n            countMap.put(word, count);\n        }\n\
  \        for (String word : countMap.keySet()) {\n            if (countMap.get(word).equals(countMap.get(max)))\
  \ {\n                max = word;\n                break;\n            }\n      \
  \  }\n        return max;"
- "        // your code here\n        int maxLen = 0;\n        String maxWord = \"\
  \";\n        for (String s : words) {\n            int len = s.length();\n     \
  \       if (len > maxLen) {\n                maxLen = len;\n                maxWord\
  \ = s;\n            }\n        }\n        return maxWord;"
- "        Set<Character> chars = new HashSet<>();\n        List<String> strs = new\
  \ ArrayList<>();\n        for (String str : words) {\n            chars.clear();\n\
  \            for (char ch : str.toCharArray()) {\n                chars.add(ch);\n\
  \            }\n            if (chars.size() > 0) {\n                strs.add(str);\n\
  \            }\n        }\n\n        int max = 0;\n        String maxStr = \"\"\
  ;\n        for (String str : strs) {\n            chars.clear();\n            for\
  \ (char ch : str.toCharArray()) {\n                chars.add(ch);\n            }\n\
  \            if (chars.size() > max) {\n                max = chars.size();\n  \
  \              maxStr = str;\n            }\n        }\n\n        return maxStr;"
- "        \n        if (words.size() == 0) return \"\";\n        \n        Map<String,\
  \ Integer> charCounts = new HashMap<>();\n        \n        for (String w : words)\
  \ {\n            charCounts.put(w, charCounts.getOrDefault(w, 0) + 1);\n       \
  \ }\n        \n        Optional<String> maxChar = Optional.empty();\n        \n\
  \        for (int i = 0; i < charCounts.size(); i++) {\n            int count =\
  \ charCounts.get(i) + 1;\n            if (maxChar.isPresent() && count > maxChar.get().getCount())\
  \ {\n                maxChar = Optional.empty();\n            } else if (count >\
  \ maxChar.get().getCount()) {\n                maxChar = Optional.of(charCounts.get(i));\n\
  \            }\n        }\n        \n        if (maxChar.isPresent()) {\n      \
  \      return maxChar.get();\n        } else {\n            return findFirst(words);\n\
  \        }"
- '        return null;'
- "        List<String> max = new ArrayList<>();\n        words.stream().forEach(word\
  \ -> {\n            String tmp = word;\n            if (max.stream().noneMatch(x\
  \ -> x.equalsIgnoreCase(tmp))) {\n                max.add(tmp);\n            }\n\
  \        });\n        if (max.size() > 0) {\n            return max.stream().sorted(Comparator.reverseOrder()).findFirst().get();\n\
  \        }\n        return \"\";"
- "        Set<String> unique = new HashSet<>();\n        for (String word: words)\
  \ {\n            unique.addAll(word.split(\"\"));\n        }\n        Collections.sort(unique,\
  \ String::compareToIgnoreCase);\n        unique.stream()\n            .filter(unique::contains)\n\
  \            .min(Comparator.comparingInt(unique::length))\n            .ifPresent(str\
  \ -> System.out.println(str));\n        return \"\";"
- "        // Solution code here\n        ArrayList<Integer> charCountList = new ArrayList<>();\n\
  \        for(String s : words) {\n            charCountList.add(s.length());\n \
  \       }\n        int max = 0;\n        int maxIndex = 0;\n        for(int i =\
  \ 0 ; i < charCountList.size() ; i++) {\n            if(max < charCountList.get(i))\
  \ {\n                max = charCountList.get(i);\n                maxIndex = i;\n\
  \            }\n        }\n        return words.get(maxIndex);"
- "        Arrays.sort(words);\n\n        int highestUnique = 0;\n        String highestWord\
  \ = \"\";\n\n        for(int i = 0; i< words.size(); i++){\n            int countUnique\
  \ = words.get(i).chars().distinct().count();\n            if (countUnique > highestUnique){\n\
  \                highestUnique = countUnique;\n                highestWord = words.get(i);\n\
  \            }\n        }\n        return highestWord;"
- "        // Your code here\n        String max = \"\";\n        Map<String, Integer>\
  \ countMap = new HashMap<>();\n        for(String w: words){\n            String\
  \ s = w.length();\n            Integer count = countMap.get(s);\n            if(count\
  \ != null){\n                if(count > countMap.get(max).intValue()){\n       \
  \             max= s;\n                }\n            }else{\n                countMap.put(s,1);\n\
  \            }\n        }\n        return max;"
- "        // Write your code here.\n        \n        Map<String, Integer> map =\
  \ new HashMap<>();\n        for (String word : words) {\n            int count =\
  \ map.get(word);\n            if (count > 0) {\n                map.put(word, count-1);\n\
  \            } else {\n                map.put(word, 1);\n            }\n      \
  \  }\n        \n        int max = -1;\n        String maxWord = \"\";\n        for\
  \ (String word : words) {\n            int count = map.get(word);\n            if\
  \ (count > max) {\n                max = count;\n                maxWord = word;\n\
  \            }\n        }\n        return maxWord;"
- "        // If no input word is given, return empty string\n        if (words ==\
  \ null || words.isEmpty()) {\n            return \"\";\n        }\n\n        //\
  \ Create a map of unique characters. Initialize to empty map\n        Map<Character,\
  \ Integer> characterCountMap = new HashMap<>();\n\n        // Loop through the words\
  \ and count the unique characters\n        for (String word : words) {\n       \
  \     for (char c : word.toCharArray()) {\n                if (!characterCountMap.containsKey(c))\
  \ {\n                    // If character is new and does not exist in the map, add\
  \ it to map\n                    characterCountMap.put(c, 1);\n                }\
  \ else {\n                    // If character is new and does exist in the map,\
  \ increment the count in the map\n                    characterCountMap.put(c, characterCountMap.get(c)\
  \ + 1);\n                }\n            }\n        }\n\n        // Iterate over\
  \ map and find the max count character\n        int maxCount = 0;\n        for (Character\
  \ c : characterCountMap.keySet()) {\n            if (characterCountMap.get(c) >\
  \ maxCount) {\n                maxCount = characterCountMap.get(c);\n          \
  \  }\n        }\n\n        // If there are multiple words with the max count character,\
  \ return first word lexicographically\n        // otherwise, return empty string\n\
  \        if (maxCount > 1) {\n            return words.get(0);\n        } else {\n\
  \            return \"\";\n        }"
- "        Arrays.sort(words);\n        HashSet<String> set = new HashSet<String>(words);\n\
  \        int count= 0;\n        for (int i=0; i<words.size(); i++) {\n         \
  \   if (set.contains(words.get(i))) {\n                count++;\n            }\n\
  \        }\n        String[] arr = new String[count];\n        int index = 0;\n\
  \        for (int i=0; i<words.size(); i++) {\n            if (set.contains(words.get(i)))\
  \ {\n                arr[index++] = words.get(i);\n            }\n        }\n  \
  \      String result = \"\";\n        for (int i=0; i<arr.length; i++) {\n     \
  \       int count = 0;\n            String temp = arr[i];\n            while (temp.charAt(0)\
  \ == temp.charAt(1))\n                temp = temp.substring(1);\n            while\
  \ (temp.charAt(temp.length()-1) == temp.charAt(temp.length()-2))\n             \
  \   temp = temp.substring(0, temp.length()-1);\n            while (temp.charAt(0)\
  \ == temp.charAt(temp.length()-1))\n                temp = temp.substring(1);\n\
  \            while (temp.charAt(temp.length()-1) == temp.charAt(temp.length()-2))\n\
  \                temp = temp.substring(0, temp.length()-1);\n            if (temp.charAt(0)\
  \ == temp.charAt(temp.length()-1))\n                temp = temp.substring(1);\n\
  \            if (temp.charAt(temp.length()-1) == temp.charAt(temp.length()-2))\n\
  \                temp = temp.substring(0, temp.length()-1);\n            for (int\
  \ j=0; j<temp.length(); j++) {\n                if (temp.charAt(j) == temp.charAt(temp.length()-1))\n\
  \                    count++;\n            }\n            if (count > result)\n\
  \                result = arr[i];\n        }\n        return result;"
- "        \n        String word = null;\n        int max = 0;\n        for (String\
  \ s: words) {\n            char[] arr = s.toCharArray();\n            int count\
  \ = 0;\n            for (char c : arr) {\n                if (Character.isLetter(c))\
  \ {\n                    count++;\n                }\n            }\n          \
  \  if (count > max) {\n                max = count;\n                word = s;\n\
  \            }\n        }\n        return word;"
- "        int maxChar = 0;\n        String maxWord = \"\";\n        String maxWord2\
  \ = \"\";\n        for(int i = 0; i < words.size(); i++) {\n            String currentWord\
  \ = words.get(i);\n            int currentChar = currentWord.length();\n       \
  \     if(currentChar > maxChar) {\n                maxChar = currentChar;\n    \
  \            maxWord = currentWord;\n            }\n        }\n        for(int j\
  \ = 0; j < words.size(); j++) {\n            String currentWord2 = words.get(j);\n\
  \            int currentChar2 = currentWord2.length();\n            if(currentChar2\
  \ > maxChar) {\n                maxChar2 = currentChar2;\n                maxWord2\
  \ = currentWord2;\n            }\n        }\n        int maxNumOfChars = maxChar;\n\
  \        if(maxNumOfChars == maxChar2) {\n            return maxWord2;\n       \
  \ } else if(maxNumOfChars < maxChar2) {\n            return maxWord;\n        }\
  \ else {\n            return maxWord2;\n        }"
- "        ArrayList<Integer> counts = new ArrayList<Integer>();\n        for (String\
  \ s : words) {\n            counts.add(countChars(s));\n        }\n        int max\
  \ = Collections.max(counts);\n        int maxIndex = 0;\n        for (int i = 0;\
  \ i < counts.size(); i++) {\n            if (counts.get(i) == max) {\n         \
  \       maxIndex = i;\n            }\n        }\n        return words.get(maxIndex);"
- "        String word = \"\";\n        int maxCount = 0;\n        for (String s :\
  \ words) {\n            char[] uniqueChars = s.toCharArray();\n            Arrays.sort(uniqueChars);\n\
  \            int currentCount = uniqueChars.length;\n            if (currentCount\
  \ > maxCount) {\n                word = s;\n                maxCount = currentCount;\n\
  \            }\n        }\n        return word;"
- "        Map<String, Integer> map = new HashMap<>();\n        for(String s : words)\
  \ {\n            int count = 0;\n            for(char c : s.toCharArray()) {\n \
  \               if(map.containsKey(c)) {\n                    count = map.get(c);\n\
  \                }\n                map.put(c, count + 1);\n            }\n    \
  \    }\n        \n        Iterator<Map.Entry<String, Integer>> it = map.entrySet().iterator();\n\
  \        Map.Entry<String, Integer> entry = it.next();\n        while(it.hasNext())\
  \ {\n            entry = it.next();\n            if(entry.getValue() > entry.getKey().length())\
  \ {\n                return entry.getKey();\n            }\n        }\n        return\
  \ \"\";"
- "        \n        Arrays.sort(words);\n\n        for(String str : words) {\n  \
  \          if (str.chars().distinct().count() > words.size())\n                return\
  \ str;\n        }\n        return \"\";"
- "        Map<String, Integer> count = new HashMap<String, Integer>();\n        for\
  \ (String word: words) {\n            for (int i = 0; i < word.length(); i++) {\n\
  \                if (count.containsKey(word.substring(0, i)))\n                \
  \    count.put(word.substring(0, i), count.get(word.substring(0, i)) + 1);\n   \
  \             else\n                    count.put(word.substring(0, i), 1);\n  \
  \          }\n        }\n\n        for (Map.Entry<String, Integer> pair: count.entrySet())\
  \ {\n            if (pair.getValue() > words.size())\n                return pair.getKey();\n\
  \        }\n        return \"\";"
- "        int maxChar = 0;\n        for(String word: words) {\n            char[]\
  \ chars = word.toCharArray();\n            int uniqueChars = 0;\n            for(char\
  \ c: chars) {\n                uniqueChars++;\n                if(uniqueChars >\
  \ maxChar) maxChar = uniqueChars;\n            }\n        }\n        if(maxChar\
  \ == 0) return \"\";\n        int index = 0;\n        for(int i = 1; i < words.size();\
  \ i++) {\n            String word = words.get(i);\n            char[] chars = word.toCharArray();\n\
  \            int uniqueChars = 0;\n            for(char c: chars) {\n          \
  \      uniqueChars++;\n                if(uniqueChars > maxChar) maxChar = uniqueChars;\n\
  \            }\n            if(maxChar == uniqueChars) {\n                index\
  \ = i;\n                break;\n            }\n        }\n        if(maxChar ==\
  \ 0) return \"\";\n        char[] chars = words.get(index).toCharArray();\n    \
  \    Arrays.sort(chars);\n        return new String(chars);"
- "        int max = Integer.MIN_VALUE;\n        String res = \"\";\n        for (String\
  \ word : words) {\n            int count = 0;\n            char[] charArray = word.toCharArray();\n\
  \            for (char c : charArray) {\n                ++count;\n            }\n\
  \            if (count > max) {\n                max = count;\n                res\
  \ = word;\n            }\n        }\n        return res;"
- "        Map<String, Integer> map = new HashMap<>();\n        for(String word :\
  \ words) {\n            if(!map.containsKey(word)) {\n                map.put(word,\
  \ 1);\n            } else {\n                map.put(word, map.get(word) + 1);\n\
  \            }\n        }\n\n        String maxKey = \"\";\n        int maxValue\
  \ = 0;\n        for(Map.Entry<String, Integer> entry : map.entrySet()) {\n     \
  \       if(entry.getValue() > maxValue) {\n                maxValue = entry.getValue();\n\
  \                maxKey = entry.getKey();\n            }\n        }\n\n        return\
  \ maxKey;"
- "        int[] count = new int[26];\n        for (String word : words) {\n     \
  \       int c = 0;\n            for (int i = 0; i < word.length(); i++) {\n    \
  \            c += word.charAt(i) - 'a';\n            }\n            count[c]++;\n\
  \        }\n        Arrays.sort(count, Collections.reverseOrder());\n        for\
  \ (int i = 0; i < 26; i++) {\n            if (count[i] > 1) {\n                return\
  \ words.get(i);\n            }\n        }\n        return \"\";"
- "        Map<String,Integer> map = new HashMap<>();\n        for (String word:words)\
  \ {\n            Integer count = map.get(word);\n            if (count == null)\
  \ {\n                count = 1;\n            } else {\n                count++;\n\
  \            }\n            map.put(word, count);\n        }\n        if (map.isEmpty()){\n\
  \            return \"\";\n        }\n        Set<Map.Entry<String,Integer>> entries\
  \ = map.entrySet();\n        Map.Entry<String,Integer> entry = Collections.max(entries);\n\
  \        return entry.getKey();"
- "        Map<String, Long> characterCountMap = new HashMap<>();\n        for (String\
  \ word : words) {\n            List<String> uniqueCharacters = new ArrayList<>();\n\
  \            int uniqueCharacterCount = 0;\n            char[] chars = word.toCharArray();\n\
  \            for (int i = 0; i < chars.length; i++) {\n                String charString\
  \ = String.valueOf(chars[i]);\n                if (!characterCountMap.containsKey(charString))\
  \ {\n                    uniqueCharacters.add(charString);\n                   \
  \ uniqueCharacterCount++;\n                }\n                characterCountMap.put(charString,\
  \ uniqueCharacterCount);\n            }\n        }\n\n        // find key with highest\
  \ count (smallest values)\n        Set<String> keySet = characterCountMap.entrySet();\n\
  \        int maxCount = 0;\n        String maxKey = \"\";\n        for (String key:\
  \ keySet) {\n            int count = characterCountMap.get(key).get();\n       \
  \     if (count > maxCount) {\n                maxCount = count;\n             \
  \   maxKey = key;\n            }\n        }\n        return maxKey;"
- '        // Your code here'
- "        Collections.sort(words);\n        System.out.println(words);\n        int\
  \ max=0;\n        String maxString = words.get(0);\n        for (String string:\
  \ words){\n            int count= Collections.frequency(words, string);\n      \
  \      if(count>max)\n            {\n                max=count;\n              \
  \  maxString=string;\n            }\n        }\n        System.out.println(maxString);\n\
  \        return maxString;"
- "        // sort the list with lexicographical order\n        ArrayList<String>\
  \ sortedWords = words.stream().sorted(Comparator\n                .comparing(String::toLowerCase))\n\
  \                .collect(Collectors.toList());\n\n        // get word with maximum\
  \ number of characters\n        return sortedWords.get(sortedWords.size() - 1);"
- "        ArrayList<String> temp = new ArrayList<>(words);\n        Collections.sort(temp);\n\
  \        return temp.get(0);"
- "        int maxUniqueChars = 0;\n        String maxString = \"\";\n\n        for(String\
  \ word : words) {\n            char[] chars = word.toCharArray();\n            int\
  \ uniqueChars = 0;\n\n            for(int i = 0 ; i < chars.length ; i++) {\n  \
  \              if(chars.indexOf(chars[i]) >= 0) {\n                    uniqueChars++;\n\
  \                }\n            }\n\n            if(uniqueChars > maxUniqueChars)\
  \ {\n                maxUniqueChars = uniqueChars;\n                maxString =\
  \ word;\n            }\n        }\n\n        return maxString;"
- "        ArrayList<Integer> count = new ArrayList<Integer>();\n        words.add(\"\
  \");\n        for (String s : words)\n            count.add(new HashMap<Character,\
  \ Integer>().entrySet().stream().map(i -> i.getValue()).collect(Collectors.toList()));\n\
  \        int max = 0;\n        String maxString = \"\";\n        for (Character\
  \ c : count.get(count.size() - 1).keySet()) {\n            int count = 0;\n    \
  \        for (String s : words)\n                if (s.contains(String.valueOf(c)))\n\
  \                    count += counts.get(counts.get(s.indexOf(c)).getValue());\n\
  \            if (count > max)\n                max = count;\n            maxString\
  \ = s;\n        }\n        return maxString;"
- "        Map<String,Integer> map = new HashMap<>();\n        for(String str:words)\n\
  \            if(map.containsKey(str))\n                map.put(str, map.getString(str)+1);\n\
  \            else\n                map.put(str, 1);\n        \n        Set<String>\
  \ keys = map.keySet();\n        for(String key:keys)\n            if(map.get(key)==map.getMax())\n\
  \                return key;\n        return \"\";"
- '        return words.get(Collections.max(Arrays.asList(words)));'
- "        Set<String> uniqueChar = new HashSet<String>();\n        Map<String, Integer>\
  \ map = new HashMap<>();\n        boolean isInUniqueChar = false;\n        for (String\
  \ str : words) {\n            isInUniqueChar = false;\n            for (int i =\
  \ 0; i < str.length(); i++) {\n                String str = str.substring(0, i)\
  \ + str.substring(i + 1);\n                if (map.get(str) == null) {\n       \
  \             uniqueChar.add(str);\n                    map.put(str, 1);\n     \
  \           }\n                else {\n                    map.put(str, map.get(str)\
  \ + 1);\n                    if (map.get(str) == uniqueChar.size()) {\n        \
  \                isInUniqueChar = true;\n                    }\n               \
  \ }\n            }\n            if (!isInUniqueChar) {\n                return \"\
  \";\n            }\n        }\n        Collections.sort(words, (String a, String\
  \ b) -> Integer.compare(map.get(a), map.get(b)));\n        return words.get(0);"
- "        Map<String,Integer> map = words.stream().collect(Collectors.groupingBy(String::toLowerCase,\
  \ Collectors.counting()));\n        return map.entrySet().stream().filter(e -> e.getValue()\
  \ > 1).min(Map.Entry.comparingByValue()).get().getKey();"
- "        if (words == null || words.isEmpty()) {\n            return \"\";\n   \
  \     }\n        Map<String, Integer> m = new TreeMap<>();\n        for(String w\
  \ : words) {\n            int v = m.get(w);\n            if (v != null && v < m.get(w))\
  \ {\n                m.put(w, v);\n            }\n        }\n\n        return m.entrySet().stream().sorted(Map.Entry.comparingByValue(Collections.reverseOrder())).findFirst().map(Map.Entry::getKey).orElse(\"\
  \");"
- "        StringBuilder sb = new StringBuilder();\n        final int maxCount = words.stream().flatMapToInt(String::chars).max().orElse(0);\n\
  \        boolean hasMaxChar = false;\n        \n        for (String word : words)\
  \ {\n            for (int i = 0; i < word.length(); i++) {\n                if (maxCount\
  \ - word.charAt(i) > 0) {\n                    sb.append(word);\n              \
  \      hasMaxChar = true;\n                    break;\n                }\n     \
  \       }\n            if (hasMaxChar) break;\n        }\n        return hasMaxChar\
  \ ? sb.toString() : \"\";"
- "        List<String> uniqueWords = new ArrayList<String>();\n        for(String\
  \ word: words){\n            if(uniqueWords.contains(word)){\n                uniqueWords.remove(word);\n\
  \            }else{\n                uniqueWords.add(word);\n            }\n   \
  \     }\n        Collections.sort(uniqueWords);\n        String maxWord = uniqueWords.get(0);\n\
  \        for(int i = 1; i < uniqueWords.size(); i++){\n            if(uniqueWords.get(i).compareTo(maxWord)\
  \ > 0){\n                maxWord = uniqueWords.get(i);\n            }\n        }\n\
  \        return maxWord;"
- "        // write your code here\n        return \"\";"
- "        ArrayList<Character> unique = new ArrayList<Character>();\n        for\
  \ (String word : words) {\n            for (int i = 0; i < word.length(); i++) {\n\
  \                if (unique.contains(word.charAt(i))) {\n                    continue;\n\
  \                } else {\n                    unique.add(word.charAt(i));\n   \
  \             }\n            }\n        }\n        Collections.sort(unique);\n \
  \       if (unique.size() > 0) {\n            return words.get(unique.size() - 1);\n\
  \        } else {\n            return \"\";\n        }"
- "        int maxIndex = 0;\n        String maxWord = \"\";\n        for(int i =\
  \ 0 ; i < words.size() ; i++) {\n            int wordLength = words.get(i).length();\n\
  \            int count = 0;\n            for(int j = 0; j < wordLength; j++) {\n\
  \                if(words.get(i).charAt(j) != words.get(j).charAt(j)) {\n      \
  \              count++;\n                }\n            }\n            if(count\
  \ > wordLength) {\n                maxIndex = i;\n                maxWord = words.get(i);\n\
  \            }\n        }\n        for(int i = maxIndex ; i < words.size() ; i++)\
  \ {\n            int wordLength = words.get(i).length();\n            int count\
  \ = 0;\n            for(int j = 0; j < wordLength; j++) {\n                if(words.get(i).charAt(j)\
  \ != words.get(j).charAt(j)) {\n                    count++;\n                }\n\
  \            }\n            if(count > wordLength) {\n                maxIndex =\
  \ i;\n                maxWord = words.get(i);\n            }\n        }\n      \
  \  return maxWord;"
- "        int max = 0;\n        String result = \"\";\n        for (String string\
  \ : words) {\n            int uniqueCount = string.length() - 1;\n            int\
  \ currentUniqueCount = string.lastIndexOf(\"\", uniqueCount - 1);\n            if\
  \ (currentUniqueCount > uniqueCount) {\n                max = uniqueCount;\n   \
  \             result = string;\n            } else if (currentUniqueCount == uniqueCount)\
  \ {\n                max = currentUniqueCount;\n                result = string;\n\
  \            }\n        }\n        return result;"
- "        ArrayList<String> wordcount = new ArrayList<String>();\n        for (String\
  \ word : words) {\n            int count = 0;\n            String count = words.get(word);\n\
  \            for (String s : wordcount) {\n                if (count.compareTo(s.substring(0,\
  \ word.length())) > 0) {\n                    count++;\n                }\n    \
  \        }\n            if (count > wordcount.size()) {\n                wordcount.add(word);\n\
  \            } else if (count < wordcount.size()) {\n                wordcount.set(wordcount.size()\
  \ - 1, count);\n            }\n        }\n        Collections.sort(wordcount, Comparator.comparing(String::length));\n\
  \        long maxcount = wordcount.get((wordcount.size() - 1));\n        for (String\
  \ word : wordcount) {\n            if (maxcount.compareTo(word.length()) > 0) {\n\
  \                return word;\n            }\n        }\n        return \"\";"
- "        // O(n) time, O(1) space\n        int n = words.size();\n        String\
  \ max = \"\";\n        for (int i = 0; i < n; i++) {\n            int count = 0;\n\
  \            for (int j = 0; j < n; j++) {\n                // only compare this\
  \ element to itself\n                if (i != j)\n                    if (words.get(i).contains(words.get(j)))\
  \ {\n                        count++;\n                    }\n            }\n  \
  \          if (count == 0) {\n                // if we only have one unique character\n\
  \                // then just return it\n                if (max.isEmpty())\n  \
  \                  max = words.get(i);\n            }\n            else\n      \
  \          // if more than one unique character\n                // then return\
  \ the element that comes first in lexicographical order\n                if (words.get(i).compareTo(max)\
  \ > 0)\n                    max = words.get(i);\n        }\n        return max;"
- "        // Write your code here\n        int max_char;\n        String max_word\
  \ = null;\n        for (String word : words) {\n            HashSet<String> chars\
  \ = new HashSet<String>();\n            for (int i = 0; i < word.length(); i++)\
  \ {\n                String c = word.substring(i, i+1);\n                chars.add(c);\n\
  \            }\n            if (chars.size() > max_char) {\n                max_char\
  \ = chars.size();\n                max_word = word;\n            }\n        }\n\
  \        return max_word;"
- "        int max = 0;\n        String temp = \"\";\n        for(String word: words)\
  \ {\n            int count = 0;\n            for(char c: word.toCharArray()) {\n\
  \                count++;\n            }\n            if (count > max) {\n     \
  \           max = count;\n                temp = word;\n            }\n        }\n\
  \        if (max > 1) {\n            for (int i = 0; i < words.size(); i++) {\n\
  \                String word2 = words.get(i);\n                if (word2.compareTo(temp)\
  \ > 0) {\n                    temp = word2;\n                }\n            }\n\
  \        }\n        return temp;"
- "        Map<Integer, String> charMap = new HashMap<>();\n        words.add(\"aaaaaaa\"\
  );\n        words.add(\"bb\");\n        words.add(\"cc\");\n        // iterate through\
  \ each element\n        for (String s: words) {\n            charMap.put(0, s);\n\
  \            for (int i = 0; i < s.length(); i++) {\n                int numOfChar\
  \ = s.charAt(i) + 1;\n                if (charMap.containsKey(numOfChar)) {\n  \
  \                  if (charMap.get(numOfChar) < s) {\n                        charMap.put(numOfChar,\
  \ s);\n                    }\n                } else {\n                    charMap.put(numOfChar,\
  \ s);\n                }\n            }\n        }\n        String maxChar = charMap.keySet().stream().max((s1,\
  \ s2) -> s1.compareTo(s2)).orElse(\"\");\n        return charMap.get(maxChar);"
- "        int max = 0;\n        for (String w : words) {\n            String s =\
  \ \"\";\n            int count = 0;\n            for (String s : w) {\n        \
  \        count++;\n            }\n            if (count > max) {\n             \
  \   max = count;\n            }\n        }\n        return words.get(0);"
- "        ArrayList<Integer> chars = new ArrayList<Integer>();\n        for (int\
  \ i = 0; i < words.size(); i++) {\n            chars.add(0);\n        }\n      \
  \  for (int i = 0; i < words.size(); i++) {\n            for (int j = 0; j < words.get(i).length();\
  \ j++) {\n                chars.set(chars.get(i) + 1, chars.get(i) + 1);\n     \
  \       }\n        }\n        Arrays.sort(chars, new Comparator<Integer>() {\n \
  \           public int compare(Integer o1, Integer o2) {\n                return\
  \ o1.compareTo(o2);\n            }\n        });\n        return chars.get(chars.size()\
  \ - 1);"
- "        if (words == null || words.isEmpty()) {\n            return \"\";\n   \
  \     }\n\n        ArrayList<String> wordsCopy = new ArrayList<>(words);\n     \
  \   Collections.sort(wordsCopy);\n        int uniqueCharacters = 0;\n        int\
  \ positionOfMax = 0;\n        boolean isMax = false;\n        for (int i = 0; i\
  \ < wordsCopy.size(); i++) {\n            if (wordsCopy.get(i).length() > uniqueCharacters)\
  \ {\n                uniqueCharacters = wordsCopy.get(i).length();\n           \
  \     positionOfMax = i;\n                isMax = true;\n            } else if (wordsCopy.get(i).length()\
  \ == uniqueCharacters) {\n                wordsCopy.remove(i);\n               \
  \ uniqueCharacters--;\n            }\n        }\n        if (!isMax) {\n       \
  \     return \"\";\n        }\n        if (wordsCopy.size() == 0) {\n          \
  \  return wordsCopy.get(0);\n        }\n        return wordsCopy.get(positionOfMax);"
- "        Map<String, Integer> map = new HashMap<>();\n        for (String str :\
  \ words) {\n            map.putIfAbsent(str, 0);\n            map.put(str, map.getOrDefault(str,\
  \ 0)+1);\n        }\n        if (map.isEmpty())\n            return \"\";\n    \
  \    map.values().removeIf(i -> i < 1);\n        String max = Collections.max(map.values());\n\
  \        ArrayList<String> res = new ArrayList<>(map.keySet());\n        Collections.sort(res,\
  \ (l1, l2) -> l2.compareTo(l1));\n        for (int i = 0; i < res.size(); i++)\n\
  \            if (res.get(i).equals(max))\n                return res.get(0);\n \
  \       return \"\";"
- "        List<Character> chars = new ArrayList<>();\n        for (int i = 0; i <\
  \ words.size(); i++) {\n            chars.add(words.get(i).charAt(0));\n       \
  \ }\n        int max = Collections.frequency(chars, Collections.max(chars));\n \
  \       String res = \"\";\n        boolean found = false;\n        for (String\
  \ word : words) {\n            chars = new ArrayList<>();\n            for (int\
  \ i = 0; i < word.length(); i++) {\n                chars.add(word.charAt(i));\n\
  \            }\n            if (Collections.frequency(chars, Collections.max(chars))\
  \ == max) {\n                found = true;\n                break;\n           \
  \ }\n        }\n        if (found) {\n            return res;\n        } else {\n\
  \            return \"\";\n        }"
- "        int maxCharacterCount = 0;\n        String result = \"\";\n        for\
  \ (String word: words) {\n            int uniqueCharacterCount = 0;\n          \
  \  for (char c: word.toCharArray()) {\n                if (Character.isLetter(c))\
  \ {\n                    uniqueCharacterCount++;\n                }\n          \
  \  }\n            if (uniqueCharacterCount > maxCharacterCount) {\n            \
  \    result = word;\n                maxCharacterCount = uniqueCharacterCount;\n\
  \            }\n        }\n        return result;"
- "        \n        Map<String, Integer> wordCounts = new HashMap<>();\n        for(String\
  \ word : words) {\n            int count = wordCounts.get(word);\n            if(count\
  \ == null) count = 1;\n            else count++;\n            wordCounts.put(word,\
  \ count);\n        }\n        \n        String wordWithMaxCount = \"\";\n      \
  \  int maxCount = -1;\n        for (Map.Entry<String, Integer> entry : wordCounts.entrySet())\
  \ {\n            if(entry.getValue() > maxCount) {\n                wordWithMaxCount\
  \ = entry.getKey();\n                maxCount = entry.getValue();\n            }\n\
  \        }\n        \n        String stringWithMaxCount = wordWithMaxCount + \"\
  \ \" + maxCount;\n        \n        return stringWithMaxCount.equals(\"\") ? \"\"\
  \ : stringWithMaxCount;"
- "        // Write your code here\n        List<String> temp = words;\n        temp.remove(Collections.max(Collections.frequency(words,\
  \ words)));\n        return Collections.max(Collections.frequency(temp, words.get(Collections.frequency(temp,\
  \ words)))).toString();"
- "        int max = 0;\n        for (String w : words) {\n            int c = 0;\n\
  \            for (int i = 0; i < w.length(); i++)\n                c += w.charAt(i)\
  \ - 'a';\n            if (c > max) {\n                max = c;\n            }\n\
  \        }\n        String ret = \"\";\n        if (max > 0) return words.stream().filter(w\
  \ -> w.length() == max).sorted((w1, w2) -> Integer.compare(w1.length(), w2.length())).findFirst().get();\n\
  \        return words.get(0);"
- "        int len = words.size();\n        if(len < 1) return \"\";\n        int\
  \ max = Integer.MIN_VALUE;\n        String firstWord = \"\";\n        for(String\
  \ word: words) {\n            String temp = word.replaceAll(\"[^A-Za-z]\", \"\"\
  );\n            int tempMax = temp.lenght();\n            if(tempMax > max) {\n\
  \                max = tempMax;\n                firstWord = temp;\n           \
  \ }\n        }\n        return firstWord;"
- '        return words.stream().distinct().count().max((a, b) -> (a.length() - b.length())).orElse("");'
- "        char[] chars = words.toArray(new char[words.size()]);\n        int max\
  \ = 0;\n        String maxStr = \"\";\n        for (int i = 0; i < chars.length;\
  \ i++) {\n            int count = 0;\n            char c = chars[i];\n         \
  \   for (int j = 0; j < chars.length; j++) {\n                if (c == chars[j])\
  \ {\n                    count++;\n                }\n            }\n          \
  \  if (count > max) {\n                max = count;\n                maxStr = chars[i];\n\
  \            }\n        }\n        return maxStr;"
- "        Map<Character, Integer> map = new HashMap<>();\n        for (String word\
  \ : words) {\n            for (char c : word.toCharArray()) {\n                Integer\
  \ count = map.get(c);\n                if (count == null) {\n                  \
  \  map.put(c, 1);\n                } else {\n                    map.put(c, count\
  \ + 1);\n                }\n            }\n        }\n        Integer max = Collections.max(map.values());\n\
  \        String result = \"\";\n        for (Map.Entry<Character, Integer> entry\
  \ : map.entrySet()) {\n            if (entry.getValue() == max) {\n            \
  \    result = entry.getKey().toString();\n                break;\n            }\n\
  \        }\n        return result;"
- "        // Your code here\n        Map<String, Integer> map = new HashMap<>();\n\
  \        for (String word : words) {\n            Integer count = map.get(word);\n\
  \            if (count == null) {\n                map.put(word, 1);\n         \
  \   } else {\n                map.put(word, count + 1);\n            }\n       \
  \ }\n        String[] keys = new String[map.size()];\n        map.keySet().toArray(keys);\n\
  \n        int maxCount = 0;\n        String maxValue = \"\";\n        for (String\
  \ key : keys) {\n            if (map.get(key) > maxCount) {\n                maxCount\
  \ = map.get(key);\n                maxValue = key;\n            }\n        }\n \
  \       return maxValue;"
- "        int max = 0;\n        String maxWord = \"\";\n        for (String word\
  \ : words) {\n            int charCount = getMaxCharCount(word);\n            if\
  \ (charCount > max) {\n                max = charCount;\n                maxWord\
  \ = word;\n            } else if (charCount == max) {\n                if (word.compareTo(maxWord)\
  \ > 0) {\n                    maxWord = word;\n                }\n            }\n\
  \        }\n        return maxWord;"
- "        HashSet<Character> chars = new HashSet<Character>();\n        int max =\
  \ 0;\n        String maxStr = \"\";\n        for(int i=0;i<words.size();i++){\n\
  \            chars.clear();\n            String str = words.get(i);\n          \
  \  int length = 0;\n            for(int j=0;j<str.length();j++){\n             \
  \   char c = str.charAt(j);\n                if(!chars.contains(c)){\n         \
  \           chars.add(c);\n                    length++;\n                }\n  \
  \          }\n            if(length>max){\n                max = length;\n     \
  \           maxStr = str;\n            }\n        }\n        for(int i=0;i<words.size();i++){\n\
  \            String str = words.get(i);\n            if(str.compareTo(maxStr)>0){\n\
  \                String tmp = words.get(i);\n                words.set(i,maxStr);\n\
  \                words.set(i+1,tmp);\n                break;\n            }\n  \
  \      }\n        return maxStr;"
- "        ArrayList<Character> charList = new ArrayList<>();\n        List<String>\
  \ wordList = new ArrayList<>();\n\n        for (String word : words) {\n       \
  \     charList.clear();\n            wordList.add(word);\n            for (char\
  \ c : word.toCharArray()) {\n                if (!charList.contains(c)) {\n    \
  \                charList.add(c);\n                }\n            }\n        }\n\
  \n        String res = \"\";\n        int count = -1;\n        for (String word\
  \ : wordList) {\n            count++;\n            if (charList.size() > count)\
  \ {\n                res = word;\n            }\n        }\n        if (res == \"\
  \") {\n            return \"\";\n        }\n        return res;"
- "        List<String> sorted_list = words.stream()\n                .sorted((w1,\
  \ w2) -> w1.length() - w2.length())\n                .collect(Collectors.toList());\n\
  \        return sorted_list.get(sorted_list.size() - 1);"
- "        List<String> list = new ArrayList<>();\n        words.forEach(word -> {\n\
  \            list.add(word);\n        });\n        Collections.sort(list, (s1, s2)\
  \ -> {\n            int a1 = s1.length();\n            int a2 = s2.length();\n \
  \           if (a1 > a2) {\n                return -1;\n            } else if (a1\
  \ < a2) {\n                return 1;\n            } else {\n                int\
  \ val = 0;\n                for (int i = 0; i < a1; ) {\n                    val\
  \ += s1.charAt(i) - s2.charAt(i);\n                    i++;\n                }\n\
  \                return val;\n            }\n        });\n\n        if (list.size()\
  \ > 0) {\n            return list.get(list.size() - 1);\n        } else {\n    \
  \        return \"\";\n        }"
- "        int length = words.size();\n        if (length < 1)\n            return\
  \ \"\";\n        int counter = 0;\n        Map<Character, Integer> map = new TreeMap<>();\n\
  \        for (String word: words) {\n            for (char c: word.toCharArray())\
  \ {\n                if (!map.containsKey(c)) {\n                    counter = 1;\n\
  \                    map.put(c, counter);\n                }\n                else\
  \ {\n                    Integer count = map.get(c);\n                    if (counter\
  \ == 0) {\n                        counter = count;\n                    }\n   \
  \                 else {\n                        counter = count.intValue() + 1;\n\
  \                    }\n                }\n            }\n        }\n        Integer\
  \ result = map.get(Character.MAX_VALUE);\n        if (result == null) {\n      \
  \      return \"\";\n        }\n        if (result.intValue() >= length) {\n   \
  \         return \"\";\n        }\n        return words.get(result.intValue());"
- "        Set<String> unique = new HashSet<>();\n        String result = \"\";\n\n\
  \        for (String word : words) {\n            if (unique.contains(word)) {\n\
  \                result = word;\n            } else {\n                int length\
  \ = word.length();\n                unique.add(word);\n\n                if (length\
  \ > result.length()) {\n                    result = word;\n                }\n\
  \            }\n        }\n        return result;"
- "        int maxCount = 0;\n        String maxWord = \"\";\n\n        // Iterate\
  \ through the array and keep track of the maximum count\n        for (String word\
  \ : words) {\n            int currentCount = 0;\n            for (String word2 :\
  \ words) {\n                currentCount += word2.length();\n            }\n   \
  \         if (currentCount > maxCount) {\n                maxCount = currentCount;\n\
  \                maxWord = word;\n            }\n        }\n        return maxWord;"
- "        char[] charArray = words.toArray(new char[words.size()]);\n        int\
  \ counter = 0;\n        for (int i = 0; i < charArray.length; i++) {\n         \
  \   if (charArray[i] != ' ') { // if current char is not space\n               \
  \ char[] temp = new char[charArray.length];\n                for (int j = 0; j <\
  \ charArray.length; j++) {\n                    if (charArray[j] != ' ' && charArray[j]\
  \ != charArray[i]) {\n                        temp[j] = charArray[j];\n        \
  \            }\n                }\n                int uniqueChars = 1;\n      \
  \          int index = 0;\n                while (index < temp.length) {\n     \
  \               if (temp[index] == temp[index + 1]) {\n                        uniqueChars++;\n\
  \                        index++;\n                    } else if (temp[index] ==\
  \ temp[index]) {\n                        uniqueChars--;\n                    }\
  \ else {\n                        break;\n                    }\n              \
  \  }\n                if (uniqueChars > counter) {\n                    counter\
  \ = uniqueChars;\n                    String result = new String(temp);\n      \
  \              int index = 0;\n                    while (index < temp.length) {\n\
  \                        if (temp[index] == temp[index + 1]) {\n               \
  \             result.replace(temp[index], \"\");\n                        }\n  \
  \                      index++;\n                    }\n                    result\
  \ = result.replaceAll(\"\\\\s+\", \"\");\n                    return result;\n \
  \               }\n            }\n        }\n        return \"\";"
- "        if (words == null || words.size() < 1) return \"\";\n        Map<String,\
  \ Integer> counterMap = new HashMap<>();\n        for (String word : words) {\n\
  \            Integer count = counterMap.get(word);\n            if (count == null)\
  \ {\n                counterMap.put(word, 1);\n            } else {\n          \
  \      counterMap.put(word, count + 1);\n            }\n        }\n        String\
  \ maxWord = counterMap.entrySet().stream()\n                .max(Map.Entry.comparingByValue())\n\
  \                .map(Map.Entry::getKey)\n                .orElse(\"\");\n     \
  \   int maxCount = counterMap.get(maxWord);\n        if (maxCount > 1) {\n     \
  \       maxWord = \"\";\n            for (String word : words) {\n             \
  \   Integer count = counterMap.get(word);\n                if (count > maxCount\
  \ && word.compareTo(maxWord) < 0) {\n                    maxWord = word;\n     \
  \               maxCount = count;\n                }\n            }\n        }\n\
  \        return maxWord;"
- "        return words.stream()\n            .collect(Collectors.groupingBy(Function.identity(),\
  \ Collectors.counting()))\n            .entrySet()\n            .stream()\n    \
  \        .sorted(Map.Entry.<String, Long>comparingByValue().reversed())\n      \
  \      .map(Map.Entry::getKey)\n            .findFirst()\n            .orElse(\"\
  \");"
- "        Map<Character, Integer> map = new TreeMap<>();\n        for (String word\
  \ : words) {\n            int count = 0;\n            for (int i = 0; i < word.length();\
  \ i++) {\n                char c = word.charAt(i);\n                count = map.getOrDefault(c,\
  \ 0) + 1;\n                map.put(c, count);\n            }\n        }\n      \
  \  for (Map.Entry<Character, Integer> entry : map.entrySet()) {\n            if\
  \ (entry.getValue().equals(words.size())) {\n                return entry.getKey();\n\
  \            }\n        }\n        return \"\";"
- "        int maxCount = 0;\n        String maxWord = \"\";\n        for (String\
  \ word : words) {\n            int count = 0;\n            boolean containsZero\
  \ = false;\n            for (int i = 0; i < word.length(); i++) {\n            \
  \    if (word.charAt(i) == '0') {\n                    containsZero = true;\n  \
  \                  break;\n                }\n                count++;\n       \
  \     }\n            if (count == 0) {\n                count = 0;\n           \
  \ }\n            if (count == maxCount) {\n                maxWord = word;\n   \
  \         } else if (count > maxCount) {\n                maxCount = count;\n  \
  \              maxWord = word;\n            }\n        }\n        if (maxCount ==\
  \ 0) {\n            return \"\";\n        }\n        return maxWord;"
- "        int maxCnt = 0;\n        HashMap<Character, Integer> maxCountMap = new\
  \ HashMap<>();\n\n        for (String word : words) {\n            int count = 0;\n\
  \            for(char c : word.toCharArray()) {\n                if (!maxCountMap.containsKey(c))\
  \ {\n                    maxCountMap.put(c, 1);\n                }\n           \
  \     else {\n                    count = maxCountMap.get(c) + 1;\n            \
  \        maxCountMap.put(c, count);\n                }\n            }\n\n      \
  \      int max = Integer.MIN_VALUE;\n            for (Map.Entry<Character, Integer>\
  \ entry : maxCountMap.entrySet()) {\n                max = entry.getValue() > max\
  \ ? entry.getValue() : max;\n            }\n            maxCnt = max > maxCnt ?\
  \ max : maxCnt;\n        }\n\n        String maxWord = \"\";\n        for (Map.Entry<Character,\
  \ Integer> entry : maxCountMap.entrySet()) {\n            if (maxCnt == entry.getValue())\
  \ {\n                maxWord = entry.getKey();\n            }\n        }\n\n   \
  \     return maxWord;"
- "        Map<Integer, String> maxCount = new HashMap<>();\n        for(String word\
  \ : words){\n            for(char c : word.toCharArray()){\n                if(maxCount.getOrDefault(c,\
  \ 0) == 0){\n                    maxCount.put(c, word);\n                }\n   \
  \         }\n        }\n        return maxCount.values().stream().reduce(new StringBuilder(\"\
  \"), \n                (s, word) -> s+word+\" \"+\"1\"+\" \"+\"0\"+\" \"+\"0\"+\"\
  \ \"+\"0\"+\" \"+\"0\"+\" \"+\"0\"+\"0\",\n                (s1, s2) -> s1+s2+\"\
  \ \"+\"1\"+\" \"+\"0\"+\" \"+\"0\"+\" \"+\"0\"+\" \"+\"0\"+\" \"+\"0\"+\"0\").\n\
  \                substring(0,40).\n                collect(Collectors.toList())\n\
  \                .get(0).\n                substring(0,40);"
- "        Map<String, Integer> map = new HashMap<String, Integer>();\n        for\
  \ (String word : words) {\n            map.put(word, map.get(word) == null ? 1 :\
  \ map.get(word) + 1);\n        }\n        \n        Integer count = Collections.max(map.values());\n\
  \        if (count == map.values()) {\n            return \"\";\n        }\n   \
  \     \n        return Collections.max(map.entrySet(), Comparator.comparing(Map.Entry::getValue)).getKey();"
- "        // Write code here\n        // find the word with the max number of unique\
  \ char\n        \n        \n        String maxWord = \"\";\n        \n        int\
  \ maxNum = 0;\n        \n        for(int i = 0; i<words.size(); i++){\n        \
  \    \n            int counter = 0;\n            \n            for(int j=i+1; j<words.size();\
  \ j++){\n                \n                if(words.get(i).compareTo(words.get(j))\
  \ > 0){\n                    \n                    String temp = words.get(i);\n\
  \                    words.set(i,words.get(j));\n                    words.set(i,temp);\n\
  \                }\n                \n                \n                counter++;\n\
  \                \n            }\n            \n            \n            if(counter\
  \ > maxNum){\n                maxNum = counter;\n                maxWord = words.get(i);\n\
  \            }\n            \n        }\n        \n        return maxWord;"
- "        ArrayList<String> max = new ArrayList<String>();\n        for (String word\
  \ : words) {\n            int count = 1;\n            int maxCount = 0;\n      \
  \      for (String s : max) {\n                char c = s.charAt(0);\n         \
  \       if (word.charAt(0) == c) {\n                    count++;\n             \
  \   }\n                if (count > maxCount) {\n                    maxCount = count;\n\
  \                    max = new ArrayList<String>();\n                    max.add(s);\n\
  \                } else if (count == maxCount) {\n                    max.add(s);\n\
  \                }\n            }\n            if (maxCount == 0) {\n          \
  \      max.add(word);\n            }\n        }\n        Collections.sort(max, Collections.reverseOrder());\n\
  \        if (max.size() > 0) {\n            return max.get(0);\n        } else {\n\
  \            return \"\";\n        }"
- "        Map<Integer, String> map = words.stream().\n                map(w -> w.chars().mapToObj(c\
  \ -> String.valueOf((char) c)).collect(Collectors.toMap(i->i, i->i)))\n        \
  \        .collect(Collectors.toMap(w -> 1, w -> w));\n        return map.entrySet().stream().max(Map.Entry.comparingByValue())\n\
  \                .get()\n                .getValue();"
- "        if (words.size() == 0) return \"\";\n        \n        HashMap<Character,\
  \ Integer> characterCount = new HashMap<>();\n        int maxCharactersCount = 0;\n\
  \        int characterIndex = 0;\n        int wordIndex = 0;\n        for (String\
  \ word : words) {\n            for (char c : word.toCharArray()) {\n           \
  \     Integer count = characterCount.get(c);\n                if (count == null)\
  \ count = 1;\n                characterCount.put(c, count + 1);\n              \
  \  if (count > maxCharactersCount) {\n                    maxCharactersCount = count;\n\
  \                    characterIndex = characterCount.keySet().stream().max((a, b)\
  \ -> Integer.compare(a, b)).get();\n                }\n                \n      \
  \          if (count == maxCharactersCount) {\n                    wordIndex = wordIndex;\n\
  \                }\n            }\n        }\n        \n        words.remove(wordIndex);\
  \ // remove word with maximum number of characters\n        \n        // If the\
  \ strings with maximum number of characters are \n        // lexicographically ordered,\
  \ then return the first word\n        // lexicographically\n        return words.isEmpty()\
  \ ? \"\" : words.get(0);"
- "        Map<Character, Integer> counts = wordList.stream().collect(Collectors.groupingBy(s\
  \ -> s.charAt(0), Collectors.counting()));\n        int max = Integer.MIN_VALUE;\n\
  \        String wordWithMax = \"\";\n        \n        for (char c : counts.keySet())\
  \ {\n            if (counts.get(c) > max) {\n                wordWithMax = words.get(0);\n\
  \                max = counts.get(c);\n            } else if (counts.get(c) == max)\
  \ {\n                wordWithMax = words.get(0).toString();\n            }\n   \
  \     }\n        \n        wordWithMax = words.get(0);\n        \n        return\
  \ wordWithMax;"
- "        int max = 0;\n        String maxString = \"\";\n\n        for (String str\
  \ : words) {\n            int count = 0;\n\n            for (char c : str.toCharArray())\
  \ {\n                count++;\n            }\n\n            if (count > max) {\n\
  \                max = count;\n                maxString = str;\n            }\n\
  \        }\n\n        return maxString;"
- "        Map<String, Long> charCount = new HashMap<>();\n\n        for (String word\
  \ : words) {\n            for (int i = 0; i < word.length(); i++) {\n          \
  \      if (!charCount.containsKey(word.substring(i, i + 1))) {\n               \
  \     charCount.put(word.substring(i, i + 1), Long.valueOf(0));\n              \
  \  }\n                charCount.put(word.substring(i, i + 1), Long.valueOf(charCount.get(word.substring(i,\
  \ i + 1)).intValue() + 1));\n            }\n        }\n\n        Iterator<Map.Entry<String,\
  \ Long>> it = charCount.entrySet().iterator();\n        if (it.hasNext()) {\n  \
  \          Map.Entry<String, Long> first = it.next();\n            long highestValue\
  \ = first.getValue();\n            while (it.hasNext()) {\n                Map.Entry<String,\
  \ Long> next = it.next();\n                if (next.getValue() > highestValue) {\n\
  \                    highestValue = next.getValue();\n                }\n      \
  \      }\n            return first.getKey();\n        } else {\n            return\
  \ \"\";\n        }"
- "        // TODO write your implementation here\n        String maxWord = \"\";\n\
  \        HashSet<Character> set = new HashSet<>();\n        \n        for (String\
  \ s : words){\n            int i = 0;\n            while (i < s.length()){\n   \
  \             set.add(s.charAt(i));\n                i++;\n            }\n     \
  \       \n        }\n        \n        if(set.size() > maxWord.length())\n     \
  \       maxWord = set.stream().mapToObj(String::valueOf).collect(Collectors.joining());\n\
  \        \n        return maxWord;"
- "        if (words.size() == 0)\n            return \"\";\n        Map<Integer,\
  \ List<String>> map = new TreeMap<>();\n        for (int i = 0; i < words.size();\
  \ i++)\n            if (!map.containsKey(words.get(i).length()))\n             \
  \   map.put(words.get(i).length(), new ArrayList<String>());\n            map.get(words.get(i).length()).add(words.get(i));\n\
  \        List<String> max = new ArrayList<>();\n        for (Integer i : map.keySet())\n\
  \            if (map.get(i).size() > max.size() || max.size() == 0)\n          \
  \      max = map.get(i);\n        return max.get(0);"
- "        \n        \n        \n        int maxCharCount = Integer.MIN_VALUE;\n \
  \       \n        for (String word : words) {\n            \n            String\
  \ s = word;\n            \n            \n            for (int i = 0; i < word.length();\
  \ i++) {\n                \n                for (int j = 0; j < word.length(); j++)\
  \ {\n                    \n                    if (maxCharCount > s.length()) {\n\
  \                        \n                        maxCharCount = s.length();\n\
  \                        \n                    }\n                    \n       \
  \             char c = s.charAt(i);\n                    \n                    char\
  \ d2 = s.charAt(j);\n                    \n                    if (c == d2) {\n\
  \                        \n                        continue;\n                 \
  \       \n                    }\n                    \n                    if (s.charAt(i)\
  \ != s.charAt(j)) {\n                        \n                        maxCharCount\
  \ = Character.getNumericValue(c) - Character.getNumericValue(d2);\n            \
  \            \n                    }\n                    \n                }\n\
  \            }\n            \n        }\n        \n        int maxCount = words.size();\n\
  \        \n        \n        if (maxCharCount > maxCount) {\n            \n    \
  \        maxCount = maxCharCount;\n            \n        }\n        \n        \n\
  \        String maxWord = \"\";\n        \n        \n        for (int i = 0; i <\
  \ maxCount; i++) {\n            \n            if (maxCount == 1) {\n           \
  \     \n                maxWord = words.get(0);\n                \n            }\n\
  \            \n            \n            if (maxCount == words.size()) {\n     \
  \           \n                return \"\";\n                \n            }\n  \
  \          \n            \n            for (int j = 0; j < words.size(); j++) {\n\
  \                \n                \n                String s = words.get(j);\n\
  \                \n                if (maxCharCount > s.length()) {\n          \
  \          \n                    maxWord = s;\n                    \n          \
  \          \n                }\n                \n                \n           \
  \     char c = s.charAt(i);\n                \n                char d2 = s.charAt(j);\n\
  \                \n                if (c == d2) {\n                    \n      \
  \              continue;\n                    \n                }\n            \
  \    \n                if (s.charAt(i) != s.charAt(j)) {\n                    \n\
  \                    maxWord = words.get(j);\n                    \n           \
  \         \n                }\n                \n                \n            }\n\
  \            \n        }\n        \n        return maxWord;\n        "
- "        Set<String> unique = new HashSet<String>();\n        for(String w: words)\
  \ {\n            unique.add(w);\n        }\n        String max = \"\"; // max string\
  \ in lexicographical order\n        int count = 0; // number of unique characters\n\
  \        for(String w: unique) {\n            int c = w.length();\n            if(c>count)\
  \ {\n                max = w;\n                count = c;\n            }\n     \
  \   }\n        return max;"
- "        // Solution 1\n        // return words.stream().reduce((a,b)->a+b.length).max().orElse(\"\
  \");\n        // Solution 2\n        Stream<Integer> lengths = words.stream().mapToInt(w\
  \ -> w.length()).sorted();\n        int max = lengths.reduce(0, Integer::max);\n\
  \        return words.stream().filter(w -> w.length() == max).findFirst().orElse(\"\
  \");\n\n        // Solution 3\n        // return IntStream.range(0, words.size()).mapToObj(i\
  \ -> words.get(i)).sorted().reduce(0, Integer::max)\n        //     .equals(words.stream().max(Integer::compare).get())\
  \ ? \"\" : words.stream().max(Integer::compare).get();\n\n        // Solution 4\n\
  \        // return IntStream.range(0, words.size()).mapToObj(i -> words.get(i)).sorted().reduce(0,\
  \ Integer::max)\n        //     .equals(words.get(0)) ? \"\" : words.get(0).get();"
- "        // Write your code here\n        Map<Character, Integer> map = new HashMap<>();\n\
  \        for (int i = 0; i < words.size(); ++i) {\n            for (int j = 0; j\
  \ < words.get(i).length(); ++j) {\n                Integer count = map.get(words.get(i).charAt(j));\n\
  \                map.put(words.get(i).charAt(j), count == null ? 1 : count + 1);\n\
  \            }\n        }\n        \n        Iterator<Map.Entry<Character, Integer>>\
  \ it = map.entrySet().iterator();\n        Map.Entry<Character, Integer> maxEntry\
  \ = null;\n        int maxCount = 0;\n        while (it.hasNext()) {\n         \
  \   maxEntry = it.next();\n            if (maxEntry.getValue() > maxCount) {\n \
  \               maxCount = maxEntry.getValue();\n            }\n        }\n    \
  \    if (maxCount == 1) {\n            return maxEntry.getKey();\n        } else\
  \ if (maxCount > 1) {\n            Set<Character> chars = new HashSet<>();\n   \
  \         chars.add(maxEntry.getKey());\n            it.remove();\n            while\
  \ (it.hasNext()) {\n                maxEntry = it.next();\n                if (!chars.contains(maxEntry.getKey()))\
  \ {\n                    chars.add(maxEntry.getKey());\n                }\n    \
  \        }\n            Iterator<Character> iter1 = chars.iterator();\n        \
  \    Iterator<Map.Entry<Character, Integer>> iter2 = map.entrySet().iterator();\n\
  \            while (iter1.hasNext()) {\n                Map.Entry<Character, Integer>\
  \ entry = iter2.next();\n                if (iter1.next().equals(maxEntry.getKey()))\
  \ {\n                    iter2.remove();\n                    iter1.remove();\n\
  \                }\n            }\n            while (iter2.hasNext()) {\n     \
  \           Map.Entry<Character, Integer> entry = iter2.next();\n              \
  \  if (iter2.next().equals(maxEntry.getKey())) {\n                    iter2.remove();\n\
  \                }\n            }\n            \n            return maxEntry.getKey();\n\
  \        } else {\n            return \"\";\n        }"
- "        int uniqueChars = words.size();\n        if (uniqueChars == 0) return \"\
  \";\n        char ch;\n        String maxChar = words.get(0); //assuming first character\
  \ is max letter\n        Arrays.sort(words, new Comparator<String>() {\n       \
  \     public int compare(String o1, String o2) {\n                int count1 = 0,\
  \ count2 = 0;\n                for (int i = 0; i < words.size(); i++) {\n      \
  \              ch = words.get(i).charAt(0);\n                    if (o1.charAt(0)\
  \ == ch) count1++;\n                    if (o2.charAt(0) == ch) count2++;\n    \
  \                if (count1 > count2) return -1;\n                    if (count1\
  \ < count2) return 1;\n                }\n                return 0;\n          \
  \  }\n        });\n        int index = 0;\n        for (String w : words) {\n  \
  \          if (w.charAt(0) == maxChar.charAt(0)) index++;\n            if (index\
  \ >= uniqueChars) return maxChar;\n        }\n        return \"\";"
- "        // Write your code here\n        Map<String, Integer> charMap = new HashMap<>();\n\
  \        for (String word : words) {\n            for (int i = 0; i < word.length();\
  \ i++) {\n                charMap.put(word.substring(0, i), charMap.getOrDefault(word.substring(0,\
  \ i),0) + 1);\n            }\n        }\n        String maxWord = null;\n      \
  \  int maxCharCount = 0;\n        for (String key : charMap.keySet()) {\n      \
  \      if (charMap.get(key).equals(maxCharCount)) {\n                maxWord = key;\n\
  \            }\n            else if (charMap.get(key).equals(maxCharCount)) {\n\
  \                maxWord = key;\n            }\n        }\n        return maxWord;"
- "        List<String> strings = new ArrayList<>(words);\n        \n        return\
  \ strings.stream().collect(\n            Collectors.groupingBy(s -> new String(new\
  \ char[s].toArray()))\n        ).entrySet().stream()\n            .sorted(Map.Entry.comparingByKey())\n\
  \            .filter(e -> e.getValue().size() > 1)\n            .map(Map.Entry::getValue)\n\
  \            .map(String::toLowerCase)\n            .findFirst().get();"
- "        int counter = 0;\n        int maxChar = 0;\n        int indexOfMax = 0;\n\
  \        String maxWord = \"\";\n        for (int i = 0; i < words.size(); i++)\
  \ {\n            int currentCounter = 0;\n            String currentWord = words.get(i);\n\
  \            for (int j = 0; j < currentWord.length(); j++) {\n                currentCounter++;\n\
  \            }\n            if (currentCounter > maxChar) {\n                maxChar\
  \ = currentCounter;\n                indexOfMax = i;\n            }\n        }\n\
  \        if (maxChar > 1) {\n            maxWord = words.get(indexOfMax);\n    \
  \    } else {\n            maxWord = words.get(0);\n        }\n        return maxWord;"
- "        String max = \"\";\n        int count = 0;\n        for (String word :\
  \ words) {\n            Set<Character> unique = new HashSet<Character>();\n    \
  \        for (char c : word.toCharArray()) {\n                if (!unique.add(c))\
  \ {\n                    unique.clear();\n                    break;\n         \
  \       }\n            }\n            if (unique.size() > count) {\n           \
  \     max = word;\n                count = unique.size();\n            }\n     \
  \   }\n        return max;"
- "        Map<String, Integer> map = new HashMap<>();\n        for (String word :\
  \ words) {\n            Integer num = map.get(word);\n            if (num != null)\
  \ {\n                map.put(word, num + 1);\n            } else {\n           \
  \     map.put(word, 1);\n            }\n        }\n        StringBuilder sb = new\
  \ StringBuilder();\n        for (String word : map.keySet()) {\n            Integer\
  \ count = map.get(word);\n            if (sb.length() == 0 || count > sb.length())\n\
  \                sb.append(word);\n        }\n        return sb.length() == 0 ?\
  \ \"\" : sb.toString();"
- "        \n        // Write your code here\n        \n        // For each word\n\
  \        for (String word : words) {\n            // Create a set of unique characters\n\
  \            Set<Character> set = new HashSet<>();\n            // Iterate over\
  \ each letter in word\n            for (char letter : word.toCharArray()) {\n  \
  \              // Add character to set\n                set.add(letter);\n     \
  \       }\n            // Compare set\n            if (set.size() >= words.size())\
  \ {\n                return word;\n            }\n        }\n        // No unique\
  \ characters were found\n        return \"\";"
- "        // Your code goes here\n        if(words.isEmpty())\n        {\n      \
  \      return \"\";\n        }\n        ArrayList<String> list = new ArrayList<String>();\n\
  \        for(String word: words)\n        {\n            int counter = 0;\n    \
  \        for(char c: word.toCharArray())\n            {\n                counter++;\n\
  \            }\n            list.add(new StringBuilder().append(counter).append(word));\n\
  \        }\n        int max = 0;\n        String maxString = \"\";\n        for(int\
  \ i = 0; i < list.size(); i++)\n        {\n            String curString = list.get(i);\n\
  \            int numOfUniqueCharacters = curString.length();\n            if(numOfUniqueCharacters\
  \ > max)\n            {\n                max = numOfUniqueCharacters;\n        \
  \        maxString = curString;\n            }\n        }\n        return maxString;"
- "        final int maxLength = Math.max(words.get(0).length(), words.get(1).length());\n\
  \        Map<String, Integer> map = new HashMap<>();\n        List<String> result\
  \ = new ArrayList<>();\n        for (String word : words) {\n            int uniqueChar\
  \ = 0;\n            for (int i = 0; i < word.length(); i++) {\n                if\
  \ (!map.containsKey(word.substring(i, i + 1))) {\n                    uniqueChar++;\n\
  \                    map.put(word.substring(i, i + 1), uniqueChar);\n          \
  \      }\n            }\n            result.add(word.substring(0, maxLength));\n\
  \            if (uniqueChar == maxLength) {\n                break;\n          \
  \  }\n        }\n        if (result.isEmpty()) {\n            return \"\";\n   \
  \     }\n        int minIndex = 0;\n        boolean minFound = false;\n        for\
  \ (int i = 0; i < result.size(); i++) {\n            int uniqueChar = map.get(result.get(i));\n\
  \            if (uniqueChar == maxLength) {\n                minFound = true;\n\
  \                break;\n            }\n            if (uniqueChar < maxLength)\
  \ {\n                if (minIndex == 0) {\n                    minIndex = i;\n \
  \               }\n                if (uniqueChar < map.get(result.get(minIndex)))\
  \ {\n                    minIndex = i;\n                }\n            }\n     \
  \   }\n        return minIndex < result.size() ? result.get(minIndex) : \"\";"
- "        // Write your code here\n        \n        // Sort the list lexicographically\n\
  \        Collections.sort(words);\n\n        // return the first element of the\
  \ sorted list\n        return words.get(0);"
- "        Collections.sort(words);\n        int max = 0;\n        for (int i = 0;\
  \ i < words.size(); i++) {\n            int count = 0;\n            for (String\
  \ w : words) {\n                if (w.length() > count && w.substring(count).equals(words.get(i).substring(count)))\
  \ {\n                    count = w.length();\n                }\n            }\n\
  \            if (count > max) {\n                max = count;\n            }\n \
  \       }\n        return words.get(words.size() - 1);"
- "        Set<String> wordSet = new HashSet<>();\n        for(String word : words)\
  \ {\n            wordSet.add(word);\n        }\n        Collections.sort(wordSet);\n\
  \        int maxLength = wordSet.size();\n        String maxWord = \"\";\n     \
  \   for(String word : wordSet) {\n            if(word.length() > maxLength) {\n\
  \                maxWord = word;\n                maxLength = word.length();\n \
  \           }\n        }\n        return maxWord;"
- "        Map<String, Integer> counts = new HashMap<>();\n        for (String word\
  \ : words) {\n            for (int i = 0; i < word.length(); i++) {\n          \
  \      String key = String.valueOf(word.charAt(i));\n                if (!counts.containsKey(key))\
  \ {\n                    counts.put(key, 1);\n                } else {\n       \
  \             int count = counts.get(key);\n                    counts.put(key,\
  \ count + 1);\n                }\n            }\n        }\n\n        for (Map.Entry<String,\
  \ Integer> entry : counts.entrySet()) {\n            if (entry.getValue() > words.size())\n\
  \                return entry.getKey();\n        }\n\n        return \"\";"
- "        Collections.sort(words);\n        String max = new String();\n        for(String\
  \ word: words) {\n            if(word.length() > max.length()) {\n             \
  \   max = word;\n            }\n        }\n        return max;"
- "        int max = 0;\n        String word = null;\n        for (String str: words)\
  \ {\n            int count = count_unique(str);\n            if (count > max) {\n\
  \                max = count;\n                word = str;\n            }\n    \
  \    }\n        return word;"
- "        long maxCount = 0;\n        \n        // Create a map and store word as\
  \ key and number of occurance as value.\n        Map<String, Integer> wordOccuranceMap\
  \ = new HashMap<>();\n        for (String word : words) {\n            Integer count\
  \ = wordOccuranceMap.get(word);\n            if (count == null) {\n            \
  \    count = 1;\n            } else {\n                count++;\n            }\n\
  \            wordOccuranceMap.put(word, count);\n        }\n\n        // Store the\
  \ word with maximum count.\n        Integer maxValue = Collections.max(wordOccuranceMap.values());\n\
  \        if (maxValue != null) {\n            String maxWord = null;\n         \
  \   for (Map.Entry<String, Integer> entry : wordOccuranceMap.entrySet()) {\n   \
  \             if (entry.getValue() == maxValue) {\n                    maxWord =\
  \ entry.getKey();\n                }\n            }\n            return maxWord;\n\
  \        }\n        return \"\";"
- "        Set<Character> uniqueCharacters = new HashSet<>();\n        int max = 0;\n\
  \        String maxValue = \"\";\n        for (String word : words) {\n        \
  \    for (int i = 0; i < word.length(); i++) {\n                if (!uniqueCharacters.contains(word.charAt(i)))\
  \ {\n                    uniqueCharacters.add(word.charAt(i));\n               \
  \ }\n                if (uniqueCharacters.size() >= max) {\n                   \
  \ maxValue = word;\n                    max = uniqueCharacters.size();\n       \
  \         }\n            }\n        }\n        return maxValue;"
- "        // write your code\n        Map<String, Integer> map = new HashMap<>();\n\
  \        for(String word: words) {\n            int c = word.length();\n       \
  \     Integer n = map.get(word);\n            map.put(word, (c == n) ? 1 : n + 1);\n\
  \        }\n        Collections.sort(words, (a, b) -> map.get(b).compareTo(map.get(a)));\n\
  \        return words.get(0);"
- "        // Write your code here\n        List<String> list = words;\n        int\
  \ maxIndex = 0;\n        String max = null;\n        for(String s : list){\n   \
  \         int count = 0;\n            for(int i = 0; i < list.length; i++){\n  \
  \              if(list[i].contains(s)){\n                    count ++;\n       \
  \         }\n            }\n            if(count > max){\n                max =\
  \ s;\n                maxIndex = i;\n            }\n        }\n        return words.get(maxIndex);"
- "        Map<String, Integer> map = new HashMap<>();\n        for (String s : words)\
  \ {\n            for (char c : s.toCharArray()) {\n                if (!map.containsKey(c))\
  \ {\n                    map.put(c, 1);\n                } else {\n            \
  \        map.put(c, map.get(c) + 1);\n                }\n            }\n       \
  \ }\n        Set<Character> keys = new HashSet<>(map.keySet());\n        Iterator\
  \ it = keys.iterator();\n        while (it.hasNext()) {\n            Character c\
  \ = (Character) it.next();\n            if (map.get(c) == keys.size()) {\n     \
  \           return s.substring(0,map.get(c));\n            }\n        }\n      \
  \  return \"\";"
- "        \n        //System.out.println(words);\n        \n        \n        \n\
  \        \n        int maxCount = 0;\n        \n        Set<Character> uniqueCharacters\
  \ = new HashSet<Character>();\n        \n        for(String word : words){\n   \
  \         \n            int count = 1;\n            \n            for(int i = 0;\
  \ i<word.length(); i++){\n                \n                if(uniqueCharacters.contains(word.charAt(i)))\n\
  \                    count++;\n                else\n                    uniqueCharacters.add(word.charAt(i));\n\
  \            }\n            if(count>maxCount){\n                maxCount = count;\n\
  \            }\n        }\n        \n        \n        \n        for(String word\
  \ : words){\n            \n            int count = 1;\n            \n          \
  \  for(int i = 0; i<word.length(); i++){\n                \n                if(uniqueCharacters.contains(word.charAt(i)))\n\
  \                    count++;\n                else\n                    uniqueCharacters.add(word.charAt(i));\n\
  \            }\n            if(count==maxCount){\n                \n           \
  \     return word;\n            }\n        }\n        \n        return \"\";"
- "        // write code here\n        HashMap<String,Integer> map = new HashMap<String,Integer>();\n\
  \        for (String w : words) {\n            int counter = 0;\n            int\
  \ index = w.indexOf(\"a\");\n            while (index >= 0) {\n                if\
  \ (map.containsKey(w.substring(0,index))) {\n                    counter++;\n  \
  \              }\n                index = w.indexOf(\"a\", index + 1);\n       \
  \     }\n            map.put(w, counter);\n        }\n        Set<String> set =\
  \ new HashSet<String>(map.keySet());\n        set.addAll(map.keySet());\n      \
  \  Collections.sort(set);\n        Integer maxCount = set.get(0);\n        return\
  \ set.isEmpty() ? \"\" : set.get(0);"
- "        int max = 0;\n        for (String word : words) {\n            if (word.length()\
  \ > max) {\n                max = word.length();\n            }\n        }\n   \
  \     for (String word : words) {\n            if (word.length() == max) {\n   \
  \             word = word.substring(0, max);\n            }\n        }\n       \
  \ if (words.size() > 0) {\n            Collections.sort(words);\n            return\
  \ words.get(0);\n        }\n        return \"\";"
- "        Map<String, Integer> counts = new HashMap<>();\n\n        for (String word\
  \ : words) {\n            if (counts.containsKey(word)) {\n                counts.put(word,\
  \ counts.get(word) + 1);\n            } else {\n                counts.put(word,\
  \ 1);\n            }\n        }\n\n        return Collections.max(counts.keySet())\n\
  \                + (counts.containsKey(Collections.max(counts.keySet())) ? \"\"\
  \ :\n                        \" \" + findMax(words));"
- "        return words.stream().filter(\n            s -> s.chars().distinct().count()\
  \ > s.chars().distinct().max()).map(s -> s.substring(0, s.size() - 1)).findFirst().get();"
- "        \n        ArrayList<String> words2 = new ArrayList<>();\n        \n   \
  \     for (String s : words){\n            \n            words2.add(s);\n      \
  \      \n        }\n        \n        Arrays.sort(words2);\n        \n        return\
  \ words2.get(words2.size()-1);"
- "        final String max = null;\n        for (String word : words) {\n       \
  \     final String uniqueCharacters = removeDuplicates(word);\n            if (unique\
  \ == null) {\n                max = uniqueCharacters;\n            } else {\n  \
  \              if (uniqueCharacters.compareTo(max) > 0) {\n                    max\
  \ = uniqueCharacters;\n                }\n            }\n        }\n        return\
  \ max;"
- "        Integer counts = words.stream()\n                .map(w -> w.chars().distinct().count())\n\
  \                .max(Comparator.reverseOrder())\n                .orElse(0);\n\
  \        return words.stream()\n                .filter(w -> w.chars().distinct().count()\
  \ == counts)\n                .min(Comparator.naturalOrder())\n                .findFirst().get();"
- "        HashSet<Character> unique = new HashSet<>();\n        for (String word\
  \ : words) {\n            for (int i = 0; i < word.length(); ++i) {\n          \
  \      if (unique.add(word.charAt(i))) {\n                    unique.add(word.charAt(i));\n\
  \                }\n            }\n        }\n        if (unique.size() > words.size())\
  \ {\n            return \"\";\n        } else {\n            char[] chars = new\
  \ char[unique.size()];\n            for (int i = 0; i < chars.length; i++) {\n \
  \               chars[i] = unique.elementAt(i);\n            }\n            return\
  \ new String(chars);\n        }"
- "        int max = 0;\n        String maxWord = \"\";\n\n        for (String w :\
  \ words) {\n            int currCharCount = 1;\n            int currentCount = 1;\n\
  \            for (int i = 0; i < w.length(); i++) {\n                currCharCount\
  \ += w.charAt(i) == w.charAt(i);\n                currentCount += w.charAt(i);\n\
  \            }\n\n            if (currCharCount > maxCharCount) {\n            \
  \    maxCharCount = currCharCount;\n                maxWord = currentWord;\n   \
  \         }\n\n        }\n        return maxWord;"
- "        // O(n) time and O(n) space\n        HashMap<Integer, String> occurrences\
  \ = new HashMap<>();\n        for (String w : words) {\n            int max = 0;\n\
  \            for (int i = 0; i < w.length(); ++i) {\n                String s =\
  \ w.substring(0, i);\n                Integer numOccurrences = occurrences.getOrDefault(s,\
  \ 0);\n                occurrences.put(s, numOccurrences + 1);\n               \
  \ if (numOccurrences > max) {\n                    max = numOccurrences;\n     \
  \           }\n            }\n            if (max > 0) {\n                // found\
  \ a word with max number of occurrences\n                return w;\n           \
  \ }\n        }\n        // no word with max number of occurrences exists\n     \
  \   return \"\";"
- "        char maxCount = 'a';\n        int maxLength = 0;\n        for (String word\
  \ : words) {\n            int count = 0;\n            for (int i = 0; i < word.length();\
  \ i++) {\n                char ch = word.charAt(i);\n                if (ch != maxCount)\
  \ {\n                    count = 1;\n                } else {\n                \
  \    count++;\n                }\n                if (count > maxCount) {\n    \
  \                maxCount = ch;\n                    maxLength = word.length();\n\
  \                }\n            }\n        }\n        for (String word : words)\
  \ {\n            int count = 0;\n            for (int i = 0; i < word.length();\
  \ i++) {\n                char ch = word.charAt(i);\n                if (ch != maxCount)\
  \ {\n                    count = 1;\n                } else {\n                \
  \    count++;\n                }\n                if (count > maxCount) {\n    \
  \                maxCount = ch;\n                    maxLength = word.length();\n\
  \                }\n            }\n        }\n        return \"\";"
- "        int max = 0;\n        int maxIndex = 0;\n        for(String word : words)\
  \ {\n            int count = word.length();\n            if(count > max) {\n   \
  \             max = count;\n                maxIndex = words.indexOf(word);\n  \
  \          }\n        }\n        return words.get(maxIndex);"
- "        Arrays.sort(words);\n\n        int max = 0;\n\n        for (String word\
  \ : words) {\n            if (word.length() > max)\n                max = word.length();\n\
  \        }\n\n        StringBuilder builder = new StringBuilder();\n        for\
  \ (String word : words) {\n            if (builder.length() > 0) {\n           \
  \     builder.append(\" \");\n            }\n            builder.append(word);\n\
  \n            int count = 0;\n            for (int i = 0; i < word.length(); i++)\
  \ {\n                char c = word.charAt(i);\n                count += Character.getNumericValue(c);\n\
  \            }\n\n            if (count > max)\n                return builder.toString();\n\
  \        }\n\n        return \"\";"
- "        Map<String, Integer> map = new HashMap<String, Integer>();\n\n        //\
  \ sort by number of unique characters\n        Map<String, Integer> map2 = new HashMap<String,\
  \ Integer>();\n        for (String word : words) {\n            Integer count =\
  \ 1;\n            char[] chars = word.toCharArray();\n            for (char c :\
  \ chars) {\n                if (!map.containsKey(c)) {\n                    map.put(c,\
  \ count);\n                } else {\n                    map.put(c, map.get(c) +\
  \ count);\n                }\n                count++;\n            }\n        }\n\
  \n        // find the strings with maximum number of unique characters\n       \
  \ String maxKey = Collections.max(map.keySet());\n\n        // return the string\
  \ with maximum number of unique characters\n        String maxValue = Collections.max(map.get(maxKey).descendingIterator());\n\
  \        for (int i : map.get(maxKey).descendingIterator()) {\n            if (map.get(maxKey).equals(maxValue))\
  \ {\n                return maxValue;\n            }\n        }\n        return\
  \ maxValue;"
- "        if (words.size() == 0)\n            return \"\";\n        ArrayList<Character>\
  \ chars = new ArrayList<>();\n        for (String s: words) {\n            chars.add(s.toLowerCase().chars().mapToObj(i\
  \ -> (char) i).distinct().count());\n        }\n        if (chars.size() == 0) {\n\
  \            return \"\";\n        }\n        int maxIndex = 0;\n        int maxValue\
  \ = Integer.MIN_VALUE;\n        for (Integer index: chars) {\n            if (index\
  \ > maxValue) {\n                maxValue = index;\n                maxIndex = index.intValue();\n\
  \            }\n        }\n        words.remove(maxIndex);\n        String result\
  \ = \"\";\n        for (String s: words) {\n            if (s == null) {\n     \
  \           continue;\n            }\n            result += s;\n        }\n    \
  \    return result;"
- "        Set<String> set = new HashSet<String>();\n        for (String word : words)\
  \ {\n            int len = word.length();\n            while (set.size() <= len)\
  \ {\n                set.add(word);\n            }\n        }\n\n        return\
  \ set.stream().filter(str -> str.length() == words.size()).findFirst().get();"
- '        return words.stream().sorted().distinct().findFirst().get();'
- "        int count[] = new int[26];\n        for (String word : words) {\n     \
  \       for (int i = 0; i < word.length(); i++) {\n                count[word.charAt(i)\
  \ - 'a']++;\n            }\n        }\n        Arrays.sort(count);\n        StringBuilder\
  \ result = new StringBuilder();\n        for (String word : words) {\n         \
  \   if (result[result.length() - 1].isEmpty())\n                result.append(word);\n\
  \            else {\n                if (count[word.charAt(0) - 'a'] != count[result.charAt(result.length()\
  \ - 1) - 'a'])\n                    result.append(word);\n            }\n      \
  \  }\n        String max = \"a\";\n        if (words.size() > 1)\n            max\
  \ = words.stream().min(Comparator.comparingInt(s -> count[s.charAt(0) - 'a']))\n\
  \                    .orElse(words.get(0));\n        return result.toString().equals(max)\
  \ ? max : \"\";"
- "        int max = 0;\n        String maxValue = \"\";\n        for(int i = 0; i<\
  \ words.size(); i++){\n            String word = words.get(i);\n            int\
  \ count = Collections.frequency(words, word);\n            if(count > max){\n  \
  \              max = count;\n                maxValue = word;\n            }\n \
  \       }\n        return maxValue;"
- "        String temp = null;\n        int max = 0;\n        for (String word : words)\
  \ {\n            int count = 0;\n            for (int i = 0; i < word.length();\
  \ i++) {\n                for (int j = 0; j < word.length(); j++) {\n          \
  \          char a = word.charAt(i);\n                    char b = word.charAt(j);\n\
  \                    int c = Math.abs(a - b);\n                    if (c > count)\
  \ {\n                        count = c;\n                        temp = word;\n\
  \                    }\n                }\n            }\n            if (count\
  \ > max) {\n                max = count;\n            }\n        }\n        if (temp\
  \ == null) {\n            return \"\";\n        }\n        return temp;"
- "        Collections.sort(words);\n        return words.stream().distinct().sorted().findFirst().get();"
language: java
name: HumanEval_158_find_max
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Write a function that accepts a list of strings.\n    //\
  \ The list contains different words. Return the word with maximum number\n    //\
  \ of unique characters. If multiple strings have maximum number of unique\n    //\
  \ characters, return the one which comes first in lexicographical order.\n    //\
  \ find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    // find_max([\"name\"\
  , \"enam\", \"game\"]) == \"enam\"\n    // find_max([\"aaaaaaa\", \"bb\" ,\"cc\"\
  ]) == \"\"aaaaaaa\"\n    public static String findMax(ArrayList<String> words) {\n"
stop_tokens:
- "    }\n    //"
- "    }\n    p"
- '    }

  }'
- "\n    }\n"
tests: "}\n    public static void main(String[] args) {\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
  name\", (String)\"of\", (String)\"string\")))).equals((\"string\")));\n    assert(findMax((new\
  \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"enam\", (String)\"\
  game\")))).equals((\"enam\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
  aaaaaaa\", (String)\"bb\", (String)\"cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new\
  \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"cba\")))).equals((\"\
  abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
  , (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\")))).equals((\"\
  footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
  we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
  )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\", (String)\"\
  are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"nation\"\
  )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"this\",\
  \ (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n   \
  \ assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
  b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
  , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
