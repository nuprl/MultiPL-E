completions: []
language: java
name: HumanEval_69_search
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // You are given a non-empty list of positive integers. Return\
  \ the greatest integer that is greater than \n    // zero, and has a frequency greater\
  \ than or equal to the value of the integer itself. \n    // The frequency of an\
  \ integer is the number of times it appears in the list.\n    // If no such a value\
  \ exist, return -1.\n    // Examples:\n    // search([4, 1, 2, 2, 3, 1]) == 2\n\
  \    // search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n    // search([5, 5, 4, 4, 4])\
  \ == -1\n    public static int search(ArrayList<Integer> lst) {\n"
stop_tokens:
- "    }\n    //"
- "    }\n    p"
- '    }

  }'
- "\n    }\n"
tests: "}\n    public static void main(String[] args) {\n    assert(search((new ArrayList<Integer>(Arrays.asList((int)5,\
  \ (int)5, (int)5, (int)5, (int)1)))) == (1));\n    assert(search((new ArrayList<Integer>(Arrays.asList((int)4,\
  \ (int)1, (int)4, (int)1, (int)4, (int)4)))) == (4));\n    assert(search((new ArrayList<Integer>(Arrays.asList((int)3,\
  \ (int)3)))) == (-1));\n    assert(search((new ArrayList<Integer>(Arrays.asList((int)8,\
  \ (int)8, (int)8, (int)8, (int)8, (int)8, (int)8, (int)8)))) == (8));\n    assert(search((new\
  \ ArrayList<Integer>(Arrays.asList((int)2, (int)3, (int)3, (int)2, (int)2)))) ==\
  \ (2));\n    assert(search((new ArrayList<Integer>(Arrays.asList((int)2, (int)7,\
  \ (int)8, (int)8, (int)4, (int)8, (int)7, (int)3, (int)9, (int)6, (int)5, (int)10,\
  \ (int)4, (int)3, (int)6, (int)7, (int)1, (int)7, (int)4, (int)10, (int)8, (int)1))))\
  \ == (1));\n    assert(search((new ArrayList<Integer>(Arrays.asList((int)3, (int)2,\
  \ (int)8, (int)2)))) == (2));\n    assert(search((new ArrayList<Integer>(Arrays.asList((int)6,\
  \ (int)7, (int)1, (int)8, (int)8, (int)10, (int)5, (int)8, (int)5, (int)3, (int)10))))\
  \ == (1));\n    assert(search((new ArrayList<Integer>(Arrays.asList((int)8, (int)8,\
  \ (int)3, (int)6, (int)5, (int)6, (int)4)))) == (-1));\n    assert(search((new ArrayList<Integer>(Arrays.asList((int)6,\
  \ (int)9, (int)6, (int)7, (int)1, (int)4, (int)7, (int)1, (int)8, (int)8, (int)9,\
  \ (int)8, (int)10, (int)10, (int)8, (int)4, (int)10, (int)4, (int)10, (int)1, (int)2,\
  \ (int)9, (int)5, (int)7, (int)9)))) == (1));\n    assert(search((new ArrayList<Integer>(Arrays.asList((int)1,\
  \ (int)9, (int)10, (int)1, (int)3)))) == (1));\n    assert(search((new ArrayList<Integer>(Arrays.asList((int)6,\
  \ (int)9, (int)7, (int)5, (int)8, (int)7, (int)5, (int)3, (int)7, (int)5, (int)10,\
  \ (int)10, (int)3, (int)6, (int)10, (int)2, (int)8, (int)6, (int)5, (int)4, (int)9,\
  \ (int)5, (int)3, (int)10)))) == (5));\n    assert(search((new ArrayList<Integer>(Arrays.asList((int)1))))\
  \ == (1));\n    assert(search((new ArrayList<Integer>(Arrays.asList((int)8, (int)8,\
  \ (int)10, (int)6, (int)4, (int)3, (int)5, (int)8, (int)2, (int)4, (int)2, (int)8,\
  \ (int)4, (int)6, (int)10, (int)4, (int)2, (int)1, (int)10, (int)2, (int)1, (int)1,\
  \ (int)5)))) == (4));\n    assert(search((new ArrayList<Integer>(Arrays.asList((int)2,\
  \ (int)10, (int)4, (int)8, (int)2, (int)10, (int)5, (int)1, (int)2, (int)9, (int)5,\
  \ (int)5, (int)6, (int)3, (int)8, (int)6, (int)4, (int)10)))) == (2));\n    assert(search((new\
  \ ArrayList<Integer>(Arrays.asList((int)1, (int)6, (int)10, (int)1, (int)6, (int)9,\
  \ (int)10, (int)8, (int)6, (int)8, (int)7, (int)3)))) == (1));\n    assert(search((new\
  \ ArrayList<Integer>(Arrays.asList((int)9, (int)2, (int)4, (int)1, (int)5, (int)1,\
  \ (int)5, (int)2, (int)5, (int)7, (int)7, (int)7, (int)3, (int)10, (int)1, (int)5,\
  \ (int)4, (int)2, (int)8, (int)4, (int)1, (int)9, (int)10, (int)7, (int)10, (int)2,\
  \ (int)8, (int)10, (int)9, (int)4)))) == (4));\n    assert(search((new ArrayList<Integer>(Arrays.asList((int)2,\
  \ (int)6, (int)4, (int)2, (int)8, (int)7, (int)5, (int)6, (int)4, (int)10, (int)4,\
  \ (int)6, (int)3, (int)7, (int)8, (int)8, (int)3, (int)1, (int)4, (int)2, (int)2,\
  \ (int)10, (int)7)))) == (4));\n    assert(search((new ArrayList<Integer>(Arrays.asList((int)9,\
  \ (int)8, (int)6, (int)10, (int)2, (int)6, (int)10, (int)2, (int)7, (int)8, (int)10,\
  \ (int)3, (int)8, (int)2, (int)6, (int)2, (int)3, (int)1)))) == (2));\n    assert(search((new\
  \ ArrayList<Integer>(Arrays.asList((int)5, (int)5, (int)3, (int)9, (int)5, (int)6,\
  \ (int)3, (int)2, (int)8, (int)5, (int)6, (int)10, (int)10, (int)6, (int)8, (int)4,\
  \ (int)10, (int)7, (int)7, (int)10, (int)8)))) == (-1));\n    assert(search((new\
  \ ArrayList<Integer>(Arrays.asList((int)10)))) == (-1));\n    assert(search((new\
  \ ArrayList<Integer>(Arrays.asList((int)9, (int)7, (int)7, (int)2, (int)4, (int)7,\
  \ (int)2, (int)10, (int)9, (int)7, (int)5, (int)7, (int)2)))) == (2));\n    assert(search((new\
  \ ArrayList<Integer>(Arrays.asList((int)5, (int)4, (int)10, (int)2, (int)1, (int)1,\
  \ (int)10, (int)3, (int)6, (int)1, (int)8)))) == (1));\n    assert(search((new ArrayList<Integer>(Arrays.asList((int)7,\
  \ (int)9, (int)9, (int)9, (int)3, (int)4, (int)1, (int)5, (int)9, (int)1, (int)2,\
  \ (int)1, (int)1, (int)10, (int)7, (int)5, (int)6, (int)7, (int)6, (int)7, (int)7,\
  \ (int)6)))) == (1));\n    assert(search((new ArrayList<Integer>(Arrays.asList((int)3,\
  \ (int)10, (int)10, (int)9, (int)2)))) == (-1));\n    }\n\n}\n"
