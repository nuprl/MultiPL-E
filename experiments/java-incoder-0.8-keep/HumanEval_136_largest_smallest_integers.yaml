name: HumanEval_136_largest_smallest_integers
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Create a function that returns a tuple (a, b), where 'a'\
  \ is\n    // the largest of negative integers, and 'b' is the smallest\n    // of\
  \ positive integers in a list.\n    // If there is no negative or positive integers,\
  \ return them as None.\n    // Examples:\n    // largest_smallest_integers([2, 4,\
  \ 1, 3, 5, 7]) == (None, 1)\n    // largest_smallest_integers([]) == (None, None)\n\
  \    // largest_smallest_integers([0]) == (None, None)\n    public static Pair<Optional<Integer>,\
  \ Optional<Integer>> largestSmallestIntegers(ArrayList<Integer> lst) {\n"
tests: "return Pair.with(Optional.empty(),Optional.empty());\n    }\n    public static\
  \ void main(String[] args) {\n    assert(largestSmallestIntegers((new ArrayList<Integer>(Arrays.asList((int)2,\
  \ (int)4, (int)1, (int)3, (int)5, (int)7)))).equals(Pair.with(Optional.of(Optional.empty()),\
  \ Optional.of(1))));\n    assert(largestSmallestIntegers((new ArrayList<Integer>(Arrays.asList((int)2,\
  \ (int)4, (int)1, (int)3, (int)5, (int)7, (int)0)))).equals(Pair.with(Optional.of(Optional.empty()),\
  \ Optional.of(1))));\n    assert(largestSmallestIntegers((new ArrayList<Integer>(Arrays.asList((int)1,\
  \ (int)3, (int)2, (int)4, (int)5, (int)6, (int)-2)))).equals(Pair.with(-2, 1)));\n\
  \    assert(largestSmallestIntegers((new ArrayList<Integer>(Arrays.asList((int)4,\
  \ (int)5, (int)3, (int)6, (int)2, (int)7, (int)-7)))).equals(Pair.with(-7, 2)));\n\
  \    assert(largestSmallestIntegers((new ArrayList<Integer>(Arrays.asList((int)7,\
  \ (int)3, (int)8, (int)4, (int)9, (int)2, (int)5, (int)-9)))).equals(Pair.with(-9,\
  \ 2)));\n    assert(largestSmallestIntegers((new ArrayList<Integer>(Arrays.asList()))).equals(Pair.with(Optional.of(Optional.empty()),\
  \ Optional.of(Optional.empty()))));\n    assert(largestSmallestIntegers((new ArrayList<Integer>(Arrays.asList((int)0)))).equals(Pair.with(Optional.of(Optional.empty()),\
  \ Optional.of(Optional.empty()))));\n    assert(largestSmallestIntegers((new ArrayList<Integer>(Arrays.asList((int)-1,\
  \ (int)-3, (int)-5, (int)-6)))).equals(Pair.with(Optional.of(-1), Optional.of(Optional.empty()))));\n\
  \    assert(largestSmallestIntegers((new ArrayList<Integer>(Arrays.asList((int)-1,\
  \ (int)-3, (int)-5, (int)-6, (int)0)))).equals(Pair.with(Optional.of(-1), Optional.of(Optional.empty()))));\n\
  \    assert(largestSmallestIntegers((new ArrayList<Integer>(Arrays.asList((int)-6,\
  \ (int)-4, (int)-4, (int)-3, (int)1)))).equals(Pair.with(-3, 1)));\n    assert(largestSmallestIntegers((new\
  \ ArrayList<Integer>(Arrays.asList((int)-6, (int)-4, (int)-4, (int)-3, (int)-100,\
  \ (int)1)))).equals(Pair.with(-3, 1)));\n    }\n\n}\n"
completions: []
stop_tokens:
- "    }\n    //"
- "    }\n    p"
- "    }\n}"
- "\n    }\n"
