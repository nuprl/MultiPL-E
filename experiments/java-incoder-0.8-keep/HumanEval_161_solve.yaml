name: HumanEval_161_solve
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse\
  \ its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
  \    // If the string contains no letters, reverse the string.\n    // The function\
  \ should return the resulted string.\n    // Examples\n    // solve(\"1234\") =\
  \ \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"#a@C\") = \"#A@c\"\n \
  \   public static String solve(String s) {\n"
tests: "return \"\";\n    }\n    public static void main(String[] args) {\n    assert(solve((\"\
  AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n\
  \    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
  #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
  #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n\
  \    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
completions: ["        String[] sArray = s.split(\"\");\n        String result = \"\
    \";\n        for (String s2 : sArray) {\n            String s2 = s2.toLowerCase();\n\
    \            if (s2.matches(\"[a-zA-Z]\")) {\n                String s3 = \"\"\
    ;\n                for (int i = s2.length() - 1; i >= 0; i--) {\n            \
    \        s3 += s2.charAt(i);\n                }\n                result = result\
    \ + s3;\n            } else {\n                result = result + s2;\n       \
    \     }\n        }\n        result = result.replaceAll(\"^\", \"\").replaceAll(\"\
    $\", \"\");\n        return result;", "        char[] chars = s.toCharArray();\n\
    \        List<Character> list = Arrays.asList(chars);\n        return list.stream().map(Character.toLowerCase).collect(Collectors.joining());",
  "        int length = s.length();\n        if (length == 0) {\n            return\
    \ \"\";\n        }\n\n        boolean isLetter = false;\n        for (int i =\
    \ 0; i < length; i++) {\n            if (s.charAt(i) >= 'A' && s.charAt(i) <=\
    \ 'Z') {\n                isLetter = true;\n            }\n        }\n       \
    \ if (isLetter) {\n            char temp;\n            String output = \"\";\n\
    \            for (int i = 0; i < length; i++) {\n                temp = s.charAt(i);\n\
    \                output = Character.toLowerCase(output) + Character.toUpperCase(temp);\n\
    \            }\n            return output;\n        }\n        else {\n      \
    \      return s;\n        }", "        if (s.isEmpty()) {\n            return\
    \ s;\n        }\n        StringBuilder sb = new StringBuilder(s.length());\n \
    \       char[] c = s.toCharArray();\n        int i = 0;\n        char last = 0;\n\
    \        do {\n            char curr = c[i];\n            if (curr >= 'a' && curr\
    \ < 'z') {\n                char upper = Character.toUpperCase(curr);\n      \
    \          char lower = Character.toLowerCase(curr);\n                char c =\
    \ sb.length() > i ? sb.charAt(i) : upper;\n                sb.setCharAt(i, c);\n\
    \                sb.setCharAt(i + 1, upper);\n                sb.setCharAt(i +\
    \ 2, lower);\n                i += 3;\n            } else if (curr >= 'A' && curr\
    \ < 'Z') {\n                char upper = Character.toUpperCase(curr);\n      \
    \          char lower = Character.toLowerCase(curr);\n                char c =\
    \ sb.length() > i ? sb.charAt(i) : lower;\n                sb.setCharAt(i, c);\n\
    \                sb.setCharAt(i + 1, upper);\n                sb.setCharAt(i +\
    \ 2, lower);\n                i += 3;\n            } else {\n                sb.append(curr);\n\
    \            }\n        } while (i < c.length);\n        return sb.toString();",
  "        Map<Character, String> mapping = new HashMap<>();\n        mapping.put('a',\
    \ \"A\");\n        mapping.put('b', \"B\");\n        mapping.put('c', \"C\");\n\
    \        mapping.put('d', \"D\");\n        mapping.put('e', \"E\");\n        mapping.put('f',\
    \ \"F\");\n        mapping.put('g', \"G\");\n        mapping.put('h', \"H\");\n\
    \        mapping.put('i', \"I\");\n        mapping.put('j', \"J\");\n        mapping.put('k',\
    \ \"K\");\n        mapping.put('l', \"L\");\n        mapping.put('m', \"M\");\n\
    \        mapping.put('n', \"N\");\n        mapping.put('o', \"O\");\n        mapping.put('p',\
    \ \"P\");\n        mapping.put('q', \"Q\");\n        mapping.put('r', \"R\");\n\
    \        mapping.put('s', \"S\");\n        mapping.put('t', \"T\");\n        mapping.put('u',\
    \ \"U\");\n        mapping.put('v', \"V\");\n        mapping.put('w', \"W\");\n\
    \        mapping.put('x', \"X\");\n        mapping.put('y', \"Y\");\n        mapping.put('z',\
    \ \"Z\");\n        mapping.put('.', \"#\");\n        mapping.put('/', \"/\");\n\
    \        mapping.put('\"', \"\\\"\");\n        mapping.put('-', \"-\");\n    \
    \    mapping.put('$', \"\\\\$\");\n        mapping.put('!', \"!\");\n        mapping.put('~',\
    \ \"/\");\n        mapping.put(';', \",\");\n        mapping.put('\\'', '\\\\\
    ');\n\n        final String reversedString = s.replaceAll(\"([a-z])\", mapping::get);\n\
    \n        return reversedString.replaceAll(\"[a-z]\", mapping::get);", "     \
    \   String[] arr = s.split(\"\");\n        for (String str : arr)\n          \
    \  str = str.replaceAll(\"[a-z]\", \"\").toLowerCase() + str.replaceAll(\"[A-Z]\"\
    , \"\").toUpperCase();\n        return s.isEmpty() ? str : s.replaceAll(\"[a-z]\"\
    , \"\").replaceAll(\"[A-Z]\", \"\");", "        final int length = s.length();\n\
    \        final char[] chars = s.toCharArray();\n        Arrays.stream(chars).map(Character::toLowerCase).collect(toList()).stream()\n\
    \            .map(Character::toUpperCase).forEach(System.out::println);\n    \
    \    if (length < 2) {\n            return s;\n        }\n        char[] newArr\
    \ = new char[length - 1];\n        for (int i = 0; i < length - 1; i++) {\n  \
    \          if (Character.isLetter(s.charAt(i))) {\n                newArr[i] =\
    \ Character.toUpperCase(s.charAt(i));\n            } else {\n                newArr[i]\
    \ = Character.toLowerCase(s.charAt(i));\n            }\n        }\n        return\
    \ new String(newArr);", "        List<String> list = new ArrayList<>(Arrays.asList(s.split(\"\
    \")));\n        Collections.reverse(list);\n        return new StringBuilder().append(list).reverse().toString();",
  "        ArrayList<Character> arr;\n        ArrayList<Integer> arr2;\n        ArrayList<Character>\
    \ temp;\n        if (s.length() % 2 != 0) {\n            arr = new ArrayList<>();\n\
    \            temp = new ArrayList<>();\n            String s1 = s.toLowerCase();\n\
    \            String s2 = \"abcdefghijklmnopqrstuvwxyz\";\n            for (int\
    \ i = 0; i < s1.length(); i++) {\n                if (s1.charAt(i) >= 'a' && s1.charAt(i)\
    \ <= 'z') {\n                    arr.add((s1.charAt(i))); // adds the letter to\
    \ an array\n                    temp.add(s2.charAt(s1.charAt(i))); // adds the\
    \ letter to another array\n                } else {\n                    arr.add((s1.charAt(i)));\
    \ // adds the letter to an array\n                    temp.add(s1.charAt(i));\
    \ // adds the letter to another array\n                }\n            }\n    \
    \        StringBuilder builder = new StringBuilder();\n            for (int i\
    \ = 0; i < arr.size(); i++) {\n                if (temp.get(i) >= 'a' && temp.get(i)\
    \ <= 'z') {\n                    builder.append(temp.get(i));\n              \
    \  } else {\n                    builder.append(arr.get(i));\n               \
    \ }\n            }\n            return builder.toString();\n        } else {\n\
    \            arr = new ArrayList<>();\n            temp = new ArrayList<>();\n\
    \            String s1 = s.toLowerCase();\n            String s2 = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n            for (int i = 0; i < s1.length(); i++) {\n                if (s1.charAt(i)\
    \ >= 'a' && s1.charAt(i) <= 'z') {\n                    arr.add((s1.charAt(i)));\
    \ // adds the letter to an array\n                    temp.add(s2.charAt(s1.charAt(i)));\
    \ // adds the letter to another array\n                } else {\n            \
    \        arr.add((s1.charAt(i))); // adds the letter to an array\n           \
    \         temp.add(s1.charAt(i)); // adds the letter to another array\n      \
    \          }\n            }\n            StringBuilder builder = new StringBuilder();\n\
    \            for (int i = 0; i < arr.size(); i++) {\n                if (temp.get(i)\
    \ >= 'a' && temp.get(i) <= 'z') {\n                    builder.append(temp.get(i));\n\
    \                } else {\n                    builder.append(arr.get(i));\n \
    \               }\n            }\n            return builder.toString();\n   \
    \     }", "        return s.replaceAll(\"[\\\\p{Alpha}\\\\p{Digit}]\", \n    \
    \            c -> c.toUpperCase().matches(\"\\\\p{Alpha}\") ? \n             \
    \           c.toLowerCase() : c.toUpperCase());", "        StringBuilder result\
    \ = new StringBuilder();\n        for(Character c: s.toCharArray()) {\n      \
    \      if(!Character.isLetter(c)) {\n                result.append(Character.toLowerCase(c));\n\
    \            } else {\n                result.append(c);\n            }\n    \
    \    }\n        return result.toString().replaceAll(\"(.)\\\\1+\", \"$1\");",
  "        Stack<Character> st = new Stack<>();\n        for (int i = 0; i < s.length();\
    \ i++) {\n            if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z' || s.charAt(i)\
    \ >= 'A' && s.charAt(i) <= 'Z') {\n                st.push(s.charAt(i));\n   \
    \         } else {\n                st.pop();\n            }\n        }\n    \
    \    return st.reverse().toString();", "        // Your code here\n        List<Character>\
    \ listOfCharacters = new ArrayList<Character>();\n        for(int i = 0;i < s.length();i++){\n\
    \            char c = s.charAt(i);\n            if(Character.isLetter(c)){\n \
    \               listOfCharacters.add(c);\n            }\n        }\n        Collections.reverse(listOfCharacters);\n\
    \        String reversed = new String(listOfCharacters);\n        if(listOfCharacters.isEmpty()){\n\
    \            reversed = s;\n        }\n        return reversed;", "        if(s.isEmpty()){\n\
    \            return s;\n        }\n        char[] chars = s.toCharArray();\n \
    \       for(int i = 0; i<chars.length;i++){\n            char c = chars[i];\n\
    \            if(Character.isLetter(c)){\n                if(Character.isLowerCase(c)){\n\
    \                    chars[i] = Character.toUpperCase(c);\n                }else{\n\
    \                    chars[i] = Character.toLowerCase(c);\n                }\n\
    \            }\n        }\n        return new String(chars);", "        StringBuilder\
    \ reverse = new StringBuilder();\n        for (char c : s.toCharArray()) {\n \
    \           if (Character.isLetter(c)) {\n                char t = Character.toUpperCase(c);\n\
    \                reverse.append(t);\n            } else {\n                reverse.append(c);\n\
    \            }\n        }\n        return reverse.toString();", "        // Write\
    \ your code here\n        StringBuilder sb = new StringBuilder(s);\n        for(int\
    \ i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n         \
    \   if(c == 'A' || c == 'a'){\n                sb.setCharAt(i, (char) ('A' + sb.length()-1));\n\
    \            }\n            if(c == 'a' || c == 'A'){\n                sb.setCharAt(i,\
    \ (char) ('a' + sb.length()-1));\n            }\n        }\n        return sb.toString();",
  "        if (s.contains(\"@\")){\n            String first = s.substring(0,1);\n\
    \            String last= s.substring(s.indexOf(\"@\")+1);\n            String\
    \ reverse= last.substring(0,1).toUpperCase()+ first.substring(1)+last.substring(1).toLowerCase();\n\
    \            return reverse;\n        }else{\n            return s;\n        }\n",
  "        String newString = \"\";\n        for(char ch : s.toCharArray()){\n   \
    \         if(Character.isLetter(ch)){\n                if(Character.isUpperCase(ch)){\n\
    \                    newString = newString.concat(Character.toLowerCase(ch));\n\
    \                }\n                else{\n                    newString = newString.concat(Character.toUpperCase(ch));\n\
    \                }\n            }\n            else{\n                newString\
    \ = newString.concat(ch);\n            }\n        }\n        return newString;",
  "        StringBuilder sb = new StringBuilder(s);\n        char ch;\n        StringBuilder\
    \ reverse = new StringBuilder();\n        for (int i = 0; i < sb.length(); i++)\
    \ {\n            ch = sb.charAt(i);\n            if (Character.isLetter(ch)) {\n\
    \                reverse.append(Character.toUpperCase(ch));\n            } else\
    \ {\n                reverse.append(Character.toLowerCase(ch));\n            }\n\
    \        }\n        return reverse.toString();", "        if (s.isEmpty()) return\
    \ \"\";\n        if (s.charAt(0) == s.toLowerCase().charAt(0)) s = s.replaceFirst(s.toLowerCase(),\
    \ s.toUpperCase());\n        if (s.charAt(0) == s.toUpperCase().charAt(0)) s =\
    \ s.replaceFirst(s.toUpperCase(), s.toLowerCase());\n        return s;", "   \
    \     StringBuilder sb = new StringBuilder();\n        char[] cs = s.toCharArray();\n\
    \        for (int i = 0; i < cs.length; i++) {\n            if (isLetter(cs[i]))\
    \ {\n                sb.append(cs[i].toLowerCase());\n            } else {\n \
    \               sb.append(cs[i]);\n            }\n        }\n        return sb.toString();",
  "        String result = \"\";\n        char[] chars = s.toCharArray();\n      \
    \  for (int i = 0; i < chars.length; i++) {\n            char c = chars[i];\n\
    \            if (Character.isLetter(c)) {\n                result += Character.toLowerCase(c);\n\
    \            } else {\n                result += Character.toUpperCase(c);\n \
    \           }\n        }\n        return result;", "        StringBuilder sb =\
    \ new StringBuilder(s.length());\n        for (int i = 0; i < s.length(); i++)\
    \ {\n            char ch = s.charAt(i);\n            if (Character.isLetter(ch))\
    \ {\n                char upperCase = Character.toUpperCase(ch);\n           \
    \     if (sb.length() > 0) {\n                    sb.setCharAt(sb.length() - 1,\
    \ upperCase);\n                } else {\n                    sb.append(upperCase);\n\
    \                }\n            } else {\n                sb.append(ch);\n   \
    \         }\n        }\n        return sb.toString();", "        \n        \n\
    \        \n        \n        if(s.length()==0)\n        {\n            \n    \
    \        return s;\n        }\n        \n        String str = \"\";\n        char\
    \ ch;\n        for(int i=0;i<s.length();i++)\n        {\n            ch=s.charAt(i);\n\
    \            if(Character.isLetter(ch))\n            {\n                if(Character.isLowerCase(ch))\n\
    \                {\n                    str+=Character.toUpperCase(ch);\n    \
    \            }\n                else\n                {\n                    str+=Character.toLowerCase(ch);\n\
    \                }\n            }\n            else\n            {\n         \
    \       str+=ch;\n            }\n        }\n        return str;", "        int\
    \ len = s.length();\n        char[] chars = new char[len];\n        for(int i\
    \ = 0; i < len; i++) {\n            chars[i] = s.charAt(i);\n        }\n     \
    \   Arrays.sort(chars);\n        if(chars[0] < chars[1]) {\n            chars[0]\
    \ += 32;\n            chars[1] -= 32;\n        }\n        return new String(chars);",
  "        if (s == null) return null;\n        char[] chArray = s.toCharArray();\n\
    \        Arrays.stream(chArray).map(x -> Character.toUpperCase(x)).forEach(System.out::println);\n\
    \        Arrays.stream(chArray).map(x -> Character.toLowerCase(x)).forEach(System.out::println);\n\
    \        Arrays.stream(chArray).map(x -> x.equals(Character.toLowerCase(x) ? Character.toUpperCase(x)\
    \ : Character.toLowerCase(x))).filter(x -> !x.equals(true)).forEach(System.out::println);\n\
    \        Arrays.stream(chArray).map(x -> {\n            char[] res = new char[chArray.length];\n\
    \            for (int i = 0; i < chArray.length; i++) res[i] = chArray[i];\n \
    \           res[i] = Character.toUpperCase(chArray[i]);\n            return new\
    \ String(res);\n        }).map(x -> {\n            char[] res = new char[chArray.length];\n\
    \            for (int i = 0; i < chArray.length; i++) res[i] = chArray[i];\n \
    \           res[i] = Character.toLowerCase(chArray[i]);\n            return new\
    \ String(res);\n        }).filter(x -> !x.equals(true)).forEach(System.out::println);\n\
    \        Arrays.stream(chArray).map(x -> {\n            char[] res = new char[chArray.length];\n\
    \            for (int i = 0; i < chArray.length; i++) res[i] = chArray[i];\n \
    \           return new String(res);\n        }).map(x -> {\n            char[]\
    \ res = new char[chArray.length];\n            for (int i = 0; i < chArray.length;\
    \ i++) res[i] = chArray[i];\n            return new String(res);\n        }).filter(x\
    \ -> !x.equals(true)).forEach(System.out::println);\n        return null;", " \
    \       if(s.length()==0){\n            return s;\n        }\n        String[]\
    \ strList = Arrays.stream(s.split(\"(?!^)\")\n                .map(s -> s.toLowerCase())\n\
    \                .map(s -> s.trim()).toArray()).distinct().toArray(String[]::new);\n\
    \        char[] charList = Arrays.stream(s.split(\"(?!^)\")\n                .map(s\
    \ -> s.toLowerCase())\n                .map(s -> s.trim()).toArray()).distinct().toArray(char[]::new);\n\
    \        for(String str : strList){\n            String strReversed = str.replaceFirst(Character.toString(strList.indexOf(str)),\"\
    \").replaceAll(strList.get(strList.indexOf(str)),Character.toString(strList.indexOf(str)));\n\
    \            char[] charReversed = strReversed.replaceFirst(Character.toString(strList.indexOf(str)),\"\
    \").replaceAll(strList.get(strList.indexOf(str)),Character.toString(strList.indexOf(str)));\n\
    \            for(int i =0;i< charList.length; i++){\n                charList[i]\
    \ = charList[i].toLowerCase();\n            }\n            charList.reverse();\n\
    \            charList = Arrays.stream(charList).distinct().toArray(char[]::new);\n\
    \            for(int i =0;i<charList.length;i++){\n                charList[i]\
    \ = charReversed[i];\n            }\n        }\n        return new String(charList);",
  "        StringBuilder sb = new StringBuilder();\n        for (char c : s.toCharArray())\
    \ {\n            if (Character.isLetter(c)) {\n                if (Character.isLowerCase(c))\
    \ {\n                    c = Character.toUpperCase(c);\n                } else\
    \ {\n                    c = Character.toLowerCase(c);\n                }\n  \
    \          }\n            sb.append(c);\n        }\n        return sb.toString();",
  "        // Your code goes here\n        String str = \"\";\n        if (s.length()\
    \ == 0) {\n            return str;\n        } else {\n            str = s.replaceAll(\"\
    [A-Z]\",\n                    s -> s.toUpperCase()\n            );\n         \
    \   str = s.replaceAll(\"[a-z]\",\n                    s -> s.toLowerCase()\n\
    \            );\n            return str;\n        }", "        Map<String, String>\
    \ map = new HashMap<>();\n        for (char c : s.toCharArray()) {\n         \
    \   String key = (char) c + \"\";\n            String value = map.containsKey(key)\
    \ ? map.get(key) : \"\";\n            map.put(key, value);\n        }\n      \
    \  String[] keys = map.keySet().toArray(new String[0]);\n        String result\
    \ = \"\";\n        for (String key : keys) {\n            String value = map.get(key);\n\
    \            if (value.equals(\"#\")) {\n                result = result + key;\n\
    \            } else if (value.equals(\"@\")) {\n                result = value\
    \ + result;\n            } else {\n                result = value + result;\n\
    \            }\n        }\n        return result;", "        return s.replaceAll(\"\
    [^a-zA-Z]\", s -> {\n            int len = (int) (s.length() / 2);\n         \
    \   return new StringBuilder(s).reverse().replace(s.charAt(len), s.charAt(len\
    \ - 1), \"\");\n        });", "        //return s.replaceAll(\"[A-Za-z]+\", s\
    \ -> s.toUpperCase());\n        //return s.replaceAll(\"[A-Z]+\", s -> s.toLowerCase());\n\
    \        \n        List<Character> letters = new ArrayList<>();\n        for (int\
    \ i=0; i<s.length(); i++) {\n            char c = s.charAt(i);\n            if\
    \ (Character.isLetter(c)) {\n                letters.add(c);\n            } else\
    \ {\n                letters.add(Character.toLowerCase(c));\n            }\n \
    \       }\n        \n        return letters.stream().map(String::valueOf).collect(Collectors.joining(\"\
    \"));", "        \n        if(s.length() == 0){\n            return s;\n     \
    \   }\n        \n        char[] arr = s.toCharArray();\n        \n        if(Character.isLetter(arr[0]))\
    \ {\n            return new StringBuilder(arr).reverse().toString();\n       \
    \ }\n        \n        StringBuilder sb = new StringBuilder();\n        for(int\
    \ i=0; i<arr.length; i++){\n            \n            String tempStr = new StringBuilder(arr[i]).toString();\n\
    \            if(Character.isLetter(arr[i])) {\n                tempStr = tempStr.toUpperCase();\n\
    \            }\n            sb.append(tempStr);\n        }\n        return sb.toString();",
  "        \n        int len = s.length();\n        \n        for (int i = 0; i <\
    \ len; i++) {\n            char ch = s.charAt(i);\n            \n            if\
    \ (isLetter(ch)) {\n                s = s.toUpperCase();\n                s =\
    \ s.substring(0, i) + s.substring(i + 1);\n                s = s.toUpperCase();\n\
    \                \n                if (i == 0) s = s.substring(i + 1);\n     \
    \       }\n        }\n        return s;", "        s=s.replaceAll(\"[A-z]\", ch\
    \ -> ch.toUpperCase());\n        s=s.replaceAll(\"[a-z]\", ch -> ch.toLowerCase());\n\
    \        \n        \n        if (s.isEmpty()) {\n            return s;\n     \
    \   }\n        \n        if (Character.isLowerCase(s.charAt(0))) {\n         \
    \   String temp = s.substring(0);\n            int len = 0;\n            String\
    \ result = \"\";\n            \n            for (int i = 0; i < temp.length();\
    \ i++) {\n                if (Character.isUpperCase(temp.charAt(i))) {\n     \
    \               result += temp.charAt(i);\n                } else {\n        \
    \            result += temp.substring(0, i) + temp.substring(i + 1);\n       \
    \         }\n            }\n            \n            return result;\n       \
    \ }\n        \n        return s;", "        \n        Stack<Character> stack =\
    \ new Stack<>();\n        boolean hasLetter = false;\n        int count = 0;\n\
    \n        for(int i = 0; i < s.length(); i++) {\n            if(s.charAt(i) >=\
    \ 65 && s.charAt(i) <= 90) {\n                if(count == 0) {\n             \
    \       hasLetter = true;\n                }\n                stack.push(s.charAt(i));\n\
    \                count++;\n            } else {\n                if(count > 0)\
    \ {\n                    while(!stack.isEmpty()) {\n                        if(s.charAt(i)\
    \ == stack.peek()) {\n                            stack.pop();\n             \
    \               count--;\n                            continue;\n            \
    \            }\n                        break;\n                    }\n      \
    \              if(count == 0) {\n                        hasLetter = true;\n \
    \                   }\n                }\n                stack.push(s.charAt(i));\n\
    \                count++;\n            }\n        }\n        if(count > 0) {\n\
    \            while(!stack.isEmpty()) {\n                if(s.charAt(i) == stack.peek())\
    \ {\n                    stack.pop();\n                    count--;\n        \
    \            continue;\n                }\n                break;\n          \
    \  }\n            if(count == 0) {\n                hasLetter = true;\n      \
    \      }\n        }\n        if(!hasLetter) {\n            for(int i = 0; i <\
    \ s.length(); i++) {\n                if(s.charAt(i) >= 65 && s.charAt(i) <= 90)\
    \ {\n                    stack.push(s.charAt(i));\n                    count++;\n\
    \                }\n            }\n            while(!stack.isEmpty()) {\n   \
    \             if(s.charAt(i) == stack.peek()) {\n                    stack.pop();\n\
    \                    count--;\n                    continue;\n               \
    \ }\n                break;\n            }\n        }\n\n        String reverse\
    \ = new StringBuilder().append(stack).toString();\n        if(reverse.length()\
    \ > 0) {\n            reverse = reverse.substring(1);\n        }\n        return\
    \ reverse;", '        return s.replaceAll("[a-zA-Z]", "$0" + s.charAt(0).toUpperCase()
    + s.substring(1).toLowerCase());', "        StringBuilder sb = new StringBuilder();\n\
    \        for(char c:s.toCharArray()) {\n            switch(c) {\n            \
    \    case 'A': case 'a':\n                    sb.append('a');\n              \
    \      break;\n                case 'B': case 'b':\n                    sb.append('b');\n\
    \                    break;\n                case 'C': case 'c':\n           \
    \         sb.append('c');\n                    break;\n                case 'D':\
    \ case 'd':\n                    sb.append('d');\n                    break;\n\
    \                case 'E': case 'e':\n                    sb.append('e');\n  \
    \                  break;\n                case 'F': case 'f':\n             \
    \       sb.append('f');\n                    break;\n                case 'G':\
    \ case 'g':\n                    sb.append('g');\n                    break;\n\
    \                case 'H': case 'h':\n                    sb.append('h');\n  \
    \                  break;\n                case 'I': case 'i':\n             \
    \       sb.append('i');\n                    break;\n                case 'J':\
    \ case 'j':\n                    sb.append('j');\n                    break;\n\
    \                case 'K': case 'k':\n                    sb.append('k');\n  \
    \                  break;\n                case 'L': case 'l':\n             \
    \       sb.append('l');\n                    break;\n                case 'M':\
    \ case 'm':\n                    sb.append('m');\n                    break;\n\
    \                case 'N': case 'n':\n                    sb.append('n');\n  \
    \                  break;\n                case 'O': case 'o':\n             \
    \       sb.append('o');\n                    break;\n                case 'P':\
    \ case 'p':\n                    sb.append('p');\n                    break;\n\
    \                case 'Q': case 'q':\n                    sb.append('q');\n  \
    \                  break;\n                case 'R': case 'r':\n             \
    \       sb.append('r');\n                    break;\n                case 'S':\
    \ case 's':\n                    sb.append('s');\n                    break;\n\
    \                case 'T': case 't':\n                    sb.append('t');\n  \
    \                  break;\n                case 'U': case 'u':\n             \
    \       sb.append('u');\n                    break;\n                case 'V':\
    \ case 'v':\n                    sb.append('v');\n                    break;\n\
    \                case 'W': case 'w':\n                    sb.append('w');\n  \
    \                  break;\n                case 'X': case 'x':\n             \
    \       sb.append('x');\n                    break;\n                case 'Y':\
    \ case 'y':\n                    sb.append('y');\n                    break;\n\
    \                case 'Z': case 'z':\n                    sb.append('z');\n  \
    \                  break;\n            }\n        }\n        return sb.toString();",
  "        StringBuilder sb = new StringBuilder();\n        char[] arr = s.toCharArray();\n\
    \        Arrays.sort(arr);\n        for (int i = 0; i < arr.length; i++) {\n \
    \           if (Character.isLetter(arr[i])) {\n                sb.append(Character.toUpperCase(arr[i]));\n\
    \            } else {\n                sb.append(arr[i]);\n            }\n   \
    \     }\n        return sb.toString();", "        \n        String result = \"\
    \";\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n\
    \            if (Character.isLetter(c)) {\n                result += Character.toLowerCase(c);\n\
    \            }\n            else {\n                result += Character.toUpperCase(c);\n\
    \            }\n        }\n        return result;", "        if (s == null ||\
    \ s.length() <= 0) return s;\n        char ch;\n        StringBuilder sb = new\
    \ StringBuilder();\n        for (int i = 0; i < s.length(); i++) {\n         \
    \   ch = s.charAt(i);\n            switch (ch) {\n            case 'a':\n    \
    \        case 'b':\n            case 'c':\n            case 'd':\n           \
    \ case 'e':\n            case 'f':\n            case 'g':\n            case 'h':\n\
    \            case 'i':\n            case 'j':\n            case 'k':\n       \
    \     case 'l':\n            case 'm':\n            case 'n':\n            case\
    \ 'o':\n            case 'p':\n            case 'q':\n            case 'r':\n\
    \            case 's':\n            case 't':\n            case 'u':\n       \
    \     case 'v':\n            case 'w':\n            case 'x':\n            case\
    \ 'y':\n            case 'z':\n            case 'A':\n            case 'B':\n\
    \            case 'C':\n            case 'D':\n            case 'E':\n       \
    \     case 'F':\n            case 'G':\n            case 'H':\n            case\
    \ 'I':\n            case 'J':\n            case 'K':\n            case 'L':\n\
    \            case 'M':\n            case 'N':\n            case 'O':\n       \
    \     case 'P':\n            case 'Q':\n            case 'R':\n            case\
    \ 'S':\n            case 'T':\n            case 'U':\n            case 'V':\n\
    \            case 'W':\n            case 'X':\n            case 'Y':\n       \
    \     case 'Z':\n                sb.append(Character.toUpperCase(ch));\n     \
    \           break;\n            case '@':\n            case '#':\n           \
    \     sb.append(Character.toLowerCase(ch));\n                break;\n        \
    \    default:\n                sb.append(ch);\n            }\n        }\n    \
    \    return sb.toString();", "        // Write your code here\n        char[]\
    \ charArray = s.toCharArray();\n        Arrays.sort(charArray);\n        if(charArray.length==0){\n\
    \            return s;\n        }\n        StringBuilder res=new StringBuilder();\n\
    \        for(int i=0;i<charArray.length-1;i++){\n            if(Character.isLetter(charArray[i])){\n\
    \                if(charArray[i+1]<Character.toUpperCase(charArray[i])){\n   \
    \                 res.append(Character.toLowerCase(charArray[i]));\n         \
    \       }else{\n                    res.append(Character.toUpperCase(charArray[i]));\n\
    \                }\n            }else{\n                res.append(charArray[i]);\n\
    \            }\n        }\n        return res.toString();", "        // TODO write\
    \ your code here\n        char[] cs = s.toCharArray();\n        StringBuilder\
    \ sb = new StringBuilder();\n        for(char c: cs){\n            if (Character.isLetter(c))\
    \ {\n                sb.append(Character.toUpperCase(c));\n            } else\
    \ {\n                sb.append(c);\n            }\n        }\n        return sb.toString();",
  "        \n        for(int i = 0; i < s.length(); i++){\n            \n        \
    \    if(Character.isLetter(s.charAt(i))){\n                \n                if(Character.isUpperCase(s.charAt(i))){\n\
    \                    s = s.replaceAll(\"(\" + i + \")\", \"$1\" + Character.toLowerCase(s.charAt(i))\
    \ + \"$2\");\n                }else{\n                    s = s.replaceAll(\"\
    (\" + i + \")\", \"$1\" + Character.toUpperCase(s.charAt(i)) + \"$2\");\n    \
    \            }\n            }\n            \n        }\n        \n        return\
    \ s;", "        StringBuilder result = new StringBuilder();\n        for(int i\
    \ = 0 ; i < s.length(); i++) {\n            char c = s.charAt(i);\n          \
    \  int x = Character.toUpperCase(c);\n            int y = Character.toLowerCase(c);\n\
    \            String temp = (x == y) ? c : x + y;\n            result.append(temp);\n\
    \        }\n        return result.reverse().toString();", "        int len = s.length();\n\
    \        if(len == 0) return \"\";\n        StringBuilder sb = new StringBuilder();\n\
    \        char[] ca = s.toCharArray();\n        for(int i = 0; i < len; i++){\n\
    \            char c = ca[i];\n            if(Character.isLetter(c)){\n       \
    \         if(Character.isLowerCase(c))\n                    sb.append(Character.toUpperCase(c));\n\
    \                else\n                    sb.append(Character.toLowerCase(c));\n\
    \            }\n            else\n                sb.append(c);\n        }\n \
    \       return sb.toString();", "        if(s.isEmpty()) return \"\";\n      \
    \  return s.chars().map(Character::toUpperCase)\n                        .map(c\
    \ -> c == '#' ? Character.toLowerCase(c) : c)\n                        .map(c\
    \ -> c == '@' ? Character.toUpperCase(c) : c)\n                        .map(c\
    \ -> Character.isLetter(c) ? c.toUpperCase() : c)\n                        .map(c\
    \ -> Character.isLetter(c) ? c.toLowerCase() : c)\n                        .collect(Collectors.joining(\"\
    \"));", "        if(s == null || s.length() == 0) return s;\n        char[] arr\
    \ = s.toCharArray();\n        for(int i = 0; i < arr.length; i++) {\n        \
    \    if(Character.isLetter(arr[i])) {\n                switch(Character.getType(arr[i]))\
    \ {\n                case LOWER:\n                    if(Character.isLowerCase(arr[i]))\
    \ {\n                        char temp = arr[i];\n                        arr[i]\
    \ = Character.toUpperCase(arr[i]);\n                        arr[i] = Character.toLowerCase(temp);\n\
    \                    }\n                    break;\n                case UPPER:\n\
    \                    if(Character.isUpperCase(arr[i])) {\n                   \
    \     char temp = arr[i];\n                        arr[i] = Character.toLowerCase(arr[i]);\n\
    \                        arr[i] = Character.toUpperCase(temp);\n             \
    \       }\n                    break;\n                }\n            }\n    \
    \    }\n        return arr;", "        String[] arr  = s.split(\"[^a-zA-Z]\");\n\
    \        \n        for( int i = 0; i < arr.length; i++ ) {\n            if( arr[i].matches(\"\
    [A-Za-z]+\") ) {\n                arr[i] = arr[i].replaceAll(\"([a-z])\",\"$1\\\
    u$2\");\n                arr[i] = arr[i].replaceAll(\"([A-Z])\",\"$2\\u$1\");\n\
    \                arr[i] = arr[i].replaceAll(\"([0-9])\",\"$1\\u$2\");\n      \
    \          arr[i] = arr[i].replaceAll(\"([0-9])\",\"$2\\u$1\");\n            \
    \    arr[i] = arr[i].replaceAll(\"([@#$])\",\"\\u$1\");\n            }\n     \
    \   }\n        \n        StringBuilder result = new StringBuilder();\n       \
    \ \n        for( int i = 0; i < arr.length; i++ ) {\n            result.append(\
    \ arr[i] + \"\" );\n        }\n        \n        return result.toString();", " \
    \       char[] chars = s.toCharArray();\n        char[] res = new char[chars.length];\n\
    \        Arrays.fill(res, 0);\n        for(int i = 0; i < chars.length; ++i) {\n\
    \            if (Character.isLetter(chars[i])) {\n                int charCount\
    \ = s.toCharArray().length - i - 1;\n                Arrays.fill(res, chars[i],\
    \ chars[i] + charCount / 2, chars[i] - 1);\n            }\n            else\n\
    \                res[chars.length - i - 1] = chars[i];\n        }\n        return\
    \ new String(res);", "        if (s == null || s.length() == 0) {\n          \
    \  return \"\";\n        }\n        char[] c = s.toCharArray();\n        Arrays.sort(c);\n\
    \        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <\
    \ c.length; ++i) {\n            if (Character.isLetter(c[i])) {\n            \
    \    sb.append(Character.toUpperCase(c[i]));\n            } else {\n         \
    \       sb.append(c[i]);\n            }\n        }\n        return sb.toString();",
  "        String[] chars = s.split(\"\");\n        Arrays.sort(chars);\n        if\
    \ (chars.length == 0) {\n            return s;\n        }\n        String result\
    \ = \"\";\n        for (int i = 0; i < chars.length; i++) {\n            if (chars[i].equalsIgnoreCase(Character.toLowerCase(chars[0])))\
    \ {\n                result += Character.toUpperCase(chars[i]);\n            }\
    \ else {\n                result += chars[i];\n            }\n        }\n    \
    \    return result;", "        StringBuilder res=new StringBuilder();\n      \
    \  Set<Character> letters=new HashSet<Character>();\n        for(char c:s.toCharArray())\n\
    \            letters.add(c);\n        for(char c:letters)\n            if(c>64&&c<91)\n\
    \                c=Character.toUpperCase(c);\n            else\n             \
    \   c=Character.toLowerCase(c);\n            res.append(c);\n        return res.toString();",
  "        char[] chars = s.toCharArray();\n        StringBuilder reversed = new StringBuilder();\n\
    \        for (char c : chars) {\n            if (Character.isLetter(c)) {\n  \
    \              reversed.append(Character.toUpperCase(c));\n            } else\
    \ {\n                reversed.append(Character.toLowerCase(c));\n            }\n\
    \        }\n        return reversed.toString();", '        return s;', "     \
    \   StringBuilder sb = new StringBuilder();\n        for (char c : s.toCharArray())\
    \ {\n            if (Character.isLetter(c)) {\n                String upperCase\
    \ = Character.toUpperCase(c);\n                String lowerCase = Character.toLowerCase(c);\n\
    \                if (sb.length() == 0) {\n                    sb.append(lowerCase);\n\
    \                } else if (sb.length() > 0) {\n                    sb.append(lowerCase);\n\
    \                    sb.append(upperCase);\n                }\n            } else\
    \ if (sb.length() > 0) {\n                sb.append(c);\n            }\n     \
    \   }\n        return sb.toString();", "        char[] chars = s.toCharArray();\n\
    \        String result = \"\";\n        for (int i = 0; i < chars.length; i++)\
    \ {\n            Character c = chars[i];\n            if (Character.isLetter(chars[i]))\
    \ {\n                result = result.toUpperCase();\n            } else {\n  \
    \              result = result.toLowerCase();\n            }\n        }\n    \
    \    return result;", "        List<Integer> indexs = new ArrayList<>();\n   \
    \     for (char c : s.toCharArray()) {\n            if (Character.isUpperCase(c))\
    \ {\n                indexs.add(Character.toLowerCase(c) - 'a');\n           \
    \ } else {\n                indexs.add(Character.toUpperCase(c) - 'A');\n    \
    \        }\n        }\n        return s.replaceAll(\"[\" + String.join(\"\", IntStream.range(0,\
    \ indexs.size()).mapToObj(i -> i + \"-\" + (i + 1)).collect(Collectors.joining(\"\
    |\"))) + \"]\", s -> String.valueOf(indexs.get(s.charAt(0) - 'a')));", "     \
    \   return s.replaceAll(\"(?i)([a-z]+)\", s -> s.replaceAll(\"(?i)([A-Z]+)\",\
    \ s -> s.replaceAll(\"(?i)([A-Z][a-z]+)\", \"$2$1\")))\n            .replaceAll(\"\
    (?i)([A-Z]+)\", s -> s.replaceAll(\"(?i)([a-z]+)\", \"$2\"));", "        if (s\
    \ == null || s.length() == 0) {\n            return s;\n        }\n        char[]\
    \ array = s.toCharArray();\n        Arrays.sort(array);\n        StringBuilder\
    \ builder = new StringBuilder();\n        int i = 0;\n        int count = 0;\n\
    \        while (i < array.length && count < array.length) {\n            char\
    \ a = array[i];\n            char b = array[count];\n            if (a == b) {\n\
    \                count++;\n                i++;\n            }\n            else\
    \ if (a < b) {\n                builder.append(b);\n                i++;\n   \
    \         }\n            else {\n                builder.append(a);\n        \
    \        count--;\n            }\n        }\n        while (count > 0) {\n   \
    \         builder.append(array[count]);\n            count--;\n        }\n   \
    \     return builder.toString();", "        if (s == null || s.length() <= 0)\
    \ {\n            return \"\";\n        }\n        // write your code here\n  \
    \      char[] chars = s.toCharArray();\n        StringBuilder sb = new StringBuilder();\n\
    \        boolean flag = false;\n        for (char c : chars) {\n            if\
    \ (Character.isLetter(c)) {\n                flag = true;\n                sb.append(Character.toUpperCase(c));\n\
    \            } else if (flag) {\n                sb.append(Character.toLowerCase(c));\n\
    \            } else {\n                sb.append(c);\n            }\n        }\n\
    \        return sb.toString();", "        StringBuilder sb = new StringBuilder();\n\
    \        char[] ch = s.toCharArray();\n        for (int i = 0; i < ch.length;\
    \ i++) {\n            if (Character.isLetter(ch[i]))\n                sb.append(Character.toLowerCase(ch[i]));\n\
    \            else\n                sb.append(ch[i]);\n        }\n        return\
    \ sb.toString();", '        return s.chars().mapToObj(c -> (char)(c)).collect(Collectors.joining());',
  "        if (s.isEmpty()) return s;\n        String[] parts = s.split(\"\");\n \
    \       Arrays.sort(parts);\n        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < parts.length; i++) {\n            char c = parts[i].toUpperCase().charAt(0);\n\
    \            if (Character.isLetter(c)) {\n                if (c == 'A') {\n \
    \                   sb.append(c);\n                } else {\n                \
    \    sb.append(Character.toLowerCase(c));\n                }\n            } else\
    \ {\n                sb.append(parts[i]);\n            }\n        }\n        return\
    \ sb.toString();", "        StringBuilder sb = new StringBuilder();\n        for(char\
    \ ch : s.toCharArray()) {\n            switch(ch) {\n                case 'a':\n\
    \                case 'b':\n                case 'c':\n                    sb.append(Character.toUpperCase(ch));\n\
    \                    break;\n                case 'A':\n                case 'B':\n\
    \                case 'C':\n                    sb.append(Character.toLowerCase(ch));\n\
    \                    break;\n                default:\n                    sb.append(ch);\n\
    \            }\n        }\n        return sb.toString();", "        char[] arr1\
    \ = s.toCharArray();\n        int len = arr1.length;\n        char t;\n      \
    \  if (len == 0) {\n            return \"\";\n        }\n        char[] arr2 =\
    \ new char[len];\n        int index = 0;\n        for (int i = 0; i < len - 1;\
    \ i++) {\n            t = arr1[i];\n            arr2[index] = t;\n           \
    \ index++;\n        }\n        return String.valueOf(arr2);", "        String\
    \ result = \"\";\n        for( int i = 0; i < s.length(); i++) {\n           \
    \ if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z') {\n                result = result\
    \ + Character.toUpperCase(s.charAt(i)) + s.substring(0,i+1);\n            }\n\
    \            else {\n                result = result + s.charAt(i) + s.substring(0,i+1);\n\
    \            }\n        }\n        return result;", "        System.out.println(s.toLowerCase());\n\
    \        return \"\";", "        String newString = \"\";\n        for(char c\
    \ : s.toCharArray()) {\n            if(!Character.isLetter(c)) {\n           \
    \     c = Character.toUpperCase(c);\n            } else{\n                c =\
    \ Character.toLowerCase(c);\n            }\n            newString += c;\n    \
    \    }\n        return newString;", '        return s;', "        StringBuilder\
    \ sb = new StringBuilder();\n        if(s.length() > 0) {\n            for(char\
    \ c: s.toCharArray()) {\n                if(Character.isLetter(c)) {\n       \
    \             sb.append(Character.toUpperCase(c));\n                } else {\n\
    \                    sb.append(c);\n                }\n            }\n       \
    \     return sb.toString();\n        }\n        return s;", "        int count\
    \ = 0;\n        boolean isFirst = true;\n        char[] chArray = s.toCharArray();\n\
    \        for(int i = 0; i < chArray.length; i++) {\n            char ch1 = chArray[i];\n\
    \            if (isFirst) {\n                isFirst = false;\n              \
    \  continue;\n            } else {\n                if (isLetter(ch1)) {\n   \
    \                 int temp = ch1 - 'a';\n                    temp = temp * 10\
    \ + (isLower(ch1) ? 9 : 0);\n                    count += temp;\n            \
    \    } else if (isLetter(chArray[i])) {\n                    count += chArray[i]\
    \ - 'a';\n                } else {\n                    count += chArray[i];\n\
    \                }\n            }\n        }\n        int reverseCount = (count\
    \ + count) / 2;\n        StringBuilder sb = new StringBuilder(s.length());\n \
    \       for(int i = s.length() - 1; i >= 0; i--) {\n            char ch2 = s.charAt(i);\n\
    \            if (isFirst) {\n                sb.append(ch2);\n               \
    \ isFirst = false;\n                continue;\n            } else {\n        \
    \        if (isLetter(ch2)) {\n                    int temp = ch2 - 'a';\n   \
    \                 temp = temp * 10 + (isLower(ch2) ? 9 : 0);\n               \
    \     reverseCount += temp;\n                } else if (isLetter(chArray[i]))\
    \ {\n                    reverseCount += chArray[i] - 'a';\n                }\
    \ else {\n                    reverseCount += chArray[i];\n                }\n\
    \            }\n        }\n        count = reverseCount;\n        if(count > 0)\
    \ {\n            sb.insert(0, (char) count);\n        }\n        return sb.toString();",
  '        return Arrays.stream(s.toCharArray()).map(c -> isLetter(c) ? Character.toUpperCase(c)
    : Character.toLowerCase(c)).collect(joining("")).reverse().orElse(s);', '        return
    s.length() <= 0 ? s : s.chars().map(c -> Character.isUpperCase(c) && c != 0x20
    || !Character.isUpperCase(c) ? Character.toLowerCase(c) : Character.toUpperCase(c)).collect(StringBuilder::new,
    StringBuilder::appendCodePoint, StringBuilder::append).toString();', "       \
    \ if (s == null || s.length() == 0)\n            return s;\n        char str[]\
    \ = s.toCharArray();\n        Arrays.sort(str);\n        StringBuilder strBuilder\
    \ = new StringBuilder();\n        for (char c : str) {\n            if (Character.isLetter(c))\n\
    \                strBuilder.append(Character.toUpperCase(c));\n            else\n\
    \                strBuilder.append(c);\n        }\n        return strBuilder.toString();",
  "        char[] ca = s.toCharArray();\n        Arrays.sort(ca);\n        StringBuilder\
    \ sb = new StringBuilder(ca.length);\n        for(int i = 0; i < ca.length; i++)\
    \ {\n            if (Character.isLetter(ca[i]))\n                ca[i] = Character.toUpperCase(ca[i]);\n\
    \            else\n                ca[i] = Character.toLowerCase(ca[i]);\n   \
    \     }\n        for(char c : ca) {\n            sb.append(c);\n        }\n  \
    \      return sb.toString();", "        char[] sArray = s.toCharArray();\n   \
    \     StringBuilder sBuilder = new StringBuilder();\n        for(int i = 0; i\
    \ < sArray.length; i++){\n            if(Character.isLetter(sArray[i])){\n   \
    \             char c = Character.toUpperCase(sArray[i]);\n                sArray[i]\
    \ = c;\n                sBuilder.append(sArray[i]);\n            } else {\n  \
    \              sBuilder.append(sArray[i]);\n            }\n        }\n       \
    \ return sBuilder.toString();", "        StringBuilder sb = new StringBuilder();\n\
    \        char[] chars = s.toCharArray();\n        boolean isUpper = true;\n  \
    \      boolean isLower = true;\n        for (char c : chars) {\n            if\
    \ (Character.isLetter(c)) {\n                isUpper = isUpper && Character.isUpperCase(c);\n\
    \                isLower = isLower && Character.isLowerCase(c);\n            }\n\
    \            else {\n                isUpper = isUpper && !Character.isUpperCase(c);\n\
    \                isLower = isLower && !Character.isLowerCase(c);\n           \
    \ }\n            if (isUpper && isLower && !isLower) {\n                sb.append(Character.toLowerCase(c));\n\
    \            }\n            else if (isUpper && !isLower) {\n                sb.append(Character.toUpperCase(c));\n\
    \            }\n            else if (!isUpper && isLower) {\n                sb.append(Character.toLowerCase(c));\n\
    \            }\n            else {\n                sb.append(c);\n          \
    \  }\n        }\n        return sb.toString();", "        if(s.length() > 0) {\n\
    \            String res = \"\";\n            char[] chArr = s.toCharArray();\n\
    \            for(int i = 0; i < chArr.length; i++) {\n                if(Character.isLetter(chArr[i]))\
    \ {\n                    //if(Character.isUpperCase(chArr[i])) \n            \
    \        //    chArr[i] = Character.toLowerCase(chArr[i]);\n                 \
    \   //else\n                    //    chArr[i] = Character.toUpperCase(chArr[i]);\n\
    \                    if(Character.isUpperCase(chArr[i])) \n                  \
    \      chArr[i] = Character.toLowerCase(chArr[i]);\n                    else\n\
    \                        chArr[i] = Character.toUpperCase(chArr[i]);\n       \
    \         }\n                else {\n                    if(chArr[i] != s.charAt(i))\n\
    \                        res = res + chArr[i];\n                }\n          \
    \  }\n            return res;\n        }\n        else\n            return s;",
  "        if(s.isEmpty()) return \"\";\n        if(!s.matches(\"[a-zA-Z]+\")) return\
    \ s;\n        return s.toLowerCase().chars().map(c -> Character.isUpperCase(c)\
    \ ? Character.toUpperCase(c) : Character.toLowerCase(c)).reduce((i, j) -> i +\
    \ j).toString() + s.toUpperCase().chars().map(c -> Character.isUpperCase(c) ?\
    \ Character.toLowerCase(c) : Character.toUpperCase(c)).reduce((i, j) -> i + j).toString();",
  "        StringBuilder sb = new StringBuilder();\n        char[] ca = s.toCharArray();\n\
    \        for(int i = 0; i < ca.length; i++) {\n            char c = ca[i];\n \
    \           if (Character.isLetter(c)) {\n                if (Character.isLowerCase(c))\
    \ {\n                    sb.append(Character.toUpperCase(c));\n              \
    \  } else {\n                    sb.append(Character.toLowerCase(c));\n      \
    \          }\n            } else {\n                sb.append(c);\n          \
    \  }\n        }\n        return sb.toString();", "        if(s.isEmpty()) {\n\
    \            return \"\";\n        }\n        char[] arr = s.toCharArray();\n\
    \        for(int i = 0; i < arr.length; i++) {\n            if(Character.isLetter(arr[i]))\
    \ {\n                if(Character.isLowerCase(arr[i])) {\n                   \
    \ arr[i] = Character.toUpperCase(arr[i]);\n                } else if(Character.isUpperCase(arr[i]))\
    \ {\n                    arr[i] = Character.toLowerCase(arr[i]);\n           \
    \     }\n            }\n        }\n        return new String(arr);", "       \
    \ if(s.length() == 0)\n            return \"\";\n        StringBuilder builder\
    \ = new StringBuilder();\n        for(char c : s.toCharArray()){\n           \
    \ if(c>='a' && c<='z'){\n                builder.append((char) (c - 32));\n  \
    \          }else{\n                builder.append(c);\n            }\n       \
    \ }\n        return builder.toString();", "        String result = s;\n      \
    \  for (int i = 0; i <= s.length(); i++) {\n            char c = s.charAt(i);\n\
    \            if (isLetter(c)) {\n                result = s.replace(c, c+\"\"\
    ).replaceAll(\"[^a-zA-Z]\", \"\");\n            }\n        }\n        \n     \
    \   return result;", "        char[] arr = s.toCharArray();\n        if (arr.length\
    \ == 0) return s;\n        Arrays.sort(arr);\n        StringBuilder sb = new StringBuilder();\n\
    \        for (char c : arr) {\n            if (Character.isLetter(c)) {\n    \
    \            switch (c) {\n                    case 'a': sb.append('A'); break;\n\
    \                    case 'b': sb.append('B'); break;\n                    case\
    \ 'c': sb.append('C'); break;\n                    case 'd': sb.append('D'); break;\n\
    \                    case 'e': sb.append('E'); break;\n                    case\
    \ 'f': sb.append('F'); break;\n                    case 'g': sb.append('G'); break;\n\
    \                    case 'h': sb.append('H'); break;\n                    case\
    \ 'i': sb.append('I'); break;\n                    case 'j': sb.append('J'); break;\n\
    \                    case 'k': sb.append('K'); break;\n                    case\
    \ 'l': sb.append('L'); break;\n                    case 'm': sb.append('M'); break;\n\
    \                    case 'n': sb.append('N'); break;\n                    case\
    \ 'o': sb.append('O'); break;\n                    case 'p': sb.append('P'); break;\n\
    \                    case 'q': sb.append('Q'); break;\n                    case\
    \ 'r': sb.append('R'); break;\n                    case 's': sb.append('S'); break;\n\
    \                    case 't': sb.append('T'); break;\n                    case\
    \ 'u': sb.append('U'); break;\n                    case 'v': sb.append('V'); break;\n\
    \                    case 'w': sb.append('W'); break;\n                    case\
    \ 'x': sb.append('X'); break;\n                    case 'y': sb.append('Y'); break;\n\
    \                    case 'z': sb.append('Z'); break;\n                }\n   \
    \         }\n            else {\n                sb.append(c);\n            }\n\
    \        }\n        return sb.toString();", "        // Write your code here\n\
    \        String[] split = s.split(\"(?<=\\\\P{L})\");\n        for(int i=0; i<split.length;\
    \ i++){\n            if(Character.isLetter(split[i].charAt(0))){\n           \
    \     String temp = Character.toLowerCase(split[i].charAt(0)) + split[i].substring(1);\n\
    \                split[i] = temp;\n            }\n        }\n        String str\
    \ = String.join(\"\", split);\n        return str;", "        StringBuilder sb\
    \ = new StringBuilder();\n        for (int i = 0, len = s.length(); i < len; i++)\
    \ {\n            char c = s.charAt(i);\n            String reverseStr = \"\";\n\
    \            switch(Character.toLowerCase(c)) {\n                case ' ':\n \
    \                   break;\n                case 'a':\n                    reverseStr\
    \ += Character.toUpperCase(c);\n                    break;\n                case\
    \ 'b':\n                    reverseStr += Character.toUpperCase(c);\n        \
    \            break;\n                case 'c':\n                    reverseStr\
    \ += Character.toUpperCase(c);\n                    break;\n                case\
    \ 'd':\n                    reverseStr += Character.toUpperCase(c);\n        \
    \            break;\n                case 'e':\n                    reverseStr\
    \ += Character.toUpperCase(c);\n                    break;\n                case\
    \ 'f':\n                    reverseStr += Character.toUpperCase(c);\n        \
    \            break;\n                case 'g':\n                    reverseStr\
    \ += Character.toUpperCase(c);\n                    break;\n                case\
    \ 'h':\n                    reverseStr += Character.toUpperCase(c);\n        \
    \            break;\n                case 'i':\n                    reverseStr\
    \ += Character.toUpperCase(c);\n                    break;\n                case\
    \ 'j':\n                    reverseStr += Character.toUpperCase(c);\n        \
    \            break;\n                case 'k':\n                    reverseStr\
    \ += Character.toUpperCase(c);\n                    break;\n                case\
    \ 'l':\n                    reverseStr += Character.toUpperCase(c);\n        \
    \            break;\n                case 'm':\n                    reverseStr\
    \ += Character.toUpperCase(c);\n                    break;\n                case\
    \ 'n':\n                    reverseStr += Character.toUpperCase(c);\n        \
    \            break;\n                case 'o':\n                    reverseStr\
    \ += Character.toUpperCase(c);\n                    break;\n                case\
    \ 'p':\n                    reverseStr += Character.toUpperCase(c);\n        \
    \            break;\n                case 'q':\n                    reverseStr\
    \ += Character.toUpperCase(c);\n                    break;\n                case\
    \ 'r':\n                    reverseStr += Character.toUpperCase(c);\n        \
    \            break;\n                case 's':\n                    reverseStr\
    \ += Character.toUpperCase(c);\n                    break;\n                case\
    \ 't':\n                    reverseStr += Character.toUpperCase(c);\n        \
    \            break;\n                case 'u':\n                    reverseStr\
    \ += Character.toUpperCase(c);\n                    break;\n                case\
    \ 'v':\n                    reverseStr += Character.toUpperCase(c);\n        \
    \            break;\n                case 'w':\n                    reverseStr\
    \ += Character.toUpperCase(c);\n                    break;\n                case\
    \ 'x':\n                    reverseStr += Character.toUpperCase(c);\n        \
    \            break;\n                case 'y':\n                    reverseStr\
    \ += Character.toUpperCase(c);\n                    break;\n                case\
    \ 'z':\n                    reverseStr += Character.toUpperCase(c);\n        \
    \            break;\n                default:\n                    reverseStr\
    \ += c;\n                    break;\n            }\n            sb.append(reverseStr);\n\
    \        }\n        return sb.toString();", "        System.out.println(s);\n\
    \        StringBuilder result = new StringBuilder();\n        for(int i=0;i<s.length();i++)\
    \ {\n            String str = s.substring(0,i);\n            if(str.matches(\"\
    [a-zA-Z]\")) {\n                char letter = str.charAt(0);\n               \
    \ str = Character.toUpperCase(letter) + str.substring(1);\n                str\
    \ = Character.toLowerCase(letter) + str.substring(1);\n            }\n       \
    \     result.append(str);\n        }\n        System.out.println(result);\n  \
    \      return result.toString();", "        \n        char[] chars = s.toCharArray();\n\
    \        Arrays.sort(chars);\n        StringBuilder builder = new StringBuilder();\n\
    \        for (int i = 0; i<chars.length; i++){\n            if (Character.isLetter(chars[i]))\
    \ {\n                builder.append(new StringBuilder(chars[i]).reverse());\n\
    \            } else {\n                builder.append(chars[i]);\n           \
    \ }\n        }\n        return builder.toString();", "        final int length\
    \ = s.length();\n        final char alpha = 'a';\n        final char alphaUpperCase\
    \ = Character.toUpperCase(alpha);\n        final char alphaLowerCase = Character.toLowerCase(alpha);\n\
    \        final StringBuilder result = new StringBuilder(length);\n        for\
    \ (final char c : s.toCharArray()) {\n            if (alpha <= c && c <= alphaUpperCase)\
    \ {\n                result.append(Character.toUpperCase(c));\n            } else\
    \ if (alpha <= c && c <= alphaLowerCase) {\n                result.append(Character.toLowerCase(c));\n\
    \            } else {\n                result.append(c);\n            }\n    \
    \    }\n        return result.toString();", "        if(s==null || s.length()==0)\n\
    \            return \"#\";\n        \n        for(int i=s.length()-1;i>=0;i--)\n\
    \        {\n            char c = s.charAt(i);\n            if(c>='A'&&c<='Z')\n\
    \            {\n                int index = s.getCharAt(i);\n                char\
    \ x = s.charAt(s.length()-i-1);\n                s = s.replaceFirst(x, Character.toString((char)\
    \ (index+(x-'A'))%26));\n            }\n            else if(c>='a'&&c<='z')\n\
    \            {\n                int index = s.getCharAt(i);\n                char\
    \ x = s.charAt(s.length()-i-1);\n                s = s.replaceFirst(x, Character.toString((char)\
    \ (index+(x-'a')+26)));\n            }\n        }\n        return s;", "     \
    \   boolean letterFlag = false;\n        boolean numberFlag = false;\n       \
    \ boolean specialFlag = false;\n        boolean spaceFlag = false;\n        for\
    \ (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n    \
    \        if (Character.isLetter(c)) {\n                letterFlag = true;\n  \
    \              specialFlag = false;\n                spaceFlag = false;\n    \
    \        } else if (Character.isSpaceChar(c)) {\n                spaceFlag = true;\n\
    \                specialFlag = false;\n                numberFlag = false;\n \
    \           } else if (Character.isDigit(c)) {\n                numberFlag = true;\n\
    \                specialFlag = false;\n                spaceFlag = false;\n  \
    \          } else if (Character.isAlphabetic(c)) {\n                letterFlag\
    \ = true;\n                specialFlag = false;\n                spaceFlag = false;\n\
    \            } else {\n                specialFlag = true;\n                numberFlag\
    \ = false;\n                spaceFlag = false;\n            }\n        }\n   \
    \     if (letterFlag) {\n            return s.toLowerCase().replaceAll(\"([a-zA-Z])\"\
    , \"$1 $2\");\n        } else if (numberFlag) {\n            return s.toLowerCase().replaceAll(\"\
    ([0-9])\", \"$1 $2\");\n        } else if (specialFlag) {\n            return\
    \ s.toLowerCase().replaceAll(\"([!@#$%^&*])\", \"$1 $2\");\n        } else if\
    \ (spaceFlag) {\n            return s.toLowerCase().replaceAll(\"([\\\\s])\",\
    \ \"$1 $2\");\n        } else {\n            return s.toLowerCase().replaceAll(\"\
    ([A-Z])\", \"$1 $2\");\n        }", "        // write your code here\n       \
    \ String result = \"\";\n        if (s.matches(\"[a-zA-Z]+\")) {\n           \
    \ char[] chars = s.toCharArray();\n            for (int i = 0; i < chars.length;\
    \ i++) {\n                if (Character.isLetter(chars[i])) {\n              \
    \      String letter = String.valueOf(Character.toUpperCase(chars[i]));\n    \
    \                chars[i] = letter;\n                    letter = String.valueOf(Character.toLowerCase(letter));\n\
    \                    chars[i] = letter;\n                }\n            }\n  \
    \          result = new String(chars);\n        }\n        return result.isEmpty()\
    \ ? s : result;", "        s = s.replaceAll(\"[^A-Za-z]\", \"\");\n        return\
    \ s.isEmpty() ? s : s.toLowerCase().chars()\n                .mapToObj(i -> (char)\
    \ i)\n                .collect(Collectors.joining());", "        char ch[] = s.toCharArray();\n\
    \        String result = \"\";\n        int l = s.length();\n        for(int i\
    \ = 0; i < l; i++) {\n            char c = ch[i];\n            if(Character.isLetter(c))\
    \ {\n                ch[i] = Character.toUpperCase(c);\n            } else if(!Character.isLetter(c))\
    \ {\n                ch[i] = Character.toLowerCase(c);\n            }\n      \
    \      result += ch[i];\n        }\n        return result;", "        String result\
    \ = \"\";\n        for(int i = 0; i < s.length(); i++) {\n            if(Character.isLetter(s.charAt(i)))\
    \ {\n                result = new StringBuffer(s).reverse().toString();\n    \
    \        }\n            else {\n                result = s.substring(0,i) + s.substring(i,s.length());\n\
    \            }\n        }\n        return result;", "        if (s.isEmpty())\
    \ {\n            return \"\";\n        }\n        char[] chars = s.toCharArray();\n\
    \        List<String> result = new ArrayList<String>();\n        for (char c :\
    \ chars) {\n            if (Character.isLetter(c)) {\n                if (Character.isUpperCase(c))\
    \ {\n                    c = Character.toUpperCase(c);\n                } else\
    \ {\n                    c = Character.toLowerCase(c);\n                }\n  \
    \          } else {\n                c = Character.toLowerCase(c);\n         \
    \   }\n            char[] newChars = {c};\n            result.add(new String(newChars));\n\
    \        }\n        return new String(result.toArray());", "        return s.chars()\n\
    \                .mapToObj(i -> ((char)i).charValue())\n                .map(s\
    \ -> s.toUpperCase(Locale.ROOT))\n                .collect(Collectors.joining(\"\
    \"));", "        HashSet<Character> lettersSet = new HashSet<>();\n        char[]\
    \ chars = s.toCharArray();\n        for (int i = 0; i < chars.length; i++) {\n\
    \            char c = chars[i];\n            if (Character.isLetter(c)) {\n  \
    \              lettersSet.add(c);\n            } else {\n                char\
    \ newChar = Character.toUpperCase(c);\n                lettersSet.add(newChar);\n\
    \            }\n        }\n        char[] res = new char[chars.length];\n    \
    \    int i = 0;\n        for (Character c : lettersSet) {\n            if (i <\
    \ chars.length) res[i++] = c;\n        }\n        return new String(res);", " \
    \       String result = \"\";\n        if (s == null || s.equals(\"\")) {\n  \
    \          return s;\n        }\n        for (int i = 0; i < s.length(); i++)\
    \ {\n            char c = s.charAt(i);\n            if (Character.isLetter(c))\
    \ {\n                result += Character.toUpperCase(c);\n            } else {\n\
    \                result += Character.toLowerCase(c);\n            }\n        }\n\
    \        return result;", "        // Write your code here\n        char[] ch\
    \ = s.toCharArray();\n        for(int i=0;i<ch.length;i++)\n        {\n      \
    \      if(ch[i]>=65 && ch[i]<=90)\n            {\n                ch[i]=ch[i]+32;\n\
    \            }\n            else if(ch[i]>=97 && ch[i]<=122)\n            {\n\
    \                ch[i]=ch[i]-32;\n            }\n        }\n        String r =\
    \ new String(ch);\n        return r;", "        String result = \"\";\n      \
    \  for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n\
    \            int n = Character.getNumericValue(c);\n            if (Character.isLetter(c))\n\
    \                result += (n >= 'a' && n <= 'z') ? Character.toUpperCase(c) :\
    \ Character.toLowerCase(c);\n            else\n                result += c;\n\
    \        }\n        return result;", "        // initialize variables\n      \
    \  String res = \"#\";\n        ArrayList<Character> charsList = new ArrayList<>();\n\
    \n        // add chars from string s to charsList list\n        for(char c : s.toCharArray())\
    \ {\n            charsList.add(c);\n        }\n\n        // check if string s\
    \ contains any letters\n        for(char c : charsList) {\n            if(c ==\
    \ '#' || c == '@' || c == '$' || c == '%' || c == '^' || c == '&' || c == '_'\
    \ || c == '-' || c == '>' || c == '<' || c == '/' || c == '\\\\' || c == '`' ||\
    \ c == '|' || c == '`') {\n                // if any letter is found, return res\
    \ with letter inversed and other letters unchanged\n                return res\
    \ + s.replace(c,Character.toString((char) Integer.valueOf(c) - 32));\n       \
    \     }\n            // else if string s has no letters, return res with all letters\
    \ unchanged\n            else {\n                return res + c;\n           \
    \ }\n        }\n\n        return res;", "        StringBuilder sb = new StringBuilder(s);\n\
    \        if (s.isEmpty())\n            return s;\n        for (int i = 0; i <\
    \ s.length(); i++) {\n            char c = s.charAt(i);\n            if (Character.isLetter(c))\
    \ {\n                sb.setCharAt(i, Character.toUpperCase(c));\n            \
    \    sb.setCharAt(i + 1, Character.toLowerCase(c));\n            } else {\n  \
    \              sb.setCharAt(i, c);\n            }\n        }\n        return sb.toString();",
  "        s = s.replaceAll(\"[^a-zA-Z]\", \"\");\n        s = s.toLowerCase();\n\
    \        String reverse = \"\";\n        for (int i = 0; i < s.length(); i++)\
    \ {\n            if (Character.isLetter(s.charAt(i))) {\n                reverse\
    \ += Character.toUpperCase(s.charAt(i));\n            }\n            else {\n\
    \                reverse += s.charAt(i);\n            }\n        }\n        return\
    \ reverse;", '        return s.replaceAll("[a-z]", "$0:$0$0");', "        char[]\
    \ chars = s.toCharArray();\n        int length = chars.length;\n        for (int\
    \ i = 0; i < length; i++) {\n            char c = chars[i];\n            if (Character.isLetter(c))\
    \ {\n                chars[i] = Character.toUpperCase(c);\n            } else\
    \ {\n                chars[i] = Character.toLowerCase(c);\n            }\n   \
    \     }\n        return new String(chars);", "        if(s.isEmpty()){\n     \
    \       return s;\n        }\n        StringBuilder stringBuilder = new StringBuilder(s);\n\
    \        for(int i=0;i<s.length();i++){\n            char currentChar = s.charAt(i);\n\
    \            if(Character.isLetter(currentChar)){\n                if(i == 0){\n\
    \                    stringBuilder.setCharAt(i,Character.toUpperCase(currentChar));\n\
    \                }else if(i == s.length()-1){\n                    stringBuilder.setCharAt(i,Character.toLowerCase(currentChar));\n\
    \                }else{\n                    stringBuilder.setCharAt(i,Character.toLowerCase(currentChar));\n\
    \                    stringBuilder.setCharAt(i-1,Character.toUpperCase(s.charAt(i-1)));\n\
    \                }\n            }else{\n                if(i == 0){\n        \
    \            stringBuilder.setCharAt(i,Character.toLowerCase(currentChar));\n\
    \                }else if(i == s.length()-1){\n                    stringBuilder.setCharAt(i,Character.toUpperCase(currentChar));\n\
    \                }else{\n                    stringBuilder.setCharAt(i,Character.toLowerCase(currentChar));\n\
    \                    stringBuilder.setCharAt(i-1,Character.toUpperCase(s.charAt(i-1)));\n\
    \                }\n            }\n        }\n        return stringBuilder.toString();",
  "        if (s.equals(\"#\"))\n            return \"#\";\n        char[] chars =\
    \ s.toCharArray();\n        Arrays.sort(chars);\n        StringBuilder builder\
    \ = new StringBuilder();\n        for (char c : chars)\n            if (Character.isLetter(c))\n\
    \                builder.append(Character.toUpperCase(c));\n            else\n\
    \                builder.append(c);\n        return builder.toString();", "  \
    \      Set<Character> sChars = s.chars().mapToObj(c -> (char) c).collect(Collectors.toSet());\n\
    \        if(sChars.isEmpty())\n        {\n            return s;\n        }\n \
    \       StringBuilder b = new StringBuilder(s);\n        for(char c : sChars)\n\
    \        {\n            char temp = b.charAt(b.length()-1);\n            b.setCharAt(b.length()-1,\
    \ (char)((((int)c) ^ (int)temp)));\n        }\n        return b.toString();",
  "        for(int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n\
    \            if(Character.isLetter(c)) {\n                String swap = s.substring(0,i)\
    \ + String.valueOf((char)(((int)c) - 32) + s.substring(i+1));\n              \
    \  swap = swap.toLowerCase();\n                swap = swap.toUpperCase();\n  \
    \              s = s.replaceAll(c,swap);\n            }\n        }\n        return\
    \ s.toLowerCase();", "        String result = \"\";\n        char[] chars = s.toCharArray();\n\
    \        for(char c : chars){\n            if(c=='A' || c=='a'){\n           \
    \     result +=Character.toUpperCase(c);\n            }else{\n               \
    \ result += Character.toLowerCase(c);\n            }\n        }\n        return\
    \ result.toString();", "        Map<Character, Integer> charCount = new HashMap<>();\n\
    \        for(int i = 0; i < s.length(); i++) {\n            char ch = s.charAt(i);\n\
    \            if(charCount.containsKey(ch)) {\n                charCount.put(ch,\
    \ charCount.get(ch) + 1);\n            } else {\n                charCount.put(ch,\
    \ 1);\n            }\n        }\n        List<Character> chars = new ArrayList<>(charCount.keySet());\n\
    \        Collections.sort(chars);\n        StringBuilder result = new StringBuilder();\n\
    \        for(char ch : chars) {\n            int count = charCount.get(ch);\n\
    \            if(count == 0) {\n                result.append(\"*\");\n       \
    \     } else {\n                result.append(\"(\").append(count).append(\")\"\
    );\n            }\n        }\n        return result.toString();", "        char[]\
    \ chars = s.toCharArray();\n        Arrays.sort(chars);\n        StringBuilder\
    \ sb = new StringBuilder();\n        for (char c : chars) {\n            Character\
    \ cUpper = Character.toUpperCase(c);\n            if (Character.isLetter(c)) {\n\
    \                sb.append(Character.toLowerCase(c));\n            } else {\n\
    \                sb.append(cUpper);\n            }\n        }\n        return\
    \ sb.toString();", "        Stack<Character> stack = new Stack<>();\n        for\
    \ (char c : s.toCharArray()) {\n            if (Character.isLetter(c)) {\n   \
    \             if (stack.peek() == 'Z') {\n                    stack.push((char)\
    \ (c - 'A'));\n                } else {\n                    stack.push((char)\
    \ (c + 1));\n                }\n            } else {\n                stack.push(c);\n\
    \            }\n        }\n        return stack.pop().toString();", "        String\
    \ result = \"\";\n        char[] arr = s.toCharArray();\n        for(char c :\
    \ arr){\n            if(Character.isLetter(c)){\n                String str =\
    \ String.valueOf((char)(c).toLowerCase());\n                result += str + String.valueOf((char)(c).toUpperCase());\n\
    \            }\n        }\n        \n        if(result.isEmpty()){\n         \
    \   result = s.toUpperCase();\n        }\n        return result;", "        if(s\
    \ == null || s.length() == 0) {\n            return \"\";\n        }\n       \
    \ StringBuilder result = new StringBuilder(s.length());\n        for(int i = 0;\
    \ i < s.length(); i++) {\n            if(Character.isLetter(s.charAt(i))) {\n\
    \                Character.toUpperCase(s.charAt(i));\n                Character.toLowerCase(s.charAt(i));\n\
    \            }\n            else {\n                s = s.substring(i);\n    \
    \            break;\n            }\n        }\n        result.append(s);\n   \
    \     return result.toString();", "        StringBuilder result = new StringBuilder();\n\
    \        for(int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n\
    \            if(Character.isLetter(c)) {\n                result.append(Character.toUpperCase(c));\n\
    \            } else {\n                result.append(c);\n            }\n    \
    \    }\n        return s.equals(\"\") ? result.toString() : result.toString().toLowerCase().replaceAll(\"\
    \ \", \"\");", "        // Write your code here\n        //Solution 1 \n     \
    \   Set<Character> letters = new HashSet<>();\n        for (int i = 0; i < s.length();\
    \ i++) {\n            char letter = s.charAt(i);\n            if (Character.isLetter(letter))\
    \ {\n                letters.add(letter);\n            } else {\n            \
    \    letters.remove(letter);\n            }\n        }\n        StringBuilder\
    \ resulted = new StringBuilder(s.length());\n        if (letters.isEmpty()) {\n\
    \            resulted.append(s);\n        } else {\n            resulted.append(s.toLowerCase());\n\
    \            for (Character letter : letters) {\n                resulted.append(Character.toUpperCase(letter));\n\
    \            }\n            resulted.append(s.toUpperCase());\n        }\n   \
    \     return resulted.toString();\n        //Solution 2\n        //if (letters.isEmpty())\
    \ {\n        //    return s;\n        //} else {\n        //    StringBuilder\
    \ resulted = new StringBuilder(s.length());\n        //    for (Character letter\
    \ : letters) {\n        //        resulted.append(Character.toUpperCase(letter));\n\
    \        //    }\n        //    resulted.append(s.toUpperCase());\n        //\
    \    resulted.append(s.toLowerCase());\n        //    return resulted.toString();\n\
    \        //}", "        List<Character> charList = Arrays.asList(s.toCharArray());\n\
    \        StringBuilder result = new StringBuilder();\n        for (Character c\
    \ : charList) {\n            if (Character.isLetter(c)) {\n                switch\
    \ (c) {\n                    case '.':\n                        result.append(c.toUpperCase());\n\
    \                        break;\n                    case '@':\n             \
    \           result.append(c.toLowerCase());\n                        break;\n\
    \                    case '#':\n                        result.append((char) (97\
    \ + Integer.parseInt(s.substring(1, s.length() - 1))));\n                    \
    \    break;\n                    case '$':\n                        result.append((char)\
    \ (91 + Integer.parseInt(s.substring(1, s.length() - 1))));\n                \
    \        break;\n                    case '%':\n                        result.append((char)\
    \ (93 + Integer.parseInt(s.substring(1, s.length() - 1))));\n                \
    \        break;\n                    case '^':\n                        result.append((char)\
    \ (127 + Integer.parseInt(s.substring(1, s.length() - 1))));\n               \
    \         break;\n                }\n            } else {\n                result.append(c);\n\
    \            }\n        }\n        return result.toString();", "        if (s.isEmpty())\
    \ {\n            return s;\n        }\n        StringBuilder sb = new StringBuilder(s);\n\
    \        Iterator<Character> it = sb.iterator();\n        if (it.hasNext()) {\n\
    \            char c = it.next();\n            it.remove();\n            while\
    \ (it.hasNext()) {\n                char tmp = it.next();\n                if\
    \ (Character.isLetter(tmp)) {\n                    int tmpUp = Character.getUpperCase(tmp);\n\
    \                    int tmpLow = Character.getLowerCase(tmp);\n             \
    \       int tmp1 = tmpUp;\n                    int tmp2 = tmpLow;\n          \
    \          if (tmp1 == tmpUp) {\n                        tmp1 = tmpUp;\n     \
    \                   tmp2 = tmpLow;\n                    }\n                  \
    \  sb.setCharAt(tmp1, c);\n                    sb.setCharAt(tmp2, tmp);\n    \
    \                c = tmp;\n                    it.remove();\n                }\n\
    \            }\n        }\n        return sb.toString();", "        StringBuilder\
    \ res = new StringBuilder();\n        StringBuilder sb = new StringBuilder();\n\
    \        char[] arr = s.toCharArray();\n        for (int i = 0; i < arr.length;\
    \ i++) {\n            char ch = arr[i];\n            if (Character.isLetter(ch))\
    \ {\n                sb = new StringBuilder(arr);\n                sb[i] = Character.toLowerCase(ch);\n\
    \                res.append(sb.toString());\n            } else {\n          \
    \      res.append(ch);\n            }\n        }\n        if (res.length() > 0)\n\
    \            res.append(arr);\n        return res.toString();", "        Map<Character,\
    \ Character> map = new HashMap<>();\n        for (int i = 0; i < s.length(); i++)\
    \ {\n            char c = s.charAt(i);\n            map.put(c, new Character(c));\n\
    \        }\n        String result = \"\";\n        for (Map.Entry<Character, Character>\
    \ entry : map.entrySet()) {\n            if (entry.getValue().equals(entry.getKey()))\
    \ continue;\n            result += entry.getValue().toString().toLowerCase()+entry.getKey().toString().toUpperCase();\n\
    \        }\n        return result;", "        StringBuilder result = new StringBuilder(s.length());\n\
    \        for(int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n\
    \            if(c == '-') result.append(\"-\");\n            else if (Character.isLetter(c))\
    \ {\n                result.append(Character.toUpperCase(c));\n            } else\
    \ {\n                result.append(c);\n            }\n        }\n        return\
    \ result.toString();", "        List<Character> charList = Arrays.stream(s.split(\"\
    \")).map(c -> Character.toUpperCase(c.charAt(0))).collect(Collectors.toList());\n\
    \        List<String> res = new ArrayList<>();\n        for(int i = 0; i < charList.size();\
    \ i++) {\n            if(charList.get(i).equals(\"\")) {\n                res.add(\"\
    \");\n            } else {\n                res.add(charList.get(i).toString()\
    \ + charList.get(i).substring(1).toLowerCase());\n            }\n        }\n \
    \       return res.stream().map(s -> s.equals(\"\") ? \"\" : s.substring(0, 1)).collect(Collectors.joining());",
  "        return s.chars()\n                 .map(i -> i % 2 == 0 ? (char) Character.toUpperCase((char)\
    \ i) : Character.toLowerCase((char) i))\n                 .collect(Collectors.joining());",
  "        s = s.replaceAll(\"[^A-Za-z]\", \"\");\n        StringBuilder sb = new\
    \ StringBuilder();\n        for(int i = 0; i < s.length(); i++) {\n          \
    \  if(s.charAt(i) >= 'A' && s.charAt(i) <= 'Z') {\n                sb.append(s.charAt(i)\
    \ - 'A' + 'a');\n            } else {\n                sb.append(s.charAt(i));\n\
    \            }\n        }\n        return sb.toString();", "        if(s.length()\
    \ == 0){\n            return s;\n        }\n        \n        if(Character.isLetter(s.charAt(0))){\n\
    \            return new StringBuilder(s).reverse().toString();\n        }else{\n\
    \            return s;\n        }\n        ", "        if (s.length() == 0) {\n\
    \            return s;\n        }\n        char[] arr = s.toCharArray();\n   \
    \     Arrays.sort(arr);\n        if (Character.isLetter(arr[0])) {\n         \
    \   return new StringBuilder()\n                .append(Character.toUpperCase(arr[0]))\n\
    \                .append(reverse(arr, 1))\n                .toString();\n    \
    \    } else {\n            return new StringBuilder()\n                .append(arr[0])\n\
    \                .append(reverse(arr, 1))\n                .toString();\n    \
    \    }", "        String result = \"\";\n        char[] charArray = s.toCharArray();\n\
    \        for(int i = 0; i < charArray.length; i++) {\n            char letter\
    \ = charArray[i];\n            if (Character.isLetter(letter)) {\n           \
    \     char upperCaseLetter = Character.toUpperCase(letter);\n                char\
    \ lowerCaseLetter = Character.toLowerCase(letter);\n                if (Character.isLetter(upperCaseLetter))\
    \ {\n                    result = upperCaseLetter + result;\n                }\
    \ else {\n                    result = lowerCaseLetter + result;\n           \
    \     }\n            } else {\n                result = letter + result;\n   \
    \         }\n        }\n        return result;", "        if (s.contains(\"@\"\
    ) && s.contains(\"@\")) {\n            String newString = \"\";\n            String\
    \ temp1 = s.replace(\"@\", \"\");\n            String temp2 = temp1.replace(\"\
    @\", \"\");\n            String temp3 = temp2.replace(\"@\", \"\");\n        \
    \    String temp4 = temp3.replace(\"@\", \"\");\n            String temp5 = temp4.replace(\"\
    @\", \"\");\n            String temp6 = temp5.replace(\"@\", \"\");\n        \
    \    String temp7 = temp6.replace(\"@\", \"\");\n            String temp8 = temp7.replace(\"\
    @\", \"\");\n            String temp9 = temp8.replace(\"@\", \"\");\n        \
    \    String temp10 = temp9.replace(\"@\", \"\");\n            String temp11 =\
    \ temp10.replace(\"@\", \"\");\n            String temp12 = temp11.replace(\"\
    @\", \"\");\n            String temp13 = temp12.replace(\"@\", \"\");\n      \
    \      String temp14 = temp13.replace(\"@\", \"\");\n            String temp15\
    \ = temp14.replace(\"@\", \"\");\n            String temp16 = temp15.replace(\"\
    @\", \"\");\n            String temp17 = temp16.replace(\"@\", \"\");\n      \
    \      String temp18 = temp17.replace(\"@\", \"\");\n            String temp19\
    \ = temp18.replace(\"@\", \"\");\n            String temp20 = temp19.replace(\"\
    @\", \"\");\n            String temp21 = temp20.replace(\"@\", \"\");\n      \
    \      String temp22 = temp21.replace(\"@\", \"\");\n            String temp23\
    \ = temp22.replace(\"@\", \"\");\n            String temp24 = temp23.replace(\"\
    @\", \"\");\n            String temp25 = temp24.replace(\"@\", \"\");\n      \
    \      String temp26 = temp25.replace(\"@\", \"\");\n            String temp27\
    \ = temp26.replace(\"@\", \"\");\n            String temp28 = temp27.replace(\"\
    @\", \"\");\n            String temp29 = temp28.replace(\"@\", \"\");\n      \
    \      String temp30 = temp29.replace(\"@\", \"\");\n            String temp31\
    \ = temp30.replace(\"@\", \"\");\n            String temp32 = temp31.replace(\"\
    @\", \"\");\n            String temp33 = temp32.replace(\"@\", \"\");\n      \
    \      String temp34 = temp33.replace(\"@\", \"\");\n            String temp35\
    \ = temp34.replace(\"@\", \"\");\n            String temp36 = temp35.replace(\"\
    @\", \"\");\n            String temp37 = temp36.replace(\"@\", \"\");\n      \
    \      String temp38 = temp37.replace(\"@\", \"\");\n            String temp39\
    \ = temp38.replace(\"@\", \"\");\n            String temp40 = temp39.replace(\"\
    @\", \"\");\n            String temp41 = temp40.replace(\"@\", \"\");\n      \
    \      String temp42 = temp41.replace(\"@\", \"\");\n            ", "        List<String>\
    \ result = new ArrayList<>();\n        int len = s.length();\n        for(int\
    \ i = 0 ; i < len ; ++i){\n            if(Character.isLetter(s.charAt(i))){\n\
    \                result.add(Character.toUpperCase(s.charAt(i)));\n           \
    \ }\n            else{\n                result.add(s.charAt(i));\n           \
    \ }\n        }\n        \n        StringBuilder sb = new StringBuilder();\n  \
    \      for(int i = 0 ; i < len ; ++i){\n            String curr = result.get(i);\n\
    \            if(result.isEmpty()){\n                result.add(curr);\n      \
    \      }\n            else{\n                if(i == 0){\n                   \
    \ sb.append(curr);\n                }\n                else{\n               \
    \     int len2 = curr.length();\n                    int index1 = result.indexOf(curr);\n\
    \                    if(index1 < 0){\n                        result.add(curr);\n\
    \                    }\n                    else{\n                        if(index1\
    \ < len2){\n                            sb.append(curr);\n                   \
    \         result.add(index1, len2);\n                        }\n             \
    \           else{\n                            result.add(index1);\n         \
    \                   sb.append(curr);\n                        }\n            \
    \        }\n                }\n            }\n        }\n        return sb.toString();",
  "        \n        //Your code goes here\n        String[] arr = s.split(\"\");\n\
    \        \n        \n        \n        return \"\";", "        //Solution Code\
    \ Here\n        boolean isDigit = false;\n        boolean isLower = false;\n \
    \       for (int i=0; i<s.length(); i++) {\n            isDigit = isDigit || (s.charAt(i)>='0'\
    \ && s.charAt(i)<='9');\n            isLower = isLower || (s.charAt(i)>='A' &&\
    \ s.charAt(i)<='Z');\n        }\n        if(isDigit && isLower) {\n          \
    \  String s1=s.substring(0,1).toUpperCase()+s.substring(1).toLowerCase();\n  \
    \          String s2=s.substring(0,1).toLowerCase()+s.substring(1).toUpperCase();\n\
    \            return s1.equals(s2) ? s1 : \"Not Available\";\n        }\n     \
    \   else return s;", "        StringBuilder string = new StringBuilder();\n  \
    \      for(char c : s.toCharArray()){\n            if(Character.isLetter(c)){\n\
    \                string.append(Character.toUpperCase(c));\n            }else {\n\
    \                string.append(c);\n            }\n        }\n        return string.reverse().toString();",
  "        String result = \"\";\n        for(int i = 0; i <s.length(); i++) {\n \
    \           int lower = s.toLowerCase().codePointAt(i);\n            int upper\
    \ = s.toUpperCase().codePointAt(i);\n            if(Character.isLetter(lower)\
    \ || Character.isLetter(upper)) {\n                result += (Character.isLetter(lower)\
    \ ? lower : upper) + \"\";\n            } else {\n                result += s.charAt(i);\n\
    \            }\n        }\n        return result.replaceAll(\"^..\", \"\");",
  "        char [] c = s.toCharArray();\n        for (int i = 0; i < s.length(); i++)\
    \ {\n            if (Character.isLetter(c[i])) {\n                boolean upper\
    \ = true;\n                if (Character.isUpperCase(c[i]))\n                \
    \    upper = false;\n                char [] uc = Character.toUpperCase(c[i]);\n\
    \                c = Arrays.copyOf(uc, uc.length);\n                if (upper)\n\
    \                    Arrays.parallelSetAll(c + 1, (index, value) -> value == c[index]\
    \ ? value : Character.toLowerCase(value));\n                else\n           \
    \         Arrays.parallelSetAll(c + 1, (index, value) -> value == c[index] ? value\
    \ : Character.toUpperCase(value));\n            }\n        }\n        return new\
    \ String(c);", "        char chars[] = s.toCharArray();\n        char resultChars[]\
    \ = new char[s.length()];\n        char[] lowerChars = chars.clone();\n      \
    \  Arrays.sort(lowerChars);\n        for (int i = 0; i < lowerChars.length; i++)\
    \ {\n            if (chars[i] == 'a') {\n                chars[i] = 'A';\n   \
    \         } else if (chars[i] == 'b') {\n                chars[i] = 'B';\n   \
    \         } else if (chars[i] == 'c') {\n                chars[i] = 'C';\n   \
    \         } else if (chars[i] == 'd') {\n                chars[i] = 'D';\n   \
    \         } else if (chars[i] == 'e') {\n                chars[i] = 'E';\n   \
    \         } else if (chars[i] == 'f') {\n                chars[i] = 'F';\n   \
    \         } else if (chars[i] == 'g') {\n                chars[i] = 'G';\n   \
    \         } else if (chars[i] == 'h') {\n                chars[i] = 'H';\n   \
    \         } else if (chars[i] == 'i') {\n                chars[i] = 'I';\n   \
    \         } else if (chars[i] == 'j') {\n                chars[i] = 'J';\n   \
    \         } else if (chars[i] == 'k') {\n                chars[i] = 'K';\n   \
    \         } else if (chars[i] == 'l') {\n                chars[i] = 'L';\n   \
    \         } else if (chars[i] == 'm') {\n                chars[i] = 'M';\n   \
    \         } else if (chars[i] == 'n') {\n                chars[i] = 'N';\n   \
    \         } else if (chars[i] == 'o') {\n                chars[i] = 'O';\n   \
    \         } else if (chars[i] == 'p') {\n                chars[i] = 'P';\n   \
    \         } else if (chars[i] == 'q') {\n                chars[i] = 'Q';\n   \
    \         } else if (chars[i] == 'r') {\n                chars[i] = 'R';\n   \
    \         } else if (chars[i] == 's') {\n                chars[i] = 'S';\n   \
    \         } else if (chars[i] == 't') {\n                chars[i] = 'T';\n   \
    \         } else if (chars[i] == 'u') {\n                chars[i] = 'U';\n   \
    \         } else if (chars[i] == 'v') {\n                chars[i] = 'V';\n   \
    \         } else if (chars[i] == 'w') {\n                chars[i] = 'W';\n   \
    \         } else if (chars[i] == 'x') {\n                chars[i] = 'X';\n   \
    \         } else if (chars[i] == 'y') {\n                chars[i] = 'Y';\n   \
    \         } else if (chars[i] == 'z') {\n                chars[i] = 'Z';\n   \
    \         }\n        }\n        char resultCharsReversed[] = Arrays.copyOfRange(lowerChars,\
    \ 0, lowerChars.length);\n        Arrays.sort(resultCharsReversed);\n        for\
    \ (int i = 0; i < resultCharsReversed.length; i++) {\n            if (resultCharsReversed[i]\
    \ == 'A') {\n                resultCharsReversed[i] = 'a';\n            } else\
    \ if (resultCharsReversed[i] == 'B') {\n                resultCharsReversed[i]\
    \ = 'b';\n            } else if (resultCharsReversed[i] == 'C') {\n          \
    \      resultChar", "        StringBuilder sb = new StringBuilder(s.length());\n\
    \        for(int i = 0; i < s.length(); i++) {\n            if(Character.isLetter(s.charAt(i)))\
    \ {\n                char c = s.charAt(i);\n                char upper = Character.toUpperCase(c);\n\
    \                char lower = Character.toLowerCase(c);\n                sb.append(String.valueOf(upper));\n\
    \                sb.append(String.valueOf(lower));\n            } else {\n   \
    \             sb.append(String.valueOf(s.charAt(i)));\n            }\n       \
    \ }\n        return sb.toString();", "        final char[] arr = s.toCharArray();\n\
    \        List<Character> arrChars = new ArrayList<Character>();\n        Arrays.stream(arr).forEach(c\
    \ -> {\n            arrChars.add(c);\n        });\n        arrChars.sort((a, b)\
    \ -> {\n            boolean isAcase = isLetter(a);\n            boolean isBcase\
    \ = isLetter(b);\n            return isAcase && !isBcase ? -1\n              \
    \      : isBcase && !isAcase ? 1\n                    : a.compareTo(b);\n    \
    \    });\n        return String.valueOf(arrChars.toArray(new Character[0]));",
  "        boolean letters = true;\n        String reverse = \"\";\n        \n   \
    \     for(int i = 0; i < s.length(); i++) {\n            char ch = s.charAt(i);\n\
    \            String capitalLetter = \"\";\n            if((ch >= 'a' && ch <=\
    \ 'z') || (ch >= 'A' && ch <= 'Z')) {\n                capitalLetter = Character.toString(ch);\n\
    \            } else if(Character.isLetter(ch)) {\n                letters = true;\n\
    \            }\n            \n            if(letters == true) {\n            \
    \    reverse = reverse + capitalLetter;\n            } else {\n              \
    \  reverse = reverse + ch;\n            }\n            letters = false;\n    \
    \    }\n        return reverse;", "        String reverse = \"\";\n        for(int\
    \ i = 0; i < s.length(); i++) {\n            if(Character.isLetter(s.charAt(i)))\
    \ {\n                reverse += Character.toLowerCase(s.charAt(i));\n        \
    \    }\n            else {\n                reverse += s.charAt(i);\n        \
    \    }\n        }\n        return reverse;", "        String[] chars = s.split(\"\
    \");\n        for(String str : chars){\n            if(!Character.isLetterOrDigit(str.charAt(0))){\n\
    \                char[] reverse = new char[str.length()];\n                for(int\
    \ i = 0; i < str.length(); i++){\n                    reverse[str.length()-1-i]\
    \ = str.charAt(i);\n                }\n                String reverseStr = new\
    \ String(reverse);\n                s = s.replace(str, reverseStr);\n        \
    \    }\n        }\n        return s;", "        if (s.length() == 0) {\n     \
    \       throw new IllegalArgumentException(\"Empty string.\");\n        }\n  \
    \      char[] array = s.toCharArray();\n        for (char c : array) {\n     \
    \       if (Character.isLetter(c)) {\n                switch (Character.toLowerCase(c))\
    \ {\n                    case 'a':\n                    case 'e':\n          \
    \          case 'i':\n                    case 'o':\n                    case\
    \ 'u':\n                    case 'x':\n                    case 'y':\n       \
    \             case 'z':\n                        c = Character.toUpperCase(c);\n\
    \                        break;\n                    case 'b':\n             \
    \       case 'c':\n                    case 'd':\n                    case 'f':\n\
    \                    case 'g':\n                    case 'h':\n              \
    \      case 'j':\n                    case 'k':\n                    case 'l':\n\
    \                    case 'm':\n                    case 'n':\n              \
    \      case 'p':\n                    case 'q':\n                    case 'r':\n\
    \                    case 's':\n                    case 't':\n              \
    \      case 'v':\n                    case 'w':\n                    case 'x':\n\
    \                    case 'z':\n                        c = Character.toLowerCase(c);\n\
    \                        break;\n                    default:\n              \
    \          c = Character.toLowerCase(c);\n                        break;\n   \
    \             }\n            }\n        }\n        return new String(array);",
  "        String result = \"\";\n        String s = \"\";\n        for (int i = 0;\
    \ i < s.length(); i++) {\n            char c = s.charAt(i);\n            int charCode\
    \ = s.charAt(i).toLowerCase().codePointAt(0);\n            if (isUpperOrLower(charCode))\
    \ {\n                s = String.valueOf((char) ((int) charCode - 65));\n     \
    \           result += s;\n            }\n            else {\n                s\
    \ = String.valueOf((char) ((int) charCode - 97));\n                result += s;\n\
    \            }\n        }\n        \n        return result;", "        // Write\
    \ your Java solution here\n        ArrayList<String> al = new ArrayList<String>();\n\
    \        boolean flag = false;\n        for(String str: s.split(\"\\\\s+\"))\n\
    \        {\n            if(str.matches(\"[a-zA-Z]+\"))\n            {\n      \
    \          al.add(str);\n                flag = true;\n            }\n       \
    \     else\n            {\n                flag = false;\n            }\n    \
    \    }\n        if(!flag)\n        {\n            al = new ArrayList<String>();\n\
    \        }\n        StringBuilder sb = new StringBuilder();\n        for(String\
    \ str: al)\n        {\n            if(str.length()>1)\n            {\n       \
    \         str = str.toLowerCase();\n                str = str.replaceAll(\"[a-z]\"\
    ,\"\").replaceAll(\"[A-Z]\",\"\");\n                str = str.substring(0, 1)\
    \ + str.substring(1).toLowerCase();\n                sb.append(str);\n       \
    \     }\n        }\n        return sb.toString();", "        // Your code here\n\
    \        ", "        if (s == null) return null;\n        if (s.isEmpty()) return\
    \ s;\n        // Create map from character code to char\n        Map<Character,\
    \ Character> map = new HashMap<>();\n        for (char c : s.toCharArray())\n\
    \            map.put((char) c, c);\n        // Use streams to get all character\
    \ codes of chars \n        // and then transform them into char values.\n    \
    \    List<Character> chars = s.codePoints().collect(Collectors.toList());\n  \
    \      // Iterate through all codepoints\n        for (char c : chars) {\n   \
    \         // Get actual char from map\n            char actual = map.get(c);\n\
    \            // Get char code of actual char\n            int code = actual.codePointAt(0);\n\
    \            // If actual char is a letter, \n            // change it to upper\
    \ case\n            if (Character.isLetter(actual)) {\n                // Convert\
    \ char to upper case\n                actual = (char) Character.toUpperCase(actual);\n\
    \            }\n            // Otherwise keep it\n            else {\n       \
    \         // Convert char to lower case\n                actual = (char) Character.toLowerCase(actual);\n\
    \            }\n            // Replace char code with new one\n            map.put(c,\
    \ actual);\n        }\n        // Transform map into String\n        return map.values().stream()\n\
    \            .map(String::valueOf)\n            .reduce(\"\", String::concat)\n\
    \            .orElse(s);", "        String[] a = s.split(\"\");\n        StringBuilder\
    \ builder = new StringBuilder();\n        for (String t : a) {\n            if\
    \ (Character.isLetter(t)) {\n                if (builder.length() > 0) {\n   \
    \                 builder.append(' ');\n                }\n                builder.append(Character.toUpperCase(t));\n\
    \            } else {\n                if (builder.length() > 0) {\n         \
    \           builder.append(' ');\n                }\n                builder.append(t);\n\
    \            }\n        }\n        return builder.toString();", "        Set<Character>\
    \ set = new HashSet<>();\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n\
    \            if (Character.isLetter(c)) {\n                c = Character.toLowerCase(c);\n\
    \                set.add(c);\n            }\n            else if (set.contains(c))\
    \ {\n                c = Character.toUpperCase(c);\n            }\n          \
    \  result.append(c);\n        }\n        return result.toString();", '        return
    s.replaceAll("(?i)[a-z]", "\u$0") + s.replaceAll("(?i)[A-Z]", "\u$0");', "   \
    \     int len = s.length();\n        if (len == 0) {\n            return s;\n\
    \        }\n        // char c = s.charAt(0); // first char\n        // String\
    \ upper = Character.toUpperCase(c); // upper char\n        // String lower = Character.toLowerCase(c);\
    \ // lower char\n        char c = s.charAt(0); // first char\n        // String\
    \ upper = Character.toUpperCase(c); // upper char\n        // String lower = Character.toLowerCase(c);\
    \ // lower char\n        char upper = Character.toUpperCase(c); // upper char\n\
    \        char lower = Character.toLowerCase(c); // lower char\n        // String\
    \ upper = s.charAt(0).toUpperCase(); // upper char\n        // String lower =\
    \ s.charAt(0).toLowerCase(); // lower char\n        \n        char[] arr = s.toCharArray();\n\
    \        \n        // String upper = s.charAt(0).toUpperCase();\n        // String\
    \ lower = s.charAt(0).toLowerCase();\n        \n        int upperCount = 0, lowerCount\
    \ = 0;\n        for (int i = 0; i < len; i++){\n            char ch = arr[i];\n\
    \            \n            if (Character.isLetter(ch)) {\n                \n \
    \               if (upperCount > 0) {\n                    upperCount--;\n   \
    \             } else if (lowerCount > 0) {\n                    lowerCount--;\n\
    \                } else {\n                    upperCount++;\n               \
    \     lowerCount++;\n                }\n                \n                if (upperCount\
    \ == 0) {\n                    upper = Character.toUpperCase(ch);\n          \
    \      } else if (lowerCount == 0) {\n                    lower = Character.toLowerCase(ch);\n\
    \                }\n            }\n        }\n        \n        StringBuilder\
    \ sb = new StringBuilder();\n        for (int i = 0; i < len; i++){\n        \
    \    char ch = arr[i];\n            \n            if (Character.isLetter(ch))\
    \ {\n                \n                if (upperCount > 0) {\n               \
    \     upperCount--;\n                } else if (lowerCount > 0) {\n          \
    \          lowerCount--;\n                } else {\n                    upperCount++;\n\
    \                    lowerCount++;\n                }\n                \n    \
    \            if (upperCount == 0) {\n                    upper = Character.toUpperCase(ch);\n\
    \                } else if (lowerCount == 0) {\n                    lower = Character.toLowerCase(ch);\n\
    \                }\n                \n                sb.append(upper);\n    \
    \            upper = lower;\n                lower = upper;\n            }\n \
    \       }\n        return sb.toString();", "        if (s == null || s.length()\
    \ == 0)\n            return s;\n        HashMap<Character, Character> map = new\
    \ HashMap<>();\n        for(char c : s.toCharArray()){\n            map.put(c,\
    \ map.getOrDefault(c, c).caseCompareTo(Character.toUpperCase(c)));\n        }\n\
    \        String result = s.replaceAll(\"[a-z]\", c -> map.get(c));\n        \n\
    \        while(!map.isEmpty()){\n            int i = map.keySet().iterator().nextInt()\
    \ - 1;\n            map.remove(map.keySet().iterator().next());\n            result\
    \ = result.replace(map.keySet().iterator().next(), map.get(map.keySet().iterator().next()));\n\
    \        }\n        return result;", '        return "";', "        // Your code\
    \ goes here\n        Set<String> set=new HashSet<String>();\n        for (char\
    \ c: s.toCharArray()) {\n            int index=0;\n            int len=s.length();\n\
    \            char first=s.charAt(0);\n            if(Character.isLetter(first))\n\
    \            {\n                c=Character.toUpperCase(c);\n                len=len-1;\n\
    \            }\n            while (index<len){\n                if (Character.isLetter(c))\n\
    \                {\n                    set.add(s.substring(index,len+1));\n \
    \                   c=Character.toLowerCase(c);\n                    len=len-1;\n\
    \                }\n                else{\n                    c=s.charAt(index++);\n\
    \                    len=len-1;\n                }\n            }\n        }\n\
    \        StringBuffer sb=new StringBuffer();\n        for (String str: set){\n\
    \            sb=sb.append(str).reverse().toString()+\"\\n\";\n        }\n    \
    \    return sb.toString();", "        String str = new String(s);\n        for\
    \ (int i = 0; i < s.length(); i++) {\n            if (str.charAt(i) >= 'a' &&\
    \ str.charAt(i) <= 'z') {\n                char c = str.charAt(i);\n         \
    \       str = str.replaceFirst(String.valueOf(c), String.valueOf((char) (c - ((int)\
    \ c % 32))));\n            } else if (str.charAt(i) >= 'A' && str.charAt(i) <=\
    \ 'Z') {\n                char c = str.charAt(i);\n                str = str.replaceFirst(String.valueOf(c),\
    \ String.valueOf((char) (c + 32 - ((int) c % 32))));\n            } else {\n \
    \               str = str.replaceFirst(str.charAt(i), String.valueOf(str.charAt(i)));\n\
    \            }\n        }\n        return str;", "        Stack<Character> stack\
    \ = new Stack<>();\n        for(int i = 0; i < s.length(); i++) {\n          \
    \  char c = s.charAt(i);\n            if(c == '#') {\n                if(!stack.isEmpty())\
    \ {\n                    char c2 = stack.pop();\n                    if(c2 ==\
    \ '@') {\n                        if(!stack.isEmpty()) {\n                   \
    \         char d = stack.pop();\n                            if(c2 == '#') {\n\
    \                                stack.push(d + '@');\n                      \
    \      } else {\n                                stack.push(d + '#');\n      \
    \                      }\n                        } else {\n                 \
    \           stack.push('@');\n                        }\n                    }\
    \ else {\n                        stack.push('#');\n                    }\n  \
    \              } else {\n                    stack.push('#');\n              \
    \  }\n            } else {\n                stack.push(c);\n            }\n  \
    \      }\n\n        StringBuilder sb = new StringBuilder();\n        while(!stack.isEmpty())\
    \ {\n            char c = stack.pop();\n            sb.append(c);\n        }\n\
    \n        return sb.toString();", "        boolean lower = true;\n        for(int\
    \ i = 0; i < s.length(); i++){\n            if(lower = s.charAt(i) >= 'a' && s.charAt(i)\
    \ <= 'z'){\n                s = s.replaceFirst(String.valueOf(s.charAt(i)),\n\
    \                        s.substring(0,i)+String.valueOf(s.charAt(i))+s.substring(i+1));\n\
    \                lower = false;\n            }\n        }\n        return s;",
  "        if (s.isEmpty()) {\n            return s;\n        }\n        char[] arr\
    \ = s.toCharArray();\n        for (int i = 0; i < arr.length; i++) {\n       \
    \     if (Character.isLetter(arr[i])) {\n                char temp = arr[i];\n\
    \                arr[i] = Character.toUpperCase(arr[i]);\n                arr[i]\
    \ = temp;\n            }\n        }\n        return String.valueOf(arr);", " \
    \       StringBuilder sb = new StringBuilder();\n        for(int i = 0; i < s.length();\
    \ i++) {\n            char c = s.charAt(i);\n            if(Character.isLetter(c))\
    \ {\n                if(Character.isUpperCase(c)) {\n                    sb.append(Character.toLowerCase(c));\n\
    \                } else {\n                    sb.append(Character.toUpperCase(c));\n\
    \                }\n            } else {\n                sb.append(c);\n    \
    \        }\n        }\n        return sb.toString();", "        String[] arr1\
    \ = s.split(\"\");\n        StringBuilder sb = new StringBuilder();\n        for\
    \ (int i = 0; i < arr1.length; i++) {\n            if (arr1[i].matches(\"[a-zA-Z]+\"\
    )) {\n                String temp = new StringBuilder().append(Character.toLowerCase(arr1[i])).reverse().toString();\n\
    \                sb.append(Character.toLowerCase(arr1[i])).append(temp);\n   \
    \         } else {\n                sb.append(arr1[i]);\n            }\n     \
    \   }\n        return sb.toString();", "        \n        //Write your code here\n\
    \        \n        String answer = null;\n        for (char c : s.toCharArray())\
    \ {\n            if (Character.isLetter(c)) {\n                answer = Character.toUpperCase(c);\n\
    \            } else {\n                answer = Character.toLowerCase(c);\n  \
    \          }\n        }\n        answer = reverse(answer);\n        return answer;",
  "        String[] chars = s.split(\"(?!^)\");\n        String result = \"\";\n \
    \       for (String c: chars) {\n            if (Character.isLetter(c)) {\n  \
    \              result = c.toUpperCase() + result;\n            } else {\n    \
    \            result = c + result;\n            }\n        }\n        return result;",
  '        return solve(s, new TreeMap<>());', "        if(s.isEmpty()) {\n      \
    \      return s;\n        }\n        char[] chars = s.toCharArray();\n       \
    \ char char1 = Character.toLowerCase(chars[0]);\n        char char2 = Character.toUpperCase(char1);\n\
    \        String result = \"\";\n        for(int i = 1; i < chars.length; i = i\
    \ + 2) {\n            if(chars[i] == char1) {\n                result += char2;\n\
    \            } else if(chars[i] == char2) {\n                result += char1;\n\
    \            } else {\n                result += chars[i];\n            }\n  \
    \      }\n        return result;", "        if(s == null) {\n            return\
    \ null;\n        }\n        if(s.isEmpty()) {\n            return \"\";\n    \
    \    }\n        Map<Character, String> map = new HashMap<>();\n        for(int\
    \ i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n         \
    \   if(c == '#') {\n                String temp = map.get(s.charAt(i+1));\n  \
    \              if(temp != null) {\n                    String key = Character.toString(s.charAt(i+1));\n\
    \                    map.put(key, temp);\n                }\n            }\n \
    \           map.put(c, Character.toString(c));\n        }\n        return map.values().stream().collect(Collectors.joining(\"\
    \"));", "        // Write your code here\n        String result = \"\";\n    \
    \    for(int i=0;i<s.length();i++){\n            char c = s.charAt(i);\n     \
    \       if(c>=65&&c<=90){\n                c = String.valueOf((int)(c+32));\n\
    \            }\n            result += c;\n        }\n        return result;",
  "        StringBuilder sb = new StringBuilder(s);\n        char[] arr = s.toCharArray();\n\
    \        if (arr == null || arr.length == 0) return null;\n        Arrays.sort(arr);\n\
    \        for (int i = 0; i < arr.length; i++) {\n            char c = arr[i];\n\
    \            if (Character.isLetter(c)) {\n                if (Character.isUpperCase(c))\
    \ {\n                    sb.setCharAt(i, Character.toLowerCase(c));\n        \
    \        } else {\n                    sb.setCharAt(i, Character.toUpperCase(c));\n\
    \                }\n            } else {\n                sb.setCharAt(i, c);\n\
    \            }\n        }\n        return sb.toString();", "        // code here\n\
    \        s = s.replaceAll(\"[A-z]\",\"\").replaceAll(\"[^a-zA-Z]\",\"\");\n  \
    \      if(s.isEmpty())\n            return s;\n        char[] ch = new char[s.length()];\n\
    \        for(int i = 0;i<ch.length;i++)\n            ch[i] = s.charAt(i);\n  \
    \      StringBuilder sb = new StringBuilder();\n        for(int i=0;i<ch.length;i++)\
    \ {\n            if(ch[i]>='a' && ch[i]<='z'){\n                ch[i] = (char)ch[i]-'a'\
    \ + 'A';\n            }\n            sb.append(ch[i]);\n        }\n        return\
    \ sb.toString();", "        if (s.length() == 0) {\n            return \"\";\n\
    \        }\n        char[] ca = s.toCharArray();\n        Arrays.sort(ca, (a,\
    \ b) -> a.compareTo(b));\n        if (Character.toUpperCase(ca[0]) == ca[0]) {\n\
    \            ca[0] = Character.toUpperCase(ca[0]);\n        }\n        return\
    \ String.valueOf(ca);", "        // Write your code here\n        \n        return\
    \ \"\";", "        if (s == null || s.isEmpty()) {\n            return s;\n  \
    \      }\n\n        // convert all chars to lower case\n        char[] chars =\
    \ s.toCharArray();\n        Arrays.sort(chars);\n        StringBuilder sb = new\
    \ StringBuilder();\n        for (char c : chars) {\n            String str = String.valueOf(c);\n\
    \            if (isLetter(c)) {\n                // convert char to uppercase\
    \ if its an upper case\n                String upperCase = new StringBuilder(str).reverse().toString();\n\
    \                sb.append(upperCase);\n            } else {\n               \
    \ // otherwise keep it as it\n                sb.append(str);\n            }\n\
    \        }\n\n        // remove all empty chars\n        while (sb.length() >\
    \ 0 && sb.charAt(0) == ' ') {\n            sb.deleteCharAt(0);\n        }\n  \
    \      return sb.toString();", "        char[] chars = s.toCharArray();\n    \
    \    char[] reversedChars = new char[chars.length];\n        // String result\
    \ = \"\";\n        for (int i = 0; i < chars.length; i++) {\n            if (Character.isLetter(chars[i]))\
    \ {\n                chars[i] = Character.toUpperCase(chars[i]);\n           \
    \     reversedChars[chars.length - (i + 1)] = Character.toLowerCase(chars[i]);\n\
    \            } else {\n                reversedChars[chars.length - (i + 1)] =\
    \ chars[i];\n            }\n        }\n        String result = new String(reversedChars);\n\
    \        return result;", "        String result = \"\";\n        StringBuilder\
    \ stringBuilder = new StringBuilder();\n        char[] letters = s.toCharArray();\n\
    \        boolean isFirst = true;\n        for (int i = 0; i < letters.length;\
    \ ++i) {\n            if (isFirst) {\n                stringBuilder.append(letters[i]);\n\
    \                isFirst = false;\n            } else {\n                boolean\
    \ letterFound = false;\n                for (int j = 0; j < letters.length; ++j)\
    \ {\n                    if (i == j) {\n                        letterFound =\
    \ true;\n                        break;\n                    }\n             \
    \       if (!letterFound && letters[j] == letters[i]) {\n                    \
    \    stringBuilder.append(letters[j]);\n                        letterFound =\
    \ true;\n                        break;\n                    }\n             \
    \   }\n            }\n        }\n        result = stringBuilder.toString();\n\
    \        return result;", "        String[] strArr = s.split(\"\");\n        strArr\
    \ = strArr.stream().map( s -> {\n            if( s.matches(\"[a-zA-Z]+\") ){\n\
    \                return Character.toLowerCase(s.charAt(0));\n            }else\
    \ if( s.matches(\"[0-9]+\") ){\n                return Character.toUpperCase(s.charAt(0));\n\
    \            }else{\n                return s;\n            }\n        }).collect(Collectors.toList()).stream().collect(Collectors.toList());\n\
    \        String result = \"\";\n        for( String str: strArr ){\n         \
    \   result += str;\n        }\n        result = result.replaceAll(\"[a-zA-Z]+\"\
    , \"*\");\n        return result;", "       if(s.length() == 0) {\n          return\
    \ s;\n       }\n       if(s.matches(\"[a-zA-Z]+\")) {\n          return s.toLowerCase().replaceAll(\"\
    [a-zA-Z]\", m -> Character.toUpperCase(m.charAt(0)) + m.group());\n       }\n\
    \       return s.toLowerCase().replaceAll(\"[a-zA-Z]+\", m -> m.group());", " \
    \       String result = \"\";\n        for( int i = 0; i < s.length(); i++ ) {\n\
    \            if( s.charAt( i ) >  122 && s.charAt( i ) <  91 ) {\n           \
    \     result += s.substring( i, i + 1 ) + s.substring( i + 1, i + 2 );\n     \
    \           i += 2;\n            }\n            if( s.charAt( i ) >  61 && s.charAt(\
    \ i ) <  96 ) {\n                result += s.substring( i, i + 1 ) + s.substring(\
    \ i + 1, i + 2 );\n                i += 2;\n            }\n            result\
    \ += s.charAt( i );\n        }\n        return result;", "        char[] cs =\
    \ s.toCharArray();\n        Arrays.stream(cs).map(c -> {\n            if(c>='a'\
    \ && c<='z'){\n                c = ((c-'a')+26);\n            }else if(c>='A'\
    \ && c<='Z'){\n                c = ((c-'A')+26);\n            }\n            return\
    \ c;\n        }).forEach(c -> {\n            c = (char)c;\n            if(c>='a'\
    \ && c<='z'){\n                c = ((c-'a')+26);\n            }else if(c>='A'\
    \ && c<='Z'){\n                c = ((c-'A')+26);\n            }\n        });\n\
    \        return new String(cs);", "        char[] ch = new char[s.length()];\n\
    \        for (int i = 0; i < s.length(); i++) {\n            ch[i] = s.charAt(i);\n\
    \        }\n        Arrays.sort(ch);\n        String res = \"\";\n        for\
    \ (int i = 0; i < ch.length; i++) {\n            if (Character.isLetter(ch[i]))\
    \ {\n                String upperCase = new StringBuilder(ch[i]).reverse().toString();\n\
    \                String lowerCase = new StringBuilder(ch[i].toLowerCase()).reverse().toString();\n\
    \                String mixedCase = new StringBuilder(ch[i].toUpperCase()).reverse().toString();\n\
    \                res = res + lowerCase;\n                if (upperCase.equals(mixedCase))\
    \ {\n                    res = res + upperCase;\n                }\n         \
    \   } else {\n                res = res + ch[i];\n            }\n        }\n \
    \       System.out.println(res);\n        return res;", "        char c;\n   \
    \     char[] arr = s.toCharArray();\n        StringBuilder sb = new StringBuilder();\n\
    \        boolean upper = false;\n        boolean isFirstLetter = true;\n     \
    \   for(int i = 0; i < arr.length; i++) {\n            if(Character.isLetter(arr[i]))\
    \ {\n                upper = !upper;\n            }\n            if(upper) {\n\
    \                c = Character.toUpperCase(arr[i]);\n            } else {\n  \
    \              c = arr[i];\n            }\n            if(isFirstLetter) {\n \
    \               sb.append(c);\n                isFirstLetter = false;\n      \
    \      } else {\n                sb.append(Character.toLowerCase(c));\n      \
    \      }\n        }\n        return sb.toString();", "        Set<Character> letters\
    \ = new HashSet<Character>(Arrays.asList('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h',\
    \ 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x',\
    \ 'y', 'z'));\n        char[] newString = new char[s.length()];\n        int i\
    \ = 0;\n        for (char c : s.toCharArray()) {\n            if (letters.contains(c))\
    \ {\n                newString[i] = (char) (letters.indexOf(c) + 32);\n      \
    \      } else {\n                newString[i] = c;\n            }\n          \
    \  ++i;\n        }\n        String newString2 = new String(newString);\n     \
    \   return newString2.replaceAll(\"[0-9]\", \"\");", "        List<String> str\
    \ = new ArrayList<>();\n        String result = \"\";\n        for (int i = 0;\
    \ i < s.length(); i++) {\n            if (s.charAt(i) > 'z') {\n             \
    \   str.add((char) (s.charAt(i) - 32));\n            } else {\n              \
    \  str.add(s.charAt(i));\n            }\n        }\n        Collections.reverse(str);\n\
    \        for (String str2 : str) {\n            result += str2;\n        }\n \
    \       return result;", "        StringBuilder sb = new StringBuilder();\n  \
    \      for(int i = 0; i < s.length(); i++){\n            char c = s.charAt(i);\n\
    \            if (isLetter(c)) {\n                if (Character.toLowerCase(c)\
    \ == c) {\n                    sb.append(Character.toUpperCase(c));\n        \
    \        } else {\n                    sb.append(Character.toLowerCase(c));\n\
    \                }\n            } else {\n                sb.append(c);\n    \
    \        }\n        }\n        return sb.toString();", "        char[] ch = new\
    \ char[s.length()];\n        for (int i = 0; i < s.length(); i++) {\n        \
    \    ch[i] = s.charAt(i);\n        }\n        Map<Character, Character> reverseMap\
    \ = new HashMap<>();\n        for (char c: ch) {\n            reverseMap.put(c,\
    \ c);\n        }\n        for (char c: ch) {\n            if (Character.isLetter(c))\
    \ {\n                char lower = Character.toLowerCase(c);\n                char\
    \ upper = Character.toUpperCase(c);\n                if (reverseMap.containsKey(lower))\
    \ {\n                    reverseMap.put(upper, reverseMap.get(lower));\n     \
    \               reverseMap.remove(lower);\n                }\n               \
    \ if (reverseMap.containsKey(upper)) {\n                    reverseMap.put(lower,\
    \ reverseMap.get(upper));\n                    reverseMap.remove(upper);\n   \
    \             }\n            }\n        }\n        StringBuilder sb = new StringBuilder();\n\
    \        for (Map.Entry<Character, Character> e: reverseMap.entrySet()) {\n  \
    \          sb.append(e.getValue());\n            sb.append(e.getKey());\n    \
    \    }\n        return sb.toString();", "        StringBuilder reversedString\
    \ = new StringBuilder();\n        for (int i = 0; i < s.length(); i++) {\n   \
    \         char character = s.charAt(i);\n            int upperCaseOrLowerCase\
    \ = (int) Character.toUpperCase(character);\n            if (upperCaseOrLowerCase\
    \ == Character.toLowerCase(character)) {\n                reversedString.append(upperCaseOrLowerCase);\n\
    \            } else {\n                reversedString.append(character);\n   \
    \         }\n        }\n        return reversedString.toString();", "        if(s.length()\
    \ > 0) {\n            char[] chars = s.toCharArray();\n            Arrays.stream(chars).filter(x\
    \ -> x == ' ').forEach(x -> {\n                char[] arr = new char[chars.length];\n\
    \                for(int i = 0; i < chars.length; i++) {\n                   \
    \ arr[i] = chars[i].toUpperCase();\n                    if(i != chars.length -\
    \ 1) {\n                        arr[i+1] = chars[i].toLowerCase();\n         \
    \           }\n                }\n                s = new String(arr);\n     \
    \       });\n            s = new String(Arrays.copyOfRange(s.toCharArray(), 0,\
    \ s.length()));\n        }\n        return s;", "        if (s.isEmpty()) {\n\
    \            return \"\";\n        }\n        int len = s.length();\n        char[]\
    \ ch = s.toCharArray();\n        for (int i = 0; i < len; i++) {\n           \
    \ if (Character.isLetter(ch[i])) {\n                String result = \"\";\n  \
    \              for (int j = i; j < len; j++) {\n                    char t = ch[j];\n\
    \                    if (Character.isLowerCase(t)) {\n                       \
    \ result += Character.toUpperCase(t);\n                    } else {\n        \
    \                result += t;\n                    }\n                }\n    \
    \            ch[i] = result;\n            } else {\n                String result\
    \ = \"\";\n                for (int j = i; j < len; j++) {\n                 \
    \   char t = ch[j];\n                    result += t;\n                }\n   \
    \             ch[i] = result;\n            }\n        }\n        StringBuilder\
    \ builder = new StringBuilder();\n        for (int i = 0; i < len; i++) {\n  \
    \          builder.append(ch[i]);\n        }\n        return builder.toString();",
  "        char arr[] = s.toCharArray();\n        String str = \"\";\n\n        for(int\
    \ i=0; i<arr.length; i++) {\n            if(Character.isLetter(arr[i])) {\n  \
    \              int len = Character.toUpperCase(arr[i]) - Character.toLowerCase(arr[i]);\n\
    \                str = str.substring(0, i) + String.valueOf(len) + str.substring(i+1);\n\
    \            } else {\n                str = str.substring(0, i) + arr[i] + str.substring(i+1);\n\
    \            }\n        }\n        return str;", "        String[] arr = s.split(\"\
    \");\n        int len = arr.length;\n        Arrays.fill(arr, Character.toLowerCase(arr[0]));\n\
    \        Arrays.fill(arr, Character.toUpperCase(arr[0]));\n        return len\
    \ == 0 ? s : arr.reverse().toString();", "        if (s.isEmpty()) return \"\"\
    ;\n\n        HashMap<Character, Character> map = new HashMap<>();\n        map.put('a','A');\n\
    \        map.put('b','B');\n        map.put('c','C');\n        map.put('d','D');\n\
    \        map.put('e','E');\n        map.put('f','F');\n        map.put('g','G');\n\
    \        map.put('h','H');\n        map.put('i','I');\n        map.put('j','J');\n\
    \        map.put('k','K');\n        map.put('l','L');\n        map.put('m','M');\n\
    \        map.put('n','N');\n        map.put('o','O');\n        map.put('p','P');\n\
    \        map.put('q','Q');\n        map.put('r','R');\n        map.put('s','S');\n\
    \        map.put('t','T');\n        map.put('u','U');\n        map.put('v','V');\n\
    \        map.put('w','W');\n        map.put('x','X');\n        map.put('y','Y');\n\
    \        map.put('z','Z');\n        map.put('.','.');\n        map.put(',',',');\n\
    \        map.put('?','?');\n\n        char[] chars = s.toCharArray();\n      \
    \  for (int i = 0; i < chars.length; ++i) {\n            if (map.containsKey(chars[i]))\
    \ {\n                chars[i] = map.get(chars[i]);\n            }\n        }\n\
    \        return String.valueOf(chars);", "        ArrayList<Character> list =\
    \ new ArrayList<>();\n        for(int i = 0 ; i < s.length() ; i++){\n       \
    \     if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z'){\n                list.add(s.charAt(i));\n\
    \            }\n        }\n        if(list.size() == 0){\n            return s;\n\
    \        }\n        StringBuilder sb = new StringBuilder(s);\n        char []\
    \ chars = new char[s.length()];\n        int count = 0;\n        for(int i = 0\
    \ ; i < s.length() ; i++){\n            if(s.charAt(i) >= 'a' && s.charAt(i) <=\
    \ 'z'){\n                chars[count] = s.charAt(i);\n                count++;\n\
    \            }\n        }\n        for(int j = 0 ; j < count ; j++){\n       \
    \     Character curr = chars[j];\n            if(curr == 'A'){\n             \
    \   char temp = sb.get(j+1);\n                sb.delete(j+1, j+2);\n         \
    \       sb.insert(j+1, temp);\n            }else if(curr == 'a'){\n          \
    \      char temp = sb.get(j+1);\n                sb.delete(j+1, j+2);\n      \
    \          sb.insert(j+1, temp);\n            }else if(curr == 'B'){\n       \
    \         char temp = sb.get(j+1);\n                sb.delete(j+1, j+2);\n   \
    \             sb.insert(j+1, temp);\n            }else if(curr == 'b'){\n    \
    \            char temp = sb.get(j+1);\n                sb.delete(j+1, j+2);\n\
    \                sb.insert(j+1, temp);\n            }else if(curr == 'C'){\n \
    \               char temp = sb.get(j+1);\n                sb.delete(j+1, j+2);\n\
    \                sb.insert(j+1, temp);\n            }else if(curr == 'c'){\n \
    \               char temp = sb.get(j+1);\n                sb.delete(j+1, j+2);\n\
    \                sb.insert(j+1, temp);\n            }else if(curr == 'D'){\n \
    \               char temp = sb.get(j+1);\n                sb.delete(j+1, j+2);\n\
    \                sb.insert(j+1, temp);\n            }else if(curr == 'd'){\n \
    \               char temp = sb.get(j+1);\n                sb.delete(j+1, j+2);\n\
    \                sb.insert(j+1, temp);\n            }else if(curr == 'E'){\n \
    \               char temp = sb.get(j+1);\n                sb.delete(j+1, j+2);\n\
    \                sb.insert(j+1, temp);\n            }else if(curr == 'e'){\n \
    \               char temp = sb.get(j+1);\n                sb.delete(j+1, j+2);\n\
    \                sb.insert(j+1, temp);\n            }else if(curr == 'F'){\n \
    \               char temp = sb.get(j+", "        // Write your code here\n   \
    \     StringBuilder builder = new StringBuilder();\n        for(char c : s.toCharArray())\
    \ {\n            if(Character.isLetter(c)) {\n                builder.append(Character.toUpperCase(c));\n\
    \            } \n            else {\n                builder.append(c);\n    \
    \        }\n        }\n        return builder.toString();", "        \n      \
    \  if(s.isEmpty()) {\n            return \"\";\n        }\n        \n        Map<Character,\
    \ Boolean> map = new HashMap<>();\n        for(int i = 0; i < s.length(); i++)\
    \ {\n            if(!map.containsKey(s.charAt(i))) {\n                map.put(s.charAt(i),\
    \ true);\n            } else {\n                map.put(s.charAt(i), !map.get(s.charAt(i)));\
    \ \n            }\n        }\n        \n        StringBuilder builder = new StringBuilder();\n\
    \        for(Map.Entry<Character, Boolean> entry : map.entrySet()) {\n       \
    \     if(entry.getValue()) {\n                builder.append(entry.getKey());\n\
    \            }\n        }\n        return builder.toString();", "        StringBuilder\
    \ builder = new StringBuilder();\n        Set<Character> set = new HashSet<Character>();\n\
    \        StringBuilder revStr = new StringBuilder();\n        for(int i = 0; i\
    \ < s.length(); i++) {\n            char c = s.charAt(i);\n            if(c ==\
    \ Character.toUpperCase(c)) {\n                c = Character.toLowerCase(c);\n\
    \            } else {\n                c = Character.toUpperCase(c);\n       \
    \     }\n            set.add(s);\n            if(set.contains(c)) {\n        \
    \        revStr.append(c);\n            }\n            builder.append(c);\n  \
    \      }\n        if(!revStr.equals(builder)) {\n            builder.append(revStr.reverse());\n\
    \        }\n        return builder.toString();", "        // Write your code here\n\
    \        String res = \"\";\n        for (Character c : s.toCharArray()){\n  \
    \          if (Character.isLetter(c)) {\n                String toUpper = Character.toUpperCase(c);\n\
    \                String toLower = Character.toLowerCase(c);\n                String\
    \ temp = toUpper + toLower;\n                res = temp;\n            } else {\n\
    \                res = String.valueOf(c);\n            }\n        }\n        return\
    \ res;", "        String out = \"\";\n        for (int i = 0; i < s.length();\
    \ i++) {\n            char c = s.charAt(i);\n            if (Character.isLetter(c))\n\
    \                out += Character.toUpperCase(c);\n            else\n        \
    \        out += c;\n        }\n        return out;", "        char[] chars = s.toCharArray();\n\
    \        char[] charsReverse = new char[chars.length];\n        for (char c :\
    \ chars) {\n            if (Character.isLetter(c)) {\n                charsReverse[chars.length\
    \ - 1 - chars.indexOf(c)] = c;\n            } else {\n                charsReverse[chars.length\
    \ - 1 - i] = c;\n            }\n        }\n        return new String(charsReverse);",
  "        // Write your code here\n        \n        if(s.contains(\"a\")){\n   \
    \         \n        }else if(s.contains(\"b\")){\n            \n        }else\
    \ if(s.contains(\"c\")){\n            \n        }else if(s.contains(\"d\")){\n\
    \            \n        }else if(s.contains(\"e\")){\n            \n        }else\
    \ if(s.contains(\"f\")){\n            \n        }else if(s.contains(\"g\")){\n\
    \            \n        }else if(s.contains(\"h\")){\n            \n        }else\
    \ if(s.contains(\"i\")){\n            \n        }else if(s.contains(\"j\")){\n\
    \            \n        }else if(s.contains(\"k\")){\n            \n        }else\
    \ if(s.contains(\"l\")){\n            \n        }else if(s.contains(\"m\")){\n\
    \            \n        }else if(s.contains(\"n\")){\n            \n        }else\
    \ if(s.contains(\"o\")){\n            \n        }else if(s.contains(\"p\")){\n\
    \            \n        }else if(s.contains(\"q\")){\n            \n        }else\
    \ if(s.contains(\"r\")){\n            \n        }else if(s.contains(\"s\")){\n\
    \            \n        }else if(s.contains(\"t\")){\n            \n        }else\
    \ if(s.contains(\"u\")){\n            \n        }else if(s.contains(\"v\")){\n\
    \            \n        }else if(s.contains(\"w\")){\n            \n        }else\
    \ if(s.contains(\"x\")){\n            \n        }else if(s.contains(\"y\")){\n\
    \            \n        }else if(s.contains(\"z\")){\n            \n        }\n\
    \        return \"\";", "        try{\n            s=s.toLowerCase(); \n     \
    \       return s.replaceAll(\"(?!^[a-z])(?=[A-Z])|(?<=[a-z])(?![A-Z])\", \"$0\"\
    );\n        }catch(Exception e){\n            return s;\n        }", "       \
    \ \n        s = s.toUpperCase();\n        \n        if (s.contains(\"#\")) s =\
    \ s.replace(\"#\", \"\");\n        if (s.contains(\"@\")) s = s.replace(\"@\"\
    , \"\");\n        if (s.contains(\":\")) s = s.replace(\":\", \"\");\n       \
    \ \n        char[] ch = s.toCharArray();\n        \n        for (int i = 0; i\
    \ < ch.length; i++) {\n            \n            if (Character.isLetter(ch[i]))\n\
    \                ch[i] = Character.toUpperCase(ch[i]);\n            else\n   \
    \             ch[i] = Character.toLowerCase(ch[i]);\n            \n        }\n\
    \        \n        StringBuilder sb = new StringBuilder();\n        \n       \
    \ for (int i = 0; i < ch.length; i++) {\n            \n            sb.append(ch[i]);\n\
    \            \n        }\n        \n        return sb.toString();"]
stop_tokens:
- "    }\n    //"
- "    }\n    p"
- "    }\n}"
- "\n    }\n"
