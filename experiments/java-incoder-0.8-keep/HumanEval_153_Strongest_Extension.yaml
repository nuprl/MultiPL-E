name: HumanEval_153_Strongest_Extension
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // You will be given the name of a class (a string) and a list\
  \ of extensions.\n    // The extensions are to be used to load additional classes\
  \ to the class. The\n    // strength of the extension is as follows: Let CAP be\
  \ the number of the uppercase\n    // letters in the extension's name, and let SM\
  \ be the number of lowercase letters \n    // in the extension's name, the strength\
  \ is given by the fraction CAP - SM. \n    // You should find the strongest extension\
  \ and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
  \    // If there are two or more extensions with the same strength, you should\n\
  \    // choose the one that comes first in the list.\n    // For example, if you\
  \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
  \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
  \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n  \
  \  // Example:\n    // for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) ==\
  \ 'my_class.AA'\n    public static String StrongestExtension(String class_name,\
  \ ArrayList<String> extensions) {\n"
tests: "return \"\";\n    }\n    public static void main(String[] args) {\n    assert(StrongestExtension((\"\
  Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
  , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
  Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"NazeDa\"\
  , (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
  )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
  t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
  , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
  K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
  t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
  __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
  , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
  YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
  okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
  YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
  \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
  Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
  _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
  _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
  671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
completions: ["        int max_strength = -1;\n        String result = null;\n   \
    \     for (String ext : extensions) {\n            int strength = ext.length()\
    \ / class_name.length();\n            if (strength > max_strength) {\n       \
    \         result = class_name;\n                max_strength = strength;\n   \
    \         }\n        }\n        if (result == null)\n            throw new RuntimeException(\"\
    No strongest extension found.\");\n        return result;", "        StringBuilder\
    \ result = new StringBuilder();\n        List<String> extensions_sorted = extensions.stream().sorted((a,\
    \ b) -> b.compareTo(a))\n                .collect(Collectors.toList());\n    \
    \    Double max_strength = extensions_sorted.get(0).length() - extensions_sorted.get(1).length();\n\
    \        for (String extension : extensions_sorted) {\n            Double strength\
    \ = extension.length() - max_strength;\n            if (strength > max_strength)\
    \ {\n                max_strength = strength;\n                result.append(class_name\
    \ + '.' + extension);\n            }\n        }\n        return result.toString();",
  '        // Your code here', "        PriorityQueue<String> maxes = new PriorityQueue<>();\n\
    \        Map<String, Integer> extension_strongest_strength = new HashMap<>();\n\
    \        for(String extension : extensions) {\n            int strength = extension.substring(0,1).equalsIgnoreCase(extension.substring(0,1))\
    \ ? extension.length() - 1 : extension.length();\n            extension_strongest_strength.put(extension,\
    \ strength);\n        }\n\n        for(String extension : extensions) {\n    \
    \        String key1 = class_name + extension;\n            String key2 = extension_strongest_strength.get(extension);\n\
    \            if(extension_strongest_strength.get(extension) > 0) {\n         \
    \       maxes.add(key1);\n            }\n            else if(extension_strongest_strength.get(extension)\
    \ < 0) {\n                maxes.add(key2);\n            }\n        }\n       \
    \ if(maxes.size() > 0) {\n            return maxes.poll();\n        }\n      \
    \  else if(extensions.isEmpty()) {\n            return class_name;\n        }\n\
    \        else if(extensions.size() == 1) {\n            return class_name + \"\
    .\" + extensions.get(0);\n        }\n        else {\n            throw new RuntimeException(\"\
    No extensions found\");\n        }", "        Map<Double, String> strongest_extension\
    \ = new HashMap<>();\n        for (String extension: extensions) {\n         \
    \   // get the number of uppercase letters\n            int cap_letters = extension.replaceAll(\"\
    [A-Z]\", \"\").length();\n            // get the number of lowercase letters\n\
    \            int sm_letters = extension.replaceAll(\"[a-z]\", \"\").length();\n\
    \            double strength = Math.abs(cap_letters - sm_letters);\n         \
    \   strongest_extension.put(strength, extension);\n        }\n        // return\
    \ the first extension that has the strongest strength\n        Double best_strength\
    \ = Double.MIN_VALUE;\n        String best_extension = null;\n        for (Double\
    \ strength: strongest_extension.keySet()) {\n            if (strength < best_strength)\
    \ {\n                best_strength = strength;\n                best_extension\
    \ = strongest_extension.get(best_strength);\n            }\n        }\n      \
    \  // return the extension\n        return best_extension;", "        Collections.sort(extensions,\
    \ new Comparator<String>() {\n            public int compare(String o1, String\
    \ o2) {\n                int cap1 = o1.toUpperCase().length();\n             \
    \   int cap2 = o2.toUpperCase().length();\n                int sm1 = o1.toLowerCase().length();\n\
    \                int sm2 = o2.toLowerCase().length();\n                return\
    \ (cap1 - cap2) - (sm1 - sm2);\n            }\n        });\n        if (extensions.size()\
    \ == 0)\n            return null;\n        return class_name + \".\" + extensions.get(0);",
  "        String result = class_name;\n\n        for (String ext : extensions) {\n\
    \            int firstUpper = ext.length() - ext.replaceAll(\"(?i)[A-Z]\", \"\"\
    ).length();\n            int firstLower = ext.length() - ext.replaceAll(\"(?i)[a-z]\"\
    , \"\").length();\n\n            if (firstUpper < firstLower) {\n            \
    \    result = result + \".\" + ext;\n            } else {\n                result\
    \ = result + ext.substring(0, ext.length() - firstUpper);\n            }\n   \
    \     }\n\n        return result;", "        \n        // Your code goes here\n\
    \        \n        // Write your code here\n        int num_cap = 0;\n       \
    \ int num_sm = 0;\n        for (String extension : extensions) {\n           \
    \ if (extension.matches(\"[a-zA-Z]+\")) {\n                num_cap++;\n      \
    \      } else {\n                num_sm++;\n            }\n        }\n       \
    \ if (num_cap - num_sm > 0) return class_name + \"_\" + extensions.get(extensions.indexOf(extensions).charAt(0)\
    \ - 'a' + 1);\n        else return class_name;", "        int CAP = class_name.charAt(0).toUpperCase().length();\n\
    \        int SM = class_name.charAt(0).toLowerCase().length();\n        float\
    \ strength = extensions.get(0).length()/(CAP - SM);\n        for (int i = 1; i\
    \ < extensions.size(); i++) {\n            String ext = extensions.get(i);\n \
    \           CAP = ext.toUpperCase().length();\n            SM = ext.toLowerCase().length();\n\
    \            strength = (CAP - SM)/extensions.get(i).length();\n            if\
    \ (strength > strength) {\n                strength = extensions.get(i).length()/(CAP\
    \ - SM);\n            }\n        }\n        return (class_name + \".\" + extensions.get(0));",
  "        double score = 0;\n        for (int i = 0; i < extensions.size(); i++)\
    \ {\n            String extension = extensions.get(i);\n            String name\
    \ = extension.replaceAll(\"[A-Z]\", \"\").toLowerCase();\n            String name2\
    \ = extension.replaceAll(\"[a-z]\", \"\").toLowerCase();\n            score +=\
    \ name.indexOf(class_name) - name.indexOf(name2);\n        }\n        if (score\
    \ == 0)\n            return extensions.get(0);\n        double s = Math.pow(score,\
    \ -0.5);\n        return extensions.get(extensions.size() - 1).replaceAll(\"[A-Z]\"\
    , \"\") +\n               \".\" + extensions.get(extensions.size() - 1).replaceAll(\"\
    [a-z]\", \"\") +\n               \"[\" + s + \"]\";", "        if (extensions.isEmpty())\
    \ {\n            return \"\";\n        }\n        HashMap<String,Integer> hm =\
    \ new HashMap<String, Integer>();\n        extensions.stream().map(s -> s.toUpperCase()).forEach(s\
    \ -> {\n            hm.putIfAbsent(s, 0);\n            hm.put(s, hm.get(s) + 1);\n\
    \        });\n        Set<String> keySet = hm.keySet();\n        Collections.sort(keySet);\n\
    \        int max = Integer.MIN_VALUE;\n        int maxIdx = 0;\n        for (String\
    \ key : keySet) {\n            int val = hm.get(key);\n            if (val > max)\
    \ {\n                max = val;\n                maxIdx = key;\n            }\n\
    \        }\n        return class_name + \".\" + maxIdx;", "        ArrayList<Integer>\
    \ extensions_strength = new ArrayList<>();\n        for(String extension : extensions)\
    \ {\n            extensions_strength.add(Extension.Strength(extension));\n   \
    \     }\n        int strongest_strength = extensions_strength.get(0);\n      \
    \  int last_index = extensions_strength.size() - 1;\n        for(Integer strength\
    \ : extensions_strength) {\n            if(strength > strongest_strength) {\n\
    \                strongest_strength = strength;\n                last_index =\
    \ extensions_strength.indexOf(strength);\n            }\n        }\n        String\
    \ extension = \"\";\n        if(last_index != -1) {\n            extension = extensions.get(last_index);\n\
    \        }\n        return class_name + \".\" + extension;", "        int strength\
    \ = extensions.size();\n        Collections.sort(extensions, (a, b) -> Integer.parseInt(a.substring(0,\
    \ a.length() - 1)) - Integer.parseInt(b.substring(0, b.length() - 1)));\n    \
    \    for (int i = 0; i < strength; i++)\n            strength -= extensions.get(i).length();\n\
    \        \n        Object[] extension = new Object[extensions.size()];\n     \
    \   for (int i = 0; i < extension.size(); i++)\n            extension[i] = extensions.get(i);\n\
    \        \n        String name = class_name + \".\" + extension[0];\n        for\
    \ (int i = 1; i < extension.size(); i++)\n            name = name + \".\" + extension[i];\n\
    \        \n        return name;", '        return StrongestExtension(class_name,
    extensions, new HashMap<String, Integer>());', "        HashMap<Integer, Integer>\
    \ extensions_by_strength = new HashMap<>();\n        for(String ext : extensions){\n\
    \            String ext_name = ext.substring(ext.indexOf(\".\"));\n          \
    \  int letters_count = ext_name.toUpperCase().length();\n            int letters_count_lowercase\
    \ = ext_name.toLowerCase().length();\n            int strength = letters_count\
    \ - letters_count_lowercase;\n            extensions_by_strength.put(strength,\
    \ extensions_by_strength.getOrDefault(strength, 0) + 1);\n        }\n        Integer\
    \ max_strength = Collections.max(extensions_by_strength.values());\n        if\
    \ (max_strength == null){\n            return class_name;\n        }\n       \
    \ return class_name + \".\" + extensions_by_strength.get(max_strength).orElse(\"\
    \");", "        double strength = 0;\n        for (String extension : extensions)\
    \ {\n            int s = extension.substring(0,1).length();\n            int c\
    \ = extension.substring(0,1).toLowerCase();\n            int m = extension.substring(1).length();\n\
    \            int l = extension.substring(1).toLowerCase();\n            strength\
    \ += Math.max(s,Math.max(c,Math.max(m,l)));\n        }\n        if (strength ==\
    \ 0) {\n            return class_name;\n        }\n        double smax = Math.sqrt(Math.pow(class_name.charAt(0)-class_name.charAt(1),2)+Math.pow(class_name.charAt(0)-class_name.charAt(2),2)+Math.pow(class_name.charAt(0)-class_name.charAt(3),2)+Math.pow(class_name.charAt(1)-class_name.charAt(2),2)+Math.pow(class_name.charAt(1)-class_name.charAt(3),2)+Math.pow(class_name.charAt(2)-class_name.charAt(3),2));\n\
    \        return class_name + \".\" + extensions.get(extensions.size() - 1 - Math.ceil(strength*smax/Math.sqrt(Math.pow(class_name.charAt(0)-class_name.charAt(1),2)+Math.pow(class_name.charAt(0)-class_name.charAt(2),2)+Math.pow(class_name.charAt(0)-class_name.charAt(3),2)+Math.pow(class_name.charAt(1)-class_name.charAt(2),2)+Math.pow(class_name.charAt(1)-class_name.charAt(3),2)+Math.pow(class_name.charAt(2)-class_name.charAt(3),2)));",
  "        int max_strength = 0;\n        String strongest_ext = null;\n        for\
    \ (String ext : extensions) {\n            int strength = CAP_STRONG_SCORE(ext.toLowerCase());\n\
    \            if (strength > max_strength) {\n                max_strength = strength;\n\
    \                strongest_ext = ext;\n            }\n        }\n        return\
    \ class_name + \".\" + strongest_ext;", "        int CAP, SM;\n        int maxStrength\
    \ = 0;\n        CAP = class_name.toUpperCase().length();\n        SM = class_name.toLowerCase().length();\n\
    \        for (String extension : extensions) {\n            CAP -= extension.toUpperCase().length();\n\
    \            SM -= extension.toLowerCase().length();\n            if (CAP - SM\
    \ < 0) {\n                CAP -= SM;\n                SM += CAP;\n           \
    \ }\n            if (CAP > maxStrength) maxStrength = CAP;\n        }\n      \
    \  if (maxStrength == 0) {\n            throw new RuntimeException(\"There were\
    \ no extensions having the highest strength.\");\n        } else if (maxStrength\
    \ == 1) {\n            return class_name + \".\" + extensions.get(0);\n      \
    \  }\n        ArrayList<String> result = new ArrayList<String>();\n        int\
    \ SM1 = SM - maxStrength;\n        int SM2 = SM - CAP;\n        int SM3 = SM -\
    \ SM1;\n        int SM4 = SM - SM2;\n        int SM5 = SM - SM3;\n        if (SM\
    \ == SM1) {\n            result.add(class_name + \".\" + extensions.get(0));\n\
    \        } else if (SM == SM2) {\n            result.add(class_name + \".\" +\
    \ extensions.get(1));\n        } else if (SM == SM3) {\n            result.add(class_name\
    \ + \".\" + extensions.get(2));\n        } else if (SM == SM4) {\n           \
    \ result.add(class_name + \".\" + extensions.get(3));\n        } else if (SM ==\
    \ SM5) {\n            result.add(class_name + \".\" + extensions.get(4));\n  \
    \      } else {\n            for (String extension : extensions) {\n         \
    \       result.add(class_name + \".\" + extension);\n            }\n        }\n\
    \        return result.stream().reduce(new ArrayList<String>(), (list, current)\
    \ -> {\n            int SM = current.toUpperCase().length();\n            int\
    \ SM1 = SM - maxStrength;\n            int SM2 = SM - CAP;\n            int SM3\
    \ = SM - SM1;\n            int SM4 = SM - SM2;\n            int SM5 = SM - SM3;\n\
    \            if (SM == SM1) {\n                list.add(\"(\" + class_name + \"\
    .\" + current.get(0) + \")\");\n            } else if (SM == SM2) {\n        \
    \        list.add(\"(\" + class_name + \".\" + current.get(1) + \")\");\n    \
    \        } else if (SM == SM3) {\n                list.add(\"(\" + class_name\
    \ + \".\" + current.get(2) + \")\");\n            } else if (SM == SM4) {\n  \
    \              list.add(\"(\" + class_name + \".\" + current.get(3) + \")\");\n\
    \            } else if (SM == SM5) {\n                list.add(\"(\" + class_name\
    \ + \".\" + current.get(4) + \")\");\n            } else {\n                list.add(\"\
    (\" + class_name + \".\" + current + \")\");\n            }\n            return\
    \ list;\n        }, new ArrayList<String>()).", "        int CAP = class_name.codePoints().mapToObj(c\
    \ -> c).get().filter(Character::isUpperCase).count();\n        int SM = class_name.codePoints().mapToObj(c\
    \ -> c).get().filter(Character::isLowerCase).count();\n        int strength =\
    \ CAP - SM;\n        if (strength > 0) {\n            for (int i = 1; i < extensions.size()\
    \ ; i++) {\n                String ext = extensions.get(i);\n                int\
    \ eCAP = ext.codePoints().mapToObj(c -> c).get().filter(Character::isUpperCase).count();\n\
    \                int eSM = ext.codePoints().mapToObj(c -> c).get().filter(Character::isLowerCase).count();\n\
    \                int estrength = eCAP - eSM;\n                if (strength > estrength)\
    \ {\n                    strength = estrength;\n                }\n          \
    \  }\n        }\n        return class_name + \".\" + extensions.get(0);", "  \
    \      Set<String> extension_strengths = new HashSet<>();\n        for(String\
    \ extension : extensions) {\n            extension_strengths.add(extension.toLowerCase());\n\
    \        }\n        \n        String best_extension_strength = null;\n       \
    \ \n        int best_strength = -1;\n        \n        for(String extension :\
    \ extensions) {\n            int extension_strength = extension_strengths.contains(extension.toLowerCase())?\
    \ 1 : 0;\n            \n            int extension_strength_of_the_class = class_name.contains(extension.toLowerCase())?\
    \ 1 : 0;\n            \n            int strength = extension_strength - extension_strength_of_the_class;\n\
    \            \n            if(strength > best_strength) {\n                best_strength\
    \ = strength;\n                best_extension_strength = extension;\n        \
    \    }\n        }\n        \n        return class_name + best_extension_strength;",
  "        ArrayList<Integer> strengths = new ArrayList<Integer>();\n        ArrayList<String>\
    \ sorted_extensions = new ArrayList<String>(extensions);\n        Collections.sort(sorted_extensions,\
    \ (a, b) -> {\n            String aName = a.toLowerCase().substring(0,a.length()-1);\n\
    \            String bName = b.toLowerCase().substring(0,b.length()-1);\n     \
    \       int aStrength = 0;\n            int bStrength = 0;\n            if (aName.matches(\"\
    [A-Z]\")) {\n                aStrength += 1;\n            }\n            if (bName.matches(\"\
    [a-z]\")) {\n                bStrength += 1;\n            }\n            return\
    \ aStrength - bStrength;\n        });\n        for (String extension : sorted_extensions)\
    \ {\n            int i = 0;\n            for (char c : extension.toCharArray())\
    \ {\n                if (Character.isUpperCase(c)) {\n                    strengths.add(i);\n\
    \                }\n                i += 1;\n            }\n        }\n      \
    \  Collections.sort(strengths);\n        int maxStrength = -1;\n        for (int\
    \ strength : strengths) {\n            if (strength > maxStrength) {\n       \
    \         maxStrength = strength;\n            }\n        }\n        if (maxStrength\
    \ >= 0) {\n            int maxIndex = strengths.size() - 1;\n            while\
    \ (maxIndex >= 0 && strengths.get(maxIndex) == maxStrength) {\n              \
    \  maxIndex -= 1;\n            }\n            String returnName = class_name +\
    \ \".\" + sorted_extensions.get(maxIndex);\n            return returnName;\n \
    \       }\n        else {\n            return \"\";\n        }", "        // Your\
    \ code here\n        Map<Integer, List<String>> map = new HashMap<Integer, List<String>>();\n\
    \        for (String extension : extensions)\n        {\n            int numCaps\
    \ = 0;\n            int numSms = 0;\n            for (int i = 0; i < extension.length();\
    \ i++)\n            {\n                if (Character.isUpperCase(extension.charAt(i)))\n\
    \                    numCaps += 1;\n                else\n                   \
    \ numSms += 1;\n            }\n            \n            int numOfCaps = numCaps;\n\
    \            int numOfSms = numSms;\n            \n            int numOfCapsSms\
    \ = 0;\n            int numOfCapsSms = 0;\n            \n            while (numOfCaps\
    \ > numOfSms)\n            {\n                numOfCapsSms = numOfCaps;\n    \
    \            numOfCaps = numOfCaps - numSms;\n            }\n            \n  \
    \          while (numOfSms > numOfCaps)\n            {\n                numOfCapsSms\
    \ = numOfSms;\n                numOfSms = numOfSms - numCaps;\n            }\n\
    \            \n            map.put(numOfCapsSms, new ArrayList<String>());\n \
    \           map.get(numOfCapsSms).add(extension);\n        }\n        int maxKey\
    \ = Collections.max(map.keySet());\n        \n        ArrayList<String> maxValue\
    \ = map.get(maxKey);\n        \n        String strongestExtension = class_name\
    \ + \".\" + maxValue.get(0);\n        \n        return strongestExtension;", " \
    \       int max_strength = 0;\n        for (String extension : extensions) {\n\
    \            int strength = ExtensionStrength(class_name + extension);\n     \
    \       if (strength > max_strength) {\n                max_strength = strength;\n\
    \            }\n        }\n        return class_name + extensions.get(extensions.indexOf(max_strength));",
  "        List<String> sorted_extensions = extensions;\n        Collections.sort(sorted_extensions,\
    \ (a, b) -> {\n            String first_letter = a.substring(0, 1);\n        \
    \    String second_letter = a.substring(1, 2);\n            int num_cap_a = first_letter.toUpperCase().length();\n\
    \            int num_cap_b = second_letter.toUpperCase().length();\n         \
    \   int num_sm = a.toLowerCase().length();\n            int num_lm = b.toLowerCase().length();\n\
    \            return num_cap_a - num_sm + num_lm;\n        });\n        String\
    \ result = class_name + sorted_extensions.get(0);\n        for (String extension\
    \ : sorted_extensions) {\n            if (class_name.equals(extension)) {\n  \
    \              return class_name + sorted_extensions.get(1);\n            }\n\
    \        }\n        return result;", "        String[] extension = extensions.stream().filter(ext\
    \ -> ext.equalsIgnoreCase(class_name)).collect(Collectors.toList()).toArray(new\
    \ String[0]);\n        if (extension.length > 1) {\n            return extension[0]\
    \ + \".\" + extension[1];\n        }\n        return extension[0];", "       \
    \ String highest = null;\n        boolean found = false;\n\n        for(String\
    \ extension : extensions){\n            if(class_name.contains(extension)){\n\
    \                if(highest == null || highest.substring(class_name.length() -\
    \ extension.length()).compareTo(extension) > 0){\n                    highest\
    \ = extension;\n                    found = true;\n                }\n       \
    \     }\n        }\n\n        if(!found)\n            highest = \"No extensions\
    \ found\";\n\n        return highest;", "        HashMap<String, Integer> strongest_extension\
    \ = new HashMap<>();\n        \n        for(String extension : extensions) {\n\
    \            int cap = extension.matches(\"[A-Z]+\").length();\n            int\
    \ sm = extension.matches(\"[a-z]+\").length();\n            float strength = (float)\
    \ cap - sm;\n            \n            if(!strongest_extension.containsKey(extension))\
    \ {\n                strongest_extension.put(extension, (int) strength);\n   \
    \         }\n            else {\n                int old_strength = strongest_extension.get(extension);\n\
    \                if(strength < old_strength) {\n                    strongest_extension.put(extension,\
    \ (int) strength);\n                }\n            }\n        }\n        \n  \
    \      int max_strength = -1;\n        \n        for(String extension : strongest_extension.keySet())\
    \ {\n            if(strongest_extension.get(extension) > max_strength) {\n   \
    \             max_strength = strongest_extension.get(extension);\n           \
    \ }\n        }\n        \n        return class_name + \".\" + max_strength;",
  "        double strength = 0;\n        for(int i = 0; i < extensions.size(); i++)\
    \ {\n            String s = extensions.get(i);\n            int cap = s.length(),\
    \ sm = cap - s.length();\n            if(cap < sm) {\n                strength\
    \ = -1;\n            } else {\n                double fraction = cap - sm;\n \
    \               strength = (fraction / cap);\n            }\n        }\n     \
    \   return class_name + \".\" + extensions.get(extensions.indexOf(extensions.get(Math.min(strength,\
    \ extensions.size() - 1))) + 1);", "        HashMap<Integer, Integer> map = new\
    \ HashMap<>();\n        for(int i=0;i<extensions.size();i++) {\n            int\
    \ count = extensions.get(i).length();\n            int index = map.get(count);\n\
    \            if(index == -1) {\n                map.put(count, 0);\n         \
    \       map.put(count+extensions.get(i).charAt(0), i);\n            } else {\n\
    \                map.put(count, index + 1);\n            }\n        }\n      \
    \  int max = Collections.max(map.values());\n        int index = map.get(max);\n\
    \        String res = class_name;\n        if(index != -1) res = class_name.substring(0,\
    \ index) + extensions.get(map.get(max)).get(0) + \".\";\n        for(int i=0;i<extensions.size();i++)\
    \ {\n            if(i!=index) res = res + extensions.get(i);\n        }\n    \
    \    return res;", "        // Your code here\n        Map<String, Integer> count\
    \ = new HashMap<>();\n\n        for (String extension : extensions) {\n      \
    \      int count = 0;\n            for(char c : extension.toLowerCase().toCharArray())\
    \ {\n                if(c == c.toUpperCase())\n                    count++;\n\
    \            }\n            count.put(extension, count);\n        }\n\n      \
    \  int maxKey = Collections.max(count.keySet());\n        String maxValue = Collections.max(count.values());\n\
    \n        String strongest = class_name + maxKey + maxValue;\n\n        System.out.println(strongest);\n\
    \n        return strongest;", "        if (extensions.isEmpty()) {\n         \
    \   return \"\";\n        }\n        int caps = 0;\n        int sms = 0;\n   \
    \     int max_extension_strength = 0;\n        for (String extension: extensions)\
    \ {\n            char c = extension.charAt(0);\n            if (Character.isUpperCase(c))\
    \ {\n                caps++;\n            }\n            if (Character.isLowerCase(c))\
    \ {\n                sms++;\n            }\n        }\n        max_extension_strength\
    \ = (int) (caps - sms) / 2;\n        int strength = 0;\n        for (int i = 0;\
    \ i < extensions.size(); i++) {\n            String extension = extensions.get(i);\n\
    \            char c = extension.charAt(0);\n            if (Character.isUpperCase(c))\
    \ {\n                strength += caps - sms - max_extension_strength;\n      \
    \      } else if (Character.isLowerCase(c)) {\n                strength += sms\
    \ - max_extension_strength;\n            }\n        }\n        if (strength >\
    \ 0) {\n            return class_name + \".\" + extensions.get(0);\n        }\n\
    \        return \"\";", "        int strength = 0;\n        String ext_class =\
    \ \"\";\n        ArrayList<Integer> cap = new ArrayList<Integer>();\n        ArrayList<Integer>\
    \ sm = new ArrayList<Integer>();\n        for(int i = 0; i<extensions.size();\
    \ i++) {\n            if(extensions.get(i).matches(\"[A-Z]+\")) cap.add(extensions.get(i).length());\n\
    \            if(extensions.get(i).matches(\"[a-z]+\")) sm.add(extensions.get(i).length());\n\
    \            strength = cap.get(0) - (sm.get(0));\n            ext_class += class_name\
    \ + \".\" + extensions.get(i) + \"\";\n        }\n        ArrayList<Integer> arr\
    \ = new ArrayList<Integer>();\n        arr.add(strength);\n        Collections.sort(arr);\n\
    \        if(arr.size() == 1) return ext_class;\n        if(arr.size() > 1) {\n\
    \            for(int i = 1; i<arr.size(); i++) {\n                if(arr.get(i)\
    \ == arr.get(i-1)) {\n                    String temp = \"\";\n              \
    \      int temp = arr.get(i-1);\n                    for(int j = (i-1); j>=0;\
    \ j--) {\n                        if(arr.get(j) == temp) {\n                 \
    \           temp = arr.get(j);\n                        }\n                  \
    \  }\n                    ext_class += class_name + \".\" + extensions.get(temp);\n\
    \                }\n            }\n        }\n        return ext_class;", "  \
    \      Collections.sort(extensions);\n        int sm = 0;\n        int cap = 0;\n\
    \        String result = class_name + \".\" + extensions.get(0);\n        for\
    \ (int i = 1; i < extensions.size(); i++) {\n            int j = i;\n        \
    \    for (; j < extensions.size(); j++) \n                if (extensions.get(i).equals(extensions.get(j)))\n\
    \                    break;\n            \n            sm = extensions.get(i).length()\
    \ - extensions.get(j).length();\n            cap = extensions.get(i).toUpperCase().length()\
    \ - extensions.get(j).toUpperCase().length();\n            if (sm > cap)\n   \
    \             result = class_name + \".\" + extensions.get(i);\n        }\n  \
    \      return result;", "        String[] ext_names = new String[extensions.size()];\n\
    \        for(int i=0; i<extensions.size(); i++) {\n            ext_names[i] =\
    \ extensions.get(i);\n        }\n        Arrays.sort(ext_names);\n        int\
    \ cap = ext_names.length-1;\n        int sm = ext_names.length-1;\n        int\
    \ strongest = 0;\n        for(int i=0; i<ext_names.length; i++) {\n          \
    \  if(ext_names[i].length() == cap) {\n                cap--;\n            } else\
    \ if(ext_names[i].length() == sm) {\n                sm--;\n            } else\
    \ {\n                strongest++;\n            }\n        }\n        return class_name\
    \ + ext_names[strongest];", "        ArrayList<Integer> class_letters = new ArrayList<>();\n\
    \        class_letters.add(class_name.charAt(0));\n        for(int i = 1; i <\
    \ class_name.length(); i++) {\n            class_letters.add(class_name.charAt(i));\n\
    \        }\n        ArrayList<Integer> extension_letters = new ArrayList<>();\n\
    \        for(int i = 0; i < extensions.size(); i++) {\n            extension_letters.add(extensions.get(i).charAt(0));\n\
    \        }\n        int letters_num = class_letters.size();\n        for(int i\
    \ = 0; i < extension_letters.size(); i++) {\n            letters_num += extension_letters.size();\n\
    \        }\n        Double class_strongest = -1;\n        for(int i = 1; i < letters_num;\
    \ i++) {\n            Double extension_letter = extension_letters.get(i)/letters_num;\n\
    \            for(int j = 1; j < letters_num; j++) {\n                if(extension_letter\
    \ > class_letters.get(j)) {\n                    extension_letter = class_letters.get(j)/letters_num;\n\
    \                    class_strongest = extension_letter;\n                }\n\
    \            }\n        }\n        return class_name + \".\" + class_strongest.toString();",
  "        \n        // Sort the extensions in descending order of strength. For example:\
    \ for 'my_class'\n        // with ['AA', 'Be', 'CC'], the extensions should be\
    \ sorted in descending order: \n        // 'Be', 'AA', 'CC'.\n        extensions\
    \ = extensions.stream().sorted((e1, e2) -> Integer.compare(e1.length(), e2.length()))\n\
    \            .collect(Collectors.toCollection(ArrayList::new));\n        \n  \
    \      // Let CAP be the upper case letters in the extension's name, and let SM\
    \ be the\n        // lower case letters in the extension's name, the strength\
    \ is given by the fraction\n        // CAP - SM.\n        // You should find the\
    \ strongest extension and return a string in this format: \n        // 'my_class.Be'\n\
    \        int strongest_extension = -1;\n        String strongest_extension_name\
    \ = null;\n        \n        // Initialize a map to store the result\n       \
    \ Map<Integer, String> extension_strength = new HashMap<>();\n        \n     \
    \   // The Strongest extension should be the first element in the array\n    \
    \    // 'extensions'\n        for (int i = 0; i < extensions.size(); ++i) {\n\
    \            // If the length of the extension's name is not equal to strongest_extension\n\
    \            if (extensions.get(i).length() != strongest_extension) {\n      \
    \          // Update strongest_extension with the extension's length\n       \
    \         strongest_extension = extensions.get(i).length();\n                //\
    \ Update strongest_extension_name\n                strongest_extension_name =\
    \ extensions.get(i);\n            }\n            \n            // Update the extension\
    \ strength\n            extension_strength.put(extensions.get(i).length(), extensions.get(i));\n\
    \        }\n        \n        // If the strongest_extension is -1, then the strongest_extension_name\
    \ will be null.\n        if (strongest_extension == -1) {\n            return\
    \ null;\n        }\n        \n        // Iterate over the extensions, find the\
    \ strongest extension and\n        // return it.\n        List<String> sorted_extensions\
    \ = extension_strength.values();\n        Collections.sort(sorted_extensions);\n\
    \        \n        // Sort the extensions in descending order of strongest_extension.\
    \ For example: for\n        // 'my_class' with ['AA', 'Be', 'CC'], the extensions\
    \ should be sorted in descending\n        // order: 'Be', 'AA', 'CC'.\n      \
    \  sorted_extensions = sorted_extensions.stream().sorted((e1, e2) -> Integer.compare(e1,\
    \ e2))\n            .collect(Collectors.toCollection(ArrayList::new));\n     \
    \   \n        if (sorted_extensions.contains(strongest_extension_name)) {\n  \
    \          return class_name + \".\" + strongest_extension_name;\n        }\n\
    \        \n        // If the strongest_extension is not contained in 'sorted_extensions',\
    \ then there are \n        // at least two ", "        ArrayList<Integer> exts\
    \ = new ArrayList<Integer>();\n        for (int i = 0; i < extensions.size();\
    \ i++) {\n            String ext = extensions.get(i);\n            int count =\
    \ 0;\n            for (int j = 0; j < ext.length(); j++) {\n                if\
    \ (ext.charAt(j) >= 'A' && ext.charAt(j) <= 'Z')\n                    count++;\n\
    \            }\n            if (count > 0)\n                exts.add((int) Math.pow(ext.length(),\
    \ 1.0 / count));\n        }\n        int max = 0;\n        Collections.sort(exts);\n\
    \        for (Integer x : exts)\n            if (x > max)\n                max\
    \ = x;\n        int res = (int) Math.pow(class_name.length(), 1.0 / max);\n  \
    \      res = Math.max(res, 0);\n        String res = class_name + \".\" + Extensions.extension(exts.get(exts.size()\
    \ - 1));\n        return res;", "        // Write your code here\n        if (extensions.size()\
    \ <= 0) {\n            return class_name;\n        }\n        int strongest =\
    \ -1;\n        for (String extension : extensions) {\n            if (extension.length()\
    \ <= 0) {\n                continue;\n            }\n            try {\n     \
    \           Class<?> ext_class = Class.forName(class_name + extension);\n    \
    \            Method[] methods = ext_class.getMethods();\n                for (Method\
    \ m : methods) {\n                    if (m.getName().substring(0, 1).matches(\"\
    [A-Z]\")) {\n                        int cap = m.getName().substring(1).length();\n\
    \                        int sm = m.getName().substring(0, 1).length();\n    \
    \                    float strength = (float) (cap - sm) / cap;\n            \
    \            if (strength > strongest) {\n                            strongest\
    \ = strength;\n                        }\n                    }\n            \
    \    }\n            } catch (ClassNotFoundException | NoSuchMethodException\n\
    \                    | SecurityException | IllegalAccessException\n          \
    \          | IllegalArgumentException\n                    | InvocationTargetException\
    \ e) {\n                e.printStackTrace();\n            }\n        }\n     \
    \   return class_name + extensions.get(extensions.indexOf(strongest));", "   \
    \     ArrayList<Integer> strengths = new ArrayList<>();\n        for (String extension\
    \ : extensions) {\n            char cap = Character.toUpperCase(extension.charAt(0));\n\
    \            char sm = Character.toLowerCase(extension.charAt(0));\n         \
    \   int cp = cap - sm;\n            int sm2 = sm - sm;\n            if (cp ==\
    \ 0 && sm2 == 0) {\n                strengths.add(0);\n            } else if (cp\
    \ == sm2 && cp == 0) {\n                strengths.add(-1);\n            } else\
    \ {\n                int cp2 = cp - cp;\n                int sm3 = sm2 - sm;\n\
    \                strengths.add(cp2 + sm3);\n            }\n        }\n       \
    \ ArrayList<Integer> strengthsSorted = new ArrayList<>(strengths);\n        Collections.sort(strengthsSorted);\n\
    \        int maxStrength = strengthsSorted.get(0);\n        String classNameExtension\
    \ = class_name + \".\" + \"\";\n        for (int i = 1; i < strengthsSorted.size();\
    \ i++) {\n            if (strengthsSorted.get(i) == maxStrength) {\n         \
    \       classNameExtension = classNameExtension + extensions.get(i);\n       \
    \     }\n        }\n        return classNameExtension;", "        Set<String>\
    \ strongest_extensions = new HashSet<>();\n        for (String extension : extensions)\
    \ {\n            int extension_uppercase_letters = extension.chars().filter(Character::isUpperCase).count();\n\
    \            int extension_lowercase_letters = extension.chars().filter(Character::isLowerCase).count();\n\
    \            Double strongest_strength = (double) extension_uppercase_letters\
    \ / (double) extension_lowercase_letters;\n            if (strongest_strength\
    \ > 1) {\n                strongest_extensions.put(extension);\n            }\n\
    \        }\n        if (strongest_extensions.size() > 1) {\n            strongest_extensions\
    \ = strongest_extensions.stream().sorted((a, b) -> Double.compare(strongest_strength,\
    \ Double.parseDouble(b)))\n                    .collect(Collectors.toSet());\n\
    \        }\n        return String.format(\"%s.%s\", class_name, strongest_extensions.get(0));",
  "        if (extensions == null || extensions.size() == 0) {\n            return\
    \ \"\";\n        }\n        int strongest = 0;\n        for (String ext : extensions)\
    \ {\n            int cap = ext.toUpperCase().length();\n            int sm = ext.toLowerCase().length();\n\
    \            int strength = cap - sm;\n            if (strength > strongest) {\n\
    \                strongest = strength;\n            }\n        }\n        return\
    \ class_name + extensions.get(extensions.indexOf(\"strongest\"));", "        double\
    \ strength = -1;\n        for (String extension : extensions) {\n            int\
    \ c = (extension.length() - extension.replaceAll(\" \", \"\").length()) / 2.0;\n\
    \            String s = extension.replaceAll(\" \", \"\");\n            double\
    \ d = (strength == -1) ? c : strength - c;\n            if (d > strength) {\n\
    \                strength = d;\n            }\n        }\n        return class_name\
    \ + extensions.get(extensions.indexOf(class_name + \".\" + extensions.get(extensions.indexOf(class_name\
    \ + \".\"))) + 1);", "        if (extensions.size() == 0) {\n            return\
    \ class_name;\n        }\n\n        Map<String, Integer> extensions_map = new\
    \ HashMap<>();\n        ArrayList<String> sorted_extensions = new ArrayList<>(extensions);\n\
    \        Collections.sort(sorted_extensions);\n\n        for(String extension\
    \ : sorted_extensions) {\n            String ext_name = extension.substring(extension.length()\
    \ - 1, extension.length());\n            int cap = ext_name.length();\n      \
    \      int sm = class_name.substring(class_name.length() - 1, class_name.length()).length();\n\
    \            int strength = cap - sm;\n            extensions_map.put(extension,\
    \ strength);\n        }\n\n        int max_strength = 0;\n        String strongest_extension\
    \ = extensions_map.get(sorted_extensions.get(0));\n        for (Map.Entry<String,\
    \ Integer> entry : extensions_map.entrySet()) {\n            if (entry.getValue()\
    \ > max_strength && entry.getValue() < max_strength + 5) {\n                max_strength\
    \ = entry.getValue();\n                strongest_extension = entry.getKey();\n\
    \            }\n        }\n\n        return class_name + \".\" + strongest_extension;",
  "        int CAP = 0;\n        int SM = 0;\n        for (String extension : extensions)\
    \ {\n            CAP += extension.length();\n            SM += extension.toUpperCase().length();\n\
    \        }\n        int strength = (CAP - SM);\n        Arrays.sort(extensions);\n\
    \        Arrays.sort(extensions, (x, y) -> strength > y.length());\n        return\
    \ class_name + extensions.get(0);", "        Set<String> names = new HashSet<>();\n\
    \        Set<String> extension_names = new HashSet<>();\n        extension_names.addAll(extensions);\n\
    \        Set<String> extension_strengths = new HashSet<>();\n        double extension_strength\
    \ = Double.NEGATIVE_INFINITY;\n\n        for(String name : extension_names) {\n\
    \            char c = name.charAt(0);\n            if(c == c.toUpperCase()) {\n\
    \                names.add(name);\n                extension_strength = extension_strength\
    \ * 2;\n            }\n            else if(c == c.toLowerCase()) {\n         \
    \       names.add(name);\n                extension_strength = extension_strength\
    \ * 0.5;\n            }\n        }\n        extension_names.removeAll(names);\n\
    \n        if(extension_strength == Double.NEGATIVE_INFINITY) return \"\";\n\n\
    \        double strength = extension_strength / extensions.size();\n\n       \
    \ double index = Collections.min(Arrays.asList(extension_strengths.stream()\n\
    \            .filter(e -> e == strength)\n            .sorted((x, y) -> Double.compare(x,\
    \ y))\n            .mapToDouble(e -> Double.compare(e, strength))\n          \
    \  .iterator()));\n\n        String name = null;\n        if(index == 0) return\
    \ class_name + \".\" + extension_names.get(0);\n        else if(index == 1) return\
    \ class_name + \".\" + extension_names.get(1);\n        else if(index == 2) {\n\
    \            Collections.sort(extension_names);\n            int i = 0;\n    \
    \        while(extension_names.contains(extension_names.get(i))) {\n         \
    \       i++;\n            }\n            return class_name + \".\" + extension_names.get(i);\n\
    \        }\n        else return \"\";", "        List<String> list = extensions;\n\
    \        // Sort the list of extensions by strength descending\n        Collections.sort(list,\
    \ Comparator.comparing(s -> getExtensionStrength(s)));\n        // Get the first\
    \ extension\n        String first = list.get(0);\n        if (list.size() > 1)\
    \ {\n            int strength = Integer.MAX_VALUE;\n            for (int i = 1;\
    \ i < list.size(); i++) {\n                if (getExtensionStrength(list.get(i))\
    \ == strength) {\n                    first = list.get(i);\n                 \
    \   break;\n                }\n                strength = getExtensionStrength(list.get(i));\n\
    \            }\n        }\n        return class_name + \".\" + first;", "    \
    \    // Write your code here\n        String strongest_extension = \"\";\n   \
    \     Arrays.sort(extensions);\n        double strength = 0;\n        for(int\
    \ i = 0; i < extensions.size(); i++){\n            System.out.println(extensions.get(i));\n\
    \            System.out.println(class_name);\n            System.out.println(extensions.get(i).contains(class_name));\n\
    \            strength = (extensions.get(i).contains(class_name)) ? -1 : 0;\n \
    \           if(strength > strongest_extension.length()){\n                strongest_extension\
    \ = extensions.get(i);\n            }\n        }\n        return strongest_extension;",
  "        HashMap<String, Integer> map = new HashMap<String, Integer>();\n      \
    \  for (String e : extensions) {\n            map.put(e, map.getOrDefault(e, 0));\n\
    \        }\n        ArrayList<String> keys = new ArrayList<String>(map.keySet());\n\
    \        Collections.sort(keys);\n        int max = 0;\n        for (String e\
    \ : keys) {\n            int val = map.get(e);\n            int cap = e.toUpperCase().length();\n\
    \            int sm = e.toLowerCase();\n            int strength = val * (cap\
    \ - sm);\n            if (strength > max) {\n                max = strength;\n\
    \            }\n        }\n        return class_name + map.get(max.toString());",
  "        // Your code here!\n        \n        \n        \n        int CAP, SM;\n\
    \        CAP = 0;\n        SM = 0;\n        \n        for (String ext : extensions)\
    \ {\n            CAP += ext.length();\n            SM = CAP - ext.length();\n\
    \        }\n        \n        double strength = (double) CAP - SM;\n        \n\
    \        \n        \n        \n        \n        \n        \n        return \"\
    \";", "        ArrayList<String> extensionsSort = new ArrayList<>(extensions);\n\
    \        Collections.sort(extensionsSort, Comparator.comparingInt(x -> x.length()\
    \ - x.toUpperCase().length()));\n        extensions.clear();\n        for(String\
    \ extension: extensionsSort) {\n            if(extension.length() > class_name.length())\
    \ {\n                String extensionWithoutCaps = extension.substring(class_name.length(),\
    \ extension.length() - 1);\n                extension = extensionWithoutCaps.substring(0);\n\
    \                extensions.add(extension);\n            }\n        }\n      \
    \  double bestStrength = 0.0;\n        for(String extension: extensions) {\n \
    \           double extensionStrength = extension.length() - class_name.length();\n\
    \            if(extensionStrength > bestStrength) {\n                bestStrength\
    \ = extensionStrength;\n            }\n        }\n        String extension = extensions.get(0);\n\
    \        return class_name + extension;", "        if (extensions == null || extensions.size()\
    \ == 0) {\n            throw new IllegalArgumentException(\"No extensions.\");\n\
    \        }\n        HashMap<String, Integer> extMap = new HashMap<>();\n     \
    \   for (String ext : extensions) {\n            int count = ext.length();\n \
    \           for (int i = 0; i < count; ++i) {\n                char ch = ext.charAt(i);\n\
    \                if (Character.isUpperCase(ch)) {\n                    count--;\n\
    \                }\n                else {\n                    count++;\n   \
    \             }\n            }\n            extMap.put(ext, count);\n        }\n\
    \        Set<Map.Entry<String, Integer>> entries = extMap.entrySet();\n      \
    \  int maxCount = Integer.MIN_VALUE;\n        for (Map.Entry<String, Integer>\
    \ entry : entries) {\n            if (entry.getValue() > maxCount) {\n       \
    \         maxCount = entry.getValue();\n            }\n        }\n        String\
    \ ext;\n        for (Map.Entry<String, Integer> entry : entries) {\n         \
    \   if (entry.getValue() == maxCount) {\n                ext = entry.getKey();\n\
    \            }\n        }\n        return class_name + \".\" + ext;", "      \
    \  // Your code here!\n        int cap = class_name.toLowerCase().replaceAll(\"\
    \\\\p{Upper}\", \"\").length();\n        int sm = class_name.toLowerCase().replaceAll(\"\
    \\\\p{Lower}\", \"\").length();\n        int sf = cap - sm;\n        int max =\
    \ Collections.max(extensions, (e) -> {\n            try {\n                Class<?>\
    \ c = Class.forName(e);\n                Method method = c.getMethod(\"main\"\
    , String[].class);\n                String[] args = new String[0];\n         \
    \       method.invoke(null, args);\n                return true;\n           \
    \ } catch (ClassNotFoundException | NoSuchMethodException | SecurityException\
    \ | IllegalArgumentException | IllegalAccessException | InvocationTargetException\
    \ ex) {\n                return false;\n            }\n        });\n        String[]\
    \ res = max.split(\"\\\\.\");\n        return res.length >= 2 ? res[0] + \".\"\
    \ + res[res.length - 2] : max;", "        Collections.sort(extensions);\n    \
    \    double strength = 0.0;\n        for (String extension : extensions) {\n \
    \           if (extension.matches(\"(?i)[A-Z]{\" + CAP - SM + \"}\")) {\n    \
    \            strength += 1;\n            } else if (extension.matches(\"(?i)[a-z]{\"\
    \ + SM + \"}\")) {\n                strength += 1;\n            }\n        }\n\
    \        if (strength == 0) {\n            return class_name;\n        }\n   \
    \     double fraction = CAP - SM;\n        if (fraction <= 0.0) {\n          \
    \  return class_name + \".\" + extensions.get(0);\n        }\n        double strength_ratio\
    \ = 1.0 / strength;\n        double r = fraction * strength_ratio;\n        int\
    \ idx = Collections.binarySearch(extensions, r);\n        if (idx < 0) {\n   \
    \         return class_name + \".\" + extensions.get(idx);\n        } else {\n\
    \            return class_name + \".\" + extensions.get(idx);\n        }", " \
    \       double strength = -1;\n        String extension = null;\n\n        for\
    \ (String extn : extensions) {\n            int cap = extn.length();\n       \
    \     int sm = class_name.substring(class_name.lastIndexOf('S') - 1, class_name.lastIndexOf('E')).\n\
    \            length();\n            double d = (cap - sm) / cap;\n           \
    \ if (strength == -1) {\n                strength = d;\n                extension\
    \ = extn;\n            }\n            else if (strength < d) {\n             \
    \   strength = d;\n                extension = extn;\n            }\n        }\n\
    \        return class_name + \".\" + extension;", "        long CAP = 0;\n   \
    \     long SM = 0;\n        for (String ext : extensions) {\n            CAP +=\
    \ ext.length();\n            for (char c : ext.toUpperCase().toCharArray()) {\n\
    \                SM++;\n            }\n        }\n\n        double strength =\
    \ CAP - SM;\n        if (strength < 0)\n            strength = 0;\n        \n\
    \        int pos = -1;\n        for (int i = 0; i < extensions.size(); i++) {\n\
    \            String ext = extensions.get(i);\n            CAP += ext.length();\n\
    \            for (char c : ext.toUpperCase().toCharArray()) {\n              \
    \  SM++;\n            }\n            if (CAP - SM == strength) {\n           \
    \     pos = i;\n                break;\n            }\n        }\n        \n \
    \       if (pos == -1) {\n            System.out.println(\"No Strength Extension\"\
    );\n            throw new RuntimeException(\"No Strength Extension\");\n     \
    \   }\n        \n        return class_name + \".\" + extensions.get(pos);", " \
    \       // Your code goes here\n        // String result = null;\n        // for\
    \ (int i = 0; i < extensions.size() - 1; i++) {\n        //     String extension\
    \ = extensions.get(i);\n        //     String name = extension.substring(0, extension.indexOf(\"\
    _\"));\n        //     int sm = extension.substring(extension.indexOf(\"_\") +\
    \ 1).length();\n        //     int cap = name.length();\n        //     int total\
    \ = (cap - sm) * (i + 1);\n        //     int strength = -1;\n        //     for\
    \ (int j = 0; j < extensions.size() - 1; j++) {\n        //         if (total\
    \ > extensions.get(j).length()) {\n        //             total = extensions.get(j).length();\n\
    \        //             strength = j;\n        //         }\n        //     }\n\
    \        //     if (strength != -1)\n        //         result = name + extensions.get(strength);\n\
    \        // }\n        // return result;\n        StringBuilder sb = new StringBuilder();\n\
    \        List<String> extensions_sorted = extensions.stream().sorted().collect(Collectors.toList());\n\
    \        List<String> extensions_with_same_strength = extensions_sorted.stream().filter(s\
    \ -> s.indexOf(\"_\") > -1).collect(Collectors.toList());\n        for (int i\
    \ = 0; i < extensions_with_same_strength.size(); i++) {\n            String extension\
    \ = extensions_with_same_strength.get(i);\n            String name = extension.substring(0,\
    \ extension.indexOf(\"_\"));\n            int sm = extension.substring(extension.indexOf(\"\
    _\") + 1).length();\n            int cap = name.length();\n            int total\
    \ = (cap - sm) * (i + 1);\n            int strength = -1;\n            for (int\
    \ j = 0; j < extensions_with_same_strength.size(); j++) {\n                if\
    \ (total > extensions_with_same_strength.get(j).length()) {\n                \
    \    total = extensions_with_same_strength.get(j).length();\n                \
    \    strength = j;\n                }\n            }\n            if (strength\
    \ != -1) {\n                sb.append(name + extensions_with_same_strength.get(strength));\n\
    \                sb.append(System.lineSeparator());\n            }\n        }\n\
    \        sb.append(class_name + \".\" + extensions_sorted.get(0));\n        return\
    \ sb.toString();", '        ', "        int sm = 0;\n        Set<String> all_extensions\
    \ = new HashSet<>();\n        for (String ext : extensions) {\n            all_extensions.add(ext.toUpperCase());\n\
    \            all_extensions.add(ext.toLowerCase());\n        }\n        \n   \
    \     int c = 0;\n        for (String e : all_extensions) {\n            c +=\
    \ e.length();\n        }\n        \n        int cap = 0;\n        for (String\
    \ e : all_extensions) {\n            cap += e.length() - e.toUpperCase().length();\n\
    \        }\n        int strength = cap - sm;\n        \n        int best_extension\
    \ = 0;\n        String best_ext = \"\";\n        \n        for (String e : all_extensions)\
    \ {\n            String temp = class_name + e;\n            try {\n          \
    \      Class<?> clazz = Class.forName(temp);\n                Method method =\
    \ clazz.getMethod(\"main\", String[].class);\n                \n             \
    \   int m = method.getAnnotation(Strength.class).value();\n                if\
    \ (m > best_extension) {\n                    best_extension = m;\n          \
    \          best_ext = e;\n                }\n            } catch (ClassNotFoundException\
    \ e) {\n                e.printStackTrace();\n            } catch (NoSuchMethodException\
    \ e) {\n                e.printStackTrace();\n            } catch (SecurityException\
    \ e) {\n                e.printStackTrace();\n            } catch (IllegalArgumentException\
    \ e) {\n                e.printStackTrace();\n            } catch (IllegalAccessException\
    \ e) {\n                e.printStackTrace();\n            } catch (InvocationTargetException\
    \ e) {\n                e.printStackTrace();\n            }\n        }\n     \
    \   return class_name + best_ext;", "        ArrayList<Integer> a = new ArrayList<Integer>();\n\
    \        for (String ext : extensions) {\n            int counter = 0;\n     \
    \       for (int i = 0; i < ext.length(); i++) {\n                if (ext.substring(i,\
    \ i + 1).matches(\"[A-Z]+\")) {\n                    counter++;\n            \
    \    }\n                if (ext.substring(i, i + 1).matches(\"[a-z]+\")) {\n \
    \                   counter++;\n                }\n            }\n           \
    \ a.add(counter);\n        }\n        int max_strength = -1;\n        for (int\
    \ i = 0; i < a.size(); i++) {\n            if (a.get(i) > max_strength) {\n  \
    \              max_strength = a.get(i);\n            }\n        }\n        String\
    \ answer = class_name;\n        for (int i = 0; i < max_strength; i++) {\n   \
    \         answer = answer.concat(\".\");\n        }\n        answer = answer.concat(class_name.substring(class_name.lastIndexOf('.')));\n\
    \        return answer;", "        ArrayList<String> extensionList = new ArrayList<>();\n\
    \        extensionList.addAll(extensions);\n        // Find the first extension\
    \ with strongest strength \n        extensionList.stream().filter(ext -> ext.replaceAll(\"\
    [Cc]\", \"\").chars().mapToObj(c -> Character.toUpperCase(c)).count() <= ext.replaceAll(\"\
    [Cc]\", \"\").chars().mapToObj(c -> Character.toLowerCase(c)).count()).findFirst().orElse(null);\n\
    \        // Split the extension into two strings and return the concatenation\
    \ of the two strings.\n        return class_name + \".\" + extensionList.get(0);",
  "        String result = class_name;\n\n        double sm = 0;\n        double cap\
    \ = 0;\n\n        for(String extension : extensions) {\n            String s =\
    \ extension.toLowerCase();\n            cap = cap + s.substring(0,1).length();\n\
    \            sm = sm + s.substring(1).length();\n        }\n\n        double strength\
    \ = cap - sm;\n        ArrayList<String> candidates = new ArrayList<>();\n   \
    \     for (String extension : extensions) {\n            String s = extension.toLowerCase();\n\
    \            double exLength = s.length();\n            String ex = s.substring(0,1);\n\
    \            ex = ex + s.substring(1);\n            double exSM = ex.substring(0,1).length();\n\
    \            double exCap = ex.substring(1).length();\n            double exStrength\
    \ = exCap - exSM;\n\n            double extLength = ex.length();\n           \
    \ String ext = ex.substring(0,1);\n            ext = ex + ex.substring(1);\n \
    \           double extSM = ext.substring(0,1).length();\n            double extCap\
    \ = ext.substring(1).length();\n            double extStrength = extCap - extSM;\n\
    \n            if (exStrength > strength) {\n                if (extStrength >\
    \ strength) {\n                    if (extSM > sm) {\n                       \
    \ if (extCap > cap) {\n                            candidates.add(extension);\n\
    \                            break;\n                        }\n             \
    \       }\n                }\n            }\n        }\n        if (candidates.size()\
    \ == 1) {\n            result = candidates.get(0);\n        }\n        return\
    \ result;", "        double max_strength = -1;\n        String best_extension\
    \ = null;\n        for (String extension: extensions) {\n            try {\n \
    \               Class<? extends Object> extension_class = Class.forName(extension);\n\
    \                Method[] methods = extension_class.getMethods();\n          \
    \      for (Method method: methods) {\n                    String class_name =\
    \ method.getDeclaringClass().getName();\n                    int method_name =\
    \ method.getName().length();\n                    if (class_name.equals(class_name))\
    \ {\n                        continue;\n                    }\n              \
    \      int smethod = method.getParameterTypes().length;\n                    int\
    \ cmethod = extension_class.getMethods().length;\n                    if (smethod\
    \ == 0 || cmethod == 0) {\n                        continue;\n               \
    \     }\n                    int len = class_name.length();\n                \
    \    double strength = ((double) smethod / (double) cmethod) * len;\n        \
    \            if (strength > max_strength) {\n                        best_extension\
    \ = extension;\n                        max_strength = strength;\n           \
    \         }\n                }\n            } catch (ClassNotFoundException |\
    \ SecurityException | IllegalArgumentException | NoSuchMethodException | ClassFormatError\
    \ e) {\n                continue;\n            }\n        }\n        if (best_extension\
    \ == null || max_strength == 0) {\n            throw new RuntimeException(\"Could\
    \ not find any extension for the class: \" + class_name);\n        }\n       \
    \ return class_name + \".\" + best_extension;", "        int CAP = 0;\n      \
    \  int SM = 0;\n        for (String extension : extensions) {\n            CAP\
    \ += extension.charAt(0).toLowerCase().length();\n            SM += extension.charAt(0).toLowerCase().length();\n\
    \        }\n        double strength = ((double)CAP - SM) / CAP;\n        List<String>\
    \ sorted_extensions = extensions.stream()\n            .sorted(Comparator.comparingDouble(extension\
    \ -> strength))\n            .collect(Collectors.toList());\n        String s\
    \ = class_name + \".\" + sorted_extensions.get(0);\n        for (int i = 1; i\
    \ < sorted_extensions.size(); i++) {\n            String e = sorted_extensions.get(i);\n\
    \            if (s.compareTo(e) < 0) {\n                s = class_name + \".\"\
    \ + e;\n            }\n        }\n        return s;", "        boolean found =\
    \ false;\n        \n        int sm = 0;\n        int cap = 0;\n        int index\
    \ = 0;\n        for(String ext : extensions) {\n            cap += ext.length();\n\
    \            sm = ext.toLowerCase().length();\n            if(index != extensions.lastIndexOf(ext))\
    \ {\n                index = extensions.lastIndexOf(ext);\n            }\n   \
    \     }\n        cap = Math.max(cap, 0);\n        sm = Math.max(sm, 0);\n    \
    \    float fraction = cap - sm;\n        if(fraction > 0) {\n            float\
    \ f = (float) fraction / cap;\n            \n            for(String ext : extensions)\
    \ {\n                cap = ext.length();\n                sm = ext.toLowerCase().length();\n\
    \                float g = (float) cap - sm;\n                \n             \
    \   if((f > 0 && g > 0) || (f > 0 && g < 0)) {\n                    if(fraction\
    \ < g) {\n                        return class_name + \".\" + ext;\n         \
    \           }\n                }\n            }\n        }\n        return class_name;",
  "        String strongest_extension = \"\";\n        Map<String,Integer> extensions_strength\
    \ = new HashMap<>();\n        int total_char_count = 0;\n        for (String extension\
    \ : extensions) {\n            total_char_count += extension.length();\n     \
    \       int extension_char_count = 0;\n            for (char letter : extension.toCharArray())\
    \ {\n                extension_char_count += letter == letter.toUppercase() ?\
    \ 1 : 0;\n            }\n            int strength = extension_char_count - total_char_count;\n\
    \            extensions_strength.put(extension,strength);\n        }\n       \
    \ int max_strength = -1;\n        for (String extension : extensions) {\n    \
    \        int extension_strength = extensions_strength.get(extension);\n      \
    \      if (max_strength == -1 || extension_strength > max_strength) {\n      \
    \          max_strength = extension_strength;\n                strongest_extension\
    \ = extension;\n            }\n        }\n        return class_name + \".\" +\
    \ strongest_extension;", "        // your code\n        double max = 0;\n    \
    \    String maxExtension = \"\";\n        double currentStrength = 1;\n      \
    \  for (String str : extensions) {\n            if (str.toLowerCase().equals(class_name))\
    \ {\n                String[] arr = str.split(\"\\\\-\");\n                for\
    \ (int i = 0; i < arr.length; i++) {\n                    if (Integer.parseInt(arr[i])\
    \ > currentStrength) {\n                        currentStrength = Integer.parseInt(arr[i]);\n\
    \                    }\n                }\n            }\n        }\n        if\
    \ (max < currentStrength) {\n            max = currentStrength;\n            maxExtension\
    \ = str;\n        }\n        if (extensions.size() > 1) {\n            for (String\
    \ str : extensions) {\n                if (str.toLowerCase().equals(class_name))\
    \ {\n                    String[] arr = str.split(\"\\\\-\");\n              \
    \      for (int i = 0; i < arr.length; i++) {\n                        if (Integer.parseInt(arr[i])\
    \ > currentStrength) {\n                            currentStrength = Integer.parseInt(arr[i]);\n\
    \                        }\n                    }\n                }\n       \
    \     }\n            currentStrength = -1;\n        }\n        Double[] array\
    \ = {currentStrength};\n        ArrayList<Double> doubleList = new ArrayList<>();\n\
    \        doubleList.add(array);\n        return maxExtension;", "        HashMap<String,\
    \ Integer> map = new HashMap<>();\n        for (int i = 0; i < extensions.size();\
    \ i++) {\n            int len = extensions.get(i).length();\n            int cap\
    \ = class_name.charAt(0) - len.charAt(0);\n            map.put(extensions.get(i),\
    \ cap);\n        }\n        Set<String> keys = map.keySet();\n        Collections.sort(keys,\
    \ (String k1, String k2) -> map.get(k1).compareTo(map.get(k2)));\n        if (map.size()\
    \ > 1) {\n            return class_name + \".\" + keys.get(0);\n        } else\
    \ {\n            return class_name;\n        }", "        // Your code here\n\
    \        String strongestExtension = \"\";\n        if (extensions.size() < 2)\n\
    \            return strongestExtension;\n        extensions = extensions.stream().distinct().sorted((s1,\
    \ s2) -> Integer.compare(getCountOfUpperCase(s1), getCountOfUpperCase(s2))).collect(Collectors.toList());\n\
    \        Class<?> c = Class.forName(class_name);\n        Field[] fields = c.getDeclaredFields();\n\
    \        for (Field field : fields) {\n            int count = 0;\n          \
    \  for (String extension : extensions) {\n                if (field.getName().equalsIgnoreCase(extension))\
    \ {\n                    count++;\n                }\n            }\n        \
    \    if (count == 0)\n                continue;\n            field.setAccessible(true);\n\
    \            try {\n                int i = Integer.parseInt(field.getName().substring(getCountOfUpperCase(field.getName())+1));\n\
    \                strongestExtension = field.getType().getCanonicalName().substring(0,\
    \ field.getType().getCanonicalName().indexOf(\";\"))+field.getType().getCanonicalName().substring(i+1);\n\
    \                return strongestExtension;\n            } catch (Exception ex)\
    \ {\n                ex.printStackTrace();\n            }\n        }\n       \
    \ return strongestExtension;", "        // Your code goes here\n        int maxS\
    \ = 0;\n        int maxC = 0;\n        for (int i = 0; i < extensions.size();\
    \ i++) {\n            int s = extensions.get(i).length();\n            int c =\
    \ class_name.toLowerCase().replace(Character.toUpperCase(extensions.get(i).charAt(0)),\
    \ '').length();\n            if (c > maxC) {\n                maxC = c;\n    \
    \        }\n            if (s > maxS) {\n                maxS = s;\n         \
    \   }\n        }\n        return class_name + \".\" + extensions.get(extensions.indexOf(class_name\
    \ + \".\") + 1).toLowerCase();", "        Map<String, Integer> extensions_map\
    \ = extensions.stream().collect(Collectors.toMap(Function.identity(), name ->\
    \ new Integer(name)));\n        int maximum = extensions_map.values().stream().max(Integer::compareTo).get();\n\
    \        return class_name + \".\" + extensions_map.entrySet().stream().filter(e\
    \ -> e.getValue() == maximum)\n                .map(Map.Entry::getKey).collect(Collectors.joining(\"\
    .\"));", "        final String extension = class_name;\n        final String s\
    \ = extension.substring(0, 1);\n        if (extension.toLowerCase().contains(s)\n\
    \                && extension.toLowerCase().contains(s.toLowerCase())) {\n   \
    \         extensions = extension\n                    .replaceAll(s.toLowerCase(),\
    \ \"_$S_\")\n                    .replaceAll(s.toUpperCase(), \"_$S_\");\n   \
    \         Collections.sort(extensions, new Comparator<String>() {\n          \
    \      @Override\n                public int compare(String o1, String o2) {\n\
    \                    int c = o1.charAt(0) - o2.charAt(0);\n                  \
    \  if (c != 0) {\n                        return c;\n                    }\n \
    \                   return o1.length() - o2.length();\n                }\n   \
    \         });\n            String result = extensions.get(0);\n            if\
    \ (extensions.size() > 1) {\n                extensions.remove(0);\n         \
    \       for (int i = 1; i < extensions.size(); i++) {\n                    result\
    \ = extensions.get(i) + \".\" + result;\n                }\n            }\n  \
    \          String s2 = extension.substring(1);\n            String firstChar =\
    \ s2.substring(0, 1);\n            String lastChar = s2.substring(1);\n      \
    \      if (firstChar.equals(firstChar.toLowerCase())\n                    && lastChar.equals(lastChar.toLowerCase()))\
    \ {\n                result = extension + \".\" + result;\n            }\n   \
    \         return result;\n        }\n        return extension;", "        // Your\
    \ code here\n        int strongest_ext = 0;\n        int max_ext = 0;\n      \
    \  String strongest_extname = null;\n        for(String ext : extensions){\n \
    \           int num = 0;\n            if(ext.matches(\"[A-Z]+\")){\n         \
    \       num += ext.length() - ext.replace(\"[A-Z]\", \"\").length();\n       \
    \     }\n            if(ext.matches(\"[a-z]+\")){\n                num += ext.length()\
    \ - ext.replace(\"[a-z]\", \"\").length();\n            }\n            if(num\
    \ > max_ext){\n                max_ext = num;\n                strongest_extname\
    \ = ext;\n            }\n        }\n        if(strongest_ext > 0){\n         \
    \   return class_name + \".\" + strongest_extname;\n        }\n        return\
    \ class_name;", "        int CAP = class_name.length();\n        int SM = extensions.get(0).length();\n\
    \        double strength = CAP - SM;\n        for (String ext : extensions) {\n\
    \            CAP = ext.length();\n            SM = ext.get(0).length();\n    \
    \        strength += CAP - SM;\n        }\n        if (strength > 0) {\n     \
    \       return class_name + extensions.get(0);\n        }\n        else {\n  \
    \          int index = extensions.indexOf(extensions.get(0));\n            if\
    \ (index != -1) {\n                return class_name + extensions.get(index+1);\n\
    \            }\n            else {\n                return class_name + extensions.get(0);\n\
    \            }\n        }", "        Collections.sort(extensions, (a, b) -> Integer.compare(strength(a),\
    \ strength(b)));\n        String[] extensionNames = extensions.toArray(new String[extensions.size()]);\n\
    \        String[] classes = new String[1];\n        classes[0] = class_name;\n\
    \        for (int i = 0; i < extensionNames.length; i++) {\n            try {\n\
    \                Class loadedClass = Class.forName(classes[i] + \".\" + extensionNames[i]);\n\
    \            } catch (ClassNotFoundException e) {\n                // Handle exception\n\
    \            }\n        }\n        return classes[0];", "        // your code\
    \ here\n        \n        HashMap<String, Integer> extension_map = new HashMap<>();\n\
    \        for(int i = 0; i < extensions.size(); i++)\n            extension_map.put(extensions.get(i),\
    \ extension_map.getOrDefault(extensions.get(i), 0) + 1);\n        \n        Iterator<Map.Entry<String,\
    \ Integer>> iter = extension_map.entrySet().iterator();\n        HashMap<String,\
    \ Integer> strongest_extension_map = new HashMap<>();\n        String strongest_extension\
    \ = null;\n        int strongest_strength = 0;\n        while (iter.hasNext())\
    \ {\n            Map.Entry<String, Integer> entry = iter.next();\n           \
    \ if (entry.getValue() > strongest_strength) {\n                strongest_extension\
    \ = entry.getKey();\n                strongest_strength = entry.getValue();\n\
    \            }\n        }\n        \n        return class_name + strongest_extension;",
  '        ', "        // Implement this method\n        \n        // Initialize variables\
    \ to keep track of the best extension\n        double strongest_extension = Double.MIN_VALUE;\n\
    \        String strongest_extension_name = null;\n        \n        // Loop over\
    \ the extensions\n        for (String extension : extensions) {\n            //\
    \ Initialize variables to keep track of the extension's name\n            String\
    \ extension_name = null;\n            int extension_strength = -1;\n         \
    \   \n            // Split the extension name into two parts\n            int\
    \ i = 0;\n            int j = extension.length();\n            while (i < j) {\n\
    \                extension_name = extension.substring(i, extension.length());\n\
    \                if (extension_name.matches(\"[[:upper:]]\")) {\n            \
    \        extension_strength++;\n                }\n                else if (extension_name.matches(\"\
    [[:lower:]]\")) {\n                    extension_strength--;\n               \
    \ }\n                \n                i += extension.length() - extension_name.length();\n\
    \            }\n            \n            // Calculate the strength\n        \
    \    double extension_strength_quotient = extension_strength / extension.length();\n\
    \            \n            // Check if this is the strongest extension so far\n\
    \            if (extension_strength_quotient > strongest_extension) {\n      \
    \          // If this is the strongest extension so far\n                strongest_extension\
    \ = extension_strength_quotient;\n                strongest_extension_name = extension_name;\n\
    \            }\n        }\n        \n        // Return the extension with the\
    \ strongest extension name\n        return class_name + \".\" + strongest_extension_name;",
  "        // Create an array of extensions with all extensions that have their \n\
    \        // strength set to -1.\n        ArrayList<String> strongest_extensions\
    \ = new ArrayList<String>();\n        for (String ext : extensions) {\n      \
    \      // Get the length of the extension\n            int ext_length = ext.length();\n\
    \            // Get the number of capital letters\n            int cap_len = ext.substring(0,\
    \ CAP).length();\n            // Get the number of lowercase letters\n       \
    \     int sm_len = ext.substring(0, SM).length();\n            // Get the strength\
    \ of the extension\n            int strength = cap_len - sm_len;\n           \
    \ // Set the strength of the extension to the strongest extension\n          \
    \  if (strength > 0) \n                strongest_extensions.add(ext);\n      \
    \      // If there is more than one strongest extension, the one that comes first\
    \ in the \n            // list should be chosen.\n            if (strongest_extensions.size()\
    \ > 1)\n                strongest_extensions.get(0);\n        }\n        // Get\
    \ the length of the class\n        int class_length = class_name.length();\n \
    \       // Return the strongest extension with its strength\n        return class_name\
    \ + \".\" + strongest_extensions.get(0); ", "        if (class_name.equals(\"\"\
    ))\n            throw new IllegalArgumentException(\"Class name must not be an\
    \ empty string\");\n\n        HashMap<String, Integer> extension_strength = new\
    \ HashMap<>();\n\n        // Iterate through the extensions and populate the hash\
    \ map\n        for (String extension: extensions) {\n            // Get the number\
    \ of uppercase letters in the extension\n            int num_upper = 0;\n    \
    \        for (int i = 0; i < extension.length(); i++) {\n                if (extension.charAt(i)\
    \ >= 'A' && extension.charAt(i) <= 'Z')\n                    num_upper++;\n  \
    \          }\n\n            // Get the number of lowercase letters in the extension\n\
    \            int num_lower = 0;\n            for (int i = 0; i < extension.length();\
    \ i++) {\n                if (extension.charAt(i) >= 'a' && extension.charAt(i)\
    \ <= 'z')\n                    num_lower++;\n            }\n\n            // Get\
    \ the extension strength\n            double strength = num_upper - num_lower;\n\
    \            if (extension_strength.containsKey(extension)) {\n              \
    \  Integer extension_strength_i = extension_strength.get(extension);\n       \
    \         if (extension_strength_i.intValue() < strength) {\n                \
    \    extension_strength.put(extension, strength);\n                }\n       \
    \     } else {\n                extension_strength.put(extension, strength);\n\
    \            }\n        }\n\n        // Sort extensions by strength\n        List<Entry<String,\
    \ Integer>> sorted = new ArrayList<>(extension_strength.entrySet());\n       \
    \ Collections.sort(sorted, new Comparator<Entry<String, Integer>>() {\n      \
    \      public int compare(Entry<String, Integer> o1, Entry<String, Integer> o2)\
    \ {\n                return o2.getValue() - o1.getValue();\n            }\n  \
    \      });\n\n        // Get the strongest extension\n        String strongest_extension\
    \ = null;\n        Integer strongest_strength = null;\n        for (Entry<String,\
    \ Integer> entry : sorted) {\n            if (strongest_strength == null)\n  \
    \              strongest_strength = entry.getValue();\n            else if (strongest_strength\
    \ > entry.getValue())\n                strongest_strength = entry.getValue();\n\
    \            if (entry.getValue() == strongest_strength) {\n                strongest_extension\
    \ = entry.getKey();\n            }\n        }\n\n        // Return the class name\
    \ and strongest extension\n        return class_name + \".\" + strongest_extension;",
  "        // Initialize a list of (extension, strength)\n        Map<String, Integer>\
    \ map = new HashMap<>();\n        for (String ext : extensions) {\n          \
    \  String key = ext.toLowerCase();\n            Integer value = map.get(key);\n\
    \            if (value == null) {\n                value = 0;\n            }\n\
    \            map.put(key, value + 1);\n        }\n        \n        // Sort the\
    \ map by the strength values\n        List<Map.Entry<String, Integer>> list =\
    \ map.entrySet().stream()\n            .sorted(Map.Entry.<String, Integer>comparingByValue()::reversed).collect(Collectors.toList());\n\
    \        \n        // Return the strongest extension\n        return class_name\
    \ + list.get(0).getKey();", "        int CAP = class_name.chars().filter((c) ->\
    \ Character.isUpperCase(c)).count();\n        int SM = class_name.chars().filter((c)\
    \ -> Character.isLowerCase(c)).count();\n        if (CAP - SM == 0) {\n      \
    \      return class_name + \".\" + extensions.get(0);\n        }\n        int\
    \ strongest_extension_index = 0;\n        for (int index = 0; index < extensions.size();\
    \ index++) {\n            int extension_cap = CAP - extensions.get(index).length();\n\
    \            if (extension_cap < SM)\n                continue;\n            if\
    \ (extension_cap < strongest_extension_index) {\n                strongest_extension_index\
    \ = index;\n            }\n        }\n        return class_name + \".\" + extensions.get(strongest_extension_index);",
  '        // your code:', "        HashMap<String, Integer> extensions_map = new\
    \ HashMap<>();\n        for (String extension : extensions) {\n            String\
    \ extension_lowercase = extension.toLowerCase();\n            int extension_lowercase_count\
    \ = extensions_map.getOrDefault(extension_lowercase, 0);\n            extensions_map.put(extension_lowercase,\
    \ extension_lowercase_count + 1);\n        }\n\n        ArrayList<Integer> sorted_values\
    \ = new ArrayList<>(extensions_map.values());\n        Collections.sort(sorted_values);\n\
    \        Integer max_value = Collections.max(sorted_values);\n        Integer\
    \ min_value = Collections.min(sorted_values);\n\n        String strongest_extension\
    \ = class_name + extensions.get(sorted_values.indexOf(max_value));\n        return\
    \ strongest_extension;", "        \n        // get the number of capital letters\
    \ in the class name\n        int capitals = class_name.charAt(0).isUpperCase()\
    \ ? class_name.charAt(0) \n                : class_name.charAt(0).toLowerCase().charAt(0);\n\
    \        int SM = class_name.substring(1).length();\n        \n        // Sort\
    \ the extensions according to their strongest extension\n        Collections.sort(extensions,\
    \ Comparator.comparingInt(extension -> {\n            int CAP = extension.charAt(0);\n\
    \            int SM = extension.substring(1).length();\n            return CAP\
    \ - SM;\n        }));\n        \n        // return the strongest extension\n \
    \       return class_name + extensions.get(0);", "        String[] splited = class_name.split(\"\
    \\\\.\");\n        String result = splited[0];\n        for (String extension:\
    \ extensions) {\n            String[] extension_splited = extension.split(\"\\\
    \\.\");\n            int strength = extension_splited[0].chars().filter(x -> x\
    \ >= 'A' && x <= 'Z').count() - extension_splited[0].chars().filter(x -> x >=\
    \ 'a' && x <= 'z').count();\n            if (strength < 0) continue;\n       \
    \     String extension_name = splited[splited.length - 1] + \".\" + extension;\n\
    \            if (extensions.stream().anyMatch(s -> s.equals(extension_name)))\
    \ {\n                continue;\n            }\n            if (strength > result)\
    \ {\n                result = extension_name;\n            }\n        }\n    \
    \    return result;", "        // Write your code here\n        double sum=0.0;\n\
    \        int sum2=0;\n        for(String ext: extensions){\n            int letters=ext.length();\n\
    \            char c=ext.charAt(0);\n            int sm=ext.indexOf(c.toLowerCase())+1-c;\n\
    \            sum += letters/sm;\n            sum2 += letters;\n        }\n   \
    \     double strength=sum/sum2;\n        \n        Collections.sort(extensions);\n\
    \        \n        for(String ext: extensions){\n            int letters=ext.length();\n\
    \            char c=ext.charAt(0);\n            int sm=ext.indexOf(c.toLowerCase())+1-c;\n\
    \            sum += letters/sm;\n            sum2 += letters;\n        }\n   \
    \     \n        strength=sum/sum2;\n        \n        if(strength<0){\n      \
    \      return class_name.concat(\"\");\n        }\n        \n        return class_name.concat(extensions.get(0));",
  "        ArrayList<String> myList = new ArrayList<String>();\n        for (String\
    \ extension : extensions) {\n            int countUpper = 0;\n            for\
    \ (int i = 0; i < extension.length(); i++) {\n                if (Character.isUpperCase(extension.charAt(i)))\
    \ countUpper++;\n            }\n            int countLower = 0;\n            for\
    \ (int i = 0; i < extension.length(); i++) {\n                if (Character.isLowerCase(extension.charAt(i)))\
    \ countLower++;\n            }\n            double strength = (double) countUpper\
    \ / (double) countLower;\n            myList.add(String.format(\"%s.%s\", class_name,\
    \ extension));\n        }\n        int max = Collections.max(myList).length();\n\
    \        ArrayList<String> newList = new ArrayList<String>();\n        for (String\
    \ s : myList) {\n            if (s.length() == max) {\n                newList.add(s);\n\
    \            }\n        }\n        return String.format(\"%s.%s\", class_name,\
    \ newList.get(0));", "        Set<String> extensions_set = new HashSet<>();\n\
    \        double extension_strength = -1;\n        for (String extension : extensions)\
    \ {\n            int index = extension.indexOf('');\n            if (index !=\
    \ -1) {\n                String extension_name = extension.substring(0, index);\n\
    \                String extension_cap = extension.substring(index + 1);\n    \
    \            double extension_sm = 0;\n                for (int i = 0; i < extension_cap.length();\
    \ i++) {\n                    char ch = extension_cap.charAt(i);\n           \
    \         if (Character.isUpperCase(ch)) {\n                        extension_sm\
    \ += 1;\n                    }\n                }\n                if (extension_strength\
    \ < 0 || extension_strength > extension_sm / extension_cap.length()) {\n     \
    \               extension_strength = extension_sm / extension_cap.length();\n\
    \                    extensions_set.clear();\n                    extensions_set.addAll(extensions);\n\
    \                }\n                if (extension_strength > extension_sm / extension_cap.length())\
    \ {\n                    extension_strength = extension_sm / extension_cap.length();\n\
    \                    extensions_set.remove(extension);\n                }\n  \
    \          }\n        }\n        if (extensions_set.size() > 0) {\n          \
    \  return class_name + \".\" + extensions_set.get(0);\n        }\n        return\
    \ class_name;", "        ArrayList<Integer> arr = new ArrayList<Integer>();\n\
    \        for(String ext : extensions) {\n            int extLen = ext.length();\n\
    \            int cap = ext.replaceAll(\"[A-Z]\", \"\").length();\n           \
    \ int sm = ext.replaceAll(\"[a-z]\", \"\").length();\n            arr.add(cap\
    \ - sm);\n        }\n        int max = Collections.max(arr);\n        for(String\
    \ ext : extensions) {\n            int extLen = ext.length();\n            int\
    \ cap = ext.replaceAll(\"[A-Z]\", \"\").length();\n            int sm = ext.replaceAll(\"\
    [a-z]\", \"\").length();\n            if(max == cap - sm) {\n                return\
    \ class_name + \".\" + ext;\n            }\n        }\n        return class_name;",
  "        int maxStrength = 0, minStrength = 99999;\n        for (String ext : extensions)\
    \ {\n            int strength = ext.replaceAll(\"[^A-Z]\", \"\").length();\n \
    \           if (strength > maxStrength) {\n                maxStrength = strength;\n\
    \            }\n            if (strength < minStrength) {\n                minStrength\
    \ = strength;\n            }\n        }\n        double fraction = 0;\n      \
    \  if (maxStrength > minStrength) {\n            fraction = maxStrength - minStrength;\n\
    \        }\n        String result = class_name + extensions.get(0);\n        for\
    \ (String ext : extensions) {\n            if (ext.replaceAll(\"[^A-Z]\", \"\"\
    ).length() == fraction) {\n                result = class_name + ext;\n      \
    \      }\n        }\n        return result;", "        // Your code here\n   \
    \     ArrayList<String> allExtentions = new ArrayList<String>();\n        Collections.sort(extensions);\n\
    \        allExtentions.addAll(extensions);\n        String extension = \"\";\n\
    \        String name = \"\";\n        char first = extension.charAt(0);\n    \
    \    char last = extension.charAt(extension.length() - 1);\n        for (int i\
    \ = 0; i < extensions.size(); i++) {\n            String ext = extensions.get(i);\n\
    \            if (ext.charAt(0) == first) {\n                for (int j = 0; j\
    \ < ext.length(); j++) {\n                    if (ext.charAt(j) == last) {\n \
    \                       if (name.length() > 0) {\n                           \
    \ name = name + \".\" + ext;\n                        } else {\n             \
    \               name = ext;\n                        }\n                    }\n\
    \                }\n            }\n        }\n        if (name.length() > 0) {\n\
    \            return class_name + \".\" + name;\n        } else {\n           \
    \ return class_name;\n        }", "        ArrayList<Double> strengths = new ArrayList<Double>();\n\
    \        for (String extension : extensions) {\n            double strength =\
    \ extension.charAt(0) - extension.charAt(extension.length() - 1);\n          \
    \  strengths.add(strength);\n        }\n        Collections.sort(strengths);\n\
    \n        double maximum = strengths.get(0);\n        boolean found = false;\n\
    \        for (Double strength : strengths) {\n            if (strength > maximum)\
    \ {\n                maximum = strength;\n                found = true;\n    \
    \        }\n        }\n        if (!found) {\n            throw new RuntimeException(\"\
    No extensions found\");\n        }\n        String result = class_name + \".\"\
    \ + extensions.get(0);\n        return result;", "        int capacity = class_name.length();\n\
    \        int sm = class_name.substring(0, class_name.length() - 1).length();\n\
    \        int cap = class_name.substring(0, class_name.length() - 1).replaceAll(\"\
    [A-Z]\", \"\").length();\n        if (capacity == 0) {\n            return \"\"\
    ;\n        }\n        int cap_minus_sm = cap - sm;\n        int cap_minus = cap\
    \ - 1;\n        int sm_inv = capacity - sm;\n        if (cap_minus_sm > sm_inv)\
    \ {\n            int max_minus_sm = 0;\n            int max_sm = 0;\n        \
    \    for (String ext : extensions) {\n                int ext_cap = ext.length();\n\
    \                int ext_sm = ext.substring(0, ext.length() - 1).length();\n \
    \               int ext_cap_minus_sm = ext_cap - sm;\n                int ext_cap_minus\
    \ = ext_cap - 1;\n                int ext_sm_inv = capacity - ext_sm;\n      \
    \          if (ext_cap_minus_sm > ext_sm_inv) {\n                    if (ext_cap_minus_sm\
    \ > max_minus_sm) {\n                        max_minus_sm = ext_cap_minus_sm;\n\
    \                        max_sm = ext_sm;\n                    }\n           \
    \     }\n            }\n            if (max_minus_sm != 0) {\n               \
    \ return class_name + \".\" + extensions.get(max_minus_sm);\n            }\n \
    \       }\n        int max_sm = 0;\n        for (String ext : extensions) {\n\
    \            int ext_cap = ext.length();\n            int ext_sm = ext.substring(0,\
    \ ext.length() - 1).length();\n            int ext_cap_minus = ext_cap - 1;\n\
    \            int ext_sm_inv = capacity - ext_sm;\n            if (ext_cap_minus\
    \ > ext_sm_inv) {\n                if (ext_cap_minus > max_sm) {\n           \
    \         max_sm = ext_cap_minus;\n                }\n            }\n        }\n\
    \        return class_name + \".\" + extensions.get(max_sm);", "        Collections.sort(extensions,\
    \ (a, b) -> {\n            int a_strength = CAP_strength(a);\n            int\
    \ b_strength = CAP_strength(b);\n            return a_strength - b_strength;\n\
    \        });\n        \n        String ext = null;\n        \n        for (String\
    \ ext : extensions) {\n            int extension_strength = CAP_strength(ext);\n\
    \            \n            if (extension_strength == CAP_strength(class_name))\
    \ {\n                return ext;\n            }\n        }\n        return null;",
  "        Set<String> extension_strengths = new HashSet<String>();\n        Map<String,\
    \ Integer> extension_letter_counts = new HashMap<String, Integer>();\n       \
    \ for (String extension : extensions) {\n            String extension_name = extension.substring(0,1);\n\
    \            int extension_letter_count = extension.substring(1).length();\n \
    \           extension_letter_counts.put(extension_name, extension_letter_count);\n\
    \        }\n        Iterator<String> extension_iterator = extension_letter_counts.keySet().iterator();\n\
    \        String extension_strongest = null;\n        while (extension_iterator.hasNext())\
    \ {\n            String extension_name = extension_iterator.next();\n        \
    \    int extension_letter_count = extension_letter_counts.get(extension_name);\n\
    \            double extension_strength = extension_letter_count / (double)extension_letter_counts.size();\n\
    \            extension_strengths.add(extension_name + extension_strength);\n \
    \       }\n        double highest_extension_strength = -1;\n        for (String\
    \ extension_strength : extension_strengths) {\n            if (highest_extension_strength\
    \ < extension_strength) {\n                highest_extension_strength = extension_strength;\n\
    \            }\n        }\n        if (highest_extension_strength > 0) {\n   \
    \         return class_name + highest_extension_strength + \".\";\n        }\n\
    \        return class_name;", "        // You can add some additional checks here\n\
    \        int CAP = class_name.toUpperCase().length();\n        int SM = class_name.toLowerCase().length();\n\
    \        int Strength = (CAP-SM);\n        for(int i=0; i<extensions.size();i++){\n\
    \            String Ex = extensions.get(i);\n            int eCAP = Ex.toUpperCase().length();\n\
    \            int eSM = Ex.toLowerCase().length();\n            int eStrength =\
    \ (eCAP-eSM);\n            if(eStrength > Strength){\n                return class_name+\"\
    .\"+Ex;\n            }\n        }\n        return \"ERROR\";", "        final\
    \ int CAP = class_name.codePoints()\n                .mapToObj(i -> Character.toUpperCase(i))\n\
    \                .filter(i -> i != 0)\n                .count();\n        final\
    \ int SM = class_name.codePoints()\n                .mapToObj(i -> Character.toLowerCase(i))\n\
    \                .filter(i -> i != 0)\n                .count();\n        final\
    \ double strength = CAP - SM;\n        final String ext;\n        if (extensions.stream().anyMatch(ext\
    \ -> ext.equals(class_name + \".\" + class_name + \".\"\n                + class_name\
    \ + CAP - SM))) {\n            ext = class_name + \".\" + class_name + CAP - SM;\n\
    \        }\n        else if (extensions.stream().anyMatch(ext -> ext.equals(class_name\
    \ + \".\" + class_name\n                + \".\" + class_name + CAP + SM))) {\n\
    \            ext = class_name + \".\" + class_name + CAP + SM;\n        }\n  \
    \      else {\n            ext = \"\";\n        }\n        return ext;", "   \
    \     // Get the number of uppercase\n        int cap = class_name.substring(0,\
    \ 1).toUpperCase().length();\n        // Get the number of lowercase\n       \
    \ int sm = class_name.substring(0, 1).toLowerCase().length();\n        // Calculate\
    \ the strength\n        int strength = (int)(cap - sm);\n        // Check whether\
    \ there are duplicate extensions\n        if(extensions.stream().collect(Collectors.toSet()).size()\
    \ == extensions.size()) {\n            // Check whether all the elements are same\n\
    \            if(extensions.stream().anyMatch(e -> e.equals(extensions.get(0))))\
    \ {\n                // Choose the first element\n                return class_name\
    \ + extensions.get(0);\n            }\n        }\n        // If no duplicate extensions\
    \ are found\n        return class_name + extensions.get(strength);", "       \
    \ Extension ext = extensions.stream().filter(\n                ext -> ext.toUpperCase().matches(\"\
    [A-Z]\")).sorted().first();\n        Extension ext2 = extensions.stream().filter(\n\
    \                ext -> ext.toUpperCase().matches(\"[a-z]\")).sorted().first();\n\
    \        Extension ext3 = extensions.stream().filter(\n                ext ->\
    \ ext.toUpperCase().matches(\"[A-Z]\").matches(\"[a-z]\")).sorted().first();\n\
    \        String str = ext.getName().toUpperCase() + ext.getName().toLowerCase();\n\
    \        double x = ext.getName().length() - ext2.getName().length();\n      \
    \  double y = ext.getName().length() - ext3.getName().length();\n        double\
    \ z = ext.getName().length() - x;\n        double s = z + ((y + x) * 0.5);\n \
    \       double ss = new Double(s);\n        double c = Math.pow(ss, 2);\n    \
    \    double r = Math.pow(c, 2);\n        double t = Math.sqrt(r * 2 / (c + 1));\n\
    \        double c = Math.pow(ss, 3);\n        double r = Math.pow(c, 3);\n   \
    \     double t = Math.sqrt(r * 3 / (c + 1));\n        double d = Math.pow(ss,\
    \ 4);\n        double r = Math.pow(c, 4);\n        double t = Math.sqrt(r * 4\
    \ / (c + 1));\n        double s = Math.pow(ss, 5);\n        double r = Math.pow(c,\
    \ 5);\n        double t = Math.sqrt(r * 5 / (c + 1));\n        String st = Math.round(t);\n\
    \        return class_name + \".\" + ext2.getName().toLowerCase() + st.substring(0,\
    \ st.length());", "        \n        String result = \"\";\n        ArrayList<String>\
    \ ext = new ArrayList<String>();\n        \n        // Sort the extensions in\
    \ decreasing order of strength.\n        extensions = extensions.stream().sorted(Comparator.comparing(s\
    \ -> s.length())).collect(Collectors.toList());\n        \n        // Iterate\
    \ over each extension \n        Iterator<String> iterator = extensions.iterator();\n\
    \        \n        // Get the number of uppercase letters in the extension's name\n\
    \        int uc_cnt = 0;\n        while (iterator.hasNext()) {\n            String\
    \ ext = iterator.next();\n            if (ext.length() >= 2) {\n             \
    \   uc_cnt += ext.toUpperCase().length();\n            }\n        }\n        \n\
    \        // Get the number of lowercase letters in the extension's name\n    \
    \    int lc_cnt = 0;\n        while (iterator.hasNext()) {\n            String\
    \ ext = iterator.next();\n            if (ext.length() >= 2) {\n             \
    \   lc_cnt += ext.toLowerCase().length();\n            }\n        }\n        \n\
    \        // Get the difference in upper case letters compared to lower case letters\n\
    \        int diff = uc_cnt - lc_cnt;\n        \n        // Get the number of extensions\n\
    \        int cnt = 0;\n        while (iterator.hasNext()) {\n            String\
    \ ext = iterator.next();\n            cnt += ext.length();\n        }\n      \
    \  \n        // Compute the strength of the extension (the fraction of the number\
    \ of uppercase letters\n        // compared to the number of lowercase letters).\n\
    \        int strength = diff / cnt;\n        \n        // Compare extension strength\
    \ and get the strongest extension\n        if (strength < 0 && extensions.size()\
    \ == 1) {\n            // Return the extension with the smallest strength.\n \
    \           result = extensions.get(0);\n        } else if (strength < 0 && extensions.size()\
    \ > 1) {\n            System.out.println(\"There are more than one strongest extensions:\"\
    );\n            for (int i = 0; i < extensions.size(); i++) {\n              \
    \  System.out.print(\" \" + extensions.get(i));\n            }\n            System.out.println(\"\
    \\n\");\n            \n            // Choose the extension with the smallest strength\
    \ from the list of extensions\n            int min_strength = Integer.MAX_VALUE;\n\
    \            String chosen = null;\n            for (int i = 0; i < extensions.size();\
    \ i++) {\n                int this_strength = extensions.get(i).length();\n  \
    \              if (this_strength < min_strength && this_strength >= 0) {\n   \
    \                 min_strength = this_strength;\n                    chosen =\
    \ extensions.get(i);\n                }\n            }\n            System.out.println(\"\
    Chosen strongest extension: \" + chosen);\n            result = chosen;\n    \
    \    } else if (strength >= 0 && extensions.size() > 0) {\n            int min_strength\
    \ = Integer.MAX_VALUE;\n            for (int i = 0; i < extensions.size(); i++)\
    \ {\n                int this_strength = extensions.get(i).length();\n       \
    \         if (this_strength < min_strength && this_strength >= 0) {\n        \
    \            min_strength = this_strength;\n                    result = extensions.get(i);\n\
    \                }\n            }\n        }\n        \n        // Return the ",
  "        StringBuilder sb = new StringBuilder();\n        Double maxStrength = null;\n\
    \        for (String ext : extensions) {\n            Double extensionStrength\
    \ = StrongestExtension(class_name + ext, extensions);\n            if (extensionStrength\
    \ != null) {\n                if (maxStrength == null || extensionStrength > maxStrength)\
    \ {\n                    sb.append(class_name + ext);\n                    maxStrength\
    \ = extensionStrength;\n                }\n            }\n        }\n        return\
    \ sb.toString();", "        ArrayList<String> results = new ArrayList<>();\n \
    \       for (String extension: extensions) {\n            int cap = extension.substring(0,1).toUpperCase().length();\n\
    \            int sm = extension.substring(1).toLowerCase().length();\n       \
    \     int score = cap - sm;\n            if (results.size() > 0) {\n         \
    \       String prev = results.get(results.size()-1);\n                if (score\
    \ < prev.substring(0,1).toUpperCase().length()) {\n                    results.remove(prev);\n\
    \                }\n            }\n            results.add(class_name + \".\"\
    \ + extension);\n        }\n        String strongest = results.get(results.size()-1);\n\
    \        return strongest;", "        Double max_strength = null;\n        String\
    \ extension = null;\n        for (int i = 0; i < extensions.size(); i++) {\n \
    \           Double strength = extensionToStrength(class_name + \".\" + extensions.get(i));\n\
    \            if (max_strength == null || strength >= max_strength) {\n       \
    \         extension = extensions.get(i);\n                max_strength = strength;\n\
    \            }\n        }\n        return extension;", "        \n        int\
    \ ca = class_name.indexOf('A');\n        int cb = class_name.indexOf('B');\n \
    \       int cc = class_name.indexOf('C');\n        \n        if ( ca > cb and\
    \ ca > cc )\n            return class_name + extensions.get(0);\n        else\
    \ if ( cb > ca and cb > cc )\n            return class_name + extensions.get(1);\n\
    \        else\n            return class_name + extensions.get(2);", "        int\
    \ sm = 0;\n        int cap = 0;\n        for(String ext : extensions) {\n    \
    \        int c = ext.replaceAll(\"[^A-Z]\", \"\").length();\n            if(c>cap)\
    \ cap = c;\n            int l = ext.replaceAll(\"[A-Z]\", \"\").length();\n  \
    \          if(l>sm) sm = l;\n        }\n        int r = cap - sm;\n        boolean\
    \ found = false;\n        for(String ext : extensions) {\n            int c =\
    \ ext.replaceAll(\"[^A-Z]\", \"\").length();\n            if(c>cap) cap = c;\n\
    \            int l = ext.replaceAll(\"[A-Z]\", \"\").length();\n            if(l>sm\
    \ && l>cap) {\n                if(c==l && r>0) {\n                    found =\
    \ true;\n                    break;\n                }\n            }\n      \
    \  }\n        if(!found) return null;\n        String[] r = new String[r+1];\n\
    \        for(int i=0;i<r;i++) {\n            r[i] = \"\"+class_name+\".\"+extensions.get(i);\n\
    \        }\n        return r[r];", "        ArrayList<String> extensions_sorted\
    \ = new ArrayList<String>(extensions);\n        Collections.sort(extensions_sorted);\n\
    \        int max_strength = -1;\n        String max_extension = \"\";\n\n    \
    \    for (String extension : extensions_sorted) {\n            int strength =\
    \ countUpperCase(class_name) - countLowerCase(extension);\n            if (strength\
    \ > max_strength) {\n                max_strength = strength;\n              \
    \  max_extension = extension;\n            }\n        }\n\n        return class_name\
    \ + max_extension;", "        // Complete the implementation of this function\n\
    \        \n        \n        return null;", "        Map<String, Integer> map\
    \ = new HashMap<>();\n        for (String e : extensions) {\n            map.put(e.toUpperCase(),\
    \ 1);\n        }\n        Set<Entry<String, Integer>> entries = map.entrySet();\n\
    \        Integer max = null;\n        for (Entry<String, Integer> e : entries)\
    \ {\n            if (max != null && max.getValue() > e.getValue()) {\n       \
    \         continue;\n            }\n            max = e;\n        }\n        String\
    \ key = max.getKey();\n        return class_name + key.substring(0, key.indexOf(\"\
    _\"));", "        // write your code here\n        double max_strength = 0;\n\
    \        String best_extension = null;\n        for (String extension : extensions)\
    \ {\n            double extension_strength = 0;\n            for (char letter\
    \ : extension.toLowerCase().toCharArray()) {\n                switch (letter)\
    \ {\n                    case 'a':\n                        extension_strength++;\n\
    \                        break;\n                    case 'e':\n             \
    \           extension_strength++;\n                        break;\n          \
    \          case 'i':\n                        extension_strength++;\n        \
    \                break;\n                    case 'o':\n                     \
    \   extension_strength++;\n                        break;\n                  \
    \  case 'u':\n                        extension_strength++;\n                \
    \        break;\n                    case 'c':\n                        extension_strength--;\n\
    \                        break;\n                    case 'f':\n             \
    \           extension_strength--;\n                        break;\n          \
    \          case 'l':\n                        extension_strength--;\n        \
    \                break;\n                    case 's':\n                     \
    \   extension_strength--;\n                        break;\n                  \
    \  default:\n                        break;\n                }\n            }\n\
    \            if (extension_strength >= max_strength) {\n                max_strength\
    \ = extension_strength;\n                best_extension = extension;\n       \
    \     }\n        }\n        return class_name + best_extension;", "        String[]\
    \ class_name = class_name.split(\"\\\\.\");\n        \n        ArrayList<Integer>\
    \ extension_strength = new ArrayList<>();\n        for (String extension : extensions)\
    \ {\n            String extension_name = extension.split(\"\\\\.\")[2];\n    \
    \        int extension_strength = extension_name.length() - extension_name.replaceAll(\"\
    \ \", \"\").length();\n            extension_strength.add(extension_strength);\n\
    \        }\n        Collections.sort(extension_strength);\n\n        int i = 0;\n\
    \        int j = extension_strength.size() - 1;\n\n        while (extension_strength.get(i)\
    \ < extension_strength.get(j)) {\n            i--;\n            j--;\n       \
    \ }\n        String strongest_extension = extensions.get(i);\n        if (i <\
    \ j) {\n            for (int k = j; k < extension_strength.size(); k++) {\n  \
    \              strongest_extension += \".\" + extensions.get(k);\n           \
    \ }\n        }\n\n        return class_name + \".\" + strongest_extension;", " \
    \       if (extensions == null || extensions.isEmpty() || class_name.length()\
    \ == 0 || class_name.equals(\"null\"))\n            return \"null\";\n       \
    \ ArrayList<String> extensions_sorted = new ArrayList<>(extensions);\n       \
    \ Collections.sort(extensions_sorted, new Comparator<String>() {\n           \
    \ @Override\n            public int compare(String o1, String o2) {\n        \
    \        if (o1.length() == 0 || o2.length() == 0)\n                    return\
    \ 0;\n                int c1 = o1.toUpperCase().indexOf(\"A\");\n            \
    \    int c2 = o2.toUpperCase().indexOf(\"A\");\n                int c3 = o1.toUpperCase().indexOf(\"\
    C\");\n                int c4 = o2.toUpperCase().indexOf(\"C\");\n           \
    \     int c5 = o1.toUpperCase().indexOf(\"E\");\n                int c6 = o2.toUpperCase().indexOf(\"\
    E\");\n                int s1;\n                int s2;\n                if (c1\
    \ < c2)\n                    s1 = c2 - c1;\n                else\n           \
    \         s1 = c1 - c2;\n                if (c3 < c4)\n                    s2\
    \ = c4 - c3;\n                else\n                    s2 = c3 - c4;\n      \
    \          if (c1 < c3)\n                    s1 = c2 - c3;\n                else\n\
    \                    s1 = c1 - c2;\n                if (c3 < c5)\n           \
    \         s2 = c5 - c3;\n                else\n                    s2 = c3 - c5;\n\
    \                if (c1 < c3)\n                    s1 = c2 - c3;\n           \
    \     else\n                    s1 = c1 - c2;\n                if (c3 < c6)\n\
    \                    s2 = c6 - c3;\n                else\n                   \
    \ s2 = c3 - c6;\n                return s1 * s2;\n            }\n        });\n\
    \        if (extensions_sorted.size() == 1)\n            return class_name + \"\
    .\" + extensions_sorted.get(0);\n        return class_name + \".\" + extensions_sorted.get(extensions_sorted.size()\
    \ - 1);", "        // Your code here.\n        \n        int min_strength = Integer.MAX_VALUE;\n\
    \        \n        for(String ext: extensions) {\n            int counter = 0;\n\
    \            for (int i = 0; i < ext.length(); i++) {\n                if (ext.charAt(i)\
    \ >= 'A' && ext.charAt(i) <= 'Z')\n                    counter++;\n          \
    \      else\n                    counter--;\n            }\n            \n   \
    \         if (min_strength > counter) {\n                min_strength = counter;\n\
    \            }\n        }\n        \n        StringBuilder sb = new StringBuilder(class_name\
    \ + \".\");\n        \n        for(String ext: extensions) {\n            int\
    \ counter = 0;\n            for (int i = 0; i < ext.length(); i++) {\n       \
    \         if (ext.charAt(i) >= 'A' && ext.charAt(i) <= 'Z')\n                \
    \    counter++;\n                else\n                    counter--;\n      \
    \      }\n            \n            if (counter == min_strength)\n           \
    \     sb.append(ext);\n        }\n        \n        return sb.toString();", " \
    \       Map<String, Integer> map = new TreeMap<>();\n        for(String ext :\
    \ extensions) {\n            map.put(ext, map.getOrDefault(ext, 0) + ext.toLowerCase().length());\n\
    \        }\n        \n        int maxStrength = 0;\n        for(String ext : extensions)\
    \ {\n            int strength = map.getOrDefault(ext, 0) - ext.toLowerCase().length();\n\
    \            if(strength > maxStrength) {\n                maxStrength = strength;\n\
    \            }\n        }\n        \n        if(map.size() < 2) {\n          \
    \  return class_name + \".\" + extensions.get(0); // return first extension\n\
    \        }\n        \n        Integer maxKey = null;\n        for (Map.Entry<String,\
    \ Integer> entry : map.entrySet()) {\n            if (maxKey == null) {\n    \
    \            maxKey = entry.getValue();\n            } else if(maxKey > entry.getValue())\
    \ {\n                maxKey = entry.getValue();\n            }\n        }\n  \
    \      \n        return class_name + \".\" + extensions.get(0);", "        int\
    \ strongest = -1;\n        String strongest_extension = null;\n        for (String\
    \ extension : extensions) {\n            int index = extension.indexOf('_');\n\
    \            int CAP = index+1;\n            int SM = extension.length()-CAP;\n\
    \            Double strength = CAP - SM;\n            if((strength>strongest)&&(index>=0))\
    \ {\n                strongest = strength;\n                strongest_extension\
    \ = extension;\n            }\n        }\n        if (strongest == -1) {\n   \
    \         throw new IllegalArgumentException(\"No extension found\");\n      \
    \  }\n        return class_name + \".\" + strongest_extension;", "        \n \
    \       //Your code goes here\n        \n        return \"\";", "        // Initialize\
    \ variables\n        int cap = 0;\n        int sm = 0;\n        int strongest\
    \ = 0;\n        // Loop over extensions\n        for (String ext : extensions)\
    \ {\n            // Loop over characters of extension\n            for (char c\
    \ : ext.toUpperCase().toCharArray()) {\n                // If it is a capital\
    \ letter\n                if (c == 'A' || c == 'B' || c == 'C') {\n          \
    \          cap++;\n                }\n                else {\n               \
    \     sm++;\n                }\n            }\n            // If we have found\
    \ a strongest extension\n            if (cap >= sm) {\n                // Increment\
    \ strongest extension\n                strongest++;\n                // Break\
    \ loop\n                break;\n            }\n            // If we haven't found\
    \ a strongest extension\n            else {\n                // Set cap to 0\n\
    \                cap = 0;\n                // Set sm to 0\n                sm\
    \ = 0;\n            }\n        }\n        // If we have found a strongest extension\n\
    \        if (strongest == extensions.size()) {\n            // Return the class\
    \ name with the strongest extension added\n            return class_name + \"\
    .\" + extensions.get(strongest - 1);\n        }\n        // Otherwise return class\
    \ name without strongest extension added\n        return class_name;", "     \
    \   // your code here\n        List<String> list = extensions;\n        Collections.sort(list);\n\
    \        Collections.reverse(list);\n        Collections.max(list);\n        Collections.min(list);\n\
    \        return class_name + \".\" + list;", "        int CAP = 0;\n        int\
    \ SM = 0;\n        for (String ext : extensions) {\n            CAP += ext.length();\n\
    \            SM += ext.toLowerCase().length();\n        }\n        double strength\
    \ = CAP - SM;\n        if (extensions.isEmpty()) return class_name;\n        if\
    \ (strength == 0) {\n            for (String ext : extensions) {\n           \
    \     if (ext.toLowerCase().length() <= CAP) return class_name + \".\" + ext;\n\
    \            }\n        } else if (strength > 0) {\n            for (String ext\
    \ : extensions) {\n                if (ext.toLowerCase().length() <= CAP && ext.length()\
    \ >= SM) return class_name + \".\" + ext;\n            }\n        } else {\n \
    \           for (String ext : extensions) {\n                if (ext.toLowerCase().length()\
    \ <= SM) return class_name + \".\" + ext;\n            }\n        }\n        return\
    \ class_name + \".\" + extensions.get(0);", "        int sm = 0, cap = 0;\n  \
    \      for (String extension: extensions) {\n            String name = class_name\
    \ + \".\" + extension;\n            if (extension.matches(\".*[A-Z].*\")) {\n\
    \                cap++;\n            } else {\n                sm++;\n       \
    \     }\n        }\n        double strength = cap - sm;\n        Arrays.sort(extensions);\n\
    \        return extensions.get(0);", "        PriorityQueue<Extension> extensionPriorityQueue\
    \ = new PriorityQueue<>();\n        \n        // Sort extensions by strength\n\
    \        Collections.sort(extensions, new ExtensionNameComparator());\n\n    \
    \    // Add each extension to the priority queue\n        for (String extension\
    \ : extensions) {\n            extensionPriorityQueue.add(new Extension(class_name,\
    \ extension));\n        }\n        \n        // Return the first extension that\
    \ has a lower strength\n        Extension firstExtension = extensionPriorityQueue.peek();\n\
    \        if (firstExtension.getStrength() == Integer.MAX_VALUE) {\n          \
    \  return firstExtension.getClass().getSimpleName();\n        } else {\n     \
    \       return firstExtension.getClass().getSimpleName() + firstExtension.getExtension();\n\
    \        }", '        return "";', "        Set<String> set_extensions = new HashSet<String>(extensions);\n\
    \        double strongest_extension = 0;\n        for(String extension : extensions)\
    \ {\n            String s = class_name + \".\" + extension;\n            Class\
    \ cls = null;\n            try {\n                cls = Class.forName(s);\n  \
    \          } catch(ClassNotFoundException e) {\n                continue;\n  \
    \          }\n            try {\n                Method method = cls.getMethod(\"\
    getStrength\");\n                strongest_extension += ((Integer)method.invoke(cls)).doubleValue();\n\
    \            } catch(NoSuchMethodException | SecurityException | IllegalArgumentException\
    \ | IllegalAccessException | InvocationTargetException e) {\n                continue;\n\
    \            }\n        }\n        if(strongest_extension == 0) {\n          \
    \  return class_name;\n        }\n        strongest_extension /= extensions.size();\n\
    \        Collections.sort(extensions);\n        for(String extension : extensions)\
    \ {\n            String s = class_name + \".\" + extension;\n            try {\n\
    \                Class cls = Class.forName(s);\n                Method method\
    \ = cls.getMethod(\"getStrength\");\n                strongest_extension += ((Integer)method.invoke(cls)).doubleValue();\n\
    \            } catch(NoSuchMethodException | SecurityException | IllegalArgumentException\
    \ | IllegalAccessException | InvocationTargetException e) {\n                continue;\n\
    \            }\n        }\n        return Double.toString(strongest_extension);",
  "        if (extensions.size() < 2) {\n            return \"\";\n        }\n   \
    \     HashMap<String, Integer> map = new HashMap<String, Integer>();\n       \
    \ for (int i = 0; i < extensions.size(); i++) {\n            String extension\
    \ = extensions.get(i);\n            if (extension.matches(\"^[A-Z]+$\")) {\n \
    \               map.put(extension.toLowerCase(), i);\n            } else if (extension.matches(\"\
    ^[a-z]+$\")) {\n                map.put(extension.toLowerCase().replaceAll(\"\
    [a-z]\", \"\"), i);\n            }\n        }\n        int max = -1;\n       \
    \ for (String extension : extensions) {\n            if (map.containsKey(extension.toLowerCase()))\
    \ {\n                if (map.get(extension.toLowerCase()) > max) {\n         \
    \           max = map.get(extension.toLowerCase());\n                }\n     \
    \       }\n        }\n        if (max >= 0) {\n            String answer = class_name\
    \ + \".\" + extensions.get(map.get(extensions.get(max).replaceAll(\"[a-z]\", \"\
    \")));\n            int count = 1;\n            for (String extension : extensions)\
    \ {\n                if (map.containsKey(extension.toLowerCase())) {\n       \
    \             if (map.get(extension.toLowerCase()) != max) {\n               \
    \         count++;\n                    }\n                } else {\n        \
    \            break;\n                }\n            }\n            answer = answer.replaceAll(\"\
    [a-z]\", \"\") + (count > 1 ? \".\" + extensions.get(map.get(extensions.get(max).replaceAll(\"\
    [a-z]\", \"\"))) : \"\");\n            return answer;\n        } else {\n    \
    \        return \"\";\n        }", "        // The extensions are given as lists\
    \ where each element is the name of an extension \n        // and the strength\
    \ of that extension (-1 for no extension).\n        // For each extension in the\
    \ list, compare its name with the class_name and \n        // return the one with\
    \ the strongest extension name.\n        // If there are several extensions with\
    \ the same strength, return the one with the\n        // first appearance in the\
    \ list.\n        // Otherwise, return null.", "        Arrays.sort(extensions);\n\
    \        int maxStrongestExtension = 0;\n        for (String extension : extensions)\
    \ {\n            int extensionStrongest = extension.substring(0, 1).toUpperCase().compareTo(extension.substring(0,\
    \ 1).toLowerCase());\n            if (extensionStrongest > maxStrongestExtension)\
    \ {\n                maxStrongestExtension = extensionStrongest;\n           \
    \ }\n        }\n        return class_name + extensions.get(0);", "        int\
    \ CAP = 0, SM = 0;\n        for (int i = 0; i < extensions.size(); i++) {\n  \
    \          String ex = extensions.get(i);\n            int length = ex.length();\n\
    \            CAP += (length - 1) / 2;\n            SM += length / 2;\n       \
    \ }\n        double strength = CAP - SM;\n        extensions = new ArrayList<String>(extensions);\n\
    \        Collections.sort(extensions, Comparator.comparingDouble(i -> i.length()\
    \ / 2));\n        int index = extensions.size();\n        while (index > 0) {\n\
    \            if (CAP - extensions.get(index - 1).length() < strength) {\n    \
    \            return class_name + '.' + extensions.get(index - 1);\n          \
    \  }\n            index = index - 1;\n        }\n        return class_name + '.'\
    \ + 'A';", "        ArrayList<Integer> caps = new ArrayList<Integer>();\n    \
    \    ArrayList<Integer> sms = new ArrayList<Integer>();\n        for (String ext\
    \ : extensions) {\n            int cap = ext.substring(0, 1);\n            int\
    \ sm = ext.substring(1,2);\n            caps.add(cap);\n            sms.add(sm);\n\
    \        }\n        int cs = caps.size();\n        int ss = sms.size();\n    \
    \    int f = cs - ss;\n        if (f == 0) return class_name;\n        int a =\
    \ 1;\n        int b = 1;\n        for (int i = 0; i < ss; i++) {\n           \
    \ int c = caps.get(i);\n            int s = sms.get(i);\n            a += c *\
    \ s;\n            b += c;\n        }\n        Integer s = BigInteger.valueOf(a).divide(BigInteger.valueOf(b));\n\
    \        int ss = s.intValue();\n        switch (ss) {\n            case 0: return\
    \ class_name;\n            case 1: return class_name + \".\" + extensions.get(0);\n\
    \            case 2: return class_name + \".\" + extensions.get(1);\n        \
    \    case 3: return class_name + \".\" + extensions.get(2);\n            case\
    \ 4: return class_name + \".\" + extensions.get(3);\n            case 5: return\
    \ class_name + \".\" + extensions.get(4);\n            case 6: return class_name\
    \ + \".\" + extensions.get(5);\n            case 7: return class_name + \".\"\
    \ + extensions.get(6);\n            case 8: return class_name + \".\" + extensions.get(7);\n\
    \            case 9: return class_name + \".\" + extensions.get(8);\n        \
    \    case 10: return class_name + \".\" + extensions.get(9);\n            case\
    \ 11: return class_name + \".\" + extensions.get(10);\n            case 12: return\
    \ class_name + \".\" + extensions.get(11);\n            case 13: return class_name\
    \ + \".\" + extensions.get(12);\n            case 14: return class_name + \".\"\
    \ + extensions.get(13);\n            case 15: return class_name + \".\" + extensions.get(14);\n\
    \            case 16: return class_name + \".\" + extensions.get(15);\n      \
    \      case 17: return class_name + \".\" + extensions.get(16);\n            case\
    \ 18: return class_name + \".\" + extensions.get(17);\n            case 19: return\
    \ class_name + \".\" + extensions.get(18);\n            case 20: return class_name\
    \ + \".\" + extensions.get(19);\n            case 21: return class_name + \".\"\
    \ + extensions.get(20);\n            case 22: return class_name + \".\" + extensions.get(21);\n\
    \            case 23: return class_name + \".\" + extensions.get(22);\n      \
    \      case 24: return class_name + \".\" + extensions.get(23);\n            case\
    \ 25: return class_name + \".\" + extensions.get(24);\n            case 26: return\
    \ class_name + \".\" + extensions.get(25);\n            case 27: return class_name\
    \ + \".\" + extensions.get(26);\n            case 28: return class_name + \".\"\
    \ + extensions.get(27);\n            case 29: return class_name + \".\" + extensions.get(28);\n\
    \            case 30: return class_name + \".\" + extensions.get(29);\n      \
    \      case 31: return class_name + \".\" + extensions.get(30", "        // Complete\
    \ the code here\n        int SM=class_name.chars().filter(Character::isLetter).count();\n\
    \        int CAP=class_name.chars().filter(Character::isUpperCase).count();\n\
    \        double strength=CAP-SM;\n        int StrongestIndex=0;\n        for (int\
    \ i = 0; i < extensions.size(); i++) {\n            int ex=extensions.get(i).chars().filter(Character::isLowerCase).count();\n\
    \            int Strongest=ex-SM;\n            if (Strongest>strength) {\n   \
    \             StrongestIndex=i;\n                strength=Strongest;\n       \
    \     }\n        }\n        return class_name+\".\"+extensions.get(StrongestIndex);",
  "        Set<String> extensions_set = extensions;\n        extensions_set.forEach(e\
    \ -> {\n            String[] arr = e.split(\"(?<=[a-z])(?=[A-Z])\");\n       \
    \     int cap = arr.length - 1;\n            int sm = arr[0].length();\n     \
    \       int strength = cap - sm;\n            System.out.println(\"\"+strength);\n\
    \            System.out.println(\"Cap: \"+cap);\n            System.out.println(\"\
    Sm: \"+sm);\n        });\n        double max_strength = extensions_set.stream().mapToDouble(e\
    \ -> e.split(\"(?<=[a-z])(?=[A-Z])\")).max().orElse(0);\n        return class_name\
    \ + extensions_set.stream().filter((String e) -> {\n            String[] arr =\
    \ e.split(\"(?<=[a-z])(?=[A-Z])\");\n            int cap = arr.length - 1;\n \
    \           int sm = arr[0].length();\n            int strength = cap - sm;\n\
    \            return strength == max_strength;\n        }).collect(Collectors.joining(\"\
    .\"));", "        Collections.sort(extensions);\n        String extension = extensions.get(0);\n\
    \        for (int i = 1; i < extensions.size(); i++) {\n            if (extensions.get(1).compareTo(extensions.get(i))\
    \ == -1) {\n                extension = extensions.get(i);\n            }\n  \
    \      }\n        return class_name + \".\" + extension;", "        String extension\
    \ = null;\n        int min_strength = Integer.MAX_VALUE;\n        for (String\
    \ e : extensions) {\n            int cap = e.length();\n            int sm = e.toLowerCase().length();\n\
    \            int strength = (cap-sm)/(cap-cap);\n            if (strength < min_strength)\
    \ {\n                min_strength = strength;\n                extension = e;\n\
    \            }\n        }\n        return String.format(\"%s.%s\", class_name,\
    \ extension);", "        if (extensions.size() < 2) {\n            return \"\"\
    ;\n        }\n        long num_cap = Long.valueOf(class_name.substring(class_name.lastIndexOf('C'),\
    \ class_name.lastIndexOf('Z')+1));\n        long num_sm = Long.valueOf(class_name.substring(class_name.lastIndexOf('s'),\
    \ class_name.lastIndexOf('h')));\n        long total_strength = num_cap - num_sm;\n\
    \        long max_strength = Long.MIN_VALUE;\n        for (String extension :\
    \ extensions) {\n            long extension_strength = Long.valueOf(extension);\n\
    \            if (extension_strength > max_strength) {\n                max_strength\
    \ = extension_strength;\n            }\n        }\n        StringBuilder sb =\
    \ new StringBuilder(class_name);\n        int last_cap = class_name.lastIndexOf('C');\n\
    \        int last_sm = class_name.lastIndexOf('s');\n        int last_num_cap\
    \ = class_name.lastIndexOf('Z');\n        int last_num_sm = class_name.lastIndexOf('h');\n\
    \        for (int i = last_cap; i <= last_num_cap; i++) {\n            sb.setCharAt(i,\
    \ '.');\n        }\n        for (int i = last_sm; i <= last_num_sm; i++) {\n \
    \           sb.setCharAt(i, '.');\n        }\n        if (total_strength > 0)\
    \ {\n            sb.setCharAt(class_name.lastIndexOf('C')+1, 'C');\n        }\
    \ else {\n            sb.setCharAt(class_name.lastIndexOf('s')+1, 's');\n    \
    \    }\n        sb.setCharAt(class_name.lastIndexOf('Z')+1, 'Z');\n        sb.setCharAt(class_name.lastIndexOf('h')+1,\
    \ 'h');\n        String strongest = sb.toString();\n        if (total_strength\
    \ == max_strength) {\n            return strongest;\n        }\n        return\
    \ class_name + \".\" + extensions.get(extensions.indexOf(extensions.get(0)) -\
    \ 1);", "        \n        Collections.sort(extensions);\n        \n        double\
    \ strength = 0;\n        \n        for(String ext : extensions)\n        {\n \
    \           \n            double extCap = 0;\n            double extSm = 0;\n\
    \            \n            for(int i=0; i < ext.length(); i++)\n            {\n\
    \                if(ext.charAt(i) == ext.charAt(i).toUpperCase())\n          \
    \      {\n                    extCap++;\n                }\n                else\n\
    \                {\n                    extSm++;\n                }\n        \
    \    }\n            \n            strength += (extCap - extSm);\n        }\n \
    \       \n        double fraction = 0;\n        \n        for(String ext : extensions)\n\
    \        {\n            \n            fraction = strength / extensions.size();\n\
    \            \n            if(fraction == (1.0 / extensions.size()))\n       \
    \     {\n                return class_name + \".\" + ext;\n            }\n   \
    \     }\n        \n        return class_name + \".\" + \"Error\";", "        Collections.sort(extensions,\
    \ Comparator.comparingInt(extension -> extension.charAt(0) - extension.charAt(1)));\n\
    \        return class_name + \".\" + extensions.get((extensions.size() - 1));",
  "        // Initialize a map of extensions mapped by the number of lowercase letters\n\
    \        // they have in common.\n        Map<String, Integer> lowercase_letters\
    \ = new HashMap<>();\n        for (String extension : extensions) {\n        \
    \    // Look at the extension.\n            int count = 0;\n            while\
    \ (extension.length() > 0) {\n                // Count the number of lowercase\
    \ letters in the extension.\n                count += extension.charAt(0) - 'a';\n\
    \                // Remove the lowercase letters.\n                extension =\
    \ extension.substring(1);\n            }\n            // Store the extension in\
    \ our map.\n            lowercase_letters.put(extension, count);\n        }\n\n\
    \        // Get the number of common lowercase letters.\n        int num_lowercase_letters\
    \ = 0;\n        for (String extension : extensions) {\n            num_lowercase_letters\
    \ += lowercase_letters.get(extension);\n        }\n\n        // If there are no\
    \ common lowercase letters, then all extensions\n        // have equal strength.\n\
    \        if (num_lowercase_letters == 0) return class_name;\n\n        // Initialize\
    \ a map of extensions mapped by the strength they have.\n        Map<Integer,\
    \ String> strongest_extensions = new HashMap<>();\n        for (String extension\
    \ : extensions) {\n            String extension_name = extension.substring(0,\
    \ extension.indexOf('.'));\n            int count = lowercase_letters.get(extension_name);\n\
    \            int strength = Math.min(count, num_lowercase_letters);\n        \
    \    strongest_extensions.put(strength, extension);\n        }\n\n        // Get\
    \ the strongest extension.\n        int max_strength = -1;\n        String strongest_extension\
    \ = null;\n        for (Integer strength : strongest_extensions.keySet()) {\n\
    \            if (strength > max_strength) {\n                max_strength = strength;\n\
    \                strongest_extension = strongest_extensions.get(max_strength);\n\
    \            }\n        }\n        // Return the class's name, the extension and\
    \ the strength.\n        return class_name + \".\" + strongest_extension;", " \
    \       String strongest_extension = class_name;\n\n        for (String extension\
    \ : extensions) {\n            String extension_name = extension.substring(0,\
    \ extension.indexOf(extension.toUpperCase()));\n            int strength = extension.substring(extension.indexOf(extension.toUpperCase()),\
    \ extension.indexOf(extension.toUpperCase()) + 1);\n\n            int cap = extension_name.length();\n\
    \            int sm = extension_name.length();\n\n            if (strength !=\
    \ 0) {\n                int diff = cap - sm;\n                float f = diff /\
    \ strength;\n\n                if (f > 1) {\n                    f = 1;\n    \
    \            }\n\n                StringBuilder sb = new StringBuilder();\n\n\
    \                sb.append(class_name);\n                sb.append(\".\");\n \
    \               sb.append(extension_name);\n                sb.append(\".\");\n\
    \                sb.append((float) f);\n                strongest_extension =\
    \ sb.toString();\n                break;\n            }\n\n        }\n\n     \
    \   return strongest_extension;", "        if (extensions.size() == 0) return\
    \ null;\n        ArrayList<Integer> counts = new ArrayList<Integer>();\n     \
    \   int total = 0;\n        for(String ext : extensions){\n            counts[ext.toUpperCase().charAt(0)-'A']\
    \ += 1;\n            total += ext.length();\n        }\n        int max_val =\
    \ Collections.max(counts);\n        int strongest_val = (max_val / total);\n \
    \       int strength = -1;\n        for (int i=0; i<counts.size(); i++){\n   \
    \         if (counts.get(i) == strongest_val) strength = i;\n        }\n     \
    \   Class<?> c = Class.forName(class_name + \".\" + extensions.get(strength));\n\
    \        Method[] methods = c.getMethods();\n        Set<Method> results = new\
    \ HashSet<Method>();\n        for (Method method : methods) {\n            Class<?>[]\
    \ types = method.getParameterTypes();\n            if (types.length == 1 && types[0].isAssignableFrom(String.class))\
    \ {\n                String param = method.getName();\n                String[]\
    \ params = param.split(\"\\\\.\");\n                if (params.length == 2) {\n\
    \                    String param2 = params[1];\n                    if (param2.isEmpty())\
    \ {\n                        results.add(method);\n                    } else\
    \ {\n                        results.add(method);\n                    }\n   \
    \             }\n            }\n        }\n        Set<String> result_set = new\
    \ HashSet<String>();\n        for (Method method : results) {\n            result_set.add(method.getName());\n\
    \        }\n        return class_name + \".\" + result_set.iterator().next();",
  "        HashMap<String, Integer> extensions_map = new HashMap<>();\n        for\
    \ (String extension : extensions)\n            extensions_map.put(extension.toUpperCase(),\
    \ extensions_map.get(extension) == null ? 1 : extensions_map.get(extension) +\
    \ 1);\n\n        HashSet<Integer> strengths = new HashSet<>();\n        for (String\
    \ extension : extensions)\n            if (extensions_map.containsKey(extension.toUpperCase()))\n\
    \                strengths.add(extensions_map.get(extension.toUpperCase()));\n\
    \        Double strongest_extension_strength = Math.max(strengths.stream().mapToDouble(i\
    \ -> i / extensions_map.get(class_name.toUpperCase())).sum(), 0);\n        return\
    \ class_name + \".\" + extensions.get(Collections.min(strengths.stream().filter((int\
    \ i) -> i / extensions_map.get(class_name.toUpperCase()) == strongest_extension_strength).mapToInt(i\
    \ -> i)));", "        // Find the strongest extension.\n        double strength\
    \ = -1d;\n        \n        // Iterate through the list of extensions and find\
    \ the strongest extension.\n        for (int i = 0; i < extensions.size(); i++)\
    \ {\n            int num_cap = extensions.get(i).length() - 1; // Subtract 1 from\
    \ length for cap.\n            int num_sm = extensions.get(i).length() - 2; //\
    \ Subtract 2 from length for sm.\n            double strength_i = ((double) num_cap\
    \ - num_sm) / num_cap;\n            strength = Math.max(strength, strength_i);\n\
    \        }\n\n        // Return the class name + strongest extension.\n      \
    \  return class_name + extensions.get(extensions.indexOf(extensions)) + extensions.get(extensions.indexOf(extensions)); ",
  "        Collections.sort(extensions, Comparator.comparing(s -> \n            countUpperCase(s)));\n\
    \        Collections.sort(extensions, Comparator.comparing(s -> \n           \
    \ countLowerCase(s)));\n        ArrayList<String> result = new ArrayList<String>();\n\
    \        for (int i = 0; i < extensions.size(); i++) {\n            if (extensions.get(i).startsWith(class_name))\
    \ {\n                result.add(class_name + extensions.get(i));\n           \
    \ }\n        }\n        if (result.size() > 1) {\n            int j = 0;\n   \
    \         for (int i = 0; i < extensions.size(); i++) {\n                if (extensions.get(i).startsWith(class_name))\
    \ {\n                    if (result.size() > j) \n                        return\
    \ class_name + extensions.get(j);\n                    j = i;\n              \
    \  }\n            }\n        }\n        return class_name + extensions.get(0);",
  "        String[] extension_names = new String[extensions.size()];\n        Collections.copy(extension_names,\
    \ extensions);\n        Arrays.sort(extension_names);\n\n        double strength\
    \ = 0;\n\n        for(int i = 0; i < extension_names.length; i++) {\n        \
    \    int extension_count = 0;\n            int extension_strength = extension_names[i].length();\n\
    \            for(int j = 0; j < extension_names.length; j++) {\n             \
    \   if(extension_names[i].charAt(0) == extension_names[j].charAt(0)) {\n     \
    \               extension_count++;\n                    if(extension_strength\
    \ < extension_names[j].length()) {\n                        extension_strength\
    \ = extension_names[j].length();\n                    }\n                }\n \
    \           }\n            strength += extension_count / extension_names.length;\n\
    \        }\n\n        return class_name + \".\" + extension_names[0] + \".\" +\
    \ strength;", "        // Write your Java code here\n\n        HashMap<String,Integer>\
    \ ext=new HashMap<String,Integer>();\n        for(String s:extensions){\n    \
    \        ext.put(s.toUpperCase(), s.length());\n        }\n        ArrayList<String>\
    \ strongest=new ArrayList<String>();\n        double max=0;\n        double temp=0;\n\
    \        int cap=0;\n        int sm=0;\n        for(String s: extensions){\n \
    \           cap=ext.get(s.toUpperCase());\n            sm=ext.get(s.toLowerCase());\n\
    \            temp=cap-sm;\n            if(temp>max){\n                max=temp;\n\
    \                strongest.add(s);\n            }\n        }\n        if(strongest.size()\
    \ == 0){\n            return \"The class \"+class_name+\" is not an extension.\"\
    ;\n        }\n        else if(strongest.size() == 1){\n            return class_name.concat(\"\
    .\").concat(strongest.get(0));\n        }\n        else {\n            Collections.sort(strongest);\n\
    \            return class_name.concat(\".\").concat(strongest.get(0));\n     \
    \   }", "        Map<Integer, String> extensionsByStrength = new HashMap<Integer,\
    \ String>();\n        for(String extension : extensions)\n            extensionsByStrength.put(CAP(extension),\
    \ extension);\n        Comparator<Integer> strengthComparator = Comparator.comparing(Integer::valueOf)\n\
    \            .thenComparing(Integer::valueOf);\n        Optional<String> resultValue\
    \ = extensionsByStrength.entrySet().stream()\n            .filter(entry -> CAP(entry.getKey())\
    \ == CAP(class_name))\n            .max(strengthComparator);\n        return resultValue.get();",
  "        Comparator<String> compare = Comparator.comparingInt(s -> s.chars().filter(Character::isUpperCase).count()\
    \ - (s.chars().filter(Character::isLowerCase).count()));\n        return extensions.stream().min(compare).orElseThrow(IllegalArgumentException::new);",
  '        // write your solution here', "        int sm = 0;\n        int cap = 0;\n\
    \        for (String extension: extensions)\n        {\n            if (extension.length()\
    \ > cap) {\n                cap = extension.length();\n            }\n       \
    \     sm = 0;\n            for (int i = 0; i < extension.length(); i++) {\n  \
    \              if (Character.toUpperCase(extension.charAt(i)) == extension.charAt(i))\
    \ {\n                    sm++;\n                }\n            }\n           \
    \ if (sm > cap) {\n                cap = sm;\n            }\n        }\n     \
    \   float strength = (float)cap / (float)sm;\n        extensions.sort(Comparator.comparingInt((String\
    \ s) -> s.length() - s.length()));\n        return class_name + extensions.get(0);",
  "        double strength = -1;\n        for (String extension : extensions) {\n\
    \            int caps = extension.substring(0, 1).length();\n            int sms\
    \ = extension.substring(0, 1).length();\n            double fraction = caps /\
    \ sms;\n            strength = Math.max(fraction, strength);\n        }\n\n  \
    \      if (strength == -1) {\n            return \"\";\n        }\n\n        double\
    \ fraction = class_name.substring(0, 1).length();\n        fraction = fraction\
    \ / strength;\n\n        StringBuilder extensionBuilder = new StringBuilder();\n\
    \        for (int i = 0; i < class_name.length() - 1; i++) {\n            String\
    \ character = class_name.substring(i);\n            if (Character.isUpperCase(character.charAt(0)))\
    \ {\n                extensionBuilder.append(character);\n            } else {\n\
    \                extensionBuilder.append(Character.toLowerCase(character.charAt(0)));\n\
    \            }\n        }\n        extensionBuilder.append(class_name.substring(1));\n\
    \n        if (fraction < 1) {\n            return extensionBuilder.toString();\n\
    \        }\n\n        for (int i = 0; i < extensionBuilder.length() - 1; i++)\
    \ {\n            String character = extensionBuilder.substring(i);\n         \
    \   if (Character.isLowerCase(character.charAt(0))) {\n                extensionBuilder.append(character);\n\
    \            } else {\n                extensionBuilder.append(Character.toUpperCase(character.charAt(0)));\n\
    \            }\n        }\n        return extensionBuilder.toString();", "   \
    \     int sma = -1;\n        for (String ext : extensions) {\n            int\
    \ cap = ext.length();\n            int sm = ext.toLowerCase().length();\n    \
    \        float fraction = cap - sm;\n            if (fraction < 0) {\n       \
    \         fraction = 0;\n            }\n            sma = Math.max(fraction, sma);\n\
    \        }\n        float f = sma / extensions.size();\n        String name =\
    \ class_name + \"\";\n        float f1 = f;\n        String f2 = \"\";\n     \
    \   while (f1 != 0) {\n            f1 = f - 1;\n            f2 = name + \".\"\
    \ + f2;\n        }\n        ArrayList temp = new ArrayList();\n        for (int\
    \ i = 0; i < extensions.size(); i++) {\n            if (extensions.equals(temp))\
    \ {\n                temp.add(extensions.get(i));\n                return f2;\n\
    \            }\n        }\n        return name + \".\" + f2;", "        String[]\
    \ names = new String[extensions.size()];\n        for (int i=0; i<names.length;\
    \ i++) {\n            names[i] = extensions.get(i);\n        }\n        names\
    \ = Arrays.stream(names).filter(s -> s.matches(\"[A-Z]+\")).collect(Collectors.toList());\n\
    \        String[] snames = new String[extensions.size()];\n        for (int i=0;\
    \ i<snames.length; i++) {\n            snames[i] = extensions.get(i);\n      \
    \  }\n        snames = Arrays.stream(snames).filter(s -> s.matches(\"[a-z]+\"\
    )).collect(Collectors.toList());\n        int cap = 0, sm = 0;\n        for (String\
    \ name : names) {\n            if (name.matches(\"[A-Z]+\")) {\n             \
    \   cap++;\n            } else {\n                sm++;\n            }\n     \
    \   }\n        float s = cap-sm;\n        Collections.sort(names);\n        Collections.sort(snames);\n\
    \        String str = null;\n        if (s == 0) {\n            str = class_name;\n\
    \        } else if (cap > sm && s > 0) {\n            str = class_name + \".\"\
    \ + snames[0];\n        } else {\n            str = class_name + \".\" + names.get(0);\n\
    \        }\n        return str;", "        double fraction = extensions.size()\
    \ / class_name.length();\n        double strongest = Math.max(fraction);\n   \
    \     double strength = extension.substring(0, class_name.indexOf(strongest));\n\
    \        double length = extension.substring(class_name.indexOf(strongest) + strongest.length());\n\
    \        System.out.println(length);\n        if (extensions.size() > 1)\n   \
    \         System.out.println(extensions.get(0));\n        return class_name +\
    \ \".\" + strength + length;", "        // Your code goes here\n        HashMap<String,\
    \ Integer> map = new HashMap<>();\n        for (String extension : extensions)\
    \ {\n            int i = extension.length();\n            int j = extension.indexOf(Character.toUpperCase(extension.charAt(0)));\n\
    \            int k = extension.indexOf(Character.toLowerCase(extension.charAt(0)));\n\
    \            map.put(extension, (k - i));\n        }\n        Set<Map.Entry<String,\
    \ Integer>> set = map.entrySet();\n        if (set.size() > 1) {\n           \
    \ Collections.sort(set, (o1, o2) -> o2.getValue().compareTo(o1.getValue()));\n\
    \            String first = set.get(0).getKey();\n            String second =\
    \ set.get(1).getKey();\n            int firstValue = set.get(0).getValue();\n\
    \            int secondValue = set.get(1).getValue();\n            System.out.println(first);\n\
    \            return class_name + \".\" + first;\n        } else {\n          \
    \  return class_name;\n        }", "        Set<String> extensions_set = new HashSet<>();\n\
    \        for(String extension: extensions) {\n            String extension_trimmed\
    \ = extension.trim();\n            String upper_case_letters = extension_trimmed.substring(0,\
    \ 1).toUpperCase() + extension_trimmed.substring(1).toLowerCase();\n         \
    \   String lower_case_letters = extension_trimmed.substring(0, 1).toLowerCase()\
    \ + extension_trimmed.substring(1).toUpperCase();\n            int strength =\
    \ upper_case_letters.length() - lower_case_letters.length();\n            extensions_set.add(upper_case_letters\
    \ + lower_case_letters + String.valueOf(strength));\n        }\n        String\
    \ strongest_extension = extensions_set.stream()\n            .sorted((s1, s2)\
    \ -> Integer.parseInt(s2) - Integer.parseInt(s1))\n            .findFirst().get();\n\
    \        return class_name + \".\" + strongest_extension;", "        boolean allCaps\
    \ = true;\n        boolean allLowers = true;\n        double maxScore = 0;\n \
    \       String result = \"?\";\n\n        // TODO: Implement this!\n        //\
    \ Use .split() to split the extension name by '.', and check whether every letter\
    \ in the extension name is capitalized.\n        // If not, find the extension\
    \ with the highest score (if the same score, the alphabetically first extension).\n\
    \n        return result;", "        Set<String> extension_strengths = extensions.stream().map(name\
    \ -> name.split(\"(?<=\\\\p{Lu})(?=\\\\p{Ll})\")).map(String::toUpperCase).collect(Collectors.toSet());\n\
    \        \n        Optional<String> extension = extensions.stream().filter(name\
    \ -> extension_strengths.contains(name.toUpperCase())).max(Comparator.comparing(name\
    \ -> name.split(\"(?<=\\\\p{Lu})(?=\\\\p{Ll})\")[0].substring(1).compareTo(name.split(\"\
    (?<=\\\\p{Lu})(?=\\\\p{Ll})\")[1].substring(1)))).orElse(null);\n        \n  \
    \      return extension.map(name -> class_name + \".\" + name).orElse(null);",
  "        // Declare variables to be used while traversing the list.\n        int\
    \ count_upper = 0;\n        int count_lower = 0;\n        char char_upper;\n \
    \       char char_lower;\n        char char_extension;\n        String new_name;\n\
    \        ArrayList<String> extensions_2 = new ArrayList<String>(extensions);\n\
    \        // Traverse the list and check each letter in the extension\n       \
    \ for(int i = 0; i < extensions_2.size(); i++) {\n            char_extension =\
    \ extensions_2.get(i).charAt(0);\n            char_lower = char_extension <= 'Z'\
    \ ? 'A'\n                : char_extension <= 'Z' ? 'a'\n                : char_extension\
    \ <= 'z' ? 'A'\n                : char_extension <= 'z' ? 'a';\n            char_upper\
    \ = char_extension >= 'A' ? 'A'\n                : char_extension >= 'A' ? 'a'\n\
    \                : char_extension >= 'Z' ? 'A'\n                : char_extension\
    \ >= 'Z' ? 'a';\n            count_upper = count_upper + char_extension.equals(char_upper)\n\
    \                ? count_upper + 1\n                : count_upper;\n         \
    \   count_lower = count_lower + char_extension.equals(char_lower)\n          \
    \      ? count_lower + 1\n                : count_lower;\n        }\n        //\
    \ The strength of the extension is given by the fraction of uppercase letters\n\
    \        // compared to lowercase letters. Since the strongest extension is the\n\
    \        // one with the strongest number of uppercase letters and lowercase\n\
    \        // letters, we can compare the strength of the extension.\n        int\
    \ strength = (count_upper - count_lower) * 0.5;\n        if(strength == 0) {\n\
    \            return class_name + \".\" + extensions_2.get(0);\n        }\n   \
    \     // Otherwise we sort the extensions in reverse order and compare the strongest\n\
    \        // extension to the previous extension with the lowest strength.\n  \
    \      else {\n            extensions_2.sort(Comparator.reverseOrder());\n   \
    \         strength = strength / 2;\n            String new_name = class_name +\
    \ \".\" + extensions_2.get(0);\n            for(int i = 1; i < extensions_2.size();\
    \ i++) {\n                if(strength >= strength) {\n                    new_name\
    \ = class_name + \".\" + extensions_2.get(i);\n                    strength =\
    \ strength / 2;\n                }\n                else {\n                 \
    \   break;\n                }\n            }\n            return new_name;\n \
    \       }", "        int sm = 0;\n        int cap = 0;\n        for (String ext\
    \ : extensions) {\n            char c = ext.charAt(0);\n            int e = ext.length();\n\
    \            sm = sm + (e - 1);\n            cap = cap + ((c - 'A') + 1);\n  \
    \      }\n        float sc = ((float) cap) / sm;\n        boolean a1 = true;\n\
    \        boolean a2 = false;\n        int i = 0;\n        boolean b1 = false;\n\
    \        boolean b2 = false;\n        while (a1 || a2) {\n            if (b1 &&\
    \ b2) {\n                if (sc <= 0) {\n                    return class_name\
    \ + \".\" + extensions.get(i);\n                }\n                i++;\n    \
    \            sc = sc / 2;\n                b1 = b2 = false;\n            }\n \
    \           if (sc > 0) {\n                if (a1) {\n                    b1 =\
    \ true;\n                    sc = sc - 1;\n                } else {\n        \
    \            b2 = true;\n                    sc = sc - 1;\n                }\n\
    \            } else {\n                a1 = false;\n                a2 = false;\n\
    \            }\n        }\n        return class_name + \".\" + extensions.get(i);",
  "        // Write your code here.\n        Collections.sort(extensions, Comparator.comparing(Extension::getStrength));\n\
    \        Extension ext = extensions.get(0);\n        return class_name + \".\"\
    \ + ext.getName();", "        if (class_name == null || extensions == null ||\
    \ extensions.isEmpty()) {\n            return \"\";\n        }\n        double\
    \ strongest_strength = -1;\n        int i = -1;\n        for (int j = 0; j < extensions.size();\
    \ j++) {\n            String extension = extensions.get(j);\n            i++;\n\
    \            char letter = 0;\n            char number = 0;\n            try {\n\
    \                letter = extension.charAt(0);\n            } catch (IndexOutOfBoundsException\
    \ e) {\n                return \"\";\n            }\n            try {\n     \
    \           number = extension.charAt(1);\n            } catch (IndexOutOfBoundsException\
    \ e) {\n                return \"\";\n            }\n            double number\
    \ = Double.parseDouble(number);\n            int CAP = Character.getNumericValue(letter);\n\
    \            int SM = Character.getNumericValue(number);\n            strongest_strength\
    \ = Math.max(strongest_strength, (CAP - SM));\n        }\n        if (strongest_strength\
    \ > 0) {\n            String classname = class_name;\n            String[] arr\
    \ = classname.split(\"\\\\.\");\n            try {\n                classname\
    \ = arr[0] + arr[1].substring(0, 1) + extensions.get(i);\n            } catch\
    \ (IndexOutOfBoundsException e) {\n                return \"\";\n            }\n\
    \            return classname;\n        } else {\n            return class_name;\n\
    \        }", "        ArrayList<String> sorted_extensions = new ArrayList<String>(extensions);\n\
    \        Collections.sort(sorted_extensions);\n        \n        // find out how\
    \ many 'AA', 'Be' and 'CC' are in the class\n        int number_of_AA = 0, number_of_Be\
    \ = 0, number_of_CC = 0;\n        for (String extension : sorted_extensions) {\n\
    \            if (extension.contains(\"AA\") || extension.contains(\"Be\") || extension.contains(\"\
    CC\")) {\n                number_of_AA++;\n            }\n            if (extension.contains(\"\
    Be\") || extension.contains(\"CC\")) {\n                number_of_Be++;\n    \
    \        }\n            if (extension.contains(\"CC\")) {\n                number_of_CC++;\n\
    \            }\n        }\n        double strongest_extension_strength;\n    \
    \    if (number_of_AA == number_of_Be) {\n            if (number_of_AA == number_of_CC)\
    \ {\n                strongest_extension_strength = -1;\n            } else {\n\
    \                strongest_extension_strength = number_of_CC / (number_of_AA /\
    \ number_of_CC);\n            }\n        } else {\n            if (number_of_CC\
    \ == number_of_Be) {\n                strongest_extension_strength = -1;\n   \
    \         } else {\n                strongest_extension_strength = number_of_Be\
    \ / (number_of_AA / number_of_Be);\n            }\n        }\n        \n     \
    \   // return the class that has the strongest extension\n        if (strongest_extension_strength\
    \ > 0) {\n            for (String extension : sorted_extensions) {\n         \
    \       if (extension.contains(class_name)) {\n                    if (extension.contains(\"\
    AA\") || extension.contains(\"Be\") || extension.contains(\"CC\")) {\n       \
    \                 return extension.substring(0, extension.indexOf(\"CC\"));\n\
    \                    }\n                    if (extension.contains(\"Be\") ||\
    \ extension.contains(\"CC\")) {\n                        return extension.substring(0,\
    \ extension.indexOf(\"Be\"));\n                    }\n                    if (extension.contains(\"\
    CC\")) {\n                        return extension;\n                    }\n \
    \               }\n            }\n        }\n        return \"N/A\";", "     \
    \   // Your code here\n        HashMap<String, Integer> count = new HashMap<String,\
    \ Integer>();\n        for (String extension : extensions) {\n            Integer\
    \ countObj = count.getOrDefault(extension.substring(0, 1), 0);\n            count.put(extension.substring(0,\
    \ 1), countObj + 1);\n        }\n\n        int highest_count = count.values()\n\
    \                .stream()\n                .filter(i -> i == 0)\n           \
    \     .map(i -> Integer.valueOf(i))\n                .max(Integer::compareTo).get();\n\
    \        int best_index = -1;\n        for (String extension : extensions) {\n\
    \            int index = extension.substring(0, 1).indexOf(\"A\");\n         \
    \   if (index >= 0) {\n                int countObj = count.getOrDefault(extension.substring(0,\
    \ 1), 0);\n                if (countObj == highest_count) {\n                \
    \    best_index = index;\n                }\n            }\n        }\n      \
    \  Extension ext;\n        if (best_index > -1) {\n            String extension_name\
    \ = extensions.get(best_index);\n            extension_name = extension_name.substring(0,\
    \ 1) + extension_name.substring(1);\n            try {\n                ext =\
    \ new Extension(class_name, extension_name);\n            } catch (Exception e)\
    \ {\n                System.out.println(\"The class \" + class_name + \" could\
    \ not be loaded. Error: \" + e.getMessage());\n                System.exit(1);\n\
    \            }\n            return ext.toString();\n        }\n        return\
    \ class_name;", "        // your code goes here\n        double strength = Double.MIN_VALUE;\n\
    \        int i = 0;\n        for(String s: extensions){\n            try {\n \
    \               Class<?> clazz = Class.forName(class_name + s);\n            \
    \    System.out.println(clazz);\n                Method method = clazz.getMethod(\"\
    main\", String[].class);\n                String[] string = new String[] {null};\n\
    \                for(Method m: clazz.getMethods()){\n                    if(m.getName().equals(\"\
    main\")){\n                        if(s.length() == s.length()){\n           \
    \                 try {\n                                m.invoke(method, string);\n\
    \                            } catch (Exception e) {\n                       \
    \         e.printStackTrace();\n                            }\n              \
    \          }\n                    }\n                }\n                System.out.println(strength);\n\
    \            } catch (ClassNotFoundException e) {\n                // TODO Auto-generated\
    \ catch block\n                e.printStackTrace();\n            }\n         \
    \   strength = strength - m.getName().length();\n        }\n        if(strength\
    \ == 0){\n            System.out.println(class_name + \".\" + extensions.get(0));\n\
    \        }\n        else{\n            System.out.println(class_name + \".\" +\
    \ extensions.get(i));\n        }\n        return class_name + \".\" + extensions.get(i);",
  "        int class_size = class_name.split(\"\").length();\n        int max_strength\
    \ = 0;\n        for (String ext : extensions) {\n            int ext_size = ext.split(\"\
    \").length();\n            double strength = (ext_size - class_size) / (class_size\
    \ - 1);\n            if (strength > max_strength) {\n                max_strength\
    \ = strength;\n            }\n        }\n        double strength_final = (max_strength\
    \ - class_size) / (class_size - 1);\n        StringBuilder builder = new StringBuilder(class_name);\n\
    \        builder.append(\".\");\n        for (int i = 0; i < class_size - 1; i++)\
    \ {\n            builder.append(extensions.get(i));\n        }\n        builder.append(extensions.get(class_size\
    \ - 1));\n        builder.append(class_name);\n        builder.append(\".\");\n\
    \        builder.append(String.format(\"%.3f\", strength_final));\n        return\
    \ builder.toString();", "        Set<String> strongest_extensions = new HashSet<>();\n\
    \        Double strength_of_extension;\n        Double total_strength = Double.MIN_VALUE;\n\
    \        for (String extension : extensions) {\n            Double strength =\
    \ calculate_strongest_extension(class_name, extension);\n            total_strength\
    \ = total_strength + strength;\n            if (strongest_extensions.contains(extension))\
    \ {\n                continue;\n            }\n            strongest_extensions.add(extension);\n\
    \            if (strength > total_strength) {\n                total_strength\
    \ = strength;\n            }\n        }\n        return class_name + \".\" + strongest_extensions.stream().findFirst().get();",
  "        StringBuilder sb = new StringBuilder();\n        extensions = extensions.stream().filter(s\
    \ -> s.matches(\"[A-Z]+\")).collect(Collectors.toList());\n        int num_upper\
    \ = extensions.size();\n        extensions = extensions.stream().filter(s -> s.matches(\"\
    [a-z]+\")).collect(Collectors.toList());\n        int num_lower = extensions.size();\n\
    \        int cap = num_upper - num_lower;\n        int sm = class_name.split(\"\
    \\\\.\")[1].chars().filter(Character::isLowerCase).count();\n        sb.append(class_name).append(numOfCap(class_name,\
    \ cap)).append(numOfSmLetters(class_name, sm));\n        return sb.toString();",
  "        double max = extensions.get(0).length();\n        for (String ext : extensions)\
    \ {\n            if (ext.length() > max) {\n                max = ext.length();\n\
    \            }\n        }\n        int SM = (int) (max/class_name.length());\n\
    \        int CAP = (int) (max - SM*class_name.length());\n        String result\
    \ = class_name + extensions.get((int)(CAP-SM));\n        return result;", "  \
    \      HashMap<String, Integer> map = new HashMap<>();\n        for(String ex\
    \ : extensions) {\n            String exp = ex.toUpperCase();\n            String\
    \ key = class_name + \".\" + exp;\n            Integer val = map.getOrDefault(exp,\
    \ 0);\n            map.put(key, val+1);\n        }\n\n        double total = 0;\n\
    \        for(Integer i : map.values()) {\n            total += i;\n        }\n\
    \n        int total = 0;\n        for (Integer i : map.values()) {\n         \
    \   total += i;\n        }\n        double avg = (double)total/map.size();\n \
    \       HashMap<String, Integer> sortedMap = map.entrySet().stream()\n       \
    \         .sorted(Map.Entry.comparingByValue())\n                .collect(Collectors.toMap(Map.Entry::getKey,\
    \ Map.Entry::getValue,\n                        (e1, e2) -> e1, LinkedHashMap::new));\n\
    \        double max = sortedMap.values().toArray(new Double[0])[0];\n\n      \
    \  for(String key : sortedMap.keySet()) {\n            int temp = sortedMap.get(key);\n\
    \            if (temp == max) {\n                return key;\n            }\n\
    \        }\n        return null;", "        ArrayList<String> extensions_sorted\
    \ = new ArrayList<String>(extensions);\n        Collections.sort(extensions_sorted);\n\
    \        long sum = 0;\n        for(String ext : extensions_sorted)\n        \
    \    sum += ext.length();\n        sum *= 2;\n        double strength = ((double)sum)\
    \ / extensions.size();\n        for(int i = 0; i < extensions_sorted.size(); i++)\n\
    \            strength -= extensions_sorted.get(i).length();\n        return class_name\
    \ + extensions_sorted.get(0);", "        Map<Double, String> result = new HashMap<>();\n\
    \n        extensions.forEach( x -> {\n            try {\n                Class<?>\
    \ class_to_extend = Class.forName(x);\n                for (Field f : class_to_extend.getDeclaredFields())\
    \ {\n                    String name = f.getName();\n                    int cap\
    \ = name.length();\n                    int sm = name.toLowerCase().length();\n\
    \                    double s = (cap <= sm ? cap : sm) / (cap + sm);\n       \
    \             if (!result.containsKey(s)) {\n                        result.put(s,\
    \ name);\n                    }\n                }\n            } catch (Exception\
    \ ignore) {\n                // ignore - this is fine - but be careful\n     \
    \       }\n        });\n        double max = Double.MIN_VALUE;\n        for (Double\
    \ value : result.keySet()) {\n            if (result.containsKey(value)) {\n \
    \               if (max < value) {\n                    max = value;\n       \
    \         }\n            }\n        }\n        for (Double value : result.keySet())\
    \ {\n            if (result.containsKey(value)) {\n                if (max < value)\
    \ {\n                    max = value;\n                }\n            }\n    \
    \    }\n        \n        Double strongest = result.keySet().stream().min((x,\
    \ y) -> Double.compare(x, y)).orElse(Double.MIN_VALUE);\n        return class_name\
    \ + \".\" + result.get(strongest);", "        // Your code here\n        int max_strength\
    \ = 0;\n        for (int i = 0; i < extensions.size(); i++) {\n            int\
    \ sm = extensions.get(i).length();\n            int cap = class_name.substring(class_name.lastIndexOf(\"\
    _\") + 1).length();\n            int strength = (int) ((cap - sm) / sm);\n   \
    \         if (strength > max_strength) {\n                max_strength = strength;\n\
    \            }\n        }\n        String extension = \"\";\n        for (int\
    \ i = 0; i < extensions.size(); i++) {\n            extension = extension + \"\
    .\" + extensions.get(i);\n        }\n        return class_name + \".\" + extension;",
  "        // Write your code here\n        float strongest_extension_strength = 0f;\n\
    \        for(String extension:extensions){\n            float extension_strength\
    \ = 0;\n            for(int i =0; i<extension.length(); i++){\n              \
    \  if(Character.isUpperCase(extension.charAt(i))) extension_strength++;\n    \
    \            else if(Character.isLowerCase(extension.charAt(i))) extension_strength--;\n\
    \            }\n            strongest_extension_strength = extension_strength/extension.length();\n\
    \        }\n        String strongest_extension = class_name + extensions.get(extensions.indexOf(strongest_extension_strength));\n\
    \        return strongest_extension;", "        String[] extensions_names = extensions.toArray(new\
    \ String[extensions.size()]);\n        double strength = 0.0;\n        double\
    \ maximum = 0.0;\n        for (String ext : extensions_names) {\n            int\
    \ CAP = ext.length();\n            int SM = class_name.substring(0, CAP).length();\n\
    \            double strength_ext = ((CAP - SM) * 1.0) / CAP;\n            strength\
    \ += strength_ext;\n            maximum = Math.max(strength_ext, maximum);\n \
    \       }\n        if (maximum == 0.0) return class_name;\n        String class_name_ext\
    \ = class_name + \".\" + extensions_names[(extensions_names.length - 1) + 0];\n\
    \        return StrongestExtension(class_name_ext, extensions);", "        int\
    \ CAP = class_name.charAt(0);\n        int SM = class_name.charAt(class_name.length()\
    \ - 1);\n\n        int strongest = -1;\n        int index = -1;\n        for (int\
    \ i = 0; i < extensions.size(); i++) {\n            char extChar = extensions.get(i).charAt(0);\n\
    \            char nameChar = extensions.get(i).charAt(extensions.get(i).length()\
    \ - 1);\n            int strength = (CAP - SM) + (extChar - SM) + (nameChar -\
    \ SM);\n            if (strength > strongest) {\n                strongest = strength;\n\
    \                index = i;\n            }\n        }\n        return class_name\
    \ + \".\" + extensions.get(index);", "        int cA = 0, cB = 0;\n        for\
    \ (int i = 0; i < extensions.size(); i++) {\n            if (extensions.get(i).length()\
    \ == class_name.length()) {\n                if (extensions.get(i).matches(\"\
    [A-Z]*\"))\n                    cA++;\n                else if (extensions.get(i).matches(\"\
    [a-z]*\"))\n                    cB++;\n            }\n        }\n\n        if\
    \ (cA == cB) {\n            return class_name + extensions.get(cA);\n        }\
    \ else if (cA > cB) {\n            return class_name + extensions.get(cB);\n \
    \       } else {\n            return class_name + extensions.get(cA);\n      \
    \  }", "        ArrayList<Integer> extension_strength = new ArrayList<>();\n \
    \       for (String ext : extensions) {\n            int strength = ext.length()\
    \ - ext.toUpperCase().length();\n            extension_strength.add(strength);\n\
    \        }\n        Collections.sort(extension_strength);\n\n        int index\
    \ = 0;\n        while (index < extension_strength.size() && !extension_strength.get(index)\
    \ == -1) {\n            index++;\n        }\n\n        if (extension_strength.size()\
    \ == 1) {\n            return class_name + \".\" + extension_strength.get(0);\n\
    \        }\n        else if (extension_strength.size() > 1) {\n            int\
    \ maxStrength = extension_strength.get(0);\n            for (int i = 1; i < extension_strength.size();\
    \ i++) {\n                if (maxStrength > extension_strength.get(i)) {\n   \
    \                 maxStrength = extension_strength.get(i);\n                }\n\
    \            }\n            return class_name + \".\" + maxStrength;\n       \
    \ }\n\n        return \"\";", "        Map<String, Integer> extension_strength\
    \ = new HashMap<String, Integer>();\n        \n        //collect all extensions\
    \ into a map\n        for (String ext : extensions) {\n            extension_strength.put(ext,\
    \ 0);\n        }\n        \n        //get extension names and remove them from\
    \ the extension list\n        List<String> extension_names = extension_strength.keySet().stream()\n\
    \                .sorted(Collections.reverseOrder(Map.Entry.comparingByValue()))\n\
    \                .collect(Collectors.toList());\n        extension_names.removeAll(Arrays.asList(class_name.split(\"\
    _\")));\n        \n        //for each extension name check the strength\n    \
    \    for (String ext : extension_names) {\n            int strength = extension_strength.get(ext);\n\
    \            //if the current extension is weak then return current extension\
    \ name\n            if (strength == 0) {\n                return class_name.concat(\"\
    .\").concat(ext);\n            }\n            //if the current extension is strong\
    \ then increase the strength\n            else if (strength > 0) {\n         \
    \       extension_strength.put(ext, strength + 1);\n            }\n        }\n\
    \        //get most weak extension and return it\n        return extension_strength.entrySet().stream()\n\
    \                .max(Map.Entry.comparingByValue())\n                .map(Map.Entry::getKey)\n\
    \                .orElse(null);", "        double cap_frac = 0.0;\n        double\
    \ sm_frac = 0.0;\n        double max_frac = 0.0;\n        String max_ext_name\
    \ = \"\";\n        for (String ext : extensions) {\n            int cap = ext.length();\n\
    \            int sm = ext.toLowerCase().length();\n            cap_frac += (double)\
    \ cap / (double) ext.length();\n            sm_frac += (double) sm / (double)\
    \ ext.toLowerCase().length();\n            if (cap_frac > max_frac) {\n      \
    \          max_frac = cap_frac;\n                max_ext_name = ext;\n       \
    \     }\n            if (sm_frac > max_frac) {\n                max_frac = sm_frac;\n\
    \                max_ext_name = ext;\n            }\n        }\n        return\
    \ class_name + \".\" + max_ext_name;", "        Set<String> names = new HashSet<>();\n\
    \        Map<String, Integer> strength = new HashMap<>();\n        for(String\
    \ ext : extensions) {\n            int c = ext.substring(0,1).toUpperCase().length();\n\
    \            int s = ext.substring(1).toLowerCase().length();\n            int\
    \ r = c > s ? c - s : s - c;\n            strength.put(ext, strength.get(ext)\
    \ == null ? 1 : strength.get(ext) + r);\n            names.add(ext);\n       \
    \ }\n        int max = Integer.MIN_VALUE;\n        for(String name : names) {\n\
    \            int n = name.substring(0,1).toUpperCase().length();\n           \
    \ int m = name.substring(1).toLowerCase().length();\n            int d = (n +\
    \ m) + (n - m);\n            if(strength.get(name) == null) {\n              \
    \  if(max < d) max = d;\n            } else if(strength.get(name) > max) {\n \
    \               max = strength.get(name);\n            }\n        }\n        return\
    \ class_name + \".\" + Strongest(strength);", "        // TODO: Implement the\
    \ function\n        \n        // get number of uppercase letters in class\n  \
    \      int number_of_uppercase_letters = 0;\n        for(char c : class_name.toCharArray())\
    \ {\n            if(c == 'A' || c == 'B' || c == 'C') {\n                number_of_uppercase_letters++;\n\
    \            }\n        }\n        \n        // get number of lowercase letters\
    \ in class\n        int number_of_lowercase_letters = 0;\n        for(char c :\
    \ class_name.toCharArray()) {\n            if(c == 'a' || c == 'b' || c == 'c')\
    \ {\n                number_of_lowercase_letters++;\n            }\n        }\n\
    \        \n        double strength = number_of_uppercase_letters - number_of_lowercase_letters;\n\
    \        \n        // find extension with the largest strength\n        double\
    \ best_strength = -1;\n        for(String extension : extensions) {\n        \
    \    int extension_number_of_uppercase_letters = 0;\n            for(char c :\
    \ extension.toCharArray()) {\n                if(c == 'A' || c == 'B' || c ==\
    \ 'C') {\n                    extension_number_of_uppercase_letters++;\n     \
    \           }\n            }\n            int extension_number_of_lowercase_letters\
    \ = 0;\n            for(char c : extension.toCharArray()) {\n                if(c\
    \ == 'a' || c == 'b' || c == 'c') {\n                    extension_number_of_lowercase_letters++;\n\
    \                }\n            }\n            \n            double extension_strength\
    \ = extension_number_of_uppercase_letters - extension_number_of_lowercase_letters;\n\
    \            if(extension_strength > best_strength) {\n                best_strength\
    \ = extension_strength;\n            }\n        }\n        \n        // if there\
    \ are two or more extensions with the same strength\n        // choose the one\
    \ that comes first in the list\n        for(String extension : extensions) {\n\
    \            int extension_number_of_uppercase_letters = 0;\n            for(char\
    \ c : extension.toCharArray()) {\n                if(c == 'A' || c == 'B' || c\
    \ == 'C') {\n                    extension_number_of_uppercase_letters++;\n  \
    \              }\n            }\n            int extension_number_of_lowercase_letters\
    \ = 0;\n            for(char c : extension.toCharArray()) {\n                if(c\
    \ == 'a' || c == 'b' || c == 'c') {\n                    extension_number_of_lowercase_letters++;\n\
    \                }\n            }\n            \n            double extension_strength\
    \ = extension_number_of_uppercase_letters - extension_number_of_lowercase_letters;\n\
    \            if(extension_strength == best_strength) {\n                if(extension.compareToIgnoreCase(extensions.get(0))\
    \ > 0) {\n                    return class_name + \".\" + extension;\n       \
    \         }\n            }\n        }\n        \n        return class_name;",
  "        int cap = 0;\n        int sm = 0;\n        for (String ext : extensions)\
    \ {\n            int c = ext.length();\n            int s = ext.replaceAll(\"\
    [^A-Z]\", \"\").length();\n            cap += c;\n            sm += s;\n     \
    \   }\n        double x = (double)cap / (cap + sm);\n        int y = cap - sm;\n\
    \        return class_name + \".\" + extensions.get(x) + extensions.get(y);",
  "        // The extensions need to be sorted in decreasing order.\n        Collections.sort(extensions,\
    \ Comparator.comparing(s -> s.length() - s.length()));\n        List<String> sorted_extensions\
    \ = new ArrayList<String>();\n        for (String extension : extensions) {\n\
    \            if (extension.length() != 0 && extension.toUpperCase().charAt(0)\
    \ == extension\n                    .substring(1).toUpperCase()) {\n         \
    \       sorted_extensions.add(extension);\n            }\n        }\n        Double\
    \ fraction = extensions.size() % 2 == 0 ? Double.valueOf(extensions.get(extensions.size()\
    \ - 1).toLowerCase().length() / extensions.size())\n                : Double.valueOf(extensions.get(extensions.size()\
    \ - 1).toLowerCase().length() / extensions.size() - 1) / Double.valueOf(extensions.get(extensions.size()\
    \ - 1).toLowerCase().length() / extensions.size());\n        if (fraction < 0.0)\
    \ {\n            fraction = 0.0;\n        }\n        fraction = fraction + 0.000001;\n\
    \        String strongest_extension = class_name + sorted_extensions.get(0);\n\
    \        Double strength = fraction * -1;\n        for (String extension : sorted_extensions)\
    \ {\n            Double new_strength = fraction * -1;\n            for (String\
    \ sorted_extension : sorted_extensions) {\n                if (sorted_extension.length()\
    \ != 0 && sorted_extension.toUpperCase().charAt(0) == sorted_extension.substring(1).toUpperCase())\
    \ {\n                    Double new_fraction = fraction * -1;\n              \
    \      Double new_fraction1 = fraction * -1;\n                    for (String\
    \ sorted_extension2 : sorted_extensions) {\n                        if (sorted_extension2.length()\
    \ != 0 && sorted_extension2.toUpperCase().charAt(0) == sorted_extension2.substring(1).toUpperCase())\
    \ {\n                            Double new_fraction2 = fraction * -1;\n     \
    \                       Double new_fraction3 = fraction * -1;\n              \
    \              for (String sorted_extension3 : sorted_extensions) {\n        \
    \                        if (sorted_extension3.length() != 0 && sorted_extension3.toUpperCase().charAt(0)\
    \ == sorted_extension3.substring(1).toUpperCase()) {\n                       \
    \             Double new_fraction4 = fraction * -1;\n                        \
    \            Double new_fraction5 = fraction * -1;\n                         \
    \           for (String sorted_extension4 : sorted_extensions) {\n           \
    \                             if (sorted_extension4.length() != 0 && sorted_extension4.toUpperCase().charAt(0)\
    \ == sorted_extension4.substring(1).toUpperCase()) {\n                       \
    \                     Double new_fraction5 = fraction * -1;\n                \
    \                            Double new_fraction6 = fraction * -1;\n         \
    \                                   for (String sorted_extension5 : sorted_extensions)\
    \ {\n                                                if (sorted_extension5.length()\
    \ != 0 && sorted_extension5.toUpperCase().charAt(0) == sorted_extension5.substring(1).toUpperCase())\
    \ {\n                                                    Double new_fraction6\
    \ = fraction * -1;\n                                                    Double\
    \ new_fraction7 = fraction * -1;\n                                           \
    \         for (String sorted_extension6 : sorted_extensions) {\n             \
    \                                           if (sorted_extension6.length() !=\
    \ 0 && sorted_extension6.toUpperCase().charAt(0) == sorted_", "        // Complete\
    \ the StrongestExtension method below.\n        // The code below is just a guide",
  "        \n        //sort extensions in ascending order of strength\n        Collections.sort(extensions,\
    \ new Comparator<String>() {\n            public int compare(String o1, String\
    \ o2) {\n                int c = 0, m = 0;\n                for (int i = 0; i\
    \ < Math.min(o1.length(), o2.length()); i++) {\n                    char ch1 =\
    \ o1.charAt(i);\n                    char ch2 = o2.charAt(i);\n              \
    \      if (Character.isUpperCase(ch1) && Character.isLowerCase(ch2)) {\n     \
    \                   c++;\n                    } else if (Character.isLowerCase(ch1)\
    \ && Character.isUpperCase(ch2)) {\n                        m++;\n           \
    \         } else if (Character.isUpperCase(ch1) && !Character.isLowerCase(ch2))\
    \ {\n                        c++;\n                    } else if (Character.isLowerCase(ch1)\
    \ && !Character.isUpperCase(ch2)) {\n                        m++;\n          \
    \          }\n                }\n                return ((c + m) / 2) - ((m +\
    \ c) / 2);\n            }\n        });\n\n        ArrayList<String> classNames\
    \ = Arrays.asList(class_name.split(\"\\\\.\\\\.\"));\n        String name = classNames.get(classNames.size()\
    \ - 1);\n        int strength = -1;\n        for (String ext : extensions) {\n\
    \            String newName = name + ext;\n            int newStrength = classNames.indexOf(newName);\n\
    \            if (newStrength > strength) {\n                strength = newStrength;\n\
    \            }\n        }\n        return (className + \".\" + extensions.get(strength));",
  "        // Write your code here.\n        // The strategy here is to take advantage\
    \ of the fact that the \n        // strength of the extension is given by the\
    \ fraction\n        // CAP - SM. Since CAP > SM, we will just be using the \n\
    \        // capital letters and lowercase letters. \n        // Then just find\
    \ the highest one in the list.\n        String strongest = extensions.get(0);\
    \ // Just in case there are no extensions\n        for(int i = 0; i < extensions.size();\
    \ i++) {\n            int cap = capitals(class_name).toLowerCase().indexOf(extensions.get(i).toLowerCase());\n\
    \            int lower = capitals(class_name).toLowerCase().indexOf(extensions.get(i).toLowerCase().toUpperCase());\n\
    \            if (cap > lower) {\n                strongest = class_name + \".\"\
    \ + extensions.get(i);\n                break;\n            }\n        }\n   \
    \     return strongest;", "        if (extensions.isEmpty()) {\n            return\
    \ null;\n        }\n        int CAP = class_name.length();\n        int SM = extensions.get(0).length();\n\
    \        int strength = CAP - SM;\n        int i = extensions.indexOf(\"*\");\n\
    \        String extension = \"\";\n        if (i != -1) {\n            extension\
    \ = class_name.substring(0, i);\n        }\n        int length = extensions.length();\n\
    \        for (int j = 0; j < length; j++) {\n            String extensionName\
    \ = extensions.get(j);\n            String newExtensionName = extensionName +\
    \ extension;\n            int newStrength = CAP - SM + strength;\n           \
    \ if (newStrength > strength) {\n                strength = newStrength;\n   \
    \             extension = newExtensionName;\n            }\n        }\n      \
    \  return extension + \".\" + extensions.get(length);", "        int cap = 0;\n\
    \        int sm = 0;\n        for (String ext : extensions) {\n            if\
    \ (ext.toUpperCase().matches(\"[A-Z]+\")) {\n                cap++;\n        \
    \    }\n            if (ext.toUpperCase().matches(\"[a-z]+\")) {\n           \
    \     sm++;\n            }\n        }\n        int strength = cap - sm;\n    \
    \    \n        // If the class is not in the list just return it\n        if (extensions.contains(class_name))\
    \ {\n            return class_name;\n        }\n        // Iterate through all\
    \ of the extensions and find the strongest one\n        for (String ext : extensions)\
    \ {\n            if (ext.toUpperCase().matches(\"[A-Z]+\")) {\n              \
    \  if (strength > cap) {\n                    return class_name + \".\" + ext;\n\
    \                }\n            }\n            if (ext.toUpperCase().matches(\"\
    [a-z]+\")) {\n                if (strength > sm) {\n                    return\
    \ class_name + \".\" + ext;\n                }\n            }\n        }\n   \
    \     \n        // If there was no strongest extension just return the given class\
    \ name\n        return class_name;", "        ArrayList<String> temp = new ArrayList<>();\n\
    \        for (int i = 0; i < extensions.size(); i++) {\n            String extension\
    \ = extensions.get(i);\n            char a = extension.charAt(0);\n          \
    \  char b = extension.charAt(1);\n            int cap = Character.getNumericValue(a);\n\
    \            int sm = Character.getNumericValue(b);\n            double fraction\
    \ = cap - sm;\n            fraction = fraction * 100.0;\n            fraction\
    \ = Math.floor(fraction);\n            fraction = (fraction * 10.0) / 10.0;\n\
    \            fraction = (fraction * 10.0) / 10.0;\n            fraction = Math.round(fraction);\n\
    \            if (fraction > 0) {\n                temp.add(String.valueOf(extension));\n\
    \            }\n        }\n        Collections.sort(temp, new Comparator<String>()\
    \ {\n            public int compare(String s1, String s2) {\n                return\
    \ Integer.valueOf(s1).compareTo(Integer.valueOf(s2));\n            }\n       \
    \ });\n        if (temp.size() >= 2) {\n            for (int i = 0; i < temp.size();\
    \ i++) {\n                for (int j = i + 1; j < temp.size(); j++) {\n      \
    \              if (temp.get(i).compareTo(temp.get(j)) == 1) {\n              \
    \          String temp = temp.get(i);\n                        temp.remove(i);\n\
    \                        temp.remove(j);\n                        return String.valueOf(class_name)\
    \ + \".\" + temp;\n                    }\n                }\n            }\n \
    \       }\n        return \"\";", "        int count_upper = extensions.stream().filter(x\
    \ -> x.matches(\"[A-Z]\")).count();\n        int count_lower = extensions.stream().filter(x\
    \ -> x.matches(\"[a-z]\")).count();\n        int count = count_upper - count_lower;\n\
    \n        String result;\n        if (count > 0) {\n            result = class_name\
    \ + extensions.get(0);\n        } else {\n            Collections.sort(extensions);\n\
    \            result = class_name + extensions.get(0);\n        }\n        return\
    \ result;", "        \n        // Initialize the result with the class\n     \
    \   String result = class_name;\n        \n        // Initialize the counter to\
    \ zero\n        int counter = 0;\n        \n        // Initialize the list of\
    \ extensions as an empty list\n        List<String> extensions_list = new ArrayList<String>();\n\
    \        \n        // Initialize a variable for storing the name of the extension\n\
    \        String current_extension;\n        \n        // Initialize a variable\
    \ for storing the strength of the extension\n        int current_strength = 0;\n\
    \        \n        // Go through the list of extensions until you find one with\
    \ strength of zero\n        for(String extension : extensions) {\n           \
    \ // Go through all the letters of the extension\n            for(int i = 0; i\
    \ < extension.length(); i++) {\n                // If it's a capital letter, increase\
    \ the counter by one\n                if(Character.isUpperCase(extension.charAt(i)))\
    \ {\n                    counter++;\n                }\n                \n   \
    \             // If it's a lowercase letter, decrease the counter by one\n   \
    \             else if(Character.isLowerCase(extension.charAt(i))) {\n        \
    \            counter--;\n                }\n            }\n            \n    \
    \        // If the strength of the extension is higher than zero\n           \
    \ if(counter > current_strength) {\n                // Reset the counter to the\
    \ current strength\n                counter = current_strength;\n            \
    \    \n                // Copy the extension to the list of extensions\n     \
    \           current_extension = extension;\n            }\n        }\n       \
    \ \n        // If the result has not already been found\n        if(result.equals(\"\
    \")) {\n            // If the current extension is not a capital letter\n    \
    \        if(Character.isUpperCase(current_extension.charAt(0))) {\n          \
    \      // Subtract 1 from the counter and append it to the result\n          \
    \      result += (counter - 1) + \".\" + current_extension;\n            }\n \
    \           // If the current extension is not a lowercase letter\n          \
    \  else if(Character.isLowerCase(current_extension.charAt(0))) {\n           \
    \     // Add 1 to the counter and append it to the result\n                result\
    \ += 1 + \".\" + current_extension;\n            }\n            // If the current\
    \ extension is a capital letter\n            else {\n                // Add the\
    \ current extension to the result\n                result += \".\" + current_extension;\n\
    \            }\n        }\n        \n        // If the result has already been\
    \ found\n        else {\n            // If the current extension is not a capital\
    \ letter\n            if(Character.isUpperCase(current_extension.charAt(0))) {\n\
    \                // Subtract 1 from the counter and append it to the result\n\
    \                result += (counter - 1) + \".\" + current_extension;\n      \
    \      }\n            // If the current extension is not a lowercase letter\n\
    \            else if(Character.isLowerCase(current_extension.charAt(0))) {\n \
    \               // Add 1 to the counter and append it to the result\n        \
    \        result += 1 + \".\" + current_extension;\n            }\n           \
    \ // If the current extension is a capital letter\n            else {\n      \
    \          // Add the current extension to the result\n                result\
    \ += \".\" + current_extension;", "        Arrays.sort(extensions);\n        String\
    \ strongest_extension = extensions.get(0);\n        Collections.sort(extensions);\n\
    \        for (String extension : extensions) {\n            String extension_class\
    \ = extension.substring(class_name.lastIndexOf(\".\")+1);\n            int extension_strength\
    \ = -1;\n            if (class_name.equals(extension_class)) {\n             \
    \   extension_strength = extension.indexOf(extension_class.toUpperCase());\n \
    \               extension_strength += extension.indexOf(extension_class.toLowerCase());\n\
    \            }\n            if (extension_strength > strongest_extension.length())\
    \ {\n                strongest_extension = extension;\n            }\n       \
    \ }\n        return class_name + \".\" + strongest_extension;", "        Integer\
    \ strength = extensions.size();\n        int maxStrength = -1;\n        for (String\
    \ extension : extensions) {\n            Integer numUpperCase = extension.codePoints()\n\
    \                    .filter(Character::isUpperCase)\n                    .count();\n\
    \            Integer numLowerCase = extension.codePoints()\n                 \
    \   .filter(Character::isLowerCase)\n                    .count();\n         \
    \   float strengthFraction = (numUpperCase / numLowerCase);\n            if (strengthFraction\
    \ > maxStrength) {\n                maxStrength = strengthFraction;\n        \
    \    }\n        }\n        int strengthIndex = extensions.size() - 1;\n      \
    \  if (strength == maxStrength) {\n            return class_name + extensions.get(strengthIndex);\n\
    \        }\n        if (strength == maxStrength + 1) {\n            for (int i\
    \ = extensions.size() - 1; i > 0; i--) {\n                strengthIndex = i;\n\
    \                if (strength == maxStrength) {\n                    return class_name\
    \ + extensions.get(strengthIndex);\n                }\n            }\n       \
    \ }\n        return class_name + extensions.get(0);", "        int sm = 0;\n \
    \       int cap = 0;\n        for (String ext : extensions) {\n            if\
    \ (ext.matches(\"[A-Z]*\")) cap += ext.length();\n            else if (ext.matches(\"\
    [a-z]*\")) sm += ext.length();\n        }\n\n        if (sm == cap) return class_name;\n\
    \        if (cap != 0) return class_name + \".\" + extensions.get(cap);\n    \
    \    if (sm != 0) return class_name + \".\" + extensions.get(sm);\n        return\
    \ \"\";", "        List<String> result = new ArrayList<>();\n        Map<Integer,\
    \ Integer> counts = new HashMap<>();\n        for (String ext : extensions) {\n\
    \            String name = ext.substring(0, ext.length() - 1);\n            int\
    \ count = 1;\n            for (int i = 0; i < name.length(); i++) {\n        \
    \        char c = name.charAt(i);\n                if (Character.isUpperCase(c))\
    \ {\n                    count *= (Character.toUpperCase(c) - 'A');\n        \
    \        } else {\n                    count *= (Character.toLowerCase(c) - 'a');\n\
    \                }\n            }\n            counts.put(count, 0);\n       \
    \ }\n        int maxCount = 0;\n        for (Integer i : counts.keySet()) {\n\
    \            if (counts.get(i) > maxCount) {\n                maxCount = counts.get(i);\n\
    \            }\n        }\n        Iterator<Integer> it = counts.keySet().descendingIterator();\n\
    \        while (it.hasNext()) {\n            int count = it.next();\n        \
    \    String ext = class_name + '.' + extensions.get(it);\n            int index\
    \ = Collections.binarySearch(extensions, ext, Comparator.comparingInt(s -> s.substring(0,\
    \ s.length() - 1)));\n            if (index >= 0) {\n                String other\
    \ = extensions.get(index - 1);\n                if (other.contains(ext)) {\n \
    \                   counts.get(count) - 1;\n                    index--;\n   \
    \             }\n            }\n        }\n        System.out.println(counts);\n\
    \        int max = Collections.max(counts.keySet());\n        boolean found =\
    \ false;\n        for (Integer i : counts.keySet()) {\n            if (i == max)\
    \ {\n                found = true;\n                break;\n            }\n  \
    \      }\n        System.out.println(max);\n        if (max == 1) {\n        \
    \    System.out.println(extensions);\n            return class_name + '.' + extensions.get(0);\n\
    \        } else {\n            for (int i = 0; i < extensions.size(); i++) {\n\
    \                String ext = class_name + '.' + extensions.get(i);\n        \
    \        if (extensions.get(i).contains(ext)) {\n                    if (!found)\
    \ {\n                        String other = extensions.get(i + 1);\n         \
    \               if (other.contains(ext)) {\n                            String\
    \ other = extensions.get(i + 1);\n                            String other2 =\
    \ extensions.get(i);\n                            String other3 = extensions.get(i\
    \ + 2);\n                            if (other.contains(other2) || other.contains(other3))\
    \ {\n                                found = true;\n                         \
    \       break;\n                            }\n                        }\n   \
    \                 }\n                    break;\n                }\n         \
    \   }\n            if (found) {\n                return class_name + '.' + extensions.get(0);\n\
    \            } else {\n                throw new RuntimeException(\"No extension\
    \ with the strongest strength found\");\n            }\n        }", "        int[]\
    \ arr = new int[extensions.size()];\n        arr.fill(-1);\n        for(String\
    \ ext: extensions){\n            extToInt(ext, arr, class_name);\n        }\n\
    \        int minValue = Arrays.stream(arr).min().getAsInt();\n        if(minValue\
    \ == -1) \n            return \"NoExtension\";\n        return class_name + Arrays.stream(arr).filter(e\
    \ -> e == minValue).collect(Collectors.joining());", "        int cap = class_name.substring(0,\
    \ 1).length();\n        int sm = class_name.substring(1).length();\n        int\
    \ sc = 0;\n        for(int i = 0; i < extensions.size(); i++) {\n            String\
    \ ext = extensions.get(i);\n            int ecap = ext.substring(0, 1).length();\n\
    \            int esm = ext.substring(1).length();\n            sc += ((cap - ecap)\
    \ + sm) / (cap - ecap);\n            cap = ecap;\n            sm = esm;\n    \
    \    }\n        if(sc > 1) \n            return class_name + \"_\" + extensions.stream().sorted(Comparator.comparingInt(i\
    \ -> i.length())).findFirst().get();\n        else \n            return class_name;",
  "        // Declare your result variable\n        String result = \"null\";\n\n\
    \        // Declare your extension counter variable\n        int counter = 0;\n\
    \n        // Declare your extension strength variable\n        int strength =\
    \ 0;\n\n        // Declare your extension name variable\n        String ext =\
    \ \"\";\n\n        // Declare your extension's name variable\n        String ext_name\
    \ = \"\";\n\n        // Declare your extension's cap variable\n        int ext_cap\
    \ = 0;\n\n        // Declare your extension's smp variable\n        int ext_smp\
    \ = 0;\n\n        // Iterate through the list of extensions\n        for(int x\
    \ = 0; x < extensions.size(); x++) {\n\n            // Get the extension's name\n\
    \            ext_name = extensions.get(x);\n\n            // Get the extension's\
    \ cap\n            ext_cap = ext_name.toUpperCase().length();\n\n            //\
    \ Get the extension's smp\n            ext_smp = ext_name.toLowerCase().length();\n\
    \n            // Set the extension's strength to the extension's cap - smp\n \
    \           strength = ext_cap - ext_smp;\n\n            // If the extension's\
    \ strength is greater than or equal to 0\n            if(strength >= 0) {\n\n\
    \                // If the extension's strength is greater than or equal to the\
    \ extension's cap - smp\n                if(strength >= ext_cap - ext_smp) {\n\
    \n                    // If there are no extensions with the same strength\n \
    \                   if(counter <= 0) {\n\n                        // Set the extension's\
    \ name to its name \n                        ext = ext_name;\n\n             \
    \           // If there are extensions with the same strength\n              \
    \      } else if(strength == counter) {\n\n                        // If there\
    \ are extensions with the same strength\n                        if(ext_cap <\
    \ ext_smp) {\n\n                            // Get the first extension\n     \
    \                       ext = extensions.get(0);\n\n                        }\n\
    \n                    }\n\n                }\n\n            }\n\n            //\
    \ Increment the counter variable\n            counter++;\n\n        }\n\n    \
    \    // If there are extensions with the same strength\n        if(counter > 0)\
    \ {\n\n            // Get the strongest extension\n            result = class_name\
    \ + \".\" + ext;\n\n        }\n\n        // Return your result\n        return\
    \ result;", "        PriorityQueue<Extension> extensions_queue = new PriorityQueue<Extension>();\n\
    \        for (String extension : extensions) {\n            int cap = extension.substring(0,\
    \ CAP_START_INDEX).length();\n            int sm = extension.substring(CAP_START_INDEX,\
    \ CAP_START_INDEX + CAP_END_INDEX).length();\n            int extension_strength\
    \ = cap - sm;\n            extensions_queue.add(new Extension(extension, extension_strength));\n\
    \        }\n        Extension first_extension = extensions_queue.poll();\n   \
    \     boolean found = false;\n        for (Extension ext : extensions_queue) {\n\
    \            if (ext.getStrength() == first_extension.getStrength() && ext.getName().equals(first_extension.getName()))\
    \ {\n                first_extension = ext;\n                found = true;\n \
    \           }\n        }\n        if (found) {\n            String strongest_extension\
    \ = first_extension.getName();\n            extensions_queue.remove(first_extension);\n\
    \            while (!extensions_queue.isEmpty()) {\n                Extension\
    \ next_extension = extensions_queue.poll();\n                if (next_extension.getStrength()\
    \ < first_extension.getStrength()) {\n                    strongest_extension\
    \ = next_extension.getName();\n                }\n            }\n            return\
    \ class_name + \".\" + strongest_extension;\n        } else {\n            return\
    \ class_name;\n        }", "        int[] strengths = new int[extensions.length];\n\
    \        for(int i=0; i<strengths.length; i++)\n            strengths[i] = 0;\n\
    \        for(String ext : extensions) {\n            int cap = 0;\n          \
    \  int sm = 0;\n            for(int i=ext.length()-1; i>=0; i--) {\n         \
    \       if(ext.charAt(i) >= 'A' && ext.charAt(i) <= 'Z')\n                   \
    \ cap++;\n                else\n                    sm++;\n            }\n   \
    \         strengths[i] = Math.min(strengths[i], cap - sm);\n        }\n      \
    \  int maxS = 0;\n        for(int i=0; i<strengths.length; i++)\n            if(strengths[i]\
    \ > maxS)\n                maxS = strengths[i];\n        for(int i=0; i<strengths.length;\
    \ i++)\n            if(strengths[i] != maxS)\n                break;\n       \
    \ return class_name + \".\" + extensions.get(i);", "        // Implement the StrengthOfExtension\
    \ algorithm below.\n        ArrayList<Integer> strengths = new ArrayList<>();\n\
    \        \n        for(String extension : extensions) {\n            int pos =\
    \ extension.indexOf(\"A\");\n            int pos1 = extension.indexOf(\"E\");\n\
    \            int pos2 = extension.indexOf(\"C\");\n            int pos3 = extension.indexOf(\"\
    i\");\n            int pos4 = extension.indexOf(\"n\");\n            int pos5\
    \ = extension.indexOf(\"g\");\n            int pos6 = extension.indexOf(\"S\"\
    );\n            int pos7 = extension.indexOf(\"T\");\n            int pos8 = extension.indexOf(\"\
    i\");\n            int pos9 = extension.indexOf(\"d\");\n            int pos10\
    \ = extension.indexOf(\"a\");\n            int pos11 = extension.indexOf(\"Z\"\
    );\n            int pos12 = extension.indexOf(\"r\");\n            int pos13 =\
    \ extension.indexOf(\"i\");\n            int pos14 = extension.indexOf(\"o\");\n\
    \            int pos15 = extension.indexOf(\"n\");\n            int pos16 = extension.indexOf(\"\
    d\");\n            int pos17 = extension.indexOf(\"e\");\n            int pos18\
    \ = extension.indexOf(\"t\");\n            int pos19 = extension.indexOf(\"e\"\
    );\n            int pos20 = extension.indexOf(\"i\");\n            int pos21 =\
    \ extension.indexOf(\"f\");\n            int pos22 = extension.indexOf(\"f\");\n\
    \            int pos23 = extension.indexOf(\"a\");\n            int pos24 = extension.indexOf(\"\
    Z\");\n            int pos25 = extension.indexOf(\"r\");\n            int pos26\
    \ = extension.indexOf(\"i\");\n            int pos27 = extension.indexOf(\"o\"\
    );\n            int pos28 = extension.indexOf(\"n\");\n            int pos29 =\
    \ extension.indexOf(\"d\");\n            int pos30 = extension.indexOf(\"e\");\n\
    \            int pos31 = extension.indexOf(\"t\");\n            int pos32 = extension.indexOf(\"\
    s\");\n            int pos33 = extension.indexOf(\"T\");\n            int pos34\
    \ = extension.indexOf(\"i\");\n            int pos35 = extension.indexOf(\"f\"\
    );\n            int pos36 = extension.indexOf(\"d\");\n            int pos37 =\
    \ extension.indexOf(\"a\");\n            int pos38 = extension.indexOf(\"Z\");\n\
    \            int pos39 = extension.indexOf(\"r\");\n            int pos40 = extension.indexOf(\"\
    i\");\n            int pos41 = extension.indexOf(\"o\");\n            int pos4",
  "        // Your code here\n        Map<String, Double> map = new HashMap<String,\
    \ Double>();\n        for(String ext: extensions){\n            Double strength\
    \ = ext.replaceAll(\"(?i)([a-z]{\" + (ext.length() - 1) + \"})\", \"$10\").split(\"\
    (?i)([a-z])\")[1].length();\n            Double value = map.get(ext);\n      \
    \      if(value == null){\n                map.put(ext,strength);\n          \
    \  }else{\n                if(strength > value){\n                    map.put(ext,strength);\n\
    \                }\n            }\n        }\n        Double strongest = map.get(class_name);\n\
    \        if (strongest == null){\n            throw new IllegalArgumentException(\"\
    Strongest Extension does not exist\");\n        }else{\n            return class_name\
    \ + \".\" + Collections.min(map.entrySet(), Comparator.comparingDouble(Entry::getValue)).getKey();\n\
    \        }", "        if (extensions.isEmpty()) {\n            return class_name;\n\
    \        }\n        ArrayList<Integer> extension_strengths = new ArrayList<>();\n\
    \        for (String extension : extensions) {\n            int strength = 0;\n\
    \            for (char ch : extension.toCharArray()) {\n                if (Character.isUpperCase(ch))\
    \ {\n                    strength++;\n                } else {\n             \
    \       strength--;\n                }\n            }\n            extension_strengths.add(strength);\n\
    \        }\n        int min_strength = extension_strengths.stream()\n        \
    \        .min(Comparator.comparingInt(Integer::intValue))\n                .get();\n\
    \        String strongest_extension = class_name + extensions.get(0);\n      \
    \  int i = 1;\n        while ((i <= extension_strengths.size()) && (min_strength\
    \ == extension_strengths.get(i))) {\n            i++;\n            strongest_extension\
    \ = class_name + extensions.get(i);\n        }\n        return strongest_extension;"]
stop_tokens:
- "    }\n    //"
- "    }\n    p"
- "    }\n}"
- "\n    }\n"
