completions: []
language: java
name: HumanEval_130_tri
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
  \ by mathematicians in \n    // the last couple centuries. However, what people\
  \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the\
  \ recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n   \
  \ // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n\
  \    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1)\
  \ + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer\
  \ number n, you have to a return a list of the \n    // first n + 1 numbers of the\
  \ Tribonacci sequence.\n    // Examples:\n    // tri(3) = [1, 3, 2, 8]\n    public\
  \ static ArrayList<Integer> tri(int n) {\n"
stop_tokens:
- "    }\n    //"
- "    }\n    p"
- '    }

  }'
- "\n    }\n"
tests: "}\n    public static void main(String[] args) {\n    assert(tri((3)).equals((new\
  \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8)))));\n    assert(tri((4)).equals((new\
  \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3)))));\n\
  \    assert(tri((5)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3,\
  \ (int)2, (int)8, (int)3, (int)15)))));\n    assert(tri((6)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
  \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4)))));\n    assert(tri((7)).equals((new\
  \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
  \ (int)4, (int)24)))));\n    assert(tri((8)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
  \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5)))));\n    assert(tri((9)).equals((new\
  \ ArrayList<Integer>(Arrays.asList((int)1, (int)3, (int)2, (int)8, (int)3, (int)15,\
  \ (int)4, (int)24, (int)5, (int)35)))));\n    assert(tri((20)).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
  \ (int)3, (int)2, (int)8, (int)3, (int)15, (int)4, (int)24, (int)5, (int)35, (int)6,\
  \ (int)48, (int)7, (int)63, (int)8, (int)80, (int)9, (int)99, (int)10, (int)120,\
  \ (int)11)))));\n    assert(tri((0)).equals((new ArrayList<Integer>(Arrays.asList((int)1)))));\n\
  \    assert(tri((1)).equals((new ArrayList<Integer>(Arrays.asList((int)1, (int)3)))));\n\
  \    }\n\n}\n"
