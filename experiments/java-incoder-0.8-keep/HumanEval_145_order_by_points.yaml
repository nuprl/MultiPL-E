name: HumanEval_145_order_by_points
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Write a function which sorts the given list of integers\n\
  \    // in ascending order according to the sum of their digits.\n    // Note: if\
  \ there are several items with similar sum of their digits,\n    // order them based\
  \ on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
  \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([]) ==\
  \ []\n    public static ArrayList<Integer> orderByPoints(ArrayList<Integer> nums)\
  \ {\n"
tests: "return new ArrayList<Integer>(Arrays.asList());\n    }\n    public static\
  \ void main(String[] args) {\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1,\
  \ (int)11, (int)-1, (int)-11, (int)-12)))).equals((new ArrayList<Integer>(Arrays.asList((int)-1,\
  \ (int)-11, (int)1, (int)-12, (int)11)))));\n    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1234,\
  \ (int)423, (int)463, (int)145, (int)2, (int)423, (int)423, (int)53, (int)6, (int)37,\
  \ (int)3457, (int)3, (int)56, (int)0, (int)46)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
  \ (int)2, (int)3, (int)6, (int)53, (int)423, (int)423, (int)423, (int)1234, (int)145,\
  \ (int)37, (int)46, (int)56, (int)463, (int)3457)))));\n    assert(orderByPoints((new\
  \ ArrayList<Integer>(Arrays.asList()))).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
  \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)1, (int)-11,\
  \ (int)-32, (int)43, (int)54, (int)-98, (int)2, (int)-3)))).equals((new ArrayList<Integer>(Arrays.asList((int)-3,\
  \ (int)-32, (int)-98, (int)-11, (int)1, (int)2, (int)43, (int)54)))));\n    assert(orderByPoints((new\
  \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)4, (int)5, (int)6,\
  \ (int)7, (int)8, (int)9, (int)10, (int)11)))).equals((new ArrayList<Integer>(Arrays.asList((int)1,\
  \ (int)10, (int)2, (int)11, (int)3, (int)4, (int)5, (int)6, (int)7, (int)8, (int)9)))));\n\
  \    assert(orderByPoints((new ArrayList<Integer>(Arrays.asList((int)0, (int)6,\
  \ (int)6, (int)-76, (int)-21, (int)23, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)-76,\
  \ (int)-21, (int)0, (int)4, (int)23, (int)6, (int)6)))));\n    }\n\n}\n"
completions: ["        // Write your code here\n        Map<Integer,Integer> map =\
    \ new HashMap<Integer,Integer>();\n        for(Integer num : nums){\n        \
    \    if(map.get(num)==null){\n                map.put(num,num);\n            }else{\n\
    \                int sum = map.get(num);\n                int num2 = map.get(sum);\n\
    \                if(num>num2){\n                    map.put(num,num2);\n     \
    \           }else{\n                    map.put(sum,sum);\n                }\n\
    \            }\n        }\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        for(Integer num : nums){\n            if(map.get(num)!=null){\n     \
    \           result.add(num);\n                map.remove(num);\n            }\n\
    \        }\n        return result;", "        if (nums.isEmpty()){\n         \
    \   return nums;\n        }\n        int maxSum = nums.stream().reduce(0, (sum,\
    \ i) -> sum + i); //get the max sum\n        Arrays.sort(nums, (a, b) -> maxSum\
    \ - sum); //sort the list based on the sum\n        ArrayList<Integer> sortedNums\
    \ = new ArrayList<>(); //create a new list to store our sorted numbers\n     \
    \   for(int i = 0; i < nums.size(); i++){\n            sortedNums.add(nums.get(i));\
    \ //add our current number\n        }\n        return sortedNums;", "        Arrays.sort(nums);\n\
    \        for (int i = 0; i < nums.size(); i++) {\n            int sum = 0;\n \
    \           for (int j = 0; j < nums.size(); j++) {\n                sum += nums.get(j);\n\
    \                if (sum == nums.get(i)) {\n                    ArrayList<Integer>\
    \ temp = new ArrayList<>();\n                    temp.add(j);\n              \
    \      temp.add(i);\n                    Arrays.sort(temp);\n                \
    \    nums.clear();\n                    nums.addAll(temp);\n                 \
    \   break;\n                }\n            }\n        }\n        System.out.println(nums);\n\
    \        return nums;", "        ArrayList<Integer> ans = new ArrayList<>();\n\
    \        // The first number with same sum of digits goes to front\n        Map<Integer,\
    \ Integer> map = new HashMap<>();\n        for (Integer num : nums) {\n      \
    \      int sum = num.intValue();\n            if (map.containsKey(sum)) {\n  \
    \              int index = map.get(sum);\n                ans.add(index, num);\n\
    \            } else {\n                map.put(sum, ans.size());\n           \
    \     ans.add(num);\n            }\n        }\n        return ans;", "       \
    \ ArrayList<Integer> list = new ArrayList<Integer>();\n        Collections.sort(nums);\n\
    \        for (int i = 0; i < nums.size(); i++) {\n            int point = nums.get(i);\n\
    \            int sum = 0;\n            while (point > 0) {\n                sum\
    \ += point % 10;\n                point /= 10;\n            }\n            list.add(sum);\n\
    \        }\n        return list;", "        ArrayList<Integer> ordered = new ArrayList<Integer>();\n\
    \        Collections.sort(nums);\n        for (int i : nums)\n        {\n    \
    \        int sum = i;\n            for (int j = i - 1; j >= 0; j--)\n        \
    \    {\n                int cur = nums.get(j);\n                sum += cur;\n\
    \                if (sum < 0)\n                    sum = (sum + 10) * -1;\n  \
    \          }\n            ordered.add(0, sum);\n        }\n        return ordered;",
  "        Map<Integer, Integer> sumOfDigits = new HashMap<>();\n\n        for (int\
    \ i = 0; i < nums.size(); i++) {\n            Integer curSum = sumOfDigits.getOrDefault(nums.get(i),\
    \ 0);\n            sumOfDigits.put(nums.get(i), curSum + 1);\n        }\n\n  \
    \      ArrayList<Integer> sorted = new ArrayList<>();\n        for (Integer num:\
    \ sumOfDigits.keySet()) {\n            Integer curSum = sumOfDigits.get(num);\n\
    \            sorted.add(num);\n            if (curSum > 1) {\n               \
    \ Integer index = sumOfDigits.get(num) - 1;\n                sorted.add(index);\n\
    \            }\n        }\n\n        return sorted;", "        ArrayList<Integer>\
    \ res = new ArrayList<>();\n\n        // Sort first to find out whether have duplicate\
    \ value\n        nums.sort(Comparator.comparing(Integer::intValue).reversed());\n\
    \        boolean haveDuplicate = false;\n        int sum = 0;\n        for (int\
    \ i = 0; i < nums.size(); i++) {\n            sum = sum + nums.get(i);\n     \
    \       if (haveDuplicate && sum == nums.get(i)) {\n                res.add(i);\n\
    \            }\n            if (sum < nums.get(i)) {\n                haveDuplicate\
    \ = true;\n            }\n        }\n\n        // If not haveDuplicate, just add\
    \ original list\n        if (!haveDuplicate) {\n            return nums;\n   \
    \     }\n\n        // Get all duplicates\n        Set<Integer> duplicates = nums.stream().filter(x\
    \ -> nums.contains(x)).collect(Collectors.toSet());\n\n        // Sort them\n\
    \        List<Integer> sortedDuplicates = duplicates.stream()\n              \
    \  .sorted(Comparator.comparing(Integer::intValue).reversed()).collect(Collectors.toList());\n\
    \        res.addAll(sortedDuplicates);\n        return res;", "        ArrayList<Integer>\
    \ ret = new ArrayList<Integer>();\n        Integer sum = 0;\n        boolean hasDigit\
    \ = false;\n        for (int i = 0; i < nums.size(); i++) {\n            sum +=\
    \ nums.get(i);\n            hasDigit = (sum >= 0);\n            \n           \
    \ if (hasDigit) {\n                ret.add(nums.get(i));\n                sum\
    \ -= nums.get(i);\n            }\n        }\n        \n        return ret;", " \
    \       // Write your code here\n        Map<Integer, Integer> m = new HashMap<Integer,\
    \ Integer>();\n        for(Integer i : nums) {\n            if(m.containsKey(i))\
    \ {\n                m.put(i, m.get(i)+1);\n            } else {\n           \
    \     m.put(i, 1);\n            }\n        }\n        List<Integer> list = new\
    \ ArrayList<Integer>(m.keySet());\n        Collections.sort(list);\n        ArrayList<Integer>\
    \ sorted = new ArrayList<Integer>(list);\n        Collections.sort(sorted);\n\
    \        return sorted;", "        Map<Integer,Integer> hash = new HashMap<Integer,Integer>();\n\
    \        for(int i=0;i<nums.size();i++){\n            hash.put(nums.get(i), i);\n\
    \        }\n        ArrayList<Integer> result = new ArrayList<Integer>();\n  \
    \      for(Integer key : hash.keySet()){\n            Integer value = hash.get(key);\n\
    \            result.add(key + value);\n        }\n        return result;", " \
    \       // Write your code here\n\n        ArrayList<Integer> sorted = new ArrayList<>();\n\
    \        int max = Integer.MIN_VALUE;\n        int maxIndex = 0;\n        int\
    \ sum = 0;\n        int sumPoints = 0;\n        for (int i = 0; i < nums.size();\
    \ i++) {\n            sum += nums.get(i);\n            if (sum > max) {\n    \
    \            maxIndex = i;\n                max = sum;\n            }\n      \
    \  }\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums.get(i);\n\
    \            if (sum == max) {\n                sorted.add(maxIndex);\n      \
    \          sorted.add(nums.get(i));\n            }\n        }\n        return\
    \ sorted;", "        List<Integer> result = new ArrayList<>();\n        for(int\
    \ num : nums) {\n            int sum = 0;\n            while(num!=0) {\n     \
    \           sum += (num % 10);\n                num /= 10;\n            }\n  \
    \          if(result.size() > 0 && result.stream().noneMatch(i -> i.intValue()\
    \ == sum)) {\n                List<Integer> list = orderByPoints(nums);\n    \
    \            Collections.sort(list);\n                result.addAll(list);\n \
    \           }\n            else if(result.size() == 0 || result.stream().anyMatch(i\
    \ -> i.intValue() == sum)) {\n                result.add(num);\n            }\n\
    \            else {\n                List<Integer> list = orderByPoints(nums);\n\
    \                Collections.sort(list);\n                result.add(num);\n \
    \               result.addAll(list);\n            }\n        }\n        return\
    \ result;", "        if (nums == null || nums.isEmpty())\n            return nums;\n\
    \        int len = nums.size();\n        int[] digits = new int[len];\n      \
    \  Arrays.fill(digits, 0);\n        for (Integer i : nums) {\n            for\
    \ (int j = 0; j < i.getClass().getNumber().toString().length(); j++) {\n     \
    \           digits[i] += i.getClass().getNumber().toString().charAt(j) - '0';\n\
    \            }\n        }\n        Arrays.sort(digits, (a, b) -> digits[a] + digits[b]);\n\
    \        ArrayList<Integer> result = new ArrayList<Integer>();\n        Map<Integer,\
    \ Integer> tmpMap = new HashMap<>();\n        for (int i = 0; i < len; i++) {\n\
    \            if (digits[i] != 0) {\n                int j = i;\n             \
    \   while (j > 0 && digits[j - 1] != 0)\n                    j--;\n          \
    \      int sum = 0;\n                for (int k = 0; k < j; k++) {\n         \
    \           sum += digits[k];\n                }\n                result.add((sum\
    \ + digits[j]) - 1);\n            } else {\n                result.add(len - 1);\n\
    \            }\n            tmpMap.put(digits[i], i);\n        }\n        for\
    \ (Integer i : tmpMap.keySet()) {\n            nums.remove(i);\n        }\n  \
    \      return result;", "        nums.sort((a, b) -> {\n            int sum =\
    \ a + b;\n            if (sum < 0)\n                sum *= -1;\n            return\
    \ sum;\n        });\n        return nums;", "        // write your code here\n\
    \        Map<Integer, Integer> map = new HashMap<>();\n        for (int i = 0;\
    \ i < nums.size(); i++) {\n            int sum = 0;\n            while (nums.size()\
    \ - i > 1) {\n                int digit = nums.get(i);\n                sum +=\
    \ digit;\n                map.put(sum, i + 1);\n                sum = 0;\n   \
    \             i -= 1;\n            }\n        }\n        ArrayList<Integer> numList\
    \ = new ArrayList<>(map.keySet());\n        Collections.sort(numList);\n     \
    \   return numList;", "        ArrayList<Integer> numsCopy = new ArrayList<Integer>(nums);\n\
    \        ArrayList<Integer> sortedNums = new ArrayList<Integer>();\n        ArrayList<Integer>\
    \ sums = new ArrayList<Integer>();\n        Map<Integer, Integer> temp = new HashMap<Integer,\
    \ Integer>();\n        for(int i = 0; i < nums.size(); i++){\n            int\
    \ sum = 0;\n            int point = 0;\n            for(int j = 0; j < nums.size();\
    \ j++){\n                if(numsCopy.contains(j)){\n                    sum +=\
    \ nums.get(j);\n                    point += j;\n                }\n         \
    \   }\n            sums.add(sum);\n            temp.put(point, i);\n        }\n\
    \        for(int i = 0; i < nums.size(); i++){\n            if(!temp.containsKey(i)){\n\
    \                sortedNums.add(nums.get(i));\n            }\n        }\n    \
    \    for(int i = 0; i < sums.size(); i++){\n            int point = 0;\n     \
    \       int sum = 0;\n            for(int j = 0; j < nums.size(); j++){\n    \
    \            if(temp.containsKey(j)){\n                    sum += nums.get(j);\n\
    \                    point += j;\n                }\n            }\n         \
    \   if(sum == sums.get(i)){\n                sortedNums.add(nums.get(point));\n\
    \            }\n        }\n        return sortedNums;", "        ArrayList<Integer>\
    \ numsCopy = new ArrayList<Integer>(nums);\n        List<Integer> sortedNums =\
    \ new ArrayList<Integer>();\n        // Sort the numbers in descending order\n\
    \        Collections.sort(numsCopy, Collections.reverseOrder());\n        // Add\
    \ the first value to the sorted numbers\n        sortedNums.add(numsCopy.get(0));\n\
    \        // Find out how many number have same sum of their digit\n        int\
    \ sumOfDigit = 0;\n        for(int i = numsCopy.size() - 1; i >= 0; i--){\n  \
    \          // Add each number's digit to sumOfDigit\n            sumOfDigit +=\
    \ Integer.toString(numsCopy.get(i)).charAt(0);\n        }\n        // If the number\
    \ of numbers have same sum of their digit\n        // then sort the numbers in\
    \ ascending order based on their index in original list\n        if(sumOfDigit\
    \ == 0){\n            return sortedNums;\n        } else {\n            // If\
    \ sumOfDigit is not zero\n            // then sort the numbers in descending order\
    \ based on their index in original list\n            // Then sort the numbers\
    \ in ascending order based on the sum of their digit\n            Collections.sort(numsCopy,\
    \ Collections.reverseOrder());\n            Collections.sort(sortedNums, Comparator.comparingInt(x\
    \ -> numsCopy.indexOf(x)));\n            // Add the remaining numbers with same\
    \ sum as first number\n            for(int i = numsCopy.size() - 1; i >= 1; i--){\n\
    \                sortedNums.add(numsCopy.get(i));\n            }\n           \
    \ return sortedNums;\n        }", "        // Your code here!\n        // Do not\
    \ use sorting algorithm here.\n        //\n        // Use map to solve this problem.\n\
    \        // In map, you will use sum of each digit to map all items with same\
    \ sum of digit.\n        // For example:\n        // >>> {1->10, 2->11, 3->10,\
    \ 4->12, 5->13, 6->10, 7->11, 8->12, 9->13}\n        // >>> {1: -5, 2: -5, 3:\
    \ 5, 4: 5, 5: 5, 6: 5, 7: -5, 8: -5, 9: -5}\n        Map<Integer, Integer> sumMap\
    \ = new HashMap<>();\n        for(Integer num : nums) {\n            int digit\
    \ = num % 10;\n            Integer sum = sumMap.get(digit);\n            if (sum\
    \ == null) {\n                sum = 0;\n            }\n            sum += num;\n\
    \            sumMap.put(digit, sum);\n        }\n        List<Integer> order =\
    \ new ArrayList<>();\n        for(Integer i : sumMap.keySet()) {\n           \
    \ Integer sum = sumMap.get(i);\n            int order = order.indexOf(sum);\n\
    \            if (order < 0) {\n                order.add(sum);\n            }\n\
    \        }\n        return order;", "        ArrayList<Integer> result = new ArrayList<>();\n\
    \        int sum = 0;\n        for (int num : nums) {\n            sum += num;\n\
    \            result.add(num);\n        }\n\n        ArrayList<Integer> nums2 =\
    \ nums.stream().map(i -> sum - i).collect(toList());\n        nums2.sort(null);\n\
    \        int index = 0;\n        for (Integer num : nums2) {\n            result.add(num);\n\
    \            index ++;\n        }\n        return result;", "        ArrayList<Integer>\
    \ list = new ArrayList<Integer>();\n        int[] arr = new int[nums.size()];\n\
    \        for (int i = 0; i < nums.size(); i++)\n            arr[i] = nums.get(i);\n\
    \        int sum = 0;\n        for (int i = 0; i < arr.length; i++) {\n      \
    \      sum += arr[i];\n        }\n        Collections.sort(arr);\n        for\
    \ (int i = 0; i < arr.length; i++) {\n            list.add(arr[i] + sum);\n  \
    \      }\n        return list;", "        ArrayList<Integer> list = new ArrayList<Integer>();\n\
    \        for(Integer num : nums){\n            int sum = 0;\n            while(num>0){\n\
    \                sum += num%10;\n                num /= 10;\n            }\n \
    \           list.add((int)Math.pow(10, sum));\n        }\n        list.sort((a,\
    \ b) -> a - b);\n        return list;", "        ArrayList<Integer> sorted_nums\
    \ = new ArrayList<Integer>();\n        Integer[] sorted_points = new Integer[nums.size()];\n\
    \        Arrays.sort(nums);\n        for(int i = 0; i < nums.size(); i++) {\n\
    \            int points = (nums.get(i) / 9) % 10;\n            sorted_points[i]\
    \ = points;\n        }\n        for(int i = 0; i < nums.size(); i++) {\n     \
    \       int sum_of_digits = sorted_points[i] + nums.get(i);\n            int index\
    \ = 0;\n            while(sum_of_digits != 0) {\n                if(sum_of_digits\
    \ % 10 == 0 && sum_of_digits != sorted_points[i]) {\n                    sorted_nums.add(nums.get(index));\n\
    \                }\n                sum_of_digits /= 10;\n                index++;\n\
    \            }\n        }\n        return sorted_nums;", "        if (nums.isEmpty())\
    \ return nums;\n\n        // sort nums according to their sum\n        ArrayList<Integer>\
    \ sortedNums = new ArrayList<Integer>();\n\n        Integer sum = 0;\n       \
    \ int currentSum = 0;\n\n        Integer maxSum = nums.get(0);\n        for (int\
    \ i = 0; i < nums.size(); i++) {\n            currentSum += nums.get(i);\n   \
    \         if (currentSum > maxSum) {\n                maxSum = currentSum;\n \
    \           }\n        }\n\n        sortedNums.add(maxSum);\n        for (int\
    \ i = 0; i < nums.size(); i++) {\n            currentSum = 0;\n            sum\
    \ = 0;\n            for (int j = nums.size()-1; j > i; j--) {\n              \
    \  sum += nums.get(j);\n                if (sum > maxSum) {\n                \
    \    maxSum = sum;\n                }\n                currentSum += nums.get(j);\n\
    \            }\n            sortedNums.add(maxSum);\n        }\n\n        return\
    \ sortedNums;", "        ArrayList<Integer> order = new ArrayList<Integer>();\n\
    \        Arrays.sort(nums);\n        for (int i = 0; i < nums.size(); i++) {\n\
    \            int point = nums.get(i);\n            int sum = 0;\n            while\
    \ (point != 0) {\n                sum += point % 10;\n                point =\
    \ point / 10;\n            }\n            int low = Integer.valueOf(String.valueOf(sum));\n\
    \            for (int j = 0; j < order.size() && order.get(j) < low; j++) {\n\
    \                low = Integer.valueOf(String.valueOf(sum));\n            }\n\
    \            if (low != 0) {\n                order.add(i, low);\n           \
    \ }\n        }\n        return order;", "        if (nums.isEmpty()) {\n     \
    \       return nums;\n        }\n        int sum = 0;\n        HashMap<Integer,\
    \ Integer> tmp = new HashMap<>();\n        for (Integer i : nums) {\n        \
    \    if (tmp.containsKey(sum)) {\n                if (tmp.containsKey(sum + i))\
    \ {\n                    Collections.swap(tmp, sum + i, sum + i);\n          \
    \      }\n            } else {\n                tmp.put(sum + i, sum);\n     \
    \       }\n            sum += i;\n        }\n        ArrayList<Integer> result\
    \ = new ArrayList<>(tmp.keySet());\n        Collections.sort(result);\n      \
    \  return result;", "        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        int sum = 0;\n        for (int num: nums) {\n            sum = sum +\
    \ num;\n            result.add(sum);\n        }\n\n        Collections.sort(result,\
    \ new Comparator<Integer>() {\n            public int compare(Integer o1, Integer\
    \ o2) {\n                int result = o1 - o2;\n                if (result ==\
    \ 0) {\n                    return 0;\n                } else {\n            \
    \        return result;\n                }\n            }\n        });\n\n   \
    \     return result;", "        // Write your code here\n        Collections.sort(nums,\
    \ new Comparator<Integer>() {\n            public int compare(Integer a, Integer\
    \ b) {\n                if(a.intValue() + b.intValue() == 0) {\n             \
    \       return 0;\n                }\n                return a.intValue() + b.intValue();\n\
    \            }\n        });\n        return nums;", "        Collections.sort(nums,\
    \ (Integer o1, Integer o2) -> {\n            int d1 = getSum(nums, o1);\n    \
    \        int d2 = getSum(nums, o2);\n            if (d1 == d2) {\n           \
    \     return nums.indexOf(o1) - nums.indexOf(o2);\n            } else {\n    \
    \            return d1 > d2 ? -1 : 1;\n            }\n        });\n        return\
    \ nums;", "        ArrayList<Integer> results = new ArrayList<Integer>();\n  \
    \      Integer total = 0;\n        for (Integer num : nums) {\n            total\
    \ = addUp(num);\n            if (total != null) {\n                results.add(total);\n\
    \            }\n        }\n        return results;", "        int[] sum = nums.stream().mapToInt(i\
    \ -> i).sum().toArray();\n        Arrays.sort(sum);\n        ArrayList<Integer>\
    \ res = new ArrayList<>();\n        int j = 0;\n        for (; j < sum.length;\
    \ j++) {\n            if (sum[j] == 0) {\n                break;\n           \
    \ }\n            int i = j;\n            while (sum[j] == sum[i] + nums.get(j))\
    \ {\n                i++;\n            }\n            res.add(nums.get(j));\n\
    \            nums.set(i, nums.get(j));\n        }\n        return res;", "   \
    \     ArrayList<Integer> list = new ArrayList<Integer>();\n        list.add(nums.stream().mapToInt(Integer::intValue).sum());\n\
    \        for (int i = 1; i < nums.size(); i++) {\n            list.add(nums.get(i)\
    \ - nums.get(i-1));\n        }\n        return list;", "        // write your\
    \ code here\n        ArrayList<Integer> result = new ArrayList<>();\n        ArrayList<Integer>\
    \ sortedNums = nums.stream()\n                .sorted(Comparator.comparingDouble(o\
    \ -> computeSum(o)))\n                .collect(Collectors.toCollection(ArrayList::new));\n\
    \        int lastNum = sortedNums.get(0);\n        for(Integer i : nums) {\n \
    \           if(lastNum+i > 0)\n                result.add(lastNum+i);\n      \
    \      lastNum += i;\n        }\n        return result;", "        Map<Integer,\
    \ Integer> numByD = new HashMap<>();\n        for (Integer x : nums) {\n     \
    \       int digit = x / 10;\n            int sum = (numByD.containsKey(digit))\
    \ ? numByD.get(digit) : 0;\n            numByD.put(digit, sum + x);\n        }\n\
    \        return numByD.values().stream().sorted(Collections.reverseOrder(Comparator.comparing(x\
    \ -> x))).collect(Collectors.toList());", "        // Write your code here\n \
    \       ArrayList<Integer> result = new ArrayList<>();\n        Map<Integer, Integer>\
    \ map = new HashMap<>();\n        for(int num: nums)\n        {\n            if(map.containsKey(num))\n\
    \            {\n                map.put(num, map.get(num)+1);\n            }\n\
    \            else\n            {\n                map.put(num, 1);\n         \
    \   }\n        }\n        for(Map.Entry<Integer, Integer> entry: map.entrySet())\n\
    \        {\n            int key = entry.getKey();\n            int value = entry.getValue();\n\
    \            while(value > 1)\n            {\n                value = value /\
    \ 10;\n                result.add(key);\n            }\n            result.add(key);\n\
    \        }\n        return result;", "        if (nums.isEmpty()) {\n        \
    \    return nums;\n        }\n        TreeMap<Integer, Integer> map = new TreeMap<>();\n\
    \        for (int i : nums) {\n            int sum = i % 10;\n            int\
    \ index = map.get(sum);\n            if (index == null) {\n                map.put(sum,\
    \ i);\n            } else {\n                int index = map.get(sum);\n     \
    \           map.put(sum, index + 1);\n            }\n        }\n        return\
    \ new ArrayList<>(map.values());", "        if (nums.size() == 0) return nums;\n\
    \        ArrayList<Integer> list = new ArrayList<>();\n        ArrayList<Integer>\
    \ list1 = new ArrayList<>();\n        for (int i = 0; i < nums.size(); i++) {\n\
    \            int sum = 0;\n            for (int j = i; j < nums.size(); j++) {\n\
    \                sum += nums.get(j);\n            }\n            if (sum < 0)\
    \ continue;\n            list1.add(sum);\n            list.add(nums.get(i));\n\
    \        }\n        if (list1.size() > list.size()) {\n            for (int i\
    \ = list.size(); i < list1.size(); i++) {\n                list1.add(i);\n   \
    \         }\n        } else {\n            for (int i = list1.size(); i < list.size();\
    \ i++) {\n                list.add(i);\n            }\n        }\n        return\
    \ list;", "        ArrayList<Integer> results = new ArrayList<Integer>();\n  \
    \      if (nums.size() > 0) {\n            int sum = 0;\n            for (int\
    \ i = 0; i < nums.size(); i++) {\n                sum += nums.get(i);\n      \
    \          results.add(sum);\n            }\n            Collections.sort(results);\n\
    \            return results;\n        }\n        return null;", "        // Initialize\
    \ an empty ArrayList to hold our result.\n        ArrayList<Integer> result =\
    \ new ArrayList<Integer>();\n\n        // Sum up the integers in nums to get the\
    \ sum of digits.\n        int sum = nums.stream().map(i -> i).reduce(Integer::sum);\n\
    \n        // Iterate over all numbers in nums and add them to the result list.\n\
    \        for (int i = 0; i < nums.size(); i++) {\n            // Add it to the\
    \ result list if and only if the sum of its digits is less than the sum\n    \
    \        // of the number's digits, i.e. if the digits are the same.\n       \
    \     if (sum < nums.get(i)) {\n                result.add(nums.get(i));\n   \
    \         }\n        }\n\n        // Return the result list.\n        return result;",
  "        int sum = 0;\n        for (int n : nums) {\n            sum += n;\n   \
    \     }\n\n        ArrayList<Integer> newNums = new ArrayList<>();\n        for\
    \ (int i = 0; i < nums.size(); i++) {\n            int num = nums.get(i);\n  \
    \          int digit = num % 10;\n            if (sum > 0) {\n               \
    \ if (digit <= sum) {\n                    newNums.add(num);\n               \
    \ }\n            } else if (sum < 0) {\n                if (digit >= -sum) {\n\
    \                    newNums.add(num);\n                }\n            } else\
    \ {\n                newNums.add(num);\n            }\n            sum -= digit;\n\
    \        }\n        return newNums;", "        int maxSum = nums.stream().reduce(0,\
    \ Integer::sum);\n        ArrayList<Integer> ans = new ArrayList<Integer>();\n\
    \        Set<Integer> unique = new HashSet<Integer>();\n        for (Integer num\
    \ : nums) {\n            int newSum = num.intValue() % maxSum;\n            if\
    \ (unique.add(newSum))\n                ans.add(num);\n        }\n        return\
    \ ans;", "        int sum = 0;\n        for (int i = 0; i < nums.size(); i++)\
    \ {\n            sum += nums.get(i);\n        }\n        ArrayList<Integer> numsSorted\
    \ = new ArrayList<Integer>();\n        numsSorted.addAll(Collections.sort(nums));\n\
    \        int count = 0;\n        for (int i = 0; i < numsSorted.size(); i++) {\n\
    \            if (sum == numsSorted.get(i)) {\n                numsSorted.set(i,\
    \ count);\n                numsSorted.remove(numsSorted.get(i));\n           \
    \     count++;\n            }\n        }\n        return numsSorted;", "     \
    \   List<Integer> result = new ArrayList<>();\n        int sum = 0;\n        for\
    \ (Integer num : nums) {\n            sum += num;\n            result.add(num);\n\
    \        }\n        Collections.sort(result);\n        if (result.size() > 1)\
    \ {\n            for (Integer num : result) {\n                if (sum == num)\
    \ {\n                    result.add(result.indexOf(num));\n                }\n\
    \            }\n        }\n        return result;", "        Map<Integer, Integer>\
    \ map = new HashMap<>();\n        int[] numsCopy = new int[nums.size()];\n   \
    \     for (int i = 0; i < nums.size() ; i++) {\n            Integer num = nums.get(i);\n\
    \            int total = 0;\n            for (int j = 0; j < num.length(); j++)\
    \ {\n                total += (num.intValue() % 10) * Math.pow(10, j);\n     \
    \           num = (num.intValue() / 10).intValue();\n            }\n         \
    \   Integer prevTotal = map.get(total);\n            if (prevTotal != null) {\n\
    \                numsCopy[prevTotal.intValue() - 1] = num;\n            } else\
    \ {\n                map.put(total, i);\n                numsCopy[i] = num;\n\
    \            }\n        }\n        ArrayList<Integer> result = new ArrayList<>(nums.size());\n\
    \        for (int i = 0; i < numsCopy.length; i++) {\n            if (numsCopy[i]\
    \ != 0) {\n                result.add(numsCopy[i]);\n            }\n        }\n\
    \        return result;", "        HashMap<Integer, Integer> temp = new HashMap<>();\n\
    \        ArrayList<Integer> result = new ArrayList<>();\n        // sort the nums\n\
    \        nums.sort(Comparator.comparing((x) -> Integer.valueOf(x)).thenComparing((x)\
    \ -> Integer.valueOf((x + \"\").charAt(0))));\n        for (int i = 0; i < nums.size();\
    \ i++) {\n            if (temp.containsKey(nums.get(i))) {\n                Integer\
    \ temp = temp.get(nums.get(i));\n                result.add(temp);\n         \
    \   } else {\n                temp.put(nums.get(i), i);\n            }\n     \
    \   }\n        return result;", "        Map<Integer, Integer> map = new HashMap<>();\n\
    \        for (int i : nums) {\n            int sum = 0;\n            while (i\
    \ != 0) {\n                sum = sum * 10 + i % 10;\n                i = i / 10;\n\
    \            }\n            map.put(sum, i);\n        }\n        List<Integer>\
    \ result = new ArrayList<Integer>();\n        for (Map.Entry<Integer, Integer>\
    \ e : map.entrySet()) {\n            result.add(e.getValue());\n        }\n  \
    \      return result;", "        ArrayList<Integer> ret = new ArrayList<>();\n\
    \        int sum = 0;\n        int index;\n        for (int i = 0; i < nums.size();\
    \ i++) {\n            sum += nums.get(i);\n            index = ret.indexOf(sum);\n\
    \            if (index != -1) {\n                for (int j = i + 1; j < nums.size();\
    \ j++) {\n                    sum += nums.get(j);\n                    index =\
    \ ret.indexOf(sum);\n                    if (index != -1) {\n                \
    \        int temp = nums.get(i);\n                        nums.set(i, nums.get(j));\n\
    \                        nums.set(j, temp);\n                    }\n         \
    \       }\n            } else {\n                ret.add(nums.get(i));\n     \
    \       }\n        }\n        return ret;", "        ArrayList<Integer> result\
    \ = new ArrayList<Integer>();\n        ArrayList<Integer> sorted = nums.stream().sorted(\
    \ (a,b) -> (int) (a+b)).collect(Collectors.toCollection(ArrayList::new));\n  \
    \      for (int i = 0; i < sorted.size(); i++)\n            for (int j = 0; j\
    \ < sorted.size(); j++)\n                if (i!=j && Math.abs( sorted[i]-sorted[j]\
    \ ) > Math.abs( sorted[i]-sorted[j] ))\n                    result.set(i, sorted.get(j));\n\
    \                else if (i!=j && Math.abs( sorted[i]-sorted[j] ) < Math.abs(\
    \ sorted[i]-sorted[j] ))\n                    result.set(i, sorted.get(j));\n\
    \                else\n                    result.set(i, sorted.get(j));\n   \
    \     return result;", "        // write your code\n        if(nums.isEmpty())\
    \ return nums;\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        int sum = 0;\n        int index = 0;\n        for(int i = 0; i < nums.size();\
    \ i++) {\n            sum += nums.get(i);\n            if(sum == 0) result.add(nums.get(i));\n\
    \            else if(sum > 0) result.add(index, nums.get(i));\n            index++;\n\
    \        }\n        return result;", "        ArrayList<Integer> numsSums = new\
    \ ArrayList<>();\n        // sort original array first\n        Arrays.sort(nums);\n\
    \        // for each element in the original array, check it's digits and sum\n\
    \        // to the numsSums list\n        for (int i = 0; i < nums.size(); i++)\
    \ {\n            int sum = nums.get(i);\n            // if element already in\
    \ numsSums, remove it\n            for (int j = 0; j < numsSums.size(); j++) {\n\
    \                if (sum == numsSums.get(j)) {\n                    numsSums.remove(j);\n\
    \                    break;\n                }\n            }\n            //\
    \ add sum to numsSums\n            if (sum != 0) {\n                numsSums.add(sum);\n\
    \            }\n        }\n        // sort numsSums again to make sure all elements\
    \ having same sum\n        // are in the same position\n        Arrays.sort(numsSums);\n\
    \        // copy nums to reordered one\n        ArrayList<Integer> reorderedNums\
    \ = new ArrayList<>(nums);\n        // for each sum in numsSums, find the index\
    \ of that sum in reorderedNums\n        for (int i = 0; i < numsSums.size(); i++)\
    \ {\n            // find the index of reorderedNums with the same sum\n      \
    \      int index = reorderedNums.indexOf(numsSums.get(i));\n            // replace\
    \ that index with sum of all digits of corresponding num\n            reorderedNums.set(index,\
    \ reorderedNums.get(index) + nums.get(i));\n        }\n        return reorderedNums;",
  "        // Your code here\n        int length = nums.size();\n        ArrayList<Integer>\
    \ order = new ArrayList<Integer>();\n        for (int i = 0; i < length; i++)\
    \ {\n            int sum = 0;\n            int index = 0;\n            while (index\
    \ < length && sum != 0) {\n                sum = nums.get(index) + nums.get(index\
    \ + 1);\n                index += 2;\n            }\n            if (sum == 0)\
    \ {\n                order.add(nums.get(i));\n            }\n        }\n     \
    \   return order;", "        ArrayList<Integer> ordered = new ArrayList<>();\n\
    \n        // Step 1: Find the maximum sum of digits in current list.\n       \
    \ int maxSum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n         \
    \   int sum = nums.get(i).intValue();\n            maxSum = sum > maxSum ? sum\
    \ : maxSum;\n        }\n\n        // Step 2: Sort the list using maxSum as the\
    \ key.\n        Collections.sort(nums, new Comparator<Integer>() {\n         \
    \   @Override\n            public int compare(Integer o1, Integer o2) {\n    \
    \            int sum1 = o1.intValue();\n                int sum2 = o2.intValue();\n\
    \                if (sum1 == sum2) {\n                    // If they both have\
    \ the same sum, order them based on the original index.\n                    return\
    \ o1.compareTo(o2);\n                } else {\n                    // If they\
    \ have a different sum, order them based on the sum of digits.\n             \
    \       return sum1 > sum2 ? 1 : -1;\n                }\n            }\n     \
    \   });\n\n        // Step 3: Find the indexes where the key sum is equal to maxSum.\n\
    \        for (int i = 0; i < nums.size(); i++) {\n            int sum = nums.get(i).intValue();\n\
    \            if (sum == maxSum) {\n                ordered.add(nums.get(i));\n\
    \            }\n        }\n\n        return ordered;", "        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        for (int i = 0; i < nums.size();\
    \ i++) {\n            int point = getSum(nums.get(i));\n            if (point\
    \ == 0) continue;\n            for (int j = i + 1; j < nums.size(); j++) {\n \
    \               int sum = getSum(nums.get(j));\n                if (sum == point)\
    \ result.add(nums.get(j));\n            }\n        }\n        return result;",
  "        int[] array = new int[nums.size()];\n        for (int i = 0; i < nums.size();\
    \ ++i) {\n            int sum = nums.get(i);\n            for (int j = 0; j <\
    \ array.length; ++j) {\n                array[j] += Math.abs(sum - nums.get(j));\n\
    \            }\n        }\n        Arrays.sort(array);\n        ArrayList<Integer>\
    \ res = new ArrayList<>();\n        for (int i = 0; i < nums.size(); ++i) {\n\
    \            res.add(array[i]);\n        }\n        return res;", "        //\
    \ write your code here\n        Map<Integer,Integer> map = new HashMap<>();\n\
    \        for(Integer i:nums) {\n            if(map.get(i) == null) {\n       \
    \         map.put(i, 0);\n            }\n            map.put(i, map.get(i) + i);\n\
    \        }\n        List<Integer> list = new ArrayList<>(map.values());\n    \
    \    Collections.sort(list);\n        Map<Integer,Integer> result = new HashMap<>();\n\
    \        for(int i : list) {\n            if(map.containsKey(i)) {\n         \
    \       result.put(i, map.get(i));\n            }\n        }\n        ArrayList<Integer>\
    \ list2 = new ArrayList<>();\n        for(int i : result.values()) {\n       \
    \     list2.add(i);\n        }\n        ArrayList<Integer> list3 = new ArrayList<>();\n\
    \        for(int i : list2) {\n            list3.add(i);\n        }\n        return\
    \ list3;", "        PriorityQueue<Integer> queue = new PriorityQueue<>();\n  \
    \      for (Integer num : nums) {\n            int numSum = 0;\n            while\
    \ (num != 0) {\n                numSum += num % 10;\n                num /= 10;\n\
    \            }\n            queue.add(numSum);\n        }\n        ArrayList<Integer>\
    \ ordered = new ArrayList<>();\n        while (!queue.isEmpty()) {\n         \
    \   int sum = 0;\n            for (Integer num : queue) {\n                sum\
    \ += num;\n            }\n            ordered.add(sum);\n            queue.poll();\n\
    \        }\n        return ordered;", "        // write your code here\n     \
    \   int sum = 0;\n        for(int i=0;i<nums.size();i++){\n            sum +=\
    \ nums.get(i);\n        }\n        ArrayList<Integer> numsSortedBySum = new ArrayList<Integer>();\n\
    \        for(int i=0;i<nums.size();i++){\n            if(sum == nums.get(i)){\n\
    \                numsSortedBySum.add(nums.get(i));\n            }\n          \
    \  else{\n                while(sum != nums.get(i)){\n                    sum\
    \ -= nums.get(i);\n                    numsSortedBySum.add(nums.get(i));\n   \
    \             }\n                while(sum != 0){\n                    numsSortedBySum.add(0);\n\
    \                    sum -= nums.get(i);\n                }\n            }\n \
    \       }\n        return numsSortedBySum;", "        Arrays.sort(nums);\n   \
    \     ArrayList<Integer> resultList = new ArrayList<>();\n        int sum = 0;\n\
    \        for (Integer i : nums) {\n            sum += i;\n            resultList.add(i);\n\
    \        }\n        int i = 0;\n        while (i < resultList.size()) {\n    \
    \        Integer sum = sum + resultList.get(i);\n            for (; i < resultList.size();\
    \ i++) {\n                if (sum == resultList.get(i)) {\n                  \
    \  int tempSum = sum;\n                    int tempSumIndex = i;\n           \
    \         sum = 0;\n                    int j = i;\n                    while\
    \ (j > 0 && sum == tempSum) {\n                        resultList.set(j, resultList.get(j\
    \ - 1));\n                        j--;\n                    }\n              \
    \      resultList.set(tempSumIndex, tempSum);\n                    break;\n  \
    \              }\n            }\n        }\n        return resultList;", "   \
    \     // base case\n        if (nums.size() == 0) {\n            return nums;\n\
    \        }\n        // partition into equal sums\n        ArrayList<Integer> sums\
    \ = new ArrayList<>(nums.size());\n        for (int i = 0; i < nums.size(); i++)\
    \ {\n            int sum = 0;\n            for (int j = 0; j < nums.size(); j++)\
    \ {\n                if (i == j) {\n                    continue;\n          \
    \      }\n                sum += nums.get(j);\n            }\n            sums.add(sum);\n\
    \        }\n        // sort based on sum\n        Collections.sort(sums, (a, b)\
    \ -> Integer.compare(a, b));\n        // partition again\n        ArrayList<Integer>\
    \ result = new ArrayList<>(nums.size());\n        for (int i = 0; i < nums.size();\
    \ i++) {\n            if (sums.get(i) == 0) {\n                result.add(nums.get(i));\n\
    \            } else {\n                int sum = 0;\n                for (int\
    \ j = i; j < nums.size(); j++) {\n                    if (i == j) {\n        \
    \                continue;\n                    }\n                    sum +=\
    \ nums.get(j);\n                }\n                if (sum >= sums.get(i)) {\n\
    \                    result.add(nums.get(i));\n                }\n           \
    \ }\n        }\n        return result;", "        // Write your code here\n  \
    \      int sum = 0;\n        ArrayList<Integer> result = new ArrayList<>();\n\
    \        for(int i=0; i<nums.size(); i++){\n            sum += nums.get(i);\n\
    \            if(sum%10 != 0){\n                result.add(nums.get(i));\n    \
    \        }\n        }\n        Collections.sort(result);\n        return result;",
  "        int minPos = nums.indexOf(Math.min(nums));\n        return nums.stream()\n\
    \                .sorted(Comparator.comparing(num -> nums.get(nums.indexOf(num))))\n\
    \                .map(num -> nums.get(minPos))\n                .collect(Collectors.toList());",
  "        nums.sort(Comparator.comparing(num -> (int) Double.parseDouble(String.valueOf(num))).reversed());\n\
    \        return nums;", "        ArrayList<Integer> sorted = new ArrayList<>(nums);\n\
    \        Arrays.sort(sorted);\n        Collections.sort(sorted, (i, j) -> Integer.valueOf(i).compareTo(Integer.valueOf(j)));\n\
    \        return sorted;", "        ArrayList<Integer> res = new ArrayList<Integer>();\n\
    \        for (Integer n : nums) {\n            int sum = (int) sumDigits(n);\n\
    \            if (sum == 0) {\n                res.add(n);\n            } else\
    \ {\n                for (int i = 0; i < sum; i++) {\n                    res.add(n);\n\
    \                }\n            }\n        }\n        return res;", "        int\
    \ sum = 0;\n        for (Integer i : nums) {\n            sum += i;\n        }\n\
    \        ArrayList<Integer> result = new ArrayList<Integer>();\n        int start\
    \ = 0;\n        int end = nums.size() - 1;\n        while (start < end) {\n  \
    \          int mid = start + (end - start) / 2;\n            if (sum < nums.get(mid))\
    \ {\n                end = mid - 1;\n            } else if (sum > nums.get(mid))\
    \ {\n                start = mid + 1;\n            } else {\n                result.addAll(nums.subList(start,\
    \ end + 1));\n                start = end + 1;\n                end = start -\
    \ 1;\n            }\n        }\n        return result;", "        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        Arrays.sort(nums);\n        Integer sum\
    \ = 0, index = nums.get(0);\n        for (Integer num : nums) {\n            sum\
    \ += num.intValue();\n            if (sum > 0) {\n                result.add(index);\n\
    \            }\n            sum += num.intValue();\n            index = num;\n\
    \        }\n        return result;", "        // Create a list that will hold\
    \ the result of the sort.\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \n        // Add all of the elements to the result list.\n        for (Integer\
    \ num : nums) {\n            result.add(num);\n        }\n\n        // Sort the\
    \ result list using the helper method below.\n        Collections.sort(result,\
    \ new Comparator<Integer>() {\n            public int compare(Integer o1, Integer\
    \ o2) {\n                int o1ds = getDigits(o1);\n                int o2ds =\
    \ getDigits(o2);\n                return o1ds - o2ds;\n            }\n       \
    \ });\n\n        // Return the result list.\n        return result;", "      \
    \  Map<Integer, Integer> sums = new HashMap<Integer, Integer>();\n        for\
    \ (int i : nums) sums.put(i, 0);\n        for (Integer i : nums) sums.put(i, sums.get(i,\
    \ 0) + i);\n        ArrayList<Integer> sortedNums = new ArrayList<Integer>();\n\
    \        for (Integer i : sums.keySet())\n            sortedNums.add(-sums.get(i));\n\
    \        return sortedNums;", "        // sort by point\n        nums.sort((a,b)->a-b);\n\
    \        // sort by original number\n        nums.sort(Comparator.comparing((a,b)->a));\n\
    \        return nums;", "        ArrayList<Integer> list = new ArrayList<Integer>();\n\
    \        Set<Integer> s = new HashSet<Integer>();\n        for (int i = 0; i <\
    \ nums.size(); i++) {\n            int sum = 0;\n            int j;\n        \
    \    for (j = 0; j < nums.size(); j++) {\n                if (i != j) {\n    \
    \                sum += nums.get(j);\n                }\n            }\n     \
    \       if (s.contains(sum)) {\n                list.add(i);\n               \
    \ list.add((Integer) s.stream().sorted(Comparator.comparingInt(i -> nums.get(i)).thenComparing(i\
    \ -> i)).collect(Collectors.toList()));\n            } else {\n              \
    \  list.add(i, sum);\n                s.add(sum);\n            }\n        }\n\
    \        return list;", "        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        HashMap<Integer, Integer> h = new HashMap<Integer, Integer>();\n    \
    \    for (int i = 0; i < nums.size(); i++) {\n            if (h.containsKey(nums.get(i)))\
    \ {\n                int tmp = h.get(nums.get(i));\n                result.add(nums.get(i));\n\
    \                h.put(nums.get(i), tmp + i);\n            } else {\n        \
    \        h.put(nums.get(i), i);\n            }\n        }\n        if (nums.isEmpty())\
    \ {\n            return result;\n        }\n        PriorityQueue<Integer> pq\
    \ = new PriorityQueue<Integer>();\n        for (Integer i : h.values()) {\n  \
    \          pq.add(i);\n        }\n        while (!pq.isEmpty()) {\n          \
    \  int p = pq.poll();\n            result.add(p);\n            for (int i = h.get(p);\
    \ i < nums.size(); i++) {\n                h.put(nums.get(i), i);\n          \
    \  }\n        }\n        return result;", "        int[] arr=nums.stream().mapToInt(Integer::intValue).toArray();\n\
    \        Arrays.sort(arr);\n        ArrayList<Integer> res=new ArrayList<Integer>(nums.size());\n\
    \        for (int i=0;i<arr.length;i++) {\n            if (arr[i]!=0) {\n    \
    \            res.add(arr[i]);\n            }\n        }\n        return res;",
  "        if (nums.isEmpty())\n            return new ArrayList<Integer>();\n   \
    \     int[] digitSums = nums.stream().mapToInt(Integer::intValue).sum().sorted().map(i\
    \ -> i).toArray();\n        Arrays.sort(nums);\n        return nums.stream().filter(i\
    \ -> digitSums.contains(i)).map(i -> i).sorted().collect(Collectors.toCollection(ArrayList::new));",
  "        ArrayList<Integer> arr = new ArrayList<Integer>();\n        // Get length\
    \ of numbers\n        int n = nums.size();\n\n        // Get sum of numbers\n\
    \        long total = 0;\n        for (Integer n : nums) total += n;\n       \
    \ long sum = (long) Math.pow(10, n);\n\n        // Sort list based on sum\n  \
    \      for (int i = 0; i < n; i++) {\n            Integer val = nums.get(i);\n\
    \            int remainder = sum % 10;\n            sum += val * 10 - remainder;\n\
    \            arr.add(val);\n        }\n        return arr;", "        int[] digits\
    \ = new int[nums.size()];\n        for(int i = 0; i < nums.size(); i++)\n    \
    \        digits[i] = nums.get(i) % 10;\n        Arrays.sort(digits);\n       \
    \ ArrayList<Integer> result = new ArrayList<>();\n        for(int i = 0; i < nums.size();\
    \ i++) {\n            result.add(digits[i]);\n        }\n        return result;",
  "        ArrayList<Integer> ret = new ArrayList<>();\n        for(Integer num: nums){\n\
    \            int digitSum = 0;\n            for(int i = 0; i<num.length();i++){\n\
    \                digitSum+=Integer.parseInt(String.valueOf(num.charAt(i))); \n\
    \            }\n            ret.add(digitSum);\n        }\n        Collections.sort(ret);\n\
    \        return ret;", '        // Your code here', "        // Solution 1 \n\
    \        return nums\n                .stream()\n                .sorted(Comparator.comparingInt(i\
    \ -> sumDigits(i)))\n                .collect(toList());", "        ArrayList<Integer>\
    \ ret = new ArrayList<>();\n        \n        Map<Integer,Integer> points = new\
    \ HashMap<>();\n\n        for(int i = 0; i < nums.size(); i++){\n            Integer\
    \ sum = 0;\n            for(int j = i; j >= 0; j--){\n                sum += nums.set(j,\
    \ nums.get(j) - nums.get(i));\n                points.put(sum, i);\n         \
    \   }\n            ret.put(i, sum);\n        }\n\n        return ret;", "    \
    \    if (nums == null || nums.isEmpty()) {\n            return nums;\n       \
    \ }\n        int[] digits = nums.stream()\n            .map(i -> i).map(i -> Math.abs(i)).toArray();\n\
    \        Map<Integer, Integer> map = new HashMap<>();\n        for (int i = 0;\
    \ i < digits.length; i += 2) {\n            Integer k = digits[i];\n         \
    \   if (map.containsKey(k)) {\n                Integer v = map.get(k);\n     \
    \           map.put(k, v + digits[i + 1]);\n            } else {\n           \
    \     map.put(k, digits[i + 1]);\n            }\n        }\n        ArrayList<Integer>\
    \ nums2 = new ArrayList<>();\n        for (Map.Entry<Integer, Integer> entry :\
    \ map.entrySet()) {\n            nums2.add(entry.getKey() + entry.getValue());\n\
    \        }\n        return nums2;", "        ArrayList<Integer> ret = new ArrayList<Integer>();\n\
    \        IntStream.range(0, nums.size()).forEach(i -> {\n            int curNum\
    \ = nums.get(i);\n            if (curNum < 0) {\n                ret.add(curNum);\n\
    \            } else {\n                while (true) {\n                    int\
    \ sum = 0;\n                    for (int j = i; j > 0; j--) {\n              \
    \          sum += nums.get(j);\n                        if (sum > 0) {\n     \
    \                       break;\n                        }\n                  \
    \  }\n                    if (sum < 0) {\n                        ret.add(curNum);\n\
    \                        break;\n                    } else {\n              \
    \          i -= 1;\n                    }\n                }\n            }\n\
    \        });\n        return ret;", "        Map<Integer, Integer> map = new HashMap<>();\n\
    \        for (Integer i : nums) {\n            int curr = map.get(i);\n      \
    \      if (curr == null) {\n                curr = i;\n            } else {\n\
    \                map.put(i, curr + i);\n            }\n        }\n        List<Integer>\
    \ list = new ArrayList<>(map.keySet());\n        Collections.sort(list);\n   \
    \     return list;", "        ArrayList<Integer> sorted = new ArrayList<Integer>();\n\
    \        Comparator<Integer> sumComparator = (x, y) -> {\n            int sum\
    \ = 0;\n            for (int n : nums) {\n                sum += n;\n        \
    \    }\n            return y - sum;\n        };\n        Collections.sort(nums,\
    \ sumComparator);\n        for (int i = 0; i < nums.size(); i++) {\n         \
    \   int j = i;\n            while (j > 0 && nums.get(j - 1) > nums.get(j)) {\n\
    \                sorted.add(nums.get(j));\n                j--;\n            }\n\
    \            sorted.add(nums.get(j));\n        }\n        return sorted;", " \
    \       // write your code\n        ArrayList <Integer> ordered = new ArrayList<>();\n\
    \        ordered.add(nums.get(0));\n        for(int i = 1; i < nums.size(); i++){\n\
    \            int sum = 0;\n            for(int j = 0; j < i; j++){\n         \
    \       sum += nums.get(j);\n            }\n            if(sum == 0){\n      \
    \          ordered.add(nums.get(i));\n            }\n        }\n        return\
    \ ordered;", "        Arrays.sort(nums);\n        HashMap<Integer, Integer> sums\
    \ = new HashMap<>();\n        for (int i = 0; i < nums.size(); i++) {\n      \
    \      int digit = nums.get(i) % (int) Math.pow(10, nums.size() - i - 1);\n  \
    \          int sum = digit;\n            if (sums.containsKey(sum)) {\n      \
    \          sum = sums.get(sum) + digit;\n            }\n            sums.put(sum,\
    \ i);\n        }\n        ArrayList<Integer> res = new ArrayList<>();\n      \
    \  for (Integer sum: sums.keySet()) {\n            for (int i = sums.get(sum);\
    \ i < nums.size(); i++) {\n                res.add(nums.get(i));\n           \
    \ }\n        }\n        return res;", "        if(nums.size() < 2) { return nums;\
    \ }\n        \n        int highest_sum = 0;\n        int sumOfHighestSum = 0;\n\
    \        \n        for(int i = 0; i < nums.size(); ++i) {\n            sumOfHighestSum\
    \ += nums.get(i);\n            if(highest_sum < sumOfHighestSum) { highest_sum\
    \ = sumOfHighestSum; }\n        }\n        \n        ArrayList<Integer> result\
    \ = new ArrayList<Integer>();\n        int lowest_sum = 0;\n        for(int i\
    \ = 0; i < nums.size(); ++i) {\n            sumOfHighestSum += nums.get(i);\n\
    \            if(lowest_sum > sumOfHighestSum) { lowest_sum = sumOfHighestSum;\
    \ }\n        }\n        \n        int last_index = nums.size() - 1;\n        for(int\
    \ i = 0; i < nums.size(); ++i) {\n            sumOfHighestSum += nums.get(i);\n\
    \            int index = i;\n            if(sumOfHighestSum > lowest_sum) {\n\
    \                index = last_index;\n            } else {\n                sumOfHighestSum\
    \ -= nums.get(index);\n            }\n            result.add(nums.get(index));\n\
    \            last_index = index;\n        }\n        \n        return result;",
  "        int sum = 0;\n        for (Integer num : nums) {\n            sum += num;\n\
    \        }\n        Arrays.sort(nums);\n        int i = 0;\n        int j = nums.size()\
    \ - 1;\n        while (true) {\n            while (nums.get(i) <= sum) {\n   \
    \             i++;\n            }\n            while (nums.get(j) >= sum) {\n\
    \                j--;\n            }\n            if (i < j) {\n             \
    \   ArrayList<Integer> temp = nums;\n                nums = new ArrayList<Integer>();\n\
    \                nums.addAll(temp);\n                temp = nums;\n          \
    \      nums = new ArrayList<Integer>();\n                nums.addAll(temp);\n\
    \            } else {\n                return nums;\n            }\n        }",
  "        if (nums.isEmpty()) {\n            return nums;\n        }\n        ArrayList<Integer>\
    \ orderedNums = new ArrayList<>();\n        int sum = 0;\n        \n        for(int\
    \ i=0; i < nums.size(); i++) {\n            sum += nums.get(i);\n            if(sum\
    \ > 0) {\n                orderedNums.add(nums.get(i));\n            }\n     \
    \   }\n        return orderedNums;", "        Set<Integer> sumSet = new HashSet<>();\n\
    \        sumSet.addAll(Arrays.asList(nums));\n        sumSet.removeAll(Collections.singleton(nums.get(0)));\n\
    \        sumSet.removeAll(Collections.singleton(nums.get(nums.size() - 1)));\n\
    \        sumSet.removeAll(Collections.singleton(nums.get(nums.size() - 2)));\n\
    \        sumSet.removeAll(Collections.singleton(nums.get(0) + nums.get(nums.size()\
    \ - 1)));\n        sumSet.removeAll(Collections.singleton(nums.get(nums.size()\
    \ - 2) + nums.get(nums.size() - 3)));\n        sumSet.removeAll(Collections.singleton(nums.get(nums.size()\
    \ - 1) + nums.get(nums.size() - 2)));\n        sumSet.removeAll(Collections.singleton(nums.get(0)\
    \ + nums.get(nums.size() - 1) + nums.get(nums.size() - 2)));\n        sumSet.removeAll(Collections.singleton(nums.get(nums.size()\
    \ - 1) + nums.get(nums.size() - 2) + nums.get(nums.size() - 3)));\n        sumSet.removeAll(Collections.singleton(nums.get(nums.size()\
    \ - 2) + nums.get(nums.size() - 3) + nums.get(nums.size() - 4)));\n        sumSet.removeAll(Collections.singleton(nums.get(nums.size()\
    \ - 3) + nums.get(nums.size() - 4) + nums.get(nums.size() - 5)));\n        sumSet.removeAll(Collections.singleton(nums.get(nums.size()\
    \ - 4) + nums.get(nums.size() - 5) + nums.get(nums.size() - 6)));\n        sumSet.removeAll(Collections.singleton(nums.get(nums.size()\
    \ - 5) + nums.get(nums.size() - 6) + nums.get(nums.size() - 7)));\n        sumSet.removeAll(Collections.singleton(nums.get(nums.size()\
    \ - 6) + nums.get(nums.size() - 7) + nums.get(nums.size() - 8)));\n        sumSet.removeAll(Collections.singleton(nums.get(nums.size()\
    \ - 7) + nums.get(nums.size() - 8) + nums.get(nums.size() - 9)));\n        sumSet.removeAll(Collections.singleton(nums.get(nums.size()\
    \ - 8) + nums.get(nums.size() - 9) + nums.get(nums.size() - 10)));\n        sumSet.removeAll(Collections.singleton(nums.get(nums.size()\
    \ - 9) + nums.get(nums.size() - 10) + nums.get(nums.size() - 11)));\n        sumSet.removeAll(Collections.singleton(nums.get(nums.size()\
    \ - 10) + nums.get(nums.size() - 11) + nums.get(nums.size() - 12)));\n       \
    \ sumSet.removeAll(Collections.singleton(nums.get(nums.size() - 11) + nums.get(nums.size()\
    \ - 12", "        ArrayList<Integer> list = new ArrayList<>();\n        int sum\
    \ = 0;\n        for (Integer i : nums) {\n            sum += i;\n            list.add(sum);\n\
    \        }\n        Collections.sort(list);\n        return list;", "        ArrayList<Integer>\
    \ res = new ArrayList<>();\n        for (Integer num : nums) {\n            int\
    \ sum = 0;\n            while (num != 0) {\n                sum += num % 10;\n\
    \                num /= 10;\n            }\n            res.add(sum);\n      \
    \  }\n        return res;", "        HashMap<Integer, Integer> sums = new HashMap<>();\n\
    \        for(int n : nums)\n            sums.merge(sum(n), n, Math::min);\n  \
    \      return nums.stream().sorted((n1, n2) -> sums.get(n2) - sums.get(n1)).collect(ArrayList::new,\
    \ ArrayList::add, ArrayList::addAll);", "        Map<Integer, Integer> temp =\
    \ new HashMap<>();\n        for(int i = 0; i < nums.size(); i++){\n          \
    \  if(nums.get(i) < 0){\n                nums.remove(i);\n                i--;\n\
    \            }\n            int sum = 0;\n            while(nums.get(i) != 0){\n\
    \                sum += nums.get(i) % (int) Math.pow(10, nums.size() - i - 1);\n\
    \                i--;\n            }\n            temp.put(sum, i);\n        }\n\
    \        ArrayList<Integer> result = new ArrayList<>();\n        for(Integer i\
    \ : temp.keySet()){\n            int index = temp.get(i);\n            if(index\
    \ != i){\n                Collections.swap(nums, index, i);\n            }\n \
    \           result.add(i);\n        }\n        return result;", "        if (nums\
    \ == null)\n            return new ArrayList<>();\n\n        ArrayList<Integer>\
    \ sorted = new ArrayList<>();\n        boolean hasNonDigit = false;\n        int\
    \ sum = 0;\n        int index = 0;\n\n        for (int num : nums) {\n       \
    \     if (hasNonDigit) {\n                sorted.add(sum);\n                index++;\n\
    \                sum = 0;\n            }\n\n            if (num < 0) {\n     \
    \           hasNonDigit = true;\n            } else {\n                sum +=\
    \ num;\n            }\n        }\n\n        sorted.add(sum);\n\n        for (Integer\
    \ sum : sorted) {\n            int index = 0;\n            for (int num : sorted)\
    \ {\n                if (sum.equals(num)) {\n                    sorted.remove(index);\n\
    \                    break;\n                }\n                index++;\n   \
    \         }\n        }\n        return sorted;", "        ArrayList<Integer> reordered\
    \ = new ArrayList<Integer>();\n        for (int i = 0; i < nums.size(); i++) {\n\
    \            Integer curNum = nums.get(i);\n            int sum = 0;\n       \
    \     while (curNum != 0) {\n                sum += curNum % 10;\n           \
    \     curNum /= 10;\n            }\n            boolean found = false;\n     \
    \       for (int j = 0; j < reordered.size(); j++) {\n                if (sum\
    \ == reordered.get(j)) {\n                    reordered.add(i, nums.indexOf(j));\n\
    \                    found = true;\n                    break;\n             \
    \   }\n            }\n            if (!found) {\n                reordered.add(i);\n\
    \            }\n        }\n        return reordered;", "        int sum = 0;\n\
    \        Map<Integer,Integer> map = new HashMap<Integer,Integer>();\n        for(Integer\
    \ num: nums){\n            sum += num;\n            map.put(num,sum);\n      \
    \  }\n        List<Map.Entry<Integer,Integer>> list = map.entrySet().stream().sorted(Map.Entry.comparingByValue()).collect(Collectors.toList());\n\
    \        ArrayList<Integer> re = new ArrayList<Integer>();\n        for(int i\
    \ = 0; i<list.size();i++){\n            re.add(list.get(i).getKey());\n      \
    \  }\n        return re;", "        ArrayList<Integer> result = new ArrayList<>();\n\
    \        HashMap<Integer, Integer> map = new HashMap<>();\n        for(Integer\
    \ num: nums){\n            int sum = 0;\n            for(int i = 0; i < num.length();\
    \ i++){\n                sum += num.charAt(i);\n            }\n            if(map.containsKey(sum)){\n\
    \                int index = map.get(sum);\n                result.add(index,\
    \ num);\n            }\n            else{\n                map.put(sum, result.size());\n\
    \                result.add(num);\n            }\n        }\n        return result;",
  "        ArrayList<Integer> res= new ArrayList<>();\n        for(int i=0; i<nums.size();\
    \ i++) {\n            int sum = 0;\n            for(int j=0; j<nums.size(); j++)\
    \ {\n                sum += nums.get(j);\n            }\n            if(!res.contains(sum))\
    \ {\n                res.add(sum);\n            }\n        }\n        return res;",
  "        if (nums == null || nums.isEmpty()) return nums;\n        ArrayList<Integer>\
    \ res = new ArrayList<Integer>();\n        int[] sums = nums.stream().mapToInt(i\
    \ -> i).sorted().map(i -> Integer.toString(i)).mapToInt(Integer::parseInt).toArray();\n\
    \        int max = sums[sums.length - 1];\n        for(int i = 0; i < sums.length;\
    \ i++){\n            if(!sums[i] > max)\n                max = sums[i];\n    \
    \    }\n        for(int i = 0; i < sums.length; i++){\n            if(sums[i]\
    \ == max)\n                res.add(i);\n        }\n        return res;", "   \
    \     //write your code here\n        //first sort the list to get the correct\
    \ order then sum the numbers\n        //then create an array and put in the correct\
    \ order\n        ArrayList<Integer> sortedNums = new ArrayList<>();\n        nums.stream()\n\
    \            .sorted()\n            .mapToInt(Integer::intValue)\n           \
    \ .forEach(i -> sortedNums.add(i));\n        ArrayList<Integer> sorted = new ArrayList<>();\n\
    \        for(int i = 0; i < sortedNums.size(); i++){\n            int sum = sortedNums.get(i);\n\
    \            for(int j = i; j > 0; j--){\n                if(sortedNums.get(j)\
    \ < sum){\n                    int temp = sortedNums.get(j);\n               \
    \     sortedNums.set(j, sortedNums.get(j - 1));\n                    sortedNums.set(j\
    \ - 1, temp);\n                    sorted.add(sortedNums.get(j - 1));\n      \
    \              break;\n                }\n            }\n        }\n        return\
    \ sorted;", "        if (nums.size() <= 0) {\n            return new ArrayList<Integer>();\n\
    \        }\n        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();\n\
    \        ArrayList<Integer> result = new ArrayList<Integer>();\n        for (int\
    \ i = 0; i < nums.size(); i++) {\n            int digit = nums.get(i);\n     \
    \       int sum = map.get(digit);\n            if (sum != null) {\n          \
    \      sum = map.get(digit);\n                map.put(digit, sum + 1);\n     \
    \       } else {\n                map.put(digit, 1);\n            }\n        }\n\
    \        for (Integer key : map.keySet()) {\n            result.add(key);\n  \
    \      }\n        Collections.sort(result);\n        return result;", "      \
    \  Map<Integer, Integer> map = new HashMap<>();\n        int n = nums.size();\n\
    \        for(int i = 0; i < n; i++) {\n            int sum = 0;\n            int\
    \ index = i;\n            for(int j = 0; j < nums.size(); j++) {\n           \
    \     if(i != j) {\n                    int d = Integer.parseInt(String.valueOf(nums.get(j)))\
    \ % 10;\n                    sum += d;\n                    if(map.containsKey(sum))\
    \ {\n                        index = j;\n                        break;\n    \
    \                }\n                }\n            }\n            map.put(nums.get(i),\
    \ index);\n        }\n        return map.entrySet().stream().sorted(Comparator.comparing(\
    \ e -> Integer.parseInt(e.getKey())))\n                .map( e -> nums.get(e.getValue()))\n\
    \                .collect(Collectors.toCollection(ArrayList::new));", "      \
    \  ArrayList<Integer> sorted = new ArrayList<Integer>();\n        ArrayList<Integer>\
    \ temp = new ArrayList<Integer>();\n\n        for (int i = 0; i < nums.size();\
    \ i++) {\n            for (int j = i + 1; j < nums.size(); j++) {\n          \
    \      if (nums.get(i) + nums.get(j) <= 0) {\n                    break;\n   \
    \             }\n                int sum = nums.get(i) + nums.get(j);\n      \
    \          if (sum > 0) {\n                    sorted.add(sum);\n            \
    \        temp.add(nums.get(i));\n                    temp.add(nums.get(j));\n\
    \                }\n            }\n        }\n        sorted.addAll(temp);\n \
    \       return sorted;", "        if (nums.size() == 0) {\n            return\
    \ nums;\n        }\n        ArrayList<Integer> numsSorted = new ArrayList<Integer>();\n\
    \        int[] digits = new int[10];\n        for (Integer i : nums) {\n     \
    \       int sum = 0;\n            while (i != 0) {\n                sum += i %\
    \ 10;\n                i /= 10;\n            }\n            digits[sum] = i;\n\
    \        }\n        int index = 0;\n        for (int i = 0; i < digits.length;\
    \ i++) {\n            int sum = i;\n            for (int j = sum; j > 0; j--)\
    \ {\n                index++;\n                if (digits[j - 1] > 0) {\n    \
    \                break;\n                }\n            }\n            numsSorted.add(index\
    \ * digits[i]);\n        }\n        return numsSorted;", "        Map<Integer,\
    \ Integer> map = new HashMap<>();\n        for(int i=0;i<nums.size();i++){\n \
    \           Integer key = nums.get(i).intValue();\n            map.putIfAbsent(key,\
    \ i);\n        }\n        ArrayList<Integer> ans = new ArrayList<>();\n      \
    \  for(Map.Entry<Integer, Integer> entry : map.entrySet()){\n            ans.add(nums.get(entry.getValue()));\n\
    \        }\n        return ans;", "        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();\n  \
    \      // Initialize map with zero\n        map.put(0, 0);\n        // Iterate\
    \ over nums list\n        for(int x : nums) {\n            // Add x to result\
    \ list\n            result.add(x);\n            // Iterate over keys of map\n\
    \            for(int key : map.keySet()) {\n                // Get value of map\
    \ and key (sum of digits) pairs\n                int val = map.get(key) + x;\n\
    \                // If pair (key, value) is in map then\n                // pair\
    \ value (sum of digits) must be bigger or equal\n                // to map's key\n\
    \                if((val > key) || (val == key)) {\n                    // Delete\
    \ map entry (key => value)\n                    map.remove(key);\n           \
    \         // Add pair (value, sum of digits)\n                    map.put(val,\
    \ key);\n                }\n            }\n        }\n        return result;",
  "        // sort by sum of digits\n        nums.sort(new Comparator<Integer>() {\n\
    \            public int compare(Integer o1, Integer o2) {\n                double\
    \ d1 = o1 % 10;\n                double d2 = o2 % 10;\n                return\
    \ d1 - d2;\n            }\n        });\n        // sort by index position in original\
    \ list\n        return nums.stream().sorted().distinct().collect(Collectors.toCollection(ArrayList<Integer>::new));",
  "        ArrayList<Integer> tmp = new ArrayList<Integer>();\n        int total =\
    \ 0;\n        for (int i = 0; i < nums.size(); i++) {\n            int a = nums.get(i);\n\
    \            total += a;\n            tmp.add(a);\n        }\n        Collections.sort(tmp,\
    \ new Comparator<Integer>() {\n            public int compare(Integer o1, Integer\
    \ o2) {\n                Integer d1 = sumDigits(o1);\n                Integer\
    \ d2 = sumDigits(o2);\n                return Integer.compare(d1, d2);\n     \
    \       }\n        });\n        return tmp;", "        //write your code here\n\
    \        return nums;", "        ArrayList<Integer> list = new ArrayList<Integer>();\n\
    \        Arrays.sort(nums);\n        for (int i = 0; i < nums.size(); i++) {\n\
    \            int val = nums.get(i);\n            if (val < 0)\n              \
    \  val *= -1;\n            sum += val;\n        }\n        Collections.sort(list,\
    \ (num1, num2) -> sum - num1 - num2);\n        return list;", "        ArrayList<Integer>\
    \ list = new ArrayList<Integer>();\n        for (int i = 0; i < nums.size(); ++i)\
    \ {\n            int val = nums.get(i);\n            int digits = Integer.toString(val).length();\n\
    \            int sum = 0;\n            for (int j = 0; j < digits; j++) {\n  \
    \              sum += (val % 10) * (Math.pow(10, j));\n                val /=\
    \ 10;\n            }\n            list.add(sum);\n        }\n        Collections.sort(list);\n\
    \        return list;", "        HashMap<Integer, Integer> hm = new HashMap<Integer,\
    \ Integer>();\n\n        for(Integer i : nums)\n            hm.put(i, hm.getOrDefault(i,\
    \ 0) + i);\n\n        ArrayList<Integer> result = new ArrayList<>();\n       \
    \ for(Integer i : hm.keySet())\n            result.add(hm.get(i));\n\n       \
    \ return result;", "        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        Set<Integer> set = new HashSet<Integer>();\n        for (int i = 0; i\
    \ < nums.size(); i++) {\n            int digit = nums.get(i);\n            if\
    \ (digit  != 0 && set.contains(digit)) {\n                Collections.sort(nums);\n\
    \                Collections.sort(result);\n                Collections.sort(nums);\n\
    \                Collections.sort(result);\n                Collections.sort(nums);\n\
    \                Collections.sort(result);\n                Collections.sort(nums);\n\
    \                Collections.sort(result);\n            }\n            set.add(digit);\n\
    \            result.add(digit);\n        }\n        return result;", "       \
    \ // sort the list by summing digits then sort them based on index\n        Map<Integer,\
    \ Integer> sortedBySum = new TreeMap<>();\n        // sort by sum\n        nums.stream().mapToInt(Integer::intValue).forEach(n\
    \ -> sortedBySum.put(n, sortedBySum.get(n) + n));\n        ArrayList<Integer>\
    \ result = new ArrayList<>(nums);\n        // sort by index\n        result =\
    \ result.stream().sorted((a, b) -> sortedBySum.get(b) - sortedBySum.get(a)).collect(Collectors.toList());\n\
    \        return result;", "        // Write your code here.\n        Collections.sort(nums,\
    \ (a,b) -> Integer.compare(a.intValue()%10, b.intValue()%10));\n        return\
    \ nums;", "        return nums.stream().sorted((o1, o2) -> {\n            int\
    \ sum1 = o1.stream().mapToInt(Integer::intValue).sum();\n            int sum2\
    \ = o2.stream().mapToInt(Integer::intValue).sum();\n            if (sum1 == sum2)\
    \ {\n                return o1.compareTo(o2);\n            }\n            return\
    \ sum1 - sum2;\n        }).collect(Collectors.toCollection(ArrayList::new));",
  "        ArrayList<Integer> numsSorted = new ArrayList<Integer>();\n        int\
    \ totalSum = 0;\n        int j = 0;\n        for(int i = 0; i < nums.size(); i++)\
    \ {\n            totalSum += nums.get(i);\n            while(j + 1 < nums.size()\
    \ && nums.get(j + 1) > nums.get(i)) {\n                totalSum -= nums.get(j++);\n\
    \            }\n            numsSorted.add(totalSum);\n        }\n        return\
    \ numsSorted;", "        ArrayList<Integer> numsCopy = new ArrayList<>(nums);\n\
    \        Arrays.sort(numsCopy);\n        HashMap<Integer, Integer> map = new HashMap<>();\n\
    \        int sum = 0;\n        for (int i = 0; i < numsCopy.size(); i++) {\n \
    \           sum = sum + numsCopy.get(i);\n            map.put(sum, i);\n     \
    \   }\n        ArrayList<Integer> result = new ArrayList<>();\n        for (Integer\
    \ key : map.keySet()) {\n            result.add(key);\n        }\n        return\
    \ result;", "        ArrayList<Integer> sortedList = new ArrayList<Integer>();\n\
    \        Collections.sort(nums);\n        int totalSum = nums.stream().mapToInt(Integer::intValue).sum();\n\
    \        \n        for (int i = 0; i < nums.size(); i++) {\n            int digitSum\
    \ = nums.get(i).intValue();\n            if (digitSum < 0 && totalSum < 0) {\n\
    \                totalSum = nums.get(i).intValue();\n            }\n         \
    \   if (totalSum > 0) {\n                totalSum = totalSum - digitSum;\n   \
    \             sortedList.add(nums.get(i));\n            } else {\n           \
    \     sortedList.add(nums.get(i));\n            }\n        }\n        return sortedList;",
  "        ArrayList<Integer> results = new ArrayList<Integer>();\n        Map<Integer,\
    \ Integer> map = new HashMap<>();\n        for(int i = 0; i < nums.size(); i++){\n\
    \            Integer value = map.get(nums.get(i));\n            if(value == null){\n\
    \                map.put(nums.get(i), i);\n            }else{\n              \
    \  int index = map.get(value);\n                results.set(index, nums.get(i));\n\
    \            }\n        }\n        return results;", "        if (nums == null)\
    \ {\n            return nums;\n        }\n        ArrayList<Integer> results =\
    \ new ArrayList<>();\n        PriorityQueue<Integer> queue = new PriorityQueue<Integer>();\n\
    \        boolean isQueueFull = true;\n        int queueSize = 0;\n\n        for\
    \ (int i = 0; i < nums.size(); i++) {\n            int sum = 0;\n            for\
    \ (int j = 0; j < nums.size(); j++) {\n                sum += nums.get(j);\n \
    \           }\n            if (sum % 10 == 0) {\n                queue.add(nums.get(i));\n\
    \                isQueueFull = false;\n            } else if (sum > 0) {\n   \
    \             queueSize += 1;\n                queue.add(nums.get(i));\n     \
    \       }\n        }\n        if (isQueueFull) {\n            while (!queue.isEmpty())\
    \ {\n                results.add(queue.poll());\n            }\n        }\n  \
    \      if (results.size() < queueSize) {\n            int temp = 0;\n        \
    \    while (queueSize > 0) {\n                temp = queue.poll();\n         \
    \       queueSize -= 1;\n                results.add(temp);\n            }\n \
    \       }\n        return results;", "        ArrayList<Integer> sortedNums =\
    \ new ArrayList<Integer>();\n        Map<Integer,Integer> map = new HashMap<Integer,Integer>();\n\
    \        for (int i = 0; i < nums.size(); i++) {\n            int pointNum = nums.get(i);\n\
    \            if (map.containsKey(pointNum)) {\n                Integer key = map.get(pointNum);\n\
    \                sortedNums.add(i, key);\n            } else {\n             \
    \   map.put(pointNum, i);\n            }\n        }\n        return sortedNums;",
  "        // Write your code here\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        int sum = 0;\n        for (int i=0; i<nums.size(); i++) {\n         \
    \   sum += nums.get(i);\n            result.add(sum);\n        }\n        return\
    \ result;", "        ArrayList<Integer> ret = new ArrayList<Integer>();\n    \
    \    // Iterate over the given list\n        for (int i : nums) {\n          \
    \  // Convert the given number into a string\n            String s = Integer.toString(i);\n\
    \            // Iterate over the given string and calculate the sum of digits\
    \ of each digit\n            int sum = 0;\n            for (int j = 0; j < s.length();\
    \ j++) {\n                sum += Character.getNumericValue(s.charAt(j));\n   \
    \         }\n            // If this sum already exists in the list,\n        \
    \    // order this list based on the index of the original list.\n           \
    \ if (!ret.contains(sum)) {\n                ret.add(sum);\n            }\n  \
    \      }\n        // Return the ordered list\n        return ret;", "        ArrayList<Integer>\
    \ points = new ArrayList<>();\n        for(int num : nums) {\n            int\
    \ temp = num;\n            for(int i = 1; i < num.length(); ++i) {\n         \
    \       int digit = Character.getNumericValue(num.charAt(i));\n              \
    \  temp += (digit < num) ? digit : -digit;\n            }\n            points.add(temp);\n\
    \        }\n        Collections.sort(points);\n        return points;", "    \
    \    // Your code here\n        return nums;", "        // TODO Use 'Collections.sort(nums,\
    \ Comparator.comparing(Integer::sumOfDigits));'\n        ArrayList<Integer> result\
    \ = new ArrayList<Integer>();\n        for (int i = 0; i < nums.size(); i++) {\n\
    \            result.add(nums.get(i));\n        }\n        Collections.sort(result,\
    \ new Comparator<Integer>() {\n            public int compare(Integer o1, Integer\
    \ o2) {\n                return Integer.compare(o1.sumOfDigits(o1), o2.sumOfDigits(o2));\n\
    \            }\n        });\n        return result;", "        ArrayList<Integer>\
    \ newnums = new ArrayList<Integer>();\n        int sum = 0;\n        for(Integer\
    \ i:nums){\n            sum+=i;\n            newnums.add(sum);\n        }\n  \
    \      newnums.sort(Comparator.comparingInt((Integer i) -> i));\n        ArrayList<Integer>\
    \ ans = new ArrayList<>();\n        for(int i = 0; i < newnums.size(); i++){\n\
    \            ans.add(newnums.get(i));\n        }\n        return ans;", "    \
    \    ArrayList<Integer> result = new ArrayList<>();\n        Map<Integer, Integer>\
    \ map = new HashMap<>();\n        for (int i=0; i<nums.size(); i++) {\n      \
    \      if (map.containsKey(nums.get(i))) {\n                map.put(nums.get(i),\
    \ map.get(nums.get(i)) + 1);\n            } else {\n                map.put(nums.get(i),\
    \ 1);\n            }\n        }\n        Iterator<Entry<Integer, Integer>> it\
    \ = map.entrySet().iterator();\n        while (it.hasNext()) {\n            Entry<Integer,\
    \ Integer> e = it.next();\n            Integer count = e.getValue();\n       \
    \     result.add(e.getKey());\n            if (count > 1) {\n                for\
    \ (int j = 0; j < count; j++) {\n                    it.remove(); // Remove entry\
    \ with count of 1\n                }\n            }\n        }\n        return\
    \ result;", "        PriorityQueue<Integer> pq = new PriorityQueue<>(nums.size());\n\
    \        HashMap<Integer, Integer> numsSums = new HashMap<>();\n        for(int\
    \ i = 0; i < nums.size(); i++) {\n            int value = nums.get(i);\n     \
    \       if(numsSums.containsKey(value)) {\n                pq.offer(numsSums.get(value));\n\
    \                numsSums.put(value, nums.get(i));\n            }\n          \
    \  else {\n                pq.offer(value);\n                numsSums.put(value,\
    \ nums.get(i));\n            }\n        }\n        return pq.poll();", "     \
    \   ArrayList<Integer> orders = new ArrayList<>();\n        int sum = 0;\n   \
    \     int prevSum = 0;\n        int lastSum = Integer.MIN_VALUE;\n        for(\
    \ int i = 0; i < nums.size(); i++ ) {\n            int current = nums.get(i);\n\
    \            int newSum = sum + current;\n            if( newSum > lastSum ) {\n\
    \                orders.add(-(i + 1));\n                lastSum = newSum;\n  \
    \          }\n            sum += current;\n        }\n        return orders;",
  "        // Your code here\n        \n        Map<Integer, Integer> map = new HashMap<>();\n\
    \        for(int i = 0; i < nums.size(); i++)\n        {\n            Integer\
    \ num = nums.get(i);\n            Integer sum = num % 10 + num / 10 * 10 + num\
    \ % 10;\n            if(map.containsKey(sum))\n                map.put(sum, map.get(sum)\
    \ + 1);\n            else\n                map.put(sum, 1);\n        }\n     \
    \   \n        List<Integer> keys = new ArrayList<>(map.keySet());\n        Collections.sort(keys);\n\
    \        ArrayList<Integer> list = new ArrayList<>();\n        for(int i = 0;\
    \ i < keys.size(); i++)\n        {\n            int key = keys.get(i);\n     \
    \       int value = map.get(key);\n            list.add(value);\n        }\n \
    \       Collections.sort(list);\n        return list;", "        int digitSum\
    \ = 0;\n        ArrayList<Integer> result = new ArrayList<>();\n        for (Integer\
    \ num : nums) {\n            digitSum += num.intValue();\n            int index\
    \ = num.intValue();\n            result.add(index);\n        }\n        Collections.sort(result);\n\
    \        return result;", "        ArrayList<Integer> ordered = new ArrayList<Integer>();\n\
    \        for(Integer i : nums) {\n            Integer sum = getSum(i);\n     \
    \       for(int j = 0; j < ordered.size(); j++) {\n                Integer temp\
    \ = getSum(ordered.get(j));\n                if(sum == temp) {\n             \
    \       ordered.remove(j);\n                }\n            }\n            ordered.add(i);\n\
    \        }\n        return ordered;", "        ArrayList<Integer> result = new\
    \ ArrayList<Integer>();\n        int total = 0;\n        for (Integer num : nums)\
    \ {\n            total += num;\n        }\n        Collections.sort(nums);\n \
    \       boolean isSortedByPoints = true;\n        for (int i = 0; i < nums.size();\
    \ i++) {\n            int sum = nums.get(i);\n            if (sum != total) {\n\
    \                isSortedByPoints = false;\n                break;\n         \
    \   }\n        }\n        if (isSortedByPoints) {\n            Collections.sort(nums);\n\
    \            int index;\n            for (int i = 0; i < nums.size(); i++) {\n\
    \                index = nums.lastIndexOf(nums.get(i));\n                result.add(index);\n\
    \            }\n        }\n        return result;", "        Map<Integer, Integer>\
    \ map = new HashMap<>();\n        for(int num : nums)\n            map.put(num,\
    \ map.get(num) == null ? 1 : map.get(num) + 1);\n        List<Map.Entry<Integer,\
    \ Integer>> entries = map.entrySet().stream().sorted(Map.Entry.<Integer, Integer>comparingByValue()).collect(Collectors.toList());\n\
    \        ArrayList<Integer> result = new ArrayList<>(entries.size());\n      \
    \  for(int index = 0; index < entries.size(); index++)\n            result.add(entries.get(index).getKey());\n\
    \        return result;", "        // sort the number list based on their sum\n\
    \        ArrayList<Integer> res = new ArrayList<Integer>();\n        int sum =\
    \ 0;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums.get(i);\n\
    \        }\n        for (int i = 0; i < nums.size(); i++) {\n            int temp\
    \ = nums.get(i);\n            if (temp < 0)\n                temp *= -1;\n   \
    \         if (temp > sum)\n                res.add(-temp);\n            else\n\
    \                res.add(temp);\n        }\n        return res;", "        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        Integer last = null;\n        for\
    \ (int i = 0; i < nums.size(); i++) {\n            int sum = 0;\n            for\
    \ (int j = i; j < nums.size(); j++) {\n                sum += nums.get(j);\n \
    \           }\n            if (last == null) {\n                last = sum;\n\
    \                result.add(nums.get(i));\n            } else if (sum == last)\
    \ {\n                result.add(nums.get(i));\n            } else if (sum < last)\
    \ {\n                last = sum;\n                result.add(nums.get(i));\n \
    \           }\n        }\n        return result;", "        if(nums.isEmpty()){\n\
    \            return nums;\n        }\n        PriorityQueue<Integer> heap = new\
    \ PriorityQueue<>(nums.size());\n        for(int i = 0; i < nums.size(); i++){\n\
    \            heap.add(nums.get(i));\n        }\n\n        ArrayList<Integer> result\
    \ = new ArrayList<>();\n        while(!heap.isEmpty()){\n            int top =\
    \ heap.poll();\n            result.add(top);\n            for(int i : nums.subList(top+1,\
    \ nums.size())){\n                if(sumOfDigits(i) < sumOfDigits(top)){\n   \
    \                 heap.add(i);\n                }\n            }\n        }\n\
    \        return result;", "        int totalSum = 0;\n        for (Integer i :\
    \ nums) {\n            totalSum += i;\n        }\n        ArrayList<Integer> newNums\
    \ = new ArrayList<Integer>();\n        int prevPoint = 0;\n        for (int i\
    \ = 0; i < nums.size(); i++) {\n            int point = (int) Math.pow(10, totalSum\
    \ - prevPoint);\n            if (point > nums.get(i)) {\n                newNums.add(nums.get(i));\n\
    \            } else if (point < nums.get(i)) {\n                newNums.add(nums.get(i));\n\
    \            }\n            prevPoint = point;\n            totalSum -= nums.get(i);\n\
    \        }\n        return newNums;", "        ArrayList<Integer> result = new\
    \ ArrayList<Integer>();\n        for (Integer i : nums) {\n            int sum\
    \ = 0;\n            while (i != 0) {\n                sum += i % 10;\n       \
    \         i /= 10;\n            }\n            result.add(sum);\n        }\n \
    \       Arrays.sort(result);\n        return result;", "        if(nums == null\
    \ || nums.isEmpty()) {\n            return nums;\n        }\n        int[] arr\
    \ = nums.stream().mapToInt(i -> i).toArray();\n        Arrays.sort(arr);\n   \
    \     return Arrays.stream(arr).boxed().collect(Collectors.toCollection(ArrayList::new));",
  "        // TODO: Implement this function\n        HashMap<Integer, Integer> map\
    \ = new HashMap<>();\n        for(int n : nums)\n            map.put(n, map.getOrDefault(sum_of_digits(n),\
    \ 0) + 1);\n        ArrayList<Integer> res = new ArrayList<>();\n        for(Integer\
    \ key : map.keySet())\n        {\n            Integer value = map.get(key);\n\
    \            if(value > 1)\n            {\n                res.add(key);\n   \
    \         }\n        }\n        return res;", "        nums.stream().sorted((a,\
    \ b) -> {\n            double a = Math.abs(a);\n            double b = Math.abs(b);\n\
    \            return IntStream.rangeClosed(1, Math.max(a, b)).sum();\n        }).collect(toList());\n\
    \        return nums;", "        int sum = 0;\n        for(int num : nums){\n\
    \            sum += num;\n        }\n        \n        ArrayList<Integer> result\
    \ = new ArrayList<Integer>();\n        for(int num : nums){\n            int digit\
    \ = num % 10;\n            if(sum == digit){\n                result.add(num);\n\
    \            }\n        }\n        \n        if(nums.size() == 0){\n         \
    \   return result;\n        }\n        \n        return result;", "        ArrayList<Integer>\
    \ sortedNums = new ArrayList<Integer>();\n        if (nums.size() == 0) {\n  \
    \          return sortedNums;\n        }\n        HashMap<Integer, Integer> map\
    \ = new HashMap<>();\n        for(int i = 0; i < nums.size(); i++) {\n       \
    \     Integer keyValue = nums.get(i);\n            Integer value = map.get(keyValue);\n\
    \            if (value == null) {\n                map.put(keyValue, new Integer(0));\n\
    \            }\n            map.put(keyValue, new Integer(value.getValue() + nums.get(i)));\n\
    \        }\n        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {\n\
    \            sortedNums.add(entry.getValue());\n        }\n        return sortedNums;",
  "        if (nums == null) return nums;\n        Map<Integer, Integer> map = new\
    \ HashMap<>();\n        for (Integer i : nums) {\n            map.put(i, map.getOrDefault(i,\
    \ 0) + 1);\n        }\n        ArrayList<Integer> ret = new ArrayList<Integer>(nums.size());\n\
    \        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {\n        \
    \    if (entry.getValue() > 1) {\n                ret.add(entry.getKey());\n \
    \           }\n        }\n        return ret;", "        // Write your code here\n\
    \        Arrays.sort(nums);\n        List<Integer> result = new ArrayList<>();\n\
    \        for (Integer i : nums) {\n            int sum = 0;\n            for (int\
    \ j = 0; j < i.length(); j++) {\n                sum += i.charAt(j) - '0';\n \
    \           }\n            result.add(i.compareTo(sum) == 1 ? i : sum);\n    \
    \    }\n        return result;", "        // Your code here\n        int sum=0;\n\
    \        ArrayList<Integer> list=new ArrayList<Integer>();\n        for (int num\
    \ : nums)\n        {\n            sum=sum+num;\n            list.add((Integer)sum);\n\
    \        }\n        return list;", "        ArrayList<Integer> numsSorted = new\
    \ ArrayList<Integer>();\n        int sum = 0;\n        for(int i = 0; i < nums.size();\
    \ i++){\n            sum += nums.get(i);\n        }\n        for(int i = 0; i\
    \ < nums.size(); i++){\n            if(nums.get(i) == sum){\n                numsSorted.add(nums.get(i));\n\
    \            }\n        }\n        Arrays.sort(numsSorted);\n        return numsSorted;",
  "        //List<Integer> nums2 = new ArrayList<Integer>();\n        Map<Integer,\
    \ Integer> map = new HashMap<>();\n\n        for (Integer i : nums) {\n      \
    \      int c = 0;\n            int sum = 0;\n            while (i!= 0) {\n   \
    \             sum += i % 10;\n                c = sum * 10 + c; \n           \
    \     i = i / 10;\n            }\n            if (map.containsKey(c)) {\n    \
    \            map.put(sum, map.get(c) + 1);\n            } else {\n           \
    \     map.put(sum, 1);\n            }\n        }\n        ArrayList<Integer> list\
    \ = new ArrayList<Integer>(map.keySet());\n        list.sort((a, b) -> map.get(b)\
    \ - map.get(a));\n        System.out.println(list);\n        return list;", " \
    \       ArrayList<Integer> result = new ArrayList<Integer>();\n        HashMap<Integer,\
    \ Integer> map = new HashMap<Integer, Integer>();\n        for(Integer n : nums)\
    \ {\n            Integer num = (Integer) n;\n            Integer sum = num % 10;\n\
    \            if(map.containsKey(sum)) {\n                int index = map.get(sum);\n\
    \                result.add(index, n);\n            } else {\n               \
    \ map.put(sum, n);\n                result.add(n);\n            }\n        }\n\
    \        return result;", "        Arrays.sort(nums);\n        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        int sum = 0;\n        int prevSum = Integer.MIN_VALUE;\n\
    \        for( int i = 0; i < nums.size(); i++ ) {\n            sum += nums.get(i);\n\
    \            if( sum > prevSum ) {\n                result.add(nums.get(i));\n\
    \            }\n            prevSum = sum;\n        }\n        return result;",
  "        List<Integer> numsSorted = nums.stream()\n                .sorted(Comparator.comparing((Integer\
    \ i) -> {\n                    // Find all numbers with same sum\n           \
    \         int count = 0;\n                    boolean found = false;\n       \
    \             for (Integer j : nums) {\n                        if (i != j &&\
    \ i + j == i) {\n                            count++;\n                      \
    \      found = true;\n                        }\n                    }\n     \
    \               if (!found) {\n                        return count;\n       \
    \             }\n                    // If count == nums.size(), we sort it normally\n\
    \                    // Otherwise, we sort it by its index\n                 \
    \   if (count == nums.size()) {\n                        return i;\n         \
    \           }\n                    return count;\n                })).collect(Collectors.toList());\n\
    \        return numsSorted;", "        if (nums.isEmpty()) return nums;\n    \
    \    int[] sums = new int[10];\n        for (int i = 0; i < nums.size(); i++)\
    \ {\n            int value = nums.get(i);\n            for (int j = value; j <\
    \ 10; j++) {\n                sums[j] += j;\n            }\n        }\n      \
    \  Arrays.sort(sums, Comparator.comparingInt(Math::abs));\n        ArrayList<Integer>\
    \ res = new ArrayList<Integer>();\n        int carry = 0;\n        for (int i\
    \ = 0; i < sums.length; i++) {\n            int cur = sums[i] % 10;\n        \
    \    if (i == 0) {\n                cur = carry;\n                carry = sums[i]\
    \ / 10;\n            }\n            else if (cur > 0) {\n                carry\
    \ = 0;\n                res.add(cur);\n            }\n            sums[i] = carry\
    \ + (sums[i] / 10);\n        }\n        if (carry > 0) {\n            res.add(carry);\n\
    \        }\n        return res;", "        ArrayList<Integer> ans = new ArrayList<>();\n\
    \        int max = 0;\n        for (int num : nums) {\n            int sum = (int)\
    \ Math.pow(10, num.intValue());\n            if (sum > max) {\n              \
    \  max = sum;\n            }\n            ans.add(num);\n        }\n        ans.sort(Comparator.comparingInt(n\
    \ -> n.intValue()/max));\n        return ans;", "        ArrayList<Integer> list\
    \ = new ArrayList<Integer>();\n        List<Integer> ls = nums.stream().map(n\
    \ -> n*10+n).sorted(Comparator.naturalOrder()).collect(Collectors.toList());\n\
    \        for(int i=0; i<ls.size(); i++){\n            if(list.contains(ls.get(i)))\n\
    \                continue;\n            list.add(ls.get(i));\n        }\n    \
    \    return list;", "        Map<Integer, Integer> sums = new HashMap<>();\n \
    \       int sum = 0;\n        for (int num: nums) {\n            sum += num;\n\
    \            if (!sums.containsKey(sum)) {\n                sums.put(sum, nums.size());\n\
    \            } else {\n                sums.put(sum, sums.get(sum) + nums.size());\n\
    \            }\n        }\n        return new ArrayList<>(sums.values());", " \
    \       Collections.sort(nums, new Comparator<Integer>() {\n            public\
    \ int compare(Integer o1, Integer o2) {\n                int i1 = nums.indexOf(o1);\n\
    \                int i2 = nums.indexOf(o2);\n                return i1 - i2;\n\
    \            }\n        });\n        return nums;", "        // TODO: Implement\
    \ your code here\n        return null;", "        HashMap<Integer, Integer> hashMap\
    \ = new HashMap<>();\n\n        for(int i : nums) {\n            hashMap.computeIfAbsent(i,\
    \ i -> 0);\n            hashMap.computeIfPresent(i, (i, val) -> val + 1);\n  \
    \      }\n\n        List<Integer> result = new ArrayList<>();\n        for(Entry<Integer,\
    \ Integer> entry : hashMap.entrySet()) {\n            result.add(entry.getKey());\n\
    \        }\n\n        return result;", "        ArrayList<Integer> sortedNums\
    \ = new ArrayList<>();\n        // initialize sum = 0\n        int sum = 0;\n\n\
    \        for (int i = 0; i < nums.size(); i++) {\n            sum = sum + nums.get(i);\n\
    \        }\n\n        // calculate sum\n        for (int i = 0; i < nums.size();\
    \ i++) {\n            sum = sum - nums.get(i) * nums.size();\n        }\n\n  \
    \      // Sort the nums in ascending order\n        for (int i = 0; i < nums.size();\
    \ i++) {\n            if (sum < 0) break;\n            sortedNums.add(nums.get(i));\n\
    \        }\n        return sortedNums;", "        ArrayList<Integer> result =\
    \ new ArrayList<Integer>();\n        // TODO: Write your solution here\n     \
    \   return result;", "        ArrayList<Integer> result = new ArrayList<>();\n\
    \        Integer sum = nums.stream().mapToInt(Integer::intValue).sum();\n    \
    \    Collections.sort(nums, (o1, o2) -> {\n            int diff = Integer.compare(o2.intValue(),\
    \ o1.intValue());\n            if (diff != 0) {\n                return diff;\n\
    \            }\n            return Integer.compare(sum, o2.intValue());\n    \
    \    });\n        result.addAll(nums);\n        return result;", "        ArrayList<Integer>\
    \ list = new ArrayList<Integer>();\n        int min = nums.get(0); // find the\
    \ smallest number\n        int max = nums.get(nums.size()-1); // find the largest\
    \ number\n        int maxSum = computeMaxSum(nums); // compute the max sum\n\n\
    \        int sum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n     \
    \       sum += nums.get(i);\n            if (sum >= maxSum) {\n              \
    \  list.add(nums.get(i));\n            }\n        }\n        return list;", " \
    \       ArrayList<Integer> sorted = new ArrayList<>();\n\n        // Get a map\
    \ of sum => index\n        Map<Integer, Integer> map = new HashMap<>();\n    \
    \    for (int i = 0; i < nums.size(); ++i) {\n            Integer sum = nums.get(i);\n\
    \            if (!map.containsKey(sum)) {\n                map.put(sum, i);\n\
    \            }\n        }\n        \n        // Order the list by comparing the\
    \ key with the original list\n        ArrayList<Integer> tmp = nums.stream()\n\
    \            .sorted((a, b) -> map.get(b) - map.get(a))\n            .collect(Collectors.toList());\n\
    \        \n        // Add the result\n        sorted.addAll(tmp);\n        \n\
    \        return sorted;", "        // write your code here\n        Map<Integer,\
    \ Integer> map = new HashMap<Integer, Integer>();\n        for (int i = 0; i <\
    \ nums.size(); i++) {\n            int digitSum = nums.get(i) % 10;\n        \
    \    map.put(digitSum, i);\n        }\n        ArrayList <Integer> list = new\
    \ ArrayList<Integer>(map.keySet());\n        Collections.sort(list);\n       \
    \ ArrayList <Integer> result = new ArrayList<>();\n        for (Integer i : list)\
    \ {\n            result.add(i);\n        }\n        return result;", "       \
    \ int[] numArray = nums.stream().mapToInt(Integer::intValue).toArray();\n    \
    \    int[] digitSum = numArray\n                .stream()\n                .mapToInt(i\
    \ -> i)\n                .filter(i -> i >= 0)\n                .mapToInt(i ->\
    \ i)\n                .filter(i -> i >= 0)\n                .mapToInt(i -> i)\n\
    \                .toArray();\n        Arrays.sort(digitSum);\n        Arrays.sort(numArray);\n\
    \        List<Integer> result = new ArrayList<>();\n        for (int i = 0; i\
    \ < digitSum.length; i++) {\n            result.add(numArray[digitSum[i] - 1]);\n\
    \        }\n        return result;", "        ArrayList<Integer> result = new\
    \ ArrayList<Integer>();\n        Map<Integer, Integer> map = new HashMap<Integer,\
    \ Integer>();\n        int sum = 0;\n        for(int n : nums) {\n           \
    \ sum += n;\n            map.put(n, sum);\n        }\n        for(int n : nums)\
    \ {\n            int m = map.get(n);\n            if(m == 0) {\n             \
    \   map.put(n, sum);\n            }\n        }\n        for(int n : nums) {\n\
    \            int m = map.get(n);\n            if(!map.containsKey(m)) {\n    \
    \            sum += n;\n                map.put(m, sum);\n            }\n    \
    \    }\n        Iterator<Entry<Integer, Integer>> itr = map.entrySet().iterator();\n\
    \        while (itr.hasNext()) {\n            Entry entry = itr.next();\n    \
    \        result.add((Integer)entry.getKey());\n        }\n        return result;",
  "        ArrayList<Integer> result = new ArrayList<>();\n        Collections.sort(nums,\
    \ new Comparator<Integer>() {\n            public int compare(Integer o1, Integer\
    \ o2) {\n                Integer i1 = o1;\n                Integer i2 = o2;\n\
    \                Integer sum1 = getSum(i1);\n                Integer sum2 = getSum(i2);\n\
    \                return sum1.compareTo(sum2);\n            }\n\n            private\
    \ Integer getSum(Integer i) {\n                int sum = 0;\n                while\
    \ (i != 0) {\n                    sum += i % 10;\n                    i /= 10;\n\
    \                }\n                return sum;\n            }\n        });\n\
    \        // Use streams and lambdas to sort the list by sum\n        return result.stream().sorted(new\
    \ Comparator<Integer>() {\n            public int compare(Integer o1, Integer\
    \ o2) {\n                Integer i1 = o1;\n                Integer i2 = o2;\n\
    \                Integer sum1 = getSum(i1);\n                Integer sum2 = getSum(i2);\n\
    \                return sum1.compareTo(sum2);\n            }\n\n            private\
    \ Integer getSum(Integer i) {\n                int sum = 0;\n                while\
    \ (i != 0) {\n                    sum += i % 10;\n                    i /= 10;\n\
    \                }\n                return sum;\n            }\n        }).collect(Collectors.toCollection(ArrayList<Integer>::new));",
  "        ArrayList<Integer> result = new ArrayList<>();\n        List<Integer> sorted\
    \ = new ArrayList<>();\n        for (int i = 0; i < nums.size(); i++) {\n    \
    \        int sum = nums.get(i).intValue();\n            for (int j = 0; j < sorted.size();\
    \ j++) {\n                if (sorted[j] == sum) {\n                    result.add(nums.get(i));\n\
    \                    break;\n                }\n            }\n            sorted.add(sum);\n\
    \        }\n        return result;", "        ArrayList<Integer> result = new\
    \ ArrayList<>();\n        Set<Integer> seen = new HashSet<>();\n        ArrayList<Integer>\
    \ tmp = new ArrayList<>();\n        int max = 0;\n        int maxIndex = 0;\n\
    \        int digitSum = 0;\n        for(Integer i : nums) {\n            if (i\
    \ > 0) {\n                digitSum = 0;\n                for(char ch : String.valueOf(i).toCharArray())\
    \ {\n                    digitSum += Character.getNumericValue(ch);\n        \
    \        }\n                if (digitSum > max) {\n                    max = digitSum;\n\
    \                    maxIndex = i;\n                }\n                if (!seen.contains(digitSum))\
    \ {\n                    tmp.add(digitSum);\n                    seen.add(digitSum);\n\
    \                }\n            }\n        }\n        Collections.sort(tmp);\n\
    \        for(int i = 0; i < tmp.size(); i++) {\n            result.add(nums.get(tmp.size()\
    \ - 1 - i));\n        }\n        return result;", "        Map<Integer, Integer>\
    \ map = new TreeMap<>();\n        for (Integer num : nums) {\n            int\
    \ digit = num % 10;\n            map.put(digit, map.getOrDefault(digit, 0) + 1);\n\
    \        }\n        List<Integer> result = new ArrayList<>(map.values());\n  \
    \      Collections.sort(result);\n        return result;", "        ArrayList<Integer>\
    \ numsSorted = new ArrayList<>();\n        for(Integer num : nums) {\n       \
    \     int sum = 0;\n            for(int i : num.split(\"\")) {\n             \
    \   sum += Integer.parseInt(String.valueOf(i));\n            }\n            Collections.sort(numsSorted,\
    \ (x, y) -> sum - x - y);\n        }\n        return numsSorted;", "        ArrayList<Integer>\
    \ ret = new ArrayList<>();\n        int sum = 0;\n        for(int num: nums) {\n\
    \            sum += num;\n            ret.add(sum);\n        }\n        Arrays.sort(ret);\n\
    \        return ret; // return sorted list", "        ArrayList<Integer> result\
    \ = new ArrayList<Integer>();\n        Map<Integer, Integer> map = new HashMap<Integer,\
    \ Integer>();\n        for (int i = 0; i < nums.size(); i++) {\n            Integer\
    \ k = nums.get(i);\n            if (map.containsKey(k)) {\n                map.put(k,\
    \ map.get(k) + 1);\n            } else {\n                map.put(k, 1);\n   \
    \         }\n        }\n        for (Map.Entry<Integer, Integer> entry : map.entrySet())\
    \ {\n            result.add(entry.getKey() + entry.getValue() * nums.size());\n\
    \        }\n        return result;", "        // Write your code here\n      \
    \  ArrayList<Integer> ans = new ArrayList<Integer>();\n        if(nums == null\
    \ || nums.size() == 0){\n            return ans;\n        }\n        Map<Integer,\
    \ Integer> map = new HashMap<>();\n        for(int i = 0; i < nums.size(); i++){\n\
    \            int sum = 0;\n            for(int j = i; j < nums.size(); j++){\n\
    \                sum += nums.get (j);\n            }\n            map.put(sum,\
    \ i);\n        }\n\n        ArrayList sortedList = new ArrayList();\n        Iterator\
    \ iterator = map.entrySet().iterator();\n        while (iterator.hasNext()){\n\
    \            Map.Entry entry = (Map.Entry)iterator.next();\n            sortedList.add(entry.getValue());\n\
    \            iterator.remove();\n        }\n        Collections.sort(sortedList);\n\
    \        ans = new ArrayList<Integer>(map.values());\n        Collections.sort(ans);\n\
    \        return ans;", "        PriorityQueue<Integer> pq = new PriorityQueue<>(nums.size(),\
    \ (x, y) -> x.compareTo(y));\n        nums.forEach(x -> pq.offer(x));\n      \
    \  ArrayList<Integer> sorted = new ArrayList<>(pq);\n        return sorted;",
  "        if(nums.isEmpty()){\n            return nums;\n        }\n        Arrays.sort(nums,\
    \ new Comparator<Integer>() {\n            public int compare(Integer a, Integer\
    \ b) {\n                if(a==b)\n                    return 0;\n            \
    \    \n                double dA= Math.log10(a);\n                double dB= Math.log10(b);\n\
    \                \n                if(dB<-dA){\n                    return 1;\n\
    \                }\n                else if(dB==-dA){\n                    return\
    \ -1;\n                }\n                \n                long diff=a^b;\n \
    \               long diff1=Math.abs(diff);\n                \n               \
    \ if(diff1==0){\n                    //this case is very unlikely, but we have\
    \ to account for it\n                    //because this comparator is used in\
    \ Arrays.sort(...)\n                    return Integer.signum(a-b);\n        \
    \        }\n                \n                long diff2=diff/10^diff1;\n    \
    \            if(diff1<10){\n                    return -1;\n                }\n\
    \                else if(diff1>=10){\n                    return 1;\n        \
    \        }\n                \n                \n                return Integer.signum(diff2);\n\
    \            }\n        });\n        \n        return nums;", "        ArrayList<Integer>\
    \ res = new ArrayList<Integer>();\n        int[] vals = new int[nums.size()];\n\
    \        int sum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n     \
    \       sum += nums.get(i);\n            vals[i] = sum;\n            int pos =\
    \ i;\n            for (int j = i; j < nums.size(); j++) {\n                if\
    \ (sum != nums.get(j)) {\n                    pos = j;\n                    break;\n\
    \                }\n            }\n            res.add(pos, nums.get(pos));\n\
    \        }\n        return res;", "        int total = 0;\n        int currentSum\
    \ = 0;\n        int sum = 0;\n        HashMap<Integer, Integer> hm = new HashMap<>();\n\
    \        int idx = 0;\n        ArrayList<Integer> numsCopy = new ArrayList<>(nums);\n\
    \        while(idx < numsCopy.size()) {\n            sum = numsCopy.get(idx);\n\
    \            int sum2 = sum % 10;\n            current = total + sum2;\n     \
    \       while(!hm.containsKey(current)) {\n                hm.put(current, idx);\n\
    \                currentSum = sum2;\n                current++;\n            \
    \    sum2 = sum % 10;\n            }\n            idx = hm.get(current);\n   \
    \         numsCopy.remove(idx);\n            total = current;\n        }\n   \
    \     return numsCopy;", "        ArrayList<Integer> sorted = new ArrayList<>();\n\
    \        // sort the given nums array in ascending order by their sum of the digits\n\
    \        int sum = 0;\n        for (Integer num : nums) {\n            sum +=\
    \ num;\n            sorted.add(sum);\n        }\n\n        // if there are several\
    \ items with similar sum of their digits, order them based on\n        // their\
    \ index in original nums array (e.g [12, 1, -12, 11] will be ordered as [1, -12,\
    \ 12, 11])\n        Collections.sort(sorted);\n\n        // return the sorted\
    \ nums array\n        return sorted;", "        ArrayList<Integer> result = new\
    \ ArrayList<Integer>();\n        for(int i = 0; i < nums.size(); i++) {\n    \
    \        int point = 0;\n            int sum = 0;\n            for(int j = i;\
    \ j < nums.size(); j++) {\n                point += nums.get(j);\n           \
    \     sum += point % 10;\n            }\n            if(sum > 0) {\n         \
    \       result.add(nums.get(i));\n            }\n        }\n        return result;",
  "        ArrayList<Integer> list = new ArrayList<>();\n        double sum = 0;\n\
    \        int sums = 0;\n        for(Integer num : nums)\n            sum += num;\n\
    \        for(Integer num : nums)\n            sums += num;\n        for(Integer\
    \ num : nums)\n            sum += num;\n        for(int i = 0; i < nums.size();\
    \ i++)\n        {\n            sum = sums - nums.get(i);\n            if(sum ==\
    \ 0)\n                list.add(nums.get(i));\n            if(sum != 0)\n     \
    \       {\n                sum = sums / nums.size();\n                sum += nums.get(i);\n\
    \                list.add((int)nums.get(i) + sum);\n            }\n          \
    \  sums = 0;\n        }\n        return list;", "        \n        ArrayList <Integer>\
    \ newNums = new ArrayList <Integer> ();\n        \n        for(Integer num : nums){\n\
    \            \n            newNums.add((int)Math.round( num * Math.pow(10, num.length())\
    \ ));\n        }\n        \n        Collections.sort(newNums);\n        \n   \
    \     return newNums;", "        ArrayList<Integer> list = new ArrayList<Integer>();\n\
    \        Map<Integer, Integer> map = new HashMap<Integer, Integer>();\n      \
    \  for (int i = 0; i < nums.size(); i++) {\n            map.put(nums.get(i), i);\n\
    \        }\n        for(Map.Entry<Integer, Integer> entry : map.entrySet()) {\n\
    \            Integer index = entry.getValue();\n            Integer key = entry.getKey();\n\
    \            Integer count = list.size();\n            for (int i = index - 1;\
    \ i >= 0; i--) {\n                list.set(--count, list.get(i));\n          \
    \  }\n            list.set(count, key);\n        }\n        for(int i = 0; i<\
    \ list.size(); i++) {\n            list.add(i, list.get(i));\n        }\n    \
    \    return list;", "        // Write your code here\n        int[] dig = nums.stream()\n\
    \                .map(x -> Integer.toDigits(x))\n                .toArray();\n\
    \        Map<Integer, Integer> map = new HashMap<>();\n        for (int i = 0;\
    \ i < dig.length; i++) {\n            Integer key = dig.length - 1 - i;\n    \
    \        Integer val = map.getOrDefault(key, 0);\n            map.put(key, val\
    \ + dig[i]);\n        }\n        return map.entrySet().stream()\n            \
    \    .sorted(Map.Entry.<Integer, Integer> comparingByValue(Math::max).thenComparing(Map.Entry.comparingByKey()))\n\
    \                .map(e -> nums.get(e.getValue())).collect(Collectors.toList());",
  "        ArrayList<Integer> result = new ArrayList<>();\n        int[] sums = nums.stream().mapToInt(i\
    \ -> i).summaryStatistics().asMap().toArray();\n        int sum = 0;\n       \
    \ for (int i : sums) {\n            sum += i;\n            if (sum > 0) {\n  \
    \              result.add(i);\n            }\n        }\n        if (sum == 0)\
    \ {\n            return result;\n        }\n        LinkedList<Integer> linkedList\
    \ = new LinkedList<>();\n        LinkedList<Integer> reverseList = new LinkedList<>();\n\
    \        for (int i = 0; i < result.size(); i++) {\n            int index = sums.indexOf(i);\n\
    \            linkedList.add(i, index);\n            reverseList.add(index, i);\n\
    \        }\n        result = new ArrayList<>(linkedList);\n        result.addAll(reverseList);\n\
    \        return result;", "        nums.sort(Comparator.comparingInt(x -> x +\
    \ 0));\n        return nums;", "        HashMap<Integer, Integer> map = new HashMap<>();\n\
    \        for(int i = 0; i < nums.size(); i++){\n            int val = nums.get(i);\n\
    \            if(map.containsKey(val)){\n                map.put(val, map.get(val)\
    \ + 1);\n            }else{\n                map.put(val, 1);\n            }\n\
    \        }\n\n        List<Map.Entry<Integer, Integer>> list = new ArrayList<>(map.entrySet());\n\
    \        list.sort((Map.Entry.<Integer, Integer>comparingByValue()) -> ((Comparable)((Comparable)\
    \ map.getOrDefault(list.get(0).getKey(), 0))).compareTo(((Comparable)((Comparable)\
    \ map.getOrDefault(list.get(list.size() - 1).getKey(), 0)))));\n        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        for(int i = 0; i < list.size(); i++){\n\
    \            result.add(list.get(i).getKey());\n        }\n\n        return result;",
  "        \n        // Write your code here\n        // Your code here\n\n      \
    \  ArrayList<Integer> orderList = new ArrayList<Integer>();\n        ArrayList<Integer>\
    \ numsList = new ArrayList<Integer>();\n        \n        for(int i : nums) {\n\
    \            numsList.add(i);\n        }\n        Collections.sort(numsList, (o1,\
    \ o2) -> {\n            if(o1.equals(o2)){\n                return 0;\n      \
    \      }\n            if(o1 == o2){\n                return -1;\n            }\n\
    \            int d1 = o1 % 10;\n            int d2 = o2 % 10;\n            int\
    \ sum = d1 + d2;\n            if(sum == 0){\n                return 0;\n     \
    \       }\n            else if(sum < 0){\n                return 1;\n        \
    \    }\n            else{\n                return -1;\n            }\n       \
    \ });\n        \n        for(int i = 0; i < nums.size(); i++) {\n            for(int\
    \ j = 0; j < numsList.size(); j++) {\n                if(nums.get(i) == numsList.size()\
    \ - j - 1) {\n                    orderList.add(i);\n                }\n     \
    \       }\n        }\n        return orderList;", "        // Write your code\
    \ here\n        HashMap<Integer, Integer> pointSum = new HashMap<Integer, Integer>();\n\
    \        for(int i = 0; i < nums.size(); i++){\n            int sum = nums.get(i).intValue();\n\
    \            if(!pointSum.containsKey(sum)){\n                pointSum.put(sum,\
    \ 0);\n            }\n            pointSum.put(sum, pointSum.get(sum) + 1);\n\
    \        }\n        ArrayList tempList = new ArrayList();\n        for(Map.Entry<Integer,\
    \ Integer> entry : pointSum.entrySet()){\n            tempList.add(entry.getKey()\
    \ + entry.getValue());\n        }\n        Collections.sort(tempList);\n     \
    \   return tempList;", "        ArrayList<Integer> result = new ArrayList<>();\n\
    \        IntComparator comparator = IntComparator.comparingInt(num -> num.intValue());\n\
    \        IntSummaryStatistics stats = new IntSummaryStatistics();\n        for(int\
    \ i : nums) {\n            int j = i;\n            int count = 0;\n          \
    \  while(j != 0) {\n                j = j/10;\n                count++;\n    \
    \        }\n            stats.add(count);\n        }\n        for(int i = 0; i\
    \ < nums.size(); i++) {\n            int count = stats.get(i);\n            if(i\
    \ == 0) {\n                if(!nums.contains(count)) {\n                    result.add(count);\
    \ \n                }\n                continue;\n            }\n            int\
    \ j = nums.get(i);\n            if(count >= j) {\n                result.add(count);\
    \ \n                result.add(i);\n            }\n        }\n        return result;",
  "        // base case\n        if (nums.size() == 0) {\n            return nums;\n\
    \        }\n        // sort by sum of their digits\n        ArrayList<Integer>\
    \ nums2 = nums.stream().sorted((a, b) -> {\n            int sum = (a + b) % 10;\n\
    \            if (sum == 0) {\n                return Integer.compare(a, b);\n\
    \            } else {\n                return sum;\n            }\n        }).collect(Collectors.toList());\n\
    \        // sort them by index in original list\n        ArrayList<Integer> nums3\
    \ = new ArrayList<Integer>();\n        for (int i = 0; i < nums2.size(); i++)\
    \ {\n            int sum = (nums2 + i) % 10;\n            if (sum == 0) {\n  \
    \              nums3.add(nums2.get(i));\n            }\n        }\n        //\
    \ return result\n        return nums3;", "        ArrayList<Integer> res = new\
    \ ArrayList<>();\n        // Write your code here\n\n        int sumOfDigits =\
    \ 0;\n        for (int i = 0; i < nums.size(); i++) {\n            sumOfDigits\
    \ += nums.get(i);\n        }\n\n        List<Integer> tmp = nums.stream().sorted(Comparator.reverseOrder()).collect(Collectors.toList());\n\
    \        System.out.println(tmp);\n        List<Integer> res = tmp.stream().map(num\
    \ -> sumOfDigits - num).collect(Collectors.toList());\n        System.out.println(res);\n\
    \        return res;", "        if(nums.size() == 0){\n            return nums;\n\
    \        }\n        ArrayList<Integer> resNums = new ArrayList<Integer>();\n \
    \       int sum = 0;\n        for( int i : nums ){\n            sum += i;\n  \
    \          resNums.add( i );\n        }\n        Collections.sort(resNums);\n\
    \        for( int i : resNums ){\n            if( sum != i ){\n              \
    \  Collections.swap(nums, i, sum-i);\n                sum -= i;\n            }\n\
    \        }\n        return nums;", "        if (nums == null || nums.isEmpty())\
    \ return nums;\n        ArrayList<Integer> numsSorted = new ArrayList<>();\n\n\
    \        // Sort the numbers in ascending order\n        for (int i = nums.size()-1;\
    \ i >= 0; i--) {\n            // Get sum of the digits in the number\n       \
    \     int sum = 0;\n            int sumOfDigits = 0;\n            for (int j =\
    \ i; j >= 0; j--) {\n                sum += nums.get(j);\n                sumOfDigits\
    \ += nums.get(j);\n            }\n            // Add number if the sum is equals\
    \ to its digit\n            if (sum == sumOfDigits) {\n                numsSorted.add(nums.get(i));\n\
    \            }\n        }\n        return numsSorted;", "        // write your\
    \ code here\n        return nums;", "        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        // Sort the nums\n        Collections.sort(nums);\n        // Check all\
    \ digits of every number and keep the sum\n        int[] digitSums = nums.stream().mapToInt(Integer::digits).boxed().toArray();\n\
    \        for (int i = 0; i < nums.size(); i++) {\n            // Keep the sum\
    \ till now\n            int sum = digitSums[i];\n            // Find the next\
    \ number whose sum matches.\n            for (int j = i; j < nums.size(); j++)\
    \ {\n                if (digitSums[j] == sum) {\n                    // Add their\
    \ index\n                    result.add(j);\n                    // Remove the\
    \ one with more sum\n                    digitSums[j] -= 1;\n                }\n\
    \            }\n        }\n        return result;", "        nums.sort(Comparator.comparingInt(x\
    \ -> Integer.sum(Arrays.stream(nums).mapToInt(Integer::intValue).toArray())));\n\
    \        return nums;"]
stop_tokens:
- "    }\n    //"
- "    }\n    p"
- "    }\n}"
- "\n    }\n"
