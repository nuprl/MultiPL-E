name: HumanEval_44_change_base
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Change numerical base of input number x to base.\n    //\
  \ return string representation after the conversion.\n    // base numbers are less\
  \ than 10.\n    // >>> change_base(8, 3)\n    // '22'\n    // >>> change_base(8,\
  \ 2)\n    // '1000'\n    // >>> change_base(7, 2)\n    // '111'\n    public static\
  \ String changeBase(int x, int base) {\n"
tests: "return \"\";\n    }\n    public static void main(String[] args) {\n    assert(changeBase((8),\
  \ (3)).equals((\"22\")));\n    assert(changeBase((9), (3)).equals((\"100\")));\n\
  \    assert(changeBase((234), (2)).equals((\"11101010\")));\n    assert(changeBase((16),\
  \ (2)).equals((\"10000\")));\n    assert(changeBase((8), (2)).equals((\"1000\")));\n\
  \    assert(changeBase((7), (2)).equals((\"111\")));\n    assert(changeBase((2),\
  \ (3)).equals((\"2\")));\n    assert(changeBase((3), (4)).equals((\"3\")));\n  \
  \  assert(changeBase((4), (5)).equals((\"4\")));\n    assert(changeBase((5), (6)).equals((\"\
  5\")));\n    assert(changeBase((6), (7)).equals((\"6\")));\n    assert(changeBase((7),\
  \ (8)).equals((\"7\")));\n    }\n\n}\n"
completions: ["        String res = Integer.toString(x, base);\n        return res.replace('0',\
    \ '-').replace('1', '+');", "        String y = Integer.toBinaryString(x);\n \
    \       int len = y.length();\n        String result = \"\";\n        for (int\
    \ i = 0; i < len; i++) {\n            if ((len - i - 1) % base == 0 && i != 0)\
    \ {\n                result += \"0\";\n            }\n            result += y.charAt(len\
    \ - i - 1);\n        }\n        return result;", "        String result = Integer.toString(x,\
    \ base);\n        return result;", "        StringBuilder sb = new StringBuilder();\n\
    \        while (x > 0) {\n            if (x % base == 0) {\n                sb.append((char)\
    \ ('0' + base - x % base));\n            }\n            x /= base;\n        }\n\
    \        return sb.toString();", "        int tmp = x;\n        StringBuilder\
    \ sb = new StringBuilder();\n        do {\n            tmp = tmp * base;\n   \
    \         int digit = (tmp % base);\n            sb.append(digit);\n        }\
    \ while (tmp != 0);\n        return sb.toString();", "        String res = \"\
    0\";\n        while (x>0) {\n            res = (char)(base*x % base+32);\n   \
    \         x /= base;\n        }\n        return x>0?res:0;", "        String s\
    \ = String.valueOf(x);\n        if (s.contains(\".\"))\n            throw new\
    \ IllegalArgumentException(\"The input number cannot contain a decimal.\");\n\
    \        if (base < 2 || base > 10)\n            throw new IllegalArgumentException(\"\
    The base must be a number between 0 and 10.\");\n        int n = Long.parseLong(s);\n\
    \        StringBuilder sb = new StringBuilder();\n        while (n != 0) {\n \
    \           int digit = n / base;\n            if (digit > 9)\n              \
    \  sb.append(digit / 10);\n            sb.append(digit % 10);\n            n =\
    \ n % base;\n        }\n        return sb.toString();", "        if (x < 0) {\n\
    \            return \"ERROR\";\n        }\n        if (base < 2) {\n         \
    \   return \"ERROR\";\n        }\n        if (base > 10) {\n            return\
    \ \"ERROR\";\n        }\n        char[] digits = new char[base];\n        String\
    \ str = \"\";\n        for (int i = 0; i < base; i++) {\n            int remain\
    \ = x % base;\n            str = (char) (x + remain + (i == 0 ? 0 : digits[i -\
    \ remain]));\n            x /= base;\n        }\n        return str;", "     \
    \   // TODO Auto-generated method stub\n        if (x < 10) {\n            return\
    \ \"0\" + x;\n        } else if (base == 0) {\n            return \"1\" + x;\n\
    \        } else if (x < base) {\n            int a = x;\n            int b = base;\n\
    \            String ans = \"\";\n            do {\n                a = (a * base)\
    \ + b;\n                b = a % base;\n                ans = a + ans;\n      \
    \      } while (b != 0);\n            return ans;\n        } else {\n        \
    \    int a = x;\n            int b = base;\n            String ans = \"\";\n \
    \           do {\n                a = (a * base) + b;\n                b = a %\
    \ base;\n                ans = a + ans;\n            } while (b != 0);\n     \
    \       return \"1\" + ans;\n        }", "        String[] array = { \"\", \"\
    1\", \"10\", \"100\", \"1000\", \"10000\" };\n        if (base < 1 || base > array.length)\n\
    \            return \"Error\";\n        String result = \"\";\n        int place\
    \ = 0;\n        while (x > 1) {\n            int tmp = x / base;\n           \
    \ result += array[place] + tmp;\n            x %= base;\n            place++;\n\
    \        }\n        return result;", "        String ans = \"\";\n        while(x>0)\
    \ {\n            String s = Integer.toString((x / base), base);\n            if(s.equals(\"\
    0\")) s = Integer.toString(x % base, base);\n            ans = s + ans;\n    \
    \        x = x % base;\n        }\n        return ans;", "        String s = Integer.toString(x);\n\
    \        String r = \"\";\n        while (!s.isEmpty()) {\n            int c =\
    \ s.charAt(0);\n            s = s.substring(1, s.length());\n            int q\
    \ = Character.getNumericValue(c);\n            int r = base * q;\n           \
    \ r += s;\n            s = Integer.toString(r);\n        }\n        return r;",
  "        int digit = x % base;\n        String[] strArr = new String[base];\n  \
    \      StringBuilder sb = new StringBuilder();\n        while (digit >= 10) {\n\
    \            strArr[digit % 10] = \"0\";\n            digit = digit / 10;\n  \
    \      }\n        strArr[digit] = \"0\";\n        sb.append(strArr);\n       \
    \ return sb.toString();", "        StringBuilder sb = new StringBuilder();\n \
    \       BigInteger big = new BigInteger(Integer.toString(x), base);\n        String\
    \ hex = big.toString(16);\n        int offset = hex.length() / 2 - 1;\n      \
    \  if (offset < 0) offset = 0;\n        String result = (hex.substring(offset)\
    \ + hex.substring(0, offset)).toLowerCase();\n        return sb.append(result).reverse().toString();",
  "        long result = x;\n        String s = Long.toString(result);\n        while\
    \ ((s.length() % base) != 0) {\n            s = \"0\" + s;\n        }\n      \
    \  while ((s.length() / base) != x) {\n            s = \"0\" + s;\n        }\n\
    \        return s;", '        return String.valueOf(Integer.parseInt(String.valueOf(x),
    base));', "        final int mod = (int) Math.pow(base, x);\n        return Integer.toString(mod);",
  "        String s = Integer.toString(x);\n        String resultStr = \"\";\n   \
    \     for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n\
    \            if (c >= '0' && c <= '9') {\n                resultStr += (c - '0')\
    \ + \"\";\n            } else {\n                resultStr += (c - 'A' + base);\n\
    \            }\n        }\n        return resultStr;", "        StringBuilder\
    \ builder = new StringBuilder();\n        while(x>0) {\n            builder.append(x\
    \ % base);\n            x = x / base;\n        }\n        return builder.reverse().toString();",
  "        BigInteger inputNum = new BigInteger(Long.toString(x), base);\n       \
    \ StringBuilder sb = new StringBuilder();\n        for (int i = inputNum.intValue()\
    \ % base; i != 0; i = (i / base).intValue() % base) {\n            sb.append(String.valueOf((i\
    \ / base).intValue()));\n        }\n        return sb.toString();", "        StringBuilder\
    \ sb = new StringBuilder(Integer.toString(x));\n        for (int i = sb.length()\
    \ - 1; i >= 0; i--) {\n            if (sb.charAt(i) >= '0' && sb.charAt(i) <=\
    \ '9') {\n                if (sb.charAt(i) != '0') {\n                    String\
    \ firstDigit = sb.substring(0, i + 1);\n                    String nextDigit =\
    \ sb.substring(i + 1);\n                    int newDigit = Integer.parseInt(firstDigit);\n\
    \                    newDigit *= base;\n                    newDigit += Integer.parseInt(nextDigit);\n\
    \                    sb.setCharAt(i, (char) newDigit);\n                } else\
    \ {\n                    sb.setCharAt(i, '0');\n                }\n          \
    \  }\n        }\n        return sb.toString();", "        if (x < 0 || base <\
    \ 0 || base > 9) {\n            throw new IllegalArgumentException();\n      \
    \  }\n\n        String ret = \"\";\n        if (base == 10) {\n            ret\
    \ = Integer.toString(Math.pow(x, 3));\n        } else if (base == 11) {\n    \
    \        ret = Integer.toString(Math.pow(x, 2));\n        } else if (base == 12)\
    \ {\n            ret = Integer.toString(Math.pow(x, 1));\n        } else if (base\
    \ == 13) {\n            ret = Integer.toString(Math.pow(x, 0));\n        } else\
    \ {\n            double pow = Math.pow(x, 1 / base);\n            String val =\
    \ String.valueOf((int)Math.pow(base, 1 / base));\n            String ret2 = \"\
    \";\n            while (val.length() > 0) {\n                ret2 += val.charAt(0);\n\
    \                val = val.substring(1);\n            }\n            ret = ret2;\n\
    \        }\n        return ret;", "        String result;\n        BigInteger\
    \ result = new BigInteger(x, base);\n        String str = result.toString();\n\
    \        result = new BigInteger(str);\n        return str;", "        BigInteger\
    \ xx = new BigInteger(String.valueOf(x));\n        BigInteger res = xx.divide(new\
    \ BigInteger(\"\" + base));\n        StringBuilder sb = new StringBuilder();\n\
    \        while (!res.equals(new BigInteger(\"0\"))) {\n            sb.append(res.mod(new\
    \ BigInteger(\"10\")));\n            res = res.divide(new BigInteger(\"10\"));\n\
    \        }\n        return sb.toString();", "        if (base < 10) return Integer.toString(x);\n\
    \        int bx = x;\n        int power = 1;\n        while (bx >= base) {\n \
    \           power *= base;\n            bx /= base;\n        }\n        long res\
    \ = bx;\n        while (power-- > 0) res /= base;\n        long digits = res /\
    \ Math.pow(base, (res - digits * base));\n        return (digits) + \"\";", '        return
    Integer.toString(x, base);', "        long numberToConvert = x;\n        long\
    \ power = 1;\n        StringBuilder sb = new StringBuilder();\n        while (numberToConvert\
    \ > 0) {\n            long remainder = numberToConvert % base;\n            numberToConvert\
    \ = numberToConvert / base;\n            sb.append((char)(remainder+48));\n  \
    \          power = power * base;\n        }\n        System.out.println(sb.toString());\n\
    \        return sb.toString();", "        if (base < 2)\n            return Integer.toString(x);\n\
    \        int xString = \"\";\n        int temp = x;\n        while (temp > 0)\
    \ {\n            xString = (int)Math.pow(base, temp % base) + xString;\n     \
    \       temp /= base;\n        }\n        return xString;", "        if (x ==\
    \ 0) return \"0\";\n        if (x < 0 || base < 0 || base > 10) return \"\";\n\
    \        \n        String result = \"\";\n        while (x != 0) {\n         \
    \   String s = Integer.toString(x % base);\n            int i = s.length() - 1;\n\
    \            while (i >= 0) {\n                s += \"0\";\n                i\
    \ -= 1;\n            }\n            result += s;\n            x /= base;\n   \
    \     }\n        return result;", "        int digit = x;\n        StringBuilder\
    \ ret = new StringBuilder();\n        while (digit > 0) {\n            ret.append(digit\
    \ % base);\n            digit = digit / base;\n        }\n        return ret.reverse().toString();",
  "        StringBuilder sb = new StringBuilder();\n        while (x > 0) {\n    \
    \        int temp = x % base;\n            while (temp != 0) {\n             \
    \   sb.append((char) ('0' + temp % base));\n                temp = temp / base;\n\
    \            }\n            x = x / base;\n        }\n        return sb.toString();",
  "        if (x < 10) {\n            return Integer.toString(x);\n        }\n   \
    \     int xRemainder = x%base;\n        int baseRemainder = base-x;\n        String\
    \ s = Integer.toString(baseRemainder);\n        s = Integer.toString(baseRemainder)\
    \ + s;\n        s = Integer.toString(xRemainder) + s;\n        return s;", " \
    \       if ((base == 1) || (x == 0)) {\n            return Integer.toString(x);\n\
    \        }\n        int quotient = x / base;\n        String rem = Integer.toString(x\
    \ % base);\n        return changeBase(quotient, base) + rem;", "        String\
    \ res = \"\" + x;\n        int remainder = res.length() - 1;\n        while (base\
    \ > 1) {\n            // Convert to a base to which we can divide the original\
    \ number.\n            res = (Integer.parseInt(res) / base) + \"\";\n        \
    \    int decimal = Integer.parseInt(res.substring(res.length() - 1));\n      \
    \      if (decimal % base != 0) {\n                // Only take integers after\
    \ the decimal point\n                // and make sure we only take whole numbers.\n\
    \                res = \"0\" + res;\n            }\n            base = base /\
    \ 10;\n        }\n        return res;", "        if (base == 10) return Integer.toString(x);\n\
    \        return changeBase(x, (10 * base) + x);", "        String str = \"\";\n\
    \        while (x > 0)\n        {\n            str = String.valueOf(x % base)\
    \ + str;\n            x /= base;\n        }\n        if (str.length() > 1)\n \
    \           str = str.substring(0, str.length() - 1);\n        return str;", " \
    \       long temp = Long.parseLong(String.valueOf(x)) + 10L;\n        temp = temp\
    \ * base;\n        temp = temp / 10;\n        return String.valueOf(temp);", " \
    \       // convert from base 10 to base 2 string\n        String result = \"\"\
    ;\n        int remainder;\n        while (x >= base) {\n            remainder\
    \ = x % base;\n            result += remainder + \"\";\n            x /= base;\n\
    \        }\n        result += x + \"\";\n        return result;", "        long\
    \ temp = Math.pow(base, x);\n        return Long.toString(temp);", "        String\
    \ result = Integer.toBinaryString(x);\n        while(result.length() < base) {\n\
    \            result = '0' + result;\n        }\n        return result;", "   \
    \     if (x >= 10) {\n            int r = x % 10;\n            x /= 10;\n    \
    \        int q = x / 10;\n            x %= 10;\n            String s = Integer.toString(x)\
    \ + Integer.toString(r) + Integer.toString(q);\n            return s;\n      \
    \  }\n        return Integer.toString(x);", "        String s = Integer.toString(x,\
    \ base);\n        while (s.charAt(s.length()-1) == '0') {\n            s = s.substring(0,\
    \ s.length()-1);\n        }\n        return s;", "        char[] digits = Integer.toString(x).toCharArray();\n\
    \        StringBuilder sb = new StringBuilder();\n        for (char digit : digits)\
    \ {\n            int remainder = digit - '0';\n            int converted = remainder\
    \ * base;\n            if (converted < 10) {\n                sb.append('0');\n\
    \            }\n            sb.append(String.valueOf(converted));\n        }\n\
    \        return sb.toString();", '        return String.valueOf((long)Math.pow(base,
    x));', "        String res = Integer.toString(x, base);\n        // Return new\
    \ number in base base if input is valid.\n        return res.length() < base ?\
    \ changeBase(x, base) : res;", "        long temp = 0;\n        String str = \"\
    \";\n        // Convert x to base 10\n        while (x > 0)\n        {\n     \
    \       temp = x % base;\n            str = temp + str;\n            x = x / base;\n\
    \        }\n        // Convert str to number again\n        str = str + str;\n\
    \        if (str.length() > 10)\n            str = str.substring(0, 10);\n   \
    \     else\n            str = str.substring(0, str.length());\n        return\
    \ str;", "        String res = \"\";\n        while (x>0) {\n            int mod\
    \ = x % base;\n            res += (mod == 0) ? Integer.toString(base) : Integer.toString(base)\
    \ + Integer.toString(mod);\n            x = x / base;\n        }\n        return\
    \ res;", "        StringBuilder builder = new StringBuilder();\n        int temp\
    \ = x;\n        do {\n            temp = (temp * base) + 10;\n            builder.append((char)temp);\n\
    \        } while (temp > 0);\n        return builder.toString();", "        int\
    \ remainder;\n        int n = Math.abs(x);\n        int result = 0;\n\n      \
    \  if (base == 0) {\n            result = (int) n;\n        } else {\n       \
    \     remainder = 0;\n            while (n > 0) {\n                remainder *=\
    \ base;\n                result += remainder / n;\n                remainder %=\
    \ n;\n                n--;\n            }\n        }\n        return Integer.toString(result);",
  "        int xx = x;\n        String str = Integer.toString(xx, base);\n       \
    \ str = str.replace('0', ' ');\n        str = str.replace('1', 'b');\n       \
    \ str = str.replace('2', '0');\n        str = str.replace('3', '0');\n       \
    \ str = str.replace('4', '0');\n        str = str.replace('5', '0');\n       \
    \ str = str.replace('6', '0');\n        str = str.replace('7', '0');\n       \
    \ str = str.replace('8', '0');\n        str = str.replace('9', '0');\n       \
    \ str = str.replace(' ', 'b');\n        str = str.replace('a', '0');\n       \
    \ str = str.replace('b', '1');\n        str = str.replace('c', '0');\n       \
    \ str = str.replace('d', '0');\n        str = str.replace('e', '0');\n       \
    \ str = str.replace('f', '0');\n        str = str.replace('g', '0');\n       \
    \ str = str.replace('h', '0');\n        str = str.replace('i', '0');\n       \
    \ str = str.replace('j', '0');\n        str = str.replace('k', '0');\n       \
    \ str = str.replace('l', '0');\n        str = str.replace('m', '0');\n       \
    \ str = str.replace('n', '0');\n        str = str.replace('o', '0');\n       \
    \ str = str.replace('p', '0');\n        str = str.replace('q', '0');\n       \
    \ str = str.replace('r', '0');\n        str = str.replace('s', '0');\n       \
    \ str = str.replace('t', '0');\n        str = str.replace('u', '0');\n       \
    \ str = str.replace('v', '0');\n        str = str.replace('w', '0');\n       \
    \ str = str.replace('x', '0');\n        str = str.replace('y', '0');\n       \
    \ str = str.replace('z', '0');\n        return str;", "        String num = Integer.toString(x,\
    \ base);\n        return num;", "        BigInteger res = BigInteger.valueOf(x);\n\
    \        res = res.shiftLeft(base).add(BigInteger.ONE);\n        return res.toString();",
  "        List<Integer> nums = Arrays.stream(new int[]{x})\n                .map(x\
    \ -> Math.pow(x, base))\n                .sorted()\n                .collect(toList());\n\
    \n        String s = nums.toString();\n        int l = s.length();\n        if\
    \ (l == 1) {\n            return s;\n        }\n\n        StringBuilder sb = new\
    \ StringBuilder();\n        for (int i = 0; i < l / 2; i++) {\n            sb.append(s.charAt(i));\n\
    \        }\n        sb.append(s.charAt(l / 2));\n\n        return s.equals(sb.toString())\
    \ ? \"0\" : sb.toString();", "        String result = \"\";\n        while (x\
    \ >= base) {\n            x = x / base;\n            result += Integer.toString(x);\n\
    \        }\n        return result;", "        int i = 1;\n        int baseNumber\
    \ = 1;\n        while (baseNumber < base) {\n            int temp = x;\n     \
    \       x *= base;\n            i += temp;\n            baseNumber++;\n      \
    \  }\n        i = i - 1;\n        int baseString = i;\n        String str = Integer.toBinaryString(baseString);\n\
    \        int length = str.length();\n        int lastDigit = length - 1;\n   \
    \     str = str.substring(lastDigit);\n        while (baseString > 0) {\n    \
    \        str = Integer.toBinaryString(baseString % 2);\n            baseString\
    \ = baseString / 2;\n            str = Integer.toString(Integer.parseInt(str,\
    \ 2) + 1);\n        }\n        str = str.substring(0, lastDigit);\n        return\
    \ str;", "        return String.format(\"%1$\" + base + \"s\", x).replace(' ',\
    \ '0');", '        return Integer.toString(x, base);', "        if (base > 0 &&\
    \ base < 10) {\n            String newBase = \"\";\n            for (int digit\
    \ = 0; digit < base; digit++) {\n                newBase = String.valueOf(x %\
    \ base) + newBase;\n                x = x / base;\n            }\n           \
    \ return newBase;\n        } else {\n            return \"Invalid base!\";\n \
    \       }", "        int n = Integer.valueOf(x);\n        int k = Integer.valueOf(base);\n\
    \        int temp = n;\n        int temp2 = 0;\n        do {\n            temp\
    \ = temp / k;\n            temp2 = temp * base;\n        } while (temp >= 1);\n\
    \        return temp2.toString();", "        BigInteger result = BigInteger.valueOf(base).pow(x).toBigInteger();\n\
    \        return result.mod(BigInteger.valueOf(base)).mod(BigInteger.valueOf(base)).mod(BigInteger.valueOf(base)).mod(BigInteger.valueOf(base)).mod(BigInteger.valueOf(base)).mod(BigInteger.valueOf(base)).mod(BigInteger.valueOf(base)).mod(BigInteger.valueOf(base)).mod(BigInteger.valueOf(base)).mod(BigInteger.valueOf(base)).mod(BigInteger.valueOf(base)).mod(BigInteger.valueOf(base)).mod(BigInteger.valueOf(base)).mod(BigInteger.valueOf(base)).mod(BigInteger.valueOf(base)).mod(BigInteger.valueOf(base)).mod(BigInteger.valueOf(base)).mod(BigInteger.valueOf(base)).mod(BigInteger.valueOf(base)).mod(BigInteger.valueOf(base)).mod(BigInteger.valueOf(base)).mod(BigInteger.valueOf(base)).mod(BigInteger.valueOf(base)).mod(BigInteger.valueOf(base)).mod(BigInteger.valueOf(base)).mod(BigInteger.valueOf(base)).mod(BigInteger.valueOf(base)).mod(BigInteger.valueOf(base)).mod(BigInteger.valueOf(base)).mod(BigInteger.valueOf(base)).mod(BigInteger.valueOf(base)).mod(BigInteger.valueOf(base)).mod(BigInteger.valueOf(base)).mod(BigInteger.valueOf(base)).mod(BigInteger.valueOf(base)).mod(BigInteger.valueOf(base)).mod(BigInteger.valueOf(base)).mod(BigInteger.valueOf(base)).mod(BigInteger.valueOf(base)).mod(BigInteger.valueOf(base)).mod(BigInteger.valueOf(base)).mod(BigInteger.valueOf(base)).mod(BigInteger.valueOf(base)).mod(BigInteger.valueOf(base)).mod(BigInteger.valueOf(base)).mod(BigInteger.valueOf(base)).mod(BigInteger.valueOf(base)).mod(BigInteger.valueOf(base)).mod(BigInteger.valueOf(base)).mod(BigInteger.valueOf(base)).mod(BigInteger.valueOf(base)).mod(BigInteger.valueOf(base)).mod(BigInteger.valueOf(base)).mod(BigInteger.valueOf(base)).mod(BigInteger.valueOf(base)).mod(BigInteger.valueOf(base)).mod(BigInteger.valueOf(base)).mod(BigInteger.valueOf(base)).mod(BigInteger.valueOf(base)).mod(BigInteger.valueOf(base)).mod(BigInteger.valueOf(base)).mod(BigInteger.valueOf(base)).mod(BigInteger.valueOf(base)).mod(BigInteger.valueOf(base)).mod(BigInteger.valueOf(base)).mod(BigInteger.valueOf(base)).mod(BigInteger.valueOf(base)).mod(BigInteger.valueOf(base)).mod(BigInteger.valueOf(base)).mod(BigInteger.valueOf(base)).mod(BigInteger.",
  '        return Integer.toString((long) x, base);', "        int convert = x;\n\
    \        convert = (int) Math.pow(base, convert);\n        int remainder = (int)\
    \ Math.pow(10, (base - 1));\n        int convert2 = (int) Math.pow(10, base);\n\
    \        String answer = \"\";\n        while ((convert % 10) != 0) {\n      \
    \      answer = answer + \"0\";\n            convert = convert / 10;\n       \
    \ }\n        answer = answer + ((int) convert) + \"\" + remainder + convert2;\n\
    \        return answer;", "        int temp = 0;\n        long num = 0;\n    \
    \    String new_num = \"\";\n        int[] arr = {1, 10, 100, 1000, 10000, 100000,\
    \ 1000000, 10000000, 100000000, 1000000000};\n        int remainder = 0;\n   \
    \     switch(base){\n        case 3:\n            while(temp<10){\n          \
    \      num = (int) (x / arr[temp]);\n                if(num >= 10){\n        \
    \            int temp2 = (int)(num % 10);\n                    new_num += temp2;\n\
    \                    num = num / 10;\n                }else{\n               \
    \     new_num += num;\n                    break;\n                }\n       \
    \         temp++;\n            }\n            break;\n        case 2:\n      \
    \      while(temp<10){\n                num = (int)(x / arr[temp]);\n        \
    \        if(num >= 10){\n                    int temp2 = (int)(num % 10);\n  \
    \                  new_num += temp2;\n                    num = num / 10;\n  \
    \              }else{\n                    new_num += num;\n                 \
    \   break;\n                }\n                temp++;\n            }\n      \
    \      break;\n        case 1:\n            while(temp<10){\n                num\
    \ = (int)(x / arr[temp]);\n                if(num >= 10){\n                  \
    \  int temp2 = (int)(num % 10);\n                    new_num += temp2;\n     \
    \               num = num / 10;\n                }else{\n                    new_num\
    \ += num;\n                    break;\n                }\n                temp++;\n\
    \            }\n            break;\n        }\n        return new_num;", "   \
    \     int temp = 0;\n        StringBuilder sb = new StringBuilder();\n       \
    \ while (x > 0) {\n            temp = x % base;\n            sb.append(String.valueOf(temp));\n\
    \            x = x / base;\n        }\n        return sb.toString();", "     \
    \   int n = x;\n        int temp;\n        int rem;\n        while (n != 0) {\n\
    \            temp = n % base;\n            rem = n / base;\n            n = temp;\n\
    \            if (rem != 0) {\n                return String.valueOf(base) + changeBase(rem,\
    \ base);\n            }\n        }\n        return \"\";", "        if (x > 0\
    \ && x < 10) {\n            String a = String.valueOf(x);\n            int remainder\
    \ = a.length();\n            int digit = 0;\n            String result = \"\"\
    ;\n            while (remainder > 0) {\n                digit = Integer.parseInt(a.substring(remainder));\n\
    \                String remainderResult = Integer.toString(digit);\n         \
    \       result = remainderResult;\n                a = a.substring(0, remainder);\n\
    \                remainder = remainder - 1;\n            }\n            return\
    \ result;\n        }\n        return \"Invalid Input\";", "        double d =\
    \ (double) x;\n        double n = Math.pow(base, d);\n        return \"\" + new\
    \ Double(n);", "        StringBuilder sb = new StringBuilder();\n        while\
    \ (x > 0) {\n            int digit = x / base;\n            sb.append(digit);\n\
    \            x = x - digit * base;\n        }\n        return sb.toString();",
  "        StringBuilder result = new StringBuilder(String.valueOf(x));\n        String\
    \ resultStr = result.toString();\n        final int baseDigitLength = String.valueOf(base).length();\n\
    \        // find out the number of digits of the base\n        // and insert leading\
    \ zeros to the string if needed\n        for (int i = 0, len = resultStr.length();\
    \ i < len; i++) {\n            char ch = resultStr.charAt(i);\n            if\
    \ (ch < '0' || ch > '9') {\n                String leadingZeros = String.format(\"\
    %0\" + baseDigitLength + \"d\", x % base);\n                resultStr = leadingZeros\
    \ + resultStr.substring(i + 1);\n                break;\n            }\n     \
    \   }\n        return resultStr;", "        if (base < 1 || base > 10) {\n   \
    \         return \"Error\";\n        }\n        if (x < base) {\n            return\
    \ \"Error\";\n        }\n        if (x <= 0) {\n            return \"Error\";\n\
    \        }\n        int rem = x % base;\n        int num = x;\n        while (base\
    \ > 1) {\n            if (num >= base) {\n                num = num / base;\n\
    \            }\n            base = base * 10;\n        }\n        return String.valueOf(num)\
    \ + String.valueOf(rem);", "        BigInteger result = x;\n        BigInteger\
    \ remainder = null;\n\n        for (int i = base; i >= 0; i--) {\n           \
    \ remainder = result.mod(BigInteger.valueOf(i));\n            result = (remainder.multiply(BigInteger.valueOf(base)).divide(result));\n\
    \        }\n\n        return result.toString();", "        int decimal = x;\n\
    \        int result = 1;\n        while (decimal > 0) {\n            decimal /=\
    \ base;\n            result++;\n        }\n        return String.valueOf(result)\
    \ + String.valueOf(x - decimal);", "        if (base > 10) {\n            throw\
    \ new IllegalArgumentException(\"base should be less than 10.\");\n        }\n\
    \        int temp = x;\n        x = x;\n        StringBuilder sb = new StringBuilder();\n\
    \        while (temp > 0) {\n            int digit = temp % base;\n          \
    \  sb.append(digit);\n            temp /= base;\n        }\n        return sb.toString();",
  "        int digits = Math.max(Integer.toString(x).length(), Integer.toString(base).length());\n\
    \        String result = \"\";\n        while (x/base > 0) {\n            result\
    \ = (x/base) + result;\n            x = (x/base)*base;\n        }\n        while\
    \ (x/base < 0) {\n            result = (x/base) + result;\n            x = (x/base)*base;\n\
    \        }\n        if (digits+Integer.toString(x).length()>result.length())\n\
    \            result += new StringBuilder(Integer.toString(x)).insert(digits-result.length(),\
    \ '0').toString();\n        return result;", "        int x_power = 1;\n     \
    \   String result_string = \"\";\n        while (x > 0) {\n            int remainder\
    \ = x % base;\n            x = x / base;\n            result_string = Integer.toString(remainder)\
    \ + result_string;\n            x_power = x_power * base;\n        }\n       \
    \ return result_string;", "        // Write your logic here\n        return String.valueOf(x);",
  "        int n = Integer.parseInt(String.valueOf(Math.pow(base, x)));\n        return\
    \ String.valueOf(n);", "        char ch = (char) ('0' + x % base);\n        return\
    \ Integer.toString(x % base) + ch;", "        String binary = Integer.toBinaryString(x);\n\
    \        return binary.substring(binary.length() - base) + Integer.toString(base);",
  "        return String.valueOf(x).replace(String.valueOf(x),\n                String.valueOf(x).replaceAll(\"\
    \\\\B(?<=.)\", \"\").replaceFirst(\"^\\\\d\", \"\"))\n                .replaceFirst(\"\
    ^\" + String.valueOf(base) + \"$\", \"\");", "        BigInteger input = new BigInteger(Integer.toString(x),\
    \ base);\n        return input.toString();", "        StringBuilder sb = new StringBuilder(String.valueOf(x));\n\
    \        String[] digits = sb.toString().split(\"\");\n        for (int i = digits.length\
    \ - 1; i >= 0; i--) {\n            int d = Integer.parseInt(digits[i]);\n    \
    \        digits[i] = String.valueOf(d / base);\n        }\n        return sb.append(digits).toString();",
  "        String numStr = \"\" + x;\n        int len = numStr.length();\n       \
    \ int newBase = base > 0 ? base : 1;\n        char oldBase = numStr.charAt(0);\n\
    \        char newChar;\n        String newNumStr = \"\"; // New number string\n\
    \        StringBuilder oldNumStr = new StringBuilder(numStr);\n        // Change\
    \ first digit of number\n        // and remove it from the old number string.\n\
    \        // Then add this new number to the new number string.\n        // Keep\
    \ doing this until the old number string is empty.\n        do {\n           \
    \ int digit = oldNumStr.charAt(oldNumStr.indexOf(oldBase) - 1);\n            newNumStr\
    \ += digit;\n            oldNumStr.replace(oldNumStr.indexOf(oldBase), 1);\n \
    \       } while (oldNumStr.length() > 0);\n        // Add new number to the new\
    \ number string.\n        newNumStr += newChar;\n        // If new number string\
    \ is same as the old number string,\n        // then we add this new number to\
    \ the new string.\n        // Otherwise, add the new number to the old string\
    \ and\n        // start over with the new number.\n        if (newNumStr.length()\
    \ == numStr.length()) {\n            return newNumStr;\n        }\n        oldBase\
    \ = oldNumStr.charAt(0);\n        newNumStr += newChar;\n        // If new number\
    \ string is same as the old number string,\n        // then we add this new number\
    \ to the new string.\n        // Otherwise, add the new number to the old string\
    \ and\n        // start over with the new number.\n        if (newNumStr.length()\
    \ == numStr.length()) {\n            return newNumStr;\n        }\n        oldNumStr.delete(0,\
    \ 1);\n        newNumStr += newChar;\n        // If new number string is same\
    \ as the old number string,\n        // then we add this new number to the new\
    \ string.\n        // Otherwise, add the new number to the old string and\n  \
    \      // start over with the new number.\n        if (newNumStr.length() == numStr.length())\
    \ {\n            return newNumStr;\n        }\n        // Repeat until all digits\
    \ are converted\n        while (oldNumStr.length() > 1) {\n            oldNumStr.delete(0,\
    \ 1);\n            newNumStr += newChar;\n            if (newNumStr.length() ==\
    \ numStr.length()) {\n                return newNumStr;\n            }\n     \
    \   }\n        // Add first character to new number string\n        newNumStr\
    \ += newChar;\n        return newNumStr;", "        char digits[] = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    ;\n        int len = (int) (Math.log10(Integer.MAX_VALUE)) + 1;\n        char[]\
    \ str = new char[len];\n        int power = 1;\n        int res = 0;\n       \
    \ do {\n            res = (x % base) * power;\n            x /= base;\n      \
    \      str[len - (int)Math.log10(power) - 2] = digits[res];\n            power\
    \ *= base;\n        } while (x != 0);\n\n        return String.valueOf(str);",
  "        // Complete this function.\n        // Hints:\n        // * use Math.pow()\
    \ to calculate the power of base\n        // * use Integer.parseInt() to convert\
    \ a number to String\n        // * use String.format() to format the string.",
  "        if (base < 1 || base > 10) {\n            throw new RuntimeException(\"\
    Base must be between 1 and 10\");\n        }\n        if (x < 0) {\n         \
    \   throw new RuntimeException(\"x must be a non-negative integer\");\n      \
    \  }\n        int res = 1;\n        int p = x;\n        while (p != 0) {\n   \
    \         res *= base;\n            res %= p;\n            p /= base;\n      \
    \  }\n        return Integer.toString(res);", "        if (base > 9 || base <\
    \ 1)\n            throw new IllegalArgumentException(\n                \"Base\
    \ must be between 1 & 9.\");\n        if (base == 0)\n            throw new IllegalArgumentException(\n\
    \                \"Base must not be zero. Input base is invalid.\");\n       \
    \ int a = x;\n        while (a > 9) {\n            a = a / 10;\n        }\n  \
    \      int b = x;\n        while (b > 9) {\n            b = b / 10;\n        }\n\
    \        if (base == 1)\n            return \"\" + x;\n        if (base == 10)\n\
    \            return \"\" + a;\n        StringBuilder newString = new StringBuilder(a\
    \ + \"\" + b);\n        if (a > 1)\n            newString.insert(a - 1, base +\
    \ \"0\");\n        if (b > 1)\n            newString.insert(newString.length(),\
    \ base + \"0\");\n        return newString.toString();", '        return String.valueOf(Integer.parseInt(String.valueOf(x),
    base));', '        return x.toString(base);', "        int digits = (int) Math.log10(x);\n\
    \        int mod = 10;\n        int res = 0;\n        int power = 1;\n       \
    \ long temp;\n\n        if (digits <= 0) {\n            return \"0\";\n      \
    \  }\n\n        while (digits > base) {\n            power = power * 10;\n   \
    \         digits = digits - base;\n            mod = mod / 10;\n        }\n\n\
    \        if (digits > 0) {\n            temp = x / power;\n            while (temp\
    \ > 0) {\n                res = res * base + mod;\n                temp = temp\
    \ / power;\n            }\n        }\n\n        return String.valueOf(res);",
  "        if (base < 0 || base > 10) return \"invalid base number!\";\n        int\
    \ result = 0;\n        while (x != 0) {\n            result = (result * base)\
    \ + x % base;\n            x /= base;\n        }\n        return Integer.toString(result);",
  "        char[] digits = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9' };\n\
    \        StringBuilder s = new StringBuilder();\n        do {\n            int\
    \ d = x % base;\n            x /= base;\n            if (d > 0) {\n          \
    \      s.append(digits[d]);\n            } else {\n                s.append(\"\
    0\");\n            }\n        } while (x != 0);\n        return s.reverse().toString();",
  "        x %= base;\n        double result = x / base;\n        String output =\
    \ Integer.toString(result);\n        x %= base;\n        result += x;\n      \
    \  output += Integer.toString(result);\n        return output;", '        return
    String.valueOf(x/Math.pow(base, base));', "        int[] decimal = DecimalFormatSymbols.getInstance().getDecimalSeparator().chars().mapToObj(c\
    \ -> (char) c).collect(Collectors.toList());\n        int[] digits = DecimalFormatSymbols.getInstance().getGroupingSeparator().chars().mapToObj(c\
    \ -> (char) c).collect(Collectors.toList());\n        List<Integer> digitalBase\
    \ = IntStream.rangeClosed(1, base).filter(n -> n <= decimal.size()).map(n -> (int)\
    \ (decimal.indexOf(n) + 1)).collect(Collectors.toList());\n        List<Integer>\
    \ tens = IntStream.rangeClosed(0, 10).filter(n -> n <= digits.size()).map(n ->\
    \ (int) (digits.indexOf(n) + 1)).collect(Collectors.toList());\n        List<String>\
    \ tensBase = IntStream.rangeClosed(1, base).filter(n -> n <= tens.size()).map(n\
    \ -> String.valueOf(tens.get(n))).collect(Collectors.toList());\n        int index\
    \ = digitalBase.indexOf(x);\n        if (index == -1) return \"0\";\n        List<Integer>\
    \ digitsBase = new ArrayList<>(digitalBase);\n        digitsBase.remove(index);\n\
    \        return IntStream.rangeClosed(1, base).map(n -> String.valueOf(digitsBase.get(n\
    \ - 1))).collect(Collectors.joining(\"\"));", "        final int RADIX = base;\n\
    \        final int MAXDIGITS = RADIX;\n        final String FORMAT = \"%\" + MAXDIGITS\
    \ + \"d\";\n        int n = Long.valueOf(FORMAT).intValue();\n        long q =\
    \ x / n;\n        x -= q * n;\n        String r = FORMAT.format(x);\n        while\
    \ (x >= RADIX) {\n            long m = x / RADIX;\n            x -= m * RADIX;\n\
    \            r = FORMAT.format(x) + r;\n        }\n        r = r + FORMAT.format(x);\n\
    \        while (x < 0) {\n            r = r + FORMAT.format(-x);\n           \
    \ x += n;\n        }\n        return r;", "        if (x < 10) {\n           \
    \ // change base of x to base\n            String x_str = Integer.toString(x,\
    \ base);\n            // add zeros until length is base.\n            return x_str.length()\
    \ == base ? x_str :\n                    x_str.length() < base ? x_str + \"0\"\
    \ :\n                    x_str + \"00\";\n        }\n        // change base of\
    \ x to base\n        String x_str = Integer.toString(x, base);\n        // add\
    \ zeros until length is base.\n        while (x_str.length() < base) {\n     \
    \       x_str = \"0\" + x_str;\n        }\n        return x_str;", "        if\
    \ (base < 0 || base > 10) {\n            throw new RuntimeException(\"Invalid\
    \ base\");\n        }\n        String result = Integer.toString(x, base);\n  \
    \      if (result.length() < base) {\n            result = new StringBuilder(result).reverse().toString();\n\
    \        }\n        return result;", "        int remainder, remainder1, remainder2,\
    \ remainder3;\n\n        remainder1 = x % base;\n        remainder2 = x % base;\n\
    \        remainder3 = x % base;\n        remainder = (remainder1 * base) + (remainder2\
    \ * base * base) + (remainder3 * base * base * base);\n        if (remainder ==\
    \ 0 || remainder >= base - 1)\n            return Integer.toString(x);\n     \
    \   return changeBase(remainder, base) + Integer.toString(x % base);", "     \
    \   int res = Integer.parseInt(new BigInteger(String.valueOf(x)).\n          \
    \      toString(base).toUpperCase());\n        return Integer.toString(res);",
  "        boolean isNegative = false;\n        String result;\n\n        if (x <\
    \ 0) {\n            isNegative = true;\n            x = Math.abs(x);\n       \
    \ }\n\n        if (x >= base) {\n            String str = Integer.toString(x,\
    \ base);\n            result = (isNegative ? \"-\" : \"\") + str;\n        } else\
    \ {\n            result = Integer.toString(x, base);\n        }\n\n        return\
    \ result;", "        if (base < 2 || base > 36) {\n            System.out.println(\"\
    Error: base must be between 2 and 36\");\n            System.exit(0);\n      \
    \  }\n        String result = \"\";\n        int n = x;\n        while (n > 0)\
    \ {\n            int remBase = n % base;\n            if (remBase == 0) {\n  \
    \              result += String.valueOf(remBase);\n            } else {\n    \
    \            result += (String.valueOf(remBase) + \"\");\n            }\n    \
    \        n /= base;\n        }\n        result += \"0\";\n        return result;",
  "        int tens = x / base;\n        int rem = x % base;\n        if (rem == 0)\
    \ {\n            return Integer.toString(tens);\n        } else {\n          \
    \  int tensNew = tens * base;\n            String output = Integer.toString(tensNew);\n\
    \            while (true) {\n                String temp = Integer.toString(tensNew\
    \ / base);\n                if (Integer.parseInt(temp) < base) {\n           \
    \         tensNew -= base * Integer.parseInt(temp);\n                    output\
    \ += temp;\n                } else {\n                    break;\n           \
    \     }\n            }\n            return output;\n        }", "        int x_base\
    \ = x;\n        if (base > 0 && base < 11) {\n            x_base = x / base;\n\
    \            int rest = x % base;\n            String r = \"\";\n            if\
    \ (x_base != 0) {\n                r = changeBase(x_base, rest) + base;\n    \
    \        } else {\n                r = rest;\n            }\n            return\
    \ r;\n        } else if (base == 11 && x_base != 0) {\n            return \"1\"\
    ;\n        } else {\n            String bases = \"\";\n            while (base\
    \ > 9) {\n                bases = bases.concat(changeBase(base, 10));\n      \
    \          base = base * 10;\n            }\n            bases = bases.concat(changeBase(base,\
    \ 10));\n            return bases.concat(x);\n        }", "        // if x is\
    \ a string\n        if (x instanceof String) {\n            // convert string\
    \ to integer\n            int a = Integer.parseInt(x);\n            // convert\
    \ integer to a number with base base\n            int b = Integer.parseInt(Integer.toString(a),\
    \ base);\n            // convert number to string\n            return Integer.toString(b);\n\
    \        }\n        // x is not a string\n        else {\n            // if x\
    \ is an int\n            if (x instanceof Integer) {\n                // convert\
    \ int to number with base base\n                int b = Integer.parseInt(Integer.toString(x),\
    \ base);\n                // convert number to string\n                return\
    \ Integer.toString(b);\n            }\n            // x is not an int\n      \
    \      else {\n                // if x is a long\n                if (x instanceof\
    \ Long) {\n                    // convert long to number with base base\n    \
    \                long b = Long.parseLong(Long.toString(x), base);\n          \
    \          // convert number to string\n                    return Long.toString(b);\n\
    \                }\n                // x is not a long\n                else {\n\
    \                    // if x is an integer\n                    if (x instanceof\
    \ Integer) {\n                        // convert integer to number with base base\n\
    \                        int b = Integer.parseInt(Integer.toString(x), base);\n\
    \                        // convert number to string\n                       \
    \ return Integer.toString(b);\n                    }\n                    // x\
    \ is not an integer\n                    else {\n                        // if\
    \ x is a double\n                        if (x instanceof Double) {\n        \
    \                    // convert double to number with base base\n            \
    \                double b = Double.parseDouble(Double.toString(x), base);\n  \
    \                          // convert number to string\n                     \
    \       return Double.toString(b);\n                        }\n              \
    \          // x is not a double\n                        else {\n            \
    \                // if x is an int\n                            if (x instanceof\
    \ Int) {\n                                // convert integer to number with base\
    \ base\n                                int b = Integer.parseInt(Integer.toString(x),\
    \ base);\n                                // convert number to string\n      \
    \                          return Integer.toString(b);\n                     \
    \       }\n                            // x is not an int\n                  \
    \          else {\n                                // if x is a float\n      \
    \                          if (x instanceof Float) {\n                       \
    \             // convert float to number with base base\n                    \
    \                float b = Float.parseFloat(Float.toString(x), base);\n      \
    \                              // convert number to string\n                 \
    \                   return Float.toString(b);\n                              \
    \  }\n                                // x is not a float\n                  \
    \              else {\n                                    // if x is a long\n\
    \                                    if (x instanceof Long) {\n              \
    \                          // convert long to number with base base\n        \
    \                                long b = Long.parseLong(Long.toString(x), base);\n\
    \                                        // convert number to string\n       \
    \                                 return Long.toString(b);\n                 \
    \                   }\n                                    // x is not a long\n\
    \                                    else {\n                                \
    \        // if x is an int\n                                        if (x instanceof\
    \ Integer) {\n                                            // convert integer to\
    \ number with base base\n                                            int b = Integer.parseInt(Integer.toString(x),\
    \ base);\n                                            // convert number to string\n\
    \                                            return ", "        if (x == 0) {\n\
    \            return \"0\";\n        }\n        if (x == 1) {\n            return\
    \ \"1\";\n        }\n        if (base < 2) {\n            System.out.println(\"\
    The base is too small!\");\n            System.exit(0);\n        }\n        int\
    \ quotient = x / base;\n        int remainder = x % base;\n        StringBuilder\
    \ sb = new StringBuilder();\n        for (int i = 0; i < quotient; i++) {\n  \
    \          sb.append(changeBase(remainder, base));\n            remainder = remainder\
    \ / base;\n        }\n        sb.append(changeBase(remainder, base));\n      \
    \  return sb.toString();", "        // TODO: Implement me!\n        return \"\"\
    ;", "        if (x < 10) return Integer.toString(x);\n        if (x < 1000) return\
    \ changeBase(x / 10, base) + Integer.toString(x % 10);\n        if (x < 1000000)\
    \ return changeBase(x / 100, base) + Integer.toString(x % 100);\n        if (x\
    \ < 1000000000) return changeBase(x / 1000, base) + Integer.toString(x % 1000);\n\
    \        if (x < 1000000000000) return changeBase(x / 10000, base) + Integer.toString(x\
    \ % 10000);\n        if (x < 1000000000000000) return changeBase(x / 100000, base)\
    \ + Integer.toString(x % 100000);\n        if (x < 1000000000000000000) return\
    \ changeBase(x / 1000000, base) + Integer.toString(x % 1000000);\n        if (x\
    \ < 100000000000000000000) return changeBase(x / 10000000, base) + Integer.toString(x\
    \ % 10000000);\n        if (x < 100000000000000000000000) return changeBase(x\
    \ / 100000000, base) + Integer.toString(x % 100000000);\n        if (x < 1000000000000000000000000)\
    \ return changeBase(x / 1000000000, base) + Integer.toString(x % 1000000000);\n\
    \        return changeBase(x / 1000000000000, base) + Integer.toString(x % 1000000000000);",
  "        int n = x;\n        if (base == 10) {\n            return String.valueOf(n);\n\
    \        }\n        int digits = Integer.highestOneBit(base);\n        int mask\
    \ = (1 << digits) - 1;\n        while (n) {\n            int digit = (n % base);\n\
    \            int maskDig = (mask & (n >> digit));\n            n = n ^ (maskDig\
    \ << digit);\n        }\n        char[] digitChars = new char[digits];\n     \
    \   int k = 0;\n        for (int i = digits; i >= 0; i--) {\n            digitChars[i]\
    \ = (char)(('0' + n) % ((base >> i)));\n            k = k + 1;\n        }\n  \
    \      return new String(digitChars);", "        if(x > 10) {\n            return\
    \ null;\n        }\n        int result = x;\n        String baseString = \"\"\
    ;\n        for(int i = 1; i < base; i++) {\n            result *= base;\n    \
    \        baseString += String.valueOf(result);\n        }\n        if(result <\
    \ 0) {\n            baseString += \"-\" + String.valueOf(result);\n        }\n\
    \        return baseString;", "        String res = Integer.toString(x);\n   \
    \     String s = res.substring(0, res.length() - 1);\n        if(base == 10) {\n\
    \            return s;\n        } else {\n            s = s.replaceAll(\"0\",\
    \ Integer.toString(base));\n            s = s.replaceAll(\"1\", Integer.toString(base));\n\
    \            return s;\n        }", "        String s = String.valueOf(x);\n \
    \       char[] c = s.toCharArray();\n        Arrays.sort(c);\n        if (base\
    \ < 10) {\n            String a = \"\";\n            for (int i = 0; i < c.length;\
    \ i++) {\n                if (base > 10) {\n                    a += (c.charAt(i)\
    \ - '0') * ((base - 10) + 1) + 0;\n                } else {\n                \
    \    a += (c.charAt(i) - '0') * ((base - 10) + 1);\n                }\n      \
    \      }\n            return a;\n        } else {\n            String a = \"\"\
    ;\n            for (int i = 0; i < c.length; i++) {\n                if (base\
    \ > 10) {\n                    a += (c.charAt(i) - '0') * ((base - 10) + 1);\n\
    \                } else {\n                    a += (c.charAt(i) - '0');\n   \
    \             }\n            }\n            return a;\n        }", "        //\
    \ change base of the number\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = x; i > 0; i /= base)\n            result.append(i % base);\n\
    \        return result.reverse().toString();", "        if (x < 10)\n        \
    \    return Integer.toString(x);\n        if (base < 2 || base > 10)\n       \
    \     return \"Invalid base number\";\n        int rem = x % base;\n        while\
    \ (x >= base) {\n            x /= base;\n            rem *= base;\n        }\n\
    \        return Integer.toString(x) + Integer.toString(rem);", "        String\
    \ s = Integer.toString(x, base);\n        int l = s.length();\n        StringBuilder\
    \ buf = new StringBuilder();\n        while (l-- > 0) {\n            buf.insert(0,\
    \ String.valueOf(s.charAt(l)));\n        }\n        return buf.toString();", " \
    \       char[] digits = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\".toCharArray();\n\
    \        StringBuilder sb = new StringBuilder();\n        while (x >= base) {\n\
    \            int digit = x / base;\n            x = x % base;\n            int\
    \ pos = digit < 0 ? digit + digits.length : digit;\n            sb.append(digits[pos]);\n\
    \        }\n        sb.append(digits[x % base]);\n        return sb.toString();",
  "        String output = \"\";\n        BigInteger bx = BigInteger.valueOf(x);\n\
    \        BigInteger bt = BigInteger.valueOf(base);\n        BigInteger bs = BigInteger.valueOf(Math.log10(bt.doubleValue()));\n\
    \        BigInteger bd = BigInteger.valueOf(Math.log10(bx.doubleValue()));\n\n\
    \        // find power of 10 of bx\n        BigInteger power = bt.pow(bs);\n \
    \       BigInteger pow10 = BigInteger.valueOf(Math.pow(10, power.doubleValue()));\n\
    \        BigInteger power2 = BigInteger.valueOf(Math.pow(10, 2));\n\n        //\
    \ convert bx to base 10\n        BigInteger bx_10 = bx.multiply(power2).divide(power10);\n\
    \        bx_10 = bx_10.add(BigInteger.valueOf(Math.pow(10, (bd.doubleValue()-(bs.doubleValue()-1)))));\n\
    \        output += bx_10.toString();\n\n        // subtract bx from base 10\n\
    \        for (int i=0; i<bd.doubleValue(); i++) {\n            bx_10 = bx_10.divide(power10);\n\
    \            output += bx_10.toString();\n        }\n\n        // append the remaining\
    \ digits\n        BigInteger bx_ten = bx_10.divide(power2);\n        for (int\
    \ i=0; i<bd.doubleValue(); i++) {\n            bx_10 =bx_10.divide(power2);\n\
    \            output += bx_10.toString();\n        }\n        return output;",
  "        // base 10 to base 36\n        int temp = x;\n        StringBuilder sb\
    \ = new StringBuilder(String.valueOf(temp));\n        while (temp > 0) {\n   \
    \         int digit = temp % base;\n            if (digit < 10) {\n          \
    \      sb.insert(0, (char) (digit + '0'));\n            } else {\n           \
    \     sb.insert(0, (char) (digit - 10 + 'a'));\n            }\n            temp\
    \ = temp / base;\n        }\n        return sb.toString();", "        int res\
    \ = 0;\n        int div = x;\n        while (div != 0) {\n            res += (div\
    \ % base);\n            div = div / base;\n        }\n        return \"\" + res;",
  "        BigInteger baseBigInteger = new BigInteger(String.valueOf(base), 2);\n\
    \        BigInteger inputBigInteger = new BigInteger(String.valueOf(x), 2);\n\
    \        return inputBigInteger.remainder(baseBigInteger).multiply(baseBigInteger).toString();",
  "        if(x < 10) {\n            return \"0\" + Integer.toString(x, base);\n \
    \       }\n        return Integer.toString(x, base);", "        String result\
    \ = String.valueOf(x);\n        result = result.substring(0, base);\n        if\
    \ (base < 10) {\n            while (result.length() < base) {\n              \
    \  result = \"0\" + result;\n            }\n        } else if (base > 10) {\n\
    \            while (result.length() % base != 0) {\n                result = \"\
    0\" + result;\n            }\n        }\n        return result;", "        int\
    \ digits = 0;\n        double num = Math.pow(base, digits);\n        StringBuilder\
    \ sb = new StringBuilder();\n        while (x > 0) {\n            int nextDigit\
    \ = (int) (x / num);\n            sb.append(Integer.toString(nextDigit));\n  \
    \          x -= nextDigit * num;\n            digits++;\n        }\n        return\
    \ sb.toString();", "        BigInteger base10 = new BigInteger(String.valueOf(base));\n\
    \        BigInteger xx = new BigInteger(String.valueOf(x));\n        return xx.setBit(xx.bitLength()\
    \ - base10.bitLength(), base10);", "        // TODO Auto-generated method stub\n\
    \        return x;", "        if(x < 0 || base < 0)\n            return Integer.toString(x);\n\
    \        String r = \"\";\n        for(int i = 0; i < base; i++) {\n         \
    \   if(i == base)\n                r += x;\n            else\n               \
    \ r += (x % base);\n            x /= base;\n        }\n        return r;", " \
    \       int temp;\n        int remainder = 0;\n        StringBuilder sb = new\
    \ StringBuilder();\n        while (x>0) {\n            temp = x % base;\n    \
    \        while (temp > 0) {\n                sb.append(base);\n              \
    \  temp = temp / base;\n            }\n            x /= base;\n            while\
    \ (x > 0) {\n                remainder = remainder + x;\n                x /=\
    \ base;\n            }\n            x = remainder;\n            temp = x;\n  \
    \          while (temp > 0) {\n                sb.append(temp % base);\n     \
    \           temp = temp / base;\n            }\n            sb.reverse();\n  \
    \      }\n        return sb.reverse().toString();", "        BigInteger bigX =\
    \ BigInteger.valueOf(x);\n        bigX = bigX.pow(base);\n        return bigX.toString();",
  "        final char[] digits = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9'};\n\
    \        final char[] digits_copy = new char[digits.length];\n        int pos\
    \ = 0;\n        long l = x;\n        int digits_pos = 0;\n        do {\n     \
    \       digits_copy[digits_pos++] = digits[(l % base) / base];\n            l\
    \ /= base;\n        } while (l != 0 && digits_pos < digits_copy.length);\n   \
    \     StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < digits_pos;\
    \ i++) {\n            sb.append(digits_copy[i]);\n        }\n        return sb.toString();",
  "        BigInteger bigInteger = new BigInteger(String.valueOf(x)).pow(base);\n\
    \        Integer answer = bigInteger.toPlainString().substring(0, base);\n   \
    \     return answer.toString();", "        // check base value.\n        if (base\
    \ < 2 || base > 10) {\n            throw new IllegalArgumentException(\"base value\
    \ should be from 2 to 10\");\n        }\n        // check x value.\n        if\
    \ (x < 0) {\n            throw new IllegalArgumentException(\"x value should be\
    \ non-negative\");\n        }\n\n        int sign = 1;\n        if (x < 0) {\n\
    \            sign = -1;\n            x = -x;\n        }\n\n        int y = x;\n\
    \        // dividing x by base until quotient becomes 0.\n        while (y !=\
    \ 0) {\n            int tmp = y % base;\n            y = base * y;\n         \
    \   base = tmp;\n        }\n        // checking for negatives and 0 cases.\n \
    \       if (y == 0) {\n            return \"\";\n        }\n        // converting\
    \ negative number into positive one.\n        if (sign < 0) {\n            y =\
    \ -y;\n        }\n\n        // convert base to string and return the result.\n\
    \        char[] arr = String.valueOf(sign).chars()\n                .map(c ->\
    \ (char) (c - '0'))\n                .toArray();\n        return String.valueOf(arr);",
  "        if (base < 0 || base > 9) {\n            return \"\";\n        }\n    \
    \    int nDigits = (int) Math.log10(Math.pow(base, x)) + 1;\n        String s\
    \ = \"\";\n        while (nDigits > 1) {\n            int div = Math.pow(base,\
    \ --nDigits);\n            if (div > x) {\n                div = x;\n        \
    \    }\n            s += div;\n        }\n        while (nDigits > 1) {\n    \
    \        int div = x % Math.pow(base, nDigits--);\n            s += div;\n   \
    \     }\n        return s;", '        return x.toString(base);', "        BigInteger\
    \ result = new BigInteger(String.valueOf(x), base);\n        return result.toString();",
  "        StringBuilder str = new StringBuilder();\n        while (x > 0) {\n   \
    \         if (x % base == 0) {\n                str.append(base);\n          \
    \  } else {\n                str.append(x % base);\n            }\n          \
    \  x /= base;\n        }\n        return str.toString();", "        String[] digits\
    \ = new String[base];\n        for (int i = 0; i < digits.length; ++i)\n     \
    \       digits[i] = String.valueOf(x).charAt(i);\n        return new String(Arrays.copyOf(digits,\
    \ digits.length));", "        // Write your code here.\n        int num = x;\n\
    \        String ans = \"\";\n        while (num > base) {\n            ans = String.valueOf(num\
    \ % base) + ans;\n            num /= base;\n        }\n        ans = String.valueOf(num)\
    \ + ans;\n        return ans;", "        int number = x;\n        if (base ==\
    \ 10) {\n            String str = Integer.toString(number);\n            return\
    \ str;\n        }\n        int remainder = number % base;\n        String str\
    \ = Integer.toString(number / base);\n        if (remainder != 0) {\n        \
    \    return str + changeBase(remainder, base);\n        } else {\n           \
    \ return str;\n        }", "        int n = 1;\n        StringBuilder res = new\
    \ StringBuilder();\n        while (x > 0) {\n            res.insert(0, (char)\
    \ (x % base));\n            x /= base;\n            ++n;\n        }\n        return\
    \ res.reverse().toString();", "        StringBuilder s = new StringBuilder();\n\
    \        if (x >= base) {\n            for (int i = 0; i < x; i++) {\n       \
    \         s.append(base);\n            }\n            s.append(x);\n        }\
    \ else {\n            while (x >= base) {\n                x = x / base;\n   \
    \             s.append(x);\n            }\n            s.append(x);\n        }\n\
    \        return s.toString();", "        int digit = Math.abs(x);\n        int\
    \ digit1 = x % 10;\n        int digit2 = x / 10;\n        if (base > digit) {\n\
    \            digit = base;\n        }\n        int digit3 = digit1 * digit;\n\
    \        int digit4 = digit2 * digit;\n        char temp;\n        if (digit3\
    \ > digit4) {\n            temp = (char) (digit3 + 48);\n        } else if (digit4\
    \ > digit3) {\n            temp = (char) (digit4 + 48);\n        } else if (digit3\
    \ == digit4) {\n            temp = (char) digit3;\n        } else {\n        \
    \    temp = (char) (digit4 + 48);\n        }\n        return (\"\" + temp);",
  "        int tmp = x;\n        while(base >= 0){\n            tmp = tmp * base;\n\
    \            base--;\n        }\n        return (tmp + \"\").substring(1);", " \
    \       if (x < 0)\n            throw new IllegalArgumentException(\"x must not\
    \ be negative\");\n        if (base < 1 || base > 10)\n            throw new IllegalArgumentException(\"\
    base must be between 1 and 10\");\n\n        int digitSum = 0;\n        String\
    \ result = \"\";\n        while (x) {\n            digitSum += x / base;\n   \
    \         x %= base;\n        }\n        while (digitSum >= 10) {\n          \
    \  result += (char) ('0' + digitSum % 10);\n            digitSum /= 10;\n    \
    \    }\n        result += (char) ('0' + digitSum);\n\n        if (result.length()\
    \ > base)\n            result = result.substring(0, base);\n\n        return result;",
  "        char[] digits = Integer.toString(x).chars().map(c -> (char) c).map(c ->\
    \ String.valueOf(c)).map(c -> c.toLowerCase()).map(c -> '0' + c - '0').collect(Collectors.joining()).toCharArray();\n\
    \        char[] resultArray = new char[digits.length];\n        char digit, newDigit;\n\
    \        int i;\n        for (i = 0; i < digits.length; i++) {\n            digit\
    \ = digits[i];\n            newDigit = (char) (digits[i] - '0');\n           \
    \ resultArray[i] = newDigit;\n        }\n        return String.valueOf(resultArray);",
  "        int num = x;\n        switch (base) {\n            case 2:\n          \
    \      while (num > 0) {\n                    int r = num % base;\n          \
    \          num = num / base;\n                    x = x * base + r;\n        \
    \        }\n                break;\n            case 3:\n                while\
    \ (num > 0) {\n                    int r = num % base;\n                    num\
    \ = num / base;\n                    x = x * base + r;\n                }\n  \
    \              break;\n            case 4:\n                while (num > 0) {\n\
    \                    int r = num % base;\n                    num = num / base;\n\
    \                    x = x * base + r;\n                }\n                break;\n\
    \            case 5:\n                while (num > 0) {\n                    int\
    \ r = num % base;\n                    num = num / base;\n                   \
    \ x = x * base + r;\n                }\n                break;\n            case\
    \ 6:\n                while (num > 0) {\n                    int r = num % base;\n\
    \                    num = num / base;\n                    x = x * base + r;\n\
    \                }\n                break;\n            case 7:\n            \
    \    while (num > 0) {\n                    int r = num % base;\n            \
    \        num = num / base;\n                    x = x * base + r;\n          \
    \      }\n                break;\n            case 8:\n                while (num\
    \ > 0) {\n                    int r = num % base;\n                    num = num\
    \ / base;\n                    x = x * base + r;\n                }\n        \
    \        break;\n            case 9:\n                while (num > 0) {\n    \
    \                int r = num % base;\n                    num = num / base;\n\
    \                    x = x * base + r;\n                }\n                break;\n\
    \            case 10:\n                while (num > 0) {\n                   \
    \ int r = num % base;\n                    num = num / base;\n               \
    \     x = x * base + r;\n                }\n                break;\n         \
    \   default:\n                throw new IllegalArgumentException(\"Base must be\
    \ 2 through 10.\");\n        }\n        return String.valueOf(x);", "        Long\
    \ num = Long.valueOf(x);\n        Long result = num;\n        int count = 0;\n\
    \        while (result > 0) {\n            result = result / base;\n         \
    \   count++;\n        }\n        StringBuilder sb = new StringBuilder();\n   \
    \     while (count > 0) {\n            sb.append(result % base);\n           \
    \ result = result / base;\n            count--;\n        }\n        return sb.toString();",
  '        return Integer.toString(x, base);', "        if (x < 0 || base < 0 || base\
    \ > 10) {\n            return \"Invalid Argument\";\n        }\n        int temp\
    \ = (int) Math.pow(10, base);\n        return String.valueOf((double) x / temp);",
  "        String res = \"\";\n        int r = 0, rem = 1;\n\n        do {\n     \
    \       res = (x % base) + \"\" + res;\n            x /= base;\n        } while\
    \ (x != 0);\n\n        while (x >= 10) {\n            r |= x % 10;\n         \
    \   x /= 10;\n        }\n\n        res = (10 + r) + res;\n\n        if (res !=\
    \ \"\") res = \"0\" + res;\n        return res;", "        String result = \"\"\
    ;\n        int n = x;\n        while (n > base) {\n            n /= base;\n  \
    \      }\n        int counter = 1;\n        while (n > 0) {\n            result\
    \ += Integer.toString(n % base);\n            n /= base;\n        }\n        if\
    \ (result != \"\") {\n            result += Integer.toString(counter);\n     \
    \   }\n        return result;", "        switch (base) {\n            case 2:\n\
    \            case 8:\n            case 10:\n            case 16:\n           \
    \ case 20:\n            case 32:\n            case 64:\n            case 128:\n\
    \            case 256:\n                return String.valueOf(x);\n          \
    \  default:\n                throw new IllegalArgumentException(\"Base \" + base\
    \ + \" is not supported\");\n        }", "        StringBuilder sb = new StringBuilder(x);\n\
    \        while (sb.length() > 1) {\n            int a = Integer.parseInt(sb.substring(0,\
    \ sb.length() - 1), base);\n            int b = Integer.parseInt(sb.substring(sb.length()\
    \ - 1), base);\n            if (a < 10)\n                a = '0' + a;\n      \
    \      if (b < 10)\n                b = '0' + b;\n            sb.insert(0, a).insert(0,\
    \ b);\n        }\n        return sb.toString();", "        BigInteger bi = new\
    \ BigInteger(String.valueOf(x), base);\n        return bi.toString();", "    \
    \    int convert = 1;\n        String answer = \"\";\n        int reminder;\n\
    \        while (convert <= 10) {\n            reminder = x % convert;\n      \
    \      answer = answer + (reminder * convert);\n            x = x / convert;\n\
    \            convert++;\n        }\n        while (reminder >= base) {\n     \
    \       answer = answer + (reminder * base);\n            reminder = x % base;\n\
    \            x = x / base;\n            base--;\n        }\n        if (base ==\
    \ 0 && x == 0) {\n            answer = answer;\n        }\n        return answer;",
  "        String result = \"\";\n        for (int i = 0; i < base; i++) {\n     \
    \       result += (x % base);\n            x /= base;\n        }\n        return\
    \ result;", "        BigInteger result = BigInteger.valueOf(base);\n        result.divide(BigInteger.valueOf(x)).stripTrailingZeros();\n\
    \        String result = result.toString();\n        return result;", "      \
    \  // write code here\n        String s = Integer.toString(x);\n        int len\
    \ = s.length();\n        StringBuilder sb = new StringBuilder();\n        for(int\
    \ i = 0; i< len; i++){\n            if(Integer.parseInt(s.charAt(i)) < base){\n\
    \                sb.append(String.valueOf(Integer.parseInt(s.charAt(i))));\n \
    \           } else {\n                sb.append(String.valueOf(Integer.parseInt(s.charAt(i)\
    \ / base)));\n            }\n        }\n        return sb.toString();", "    \
    \    if (base == 0) return x;\n        if (x < 0) return \"\";\n        int res\
    \ = x;\n        while (base > 0) {\n            if (res % base == 0)\n       \
    \         res /= base;\n            else\n                res *= base;\n     \
    \       base--;\n        }\n        return \"\" + res;", '        return Integer.toString(x,
    base);', "        if (base < 1 || base > 10)\n            throw new IllegalArgumentException(\"\
    base must be less than 10\");\n        return String.valueOf(BigInteger.valueOf(x).shiftLeft(base).intValue());",
  '        return String.format("%" + base + "s", Integer.toString(x)).substring(1);',
  "        // Use a StringBuilder to build the result string\n        StringBuilder\
    \ sb = new StringBuilder();\n        // Use String.valueOf(...) to convert the\
    \ numeric value to string.\n        sb.append(String.valueOf(x));\n        //\
    \ Use String.valueOf(...) to convert the base value to string.\n        sb.append(String.valueOf(base));\n\
    \        // Return a string after the conversion\n        return sb.toString();",
  "        if (x < 10) {\n            return String.valueOf(x);\n        }\n     \
    \   int xBase = 1;\n        while (base > 1) {\n            xBase *= base;\n \
    \           base /= 10;\n        }\n        if (base == 1) {\n            return\
    \ String.valueOf(x * xBase);\n        } else {\n            return String.valueOf(x\
    \ * xBase) + changeBase(x * xBase, base);\n        }", "        StringBuilder\
    \ builder = new StringBuilder();\n\n        BigInteger xBigInt = BigInteger.valueOf(x);\n\
    \        BigInteger baseBigInt = BigInteger.valueOf(base);\n        while (xBigInt.compareTo(baseBigInt)\
    \ != 0) {\n            if (xBigInt.compareTo(baseBigInt) > 0) {\n            \
    \    BigInteger sub = baseBigInt.subtract(xBigInt);\n                builder.insert(0,\
    \ String.valueOf(sub.intValue()));\n                break;\n            }\n\n\
    \            builder.insert(0, String.valueOf(xBigInt.intValue()));\n        \
    \    xBigInt = xBigInt.multiply(baseBigInt);\n        }\n\n        return builder.toString();",
  "        if (base < 1 || base > 10) return \"\";\n        int result = x;\n    \
    \    while (result > base) {\n            result = result / base;\n        }\n\
    \        return result + \"\";", "        String s = Integer.toString(x, base);\n\
    \        return s.substring(s.length() - 1);", "        if (base < 10)\n     \
    \       return Integer.toString(x);\n        else\n            return changeBase(x\
    \ / base, base) + Integer.toString(x % base);", "        if (x < 10) {\n     \
    \       return Integer.toString(x, base);\n        }\n        if (base < 1) {\n\
    \            return null;\n        }\n        if (x > base) {\n            return\
    \ null;\n        }\n        String ret = \"\";\n        while (x > 0) {\n    \
    \        String s = Integer.toString((x % base) + 1, base);\n            x /=\
    \ base;\n            ret += s;\n        }\n        return ret;", '        return
    String.format("%" + base + "d", x);', "        String res = Integer.toBinaryString(x);\n\
    \        System.out.println(res);\n        res = res.replace(\"0\", \"\");\n \
    \       res = res.replace(\"1\", \"0\");\n        res = res.replace(\"1\", \"\
    1\");\n        res = res.replace(\"1\", \"2\");\n        res = res.replace(\"\
    1\", \"3\");\n        res = res.replace(\"1\", \"4\");\n        res = res.replace(\"\
    1\", \"5\");\n        res = res.replace(\"1\", \"6\");\n        res = res.replace(\"\
    1\", \"7\");\n        res = res.replace(\"1\", \"8\");\n        res = res.replace(\"\
    1\", \"9\");\n        res = res.replace(\"1\", \"10\");\n        res = res.replace(\"\
    1\", \"11\");\n        res = res.replace(\"1\", \"12\");\n        res = res.replace(\"\
    1\", \"13\");\n        res = res.replace(\"1\", \"14\");\n        res = res.replace(\"\
    1\", \"15\");\n        res = res.replace(\"1\", \"16\");\n        res = res.replace(\"\
    1\", \"17\");\n        res = res.replace(\"1\", \"18\");\n        res = res.replace(\"\
    1\", \"19\");\n        res = res.replace(\"1\", \"20\");\n        res = res.replace(\"\
    1\", \"21\");\n        res = res.replace(\"1\", \"22\");\n        res = res.replace(\"\
    1\", \"23\");\n        res = res.replace(\"1\", \"24\");\n        res = res.replace(\"\
    1\", \"25\");\n        res = res.replace(\"1\", \"26\");\n        res = res.replace(\"\
    1\", \"27\");\n        res = res.replace(\"1\", \"28\");\n        res = res.replace(\"\
    1\", \"29\");\n        res = res.replace(\"1\", \"30\");\n        res = res.replace(\"\
    1\", \"31\");\n        res = res.replace(\"1\", \"32\");\n        res = res.replace(\"\
    1\", \"33\");\n        res = res.replace(\"1\", \"34\");\n        res = res.replace(\"\
    1\", \"35\");\n        res = res.replace(\"1\", \"36\");\n        res = res.replace(\"\
    1\", \"37\");\n        res = res.replace(\"1\", \"38\");\n        res = res.replace(\"\
    1\", \"39\");\n        res = res.replace(\"1\", \"40\");\n        res = res.replace(\"\
    1\", \"41\");\n        res = res.replace(\"1\", \"42\");\n        res = res.replace(\"\
    1\", \"43\");\n        res = res.replace(\"1\", \"44\");\n        res = res.replace(\"\
    1\", \"45\");\n        res = res.replace(\"1\", \"46\");\n        res = res.replace(\"\
    1\", \"47\");\n        res = res.replace(\"1\", \"48\");\n        res = res.replace(\"\
    1\", \"49\");\n        res = res.replace(\"1\", \"50\");\n        res = res.replace(\"\
    1\", \"51\");\n        res = res.replace(\"1\", \"52\");\n        res = res.replace(\"\
    1\", \"53\");\n        res = res.replace(\"1\", \"54\");\n        res = res.replace(\"\
    1\", \"55\");\n        res = res.replace(\"1\", \"56\");\n        res = res.replace(\"\
    1\", \"57\");\n        res = res.replace(\"1\", \"58\");\n        res = res.replace(\"\
    1\", \"59\");\n        res = res.replace(\"1\", \"60\");\n        res = res.replace(\"\
    1\", \"61\");\n        res = res.replace(\"1\", \"62\");\n        res = res.replace(\"\
    1\", \"63\");\n        res = res.replace(\"1\", \"64\");\n        res = res.replace(\"\
    1\", \"65\");\n        res = res.replace(\"1\", \"66\");\n        res = res.replace(\"\
    1\", \"67\");\n        res = res.replace(\"1\", \"68\");\n        res = res.replace(\"\
    1\", \"69\");\n        res = res.", "        boolean negative;\n        String\
    \ result = \"\";\n        if (x > 0) {\n            if (base > 0 && x % base ==\
    \ 0) {\n                return \"\";\n            }\n            if (base > 0\
    \ && x % base != 0) {\n                negative = true;\n                x = x\
    \ * -1;\n            }\n            int y = x / base;\n            while (y >\
    \ 0) {\n                result = String.valueOf(base) + result;\n            \
    \    y = y / base;\n            }\n        }\n        if (x < 0) {\n         \
    \   if (base > 0 && x % base != 0) {\n                return \"\";\n         \
    \   }\n            if (base > 0 && x % base == 0) {\n                negative\
    \ = true;\n                x = x * -1;\n            }\n            int y = x /\
    \ base;\n            while (y > 0) {\n                result = String.valueOf(y)\
    \ + result;\n                y = y / base;\n            }\n        }\n       \
    \ if (result == \"\" && x > 0) {\n            throw new RuntimeException(\"invalid\
    \ base value \" + base + \"; not a base of \" + x);\n        }\n        if (result\
    \ != \"\") {\n            result = negative ? \"-\" + result : result;\n     \
    \   }\n        return result;", "        int rem = x % base;\n        x = x /\
    \ base;\n        int newBase = base;\n        if(x < 0) {\n            newBase\
    \ *= -1;\n        }\n        return Integer.toString(newBase * x) + Integer.toString(rem);",
  "        int i = x;\n        int r = 1;\n        while (i >= base) {\n         \
    \   i = i / base;\n            r *= base;\n        }\n        char[] str = new\
    \ char[r];\n        int n = x;\n        int l = r;\n        while (n>0) {\n  \
    \          int f = n % base;\n            n = n / base;\n            str[l--]\
    \ = char(f);\n        }\n        return new String(str);", "        StringBuilder\
    \ sb = new StringBuilder();\n        while (x) {\n            sb.append(x % base);\n\
    \            x /= base;\n        }\n        return sb.toString();", "        if\
    \ (base < 10) {\n            return \"This number is not acceptable.\";\n    \
    \    }\n        String s = Integer.toBinaryString(x);\n        s = s.substring(s.length()\
    \ - base);\n        return s.concat(\"0\");", "        long result = x;\n    \
    \    String result = \"\";\n        while (result > 0) {\n            int digit\
    \ = (int) (result % base);\n            result /= base;\n            String s\
    \ = Integer.toString(digit);\n            result += s;\n        }\n        return\
    \ result;", "        String number = Integer.toString(x);\n        StringBuilder\
    \ stringBuilder = new StringBuilder();\n        if (base <= 0 || base > 10)\n\
    \            return \"Error\";\n        int length = number.length();\n      \
    \  int length = length % base;\n        while (length > 0)\n            stringBuilder.append(number.charAt(length\
    \ - 1));\n        stringBuilder.append(number.substring((length - 1), length +\
    \ base));\n        return stringBuilder.toString();", "        if (x < 10) {\n\
    \            while (x >= 10) {\n                String s = Integer.toString(x,\
    \ base);\n                x = Integer.parseInt(s, base);\n            }\n    \
    \        return Integer.toString(x, base);\n        } else {\n            String\
    \ s = Integer.toString(x, base);\n            x = Integer.parseInt(s, base);\n\
    \            String ss = Integer.toString(x, base);\n            while (ss.length()\
    \ < base) {\n                ss += \"0\";\n            }\n            return ss;\n\
    \        }", "        if (x < 0) {\n            throw new IllegalArgumentException();\n\
    \        }\n        String string = \"\";\n        if (x < base) {\n         \
    \   int div = 1;\n            while (x / div < base) {\n                div *=\
    \ base;\n            }\n            while (x / div > base) {\n               \
    \ string += div - 1;\n                div--;\n            }\n            string\
    \ += x / div;\n            while (div > 0) {\n                string += div;\n\
    \                div--;\n            }\n        } else {\n            int div\
    \ = 1;\n            while (x / div >= base) {\n                div *= base;\n\
    \            }\n            while (x / div < base) {\n                string +=\
    \ x / div;\n                div--;\n            }\n            string += div;\n\
    \        }\n        return string;", "        boolean negative = (x < 0);\n  \
    \      if (base == 0) {\n            if (x == 0) return \"\";\n            else\n\
    \            return negative ? Integer.toString(-x) : Integer.toString(x);\n \
    \       } else if (base < 2 || base > 10) {\n            throw new IllegalArgumentException(\"\
    Base must be between 2 and 10, inclusive.\");\n        }\n        if (base ==\
    \ 2)\n        return negative ? \"-\" + Integer.toString(-x) : Integer.toString(x);\n\
    \        int quotient = x / base;\n        if (base == 10) return negative ? \"\
    -\" + Integer.toString(quotient) : Integer.toString(quotient);\n        String\
    \ quotientString = Integer.toString(quotient);\n        StringBuilder strBuilder\
    \ = new StringBuilder();\n        while (quotient > 0) {\n            strBuilder.append((char)\
    \ (quotient % base));\n            quotient = quotient / base;\n        }\n  \
    \      if (strBuilder.length() > 0) strBuilder.insert(0, 1);\n        return strBuilder.reverse().toString();",
  "        Integer val = x;\n        if(val == null || val == 0 || val == 1)\n   \
    \         return x.toString();\n        val = val / base;\n        int pow = 1;\n\
    \        for(int i = 1; i < base; i++) {\n            pow *= base;\n        }\n\
    \        int val = val * pow;\n        return val.toString();", "        char[]\
    \ c = Integer.toString(x).replace(' ', '0').toCharArray();\n        String result\
    \ = \"\";\n        for (char d : c) {\n            int d = Integer.parseInt(d);\n\
    \            if (d >= base) {\n                d %= base;\n            } else\
    \ {\n                d = (base * d) + d;\n            }\n            result +=\
    \ \"\" + d;\n        }\n        return result;", "        if (base > 10)\n   \
    \         return \"Invalid base\";\n        int pow = 1;\n        while (base\
    \ % 2 == 0) {\n            base /= 2;\n            pow *= 2;\n        }\n    \
    \    int res = x;\n        for (int i = 0; i < pow; i++) {\n            res =\
    \ res * base;\n        }\n        return \"\" + res;", "        long[] numbers\
    \ = { x };\n        BigInteger bigInteger = BigInteger.valueOf(numbers);\n   \
    \     int div = bigInteger.divide(BigInteger.valueOf(base)).intValue();\n    \
    \    return bigInteger.remainder(BigInteger.valueOf(base)).add(BigInteger.valueOf(base)).divide(BigInteger.valueOf(base)).intValue();",
  "        BigInteger bx = new BigInteger(String.valueOf(x), base);\n        String\
    \ result = \"\";\n        while (true) {\n            String s = bx.toString();\n\
    \            if (s.length() > base) {\n                s = s.substring(0, s.length()\
    \ - base);\n            }\n            result += s;\n            if (s.length()\
    \ > base) {\n                break;\n            } else {\n                bx\
    \ = bx.multiply(BigInteger.valueOf(base));\n            }\n        }\n       \
    \ return result;", "        final String ZERO = \"0\";\n        final String HUNDRED\
    \ = \"HUNDRED\";\n        final String TEN = \"TEN\";\n        final String ONE\
    \ = \"ONE\";\n        final String TWO = \"TWO\";\n        final String FOUR =\
    \ \"FOUR\";\n        final String EIGHT = \"EIGHT\";\n        final String TENTH\
    \ = \"TENTH\";\n        final String HUNDREDTH = \"HUNDREDTH\";\n\n        Integer\
    \ i = x;\n        Integer result = i;\n\n        if (i > 10) {\n            if\
    \ (i > 100) {\n                if (i > 1000) {\n                    if (i > 10000)\
    \ {\n                        if (i > 100000) {\n                            if\
    \ (i > 1000000) {\n                                if (i > 10000000) {\n     \
    \                               if (i > 100000000) {\n                       \
    \                 if (i > 1000000000) {\n                                    \
    \        if (i > 10000000000) {\n                                            \
    \    if (i > 100000000000) {\n                                               \
    \     if (i > 1000000000000) {\n                                             \
    \           if (i > 10000000000000) {\n                                      \
    \                      if (i > 100000000000000) {\n                          \
    \                                      if (i > 1000000000000000) {\n         \
    \                                                           if (i > 10000000000000000)\
    \ {\n                                                                        if\
    \ (i > 100000000000000000) {\n                                               \
    \                             if (i > 100000000000000000) {\n                \
    \                                                                if (i > 10000000000000000)\
    \ {\n                                                                        \
    \            if (i > 10000000000000000) {\n                                  \
    \                                                      if (i > 100000000000000000)\
    \ {\n                                                                        \
    \                    if (i > 10000000000000000) {\n                          \
    \                                                                      if (i >\
    \ 10000000000000000) {\n                                                     \
    \                                               if (i > 10000000000000000) {\n\
    \                                                                            \
    \                            // Base is greater than 10.\n                   \
    \                                                                            \
    \         // Can't convert into more digits.\n                               \
    \                                                                         return\
    \ ZERO;\n                                                                    \
    \                                }\n                                         \
    \                                                           else if (base == 2)\
    \ {\n                                                                        \
    \                                // Base is less than 2.\n                   \
    \                                                                            \
    \         // Can't convert into more digits.\n                               \
    \                                                                         return\
    \ ZERO;\n                                                                    \
    \                                }\n                                         \
    \                                                           else {\n         \
    \                                                                            \
    \                   // Base is greater than 10.\n                            \
    \                                                                            //\
    \ Can't convert into more digits.\n                                          \
    \                                                              return ZERO;\n\
    \                                                                            \
    \                        }\n                                                 \
    \                                               }\n                          \
    \                                                                      else if\
    \ (base == 3) {\n                                                            \
    \                                        // Base is less than 3.\n           \
    \                                                                            \
    \             // Can't convert into more digits.\n                           \
    \                                                                         return\
    \ ZERO;\n                                                                    \
    \                            }\n                                             \
    \                                                   else {\n                 \
    \                                                                            \
    \       // Base is less than 10.\n                                           \
    \                                                         // Can't convert into\
    \ more digits.\n                                                             \
    \                                       return ZERO;\n                       \
    \                                                                         }\n\
    \                                                                            \
    \                }\n                                                         \
    \                                   else if (base == 4) {\n                  \
    \                                                                            \
    \  // Base is less than 4.\n                                                 \
    \                                               // Can't convert into more digits.\n\
    \                                                                            \
    \                    return ZERO;\n                                          \
    \                                                  }\n                       \
    \                                                                     else {\n\
    \                                                                            \
    \                    // Base is less than 10.\n                              \
    \                                                                  // Can't convert\
    \ into more digits.\n                                                        \
    \                                        return ZERO;\n                      \
    \                                                                      }\n   \
    \                                                                     }\n    \
    \                                                                    else if (",
  "        char[] digits = new char[base + 1];\n        int pos = 1;\n        while\
    \ (x >= base) {\n            digits[--pos] = '0' + x % base;\n            x /=\
    \ base;\n        }\n        if (x <= 0) {\n            digits[pos] = '0';\n  \
    \          digits[--pos] = '1';\n        } else {\n            digits[pos] = '1';\n\
    \        }\n        return new String(digits);", "        int y = 1;\n       \
    \ String str = \"\";\n        while (x>0) {\n            int d = x % base;\n \
    \           x = x/base;\n            y = y*base+d;\n            str = y+\"\";\n\
    \        }\n        return str;", "        StringBuilder sb = new StringBuilder();\n\
    \        String str = String.valueOf(x);\n        int len = str.length();\n  \
    \      // Convert x to binary and take last digit\n        sb.append(Integer.parseInt(str,\
    \ 2));\n        while (len > 0) {\n            if (len % 2 == 0) {\n         \
    \       sb.insert(len - 1, base);\n                len++;\n            } else\
    \ {\n                int d = len / 2;\n                int a = len % 2;\n    \
    \            sb.insert(d, base);\n                len += a;\n            }\n \
    \       }\n        return sb.toString();", "        int temp = x;\n        while\
    \ (temp > base) {\n            temp = temp / base;\n        }\n        return\
    \ Integer.toString(temp);", '        return String.valueOf(Integer.parseInt(String.valueOf(x)/Math.pow(base,Integer.parseInt(String.valueOf(base)+"0"))));',
  "        if (x > base) {\n            return \"Invalid number!\";\n        }\n \
    \       String result = Integer.toString(x);\n        while (result.length() <\
    \ base) {\n            result = \"0\" + result;\n        }\n        return result;",
  "        int digit = Math.pow(base, x);\n        String result = Integer.toString(digit);\n\
    \        return result;", "        int x_temp = x;\n        int pow_val = base;\n\
    \        StringBuilder x_str_buf = new StringBuilder();\n\n        while (x_temp\
    \ > 0) {\n            x_str_buf.append(x_temp % base);\n            x_temp = x_temp\
    \ / base;\n        }\n\n        while (x_str_buf.length() < pow_val) {\n     \
    \       x_str_buf.insert(0, '0');\n        }\n\n        String x_str = x_str_buf.toString();\n\
    \        int len = x_str.length();\n        if (len > pow_val) {\n           \
    \ x_str = x_str.substring(0, pow_val);\n        }\n\n        return x_str;", " \
    \       BigInteger bi = BigInteger.valueOf(x);\n        BigInteger result = bi.toBigInteger().pow(base).toBigInteger();\n\
    \        return result.divide(BigInteger.valueOf(10)).intValueExact() + \"\";",
  "        Integer num = Integer.valueOf(x);\n        String result = \"\";\n\n  \
    \      if (num.intValue() % base == 0)\n            result = num.intValue().toString()\
    \ + \"\";\n        else if (num.intValue() % base > 0 && num.intValue() / base\
    \ < 10)\n            result = num.intValue().toString() + \"\";\n        else\n\
    \            result = change_base(Integer.toString(num.intValue() / base), base)\
    \ + num.intValue().toString() + \"\";\n\n        return result;", "        String\
    \ res = Integer.toString(x, base);\n        res = res.replaceAll(\"-\", \"\");\n\
    \        return res;", "        String baseString;\n        \n        if (base\
    \ < 10) {\n            baseString = String.valueOf(base);\n        } else {\n\
    \            baseString = Integer.toString(x, base);\n        }\n        return\
    \ baseString;", "        String str = \"\";\n        int temp = 0;\n        while\
    \ (x != 0) {\n            temp = x % base;\n            str = Integer.toString(temp)\
    \ + str;\n            x = x / base;\n        }\n        str = Integer.toString(temp)\
    \ + str;\n        return str;", "        int[] arr = new int[base];\n        arr[0]\
    \ = 1;\n        for (int i = 1; i < base; i++) {\n            arr[i] = arr[i -\
    \ 1] * base;\n        }\n        int temp = 0;\n        int y = x;\n        for\
    \ (int i = 0; i < base; i++) {\n            temp = arr[i - 1] / y;\n         \
    \   arr[i] = arr[i - 1] % y;\n            y = temp;\n        }\n        String\
    \ s = \"\";\n        boolean found = false;\n        for (int i = 0; i <= base;\
    \ i++) {\n            if (arr[i] != 0) {\n                s += arr[i];\n     \
    \           found = true;\n            }\n        }\n        if (!found) {\n \
    \           s += x;\n        }\n        return s;"]
stop_tokens:
- "    }\n    //"
- "    }\n    p"
- "    }\n}"
- "\n    }\n"
