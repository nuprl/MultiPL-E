name: HumanEval_115_max_fill
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // You are given a rectangular grid of wells. Each row represents\
  \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
  \    // Each well has a corresponding bucket that can be used to extract water from\
  \ it, \n    // and all buckets have the same capacity.\n    // Your task is to use\
  \ the buckets to empty the wells.\n    // Output the number of times you need to\
  \ lower the buckets.\n    // Example 1:\n    // Input: \n    // grid : [[0,0,1,0],\
  \ [0,1,0,0], [1,1,1,1]]\n    // bucket_capacity : 1\n    // Output: 6\n    // Example\
  \ 2:\n    // Input: \n    // grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n\
  \    // bucket_capacity : 2\n    // Output: 5\n    // Example 3:\n    // Input:\
  \ \n    // grid : [[0,0,0], [0,0,0]]\n    // bucket_capacity : 5\n    // Output:\
  \ 0\n    // Constraints:\n    // * all wells have the same length\n    // * 1 <=\
  \ grid.length <= 10^2\n    // * 1 <= grid[:,1].length <= 10^2\n    // * grid[i][j]\
  \ -> 0 | 1\n    // * 1 <= capacity <= 10\n    public static int maxFill(ArrayList<ArrayList<Integer>>\
  \ grid, int capacity) {\n"
tests: "return 0;\n    }\n    public static void main(String[] args) {\n    assert(maxFill((new\
  \ ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)0,\
  \ (int)0, (int)1, (int)0)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)0,\
  \ (int)1, (int)0, (int)0)), (ArrayList<Integer>)new ArrayList<Integer>(Arrays.asList((int)1,\
  \ (int)1, (int)1, (int)1))))), (1)) == (6));\n    assert(maxFill((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
  \ ArrayList<Integer>(Arrays.asList((int)0, (int)0, (int)1, (int)1)), (ArrayList<Integer>)new\
  \ ArrayList<Integer>(Arrays.asList((int)0, (int)0, (int)0, (int)0)), (ArrayList<Integer>)new\
  \ ArrayList<Integer>(Arrays.asList((int)1, (int)1, (int)1, (int)1)), (ArrayList<Integer>)new\
  \ ArrayList<Integer>(Arrays.asList((int)0, (int)1, (int)1, (int)1))))), (2)) ==\
  \ (5));\n    assert(maxFill((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
  \ ArrayList<Integer>(Arrays.asList((int)0, (int)0, (int)0)), (ArrayList<Integer>)new\
  \ ArrayList<Integer>(Arrays.asList((int)0, (int)0, (int)0))))), (5)) == (0));\n\
  \    assert(maxFill((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
  \ ArrayList<Integer>(Arrays.asList((int)1, (int)1, (int)1, (int)1)), (ArrayList<Integer>)new\
  \ ArrayList<Integer>(Arrays.asList((int)1, (int)1, (int)1, (int)1))))), (2)) ==\
  \ (4));\n    assert(maxFill((new ArrayList<ArrayList<Integer>>(Arrays.asList((ArrayList<Integer>)new\
  \ ArrayList<Integer>(Arrays.asList((int)1, (int)1, (int)1, (int)1)), (ArrayList<Integer>)new\
  \ ArrayList<Integer>(Arrays.asList((int)1, (int)1, (int)1, (int)1))))), (9)) ==\
  \ (2));\n    }\n\n}\n"
completions: []
stop_tokens:
- "    }\n    //"
- "    }\n    p"
- "    }\n}"
- "\n    }\n"
