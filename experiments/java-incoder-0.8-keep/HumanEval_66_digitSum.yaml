name: HumanEval_66_digitSum
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Task\n    // Write a function that takes a string as input\
  \ and returns the sum of the upper characters only'\n    // ASCII codes.\n    //\
  \ Examples:\n    // digitSum(\"\") => 0\n    // digitSum(\"abAB\") => 131\n    //\
  \ digitSum(\"abcCd\") => 67\n    // digitSum(\"helloE\") => 69\n    // digitSum(\"\
  woArBld\") => 131\n    // digitSum(\"aAaaaXa\") => 153\n    public static int digitSum(String\
  \ s) {\n"
tests: "return 0;\n    }\n    public static void main(String[] args) {\n    assert(digitSum((\"\
  \")) == (0));\n    assert(digitSum((\"abAB\")) == (131));\n    assert(digitSum((\"\
  abcCd\")) == (67));\n    assert(digitSum((\"helloE\")) == (69));\n    assert(digitSum((\"\
  woArBld\")) == (131));\n    assert(digitSum((\"aAaaaXa\")) == (153));\n    assert(digitSum((\"\
  \ How are yOu?\")) == (151));\n    assert(digitSum((\"You arE Very Smart\")) ==\
  \ (327));\n    }\n\n}\n"
completions: ["        int sum = 0;\n        for (int i = 0; i < s.length(); i++)\
    \ {\n            int x = s.charAt(i);\n            if (x >= '0' && x <= '9') {\n\
    \                sum = sum + x;\n            }\n        }\n        return sum;",
  "        int sum = 0;\n        for (char c : s.toCharArray()) {\n            if\
    \ (Character.isUpperCase(c)) {\n                sum += (int)c;\n            }\n\
    \        }\n        return sum;", "        // Write code here\n        int sum\
    \ = 0;\n        for(int i=0;i<s.length();i++){\n            if(Character.isDigit(s.charAt(i))){\n\
    \                sum += Character.getNumericValue(s.charAt(i));\n            }\n\
    \        }\n        return sum;", "        int total = 0;\n        for(int i =\
    \ 0; i < s.length(); i++) {\n            total += (int) s.charAt(i) - 'A' + 1;\n\
    \        }\n        return total;", "        int sum = 0;\n        for (int i\
    \ = 0; i < s.length(); i++) {\n            if (s.codePointAt(i) >= 'a' && s.codePointAt(i)\
    \ <= 'z') {\n                sum += (int) s.codePointAt(i);\n            }\n \
    \       }\n        return sum;", "        int sum = 0;\n        for (int i = 0;\
    \ i < s.length(); i++) {\n            char c = s.charAt(i);\n            int code\
    \ = Character.getNumericValue(c);\n            sum += code;\n        }\n     \
    \   return sum;", "        boolean upper = true;\n        int total = 0;\n   \
    \     for (char c : s.toCharArray()) {\n            if (Character.isUpperCase(c))\
    \ {\n                upper = true;\n            } else {\n                upper\
    \ = false;\n            }\n            if (upper) {\n                total +=\
    \ Character.getNumericValue(c);\n            }\n        }\n        return total;",
  "        char[] chars = s.toCharArray();\n        Arrays.sort(chars);\n        int\
    \ sum = 0;\n        for (char c : chars) {\n            sum += Character.getNumericValue(c);\n\
    \        }\n        return sum;", "        return s.chars()\n            .map(e\
    \ -> (char) e)\n            .filter(e -> e >= '0' && e <= '9')\n            .mapToInt(e\
    \ -> e) - '0';", '        return Arrays.stream(s.toCharArray()).filter(Character::isDigit).mapToInt(Character::codePointAt).get();',
  "        int sum = 0;\n        for( int i = 0; i < s.length(); i++ ) {\n       \
    \     char c = s.charAt( i );\n            if ( c >= '0' && c <= '9' )\n     \
    \           sum += c - '0';\n            else\n                sum += 'A' - c\
    \ + 1;\n        }\n        return sum;", "        char[] characters = s.toCharArray();\n\
    \        int sum = 0;\n        for(char c : characters) {\n            if(Character.isUpperCase(c))\
    \ {\n                sum += Character.getNumericValue(c);\n            }\n   \
    \     }\n        return sum;", "        int sum = 0;\n        for (Character c\
    \ : s.toUpperCase().toCharArray()) {\n            sum += c;\n        }\n     \
    \   return sum;", "        char[] c = s.toCharArray();\n        int result = 0;\n\
    \        for (int i = 0; i < c.length; i++) {\n            if (Character.isUpperCase(c[i]))\
    \ result += (c[i] - 'A' + 1);\n        }\n        return result;", "        //\
    \ SOLUTION\n        int sum = 0;\n        for (int i = 0; i < s.length(); i++)\
    \ {\n            if (s.charAt(i) > 'Z') {\n                sum -= (s.charAt(i)\
    \ - 'A' + 1);\n            } else {\n                sum += (s.charAt(i) - 'A'\
    \ + 1);\n            }\n        }\n        return sum;", "        int sum = 0;\n\
    \        for (int i = 0; i < s.length(); i++) {\n            if (Character.isUpperCase(s.charAt(i)))\n\
    \                sum += s.charAt(i);\n        }\n        return sum;", "     \
    \   String uppers = s.replaceAll(\"\\\\p{IsDigit}\", \"\").toUpperCase();\n  \
    \      return Character.getNumericValue(uppers.charAt(0));", "        int sum\
    \ = 0;\n        for (char c : s.toCharArray()) {\n            sum += (int) c;\n\
    \        }\n        return sum;", '        return s.chars().filter(Character::isLetter).mapToObj(c
    -> (char) c).map(Integer::valueOf).reduce(Integer::sum);', "        int sum =\
    \ 0;\n        for(char c: s.toCharArray()) {\n            sum += c - 'A' + 1;\n\
    \        }\n        return sum;", "        long sum = 0;\n        for (char c\
    \ : s.toCharArray()) {\n            if (c >= '0' && c <= '9') {\n            \
    \    sum += c - '0';\n            }\n        }\n        return (int) sum;", " \
    \       int sum = 0;\n        int sum1 = 0;\n        char[] digits = s.toCharArray();\n\
    \        Arrays.sort(digits);\n        for (char c : digits) {\n            sum\
    \ += (int) c;\n        }\n        return sum;", "        return s.chars()\n  \
    \          .mapToObj(c -> (char) c)\n            .filter(Character::isUpperCase)\n\
    \            .map(Character::getNumericValue)\n            .sum();", '        return
    s.chars().mapToObj(ch -> (char) ch).filter(c->Character.isUpperCase(c)).reduce(0,
    Integer::sum);', "        // Write your code here\n        StringBuilder builder\
    \ = new StringBuilder();\n        builder.append(s);\n        char chars[] = builder.toString().toCharArray();\n\
    \        int sum = 0;\n        for (int i = 0; i < chars.length; i++) {\n    \
    \        if (Character.isUpperCase(chars[i])) {\n                sum += (chars[i]\
    \ - 'A');\n            }\n        }\n        return sum;", "        int sum =\
    \ 0;\n        int length = s.length();\n        for (int i = 0; i < length; ++i)\
    \ {\n            int ch = s.charAt(i);\n            if (ch >= 'A' && ch <= 'Z')\
    \ {\n                sum = sum + ch - 'A' + 10;\n            }\n        }\n  \
    \      return sum;", "        int sum = 0;\n        for (int i = 0; i < s.length();\
    \ i++) {\n            if (Character.isUpperCase(s.charAt(i))) {\n            \
    \    sum += s.charAt(i);\n            }\n        }\n        return sum;", "  \
    \      char[] chars = s.toCharArray();\n        int sum = 0;\n        for (char\
    \ c : chars) {\n            if (Character.isUpperCase(c)) {\n                sum\
    \ += Character.getNumericValue(c);\n            }\n        }\n        return sum;",
  "        int sum = 0;\n        for(int i = 0; i<s.length(); i++) {\n           \
    \ char c = s.charAt(i);\n            int code = Character.getNumericValue(c);\n\
    \            sum += code;\n        }\n        return sum;", "        int[] sum\
    \ = new int[256];\n        for (char c : s.toCharArray()) {\n            sum[c]\
    \ += 1;\n        }\n        int sumSoFar = 0;\n        for (char c : s.toCharArray())\
    \ {\n            sumSoFar += sum[c];\n        }\n        return sumSoFar;", " \
    \       int sum = 0;\n        for (char c : s.toCharArray()) {\n            if\
    \ (c >= 'A' && c <= 'Z') {\n                sum += c - 'A' + 1;\n            }\n\
    \        }\n        return sum;", "        // Solution\n        int sum = 0;\n\
    \        for (char c : s.toCharArray()) {\n            if (c >= 'A' && c <= 'Z')\
    \ {\n                sum += (int) c;\n            }\n        }\n        return\
    \ sum;", "        if(s == null || s.isEmpty()) return 0;\n        \n        int\
    \ sum = 0; \n        \n        // get all chars ascii value\n        // upper\
    \ case is char.IsUpper()\n        char[] chars = s.toCharArray();\n        \n\
    \        for(char c : chars) {\n            if(Character.isUpperCase(c)) sum+=c;\n\
    \        }\n        \n        return sum;", "        int sum = 0;\n        for\
    \ (char c : s.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n\
    \                sum += Character.getNumericValue(c);\n            }\n       \
    \ }\n        return sum;", '        // your code', "        return s.chars().map(c\
    \ -> (char) c).filter(c -> c >= 'A' && c <= 'Z').mapToInt().sum();", '        return
    s.length();', "        return IntStream.rangeClosed(0, s.length()).filter(i ->\
    \ s.charAt(i) >= 'A' && s.charAt(i) <= 'Z').sum();", '        IntStream.range(0,
    s.length()).map(i -> s.charAt(i) + 64).sum();', "        return s.chars().filter(c\
    \ -> c >= 'a' && c <= 'z').sum() - s.chars().filter(c -> c >= 'A' && c <= 'Z').sum();",
  "        return s.chars().filter(Character::isDigit).map(c -> c - '0').sum();",
  "        return s.chars().filter(c -> c >= 'A' && c <= 'Z').sum();", "        //\
    \ Your code goes here\n        return 0;", "        int sum = 0;\n        for\
    \ (int i = 0; i < s.length(); i++) {\n            char ch = s.charAt(i);\n   \
    \         if (ch >= '0' && ch <= '9') {\n                sum += ch - '0';\n  \
    \          }\n        }\n        return sum;", "        if (s.isEmpty()){\n  \
    \          return 0;\n        }\n\n        //the below will keep track of the\
    \ upper characters in the string in a Set so that it can be easily summed\n  \
    \      Set<Character> upperChars = new HashSet<>();\n\n        //the below will\
    \ keep track of the length of the string\n        int length = 0;\n\n        //loop\
    \ through the string\n        for (int i = 0; i < s.length(); i++) {\n       \
    \     //add the ascii value of the character at position i to the total\n    \
    \        length += s.charAt(i);\n\n            //if the character is greater than\
    \ the ascii value of 'A', add it to the Set\n            if (s.charAt(i) > 'A')\
    \ {\n                upperChars.add(s.charAt(i));\n            }\n        }\n\n\
    \        //return the sum of the length of the string and the sum of the upper\
    \ characters only\n        return length + upperChars.stream().mapToInt(x -> x).sum();",
  "        if (s == null) {\n            throw new IllegalArgumentException(\"String\
    \ is null.\");\n        }\n        int sum = 0;\n        boolean hasUpperCase\
    \ = false;\n        int sumUpper = 0;\n        for (int i = 0; i < s.length();\
    \ i++) {\n            char c = s.charAt(i);\n            if (Character.isUpperCase(c))\
    \ {\n                sumUpper++;\n            } else {\n                if (sumUpper\
    \ > 0) {\n                    sum += sumUpper;\n                    sumUpper =\
    \ 0;\n                }\n                sum += c;\n                hasUpperCase\
    \ = true;\n            }\n        }\n        if (sumUpper > 0) {\n           \
    \ sum += sumUpper;\n        }\n        return sum;", "        int sum = 0;\n \
    \       for (char c : s.toUpperCase().toCharArray())\n            sum += (char)\
    \ c;\n        return sum;", "        int sum = 0;\n        for(char c : s.toCharArray())\
    \ {\n            if(Character.isUpperCase(c)) sum += Character.getNumericValue(c);\n\
    \        }\n        return sum;", "        // Write your code here\n        //\
    \ Solution\n        int sum = 0;\n        for (int i = 0; i < s.length(); i++)\
    \ {\n            char c = s.charAt(i);\n            if (Character.isUpperCase(c))\
    \ {\n                sum += Character.getNumericValue(c);\n            }\n   \
    \     }\n        return sum;", "        int sum = 0;\n        for (int i = 0;\
    \ i < s.length(); i++) {\n            if (s.charAt(i) >= 'A' && s.charAt(i) <=\
    \ 'Z') {\n                sum += s.charAt(i);\n            }\n        }\n    \
    \    return sum;", "        List<Integer> upperChars = new ArrayList<>();\n  \
    \      for (char c : s.toCharArray()) {\n            if (Character.isUpperCase(c))\
    \ {\n                upperChars.add((int) c);\n            }\n        }\n    \
    \    return upperChars.stream().mapToInt(Integer::intValue).sum();", "       \
    \ // Write code here\n        // return 0;\n        int sum = 0;\n        for(char\
    \ c : s.toCharArray()) {\n            if(Character.isUpperCase(c)) {\n       \
    \         sum += (int)c;\n            }\n        }\n        return sum;", "  \
    \      String upper = s.toUpperCase();\n        char upperChar;\n        int sum\
    \ = 0;\n\n        for (char ch : upper.toCharArray()) {\n            upperChar\
    \ = ch;\n            if (Character.isDigit(ch)) {\n                sum = sum +\
    \ Character.getNumericValue(upperChar);\n            }\n        }\n\n        return\
    \ sum;", "        \n        return s.chars().filter(e -> e >= 65 && e <= 90).reduce((a,\
    \ b) -> a + b);", "        int sum = 0;\n        for(char c : s.toCharArray())\
    \ {\n            if(Character.isUpperCase(c))\n                sum+=(int)c;\n\
    \        }\n        return sum;", "        char[] arr = s.toCharArray();\n   \
    \     char sum = 0;\n        for (int i = 0; i < arr.length; i++) {\n        \
    \    if (Character.isUpperCase(arr[i])) {\n                sum += Character.getNumericValue(arr[i]);\n\
    \            }\n        }\n        return sum;", "        Character c;\n     \
    \   int sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n           \
    \ c = s.charAt(i);\n            if (Character.isUpperCase(c)) {\n            \
    \    sum += c - 'A' + 1;\n            }\n        }\n        return sum;", "  \
    \      int sum = 0;\n        for(char c: s.toCharArray()){\n            if(Character.isUpperCase(c)){\n\
    \                sum += (int)c;\n            }\n        }\n        return sum;",
  '        return s.chars().filter(c -> Character.isUpperCase(c)).mapToObj(c -> c
    + 48).sum();', "        String result = \"\";\n        for (int i = 0; i < s.length();\
    \ i++) {\n            result += s.charAt(i);\n        }\n        return result.chars().map(c\
    \ -> (int)c).sum();", "        int sum = 0;\n        for (int i = 0; i<s.length();\
    \ i++) {\n            int c = s.charAt(i);\n            if (Character.isLetter(c))\
    \ {\n                sum += Character.getNumericValue(c);\n            }\n   \
    \     }\n        return sum;", "        int result = 0;\n        for (char ch\
    \ : s.toCharArray()) {\n            result += (int) ch;\n        }\n        return\
    \ result;", '        return s.chars().map(c -> Character.getNumericValue(c)).sum();',
  "        int sum = 0;\n        char c;\n        for (int i = 0; i < s.length();\
    \ i++) {\n            c = s.charAt(i);\n            if (c >= '0' && c <= '9')\
    \ {\n                sum += c - '0';\n            } else {\n                sum\
    \ += 1;\n            }\n        }\n        return sum;", "        int sum = 0;\n\
    \        for(int i = 0; i < s.length(); i++) {\n            int charValue = s.charAt(i)\
    \ - 'a';\n            if(charValue < 0 || charValue > 9) throw new IllegalArgumentException(\"\
    Invalid Character\");\n            sum += charValue;\n        }\n        return\
    \ sum;", "        char digit = 0;\n        int sum = 0;\n        for (int i =\
    \ 0; i < s.length(); i++) {\n            if (s.charAt(i) >= 'A' && s.charAt(i)\
    \ <= 'Z') {\n                digit = s.charAt(i);\n                sum += (int)digit;\n\
    \            }\n        }\n        return sum;", "        int sum = 0;\n     \
    \   for (int i = 0; i < s.length(); i++) {\n            if (Character.isUpperCase(s.charAt(i)))\
    \ {\n                sum += (s.charAt(i) - 65);\n            }\n        }\n  \
    \      return sum;", "        int sum = 0;\n        for (char c : s.toCharArray())\
    \ {\n            sum += Character.getNumericValue(c);\n        }\n        return\
    \ sum;", '        return s.replaceAll("[^a-zA-Z]", "").chars().mapToObj(c -> (char)c).map(c
    -> Character.getNumericValue(c)).sum();', "        int sum = 0;\n        int length\
    \ = s.length();\n        for (int i = 0; i < length; i++) {\n            int charCode\
    \ = s.charAt(i) - 'A';\n            if (charCode >= 0 && charCode < 26) {\n  \
    \              sum += charCode + 1;\n            }\n        }\n        return\
    \ sum;", "        String upper = s.toUpperCase();\n        int sum = 0;\n    \
    \    for (int i = 0; i < upper.length(); i++) {\n            int ascii = upper.charAt(i)\
    \ - 'A' + 1;\n            sum += ascii;\n        }\n        return sum;", "  \
    \      int result = 0;\n        for (char c : s.toCharArray()) {\n           \
    \ if (Character.isUpperCase(c)) {\n                result += Character.getNumericValue(c);\n\
    \            }\n        }\n        return result;", "        return s.chars().mapToObj(c\
    \ -> (char) c).collect(Collectors.toList()).stream()\n                .map(Character.toLowerCase).map(c\
    \ -> (int) c).sum();", "        Map<Character, Integer> map = new TreeMap<>();\n\
    \        for (int i = 0; i < s.length(); i++) {\n            int ascii = s.charAt(i)\
    \ - 'A';\n            if (map.containsKey(ascii)) {\n                int old =\
    \ map.put(ascii, map.get(ascii) + 1);\n                if (old > 1) {\n      \
    \              map.put(ascii, old);\n                } else {\n              \
    \      map.remove(ascii);\n                }\n            } else {\n         \
    \       map.put(ascii, 1);\n            }\n        }\n        return Collections.min(map.values());",
  "        // split into string array\n        String[] characters = s.split(\"\"\
    );\n        // convert all string characters to int array\n        int[] intCharacters\
    \ = Arrays.stream(characters).mapToInt(Integer::parseInt).toArray();\n       \
    \ int sum = 0;\n        // iterate over int array\n        for (int i = 0; i <\
    \ intCharacters.length; i++) {\n            // add sum to sum if character is\
    \ uppercase letter or number\n            if (intCharacters[i] > 47 && intCharacters[i]\
    \ < 58) {\n                sum = sum + intCharacters[i];\n            }\n    \
    \    }\n        return sum;", "        int sum = 0;\n        for (int i = 0; i\
    \ < s.length(); i++) {\n            int code = s.codePointAt(i);\n           \
    \ if (Character.isUpperCase(code)) sum += Character.getNumericValue(code);\n \
    \       }\n        return sum;", '        return s.chars().filter(Character::isDigit).sum();',
  '        return s.replaceAll("[\\D]", "").chars().mapToObj(Integer::valueOf).reduce(Integer::sum);',
  "        long sum = 0;\n        for(char c: s.toCharArray()) {\n            sum\
    \ += (int)c;\n        }\n        return sum;", "        long sum = 0;\n      \
    \  for (char c : s.toCharArray()) {\n            sum += c - 48;\n        }\n \
    \       return (int) sum;", "        // Write your Java code here\n        if(s\
    \ == null || s.length() == 0){\n            return 0;\n        }\n        char[]\
    \ chars = s.toCharArray();\n        Arrays.sort(chars);\n        int sum = 0;\n\
    \        for(int i = 0; i< chars.length; i++){\n            if(Character.isUpperCase(chars[i])){\n\
    \                sum += Character.getNumericValue(chars[i]);\n            }\n\
    \        }\n        return sum;", "        int sum = 0;\n        for(int i = 0;\
    \ i < s.length(); i++) {\n            sum = sum + s.charAt(i) - 'A' + 1;\n   \
    \     }\n        return sum;", "        return s.chars()\n                .mapToObj(i\
    \ -> (char) i)\n                .filter(i -> i > 'a')\n                .mapToInt(i\
    \ -> i)\n                .sum();", "        return s.chars().map(c -> (int) c).filter(c\
    \ -> c >= 'A' && c <= 'Z').sum();", "        Integer sum = 0;\n        for (int\
    \ i = 0; i < s.length(); i++) {\n            sum += s.charAt(i) - 'A' + 1;\n \
    \       }\n        return sum;", "        // Your code here\n        int sum =\
    \ 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (Character.isUpperCase(s.charAt(i)))\
    \ {\n                sum += Character.getNumericValue(s.charAt(i));\n        \
    \    }\n        }\n        return sum;", "        int sum = 0;\n        for (char\
    \ c : s.toCharArray()) {\n            sum += (c - 'A') + 10;\n        }\n    \
    \    return sum;", "        // Your code here\n        Map<Character, Integer>\
    \ result = new HashMap<>();\n        for (Character c : s.toCharArray()) {\n \
    \           if (Character.isUpperCase(c))\n                result.put(c, result.getOrDefault(c\
    \ - 'A' + 1, 0) + 1);\n        }\n        return result.values().stream().mapToInt(Integer::intValue).sum();",
  "        StringBuilder sb = new StringBuilder();\n        int sum = 0;\n       \
    \ for (char c : s.toCharArray())\n            sb.append(c);\n        sb.deleteCharAt(sb.length()\
    \ - 1);\n        for (int i = sb.length() - 1; i >= 0; i--)\n            if (sb.charAt(i)\
    \ >= 'a' && sb.charAt(i) <= 'z')\n                sum += sb.charAt(i);\n     \
    \   return sum;", "        int result = 0;\n        for(char c : s.toCharArray())\
    \ {\n            result += Character.getNumericValue(c);\n        }\n        return\
    \ result;", "        int sum = 0;\n        for (int i=0; i<s.length(); i++) {\n\
    \            if (Character.isUpperCase(s.charAt(i))) {\n                sum +=\
    \ Character.getNumericValue(s.charAt(i));\n            }\n        }\n        return\
    \ sum;", "        int sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n\
    \            int n = s.charAt(i) - 'A' + 1;\n            if (n > 9) {\n      \
    \          sum += n;\n            }\n        }\n        return sum;", "      \
    \  int sum = 0;\n        for (char c: s.toCharArray()) {\n            sum += Character.isUpperCase(c)\
    \ ? Character.getNumericValue(c) : 0;\n        }\n        return sum;", "    \
    \    int sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n          \
    \  char c = s.charAt(i);\n            if (Character.isUpperCase(c))\n        \
    \        sum += Character.getNumericValue(c);\n        }\n        return sum;",
  '        return s.length() == 0 ? 0 : (s.chars().filter(Character::isDigit).mapToInt(Character::getNumericValue).sum());',
  "        int sum = 0;\n        int sumOfUpper = 0;\n        for (char c : s.toCharArray())\
    \ {\n            if (Character.isUpperCase(c)) {\n                sumOfUpper +=\
    \ Character.getNumericValue(c);\n            }\n        }\n        sum = sumOfUpper;\n\
    \        return sum;", "        // Complete the code here\n\n        StringBuilder\
    \ digitStringBuilder = new StringBuilder(s.length());\n        int sum = 0;\n\
    \        for(int i = 0; i < s.length(); i++)\n        {\n            char c =\
    \ s.charAt(i);\n            if(c>=65 && c<=90)\n            {\n              \
    \  sum = sum+(c-65);\n            }\n            else if(c>=97 && c<=122)\n  \
    \          {\n                sum = sum+(c-97);\n            }\n            else\n\
    \            {\n                sum = sum+1;\n            }\n        }\n     \
    \   return sum;", "        int sum = 0;\n        int length = s.length();\n  \
    \      for (int i = 0; i < length; i++) {\n            int character = s.charAt(i)\
    \ - 'A' + 1;\n            sum += character;\n        }\n        return sum;",
  "        char[] chars = s.toCharArray();\n        int sum = 0;\n        for (int\
    \ i = 0; i < chars.length; i++) {\n            if (Character.isUpperCase(chars[i]))\
    \ sum += chars[i];\n        }\n        return sum;", '        return s.chars().filter(x
    -> x > 64 && x < 91).sum();', "        // Your code goes here\n        int sum\
    \ = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n\
    \            int ascii = c - '0';\n            sum += ascii;\n        }\n    \
    \    return sum;", "        // Your code goes here\n        return 0;", "    \
    \    return s.chars()\n            .mapToInt(i -> Character.getNumericValue(i))\n\
    \            .sum();", "        // Your code here\n        int sum = 0;\n    \
    \    boolean upperCase = true;\n        for(char c : s.toCharArray()){\n     \
    \       if((c >= 'a' && c <= 'z') || c >= 'A' && c <= 'Z'){\n                upperCase\
    \ = true;\n            }else if(c >= 'a' && c <= 'z'){\n                upperCase\
    \ = false;\n            }else{\n                upperCase = false;\n         \
    \   }\n            sum += upperCase ? c : c - 'a' + 1;\n        }\n        return\
    \ sum;", "        int sum = 0;\n        for(int i = 0; i < s.length(); i++) {\n\
    \            sum += s.charAt(i) - 'A' + 1;\n        }\n        return sum;", " \
    \       HashMap<Character, Integer> map = new HashMap<Character, Integer>();\n\
    \        for(Character c : s.toCharArray()){\n            Integer i = map.get(c);\n\
    \            if(i == null){\n                map.put(c, 1);\n            } else\
    \ {\n                map.put(c, i + 1);\n            }\n        }\n        return\
    \ IntStream.range(0, s.length()).filter(i -> map.get(s.charAt(i)).intValue() >\
    \ 1).reduce(0, Integer::sum);", "        int sum = 0;\n        // Write your logic\
    \ here\n        for (int i = 0; i < s.length(); i++) {\n            if (Character.isUpperCase(s.charAt(i)))\
    \ {\n                sum += s.charAt(i);\n            }\n        }\n        return\
    \ sum;", "        int sum = 0;\n        for (char c : s.toCharArray()) {\n   \
    \         sum += (char) (c);\n        }\n        return sum;", "        int sum\
    \ = 0;\n        for (int i = 0; i < s.length(); i++) {\n            int c = s.codePointAt(i);\n\
    \            if (c >= 65 && c <= 90) sum += c - 65;\n        }\n        return\
    \ sum;", "        int sum = 0;\n        for (char c : s.toUpperCase().toCharArray())\
    \ {\n            sum += (int) c;\n        }\n        return sum;", "        String\
    \ result = \"\";\n        for (char c : s.toCharArray()){\n            if (Character.isUpperCase(c)){\n\
    \                result += Character.getNumericValue(c);\n            }\n    \
    \    }\n        return Integer.parseInt(result);", "        int sum = 0;\n   \
    \     for (char c : s.toCharArray()) {\n            sum += Character.isUpperCase(c)\
    \ ? Character.getNumericValue(c) : 0;\n        }\n        return sum;", "    \
    \    int sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n          \
    \  char c = s.charAt(i);\n            if (Character.isUpperCase(c)) {\n      \
    \          sum += Character.getNumericValue(c);\n            }\n        }\n  \
    \      return sum;", "        int sum = 0;\n        for (char c : s.toCharArray())\
    \ {\n            int charValue = (int) c;\n            sum += charValue / 97;\n\
    \        }\n        return sum;", "        // Solution\n        int sum = 0;\n\
    \        char[] chars = s.toCharArray();\n        for (int i = 0; i < chars.length;\
    \ i++) {\n            char c = chars[i];\n            if (c >= '0' && c <= '9')\
    \ {\n                sum = sum + c - '0';\n            }\n        }\n        return\
    \ sum;", "        int sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n\
    \            if (Character.isUpperCase(s.charAt(i))) {\n                sum +=\
    \ Character.getNumericValue(s.charAt(i));\n            }\n        }\n        return\
    \ sum;", "        int sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n\
    \            int sum2 = Character.getNumericValue(s.charAt(i));\n            sum\
    \ = sum + sum2;\n        }\n        return sum;", "        // Solution\n     \
    \   int sum = 0;\n        for(int i = 0; i<s.length(); i++) {\n            int\
    \ digit = Character.getNumericValue(s.charAt(i));\n            sum = sum + digit;\n\
    \        }\n        return sum;", "        int sum = 0;\n        for (char c :\
    \ s.toCharArray()) {\n            if (Character.isUpperCase(c))\n            \
    \    sum += Character.getNumericValue(c);\n        }\n        return sum;", " \
    \       if (s == null || s.isEmpty()) {\n            throw new IllegalArgumentException(\"\
    Input is empty\");\n        }\n        final int max = 65535;\n        int sum\
    \ = 0;\n        final char digit = '0';\n        for (char c : s.toCharArray())\
    \ {\n            int code = Character.codePointAt(s, c);\n            if (code\
    \ < min || code > max) {\n                throw new IllegalArgumentException(\n\
    \                        \"Character code not in range. \" + c + \" \" + s);\n\
    \            }\n            sum += code - digit;\n        }\n        return sum;",
  "        int sum = 0;\n        for(char c : s.toCharArray()) {\n            sum\
    \ += (int)c;\n        }\n        return sum;", "        int sum = 0;\n       \
    \ for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n\
    \            if (c >= 'A' && c <= 'Z')\n                sum += c - 'A' + 1;\n\
    \        }\n        return sum;", "        int sum = 0;\n        for (char c :\
    \ s.toCharArray()) {\n            if (Character.isUpperCase(c))\n            \
    \    sum += Character.getNumericValue(c);\n        }\n        return sum;", " \
    \       int sum = 0;\n        for (char c : s.toCharArray()) {\n            sum\
    \ += Character.getNumericValue(c);\n        }\n        return sum;", "       \
    \ int result = 0;\n        // Convert input to char array\n        char[] charArray\
    \ = s.toCharArray();\n        // Iterate over char array\n        for (int i =\
    \ 0; i < charArray.length; i++) {\n            // If character is uppercase add\
    \ its ASCII code value to result\n            if (Character.isUpperCase(charArray[i]))\
    \ {\n                result += charArray[i];\n            }\n        }\n     \
    \   return result;", "        char c;\n        int sum = 0;\n        for (int\
    \ i = 0; i < s.length(); i++) {\n            c = s.charAt(i);\n            sum\
    \ += (char) c;\n        }\n        return sum;", '        // Your Code Here',
  "        int sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n        \
    \    if (Character.isUpperCase(s.charAt(i))) sum += s.charAt(i) - 'A' + 1;\n \
    \       }\n        return sum;", "        // Write your code here\n        StringBuilder\
    \ sb = new StringBuilder(s);\n        int sum = 0;\n        for(int i = 0; i <\
    \ s.length(); i++) {\n            sum += Integer.valueOf(sb.get(i));\n       \
    \ }\n        return sum;", "        // Your code goes here\n        int sum =\
    \ 0;\n        for (char c : s.toUpperCase().toCharArray()) {\n            sum\
    \ += c;\n        }\n        return sum;", "        return s.chars().filter((t)\
    \ -> {\n            return Character.isUpperCase((char) t);\n        }).mapToObj(Integer::intValue).sum();",
  "        int sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n        \
    \    int digit = Character.getNumericValue(s.charAt(i));\n            if (digit\
    \ > 0)\n                sum += digit;\n        }\n        return sum;", "    \
    \    /*\n         * Declare three integers to store sum, the current ASCII code\
    \ of the\n         * current character, and sum up to the current ASCII code.\n\
    \         */\n        int sum = 0;\n        int currentCode;\n        /*\n   \
    \      * Get the length of the string.\n         */\n        int len = s.length();\n\
    \        /*\n         * Iterate over all the characters.\n         */\n      \
    \  for (int i = 0; i < len; i++) {\n            /*\n             * Get the character\
    \ at the current index.\n             */\n            char c = s.charAt(i);\n\
    \            /*\n             * Get ASCII code of the current character.\n   \
    \          */\n            currentCode = Character.getNumericValue(c);\n     \
    \       /*\n             * Add the current ASCII code to the sum with the current\n\
    \             * character subtracted.\n             */\n            sum += currentCode\
    \ - 'a';\n        }\n        return sum;", "        int sum = 0;\n        for(int\
    \ i=0; i < s.length(); i++) {\n            sum += (s.charAt(i) >= 'A' && s.charAt(i)\
    \ <= 'Z') ? s.charAt(i) - 'A' + 'a' : s.charAt(i);\n        }\n        return\
    \ sum;", '        return s.chars().mapToObj(c -> (char) c).filter(Character::isLetter).mapToInt(c
    -> (int) c).sum();', "        int sum = 0;\n        int len = s.length();\n  \
    \      for (int i = 0; i < len; i++) {\n            int val = s.charAt(i) - 'A'\
    \ + 1;\n            if (val > 0)\n                sum += val;\n        }\n   \
    \     return sum;", "        int sum = 0;\n        for (int i = 0; i < s.length();\
    \ i++) {\n            if (Character.getType(s.charAt(i)) > Character.UPPERCASE_LETTER)\
    \ {\n                sum += Character.getNumericValue(s.charAt(i));\n        \
    \    }\n        }\n        return sum;", "        int sum = 0;\n        for (char\
    \ c : s.toCharArray()) {\n            if (c >= '0' && c <= '9') {\n          \
    \      sum += c - '0';\n            }\n        }\n        return sum;", "    \
    \    String[] split = s.split(\"\");\n        return split.map(Character::getNumericValue).reduce((acc,\
    \ val) -> (val > 0) ? acc + val : acc);", "        int sum = 0;\n        for (int\
    \ i = 0; i < s.length(); i++) {\n            int ch = s.charAt(i);\n         \
    \   if (ch >= 'A' && ch <= 'Z')\n                sum += ch - 'A' + 10;\n     \
    \       else if (ch >= 'a' && ch <= 'z')\n                sum += ch - 'a' + 10;\n\
    \            else\n                sum += ch;\n        }\n        return sum;",
  "        int sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n        \
    \    int ascii = s.charAt(i) - 'a' + 10;\n            sum += ascii;\n        }\n\
    \        return sum;", "        int sum = 0;\n        for (int i = 0; i < s.length();\
    \ i++) {\n            sum += (s.charAt(i) - 'A' + 1);\n        }\n        return\
    \ sum;", "        int sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n\
    \            String sub = s.substring(i, i + 1);\n            int c = 0;\n   \
    \         for (int j = sub.charAt(0); j >= 'A'; j--) {\n                c += (int)\
    \ (sub.charAt(0) - 'A' + 1);\n            }\n            sum += c;\n        }\n\
    \        return sum;", "        // Your code here\n        int sum = 0;\n    \
    \    for (int i = 0; i < s.length(); i++) {\n            int c = s.charAt(i);\n\
    \            if (Character.isUpperCase(c))\n                sum += c;\n      \
    \  }\n        return sum;", "        int[] codes = Arrays.stream(s.split(\"\"\
    )).mapToInt(Integer::parseInt).toArray();\n        int sum = 0;\n        for (int\
    \ c : codes) {\n            if (c >= 65 && c <= 90)\n                sum += c;\n\
    \        }\n        return sum;", '        return s.chars().mapToObj(i -> Character.getNumericValue(i)).filter(i
    -> i > 64 && i <= 91).sum();', "        int sum = 0;\n        for (int i = 0;\
    \ i < s.length(); i++) {\n            if (Character.isUpperCase(s.charAt(i)))\n\
    \                sum += s.charAt(i);\n        }\n        return sum;", "     \
    \   Set<Character> charsSet = new HashSet<>();\n        for(char ch : s.toCharArray())\
    \ {\n            charsSet.add(ch);\n        }\n        int sum = 0;\n        for(Character\
    \ ch : charsSet) {\n            int c = ch;\n            sum += c / 10;\n    \
    \        int d = c - sum * 10;\n            sum += d / 10;\n        }\n      \
    \  return sum;", "        List<Character> result = new ArrayList<>();\n      \
    \  for (char c : s.toCharArray()) {\n            if (Character.isUpperCase(c))\n\
    \                result.add(c);\n        }\n        return result.stream().mapToInt(c\
    \ -> c.codePointAt(0) - 0x41).sum();", "        int sum = 0;\n        for(int\
    \ i = s.length() - 1; i >= 0; i--) {\n            if('a' == s.charAt(i) || 'A'\
    \ == s.charAt(i)) {\n                sum += s.charAt(i);\n            }\n    \
    \    }\n        return sum;", "        String upperChars = s.replaceAll(\"\\\\\
    W\", \" \");\n        Map<Character, Integer> map = new HashMap<Character, Integer>();\n\
    \        for (int i = 0; i < upperChars.length(); i++) {\n            char upperChar\
    \ = upperChars.charAt(i);\n            Integer intVal = map.get(upperChar);\n\
    \            if (intVal == null) {\n                map.put(upperChar, 1);\n \
    \           } else {\n                map.put(upperChar, intVal + 1);\n      \
    \      }\n        }\n        return map.values().stream().mapToInt(Integer::intValue).sum();",
  "        // Write your code here\n        int sum = 0;\n        for (int i = 0;\
    \ i < s.length(); i++) {\n            sum += s.charAt(i) - 'A' + 1;\n        }\n\
    \        return sum;", "        System.out.println(s);\n        int sum = 0;\n\
    \        for (char c : s.toCharArray()) {\n            if (Character.isUpperCase(c))\
    \ sum += (int)c;\n        }\n        return sum;", "        // Solution\n    \
    \    int sum = 0;\n        for(int i = 0; i < s.length(); i++) {\n           \
    \ if((int)s.charAt(i) > 128) {\n                sum += s.charAt(i);\n        \
    \    }\n        }\n        return sum;", "        int sum = 0;\n        for(int\
    \ i = 0; i < s.length(); i++) {\n            sum = sum + ((int) s.charAt(i));\n\
    \        }\n        return sum;", "        int sum = 0;\n        for (int i =\
    \ 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if\
    \ (Character.isUpperCase(c)) {\n                sum += Character.getNumericValue(c);\n\
    \            }\n        }\n        return sum;", "        int sum = 0;\n     \
    \   for(int i = 0; i < s.length(); i++) {\n            char ch = s.charAt(i);\n\
    \            if(Character.isUpperCase(ch)) {\n                sum += Character.getNumericValue(ch);\n\
    \            }\n        }\n        return sum;", "        int sum = 0;\n     \
    \   for (char c : s.toCharArray()) {\n            int code = c >= 'A' && c <=\
    \ 'Z' ? c - 'A' : -1;\n            if (code >= 0) sum += code;\n        }\n  \
    \      return sum;", "        if (s == null) {\n            throw new IllegalArgumentException(\"\
    Null string input\");\n        }\n        int sum = 0;\n        for (char c :\
    \ s.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n          \
    \      sum += Character.getNumericValue(c);\n            }\n        }\n      \
    \  return sum;", "        return s.chars().mapToObj(c -> (char) c).filter(ch ->\
    \ ('A' <= ch && ch <= 'Z')).reduce(0, Integer::sum);", "        \n        int\
    \ sum = 0;\n        \n        for (int i = 0; i < s.length(); i++) {\n       \
    \     char c = s.charAt(i);\n            if (c >= 'a' && c <= 'z') {\n       \
    \         sum = sum + c -'a' + 10;\n            }\n        }\n        \n     \
    \   return sum;", "        int sum = 0;\n        for (char c : s.toCharArray())\n\
    \            sum += Character.getNumericValue(c);\n        return sum;", "   \
    \     char[] chars = s.toCharArray();\n        int sum = 0;\n        for(int i\
    \ = 0; i < chars.length; i++) {\n            sum = sum + chars[i] - 'A' + 1;\n\
    \        }\n        return sum;", "        int sum = 0;\n        for (int i =\
    \ 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n            if\
    \ (Character.isUpperCase(c)) {\n                sum += c - 'A' + 10;\n       \
    \     }\n        }\n        return sum;", "        String result = \"\";\n   \
    \     int sum = 0;\n        for(char c : s.toCharArray()) {\n            sum +=\
    \ (int)c;\n        }\n        return sum;", "        int sum = 0;\n        for(int\
    \ i = 0; i < s.length(); i++) {\n            sum += s.charAt(i) + getAsciiFromCode(s.charAt(i));\n\
    \        }\n        return sum;", "        return s.chars()\n                .mapToObj(i\
    \ -> (char) i)\n                .collect(groupingBy(i -> Character.getNumericValue(i),\
    \ summingInt(i -> Character.getNumericValue(i))))\n                .entrySet()\n\
    \                .stream()\n                .collect(Collectors.toMap((Map.Entry<Integer,\
    \ Integer>) entry -> entry.getValue().sum(),\n                        entry ->\
    \ entry.getKey(), (a, b) -> a + b));", '        return s.chars().filter(Character::isDigit).mapToObj(c
    -> (int) c).sum();', "        \n        \n        // YOUR CODE HERE\n        int\
    \ sum = 0;\n        int length = s.length();\n        for(int i = 0; i < length;\
    \ i++){\n            char ch=s.charAt(i);\n            if(ch >= 'a' && ch <= 'z'){\n\
    \                sum += ch -'a';\n            }\n        }\n        \n       \
    \ return sum;", "        long result = 0;\n        for (char c : s.toCharArray())\
    \ {\n            result += c >= 'A' ? c - 'A' + 10 : c - '0';\n        }\n   \
    \     return (int) result;", '        return s.codePoints().filter(Character::isDigit).sum();',
  "        int sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n        \
    \    int digit = s.charAt(i) - '0';\n            sum += digit * Math.pow(10, s.length()\
    \ - i - 1);\n        }\n        return sum;", "        int sum = 0;\n        for\
    \ (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n    \
    \        if (Character.isUpperCase(c)) {\n                sum += c - 'A' + 1;\n\
    \            } else {\n                sum += c;\n            }\n        }\n \
    \       return sum;", "        int sum = 0;\n        for (char c : s.toCharArray())\
    \ {\n            int val = Character.getNumericValue(c);\n            if (val\
    \ > 0) {\n                sum += val;\n            }\n        }\n        return\
    \ sum;", "        int result = 0;\n        for(int i = 0; i < s.length(); i++)\
    \ {\n            int sum = 0;\n            int index = i;\n            for(int\
    \ j = 0; j < s.length(); j++) {\n                if(s.charAt(j) > 64 && s.charAt(j)\
    \ < 91) sum = sum + (s.charAt(j) - 64);\n                else if(s.charAt(j) >\
    \ 96 && s.charAt(j) < 123)\n                    sum = sum + (s.charAt(j) - 96);\n\
    \            }\n            if(sum > result) result = sum;\n        }\n      \
    \  return result;", "        // Write your code here\n        int sum = 0;\n \
    \       for(int i=0;i<s.length();i++){\n            sum += s.charAt(i) + s.charAt(i)*10;\n\
    \        }\n        return sum;", '        return s.chars().filter(Character::isDigit).sum();',
  "        // Your code here\n        int sum = 0;\n        for (int i=0; i<s.length();\
    \ i++){\n            int index = s.indexOf(i+1);\n            if((index >=0) &&\
    \ Character.isUpperCase(s.charAt(index))){\n                sum = sum + s.charAt(index)\
    \ - 'A' + 1;\n            }\n        }\n        return sum;", "        int sum\
    \ = 0;\n        for (char c : s.toCharArray()) {\n            sum += Character.getNumericValue(c);\n\
    \        }\n        return sum;", "        int sum = 0;\n        for(char c: s.toCharArray())\
    \ {\n            int value = Character.getNumericValue(c);\n            if(value\
    \ > 128) sum += value;\n        }\n        return sum;", "        int sum = 0;\n\
    \        for(int i = 0; i<s.length(); i++) {\n            char c = s.charAt(i);\n\
    \            if(Character.isUpperCase(c)) {\n                sum = sum + Character.getNumericValue(c);\n\
    \            }\n        }\n        return sum;", "        double sum = 0;\n  \
    \      for (char c: s.toCharArray()) {\n            if (c >= 'a' && c <= 'z')\
    \ {\n                sum += (c - 'a' + 1);\n            }\n        }\n       \
    \ return (int) Math.ceil(sum);", "        int sum = 0;\n        for (char ch :\
    \ s.toCharArray()) {\n            sum += (ch-64);\n        }\n        return sum;",
  "        // Your code here\n        List<Integer> result = new ArrayList<>();\n\
    \        for(int i = 0; i < s.length(); i++){\n            if (Character.isUpperCase(s.charAt(i))){\n\
    \                int asciiCode = (int)s.charAt(i);\n                result.add(asciiCode);\n\
    \            }\n        }\n        return IntStream.of(result).sum();", "    \
    \    // Solution\n        int sum = 0;\n        for(int i=0; i<s.length(); i++)\
    \ {\n            int code = s.codePointAt(i);\n            if((code >= 65) &&\
    \ (code <= 90)) {\n                sum += code - 65;\n            } else if((code\
    \ >= 97) && (code <= 122)) {\n                sum += code - 97;\n            }\n\
    \        }\n        return sum;", "        int sum = 0;\n        char[] array\
    \ = s.toCharArray();\n        for (char c : array) {\n            sum += Character.getNumericValue(c);\n\
    \        }\n        return sum;", "        if (s == null || s.isEmpty())\n   \
    \         return 0;\n        HashMap<Character, Integer> map = new HashMap<>();\n\
    \        int sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n      \
    \      char c = s.charAt(i);\n            if (map.containsKey(c))\n          \
    \      map.put(c, map.get(c) + 1);\n            else\n                map.put(c,\
    \ 1);\n        }\n        for (Map.Entry<Character, Integer> e : map.entrySet())\n\
    \            if (e.getValue() >= 2)\n                sum += e.getKey().charValue();\n\
    \        return sum;", "        // split string into array of chars\n        char[]\
    \ arr = s.toCharArray();\n        // sum the ascii codes of the char array\n \
    \       int sum = 0;\n        for (char c : arr) {\n            sum += (int) c;\n\
    \        }\n        return sum;", "        int sum = 0;\n        for (char c :\
    \ s.toCharArray()) {\n            sum += Character.getNumericValue(c);\n     \
    \   }\n        return sum;", "        // Your code here\n        int sum = 0;\n\
    \        for(char c:s.toCharArray()){\n            if (Character.isUpperCase(c)){\n\
    \                sum += Character.getNumericValue(c);\n            }\n       \
    \ }\n        return sum;", "        List<Character> digits = Arrays.stream(s.toCharArray()).filter(c\
    \ -> Character.isDigit(c)).collect(Collectors.toList());\n        return digits.stream().mapToInt(c\
    \ -> c - '0').sum();", "        // Your code goes here\n        \n        int\
    \ sum = 0;\n        \n        for(int i = 0; i < s.length(); i++) {\n        \
    \    if(Character.getType(s.charAt(i)) == Character.UPPER_CASE) {\n          \
    \      sum += s.charAt(i);\n            }\n        }\n        return sum;\n  \
    \      ", '        return s.chars().filter(c -> c > 64 && c < 91).reduce(0, (a,
    b) -> a + b);', "        int sum = 0;\n        for (char c : s.toCharArray())\
    \ {\n            sum += (int) c;\n        }\n        return sum;", '        return
    s.chars().mapToObj(c -> (char) c).filter(c -> c > 64).sum();', "        int sum\
    \ = 0;\n        for(int i = 0; i < s.length(); i++) {\n            sum += (int)\
    \ s.charAt(i);\n        }\n        return sum;", "        char[] chars = s.toCharArray();\n\
    \        Arrays.sort(chars);\n        int sum = 0;\n        for (int i = 0; i\
    \ < chars.length; i++)\n            sum += chars[i] - 'A' + 1;\n        return\
    \ sum;", "        // Solution\n        return s.chars().filter(Character::isLetter).mapToObj(i\
    \ -> i * 64 + 96).sum();", "        int sum = 0;\n        for (int i = 0; i <\
    \ s.length(); i++) {\n            int c = s.charAt(i);\n            if (c >= 'A'\
    \ && c <= 'Z') {\n                sum = sum + c - 'A' + 10;\n            }\n \
    \       }\n        return sum;", "        int result = 0;\n        for(char ch\
    \ : s.toCharArray()) {\n            result += ch - 'A' + 1;\n        }\n     \
    \   return result;"]
stop_tokens:
- "    }\n    //"
- "    }\n    p"
- "    }\n}"
- "\n    }\n"
