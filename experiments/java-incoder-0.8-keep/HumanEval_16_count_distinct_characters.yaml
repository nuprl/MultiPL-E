name: HumanEval_16_count_distinct_characters
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Given a string, find out how many distinct characters (regardless\
  \ of case) does it consist of\n    // >>> count_distinct_characters('xyzXYZ')\n\
  \    // 3\n    // >>> count_distinct_characters('Jerry')\n    // 4\n    public static\
  \ int countDistinctCharacters(String string) {\n"
tests: "return 0;\n    }\n    public static void main(String[] args) {\n    assert(countDistinctCharacters((\"\
  \")) == (0));\n    assert(countDistinctCharacters((\"abcde\")) == (5));\n    assert(countDistinctCharacters((\"\
  abcdecadeCADE\")) == (5));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\"\
  )) == (1));\n    assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5));\n\
  \    }\n\n}\n"
completions: ['        return string.length();', "        // create char array for\
    \ faster lookup\n        char[] charArray = string.toLowerCase().toCharArray();\n\
    \n        // for each char check if it is in the charArray\n        int count\
    \ = 0;\n        for (char c : string.toLowerCase().toCharArray()) {\n        \
    \    if (charArray.contains(c)) {\n                count++;\n            }\n \
    \       }\n\n        return count;", "        int count = 0;\n        for(int\
    \ i=0; i<string.length(); i++) {\n            char c = string.charAt(i);\n   \
    \         if (Character.isLetter(c)) {\n                count++;\n           \
    \ }\n        }\n        return count;", "        int distinctCharacters = 0;\n\
    \        if (string == null) return -1;\n        for (char c : string.toCharArray())\
    \ {\n            if (Character.isUpperCase(c) || Character.isLowerCase(c)) {\n\
    \                distinctCharacters++;\n            }\n        }\n        return\
    \ distinctCharacters;", '        return string.chars().distinct().count();', " \
    \       return string.toLowerCase()\n                .chars()\n              \
    \  .mapToObj(i -> String.valueOf((char)i))\n                .distinct()\n    \
    \            .count();", '        return string.chars().distinct().count();',
  '        return string.chars().distinct().count();', "        // Convert the string\
    \ into an array of characters\n        char[] stringArray = string.toCharArray();\n\
    \n        // Initialize a variable for the number of distinct characters found\n\
    \        int distinctCharacters = 0;\n\n        // Create a for loop to traverse\
    \ each character in the string array\n        for (char c : stringArray) {\n \
    \           // Check to see if the character is a lowercase letter\n         \
    \   if (Character.isLowerCase(c)) {\n                // If the character is lowercase,\
    \ then add 1 to the distinct character count\n                distinctCharacters\
    \ = distinctCharacters + 1;\n            }\n        }\n\n        // Return the\
    \ distinct character count\n        return distinctCharacters;", "        Map<Character,\
    \ Integer> counts = new HashMap<>();\n        for (char c : string.toCharArray())\
    \ {\n            counts.merge(c, counts.getOrDefault(c, 0) + 1, Integer::sum);\n\
    \        }\n        return counts.keySet().stream().distinct().count();", "  \
    \      if (string.length() == 0) return 0;\n        char[] array = string.toCharArray();\n\
    \        Arrays.sort(array);\n        int uniqueChars = 0;\n        for (int i\
    \ = 0; i < array.length; i++) {\n            if (i != 0 && array[i] != array[i-1])\
    \ uniqueChars++;\n        }\n        return uniqueChars;", "        String str\
    \ = string.toLowerCase();\n        HashMap<Character, Integer> charCount = new\
    \ HashMap<>();\n        for (int i = 0; i < str.length(); i++) {\n           \
    \ char c = str.charAt(i);\n            if (charCount.containsKey(c)) {\n     \
    \           charCount.put(c, charCount.get(c) + 1);\n            } else {\n  \
    \              charCount.put(c, 1);\n            }\n        }\n\n        return\
    \ charCount.values().stream().distinct().count();", "        Set<String> characters\
    \ = new HashSet<>();\n        characters.addAll(string.toLowerCase().chars().mapToObj(String::valueOf).toSet());\n\
    \        return characters.size();", "        int result = 1;\n        for (int\
    \ i = 0; i < string.length(); i++) {\n            result += string.charAt(i) ==\
    \ string.charAt(i)\n                    ? 0\n                    : Character.isUpperCase(string.charAt(i))\n\
    \                            ? 1\n                            : 2;\n        }\n\
    \        return result;", "        int count = 0;\n        Set<Character> set\
    \ = new HashSet<>();\n        for (char c : string.toCharArray()) {\n        \
    \    set.add(Character.toLowerCase(c));\n        }\n        count = set.size();\n\
    \        return count;", "        int[] counts = new int[26];\n        for (char\
    \ character : string.toCharArray()) {\n            if (character >= 'a' && character\
    \ <= 'z')\n                counts[character - 'a']++;\n            else if (character\
    \ >= 'A' && character <= 'Z')\n                counts[character - 'A']++;\n  \
    \          else\n                throw new IllegalArgumentException(\"Characher\
    \ \" + character + \" cannot be represented as a lowercase and uppercase letter\"\
    );\n        }\n        return Arrays.stream(counts).sum();", "        List<Character>\
    \ distinctChars = new ArrayList<Character>();\n        distinctChars.addAll(Arrays.asList(string.toUpperCase().toCharArray()));\n\
    \        distinctChars.addAll(Arrays.asList(string.toLowerCase().toCharArray()));\n\
    \        return distinctChars.size();", "        // This will be the count of\
    \ distinct chars\n        int count = 0;\n        // Initialize to false for checking\
    \ whether current char has already been used\n        boolean used = false;\n\
    \        // Iterate through the string one char at a time\n        for(int i =\
    \ 0; i < string.length(); i++){\n            // Check if the current char is used\
    \ already and increment the count\n            if(used && string.charAt(i) ==\
    \ string.charAt(i - 1)){\n                count++;\n            } else {\n   \
    \             // If not, set used equal to true and increment the count\n    \
    \            used = true;\n                count++;\n            }\n        }\n\
    \        return count;", "        List<Character> chars = Arrays.stream(string.toCharArray()).collect(Collectors.toList());\n\
    \        Set<Character> distinctChars = chars.stream().distinct().collect(Collectors.toSet());\n\
    \        return distinctChars.size();", "        int[] chars = new int[26];\n\
    \        Arrays.fill(chars, 1);\n\n        for (char c : string.toCharArray())\
    \ {\n            chars[c - 'a']++;\n        }\n\n        return Arrays.stream(chars).distinct().count();",
  "        String[] chars = new String[string.length()];\n        for (int i = 0;\
    \ i < string.length(); i++) {\n            chars[i] = string.charAt(i);\n    \
    \    }\n        return Arrays.stream(chars).distinct().count();", "        //\
    \ YOUR CODE HERE\n        return string.length() - string.replaceAll(\"[^A-Z]\"\
    , \"\").length();", '        return string.chars().distinct().count();', '        return
    string.chars().distinct().count();', "        String[] charArray = string.split(\"\
    \");\n        int distinctCount = 0;\n        for (int i = 0; i < charArray.length;\
    \ i++) {\n            char c = charArray[i].charAt(0);\n            if (Character.isLetterOrDigit(c))\
    \ {\n                distinctCount++;\n            }\n        }\n        return\
    \ distinctCount;", '        return string.length() + (string.toLowerCase().hashCode()
    & string.toUpperCase().hashCode());', "        if (string.isEmpty()) {\n     \
    \       return 0;\n        }\n        Set<Character> uniqueCharacters = new HashSet<>();\n\
    \        for (int i = 0; i < string.length(); i++) {\n            Character character\
    \ = string.charAt(i);\n            if (Character.isLetter(character)) {\n    \
    \            uniqueCharacters.add(character);\n            }\n        }\n    \
    \    return uniqueCharacters.size();", "        Set<Character> characterSet =\
    \ new HashSet<>();\n        for (char character : string.toCharArray()) {\n  \
    \          characterSet.add(character);\n        }\n        return characterSet.size();",
  "        int res = 0;\n        for (char c : string.toCharArray()) {\n         \
    \   if (Character.isLetter(c)) {\n                ++res;\n            }\n    \
    \    }\n        return res;", "        int count = 0;\n        if (string == null\
    \ || string.length() < 1) {\n            return count;\n        }\n        string\
    \ = string.toLowerCase();\n        string = string.replaceAll(\"\\\\s+\", \"\"\
    );\n        string = string.substring(1);\n        string = string.trim();\n \
    \       for (char c : string.toCharArray()) {\n            count++;\n        }\n\
    \        return count;", '        // TODO: Write your solution', "        // Initialize\
    \ to 1 the first character\n        int count = 1;\n        // Iterate over every\
    \ other character\n        for (int i = 1; i < string.length(); i++) {\n     \
    \       // Iterate over every other character and increment the counter\n    \
    \        for (int j = i; j < string.length(); j++) {\n                count++;\n\
    \            }\n        }\n        // Return count\n        return count;", " \
    \       if (string.isEmpty())\n            return 0;\n\n        Map<Character,\
    \ Integer> characterMap = new HashMap<Character, Integer>();\n        for (int\
    \ i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n\
    \            int currentCount = characterMap.get(c);\n            if (currentCount\
    \ == null) {\n                characterMap.put(c, 1);\n            } else {\n\
    \                characterMap.put(c, currentCount + 1);\n            }\n     \
    \   }\n\n        int count = 0;\n        for (Map.Entry<Character, Integer> entry\
    \ : characterMap.entrySet()) {\n            if (entry.getValue() > 1)\n      \
    \          count++;\n        }\n\n        return count;", "        int count =\
    \ 0, lastChar = string.charAt(string.length() - 1);\n        char[] chars = string.toCharArray();\n\
    \n        // for case insensitivity, convert all characters to upper case\n  \
    \      char[] upperCase = chars.stream().map(Character -> Character.toUpperCase(Character)).collect(toList()).toArray(new\
    \ char[chars.length]);\n\n        // ignore case for now, convert to lower case\
    \ for comparison\n        // for case insensitivity, convert all characters to\
    \ upper case\n        char[] lowerCase = chars.stream().map(Character -> Character.toLowerCase(Character)).collect(toList()).toArray(new\
    \ char[chars.length]);\n\n        // get the count of different characters\n \
    \       for (int i = 0; i < chars.length; i++) {\n            // ignore case for\
    \ now, convert to lower case for comparison\n            if (chars[i].equalsIgnoreCase(lastChar))\
    \ {\n                continue;\n            }\n\n            for (int j = 0; j\
    \ < chars.length; j++) {\n                if (chars[j].equalsIgnoreCase(lastChar))\
    \ {\n                    continue;\n                }\n\n                if (chars[i].equals(chars[j]))\
    \ {\n                    count++;\n                    lastChar = chars[j];\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     return count;", "        if (string == null || string.isEmpty()) return\
    \ 0;\n        Set<Character> set = new HashSet<>(string.toCharArray());\n    \
    \    return set.size();", '        return string.chars().distinct().count();',
  "        // Write your code here\n        Set<Character> chars = new HashSet<Character>();\n\
    \        chars.addAll(string.split(\"\"));\n        return chars.size();", " \
    \       int result = 0;\n        int current;\n        for (int i = 0; i < string.length();\
    \ i++) {\n            current = string.charAt(i);\n            result = result\
    \ + Character.isUpperCase(current) ? 1 : 0;\n        }\n        return result;",
  "        if (string == null) {\n            return 0;\n        }\n        return\
    \ string.chars().distinct().count();", "        String lowercase = string.toLowerCase();\n\
    \        String uppercase = string.toUpperCase();\n        Map<Character, Integer>\
    \ counts = new HashMap<>();\n        // Count unique chars\n        for (char\
    \ c : string.toCharArray()) {\n            counts.put(c, counts.getOrDefault(c,\
    \ 0) + 1);\n        }\n        int totalCount = 0;\n        for (char c : lowercase.toCharArray())\
    \ {\n            if (counts.containsKey(c)) {\n                totalCount += counts.get(c);\n\
    \                counts.remove(c);\n            }\n        }\n        for (char\
    \ c : uppercase.toCharArray()) {\n            if (counts.containsKey(c)) {\n \
    \               totalCount += counts.get(c);\n                counts.remove(c);\n\
    \            }\n        }\n        return totalCount;", "        List<Character>\
    \ charList = new ArrayList<>();\n        for (char c : string.toCharArray()) {\n\
    \            charList.add(c);\n        }\n        int distinctCharacters = 0;\n\
    \        for (char c : charList) {\n            distinctCharacters += 1;\n   \
    \     }\n        return distinctCharacters;", "        Set<Character> set = new\
    \ HashSet<>();\n        for(int i = 0; i < string.length(); i++) {\n         \
    \   char c = string.charAt(i);\n            set.add(c);\n        }\n        return\
    \ set.size();", "        Map<Character, Integer> map = new HashMap<>();\n    \
    \    for (char c: string.toCharArray()) {\n            Integer val = map.get(c);\n\
    \            if (val != null) {\n                map.put(c, val + 1);\n      \
    \      } else {\n                map.put(c, 1);\n            }\n        }\n  \
    \      int count = 0;\n        for (Map.Entry<Character, Integer> entry : map.entrySet())\
    \ {\n            if (entry.getValue() > 1)\n                count++;\n       \
    \ }\n        return count;", "        return StreamSupport.stream(new ArrayDeque<>(),\
    \ false)\n                .mapToInt(c -> string.chars().filter(Character::isLetter).distinct().count()).sum();",
  "        Set<Character> set = new HashSet<>();\n        for (char c : string.toCharArray())\
    \ {\n            boolean present = set.contains(c);\n            set.add(Character.toUpperCase(c));\n\
    \            set.add(Character.toLowerCase(c));\n            if (!present) {\n\
    \                set.add(c);\n            }\n        }\n        return set.size();",
  "        int distinctChars = 0;\n        for (char ch : string.toCharArray()) {\n\
    \            char toUpper = Character.toUpperCase(ch);\n            if (string.toLowerCase().indexOf(toUpper)\
    \ == -1) {\n                distinctChars++;\n            }\n        }\n     \
    \   return distinctChars;", "        Map<Character, Integer> map = new HashMap<>();\n\
    \        for (char c : string.toCharArray())\n            map.put(c, map.getOrDefault(c,\
    \ 0) + 1);\n        return map.size();", "        int count = 0;\n        for\
    \ (char c: string.toLowerCase().toCharArray()) {\n            int idx = string.indexOf(c,0);\n\
    \            if (idx > 0) {\n                ++count;\n                string\
    \ = string.substring(idx+1);\n            } else {\n                break;\n \
    \           }\n        }\n        return count;", "        HashSet<Character>\
    \ set = new HashSet<>();\n        for (Character character : string.toCharArray())\
    \ {\n            set.add(character);\n        }\n        return set.size();",
  "        return string.chars()\n            .map(i -> String.valueOf((char)i))\n\
    \            .distinct()\n            .count();", '        return string.replaceAll("[^a-zA-Z]",
    "").length();', "        int count = 0;\n        for (Character c : string.toCharArray())\
    \ {\n            count += string.charAt(string.length() - string.length() - 1).toLowerCase().indexOf(c)\
    \ == -1 ? 1 : 0;\n        }\n        return count;", "        HashMap<Character,\
    \ Integer> map = new HashMap<Character, Integer>();\n        for (Character ch\
    \ : string.toCharArray()) {\n            Integer count = map.get(ch);\n      \
    \      if (count == null) {\n                map.put(ch, 1);\n            } else\
    \ {\n                map.put(ch, count + 1);\n            }\n        }\n\n   \
    \     int count = 0;\n        for (Integer count : map.values()) {\n         \
    \   count += count;\n        }\n        return count;", "        if (string ==\
    \ null || string.length() <= 0) {\n            return 0;\n        }\n\n      \
    \  // Initialize count\n        int distinctCharacters = 0;\n\n        // Add\
    \ distinct characters one by one\n        for (int i = 0; i < string.length();\
    \ i++) {\n            if (string.charAt(i) == string.charAt(i).toLowerCase())\
    \ {\n                distinctCharacters++;\n            }\n        }\n\n     \
    \   return distinctCharacters;", "        int distinctCount = 0;\n        for\
    \ (int i = 0; i < string.length(); i++) {\n            char currentChar = string.charAt(i);\n\
    \            if (Character.isLetter(currentChar)) {\n                int currentLowerCaseChar\
    \ = Character.toLowerCase(currentChar);\n                if (Character.isLetter(currentLowerCaseChar))\
    \ {\n                    distinctCount++;\n                } else {\n        \
    \            distinctCount += currentChar;\n                }\n            } else\
    \ {\n                distinctCount++;\n            }\n        }\n        return\
    \ distinctCount;", "        int counter = 0;\n        int distinct_characters\
    \ = 0;\n        for (char c : string.toCharArray()) {\n            if (Character.toLowerCase(c)\
    \ == c) counter++;\n            distinct_characters += 1;\n        }\n       \
    \ return distinct_characters;", "        // Your code here\n        List<String>\
    \ charactersList = new ArrayList<>();\n        for (char c : string.toCharArray())\
    \ {\n            if (Character.isLetter(c)) {\n                charactersList.add(String.valueOf(c));\n\
    \            }\n        }\n        return charactersList.size();", "        if\
    \ (string == null || string.isEmpty())\n            return 0;\n        // We map\
    \ each character in the string to its ASCII value\n        Map<Character, Integer>\
    \ map = new HashMap<>();\n        for (char c : string.toCharArray()) {\n    \
    \        Integer i = map.get(c);\n            if (i == null) {\n             \
    \   i = map.put(c, 1);\n            } else {\n                i++;\n         \
    \   }\n        }\n\n        // We use a set to remove duplicates\n        Set<Character>\
    \ set = new LinkedHashSet<>(map.keySet());\n\n        // Finally, we return the\
    \ size of the set\n        return set.size();", "        HashSet<Character> hs\
    \ = new HashSet<>();\n        for (char ch : string.toCharArray()) {\n       \
    \     hs.add(ch);\n        }\n        return hs.size();", "        HashMap<Character,\
    \ Integer> characterCount = new HashMap<>();\n        for (Character character\
    \ : string.toLowerCase().toCharArray()) {\n            if (!characterCount.containsKey(character))\
    \ {\n                characterCount.put(character, 1);\n            } else {\n\
    \                characterCount.put(character, characterCount.get(character) +\
    \ 1);\n            }\n        }\n        return characterCount.values().stream().distinct().count();",
  "        Set<Character> set = new HashSet<>();\n        int count = 0;\n       \
    \ for (char c : string.toCharArray()) {\n            if (set.add(c)) {\n     \
    \           count++;\n            }\n        }\n        return count;", "    \
    \    Arrays.stream(string.split(\"\"))\n                .map(Character -> Character.toLowerCase(Character.toUpperCase(Character)))\n\
    \                .collect(Collectors.toSet()).size(); // number of distinct characters",
  "        Map<Character, Integer> counts = new HashMap<>();\n        for(char c:\
    \ string.toLowerCase().toCharArray()){\n            counts.merge(c, counts.getOrDefault(c,\
    \ 0) + 1);\n        }\n        return counts.size();", "        int distinctChars\
    \ = 0;\n        if (string == null || string.isEmpty()) {\n            return\
    \ 0;\n        }\n        for (int i = 0; i < string.length(); i++) {\n       \
    \     char currentChar = string.charAt(i);\n            String lowerChar = Character.toString(currentChar).toLowerCase();\n\
    \            if (lowerChar.equals(string.toLowerCase())) {\n                distinctChars++;\n\
    \            }\n        }\n        return distinctChars;", "        // Write your\
    \ code here\n        char[] charArray = string.toCharArray();\n        Arrays.sort(charArray);\n\
    \        int uniqueCharacters = 0;\n        int index = 0;\n        while (charArray[index]\
    \ != string.length()) {\n            uniqueCharacters++;\n            index++;\n\
    \        }\n        return uniqueCharacters;", "        if (string == null) {\n\
    \            return 0;\n        }\n\n        int count = 0;\n        char[] chars\
    \ = string.toCharArray();\n        for (char c : chars) {\n            if (Character.isLetterOrDigit(c))\
    \ {\n                count = count + 1;\n            }\n        }\n\n        return\
    \ count;", "        char[] charArray = string.toCharArray();\n        Map<Character,\
    \ Integer> charFrequency = new HashMap<>();\n        for (char c : charArray)\
    \ {\n            if (charFrequency.containsKey(c)) {\n                charFrequency.put(c,\
    \ charFrequency.get(c) + 1);\n            } else {\n                charFrequency.put(c,\
    \ 1);\n            }\n        }\n        return charFrequency.size();", "    \
    \    int count = 0;\n        for( int i = 0; i < string.length(); i++ ) {\n  \
    \          if( string.charAt( i ) >=65 && string.charAt( i ) <=90 || string.charAt(\
    \ i ) >=97 && string.charAt( i ) <=122 ) {\n                count++;\n       \
    \     }\n        }\n        return count;", "        // Your code here\n     \
    \   return 0;", "        Map<Character, Integer> countMap = new HashMap<>();\n\
    \        for (Character c : string.toCharArray()) {\n            if (countMap.containsKey(c))\
    \ {\n                countMap.put(c, countMap.get(c) + 1);\n            } else\
    \ {\n                countMap.put(c, 1);\n            }\n        }\n        return\
    \ countMap.values().stream().distinct().count();", "        Map<Character, Integer>\
    \ charCount = new HashMap<>();\n        for (char character : string.toCharArray())\
    \ {\n            int previousCount = charCount.get(character);\n            charCount.put(character,\
    \ previousCount == null ? 1 : previousCount + 1);\n        }\n        return charCount.size();",
  '        return string.chars().distinct().count();', "        int count = 0;\n \
    \       for(int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n\
    \            count = Character.toLowerCase(c) - Character.toUpperCase(c) + 1;\n\
    \        }\n        return count;", "        int result = 1;\n        for (int\
    \ i = 0; i < string.length(); ++i) {\n            if (string.charAt(i) != string.charAt(i\
    \ - 1)) {\n                result ++;\n            }\n        }\n        return\
    \ result;", "        HashMap<Character, Integer> hash = new HashMap<>();\n   \
    \     int count = 0;\n        for (char c : string.toCharArray()) {\n        \
    \    char lowercase = Character.toLowerCase(c);\n            if (!hash.containsKey(lowercase))\
    \ {\n                hash.put(lowercase, 0);\n                count++;\n     \
    \       }\n            hash.put(lowercase, hash.get(lowercase) + 1);\n       \
    \ }\n        return count;", '        return string.chars().distinct().count();',
  "        return string.chars()\n            // Filter out unwanted characters\n\
    \            .filter(c -> Character.isUpperCase(c) || Character.isLowerCase(c))\n\
    \            // Count distinct characters\n            .distinct()\n         \
    \   // Count how many characters we have\n            .count();", "        int\
    \ count = 0;\n        for( int i = 0; i < string.length(); i++ ) {\n         \
    \   if( string.charAt(i) == string.charAt(i) ) {\n                count++;\n \
    \           }\n        }\n        return count;", "        int distinctCharacters\
    \ = 0;\n        for (int i = 0; i < string.length(); i++) {\n            if (string.charAt(i)\
    \ == string.charAt(i)) {\n                distinctCharacters++;\n            }\n\
    \        }\n        return distinctCharacters;", "        int result = 0;\n  \
    \      for (int i = 0; i < string.length(); i++) {\n            result += string.charAt(i)\
    \ - 'a';\n        }\n        return result;", "        Set<Character> set = new\
    \ HashSet<>();\n        int distinctCharacters = 0;\n        for(int i=0; i<string.length();\
    \ i++) {\n            char c = string.charAt(i);\n            set.add(Character.toLowerCase(c));\n\
    \            set.add(Character.toUpperCase(c));\n        }\n        for (char\
    \ c : set) {\n            if (Character.isLetter(c)) {\n                distinctCharacters++;\n\
    \            }\n        }\n        return distinctCharacters;", "        int n\
    \ = 0;\n        Set<Character> set = new HashSet<>();\n        for (char c : string.toCharArray())\
    \ {\n            set.add(c);\n            n += set.size();\n        }\n      \
    \  return n;", "        Set<Character> set = new LinkedHashSet<>();\n        for\
    \ (int i = 0; i < string.length(); i++) {\n            set.add(string.charAt(i));\n\
    \        }\n        return set.size();", "        // Create an array containing\
    \ all the characters in the given string.\n        char[] charArray = string.toCharArray();\n\
    \n        // Create an array containing all the distinct characters in the given\
    \ string.\n        char[] distinctCharArray = new char[26];\n\n        // Add\
    \ each distinct character in the given string to distinctCharArray.\n        for\
    \ (int i = 0; i < charArray.length; i++) {\n            char character = (char)\
    \ i;\n            distinctCharArray[(int) character]++;\n        }\n\n       \
    \ // Return the length of distinctCharArray.\n        return distinctCharArray.length;",
  "        Set<Character> characterSet = new HashSet<>();\n\n        for (int i =\
    \ 0; i < string.length(); i++) {\n            char character = string.charAt(i);\n\
    \n            characterSet.add(character);\n        }\n\n        return characterSet.size();",
  "        return string.chars()\n            .mapToObj(i -> (char) i)\n         \
    \   .collect(\n                Collectors.toList())\n            .stream()\n \
    \           .distinct()\n            .count();", '        return string.length();',
  "        Set<Character> charSet = new HashSet<>();\n        for (int i = 0; i <\
    \ string.length(); i++) {\n            charSet.add(string.charAt(i));\n      \
    \  }\n        return charSet.size();", '        return string.length() - string.chars().distinct().count();',
  "        if (string == null || string.isEmpty()) {\n            throw new IllegalArgumentException(\"\
    String is null or empty\");\n        }\n        int count = 0;\n        Map<Character,\
    \ Integer> counts = new HashMap<>();\n        for (Character c : string.toCharArray())\
    \ {\n            if (!counts.containsKey(c)) {\n                counts.put(c,\
    \ 1);\n            } else {\n                counts.put(c, counts.get(c) + 1);\n\
    \            }\n        }\n        count = counts.size();\n        return count;",
  "        Set<Character> distinctCharacters = new HashSet<>();\n        for(int i=0;\
    \ i<string.length(); i++) {\n            distinctCharacters.add(string.charAt(i));\n\
    \        }\n        return distinctCharacters.size();", "        if (string ==\
    \ null || string.isEmpty()) {\n            return 0;\n        }\n        return\
    \ string\n            .chars()\n            .distinct()\n            .count(string::equals);",
  "        int[] count = new int[26];\n        for (int i = 0; i < string.length();\
    \ i++) {\n            char c = string.charAt(i);\n            count[c]++;\n  \
    \      }\n        Arrays.stream(count).forEach(a -> a = a / 2);\n        return\
    \ Arrays.stream(count).reduce(1, Integer::sum);", "        int count = 0;\n  \
    \      for (char c : string.toCharArray()) {\n            if (Character.isUpperCase(c))\n\
    \                count += Character.toLowerCase(c) - 'A' + 1;\n            else\n\
    \                count += c - 'A' + 1;\n        }\n        return count;", " \
    \       int distinct_characters = 0;\n        int length = string.length();\n\
    \        \n        for (char ch : string.toCharArray()) {\n            distinct_characters\
    \ += string.contains(Character.toString(ch)) ? 1 : 0;\n        }\n        \n \
    \       return distinct_characters;", "        int count = 0;\n        for (char\
    \ c : string.toCharArray()) {\n            String lowerCaseC = String.valueOf(c).toLowerCase();\n\
    \            String upperCaseC = String.valueOf(c).toUpperCase();\n          \
    \  if (lowerCaseC.equals(upperCaseC)) {\n                count++;\n          \
    \  }\n        }\n        return count;", "        ArrayList<Character> list =\
    \ Arrays.stream(string.toCharArray()).map(c -> Character.toLowerCase(c)).collect(Collectors.toList());\n\
    \        HashSet<Character> set = new HashSet<>(list);\n        return set.size();",
  "        Set<Character> charSet = new HashSet<>();\n        for (char c : string.toCharArray())\
    \ {\n            if (!charSet.contains(c)) {\n                charSet.add(c);\n\
    \            }\n        }\n        return charSet.size();", "        int count\
    \ = 0;\n        if (string == null) {\n            return 0;\n        }\n    \
    \    Set<Character> charSet = new HashSet<>();\n        char[] charArray = string.toCharArray();\n\
    \        for (char c : charArray) {\n            charSet.add(c);\n        }\n\
    \        count = charSet.size();\n        return count;", "        Set<String>\
    \ uniqueLetters = new HashSet<>();\n        for(char c : string.toCharArray())\
    \ {\n            uniqueLetters.add(c);\n        }\n        return uniqueLetters.size();",
  '        return string.chars().distinct().count();', "        Set<Character> set\
    \ = new HashSet<>();\n        for (int i = 0; i < string.length(); i++) {\n  \
    \          char current = string.charAt(i);\n            if (!set.contains(current))\
    \ {\n                set.add(current);\n            }\n        }\n        return\
    \ set.size();", "        Map<Character, Integer> charCounts = string.chars()\n\
    \                .mapToObj(c -> (char) c)\n                .collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting()));\n        int count = 0;\n        for (Integer count\
    \ : charCounts.values())\n            count += count;\n        return count;",
  '        return string.chars().distinct().count();', "        if (string == null\
    \ || string.length() <= 1) return 0;\n        Map<Character, Integer> map = new\
    \ HashMap<>();\n        for (int i = 0; i < string.length(); i++) {\n        \
    \    Character c = string.charAt(i);\n            Integer value = map.get(c);\n\
    \            if (value == null) map.put(c, 1);\n            else map.put(c, value\
    \ + 1);\n        }\n        return map.values().stream().distinct().count();",
  "        char[] chars = string.toCharArray();\n        Set<Character> set = new\
    \ HashSet<Character>();\n        for (char c : chars) {\n            set.add(c.toLowerCase());\n\
    \        }\n        int count = 0;\n        for (char c : set) {\n           \
    \ count++;\n        }\n        return count;", "        int result = 1;\n    \
    \    for(int i = 0; i < string.length(); i++) {\n            char ch1 = string.charAt(i);\n\
    \            for(int j = i; j < string.length(); j++) {\n                char\
    \ ch2 = string.charAt(j);\n                if(ch1 == ch2)\n                  \
    \  break;\n                else\n                    result = result + 1;\n  \
    \          }\n        }\n        return result;", "        if (string == null\
    \ || string.isEmpty()) return 0;\n        int count = 1;\n        for (int i =\
    \ 0; i < string.length(); i++) {\n            String firstChar = string.substring(0,\
    \ 1);\n            String otherChars = string.substring(i, i + 1);\n         \
    \   String firstCharLowerCase = firstChar.toLowerCase();\n            String otherCharsLowerCase\
    \ = otherChars.toLowerCase();\n            if (firstCharLowerCase.equals(otherCharsLowerCase))\
    \ {\n                count++;\n            }\n        }\n        return count;",
  "        List<Character> list = new ArrayList<>(string.length());\n        for (char\
    \ c : string.toCharArray()) {\n            list.add(Character.toUpperCase(c));\n\
    \            list.add(Character.toLowerCase(c));\n            list.add(Character.toUpperCase(c));\n\
    \        }\n        Set<Character> uniques = new HashSet<>(list);\n        return\
    \ uniques.size();", "        int count = 0, letter = 0;\n        for (char c :\
    \ string.toCharArray()) {\n            if (Character.isLetter(c)) {\n        \
    \        letter++;\n            }\n            if (letter == 1) {\n          \
    \      count++;\n            }\n            letter = 0;\n        }\n        return\
    \ count;", "        Map<Character, Integer> charCounts = new HashMap<>();\n  \
    \      for (char c : string.toCharArray()) {\n            if (charCounts.containsKey(c))\
    \ {\n                charCounts.put(c, charCounts.get(c) + 1);\n            }\
    \ else {\n                charCounts.put(c, 1);\n            }\n        }\n  \
    \      return charCounts.values().stream().distinct().count();", "        if (string.isEmpty())\
    \ {\n            return 0;\n        }\n\n        Map<String, Integer> map = new\
    \ HashMap<>();\n        for (char c : string.toCharArray()) {\n            String\
    \ lowerCase = Character.toString((char) c).toUpperCase();\n            String\
    \ upperCase = Character.toString((char) c).toLowerCase();\n            map.put(lowerCase,\
    \ map.get(lowerCase) == null ? 1 : map.get(lowerCase) + 1);\n            map.put(upperCase,\
    \ map.get(upperCase) == null ? 1 : map.get(upperCase) + 1);\n        }\n     \
    \   return map.values().stream().distinct().count();", '        return string.chars().distinct().count();',
  "        int count = 0;\n        for (int i = 0; i < string.length(); i++) {\n \
    \           char c = string.charAt(i);\n            count += (Character.isLowerCase(c)\
    \ || Character.isUpperCase(c)) ? 1 : 0;\n        }\n        return count;", " \
    \       // TODO write your Java code here\n        return 0;", "        int count\
    \ = 0;\n        for(char character : string.toCharArray()) {\n            char\
    \ lowerCase = Character.toLowerCase(character);\n            char upperCase =\
    \ Character.toUpperCase(character);\n            if(lowerCase != upperCase) {\n\
    \                count++;\n            }\n        }\n        return count;", " \
    \       // TODO: Write your logic here\n        return 0;", "        Map<Character,\
    \ Integer> map = new HashMap<>();\n        for(char c : string.toCharArray())\
    \ {\n            Integer count = map.get(c);\n            if(count != null) {\n\
    \                map.put(c, count + 1);\n            } else {\n              \
    \  map.put(c, 1);\n            }\n        }\n        return map.values().stream().distinct().count();",
  "        String upper = string.toUpperCase();\n        String lower = string.toLowerCase();\n\
    \        int len1 = upper.length();\n        int len2 = lower.length();\n    \
    \    int count = 0;\n        for( int i = 0; i < len1; i++ ) {\n            char\
    \ x = upper.charAt(i);\n            if( !upper.equalsIgnoreCase(lower) ) {\n \
    \               for( int j = 0; j < len2; j++ ) {\n                    char y\
    \ = lower.charAt(j);\n                    if( x == y ) {\n                   \
    \     count++;\n                    }\n                }\n            }\n    \
    \    }\n        return count;", "        int distinct_characters = 0;\n      \
    \  for(char c: string.toCharArray()) {\n            distinct_characters += (Character.isLowerCase(c)\
    \ || Character.isUpperCase(c)) ? 2 : 1;\n        }\n        return distinct_characters;",
  "        int distinctChars = 0, lowerCaseChars = 0;\n        for (int i = 0; i <\
    \ string.length(); i++) {\n            char c = string.charAt(i);\n          \
    \  distinctChars += Character.toLowerCase(c) == c\n                ? lowerCaseChars\
    \ ++;\n        }\n        return distinctChars;", "        Map<Character, Integer>\
    \ counts = new HashMap<>();\n        for (Character c : string.toCharArray())\
    \ {\n            if (counts.get(c) == null) {\n                counts.put(c, 1);\n\
    \            } else {\n                counts.put(c, counts.get(c) + 1);\n   \
    \         }\n        }\n        return counts.size();", "        char[] charArray\
    \ = string.toCharArray();\n        Arrays.sort(charArray);\n        int count\
    \ = 0;\n        boolean first = true;\n        for (int i = 0; i < charArray.length;\
    \ i++) {\n            if (first) {\n                first = false;\n         \
    \       continue;\n            }\n            if (charArray[i] != charArray[i\
    \ + 1]) {\n                count++;\n            }\n        }\n        return\
    \ count;", "        // Write your code here\n        int count = 0;\n        for\
    \ (char c : string.toCharArray())\n        {\n            int charInString = string.indexOf(c);\n\
    \            while (charInString != -1)\n            {\n                count++;\n\
    \                charInString = string.indexOf(c, charInString + 1);\n       \
    \     }\n        }\n        return count;", "        HashMap<Character, Integer>\
    \ counter = new HashMap<>();\n        // Iterate over every character in the string\n\
    \        for (char c : string.toCharArray()) {\n            // If the character\
    \ doesn't exist in the map yet, add it\n            if (!counter.containsKey(c))\
    \ {\n                counter.put(c, 1);\n            } else {\n              \
    \  // Increment the counter\n                counter.put(c, counter.get(c) + 1);\n\
    \            }\n        }\n        // Return the total number of characters\n\
    \        return counter.size();", "        long uniqueCount = 0;\n        HashSet<Character>\
    \ uniqueChars = new HashSet<Character>();\n        for (char c : string.toCharArray())\
    \ {\n            uniqueChars.add(c);\n        }\n        uniqueChars.forEach(char\
    \ -> uniqueCount++);\n        return uniqueCount;", '        return string.chars().distinct().count();',
  '        return string.chars().distinct().count();', "        int count = 0;\n \
    \       int l = string.length();\n        for (int i = 0; i < l; i++) {\n    \
    \        if (string.charAt(i) == string.charAt(i + 1)) {\n                count\
    \ = count + 1;\n            }\n        }\n        return count;", "        Set<Character>\
    \ seen = new HashSet<Character>();\n        int count = 0;\n        for (char\
    \ c : string.toCharArray()) {\n            if (seen.contains(c)) {\n         \
    \       count++;\n            } else {\n                seen.add(c);\n       \
    \     }\n        }\n        return count;", '        return string.chars().distinct().count();',
  "        int count = 1;\n        for (int i = 0; i < string.length(); ++i) {\n \
    \           if (string.charAt(i) != string.charAt(i).toUpperCase().charAt(0))\
    \ {\n                count++;\n            }\n        }\n        return count;",
  "        List<Character> list = new ArrayList<>(string.length());\n        for (int\
    \ i = 0; i < string.length(); i++) {\n            list.add(string.charAt(i));\n\
    \        }\n        Set<Character> set = new HashSet<>(list);\n        return\
    \ set.size();", "        int[] count = new int[26];\n\n        for (char c : string.toCharArray())\
    \ {\n            count[c - 'a']++;\n        }\n        return Arrays.stream(count).distinct().count();",
  "        return string.toLowerCase()\n            .chars()\n            .mapToObj(i\
    \ -> String.valueOf((char)i))\n            .collect(Collectors.groupingBy(i ->\
    \ i, Collectors.counting()))\n            .entrySet()\n            .stream()\n\
    \            .map(e -> e.getValue().size())\n            .max(Comparator.naturalOrder())\n\
    \            .orElse(0);", "        return string.chars()\n            .distinct()\n\
    \            .count();", "        char[] charArray = string.toCharArray();\n \
    \       HashMap<Character, Integer> countMap = new HashMap<>();\n        for (char\
    \ c : charArray) {\n            if (!countMap.containsKey(c)) {\n            \
    \    countMap.put(c, 1);\n            } else {\n                countMap.put(c,\
    \ countMap.get(c) + 1);\n            }\n        }\n        return countMap.values().stream().distinct().count();",
  "        int answer = 0;\n        Set<Character> distinctCharacters = new HashSet<Character>();\n\
    \        for(char c : string.toCharArray()) {\n            distinctCharacters.add(c);\n\
    \        }\n        for(Character c : distinctCharacters) {\n            answer\
    \ += 1;\n        }\n        return answer;", "        HashMap<Character, Integer>\
    \ countMap = new HashMap<>();\n        for (char ch : string.toCharArray()) {\n\
    \            Integer countValue = countMap.get(ch);\n            if (countValue\
    \ == null) {\n                countValue = 1;\n            }\n            countMap.put(ch,\
    \ countValue + 1);\n        }\n        return countMap.size();", "        Map<Character,\
    \ Integer> counts = string.chars().boxed().distinct()\n                .collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting()));\n\n        return counts.values().stream().map(Integer::intValue).reduce((a,\
    \ b) -> a + b).get();", '        return string.length();', "        int[] result\
    \ = new int[26];\n        Arrays.fill(result, -1);\n        string = string.toLowerCase().replaceAll(\"\
    [^a-zA-Z]\", \"\");\n        for (int i = 0; i < string.length(); i++) {\n   \
    \         result[string.charAt(i) - 'a']++;\n        }\n        return Arrays.stream(result).filter(i->i>0).count();",
  "        Map<Character, Integer> countMap = new HashMap<>();\n        for(char ch\
    \ : string.toCharArray()){\n            int count = countMap.get(ch);\n      \
    \      if(count == null){\n                countMap.put(ch, 1);\n            }\
    \ else {\n                countMap.put(ch, count+1);\n            }\n        }\n\
    \        return countMap.size();", "        // Create map of character and it's\
    \ count of appearance\n        Map<Character, Integer> map = new HashMap<>();\n\
    \        string = string.toLowerCase();\n        for (char c : string.toCharArray())\
    \ {\n            if (map.containsKey(c)) {\n                map.put(c, map.get(c)\
    \ + 1);\n            } else {\n                map.put(c, 1);\n            }\n\
    \        }\n        int result = 0;\n        for (Map.Entry<Character, Integer>\
    \ entry : map.entrySet()) {\n            result += entry.getValue();\n       \
    \ }\n        return result;", '        return IntStream.range(0, string.length()).boxed().map(i
    -> string.charAt(i)).distinct().count();', "        int count = 0;\n        for\
    \ (int i = 0; i < string.length(); i++) {\n            count += string.charAt(i).toLowerCase().chars().distinct().count();\n\
    \        }\n        return count;", '        return string.length() - string.chars().distinct().count()
    + 1;', "        int counter = 0;\n        for (char c : string.toCharArray())\
    \ {\n            counter++;\n        }\n        return counter;", "        if\
    \ (string == null || string.isEmpty()) {\n            return 0;\n        }\n \
    \       HashSet<Character> chars = new HashSet<>();\n        chars.clear();\n\
    \        for (char c : string.toCharArray()) {\n            chars.add(c);\n  \
    \      }\n        return chars.size();", "        int length = string.length();\n\
    \        HashSet<Character> charSet = new HashSet<>();\n        char[] arr = string.toCharArray();\n\
    \        for (Character c : arr) {\n            if (charSet.contains(c)) {\n \
    \               charSet.remove(c);\n            } else {\n                charSet.add(c);\n\
    \            }\n        }\n        return charSet.size();", "        if (string.length()\
    \ <= 0) {\n            return 0;\n        }\n        return IntStream.range(0,\
    \ string.length())\n                .mapToObj(i -> string.substring(i, i + 1))\n\
    \                .distinct()\n                .count();", "        int total =\
    \ 0;\n        for (int i = 0; i < string.length(); i++) {\n            int j =\
    \ i;\n            while (j < string.length() && string.charAt(j) == string.charAt(j))\
    \ {\n                j++;\n            }\n            total += j - i;\n      \
    \  }\n        return total;", "        // Count the number of distinct characters\n\
    \        // >>> count_distinct_characters('xyzXYZ')\n        // 3\n        int\
    \ count = 0;\n        for (int i = 0; i < string.length(); i++) {\n          \
    \  if (i == string.length() - 1) {\n                count += string.charAt(i)\
    \ - 'a' + 1;\n            } else {\n                count += string.charAt(i)\
    \ - 'a' + 1;\n            }\n        }\n        return count;", '        return
    string.toLowerCase().chars().distinct().count();', "        // TODO: Complete\
    \ the function\n        int count = 0;\n        if (string == null || string.length()\
    \ == 0) return 0;\n        for (char c : string.toCharArray()) {\n           \
    \ if (Character.isLowerCase(c)) {\n                count++;\n            }\n \
    \       }\n        return count;", "        int distinctCharacters = 0;\n    \
    \    char ch;\n        for(String string : string.split(\"\")) {\n           \
    \ ch = string.charAt(0);\n            if(Character.isLowerCase(ch)) {\n      \
    \          if(Character.isUpperCase(ch)) {\n                    distinctCharacters++;\n\
    \                }\n            }\n            else if(Character.isUpperCase(ch))\
    \ {\n                if(Character.isLowerCase(ch)) {\n                    distinctCharacters++;\n\
    \                }\n            }\n            else {\n                distinctCharacters++;\n\
    \            }\n        }\n        return distinctCharacters;", '        return
    string.chars().distinct().count();', "        ArrayList<String> arrStr = new ArrayList<String>();\n\
    \        String characters = \"\";\n        boolean found = false;\n        int\
    \ countDistinctCharacters = 0;\n        int i = 0;\n        int j = 0; \n    \
    \    for (i = 0; i < string.length(); i++) {\n            if (!found) {\n    \
    \            characters += string.charAt(i);\n                if (Character.isUpperCase(string.charAt(i)))\
    \ {\n                    found = true;\n                }\n            } else\
    \ {\n                if (Character.isUpperCase(string.charAt(i))) {\n        \
    \            found = true;\n                } else {\n                    characters\
    \ += string.charAt(i);\n                    found = false;\n                }\n\
    \            }\n            arrStr.add(characters);\n        }\n        for (String\
    \ string : arrStr) {\n            if (arrStr.contains(string)) {\n           \
    \     countDistinctCharacters++;\n            }\n        }\n        return countDistinctCharacters;",
  "        Set<Character> charSet = new HashSet<>();\n        for (Character c : string.toCharArray())\
    \ {\n            charSet.add(c);\n        }\n        return charSet.size();",
  "        // Write your code here\n        int count = 0;\n        StringBuilder\
    \ sb = new StringBuilder();\n        for (int i = 0; i < string.length(); i++)\
    \ {\n            char character = string.charAt(i);\n            sb.append(character);\n\
    \        }\n        Set<String> characters = new HashSet<>(Arrays.asList(sb.toString().toUpperCase().split(\"\
    \")));\n        for (String character : characters) {\n            count++;\n\
    \        }\n        return count;", "        HashSet<Character> char_set = new\
    \ HashSet<Character>();\n        for (int i = 0; i < string.length(); i++) {\n\
    \            char c = string.charAt(i);\n            char_set.add(Character.toLowerCase(c));\n\
    \            char_set.add(Character.toUpperCase(c));\n        }\n        return\
    \ char_set.size();", "        int charCount = 0;\n        for (char ch : string.toCharArray())\
    \ {\n            charCount += Character.isUpperCase(ch)\n                ? 1\n\
    \                : Character.isLowerCase(ch)\n                    ? 1\n      \
    \              : 0;\n        }\n        return charCount;", "        int result\
    \ = 0;\n\n        for( int i = 0; i < string.length(); i++ ) {\n            int\
    \ previous = 0;\n            for( int j = i; j < string.length(); j++ ) {\n  \
    \              if ( string.charAt( j ) == string.charAt( i ) ) {\n           \
    \         if( string.charAt( j ) != string.charAt( previous ) ) {\n          \
    \              result = result + 1;\n                    }\n                 \
    \   previous = j;\n                }\n            }\n        }\n        return\
    \ result;", "        Map<Character, Integer> charCountMap = new HashMap<>();\n\
    \        for (Character c : string.toCharArray()) {\n            if (!charCountMap.containsKey(c))\
    \ {\n                charCountMap.put(c, 1);\n            } else {\n         \
    \       charCountMap.put(c, charCountMap.get(c) + 1);\n            }\n       \
    \ }\n        int distinctCharacterCount = 0;\n        for (Map.Entry<Character,\
    \ Integer> entry : charCountMap.entrySet()) {\n            if (entry.getValue()\
    \ == 1) {\n                distinctCharacterCount++;\n            }\n        }\n\
    \        return distinctCharacterCount;", "        List<Character> list = new\
    \ ArrayList<>();\n        for (char c : string.toCharArray()) {\n            list.add(Character.toLowerCase(c));\n\
    \        }\n        int ans = 0;\n        for (Character c : list) {\n       \
    \     if (list.contains(Character.toUpperCase(c))) {\n                ans += 1;\n\
    \            }\n        }\n        return ans;", "        if (string == null ||\
    \ string.length() == 0) {\n            return 0;\n        }\n\n        Map<Character,\
    \ Integer> charCounts = new HashMap<>();\n\n        for (char c : string.toCharArray())\
    \ {\n            if (charCounts.containsKey(c)) {\n                charCounts.put(c,\
    \ charCounts.get(c) + 1);\n            } else {\n                charCounts.put(c,\
    \ 1);\n            }\n        }\n\n        return charCounts.values().stream().distinct().count();",
  "        HashSet<Character> uniqueCharacters = new HashSet<>();\n        for (char\
    \ c : string.toCharArray()) {\n            if (uniqueCharacters.add(c)) {\n  \
    \              uniqueCharacters.remove(c);\n            }\n        }\n       \
    \ return uniqueCharacters.size();", "        int count = 0;\n        for (int\
    \ i = 0; i < string.length(); ++i) {\n            char ch = string.charAt(i);\n\
    \            if (Character.isLowerCase(ch))\n                ++count;\n      \
    \  }\n        return count;", "        int counter = 0;\n        for (char c :\
    \ string.toCharArray())\n            counter += string.indexOf(c);\n        return\
    \ counter;", '        return string.length();', "        HashMap<Character, Integer>\
    \ map = new HashMap<Character, Integer>();\n        for (char character : string.toCharArray())\
    \ {\n            Character key = Character.toUpperCase(character);\n         \
    \   Integer value = map.get(key);\n            if (value == null) {\n        \
    \        map.put(character, 1);\n            } else {\n                map.put(character,\
    \ value + 1);\n            }\n        }\n        return map.keySet().stream().distinct().count();",
  '        return string.chars().distinct().count() + 1;', '        return IntStream.range(0,
    string.length()).distinct().count();', '        return string.chars().distinct().count()
    + string.chars().map(Character::toLowerCase).distinct().count();', '        return
    string.chars().distinct().count();', "        Map<Character, Integer> map = new\
    \ HashMap<>();\n\n        for (Character c : string.toCharArray()) {\n       \
    \     Integer i = map.get(c);\n            if (i == null) {\n                map.put(c,\
    \ 1);\n            } else {\n                map.put(c, i + 1);\n            }\n\
    \        }\n\n        return map.values().stream().distinct().count();", "   \
    \     List<String> list = Arrays.asList(string.split(\"\"));\n        Set<String>\
    \ set = new HashSet<>(list);\n        return set.size();", "        HashMap<Character,\
    \ Integer> map = new HashMap<>();\n        for (Character character : string.toLowerCase().toCharArray())\
    \ {\n            map.merge(character, 1, Integer::sum);\n        }\n        return\
    \ map.keySet().stream().distinct().count();", "        HashSet<Character> set\
    \ = new HashSet<Character>();\n        for(int i=0; i<string.length(); i++)\n\
    \            set.add(string.charAt(i));\n        return set.size();", "      \
    \  Map<Character, Integer> map = new TreeMap<>();\n        for (int i = 0; i <\
    \ string.length(); i++) {\n            char c = string.charAt(i);\n          \
    \  if (map.get(c) == null) {\n                map.put(c, 1);\n            } else\
    \ {\n                map.put(c, map.get(c) + 1);\n            }\n        }\n \
    \       return map.size();", "        List<Integer> result = new ArrayList<>();\n\
    \        for (char c : string.toCharArray()) {\n            if (Character.isLetter(c))\
    \ {\n                result.add(Character.toLowerCase(c));\n            } else\
    \ {\n                result.add(Character.toUpperCase(c));\n            }\n  \
    \      }\n        return result.stream().distinct().count();", "        Map<Character,\
    \ Integer> char_counts = new HashMap<>();\n        // loop through all the characters\
    \ of the string\n        for (char c : string.toCharArray()) {\n            //\
    \ if character has already been encountered, add its count to the existing count\n\
    \            if (char_counts.containsKey(c)) {\n                char_counts.put(c,\
    \ char_counts.get(c) + 1);\n            }\n            // otherwise add a new\
    \ character with count 1\n            else {\n                char_counts.put(c,\
    \ 1);\n            }\n        }\n        // return the count of distinct characters\n\
    \        return char_counts.size();", "        int count = 0;\n        for (int\
    \ i = 0; i < string.length(); i++) {\n            String lowercase = string.toLowerCase();\n\
    \            String uppercase = string.toUpperCase();\n            count += lowercase.equals(uppercase)\
    \ ? 1 : 0;\n        }\n        return count;", '        return string.chars().distinct().count()
    + string.substringAll(string.length() - 1).chars().distinct().count();', '        return
    countDistinctCharacters(string, true);', "        int[] counts = new int[26];\n\
    \        for (int i = 0; i < string.length(); i++) {\n            char ch = string.charAt(i);\n\
    \            int count = counts[ch - 'a']++;\n            if (count > 26) {\n\
    \                counts[ch - 'a'] = count;\n            }\n        }\n       \
    \ return counts.length;", "        String[] distinctChars = new String[string.length()];\n\
    \        for (char c : string.toCharArray()) {\n            String case = Character.toString(c);\n\
    \            if(!distinctChars.contains(case)) {\n                distinctChars[distinctChars.length]\
    \ = case;\n            }\n        }\n        return distinctChars.length;", " \
    \       Map<Character, Integer> charMap = new HashMap<Character, Integer>();\n\
    \n        // Iterate through the characters and keep track of the frequency of\
    \ each\n        for (char character : string.toCharArray()) {\n            if\
    \ (charMap.containsKey(character)) {\n                // If the character already\
    \ exists, increment the frequency\n                charMap.put(character, charMap.get(character)\
    \ + 1);\n            } else {\n                // Otherwise, add the character\
    \ to the map\n                charMap.put(character, 1);\n            }\n    \
    \    }\n        return charMap.size();", "        Map<Character, Integer> chars\
    \ = new HashMap<Character, Integer>();\n        for (char c : string.toCharArray())\
    \ {\n            chars.put(c, chars.getOrDefault(c, 0) + 1);\n        }\n    \
    \    return chars.values().stream().distinct().mapToInt(Integer::intValue).sum();",
  "        int count = 0;\n        // Using a Set to store each character\n      \
    \  Set<Character> set = new HashSet<>();\n        for (char c : string.toCharArray())\
    \ {\n            set.add(Character.toLowerCase(c));\n        }\n        count\
    \ = set.size();\n        return count;", '        return string.chars().distinct().count();',
  "        Map<Character, Integer> map = new HashMap<>();\n        for(char c : string.toCharArray())\
    \ {\n            Integer val = map.get(c);\n            if(val == null) {\n  \
    \              map.put(c, 1);\n            } else {\n                map.put(c,\
    \ val + 1);\n            }\n        }\n        return map.keySet().stream().distinct().count();",
  "        // 1. Convert the string to lower case\n        string = string.toLowerCase();\n\
    \        Set<Character> set = new HashSet<>();\n        // 2. Iterate over the\
    \ characters of the string\n        for (char c : string.toCharArray()) {\n  \
    \          // 3. If the current character is uppercase add it to a new set\n \
    \           if (Character.isUpperCase(c)) {\n                set.add(Character.toLowerCase(c));\n\
    \            }\n            // 4. If the current character is lowercase add it\
    \ to a new set\n            else if (Character.isLowerCase(c)) {\n           \
    \     set.add(Character.toUpperCase(c));\n            }\n        }\n        //\
    \ 5. Return the size of the set (which will be distinct)\n        return set.size();",
  "        int count = 0;\n        for (char c : string.toCharArray()) {\n       \
    \     if (Character.isLetter(c)) {\n                count++;\n            }\n\
    \        }\n        return count;", "        int result = 0;\n        for (char\
    \ c : string.toCharArray())\n            result += Character.isLetterOrDigit(c)\
    \ ? 1 : 0;\n        return result;", "        // Return how many different characters\
    \ does the string have\n        // In our case, 3 characters\n        int count\
    \ = 0;\n        Set<Character> chars = new HashSet<>();\n        for (char ch\
    \ : string.toCharArray()) {\n            if (chars.contains(ch)) count++;\n  \
    \          chars.add(ch);\n        }\n        return count;", "        int count\
    \ = 0;\n        for (char c : string.toCharArray()) {\n            if (Character.toUpperCase(c)\
    \ == c) {\n                count++;\n            }\n        }\n        return\
    \ count;", "        int count = 0;\n        char character;\n        for (int\
    \ i = 0; i < string.length(); i++) {\n            character = string.charAt(i);\n\
    \            if (Character.isLowerCase(character)) {\n                count++;\n\
    \            } else {\n                count--;\n            }\n        }\n  \
    \      return count;", "        List<Character> distinctCharacters = new ArrayList<>();\n\
    \        for (char c : string.toCharArray()) {\n            distinctCharacters.add(c);\n\
    \        }\n        return distinctCharacters.size();", "        if (string.length()\
    \ == 0)\n            return 0;\n\n        Map<Character, Integer> countMap = new\
    \ TreeMap<>();\n        for (char c : string.toCharArray()) {\n            Integer\
    \ count = countMap.get(c);\n            if (count == null) {\n               \
    \ countMap.put(c, 1);\n            } else {\n                countMap.put(c, count\
    \ + 1);\n            }\n        }\n\n        int result = 1;\n        for (Map.Entry<Character,\
    \ Integer> entry : countMap.entrySet()) {\n            int count = entry.getValue();\n\
    \            result *= Math.pow(count, entry.getKey().toLowerCase().length());\n\
    \        }\n        return result;"]
stop_tokens:
- "    }\n    //"
- "    }\n    p"
- "    }\n}"
- "\n    }\n"
