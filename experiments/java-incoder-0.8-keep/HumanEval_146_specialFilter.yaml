completions:
- "        Arrays.sort(nums);\n        return nums.stream().filter(num -> num>10 &&\
  \ num % 2 ==0 && (num % 10 % 2 != 0)).count();"
- "        int sum = 0;\n        // write a loop here to iterate over the arraylist\n\
  \        for (Integer i : nums) {\n            if (i > 10 && i % 2 != 0 && i % 2\
  \ != 1) {\n                sum++;\n            }\n        }\n        return sum;"
- "        int numOfEven = 0;\n        int numOfOdd = nums.size();\n        for(int\
  \ i = 0; i < nums.size(); i++)\n        {\n            if(nums.get(i) > 10 && nums.get(i)\
  \ % 2 == 0)\n            {\n                numOfEven++;\n                if(nums.get(i)\
  \ > 9 && nums.get(i) % 2 == 1)\n                    numOfOdd++;\n            }\n\
  \        }\n        return numOfEven;"
- "        // Write your code here.\n        \n        for(int i = 0; i < nums.size();\
  \ i++) {\n            if(nums.get(i) > 10) {\n                if(nums.get(i) %2\
  \ == 0 && nums.get(i) %2 == 1) {\n                    return nums.size();\n    \
  \            }\n            }\n        }\n        return nums.size();"
- "        // Write code here\n        int counter=0;\n        for (Integer element\
  \ : nums) {\n            if(element>10 && element%2==1 && (element%100!=0 && element%100!=1)){\n\
  \                counter++;\n            }\n        }\n        return counter;"
- "        Arrays.sort(nums);\n        System.out.println(nums);\n        int count\
  \ = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            int j = nums.get(i);\n\
  \            if (j > 10) {\n                if (isOdd(nums.get(i)) && isOdd(nums.get(nums.size()\
  \ - 1))) {\n                    count++;\n                }\n            }\n   \
  \     }\n        return count;"
- "        for(int i=0;i<nums.size();i++) {\n            if (nums.get(i)>10 && nums.get(i-1)%2==1\
  \ && nums.get(i+1)%2==1) {\n                return i+1;\n            }\n       \
  \ }\n        return nums.size();"
- "        int counter = 0;\n        Arrays.sort(nums);\n        for (int i = 0; i\
  \ < nums.size(); i++) {\n            if (nums.get(i) > 10) {\n                if\
  \ (nums.get(i) % 2 == 1 && nums.get(i-1) % 2 == 1) {\n                    counter++;\n\
  \                }\n            }\n        }\n        return counter;"
- "        int count = 0;\n        for(int num : nums) {\n            int firstDigit\
  \ = num % 10;\n            int lastDigit = num / 10;\n            int firstOdd =\
  \ firstDigit % 2;\n            int lastOdd = lastDigit % 2;\n            if(firstOdd\
  \ && lastOdd) {\n                count += 1;\n            }\n        }\n       \
  \ return count;"
- "        int count = 0;\n        for (Integer i : nums) {\n            if (i > 10\
  \ && i % 2 == 1 && i % 2 == 0) {\n                count++;\n            }\n    \
  \    }\n        return count;"
- "        Set<Integer> a = new HashSet<>();\n        for(Integer i : nums) {\n  \
  \          if (a.get(i) > 10) {\n                if (isOdd(a.get(i), nums.get(i))\
  \ && isOdd(nums.get(i), nums.get(i+1))) {\n                    a.add(i);\n     \
  \           }\n            }\n        }\n        return a.size();"
- "        int count = 0;\n        for(int i : nums) {\n            boolean isOdd1\
  \ = i % 2 == 1;\n            boolean isOdd2 = nums.get(i-1) % 2 == 1;\n        \
  \    if(isOdd1 && isOdd2) count++;\n        }\n        return count;"
- "        int sum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n       \
  \     int first = nums.get(i);\n            int last = nums.get(i);\n          \
  \  int even = nums.get(i);\n            if (first > 10 && last > 10 && even % 2\
  \ != 0) {\n                sum = sum + 1;\n            }\n        }\n        return\
  \ sum;"
- "        Integer sumOfOdd = nums.stream().filter(n -> n % 2 == 0).sum();\n     \
  \   return nums.size() - nums.size() - sumOfOdd;"
- "        int count=0;\n        for(int i:nums){\n            if((i>10)&&((i%2)==1)){\n\
  \                if(i>0){\n                    if(i%10==1)\n                   \
  \     count++;\n                    if(i%10==9)\n                        count++;\n\
  \                }\n            }\n        }\n        return count;"
- "        return nums.stream().filter(s -> s % 10 > 10 \n                && s % 100\
  \ % 2 == 1 && s % 1000 % 2 == 1).count();"
- "        int sum = 0;\n        for (int i : nums) {\n            if (i > 10) {\n\
  \                for (int j = 0; j < nums.size(); j++) {\n                    if\
  \ (i != nums.get(j) && nums.get(j) % 2 == 1) {\n                        for (int\
  \ k = 0; k < nums.size(); k++) {\n                            if (i != nums.get(k)\
  \ && nums.get(k) % 2 == 1) {\n                                sum++;\n         \
  \                       break;\n                            }\n                \
  \        }\n                    }\n                }\n                break;\n \
  \           }\n        }\n        return sum;"
- "        int count  = 0;\n        for(int i = 0; i < nums.size(); i++){\n      \
  \      int digitFirst = nums.get(i).intValue() / 10;\n            int digitLast\
  \ = nums.get(i).intValue() % 10;\n            if(digitFirst % 2 == 1 && digitLast\
  \ % 2 == 1){\n                count++;\n            }\n        }\n        return\
  \ count;"
- "        if (nums.size() == 0)\n            return 0;\n        // return nums.size()\
  \ - (nums.stream().filter(n -> n > 10).count();\n        int count = (nums.stream().filter(n\
  \ -> n > 10).count();\n        return count - (nums.get(nums.size() - 1) % 2 !=\
  \ 0);"
- "        // your solution goes here\n        Integer one = nums.stream()\n     \
  \           .filter(x -> x > 10)\n                .mapToInt(x -> x)\n          \
  \      .filterToInt()\n                .sorted()\n                .findFirst().get();\n\
  \n        Integer two = nums.stream()\n                .filter(x -> x > 10)\n  \
  \              .mapToInt(x -> x)\n                .filterToInt()\n             \
  \   .sorted()\n                .findLast().get();\n        \n        if(one > 0\
  \ && one % 2 != 0) {\n            return 0;\n        }\n        if(two > 0 && two\
  \ % 2 != 0) {\n            return 0;\n        }\n        \n        return nums.size();"
- "        // your code here\n        return 0;"
- "        ArrayList<Integer> evens = new ArrayList<>();\n        ArrayList<Integer>\
  \ odds = new ArrayList<>();\n        for(int num : nums){\n            if(num%2\
  \ == 0){\n                evens.add(num);\n            }else{\n                odds.add(num);\n\
  \            }\n        }\n        \n        if(evens.size() < nums.size() && odds.size()\
  \ < nums.size()){\n            return evens.size() + 1;\n        }\n        else\
  \ if(evens.size() < nums.size() && odds.size() >= nums.size()){\n            return\
  \ evens.size();\n        }\n        else if(evens.size() >= nums.size() && odds.size()\
  \ < nums.size()){\n            return odds.size() + 1;\n        }\n        else\
  \ if(evens.size() >= nums.size() && odds.size() >= nums.size()){\n            return\
  \ odds.size();\n        }\n        else{\n            return nums.size();\n    \
  \    }"
- "        ArrayList<Integer> result = new ArrayList<>();\n        // your code\n\n\
  \        return 0;"
- "        System.out.println(nums);\n        int odd = 0;\n        int even = 0;\n\
  \        for (int i = 0; i < nums.size(); i++) {\n            if (nums.get(i) >\
  \ 10) {\n                if (nums.get(i) % 2 == 0) {\n                    even +=\
  \ 1;\n                } else {\n                    odd += 1;\n                }\n\
  \            }\n        }\n        return odd * even;"
- "        \n        for(Integer i : nums) {\n            int a = i;\n           \
  \ int b = i;\n            int c = i;\n            int d = i;\n            int e\
  \ = i;\n            int f = i;\n            int g = i;\n            int h = i;\n\
  \            int i = i;\n            int j = i;\n            int k = i;\n      \
  \      int l = i;\n            int m = i;\n            int n = i;\n            int\
  \ o = i;\n            int p = i;\n            int q = i;\n            int r = i;\n\
  \            int s = i;\n            int t = i;\n            int u = i;\n      \
  \      int v = i;\n            int w = i;\n            int x = i;\n            int\
  \ y = i;\n            int z = i;\n            int a = i;\n            int b = i;\n\
  \            int c = i;\n            int d = i;\n            int e = i;\n      \
  \      int f = i;\n            int g = i;\n            int h = i;\n            int\
  \ i = i;\n            int j = i;\n            int k = i;\n            int l = i;\n\
  \            int m = i;\n            int n = i;\n            int o = i;\n      \
  \      int p = i;\n            int q = i;\n            int r = i;\n            int\
  \ s = i;\n            int t = i;\n            int u = i;\n            int v = i;\n\
  \            int w = i;\n            int x = i;\n            int y = i;\n      \
  \      int z = i;\n            int a = i;\n            int b = i;\n            int\
  \ c = i;\n            int d = i;\n            int e = i;\n            int f = i;\n\
  \            int g = i;\n            int h = i;\n            int i = i;\n      \
  \      int j = i;\n            int k = i;\n            int l = i;\n            int\
  \ m = i;\n            int n = i;\n            int o = i;\n            int p = i;\n\
  \            int q = i;\n            int r = i;\n            int s = i;\n      \
  \      int t = i;\n            int u = i;\n            int v = i;\n            int\
  \ w = i;\n            int x = i;\n            int y = i;\n            int z = i;\n\
  \            int a = i;\n            int b = i;\n            int c = i;\n      \
  \      int d = i;\n            int e = i;\n            int f = i;\n            int\
  \ g = i;\n            int h = i;\n            int i = i;\n            int j = i;\n\
  \            int k = i;\n            int l = i;\n            int m = i;\n      \
  \      int n = i;\n            int o = i;\n            int p = i;\n            int\
  \ q = i;\n            int r = i;\n            int s = i;\n            int t = i;\n\
  \            int u = i;\n            int v = i;\n            int "
- "        \n        List<Integer> newNums = new ArrayList<Integer>();\n        \n\
  \        for(Integer i : nums) {\n            int first = Integer.parseInt(String.valueOf(i).substring(0,1));\n\
  \            int last = Integer.parseInt(String.valueOf(i).substring(1,2));\n  \
  \          int middle = Integer.parseInt(String.valueOf(i).substring(0,2));\n  \
  \          \n            if(first % 2 == 0 && last % 2 == 0) {\n               \
  \ if(middle % 2 == 1) {\n                    newNums.add(i);\n                }\n\
  \            }\n        }\n        return newNums.size();"
- "        int count = 0;\n        for(int i=0; i<nums.size(); i++) {\n          \
  \  if (nums.get(i) > 10) {\n                int last = nums.get(i).intValue();\n\
  \                int first = nums.get(i-1).intValue();\n                if (last%2\
  \ != 0) {\n                    if (first%2 != 0) count++;\n                }\n \
  \           }\n        }\n        return count;"
- "        \n        Arrays.sort(nums);\n        int odd_first_digit = nums.get(0);\n\
  \        int odd_last_digit = nums.get(nums.size()-1);\n        \n        int count\
  \ = 0;\n        \n        for (int i = 0; i < nums.size(); i++) {\n            if\
  \ (nums.get(i) > 10 && odd_first_digit % 2 == 1 && odd_last_digit % 2 == 1)\n  \
  \              count++;\n        }\n        return count;"
- "        ArrayList<Integer> ret = new ArrayList<Integer>();\n        for (int i\
  \ = 0; i < nums.size(); i++){\n            int x = nums.get(i);\n            if\
  \ (x > 10 && nums.get(i-1) % 2 == 1 && nums.get(i+1) % 2 == 1){\n              \
  \  ret.add(x);\n            }\n        }\n        return ret.size();"
- "        ArrayList<Integer> numsGreaterThan10 = new ArrayList<Integer>();\n    \
  \    ArrayList<Integer> numsFirstAndLastOdds = new ArrayList<Integer>();\n     \
  \   for (int i = 0; i < nums.size(); i++) {\n            if (nums.get(i) > 10) {\n\
  \                numsGreaterThan10.add(nums.get(i));\n            }\n          \
  \  if (nums.get(i) % 2 == 1 && nums.get(i) != 10) {\n                numsFirstAndLastOdds.add(nums.get(i));\n\
  \            }\n        }\n        System.out.println(numsGreaterThan10 + \", \"\
  \ + numsFirstAndLastOdds);\n        return numsGreaterThan10.size() + numsFirstAndLastOdds.size();"
- "        int count = 0;\n        for (int i = 0; i < nums.size(); i++) {\n     \
  \       int number = nums.get(i);\n            if (number > 10 && number.mod(2).equals(1))\
  \ {\n                boolean isFirstOdd = false;\n                boolean isLastOdd\
  \ = false;\n                if (i % 2 == 0) {\n                    isFirstOdd =\
  \ true;\n                }\n                if (nums.size() == (i + 1)) {\n    \
  \                isLastOdd = true;\n                }\n                if (isFirstOdd\
  \ && isLastOdd) {\n                    count++;\n                }\n           \
  \ }\n        }\n        return count;"
- "        Map<Integer, Integer> map = new HashMap<>();\n        for(int i = 0; i\
  \ < nums.size(); i++) {\n            int val = nums.get(i);\n            Integer\
  \ count = map.get(val);\n            if(count != null)\n                map.put(val,\
  \ count + 1);\n            else {\n                map.put(val, 1);\n          \
  \  }\n        }\n\n        int count = 0;\n        for(int val: map.values()) {\n\
  \            if(val > 10 && val % 2 == 0 && val % 1 != 0) {\n                count++;\n\
  \            }\n        }\n\n        return count;"
- "        int oddNums = 0;\n        for (int i = 0; i < nums.size(); i++) {\n   \
  \         if (nums.get(i) > 10 && nums.get(i) % 2 != 0 && nums.get(i) >= 10) {\n\
  \                oddNums++;\n            }\n        }\n        return oddNums;"
- "        int count = 0;\n        for(int i = 0; i < nums.size(); i++) {\n      \
  \      int first = nums.get(i);\n            int last = nums.get(i-1);\n       \
  \     if(first > 10 && last % 2 == 1) {\n                count++;\n            }\n\
  \        }\n        return count;"
- "        for(int i=0;i<nums.size();i++){\n            if(nums.get(i)>10 && nums.get(i)%2==1\
  \ && (nums.get(i-1)%2==1 || nums.get(i+1)%2==1))\n                return nums.size();\n\
  \        }\n        return 0;"
- "        // Your code goes here\n        int count = 0;\n        int len = nums.size();\n\
  \        for (int i = 0; i < len; i++) {\n            if (nums.get(i) > 10) {\n\
  \                count += 2;\n                if (nums.get(i) % 2 == 1) {\n    \
  \                count += 1;\n                }\n            }\n        }\n    \
  \    return count;"
- '        // Write your code here'
- "        int count = 0;\n        for (int n : nums) {\n            if (n > 10 &&\
  \ nums.firstDigitIsOdd() && nums.lastDigitIsOdd()) {\n                count++;\n\
  \            }\n        }\n        return count;"
- '        return nums.stream().filter(number -> number > 10 && number.length() >=
  1 && number.length() <= 4 && number.chars().filter(x -> x % 2 == 1).count() % 2
  == 1).count();'
- "        int odd = 1;\n        int firstEven = 2;\n        int lastEven = 2;\n \
  \       int firstOdd = 2;\n        int lastOdd = 2;\n        int oddFirst = 0;\n\
  \        int oddLast = 0;\n        int firstEvenLast = 0;\n        int lastEvenLast\
  \ = 0;\n        int firstOddLast = 0;\n        int lastOddLast = 0;\n        int\
  \ num = 0;\n        int num2 = 0;\n        int i = 0;\n        int j = 0;\n    \
  \    int count = 0;\n        int j2 = 0;\n        Arrays.sort(nums);\n        for\
  \ (int k = 0; k < nums.size(); k++) {\n            if (nums.get(k) >= 10) {\n  \
  \              num++;\n            }\n            if (nums.get(k) % 2 == 1) {\n\
  \                num2++;\n            }\n        }\n        for (i = 0; i < nums.size();\
  \ i++) {\n            int count = 0;\n            for (j = 0; j < nums.size(); j++)\
  \ {\n                if (nums.get(j) >= 10) {\n                    num++;\n    \
  \                count++;\n                    if (nums.get(j) % 2 == 1) {\n   \
  \                     num2++;\n                    }\n                }\n      \
  \          if (nums.get(j) == nums.get(i) && j != i) {\n                    count++;\n\
  \                    if (nums.get(j) % 2 == 1) {\n                        num2++;\n\
  \                    }\n                }\n                if (nums.get(j) == nums.get(i)\
  \ && j == i) {\n                    count++;\n                    if (nums.get(j)\
  \ % 2 == 1) {\n                        num2++;\n                    }\n        \
  \        }\n            }\n            if (count != 2) {\n                if (nums.get(nums.size()\
  \ - 1) % 2 == 1) {\n                    oddLast++;\n                }\n        \
  \        if (nums.get(nums.size() - 1) % 2 != 1) {\n                    lastEven++;\n\
  \                }\n            }\n            if (nums.get(nums.size() - 1) % 2\
  \ != 1) {\n                if (nums.get(nums.size() - 2) % 2 == 1) {\n         \
  \           oddFirst++;\n                }\n                if (nums.get(nums.size()\
  \ - 2) % 2 != 1) {\n                    firstEven++;\n                }\n      \
  \      }\n            if (nums.get(nums.size() - 1) % 2 == 1) {\n              \
  \  if (nums.get(nums.size() - 2) % 2 == 1) {\n                    oddFirst++;\n\
  \                }\n                if (nums.get(nums.size() - 2) % 2 != 1) {\n\
  \                    firstEven++;\n                }\n            }\n          \
  \  if (nums.get(nums.size() - 1) == nums.get(i) && nums.get(nums.size() - 2) ==\
  \ nums.get(i) && j != i) {\n                count++;\n                if (nums.get(j)\
  \ % 2 == 1) {\n                    num2++;\n                }\n            }\n \
  \           if (nums.get(nums.size() - 1) == nums.get(i) && nums.get(nums.size()\
  \ - 2) == nums.get(i) && j == i) {\n                count++;\n                if\
  \ (nums.get(j) % 2 == 1) {\n                    num2++;\n                }\n   \
  \         }\n            if (count == 2) {\n                if (nums.get(nums.size()\
  \ - 1) % 2 == 1) {\n                    oddLast++;\n                }"
- "        int result = 0;\n        for(int i = 0; i < nums.size(); i++){\n      \
  \      if((nums.get(i) > 10) && (nums.get(i) % (nums.get(i) / 10) % 2 != 1)){\n\
  \                result++;\n            }\n        }\n        return result;"
- "        int oddNums = nums.stream().filter(e -> e > 10).count();\n        int firstOdd\
  \ = nums.stream().filter(e -> e > 10).filter(e -> e % 2 != 0).count();\n       \
  \ int lastOdd = nums.stream().filter(e -> e > 10).filter(e -> e % 2 == 0).count();\n\
  \        return (oddNums + firstOdd + lastOdd);"
- "        int[] array = new int[nums.size()];\n        int k = 0;\n        for(int\
  \ i = 0; i < nums.size(); i++) {\n            array[i] = nums.get(i);\n        \
  \    k = i;\n        }\n        for(int i = 0; i < array.length; i++) {\n      \
  \      int a = array[i];\n            if(a > 10) {\n                boolean b =\
  \ false;\n                boolean c = false;\n                for(int j = 0; j <\
  \ array.length; j++) {\n                    if(j < i)\n                        continue;\n\
  \                    if(array[j] == a) {\n                        b = true;\n  \
  \                      break;\n                    }\n                }\n      \
  \          for(int j = 0; j < array.length; j++) {\n                    if(j < i)\n\
  \                        continue;\n                    if(array[j] == a) {\n  \
  \                      c = true;\n                        break;\n             \
  \       }\n                }\n                if(b == c && i % 2 == 0) {\n     \
  \               k++;\n                }\n            }\n        }\n        return\
  \ k;"
- "        // your code here\n        return nums.size();"
- "        if (nums.size() < 2)\n            return 0;\n        int res = 0;\n   \
  \     int first = nums.get(0);\n        int last = nums.get(nums.size() - 1);\n\
  \        int i = 1;\n        int odd = 1;\n        int num = nums.get(0);\n    \
  \    boolean isOdd = num%2 == 1;\n        int lastDigit = num % 10;\n\n        for(i\
  \ = 1; i < nums.size(); i++) {\n            num = nums.get(i);\n            int\
  \ currDigit = num % 10;\n            if (isOdd == true) {\n                if(currDigit\
  \ % 2 == 1)\n                    odd = 1;\n                else {\n            \
  \        odd = 0;\n                }\n            }\n\n            if (currDigit\
  \ > 10) {\n                if (odd) {\n                    res = res + 1;\n    \
  \            }\n                odd = 1;\n            } else if (currDigit < 10)\
  \ {\n                if (!odd) {\n                    res = res + 1;\n         \
  \       }\n                odd = 0;\n            } else if (odd && first%2 == 1\
  \ && lastDigit % 2 == 1) {\n                res = res + 1;\n            }\n    \
  \        first = num;\n        }\n        return res;"
- "        int count = 0;\n        for (int n : nums) {\n            int firstNum\
  \ = n%10;\n            int lastNum = (n/10)%10;\n            if (firstNum + lastNum\
  \ % 2 == 1) {\n                count++;\n            }\n        }\n        return\
  \ count;"
- '        return nums.stream().filter(a -> a.intValue() > 10).filter(a -> a.intValue()
  % 2 == 1).filter(a -> a.intValue() % 2 == 1).count();'
- "        // your solution here\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
  \        for(Integer num : nums) {\n            if(num > 10 && num%2 != 1 && num%2\
  \ != 3) {\n                result.add(num);\n            }\n        }\n        return\
  \ result.size();"
- "        /*\n         * your code here\n         */\n\n        "
- "        int ret = 0;\n        for (int n : nums) {\n            if (n >= 10 &&\
  \ n % 2 == 1 && n != Math.abs(n)) {\n                ret++;\n            }\n   \
  \     }\n        return ret;"
- "        int oddCount = 0;\n        int evenCount = 0;\n\n        for(Integer num\
  \ : nums) {\n            if (num > 10) {\n                oddCount++;\n        \
  \    }\n            \n            if (num < 10) {\n                evenCount++;\n\
  \            }\n        }\n        \n        return oddCount == 2 && evenCount ==\
  \ 1 ? oddCount + evenCount : oddCount + evenCount > 2 && oddCount + evenCount <\
  \ 4 ? oddCount + evenCount : oddCount + evenCount >= 5 ? oddCount + evenCount :\
  \ oddCount + evenCount >= 7 ? oddCount + evenCount : oddCount + evenCount >= 9 ?\
  \ oddCount + evenCount : oddCount + evenCount;"
- "        // your code\n        return nums.size();"
- "        int count = 0;\n        for(int num : nums) {\n            if(num > 10\
  \ && num%2 == 0 && num > num.getFirstDigit() && num > num.getLastDigit()) {\n  \
  \              count++;\n            }\n        }\n        return count;"
- "        // Write your code here.\n        return nums.stream().filter(t -> {\n\
  \            if (t % 2 != 0)\n                return false;\n            int a =\
  \ t / 10;\n            if (a % 2 == 1)\n                return false;\n        \
  \    int b = t % 10;\n            if (a % 2 == 0 && b%2 == 1)\n                return\
  \ false;\n            else\n                return true;\n        }).count();"
- "        int count = 0;\n        for (Integer i : nums) {\n            if (i > 10\
  \ && i %2 == 1 && i %2 != 0) {\n                count++;\n            }\n      \
  \  }\n        return count;"
- "        int count = 0;\n        for(int number : nums)\n            if(number >\
  \ 10 && nums.get(nums.size()-1) % 2 != 0 && nums.get(nums.size()-2) % 2 != 0)\n\
  \                count++;\n        return count;"
- "       int count = 0;\n       // get length of list\n       int len = nums.size();\n\
  \       // loop through list \n       for(int i = 0; i < len; i++) {\n         \
  \  // get value from list\n           int value = nums.get(i);\n           // if\
  \ number is greater than 10 and first and last digits are odd\n           if (value\
  \ > 10 && nums.get(i) % 2 == 1 && nums.get(i-1) % 2 == 1) {\n               // increment\
  \ counter\n               count++;\n           }\n       }\n       return count;"
- "        int count = 0;\n        for (Integer n : nums) {\n            if (n.intValue()\
  \ > 10 && n.intValue() % 2 == 1 && n.intValue() % 2 == 0) {\n                count++;\n\
  \            }\n        }\n        return count;"
- "        int count = 0;\n        for (Integer n : nums) {\n            if (n > 10)\
  \ {\n                boolean firstOdd;\n                boolean lastOdd;\n     \
  \           n = n.abs();\n                firstOdd = (n & 1) == 1;\n           \
  \     lastOdd = (n & 3) == 3;\n                if (firstOdd && lastOdd) {\n    \
  \                count++;\n                }\n            }\n        }\n       \
  \ return count;"
- "        ArrayList<Integer> results = new ArrayList<>();\n        for (int i = 0;\
  \ i < nums.size(); i++) {\n            int n = (int) nums.get(i);\n            if\
  \ (n > 10) {\n                int firstDigit = (int) (n / Math.pow(10, 1));\n  \
  \              int lastDigit = (int) ((n / Math.pow(10, 1)) % 10);\n           \
  \     if (((firstDigit & 1) != ((lastDigit & 1) == 1)) && (firstDigit != lastDigit))\n\
  \                    results.add(nums.get(i));\n            }\n        }\n     \
  \   if (results.size() == 0)\n            return 0;\n        return results.size();"
- "        if (nums.isEmpty()) {\n            return 0;\n        }\n        Stream<Integer>\
  \ numStream = nums.stream();\n        int size = nums.size();\n        int count\
  \ = 0;\n        int firstOdd = 0, lastOdd = 0, firstEven = 0, lastEven = 0;\n  \
  \      Iterator<Integer> iterator = numStream.iterator();\n        while(iterator.hasNext())\
  \ {\n            int num = iterator.next();\n            if (num > 10 && num % 2\
  \ == 0) {\n                firstOdd += 1;\n                lastOdd += 1;\n     \
  \       }\n            if (num > 10 && num % 2 != 0) {\n                firstEven\
  \ += 1;\n                lastEven += 1;\n            }\n        }\n        if (firstOdd\
  \ > lastOdd && firstEven > lastEven) {\n            count++;\n        }\n      \
  \  System.out.println(count);\n        return count;"
- "        ArrayList<Integer> odds = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ evens = new ArrayList<Integer>();\n        for(int num : nums) {\n           \
  \ if(num > 10) {\n                if(num % 2 == 1)\n                    evens.add(num);\n\
  \                else if(num % 2 == 0)\n                    odds.add(num);\n   \
  \         }\n        }\n        int firstOdd = 0;\n        int lastOdd = 0;\n  \
  \      int firstEven = 0;\n        int lastEven = 0;\n        for(int num : odds)\
  \ {\n            if(num > 10) {\n                if(num % 2 == 1)\n            \
  \        firstOdd = num;\n                else if(num % 2 == 0)\n              \
  \      lastOdd = num;\n            }\n        }\n        for(int num : evens) {\n\
  \            if(num > 10) {\n                if(num % 2 == 1)\n                \
  \    firstEven = num;\n                else if(num % 2 == 0)\n                 \
  \   lastEven = num;\n            }\n        }\n        int n = firstOdd + lastOdd\
  \ + firstEven + lastEven;\n        return n;"
- "        // TODO: Complete me\n        return 0;"
- "        if(nums == null || nums.size() == 0) {\n            return 0;\n       \
  \ }\n        int count = 0;\n        for(int i : nums) {\n            if (i > 10\
  \ && nums.get(i).isOdd() && nums.get(i-1).toOdd() && nums.get(i+1).toOdd()) {\n\
  \                count++;\n            }\n        }\n        return count;"
- "        int count = 0;\n        for (int num : nums) {\n            if (num > 10\
  \ && num / 10 % 2 == 1 && num % 10 == 1) {\n                count++;\n         \
  \   }\n        }\n        return count;"
- "      int count = 0;\n      int size = nums.size();\n      for (int i = 0; i <\
  \ size; i++) {\n        if (nums.get(i) > 10 && nums.get(i) % (2 * nums.get(i/2))==\
  \ 1) {\n          count ++;\n        }\n      }\n      return count;"
- '        // code here'
- "        int count = 0;\n        \n        for (int num : nums) {\n            int\
  \ firstDigit = (int) Math.log10(Math.abs(num))+1;\n            int lastDigit = num\
  \ % 10;\n\n            if (firstDigit > 10 && lastDigit % 2 == 0) {\n          \
  \      count++;\n            }\n        }\n        return count;"
- "        Map<Integer, Integer> map = new HashMap<>();\n        int countNum = 0;\n\
  \        for (Integer number : nums) {\n            if (map.containsKey(number))\
  \ {\n                map.put(number, map.get(number) + 1);\n            } else {\n\
  \                map.put(number, 1);\n            }\n        }\n\n        for (Integer\
  \ key : map.keySet()) {\n            if (map.get(key) > 1) {\n                countNum++;\n\
  \                Integer value = map.get(key);\n                if (value % 2 ==\
  \ 0) {\n                    if (key % 2 == 1) {\n                        return\
  \ countNum;\n                    }\n                }\n            }\n        }\n\
  \n        return 0;"
- "        // Write your code here\n        if(nums.size()==0)\n            return\
  \ 0;\n        int length=nums.size();\n        int count=0;\n        for(int i=0;i<length;i++)\n\
  \        {\n            if((nums.get(i)%2==0) && (nums.get(i-1)%2==0) && (nums.get(i+1)%2==0))\n\
  \            {\n                count++;\n            }\n        }\n        return\
  \ count;"
- "        int count = 0;\n        for (int i = 0; i < nums.size(); i++) {\n     \
  \       if (nums.get(i) >= 10) {\n                if (nums.get(i) % 2 == 1) {\n\
  \                    if (nums.get(i) / 2 % 2 != 1) {\n                        count++;\n\
  \                    }\n                }\n            }\n        }\n        return\
  \ count;"
- "        int count = 0;\n        for (int num : nums) {\n            int firstDigit\
  \ = (int) Math.abs(num);\n            int secondDigit = (int) Math.abs(num);\n \
  \           if (firstDigit > 10) {\n                firstDigit = firstDigit % 10;\n\
  \            }\n            if (secondDigit > 10) {\n                secondDigit\
  \ = secondDigit % 10;\n            }\n            if (firstDigit % 2 != 0 && secondDigit\
  \ % 2 != 0) {\n                count++;\n            }\n        }\n        return\
  \ count;"
- "        int count = 0;\n        int i = 0;\n        while(i < nums.size()) {\n\
  \            if(nums.get(i) > 10 && nums.get(i) % (int)Math.pow(10, (nums.size()\
  \ - 1)/2) % 2 != 0) {\n                count++;\n            }\n            i++;\n\
  \        }\n        return count;"
- "        List<Integer> list = nums.stream().filter(n -> n > 10).collect(Collectors.toList());\n\
  \        return list.size();"
- "        // write your code here\n        System.out.println(\"specialFilter(\"\
  \ + Arrays.toString(nums) + \")\");\n        return nums.size();"
- "        int len = nums.size();\n        int count = 0;\n        for (int i = 0;\
  \ i < len; i++) {\n            int a = nums.get(i);\n            if (a > 10 && nums.get(i)\
  \ < 0) {\n                for (int j = i; j > 0; j--) {\n                    int\
  \ b = nums.get(j);\n                    if (b > 10 && nums.get(j) < 0) {\n     \
  \                   if (a % 2 == 0 && b % 2 == 1) {\n                          \
  \  count++;\n                        }\n                    }\n                }\n\
  \            }\n        }\n        return count;"
- "        int ans = 0;\n        for (int num : nums) {\n            if (num > 10\
  \ && num % 2 == 0 && num / 2 % 2 == 0) {\n                ans++;\n            }\n\
  \        }\n        return ans;"
- "        ArrayList<Integer> odds = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ evens = new ArrayList<Integer>();\n        for (int num : nums) {\n          \
  \  int firstDigit = num / 10;\n            int secondDigit = num % 10;\n       \
  \     if (firstDigit % 2 != 0 && secondDigit % 2 != 0) {\n                evens.add(num);\n\
  \            } else {\n                odds.add(num);\n            }\n        }\n\
  \        return odds.size() + evens.size();"
- '        return nums.stream().filter(i -> i % 10 > 10).filter(i -> i % 10 > 10 &&
  i % 10 > 10 % 2 != 0).count();'
- "        int numCount = nums.size();\n        int oddCount = 0;\n        int evenCount\
  \ = 0;\n        for(int i = 0; i < numCount; i++) {\n            if(nums.get(i)\
  \ > 10 && (nums.get(i) % 2 != 0)) {\n                oddCount++;\n             \
  \   if(nums.get(i) > 10 && nums.get(i) % 2 != 0) {\n                    evenCount++;\n\
  \                }\n            }\n        }\n        return oddCount >= 2 && evenCount\
  \ >= 1;"
- '        return nums.stream().filter(n -> n > 10 && isFirstOdd(n) && isLastOdd(n)).count();'
- "        List<Integer> odds = new ArrayList<Integer>();\n        List<Integer> evens\
  \ = new ArrayList<Integer>();\n        for(int n: nums){\n            if(n%2==0)\n\
  \                evens.add(n);\n            else\n                odds.add(n);\n\
  \        }\n        return odds.size() + evens.size();"
- "        long sum=0;\n        for(int i=0;i<nums.size();i++){\n            sum+=nums.get(i);\n\
  \        }\n        sum=sum%10;\n        long firstDigit=sum/10;\n        sum=sum%10;\n\
  \        long lastDigit=sum/10;\n        firstDigit=firstDigit%2;\n        lastDigit=lastDigit%2;\n\
  \        if(firstDigit == 1){\n            if(lastDigit == 1){\n               \
  \ return nums.size()+1;\n            }\n        }\n        if(lastDigit == 1){\n\
  \            return nums.size()+1;\n        }\n        return nums.size()+1;"
- "        ArrayList<Integer> oddNumbers = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ evenNumbers = new ArrayList<Integer>();\n        oddNumbers.addAll(Arrays.stream(nums).filter(x\
  \ -> x >= 10).boxed().collect(Collectors.toList()));\n        evenNumbers.addAll(Arrays.stream(nums).filter(x\
  \ -> x >= 10).boxed().collect(Collectors.toList()));\n        oddNumbers.removeAll(evenNumbers);\n\
  \        oddNumbers.addAll(evenNumbers);\n        oddNumbers.removeAll(evenNumbers);\n\
  \        if (oddNumbers.size() == 1) {\n            return oddNumbers.get(0);\n\
  \        } else if (oddNumbers.size() > 1) {\n            return oddNumbers.size();\n\
  \        } else {\n            return evenNumbers.get(0);\n        }"
- "        for(int i = 0; i < nums.size(); i++) {\n            if (nums.get(i) > 10\
  \ && nums.get(i) / 2 % 2 == 1) {\n                return nums.size();\n        \
  \    }\n        }\n        return nums.size();"
- "        int counter = 0;\n        for (int i = 0; i < nums.size(); i++) {\n   \
  \         if (nums.get(i) > 10) {\n                if (nums.get(i) % 2 != 0 && nums.get(i)\
  \ % 2 != 1) {\n                    counter++;\n                }\n            }\n\
  \        }\n        return counter;"
- "        Arrays.sort(nums);\n        int count = nums.size();\n        for (int\
  \ i = 0; i < count - 1; i++) {\n            if ((nums.get(i) > 10) && (nums.get(i)\
  \ %2 == 1) && (nums.get(i-1) % 2 != 1)) {\n                return i;\n         \
  \   }\n        }\n        return 0;"
- "        if (nums.size() == 0)\n            return 0;\n        ArrayList<Integer>\
  \ evenNums = new ArrayList<>();\n        ArrayList<Integer> oddNums = new ArrayList<>();\n\
  \        int[] numbers = new int[nums.size()];\n        nums.toArray(numbers);\n\
  \        int firstDigit = numbers[0];\n        int lastDigit = numbers[numbers.length\
  \ - 1];\n        for (int i = 0; i < numbers.length; i++) {\n            if (numbers[i]\
  \ % 2 == 0)\n                evenNums.add(numbers[i]);\n            else\n     \
  \           oddNums.add(numbers[i]);\n        }\n        if (firstDigit % 2 == 0\
  \ && lastDigit % 2 == 1) {\n            return evenNums.size() + oddNums.size();\n\
  \        }\n        if (firstDigit % 2 != 0 || lastDigit % 2 != 1) {\n         \
  \   return oddNums.size();\n        }\n        return evenNums.size();"
- "        double filters = 0;\n        boolean isSpecial = false;\n        for (int\
  \ num : nums) {\n            if ((num / 10) % 2 != 0) {\n                isSpecial\
  \ = true;\n            }\n            int first = (int) Math.floor(num / 100);\n\
  \            int last = (int) Math.ceil(num / 10);\n            if (first % 2 ==\
  \ 0 && last % 2 == 1) {\n                filters++;\n            }\n        }\n\
  \        return filters;"
- "        int count = 0;\n        for (Integer num : nums) {\n            int a =\
  \ Integer.parseInt(String.valueOf(num).trim());\n            if (a > 10) {\n   \
  \             if (a % 2 == 0) {\n                    int b = Integer.parseInt(String.valueOf(a/2).trim());\n\
  \                    if (b % 2 != 0) {\n                        count += 1;\n  \
  \                  }\n                }\n            }\n        }\n        return\
  \ count;"
- "        ArrayList<Integer> numbers = new ArrayList<Integer>(nums);\n        int\
  \ count = 0;\n        for (int i = 0; i < numbers.size(); i++) {\n            if\
  \ (numbers.get(i) > 10 && numbers.get(i) % 2 == 1 && numbers.get(i-1) % 2 == 1)\
  \ {\n                count++;\n            }\n        }\n        return count;"
- "        // Write code here\n        int count = 0;\n        for(int i=0; i<nums.size();\
  \ i++){\n            int n = nums.get(i);\n            if(n > 10 && nums.get(i-1)\
  \ % 2 != 1 && nums.get(i+1) % 2 != 1){\n                count++;\n            }\n\
  \        }\n        return count;"
- "        Map<Integer, Integer> map = new HashMap<>();\n        for (int i = 0; i\
  \ < nums.size(); i++) {\n            map.put(nums.get(i), 1);\n        }\n     \
  \   map.entrySet().stream().filter (e -> e.getValue() > 10).forEach (e -> {\n  \
  \          map.put (e.getKey(), e.getValue());\n        });\n        map.entrySet().stream().filter\
  \ (e -> e.getValue() > 10).forEach (e -> {\n            int count = 0;\n       \
  \     for (int i = 0; i < nums.size(); i++) {\n                if (nums.get(i) ==\
  \ e.getKey()) {\n                    count++;\n                }\n            }\n\
  \            if (count == 2 && e.getValue() % 2 == 1) {\n                map.put\
  \ (e.getKey(), e.getValue());\n            }\n        });\n        return map.size();"
- '        return nums.stream().filter(n -> n > 10 && n % 2 == 1 && nums.get(nums.size()-1)
  % 2 == 1).count();'
- "        int sum = 0;\n        int oddFirst = 0; \n        int oddLast = 0;\n  \
  \      for(int i : nums) {\n            if(i>=10 && i%10==0 && i%2==1) {\n     \
  \           sum += 1;\n            }\n            if(i>=10 && i%10==0 && i%2==0)\
  \ {\n                oddFirst += 1;\n            }\n            if(i>=10 && i%10!=0\
  \ && i%2==0) {\n                oddLast += 1;\n            }\n        }\n      \
  \  return sum;"
- "        int count = 0;\n        for(int i = 0; i < nums.size(); i++) {\n      \
  \      int num = nums.get(i);\n            if(num > 10 && nums.get(i - 1) % 2 ==\
  \ 0 && (nums.get(i - 2) % 2 == 1)) {\n                count++;\n            }\n\
  \        }\n        return count;"
- "        // Your code goes here\n        \n        if(nums==null || nums.size()<2){\n\
  \            return 0;\n        }\n        int numOfOdd=0;\n        for(int i=0;i<nums.size();i++){\n\
  \            int firstDigit=nums.get(i);\n            int lastDigit=nums.get(i-1);\n\
  \            if(firstDigit % 2==1){\n                if(lastDigit %2==1){\n    \
  \                numOfOdd+=1;\n                }\n            }\n        }\n   \
  \     return numOfOdd;\n        "
- "        // Initialize a counter to 0\n        int countOdd = 0;\n        // Initialize\
  \ an empty ArrayList for odd-last digits\n        ArrayList<Integer> odds = new\
  \ ArrayList<>();\n        // Initialize an empty ArrayList for odd-first digits\n\
  \        ArrayList<Integer> oddsFirst = new ArrayList<>();\n        // Initialize\
  \ a boolean flag to indicate if any even digits exist in nums\n        boolean flagEven\
  \ = false;\n        // Initialize a boolean flag to indicate if any odd digits exist\
  \ in nums\n        boolean flagOdd = false;\n        // Initialize a variable to\
  \ hold the current digit\n        int current;\n        // Initialize the iterator\
  \ for the for loop\n        Iterator<Integer> iterator = nums.iterator();\n    \
  \    // Loop to go through each element in the ArrayList\n        while (iterator.hasNext())\
  \ {\n            // Get the current digit\n            current = iterator.next();\n\
  \            // Check if the current digit is odd\n            if (current % 2 !=\
  \ 0) {\n                flagOdd = true;\n            } else {\n                flagEven\
  \ = true;\n            }\n            // If current digit is odd, add it to the\
  \ odds list\n            if (flagOdd) {\n                odds.add(current);\n  \
  \          }\n            // If current digit is odd, add it to the odds-first list\n\
  \            if (flagEven) {\n                oddsFirst.add(current);\n        \
  \    }\n        }\n        // Loop through the odd digits\n        for (Integer\
  \ d : odds) {\n            // Loop through the first digits\n            for (Integer\
  \ f : oddsFirst) {\n                // If both digits are odd, add 1 to the counter\n\
  \                if (d > 10) {\n                    countOdd++;\n              \
  \  }\n                if (f > 10) {\n                    countOdd++;\n         \
  \       }\n            }\n        }\n        // Return the number of odds\n    \
  \    return countOdd;"
- "        int oddSum = 0;\n        for (int i = 0; i < nums.size(); i++){\n     \
  \       if (nums.get(i) > 10 && nums.get(i) % 2 == 1 && nums.get(i-1) % 2 == 1){\n\
  \                oddSum++;\n            }\n        }\n        return oddSum;"
- "        int count = 0;\n        for(int i : nums) {\n            if(i>10) {\n \
  \               if((nums.size()-1)%2 != 0) {\n                    count += 1;\n\
  \                }\n            }\n        }\n        return count;"
- "        Integer i = 0;\n        int k = 0;\n        int count = 0;\n        boolean\
  \ isOdd = nums.get(i).isOdd();\n        boolean isOdd_2 = nums.get(k).isOdd();\n\
  \n        while(i < nums.size()){\n            isOdd_2 = nums.get(i).isOdd();\n\
  \            i++;\n            isOdd = nums.get(i).isOdd();\n            k++;\n\
  \            isOdd_2 = nums.get(k).isOdd();\n\n            if(isOdd_2 && isOdd &&\
  \ (i < nums.size()) && (k < nums.size())){\n                count++;\n         \
  \   }\n        }\n        return count;"
- "        int count = 0;\n        for (int num : nums) {\n            if (num > 10\
  \ && (num % 2 != 0 && num % 3 != 0)) {\n                count++;\n            }\n\
  \        }\n        return count;"
- '        return nums.stream().filter(x -> x > 10 && nums.get(0) % 2 == 0 && nums.get(nums.size()
  - 1) % 2 == 1).count();'
- "        Set<Integer> set = new HashSet<>();\n        nums.forEach((num) -> set.add(num));\n\
  \        int n = nums.size();\n        int result = 0;\n        for (int i = 0;\
  \ i < n; ++i) {\n            if (set.contains(i) && nums.get(i) > 10 && nums.get(i)\
  \ % 2 == 1) {\n                result++;\n            }\n        }\n        return\
  \ result;"
- "        if (nums == null || nums.isEmpty()) return 0;\n        int result = 0;\n\
  \        for (int n : nums) {\n            if (n > 10 && n % 2 == 1 && n % 100 %\
  \ 2 == 1) {\n                result += 1;\n            }\n        }\n        return\
  \ result;"
- "        \n        int count = 0;\n        \n        if (nums.size() > 0) {\n  \
  \          int firstDigit = nums.get(0);\n            int lastDigit = nums.get(nums.size()\
  \ - 1);\n            if (firstDigit % 2 != 0 && lastDigit % 2 != 0) {\n        \
  \        count++;\n            }\n        }\n        \n        return count;"
- "        int count = 0;\n        for(int num : nums) {\n            if(num > 10\
  \ && num % 2 == 1 && num % 2 != 0 && num / 2 % 2 == 1)\n                count++;\n\
  \        }\n        return count;"
- "        int odds = 0;\n        int evens = 0;\n        for(int n : nums) {\n  \
  \          if (n <= 10) {\n                odds++;\n                if (n & 1 ==\
  \ 0) {\n                    evens++;\n                }\n            } else {\n\
  \                odds++;\n                evens++;\n            }\n        }\n \
  \       return odds * evens;"
- '        '
- "        HashMap<Integer, Integer> hashMap = new HashMap<Integer, Integer>();\n\
  \        for (int i = 0; i < nums.size(); i++) {\n            Integer number = nums.get(i);\n\
  \            if (hashMap.containsKey(number)) {\n                hashMap.put(number,\
  \ hashMap.get(number) + 1);\n            } else {\n                hashMap.put(number,\
  \ 1);\n            }\n        }\n        int count = 0;\n        for (Integer key:\
  \ hashMap.keySet()) {\n            int value = hashMap.get(key);\n            if\
  \ (value > 10 && key.first() > 1 && key.last() % 2 != 0) {\n                count++;\n\
  \            }\n        }\n        return count;"
- "        // Solution 1 - Solution 2 combined\n        int count = 0;\n        for\
  \ (int n : nums) {\n            if (n > 10 && n % 2 == 0) {\n                for\
  \ (int i = 2; i <= n / 2; i+= 2) {\n                    if (n % i == 0) {\n    \
  \                    count++;\n                        break;\n                \
  \    }\n                }\n            }\n        }\n        return count;"
- "        Arrays.sort(nums);\n        int count = 0;\n        for (Integer num :\
  \ nums) {\n            if (num > 10 && num / 10 == num % 10 - 1) {\n           \
  \     count++;\n            }\n        }\n        return count;"
- "        for(Integer num : nums){\n            if(num > 10 && num % 2 == 0 && (num\
  \ % 2 == 1 || (num % 2 == 0 && num % 10 == 1)) && num % 10 == 1){\n            \
  \    return nums.size();\n            }\n        }\n        return 0;"
- "        if (nums == null) return 0;\n        int count = 0;\n        for (int i\
  \ = 0; i < nums.size(); i++) {\n            if (nums.get(i) > 10 && nums.get(i)\
  \ % 2 == 1 && nums.get(i - 1) % 2 == 1) {\n                count++;\n          \
  \  }\n        }\n        return count;"
- "        ArrayList<Integer> odds = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ evens = new ArrayList<Integer>();\n        for(int i = 0; i < nums.size(); i++)\
  \ {\n            int num = nums.get(i);\n            int d1 = num % 10;\n      \
  \      int d2 = num / 10;\n            if(d1 != 0 && d2 == 0) {\n              \
  \  odds.add(d1);\n            }\n            if(d2 != 0 && d1 == 0) {\n        \
  \        evens.add(d2);\n            }\n        }\n        boolean even = evens.size()\
  \ % 2 == 0;\n        int result = odds.size() + evens.size();\n        if(even)\
  \ {\n            result += evens.size();\n        }\n        return result;"
- "        ArrayList<Integer> filter = new ArrayList<>();\n        for(Integer i :\
  \ nums) {\n            if(i > 10 && i % 2 == 0 && i / 2 != i) {\n              \
  \  filter.add(i);\n            }\n        }\n        return filter.size();"
- "        ArrayList<Integer> evenNums = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ oddNums = new ArrayList<Integer>();\n        for (Integer num : nums) {\n    \
  \        if (num > 10) {\n                oddNums.add(num);\n            }\n   \
  \         else if (num % 2 == 0) {\n                evenNums.add(num);\n       \
  \     }\n        }\n        int evenCount = evenNums.size();\n        int oddCount\
  \ = oddNums.size();\n        int count = evenCount + oddCount;\n        return count;"
- "        for(int i = 0; i<nums.size(); i++){\n            int value = nums.get(i);\n\
  \            if(value>10){\n                if(value%2==0 && nums.get(i-1)%2==0\
  \ && nums.get(i+1)%2==0){\n                    return value;\n                }\n\
  \            }\n        }\n        return 0;"
- "        //Your code here\n        return 0;"
- "        int count = 1;\n        if (nums.size() >= 1) count = specialFilter(nums,\
  \ nums.get(0), nums.get(nums.size()) - 1);\n        return count;"
- "        \n        int evenCount = 0;\n        int oddCount = 0;\n\n        for(Integer\
  \ i : nums){\n            if(i % 2 == 0){\n                evenCount++;\n      \
  \      }\n            else{\n                oddCount++;\n            }\n      \
  \  }\n        \n        if(oddCount == 2 && evenCount == 1){\n            return\
  \ evenCount;\n        }\n        else{\n            return oddCount;\n        }"
- "        int odds = 0, evens = 0;\n        for(Integer num: nums) {\n          \
  \  odds += num/10%2;\n            evens += num%10;\n        }\n        if (odds\
  \ + evens == 0) {\n            return nums.size();\n        } else {\n         \
  \   return nums.size() - odds - evens;\n        }"
- "        // write your code\n        return 0;"
- "        // Complete this function\n        int counter = 0;\n        \n       \
  \ for(int i : nums){\n            if (i > 10){\n                if (i % 2 == 1 &&\
  \ nums.get(nums.size() - 1) % 2 == 1){\n                    counter++;\n       \
  \         }\n            }\n        }\n        return counter;"
- "        int count = 0;\n        for(int i = 0; i < nums.size(); i++){\n       \
  \     if(nums.get(i) >= 10 && nums.get(i) % 2 != 0 && nums.get(i-1) % 2 != 0){\n\
  \                count++;\n            }\n        }\n        return count;"
- "        int count = 0;\n        for (int num : nums) {\n            if (num > 10)\
  \ {\n                if (isOdd(num) && isOdd(num / 10)) {\n                    count++;\n\
  \                }\n            }\n        }\n        return count;"
- "        // TODO: Your code here\n        for(Integer i : nums) {\n            if(i.intValue()\
  \ > 10 && i%2 != 0) {\n                System.out.println(\"Found \" + i + \" in\
  \ nums\");\n                if(i%10 == 1) {\n                    return 1;\n   \
  \             }\n                else if(i%10 == 2) {\n                    return\
  \ 2;\n                }\n                else {\n                    return 0;\n\
  \                }\n            }\n        }\n        return 0;"
- "        int count = 0;\n        for (int i : nums) {\n            if (i > 10 &&\
  \ nums.get(0) & 1 & nums.get(nums.size() - 1) & 1) {\n                count++;\n\
  \            }\n        }\n        return count;"
- "        if (nums == null) return 0;\n        boolean odd = false;\n        boolean\
  \ firstOdd = false;\n        boolean lastOdd = false;\n        int count = 0;\n\
  \        \n        for(Integer i : nums) {\n            if(odd == false && i % 2\
  \ != 0) odd = true;\n            if(odd == true && (i % 2 == 0 || i == 0)) {\n \
  \               firstOdd = true;\n            }\n            if(odd == true && (i\
  \ % 2 != 0 || i == 0)) {\n                lastOdd = true;\n            }\n     \
  \   }\n        \n        if(firstOdd == true) {\n            for(Integer i : nums)\
  \ {\n                if(odd == false && i % 2 != 0) odd = true;\n              \
  \  if(odd == true && (i % 2 != 0 || i == 0)) {\n                    firstOdd = true;\n\
  \                }\n            }\n        }\n        \n        if(lastOdd == true)\
  \ {\n            for(Integer i : nums) {\n                if(odd == false && i %\
  \ 2 != 0) odd = true;\n                if(odd == true && (i % 2 != 0 || i == 0))\
  \ {\n                    lastOdd = true;\n                }\n            }\n   \
  \     }\n        \n        if(firstOdd == true && lastOdd == true) {\n         \
  \   for(Integer i : nums) {\n                if(odd == false && i % 2 != 0) odd\
  \ = true;\n                if(odd == true && (i % 2 != 0 || i == 0)) {\n       \
  \             lastOdd = true;\n                }\n            }\n        }\n   \
  \     \n        if(firstOdd == true && lastOdd == true) {\n            for(Integer\
  \ i : nums) {\n                if(odd == false && i % 2 != 0) odd = true;\n    \
  \            if(odd == true && (i % 2 != 0 || i == 0)) {\n                    lastOdd\
  \ = true;\n                }\n            }\n        }\n        \n        return\
  \ count;"
- "        return nums.stream()\n                .filter(i -> i>10 && i%2==1 && i%2==0)\n\
  \                .count();"
- "        List<Integer> filteredNums = new ArrayList<>();\n        for (int num :\
  \ nums) {\n            if ((num > 10) && ((num % 2) != 0) && ((num % 2) == (nums.get(nums.size()\
  \ - 1) / 2))) {\n                filteredNums.add(num);\n            }\n       \
  \ }\n        return filteredNums.size();"
- "        int count = 0; \n        for(int i = 0; i < nums.size(); i++)\n       \
  \ {\n            if(nums.get(i) > 10 && nums.get(i) % 2 != 0 && nums.get(i)/2 !=\
  \ 0)\n            {\n                count++;\n            }\n        }\n      \
  \  return count;"
- '        return nums.stream().filter(x -> x > 10).mapToInt(x -> Math.round(x/10)%2).count();'
- "        List<Integer> result = new ArrayList<>();\n        for (int num : nums)\
  \ {\n            if (num > 10) {\n                if (num % 2 != 0 & num % 3 !=\
  \ 0 && num % 5 != 0) {\n                    result.add(num);\n                }\n\
  \            }\n        }\n        return result.size();"
- "        int counter = 0;\n        Arrays.sort(nums);\n        for (int i = 1; i\
  \ < nums.size(); i++) {\n            if (nums.get(i) >= 10 && nums.get(i) % 2 !=\
  \ 0 &&\n                nums.get(i - 1) % 2 != 0)\n                counter++;\n\
  \        }\n        return counter;"
- '        return nums.stream().filter(x -> x > 10).filter(x -> x == x % 10 % 2).count();'
- "        return nums.stream()\n                .filter(x -> x > 10 && x.modulo(10)\
  \ == 1 && x.modulo(10) == -1)\n                .count();"
- "        int totalNum = 0;\n        for (int i : nums) {\n            if (i > 10)\
  \ {\n                for (int j = i; j > (int) Math.pow(2, i); j--) {\n        \
  \            if (j % 2 != 0) {\n                        totalNum += 1;\n       \
  \             }\n                }\n            }\n        }\n        return totalNum;"
- "        int count = 0;\n        for (int n : nums) {\n            if (n > 10 &&\
  \ n % 2 != 0 && n % 2 != 1 && n % 2 != 3)\n                count++;\n        }\n\
  \        return count;"
- "        int counter = 0;\n        for(Integer num : nums) {\n            if (num\
  \ > 10) {\n                if (num % 10 > 9) {\n                    if (num % 100\
  \ > 9) {\n                        counter += 1;\n                    }\n       \
  \         } else {\n                    counter += 1;\n                }\n     \
  \       }\n        }\n        return counter;"
- "        int count = 0;\n        for (Integer i : nums) {\n            if (i.intValue()\
  \ > 10 && i.intValue() % 2 != 0) {\n                if (i.intValue() % 2 == 1 &&\
  \ i.intValue() > 10) {\n                    count++;\n                }\n      \
  \          if (i.intValue() % 2 == 1 && i.intValue() <= 10) {\n                \
  \    count++;\n                }\n            }\n        }\n        return count;"
- "        int count = 0;\n        for (Integer num : nums) {\n            if (num\
  \ > 10 && num / 10 % 2 != 0 && num % 10 % 2 != 0) {\n                count++;\n\
  \            }\n        }\n        return count;"
- "        int count = 0;\n        for (int num : nums) {\n            if (num > 10\
  \ && num % 2 == 0 && num % 2 != 0) {\n                count++;\n            }\n\
  \        }\n        return count;"
- '        return nums.stream().filter(p -> p%2==0 && p > 10).filter(p -> p%2==1 &&
  nums.get(p-1)%2==1).count();'
- "        if (nums.isEmpty()) {\n            return 0;\n        }\n        // First\
  \ we count how many numbers are greater than 10 and the first and \n        // last\
  \ digits are odd\n        int numsGreaterThan10 = nums.stream().filter(n -> n >\
  \ 10).count();\n        int firstOddNum = nums.get(0);\n        int lastOddNum =\
  \ nums.get(nums.size() - 1);\n        int firstOddNumMod2 = firstOddNum % 2;\n \
  \       int lastOddNumMod2 = lastOddNum % 2;\n        // Now we check if the first\
  \ and last elements are odd\n        if (firstOddNumMod2 == 1 && lastOddNumMod2\
  \ == 1) {\n            return numsGreaterThan10;\n        } else {\n           \
  \ return numsGreaterThan10 + numsGreaterThan10 + numsGreaterThan10 - 1;\n      \
  \  }"
- "        int count = 0;\n        for (Integer i : nums) {\n            if (i > 10\
  \ && nums.get(0) % 2 == 1 && nums.get(nums.size() - 1) % 2 == 1) {\n           \
  \     count++;\n            }\n        }\n        return count;"
- "        Map<Integer, Integer> counts = new HashMap<>();\n        for (Integer number\
  \ : nums) {\n            int val = number.intValue();\n            if (val > 10)\
  \ {\n                val = val - (val % 10);\n            }\n            if (counts.containsKey(val))\
  \ {\n                counts.put(val, counts.get(val) + 1);\n            } else {\n\
  \                counts.put(val, 1);\n            }\n        }\n        int count\
  \ = 0;\n        for (Integer val : counts.values()) {\n            if (val > 1 &&\
  \ val % 2 != 0) {\n                count += val;\n            }\n        }\n   \
  \     return count;"
- "        if(nums.size()==0){\n            return 0;\n        }\n        int result=nums.stream().filter(a\
  \ -> a>10&&a%2==1).count();\n        if(nums.size()==1){\n            result+=nums.get(0)\
  \ % 2 == 1;\n        }\n        return result;"
- "        int result = nums.stream().filter(i -> i > 10).count();\n        if (result\
  \ == 0) {\n            System.out.println(\"There is no such number\");\n      \
  \  }\n        else {\n            boolean first_odd = true;\n            boolean\
  \ last_odd = true;\n            for (int i = 0; i < nums.size(); i++) {\n      \
  \          Integer num = nums.get(i);\n                if (num % 2 == 0) {\n   \
  \                 first_odd = false;\n                }\n                if (num\
  \ % 2 != 0) {\n                    last_odd = false;\n                }\n      \
  \      }\n            if (first_odd && last_odd) {\n                System.out.println(\"\
  There is a special number\");\n            }\n        }\n        return result;"
- "        int count = 0;\n        for (int num : nums) {\n            if (num > 10\
  \ && num % 2 == 1 && num % 2 != 0) {\n                count++;\n            }\n\
  \        }\n        return count;"
- "        HashMap<Integer,Integer> aMap = new HashMap<>();\n        for(Integer i:\
  \ nums){\n            if(!aMap.containsKey(i)) {\n                aMap.put(i, 1);\n\
  \            }\n            else{\n                aMap.put(i, aMap.get(i) + 1);\n\
  \            }\n        }\n        if(aMap.get(10) > 1) {\n            return aMap.get(10);\n\
  \        }\n        else{\n            int oddCount = 0;\n            for(Map.Entry<Integer,\
  \ Integer> entry : aMap.entrySet()) {\n                if(entry.getKey() % 2 ==\
  \ 1 && entry.getKey() % 3 != 1) {\n                    oddCount++;\n           \
  \     }\n            }\n            return oddCount;\n        }"
- "        ArrayList<Integer> numbers = new ArrayList<Integer>();\n        for(Integer\
  \ i : nums) {\n            if(i.intValue() > 10 && i.intValue() % 2 != 0) {\n  \
  \              numbers.add(i);\n            }\n        }\n        return specialFilterHelper(numbers);"
- "        int counter = 0;\n        ArrayList<Integer> tempList = new ArrayList<Integer>();\n\
  \        for (int num : nums) {\n            if (num > 10 && num % 2 == 1 && num\
  \ % 2 == 1) {\n                if (num > 10 && num % 2 == 1) {\n               \
  \     tempList.add(num);\n                }\n            }\n        }\n        for\
  \ (int num : tempList) {\n            if (num < 10 && num % 2 != 1) {\n        \
  \        counter++;\n            }\n        }\n        return counter;"
- "        int total = 0;\n        for (int i = 0; i < nums.size(); i++) {\n     \
  \       int num = nums.get(i);\n            if (num > 10) {\n                String\
  \ firstNum = Integer.toString(num).substring(0, 1);\n                String lastNum\
  \ = Integer.toString(num).substring(num.length() - 1, num.length());\n         \
  \       int firstNumLength = firstNum.length();\n                int lastNumLength\
  \ = lastNum.length();\n                if (lastNumLength == 1 && firstNumLength\
  \ == 1) {\n                    int firstNumDigit = Integer.parseInt(firstNum);\n\
  \                    int lastNumDigit = Integer.parseInt(lastNum);\n           \
  \         if (firstNumDigit % 2 == 1 && lastNumDigit % 2 == 1) {\n             \
  \           total += 1;\n                    }\n                }\n            }\n\
  \        }\n        return total;"
- "        // Write your code here\n        \n        for(int i = 0; i<nums.size();\
  \ i++){\n            if(nums.get(i) > 10 && nums.get(i)%2 == 1 && nums.get(i)%2\
  \ == 1){\n                return nums.size();\n            }\n        }\n      \
  \  \n        return 0;"
- '        // write your solution here'
- "        ArrayList<Integer> nums2 = new ArrayList<Integer>();\n        int count\
  \ = 0;\n        for (int i=0; i<nums.size(); i++) {\n            if(nums.get(i)\
  \ > 10 && nums.get(i)/10 == nums.get(i)/10 && nums.get(i)%10 != 0 && nums.get(i)\
  \ % 10%2 == 1) {\n                nums2.add(nums.get(i));\n                count++;\n\
  \            }\n        }\n        \n        return count;"
- "        boolean first = true;\n        int count = 0;\n        for(Integer i :\
  \ nums){\n            if (first) {\n                first = false;\n           \
  \     if (i % 2 == 0) {\n                    if (nums.get(nums.size() - 1) % 2 ==\
  \ 0) {\n                        count++;\n                    }\n              \
  \  }\n            } else {\n                if (i % 2 == 0) {\n                \
  \    if (nums.get(nums.size() - 1) % 2 == 0) {\n                        count++;\n\
  \                    }\n                } else {\n                    if (nums.get(nums.size()\
  \ - 1) % 2 == 0) {\n                        count++;\n                    }\n  \
  \              }\n            }\n        }\n        return count;"
- "        int count = 0;\n        // Write your code here\n        int firstNum =\
  \ nums.get(0);\n        int lastNum = nums.get(nums.size()-1);\n        for (int\
  \ i=0; i<nums.size(); i++){\n            if (nums.get(i)>10 && nums.get(i)%2!=0\
  \ && nums.get(i-1)%2!=0 && nums.get(i+1)%2!=0){\n                count++;\n    \
  \        }\n        }\n        return count;"
- "        ArrayList<Integer> result = new ArrayList<>();\n        int len = nums.size();\n\
  \        for (int i = 0; i < len; i++) {\n            if (nums.get(i) > 10 && nums.get(i)\
  \ % 2 == 1 && nums.get(len-1) % 2 == 1) {\n                result.add(nums.get(i));\n\
  \            }\n        }\n        return result.size();"
- "        if (nums == null || nums.size() == 0) {\n            return 0;\n      \
  \  }\n        int count = 0;\n        int first = nums.get(0) % 10;\n        int\
  \ last = nums.get(nums.size() - 1) % 10;\n        \n        for (Integer num : nums)\
  \ {\n            if (num > 10 && first % 2 == 1 && last % 2 == 1) {\n          \
  \      count++;\n            }\n        }\n        return count;"
- '        return nums.size() - specialFilter(nums);'
- "        int sum = 0, odd = 0, even = 0;\n        for(Integer i : nums) {\n    \
  \        sum += i;\n        }\n        for(int i = 0; i < nums.size(); i++) {\n\
  \            int currentSum = nums.get(i);\n            if((currentSum % 10) ==\
  \ 0) {\n                if(currentSum % 2 == 0) {\n                    even++;\n\
  \                }\n            } else {\n                if(currentSum % 2 == 1)\
  \ {\n                    odd++;\n                }\n            }\n        }\n \
  \       int result = (sum - 10 + odd) + (even * 2);\n        return result;"
- "        int a[] = new int[nums.size()];\n        for (int i = 0; i < nums.size();\
  \ i++){\n            a[i] = nums.get(i);\n        }\n        int count = 0;\n  \
  \      Arrays.sort(a);\n        for(int i : a){\n            if(i > 10 && nums.get(i/2)\
  \ % 2 == 1){\n                count++;\n            }\n        }\n        return\
  \ count;"
- "        int result = 0;\n        for(int i=0;i<nums.size();i++)\n        {\n  \
  \          int x = nums.get(i);\n            if(x > 10){\n                if((x%2)\
  \ != 0 || (x%6) != 0){\n                    result++;\n                }\n     \
  \       }\n        }\n        return result;"
- "       \n        int count = 0;\n        for(Integer i : nums) {\n            \n\
  \            if (i>10) {\n                if (i.divide(10).mod(2)==1) {\n      \
  \              if (i.divide(10).mod(2)==0) {\n                        count++;\n\
  \                    }\n                }\n            }\n        }\n        return\
  \ count;"
- '        return nums.stream().filter(a -> a%2==1 && 0<=a&&a<10 && a%2==1).count();'
- "        Arrays.sort(nums);\n        \n        Set<Integer> set = new HashSet<>();\n\
  \        int count = 0;\n        \n        for (Integer num : nums) {\n        \
  \    if (num > 10) {\n                \n                // Odd first digit\n   \
  \             if ((num % 10) % 2 != 0) {\n                    \n               \
  \     // Odd last digit\n                    if ((num % 100) % 2 != 0) {\n     \
  \                   count++;\n                    }\n                }\n       \
  \     }\n            \n            // Odd first digit\n            if ((num % 10)\
  \ % 2 != 0) {\n                set.add(num);\n            }\n        }\n       \
  \ \n        return set.size();"
- "        int count = 0;\n        for (Integer i : nums) {\n            if (i > 10\
  \ && i%2 != 0 && i%2 != 1) {\n                count++;\n            }\n        }\n\
  \        return count;"
- "        int ans = 0;\n        for(Integer i : nums) {\n            int count =\
  \ 1;\n            while(true) {\n                if(i.intValue() < 10 && i.intValue()\
  \ % 2 != 1) {\n                    break;\n                }\n                if(i.intValue()\
  \ < 10) {\n                    ans += count;\n                    count = 1;\n \
  \               } else {\n                    if(i != i.intValue() && i.intValue()\
  \ % 2 == 1) {\n                        ans += count;\n                        break;\n\
  \                    } else {\n                        count += 1;\n           \
  \         }\n                }\n                i = i.intValue() / 10;\n       \
  \     }\n        }\n        return ans;"
- "        for(int i = 0; i < nums.size(); i++) {\n            int first = (int) nums.get(i);\n\
  \            int second = (int) nums.get(i + 1);\n            if(first > 10 && (second\
  \ % 2 == 1 || second % 2 == 0)) {\n                return i+1;\n            }\n\
  \        }\n        return 0;"
- "        int[] result = new int[nums.size()];\n        int sum = 0;\n        for\
  \ (int i = 0; i < nums.size(); i++) {\n            int x = nums.get(i);\n      \
  \      if (x > 10) {\n                result[i] = x;\n                sum += x;\n\
  \            }\n        }\n        return sum;"
- "        boolean first = false;\n        boolean last = false;\n        int counter\
  \ = 0;\n        for(Integer num : nums) {\n            if(!first && !last) {\n \
  \               if(num > 10)\n                    counter++;\n            } else\
  \ if(first && last) {\n                if(num > 10) {\n                    if(num\
  \ % 2 != 0 && num % 3 != 0)\n                        counter++;\n              \
  \  }\n            }\n            first = false;\n            last = false;\n   \
  \     }\n        return counter;"
- "        int count = 1;\n        for (Integer n : nums) {\n            if (n > 10\
  \ && nums.get(0) % 2 == 1 && nums.get(nums.size() - 1) % 2 == 1) {\n           \
  \     count++;\n            }\n        }\n        return count;"
- "        int n = nums.size();\n        int count = 0;\n        List<Integer> specialNumbers\
  \ = new ArrayList<>();\n        for(Integer num : nums){\n            int firstDigit\
  \ = num % 10;\n            int lastDigit = num / 10;\n            boolean isOdd\
  \ = firstDigit % 2 == 1;\n            boolean isOddFirstLast = firstDigit % 2 ==\
  \ 0 && lastDigit % 2 == 1;\n            boolean isEven = firstDigit % 2 == 0;\n\
  \            boolean isEvenFirstLast = firstDigit % 2 == 1 && lastDigit % 2 == 0;\n\
  \            if(isOdd && isOddFirstLast && isEven && isEvenFirstLast){\n       \
  \         specialNumbers.add(num);\n                count++;\n            }\n  \
  \      }\n        return count;"
- "        int sum = 0;\n        for(int n: nums){\n            int firstDigit = n\
  \ % 10;\n            int lastDigit = nums.get(n) / 10;\n            if (firstDigit\
  \ % 2 == 1 && lastDigit % 2 == 1){\n                sum += 1;\n            }\n \
  \       }\n        return sum;"
- "        int count = 0;\n        for (int i = 0; i < nums.size(); i++) {\n     \
  \       if (nums.get(i) > 10) {\n                for (int j = i; j < nums.size();\
  \ j++) {\n                    if (nums.get(j) % 2 != 0 && nums.get(i) % 2 == 1)\
  \ {\n                        count = count + 1;\n                        break;\n\
  \                    }\n                }\n            }\n        }\n        return\
  \ count;"
- "        int count = 0;\n        for (int i = 0; i < nums.size(); i++) {\n     \
  \       if (nums.get(i) > 10 && nums.get(i) % 2 != 0 && nums.get(i) % 2 != 1) {\n\
  \                count++;\n            }\n        }\n        return count;"
- "        int count = 0;\n        for(int i = 0; i < nums.size(); i++) {\n      \
  \      Integer num = nums.get(i);\n            if( num > 10 && num.mod(2).equals(0)\
  \ && nums.get(i -1).mod(2).equals(0) && nums.get(i +1).mod(2).equals(0) )\n    \
  \            count++;\n        }\n        return count;"
- "        int count = 0; \n        for (int i = 0; i < nums.size(); i++) {\n    \
  \        int val = nums.get(i);\n            if (val > 10 && val / 10%2 == 1 &&\
  \ val % 10%2 == 1)\n                count++;\n        }\n        return count;"
- "        int count = 0;\n        for (int i = 0; i < nums.size(); i++) {\n     \
  \       if (nums.get(i) > 10) {\n                for (int j = i; j < nums.size();\
  \ j++) {\n                    if (nums.get(j) % 2 != 0 && nums.get(j) % 2 != 1)\
  \ {\n                        if (nums.get(j) > 10) {\n                         \
  \   int n = nums.get(j) - 10;\n                            if (nums.get(i) % 2 ==\
  \ 0 && nums.get(j) % 2 == 1) {\n                                if (n > 10 && nums.get(j)\
  \ > 10) {\n                                    count++;\n                      \
  \              break;\n                                }\n                     \
  \       } else {\n                                if (n > 10) {\n              \
  \                      count++;\n                                    break;\n  \
  \                              }\n                            }\n              \
  \          }\n                    }\n                }\n            }\n        }\n\
  \        return count;"
- "        final int[] arr = nums.toArray();\n        for (int i : arr) {\n      \
  \      if (i > 10) {\n                int j = 0;\n                while (j < arr.length\
  \ && arr[j] < 10) {\n                    j++;\n                }\n             \
  \   if (j == arr.length) {\n                    return 1;\n                }\n \
  \               if (arr[j] % 2 == 0) {\n                    if (arr[j] > 10 && arr[j-1]\
  \ % 2 != 0) {\n                        return 1;\n                    }\n      \
  \          }\n            }\n        }\n        return 0;"
- "        int[] digits = new int[9];\n        for (int num : nums) {\n          \
  \  for (int index = 0; index < digits.length; index++) {\n                digits[index]\
  \ = num % 10; // get the last digit\n                num = num / 10; // remove the\
  \ last digit\n            }\n            if (digits[2] % 2 == 1 && digits[3] % 2\
  \ == 1)\n                return nums.size();\n        }\n        return 0;"
- '        //code'
- "        return nums.stream()\n                .filter(i->i>=10 && i%2==1 && i%10==1)\n\
  \                .count()+1;"
- "        for(Integer num : nums) {\n            if(num > 10 && num.mod(2).equals(1)\
  \ && num.mod(2).equals(1)) {\n                return nums.size();\n            }\n\
  \        }\n        return 0;"
- "        int count = 0;\n        for(Integer num : nums) {\n            if(num >\
  \ 10) {\n                if(num % 2 == 0 && num / 2 % 2 != 0) {\n              \
  \      count++;\n                }\n            }\n        }\n        return count;"
- "        if (nums.size() < 2) {\n            return 0;\n        }\n        for(int\
  \ i = 0; i < nums.size(); i++) {\n            if (nums.get(i) > 10) {\n        \
  \        if (nums.get(i) % 2 != 0) {\n                    if (nums.get(i) < 10)\
  \ {\n                        return nums.size() - 2;\n                    }\n  \
  \              }\n            }\n        }\n        return nums.size() - 1;"
- "        // Write code here\n        int sum=0;\n        for(int i=0;i<nums.size();i++){\n\
  \            if(nums.get(i)>10){\n                if(nums.get(i)%2==1){\n      \
  \              sum++;\n                }\n                if(nums.get(i)%2==0){\n\
  \                    sum++;\n                }\n            }\n        }\n     \
  \   return sum;"
- "        Arrays.sort(nums);\n        return nums.size();"
- "        for(Integer i : nums) {\n            if(i.intValue() > 10 && (i.intValue()\
  \ % 2 == 1) && \n                    (i%100 == 0 || (i.intValue()%100 != 0 && (i.intValue()%100\
  \ != 1)))) \n                return 1;\n        }\n        return 0;"
- "        //Your code here\n        int count1 = 0;\n        for(int i = 0 ; i <\
  \ nums.size() ; i++) {\n            int num1 = nums.get(i);\n            int count2\
  \ = 0;\n            while(num1 >= 10) {\n                num1 = num1/10;\n     \
  \           count2++;\n            }\n            if (num1 % 2 == 1 && num1 % 2\
  \ == 0) {\n                count1++;\n            }\n        }\n        return count1;"
- "        ArrayList<Integer> filteredNums = new ArrayList<>();\n        for (int\
  \ i = 0; i < nums.size(); i++) {\n            if (nums.get(i) > 10) {\n        \
  \        filteredNums.add(nums.get(i));\n            }\n        }\n        System.out.println(filteredNums.size());\n\
  \        return filteredNums.size();"
- "        int result = 0;\n        for(int i : nums) {\n            if(i>10 && (i%2)==1\
  \ && i%10==1) {\n                result++;\n            }\n        }\n        return\
  \ result;"
- "        System.out.println(\"nums = \" + nums);\n        int count = 0;\n     \
  \   for (Integer x : nums) {\n            if (x > 10 && x == x.mod(2)) {\n     \
  \           if (x.mod(2) == 1 && x.mod(3) == 1) {\n                    count++;\n\
  \                }\n            }\n        }\n        return count;"
- "        int count = 0;\n        for (int i = 0; i < nums.size(); i++) {\n     \
  \       if (nums.get(i) > 10 && nums.get(i) % 2 == 1 && nums.get(i) != 10) {\n \
  \               count++;\n            }\n        }\n        return count;"
- "        int count = 0; // How many numbers are greater than 10 and both \n    \
  \    // the first and last digits are odd.\n        for(Integer i : nums) {\n  \
  \          if(i.intValue() > 10 && i.intValue() % 2 == 1 && \n                (i.getFirstDigit().intValue()\
  \ % 2 == 0 && \n                i.getLastDigit().intValue() % 2 == 0)) {\n     \
  \           count++;\n            }\n        }\n        return count;"
- "        // The list must be sorted for this method to work properly.\n        Collections.sort(nums);\n\
  \        \n        int count = 0;\n        for (int i = 0; i < nums.size(); i++)\
  \ {\n            // To check if the first digits and last digits are odd or even.\n\
  \            if (nums.get(i) % 2 == 0 && (nums.get(nums.size() - 1) - nums.get(i))\
  \ == 1) {\n                count++;\n            }\n        }\n        return count;"
- "        return nums.stream().filter(i -> {\n            boolean a = i % 2 == 0;\n\
  \            boolean b = nums.get(nums.size() - 1) % 2 == 0;\n            return\
  \ a && b;\n        }).count();"
- "        int count = 0;\n        for (Integer i : nums) {\n            if (i > 10\
  \ && isOdd(i) && isOdd(nums.get(0))) {\n                count++;\n            }\n\
  \        }\n        return count;"
language: java
name: HumanEval_146_specialFilter
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Write a function that takes an array of numbers as input\
  \ and returns \n    // the number of elements in the array that are greater than\
  \ 10 and both \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n\
  \    // For example:\n    // specialFilter([15, -73, 14, -15]) => 1 \n    // specialFilter([33,\
  \ -2, -3, 45, 21, 109]) => 2\n    public static int specialFilter(ArrayList<Integer>\
  \ nums) {\n"
stop_tokens:
- "    }\n    //"
- "    }\n    p"
- '    }

  }'
- "\n    }\n"
tests: "}\n    public static void main(String[] args) {\n    assert(specialFilter((new\
  \ ArrayList<Integer>(Arrays.asList((int)5, (int)-2, (int)1, (int)-5)))) == (0));\n\
  \    assert(specialFilter((new ArrayList<Integer>(Arrays.asList((int)15, (int)-73,\
  \ (int)14, (int)-15)))) == (1));\n    assert(specialFilter((new ArrayList<Integer>(Arrays.asList((int)33,\
  \ (int)-2, (int)-3, (int)45, (int)21, (int)109)))) == (2));\n    assert(specialFilter((new\
  \ ArrayList<Integer>(Arrays.asList((int)43, (int)-12, (int)93, (int)125, (int)121,\
  \ (int)109)))) == (4));\n    assert(specialFilter((new ArrayList<Integer>(Arrays.asList((int)71,\
  \ (int)-2, (int)-33, (int)75, (int)21, (int)19)))) == (3));\n    assert(specialFilter((new\
  \ ArrayList<Integer>(Arrays.asList((int)1)))) == (0));\n    assert(specialFilter((new\
  \ ArrayList<Integer>(Arrays.asList()))) == (0));\n    }\n\n}\n"
