completions:
- "        ArrayList<Integer> correct = new ArrayList<>();\n        int numCorrect\
  \ = 0;\n        int numGuessed = 0;\n        int index = 0;\n\n        int index\
  \ = 0;\n        for (int x = 0; x < game.size(); x++) {\n            // If there\
  \ is a correct guess at any point, that means that game is correct.\n          \
  \  // We simply need to increment the score by the number of correct guesses.\n\
  \            // If no guesses have been made, we simply set the score to 0.\n  \
  \          // If an incorrect guess has been made, we increment the score by the\
  \ number of incorrect guesses.\n            if (guess.get(index) == game.get(x))\
  \ {\n                numGuessed++;\n                if (numGuessed > 0) {\n    \
  \                numCorrect++;\n                }\n            }\n            else\
  \ {\n                numCorrect++;\n            }\n\n            index++;\n    \
  \    }\n\n        int[] correctArray = new int[numCorrect];\n        int[] guessArray\
  \ = new int[numGuessed];\n        for (int x = 0; x < game.size(); x++) {\n    \
  \        correctArray[x] = game.get(x) == guess.get(x);\n            guessArray[x]\
  \ = guess.get(x);\n        }\n\n        for (int x = 0; x < game.size(); x++) {\n\
  \            if (correctArray[x] == guessArray[x]) {\n                correct.add(x);\n\
  \            }\n        }\n\n        int[] difference = new int[game.size()];\n\
  \        for (int x = 0; x < game.size(); x++) {\n            difference[x] = Math.abs(correct.get(x)\
  \ - guessArray[x]);\n        }\n\n        return difference;"
- "        // write your code here\n        ArrayList<Integer> result = new ArrayList<>();\n\
  \        for (int i = 0; i < guess.size(); i++) {\n            int a = game.get(i);\n\
  \            int b = guess.get(i);\n            if (a == b) {\n                result.add(i);\n\
  \            }\n        }\n        return result;"
- "        ArrayList<Integer> guesses = new ArrayList<>();\n        int[] guessScores\
  \ = new int[guess.size()];\n        int index = 0;\n        boolean correctGuess\
  \ = true;\n        while (index < game.size() && correctGuess) {\n            int\
  \ currentGuess = guess.get(index);\n            int currentScore = game.get(index);\n\
  \            guesses.add(currentGuess);\n            guessScores[index] = currentScore;\n\
  \            if (currentScore == 0) {\n                correctGuess = false;\n \
  \           }\n            index++;\n        }\n        if (correctGuess) {\n  \
  \          return guesses;\n        } else {\n            ArrayList<Integer> off\
  \ = new ArrayList<>();\n            for (int i = 0; i < guess.size(); i++) {\n \
  \               int offScore = Math.abs(guessScores[i] - game.get(i));\n       \
  \         off.add(offScore);\n            }\n            return off;\n        }"
- "        // Your code here.\n        int x = 0;\n        int y = 0;\n        int\
  \ z = 0;\n        boolean check = false;\n        while(x < game.size() && y < guess.size())\
  \ {\n            if(game.get(x) == guess.get(y)) {\n                check = true;\n\
  \                x = x + 1;\n                y = y + 1;\n            } else if(check\
  \ == true) {\n                z = z + Math.abs(guess.get(y) - game.get(x));\n  \
  \              x = x + 1;\n                y = y + 1;\n            } else {\n  \
  \              z = z + Math.abs(guess.get(y) - game.get(x));\n                x\
  \ = x + 1;\n                y = y + 1;\n            }\n        }\n        ArrayList<Integer>\
  \ output = new ArrayList<>();\n        output.add(z);\n        return output;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        Arrays.sort(game);\n\
  \        Arrays.sort(guess);\n        int guessedCorrectly = 0;\n        for(int\
  \ i = 0; i < game.size(); i++){\n            if(guess.get(i) == game.get(i)) {\n\
  \                guessedCorrectly++;\n            }\n        }\n        for(int\
  \ i = 0; i < guess.size(); i++){\n            Integer guess = guess.get(i);\n  \
  \          Integer score = game.get(i);\n            int difference = Math.abs(guess\
  \ - score);\n            result.add(difference);\n        }\n        if(guessedCorrectly\
  \ == guess.size()){\n            for(int i = 0; i < guess.size(); i++){\n      \
  \          Integer guess = guess.get(i);\n                Integer score = game.get(i);\n\
  \                if(guess == score){\n                    result.add(0);\n     \
  \           }\n                else {\n                    result.add(Math.abs(guess\
  \ - score));\n                }\n            }\n        }\n        return result;"
- "        ArrayList<Integer> guessesRemaining = new ArrayList<Integer>();\n     \
  \   ArrayList<Integer> results = new ArrayList<Integer>();\n        int size = game.size();\n\
  \        int guessSize = guess.size();\n\n        int score = 0;\n        int guessCounter\
  \ = 0;\n        for (int i = 0; i < size; i++) {\n            if (game.get(i) ==\
  \ guess.get(guessCounter)) {\n                score++;\n                guessCounter++;\n\
  \            }\n            guessesRemaining.add(guess.get(guessCounter));\n   \
  \     }\n        // If there are no more guesses remaining, then the game is finished\n\
  \        if (guessCounter == guessSize) {\n            score = 0;\n        }\n \
  \       results.add(score);\n        // The guess is correct if every remaining\
  \ guess is correct\n        for (int i = 0; i < guessesRemaining.size(); i++) {\n\
  \            if (guessCounter == guessSize) {\n                results.add(0);\n\
  \                break;\n            }\n            if (guessesRemaining.get(i)\
  \ == guess.get(guessCounter)) {\n                score = 0;\n            } else\
  \ {\n                score++;\n            }\n            results.add(score);\n\
  \            guessCounter++;\n        }\n        return results;"
- "        int size = guess.size();\n        ArrayList<Integer> result = new ArrayList<>(size);\n\
  \        if (game.size() != guess.size()) {\n            throw new IllegalArgumentException(\"\
  The size of the game and guess arrays must match\");\n        }\n        if (game.size()\
  \ == 0) {\n            result.add(0);\n            return result;\n        }\n \
  \       if (guess.size() == 0) {\n            result.add(game.size());\n       \
  \     return result;\n        }\n        Map<Integer, Integer> map = new HashMap<>();\n\
  \        for (int i = 0; i < game.size(); i++) {\n            map.put(game.get(i),\
  \ guess.get(i));\n        }\n        int index = 0;\n        boolean found = false;\n\
  \        while (!found && index < game.size()) {\n            int gameValue = game.get(index);\n\
  \            int guessValue = map.get(gameValue);\n            int diff = Math.abs(guessValue\
  \ - gameValue);\n            if (gameValue == guessValue) {\n                result.add(0);\n\
  \                found = true;\n            } else {\n                result.add(diff);\n\
  \            }\n            index++;\n        }\n        return result;"
- "        if (game.size() != guess.size()){\n            throw new IllegalArgumentException(\"\
  The two lists have different sizes. Game size: \" + game.size() + \", guess size:\
  \ \" + guess.size());\n        }\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
  \        for (int i = 0; i < game.size(); i++) {\n            int gameScore = game.get(i);\n\
  \            int guessScore = guess.get(i);\n            result.add((Math.abs(guessScore\
  \ - gameScore)));\n        }\n        return result;"
- "        // Your code here\n        return game;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        for (int\
  \ i = 0; i < game.size(); i++) {\n            Integer guessedCorrectly = guess.get(i);\n\
  \            if (guessedCorrectly == 0) {\n                result.add(0, game.get(i));\n\
  \            } else {\n                result.add((int) Math.abs (guess.get(i) -\
  \ game.get(i)));\n            }\n        }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>(game);\n        for(int\
  \ i = 0; i < guess.size(); i++) {\n            result.add(i, Math.abs(guess.get(i)\
  \ - game.get(i)));\n        }\n        return result;"
- "        ArrayList<Integer> wrong = new ArrayList<>();\n        for (int i = 0;\
  \ i < game.size(); i++) {\n            Integer g = guess.get(i);\n            int\
  \ diff = g - game.get(i);\n            if (diff < 0) {\n                wrong.add(i);\n\
  \            }\n            if (diff == 0) {\n                wrong.add(i);\n  \
  \          }\n        }\n        return wrong;"
- "        ArrayList<Integer> result = new ArrayList<>();\n\n        int max = game.size();\n\
  \        for(int i=0;i<max;i++) {\n            int score = 0;\n            int maxguess\
  \ = guess.size();\n            int j = 0;\n            while(j<maxguess && guess!=null)\
  \ {\n                if (game.get(i)==guess.get(j)) {\n                    score++;\n\
  \                    j++;\n                } else {\n                    score+=guess!=null\
  \ ? -Math.abs(guess-game.get(i)) : game.get(i);\n                    j++;\n    \
  \            }\n            }\n\n            Collections.max(result, score);\n\n\
  \        }\n\n        return result;"
- "        ArrayList<Integer> errors = new ArrayList<>();\n        // This is my personal\
  \ favourite way to express a for loop in Java. I can use\n        // the .forEach\
  \ method on an Iterable to execute code on each item of a\n        // collection.\
  \ There are other methods, but I feel they might be overkill\n        // here.\n\
  \        game.stream().forEach(v -> {\n            int diff = 0;\n            boolean\
  \ notCorrect = false;\n            // We use an enhanced for loop to get the scores\
  \ from the game array\n            for (int i = 0; i < game.size(); i++) {\n   \
  \             if (game.get(i) == v) {\n                    // if the score matches\
  \ the score in the game array, we can assume we did not win\n                  \
  \  // because we would have exited the for loop anyway\n                    diff\
  \ = 0;\n                    notCorrect = false;\n                    break;\n  \
  \              } else if (guess\n                        .contains(i) && game.get(i)\
  \ > guess.get(i)) {\n                    diff = game.get(i) - guess.get(i);\n  \
  \                  notCorrect = true;\n                    break;\n            \
  \    }\n            }\n            if (notCorrect) {\n                errors.add(diff);\n\
  \            }\n        });\n        return errors;"
- "        ArrayList<Integer> diff = new ArrayList<>();\n        ArrayList <Integer>\
  \ temp = new ArrayList();\n        int gameCounter = 0;\n        int guessCounter\
  \ = 0;\n        int gameMax = game.size() - 1;\n        int guessMax = guess.size()\
  \ - 1;\n        while(gameCounter < gameMax && guessCounter < guessMax) {\n    \
  \        if (game.get(gameCounter) == guess.get(guessCounter)) {\n             \
  \   gameCounter++;\n                guessCounter++;\n            } else {\n    \
  \            gameCounter++;\n                diff.add(Math.abs(guess.get(guessCounter)\
  \ - game.get(gameCounter)));\n            }\n        }\n        if (guessCounter\
  \ > guessMax) {\n            diff.add(Math.abs(guess.get(guessCounter) - game.get(gameCounter)));\n\
  \        }\n        if (gameCounter > gameMax) {\n            diff.add(Math.abs(guess.get(guessCounter)\
  \ - game.get(gameCounter)));\n        }\n        return diff;"
- "        if (game.size() != guess.size()) {\n            throw new AssertionError(\"\
  game = \" + game.toString() + \" guess = \" + guess.toString());\n        }\n  \
  \      ArrayList<Integer> result = new ArrayList<>(game.size());\n        int i\
  \ = 0;\n        for (Integer game : game) {\n            for (Integer guess : guess)\
  \ {\n                if (game == guess) {\n                    result.set(i, 0);\n\
  \                } else {\n                    int gameDiff = Math.abs(guess - game);\n\
  \                    result.set(i, gameDiff);\n                }\n             \
  \   i++;\n            }\n        }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>(game.size());\n    \
  \    // compare each element in the game list to each element in the guess list\n\
  \        for (Integer i : game) {\n            int diff = 0;\n            for (Integer\
  \ j : guess) {\n                diff = Math.abs(i - j);\n            }\n       \
  \     // result is the difference in score for each element in the guess list\n\
  \            result.add(diff);\n        }\n        return result;"
- "        ArrayList<Integer> results = new ArrayList<Integer>();\n        for(int\
  \ i = 0; i < game.size(); i++) {\n            int guess = guess.get(i);\n      \
  \      int gameScore = game.get(i);\n            results.add(Math.abs(guess - gameScore));\n\
  \        }\n        return results;"
- "        ArrayList<Integer> answer=new ArrayList<Integer>();\n        int i=0;\n\
  \        while(i<game.size()) {\n            int diff=Math.abs(guess.get(i)-game.get(i));\n\
  \            if(diff==0) answer.add(0);\n            else answer.add(diff);\n  \
  \          i++;\n        }\n        return answer;"
- "        ArrayList<Integer> gameScore = new ArrayList<Integer>(game);\n        ArrayList<Integer>\
  \ guessScore = new ArrayList<Integer>(guess);\n        ArrayList<Integer> score\
  \ = new ArrayList<Integer>();\n\n        for (int i = 0; i < game.size(); i++) {\n\
  \            if (guessScore.contains(gameScore.get(i))) {\n                score.add(0,\
  \ 0);\n            } else {\n                score.add(Math.abs(guessScore.get(i)\
  \ - gameScore.get(i)));\n            }\n        }\n        return score;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        if (game.size()\
  \ != guess.size()) {\n            System.err.println(\"Size mismatch\");\n     \
  \       return result;\n        }\n        \n        for (int i = 0; i < game.size();\
  \ i++) {\n            int diff = game.get(i) - guess.get(i);\n            if (diff\
  \ > 0) result.add(diff);\n            else result.add(Math.abs(diff));\n       \
  \ }\n        \n        return result;"
- "        ArrayList<Integer> diff = new ArrayList<>(guess.size());\n        int bestMatch\
  \ = -1000000000;\n        for (int i = 0; i < guess.size(); i++) {\n           \
  \ int currMatch = game.indexOf(guess.get(i));\n            if (bestMatch < currMatch)\
  \ {\n                bestMatch = currMatch;\n            }\n            if (currMatch\
  \ > bestMatch) {\n                diff.set(i, Math.abs(bestMatch - guess.get(i)));\n\
  \            } else {\n                diff.set(i, 0);\n            }\n        }\n\
  \        return diff;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        int len\
  \ = game.size();\n        int guessed = 0;\n        for (int i = 0; i < len; ++i)\n\
  \            if (guess.get(i) == game.get(i)) {\n                guessed = 1;\n\
  \                result.add(0);\n            } else {\n                result.add(Math.abs(guess.get(i)\
  \ - game.get(i)));\n            }\n        if (guessed == 1)\n            return\
  \ result;\n        else\n            return Arrays.copyOf(result, result.size());"
- "        // write your code here\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
  \        boolean flag = true;\n        int i = 0, j = 0;\n        while(flag){\n\
  \            if(game.get(i) == guess.get(j)){\n                result.add(0);\n\
  \                i++;\n                j++;\n            }\n            else{\n\
  \                i++;\n                j++;\n                result.add(Math.abs(game.get(i)\
  \ - guess.get(j)));\n            }\n        }\n        return result;"
- "        \n        ArrayList<Integer> result = new ArrayList<Integer>();\n     \
  \   \n        if(game.size() != guess.size()) {\n            throw new IllegalArgumentException();\n\
  \        }\n\n        // Set difference array\n        int[] dif = new int[game.size()];\n\
  \        Arrays.fill(dif, Integer.MIN_VALUE);\n\n        // Start by iterating over\
  \ each score and each guess index\n        for (int i = 0; i < game.size(); i++)\
  \ {\n            \n            // The index of the first score to consider\n   \
  \         int firstScore = i;\n\n            // Iterate over the remaining guesses\
  \ by iterating backwards\n            for (int j = game.size() - 1; j >= firstScore;\
  \ j--) {\n\n                // Compare each score to each guess\n              \
  \  if (game.get(i) == guess.get(j)) {\n                    \n                  \
  \  // If the scores are equal, mark the guess as wrong\n                    if (i\
  \ == j) {\n                        dif[i] = -1;\n                    }\n       \
  \             \n                    // If they are equal, mark the guess as correct\n\
  \                    else {\n                        dif[i] = dif[j];\n        \
  \            }\n                }\n\n                // If no match is found, set\
  \ the guess as wrong\n                else {\n                    dif[i] = dif[j];\n\
  \                }\n            }\n            \n            // Add the difference\
  \ to the result\n            result.add(dif[i]);\n        }\n\n        return result;"
- "        ArrayList<Integer> gameScores = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ guessScores = new ArrayList<Integer>();\n        for(int i =0; i < game.size();\
  \ i++) {\n            if(game.get(i) == guess.get(i)) {\n                gameScores.add(0);\n\
  \                guessScores.add(0);\n            }\n            else {\n      \
  \          gameScores.add(Math.abs(game.get(i) - guess.get(i)));\n             \
  \   guessScores.add(Math.abs(guess.get(i) - game.get(i)));\n            }\n    \
  \    }\n        return new ArrayList<Integer>(gameScores);"
- "        // Your code here\n        ArrayList<Integer> correct = new ArrayList<>();\n\
  \        Arrays.stream(game).forEach(g -> {\n            if (guess.contains(g))\
  \ {\n                correct.remove(g);\n            }\n        });\n        if\
  \ (correct.isEmpty()) {\n            Arrays.stream(game).forEach(g -> {\n      \
  \          if (guess.contains(g)) {\n                    correct.add(0);\n     \
  \           } else {\n                    correct.add(Math.abs(g - guess.stream().min(Integer::compare).get()));\n\
  \                }\n            });\n        }\n        return correct;"
- "        ArrayList<Integer> guessed = new ArrayList<Integer>(guess);\n        ArrayList<Integer>\
  \ scores = new ArrayList<Integer>(game);\n        for (int i = 0; i < guess.size();\
  \ i++) {\n            if (guessed.get(i) != null) {\n                guessed.get(i)\
  \ = Integer.valueOf(guessed.get(i) - game.get(i));\n            }\n        }\n \
  \       return guessed;"
- "        ArrayList<Integer> result = new ArrayList<>();\n        int i, j, k, m,\
  \ n = 0;\n        int[] scores = new int[game.size()];\n        for (i = 0; i <\
  \ game.size(); i++) {\n            scores[i] = game.get(i);\n        }\n       \
  \ // System.out.println(\"SCORES: \" + Arrays.toString(scores));\n        int[]\
  \ guesses = new int[guess.size()];\n        for (i = 0; i < guesses.length; i++)\
  \ {\n            guesses[i] = guess.get(i);\n        }\n        // System.out.println(\"\
  GUESSES: \" + Arrays.toString(guesses));\n        for (i = 0; i < guesses.length;\
  \ i++) {\n            // System.out.println(\"INDEX: \" + i);\n            for (j\
  \ = 0; j < game.size(); j++) {\n                if (guesses[i] == game.get(j)) {\n\
  \                    k = 1;\n                }\n                else {\n       \
  \             k = -1;\n                }\n                m = -k;\n            \
  \    // System.out.println(\"SCORE: \" + scores[j] + \" GUESSES: \" + guesses[i]\
  \ + \" - \" + m + \" \");\n                if (guesses[i] != game.get(j)) {\n  \
  \                  // System.out.println(\"NOT SCORES: \" + scores[j] + \" GUESSES:\
  \ \" + guesses[i] + \" - \" + m + \" \");\n                    n++;\n          \
  \      }\n                else {\n                    n = 0;\n                }\n\
  \                // System.out.println(\"RESULT: \" + n);\n                result.add(n);\n\
  \            }\n        }\n        // System.out.println(\"RESULT: \" + result);\n\
  \        return result;"
- "        ArrayList<Integer> res = new ArrayList<Integer>(game.size());\n       \
  \ \n        int n = 0;\n        for(int i = 0; i < game.size(); i++){\n        \
  \    int j = 0;\n            while(j < guess.size()){\n                if (game.get(i)\
  \ == guess.get(j)) {\n                    j++;\n                } else {\n     \
  \               if (j == guess.size()){\n                        res.set(n, Math.abs(game.get(i)\
  \ - guess.get(j)));\n                        break;\n                    } else\
  \ {\n                        res.set(n, 0);\n                    }\n           \
  \     }\n                j++;\n            }\n            n++;\n        }\n    \
  \    \n        return res;"
- "        // TODO Complete me!\n        ArrayList <Integer> guessedCorrect = new\
  \ ArrayList<Integer>();\n        ArrayList <Integer> diff = new ArrayList<Integer>();\n\
  \        for (int i = 0; i < game.size(); i++) {\n            if (game.get(i) ==\
  \ guess.get(i)) {\n                guessedCorrect.add(0, game.get(i));\n       \
  \     } else {\n                for (int j = i; j < guess.size(); j++) {\n     \
  \               int diff = game.get(j) - guess.get(j);\n                    if (diff\
  \ < 0) {\n                        diff = -diff;\n                    }\n       \
  \             diff.add(diff);\n                }\n            }\n        }\n   \
  \     return guessedCorrect;"
- "        ArrayList<Integer> result = new ArrayList<>(guess.size());\n        for(int\
  \ i=0; i<game.size(); i++) {\n            int gameScore = game.get(i);\n       \
  \     int guessScore = guess.get(i);\n            int score = 0;\n            for(int\
  \ j=0; j<game.size(); j++) {\n                if(gameScore==guess.get(j)) {\n  \
  \                  score++;\n                }\n            }\n            if(!result.contains(guessScore))\
  \ {\n                result.add(guessScore);\n            }\n        }\n       \
  \ return result;"
- "        ArrayList<Integer> res = new ArrayList<>(game.size());\n        for (int\
  \ i = 0; i < game.size(); i++) {\n            int gameScore = game.get(i);\n   \
  \         int guessScore = guess.get(i);\n            int diff = Math.abs(guessScore\
  \ - gameScore);\n            if (guessScore == gameScore) {\n                res.add(0);\n\
  \            } else {\n                res.add(diff);\n            }\n        }\n\
  \        return res;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n\n        // compare\
  \ all the score to each guess and add the index to the result\n        // if they\
  \ all equal then result is 0, else subtract the difference of the score to the guess\n\
  \        for (Integer score : game) {\n            int index = -1;\n           \
  \ for (Integer guess: guess) {\n                if (guess == score) {\n        \
  \            index = guess.hashCode();\n                }\n                else\
  \ {\n                    if (index != -1) {\n                        result.add(Math.abs(guess\
  \ - score));\n                    }\n                    else {\n              \
  \          result.add(guess - score);\n                    }\n                }\n\
  \            }\n        }\n\n        return result;"
- "        ArrayList out = new ArrayList<>();\n        int guesscount = guess.size();\n\
  \        int scorecount = game.size();\n        int maxcount = guesscount + scorecount;\n\
  \n        for(int i = 0; i < guesscount; i++) {\n            int index = 0;\n  \
  \          int match = 0;\n\n            for(int j = 0; j < scorecount; j++) {\n\
  \                if(game.get(i) == guess.get(j)) {\n                    match++;\n\
  \                }\n            }\n\n            if (match == guesscount) {\n  \
  \              out.add(0, 0);\n            }\n            else {\n             \
  \   out.add(Math.abs(guess.get(i) - game.get(index)));\n            }\n\n      \
  \      index = index + 1;\n        }\n\n        return out;"
- "        int score = game.stream().collect(Collectors.toCollection(ArrayList::new));\n\
  \        ArrayList<Integer> result = new ArrayList<>();\n        score.forEach((e)\
  \ -> {\n            int temp = Integer.parseInt(e.getText());\n            for(int\
  \ i = 0; i< guess.size(); i++) {\n                Integer temp = Integer.parseInt(guess.get(i).getText());\n\
  \                if (temp == e) result.add(0);\n                else result.add(Math.abs(temp\
  \ - e));\n            }\n        });\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        int j =\
  \ 0;\n        for (int i = 0; i < game.size(); i++) {\n            int temp = 0;\n\
  \            int score = 0;\n            if (guess.get(j) != game.get(i)) {\n  \
  \              score = Math.abs(guess.get(j) - game.get(i));\n            }\n  \
  \          result.add(score);\n            j++;\n        }\n        return result;"
- "        // Declare and initialize variables:\n        ArrayList<Integer> result\
  \ = new ArrayList<>();\n        int total = 0;\n        int index = 0;\n\n     \
  \   // Set up arrays for result and total with length of game and guess:\n     \
  \   result.length = game.length;\n        total = 0;\n\n        // Loop for number\
  \ of guesses in array guess:\n        for (index = 0; index < guess.size(); index++)\
  \ {\n            int guess = guess.get(index);\n            total += guess;\n\n\
  \            // If we have made it through all guesses without completing the game:\n\
  \            if (index >= game.size()) {\n                result.add(total - guess);\n\
  \                index = 0;\n            }\n\n            // If we have made it\
  \ through all guesses:\n            if (index == game.size()) {\n              \
  \  // If total score is exactly equal to the game score:\n                if (total\
  \ == game.get(index)) {\n                    result.add(0);\n                } else\
  \ {\n                    result.add(total - guess);\n                }\n       \
  \         break;\n            }\n\n            // If we have made it through the\
  \ first guess:\n            if (index == 0) {\n                result.add(total\
  \ - guess);\n            }\n        }\n        return result;"
- "        // Your code goes here\n        int x = 0;\n        ArrayList<Integer>\
  \ list = new ArrayList<Integer>();\n        for (int i = 0; i < game.size(); i++)\
  \ {\n            int y = game.get(i);\n            if (y == guess.get(x)) {\n  \
  \              list.add(x);\n                x = x + 1;\n            }\n       \
  \ }\n        for (int i = 0; i < list.size(); i++) {\n            int z = (int)\
  \ Math.abs(guess.get(i) - game.get(i));\n            list.add(z);\n        }\n \
  \       Collections.sort(list);\n        return list;"
- "        ArrayList<Integer> ret = new ArrayList<Integer>(guess.size());\n\n    \
  \    // Create a set of unique guesses\n        Set<Integer> guesses = guess.stream().distinct().collect(Collectors.toSet());\n\
  \n        for (Integer g : guesses) {\n            for (Integer gi : guess) {\n\
  \                if (g == gi) {\n                    ret.add(0);\n             \
  \   } else {\n                    ret.add(Math.abs(g - gi));\n                }\n\
  \            }\n        }\n\n        return ret;"
- "        int length = guess.size();\n        ArrayList<Integer> solution = new ArrayList<>(length);\n\
  \        for (int i = 0; i < length; i++) {\n            if (game.get(i) == guess.get(i))\
  \ {\n                solution.add(0);\n            } else {\n                solution.add(Math.abs(guess.get(i)\
  \ - game.get(i)));\n            }\n        }\n        return solution;"
- "        // write your code here\n        int n = game.size();\n        int m =\
  \ guess.size();\n        ArrayList<Integer> result = new ArrayList<Integer>(n);\n\
  \        Arrays.stream(game).forEach(x -> result.add(x));\n        Arrays.stream(guess).forEach(x\
  \ -> result.add(x));\n        for (int i = 0; i<n; i++) {\n            int index\
  \ = result.indexOf(i);\n            result.add(i, Math.abs(game.get(index) - guess.get(index)));\n\
  \        }\n        return result;"
- "        // You should be able to do this yourself by thinking about the problem\
  \ a little bit.\n        ArrayList<Integer> result = new ArrayList<>();\n      \
  \  int maxScore = -1;\n        for(int i = 0; i < game.size(); i++) {\n        \
  \    int score = game.get(i);\n            int guess = guess.get(i);\n         \
  \   int difference = Math.abs(score - guess);\n            if(difference > maxScore)\
  \ {\n                maxScore = difference;\n            }\n        }\n        for(int\
  \ i = 0; i < game.size(); i++) {\n            int score = game.get(i);\n       \
  \     int guess = guess.get(i);\n            int difference = Math.abs(score - guess);\n\
  \            if(difference == 0) {\n                result.add(i);\n           \
  \ } else {\n                result.add(difference + maxScore);\n            }\n\
  \        }\n        return result;"
- "        ArrayList<Integer> differences = new ArrayList<Integer>();\n        for(int\
  \ i=0; i<game.size(); i++) {\n            for(int j=0; j<guess.size(); j++) {\n\
  \                if(game.get(i)==guess.get(j)) {\n                    differences.add(0);\n\
  \                }\n                else {\n                    differences.add(((Math.abs(game.get(i)-guess.get(j))<Math.abs(game.get(i)))\
  \ ? Math.abs(game.get(i)-guess.get(j)) : Math.abs(game.get(i)-guess.get(j))+Math.abs(game.get(i)));\n\
  \                }\n            }\n        }\n        return differences;"
- "        ArrayList<Integer> result = new ArrayList<>();\n        // TODO Implement\
  \ this\n        return result;"
- "        ArrayList<Integer> diff = new ArrayList<Integer>();\n        for(int i\
  \ = 0; i < game.size(); i++) {\n            Integer score = game.get(i);\n     \
  \       Integer guess = guess.get(i);\n            if (guess == -1) {\n        \
  \        diff.add(-guess);\n            } else if (guess != score) {\n         \
  \       diff.add(Math.abs(guess - score));\n            } else {\n             \
  \   diff.add(i);\n            }\n        }\n        return diff;"
- "        // Your code here\n        return null;"
- "        ArrayList<Integer> list = new ArrayList<>(game.size());\n        // Use\
  \ for loop to compare each pair of numbers between the two arrays\n        for (int\
  \ i = 0; i < game.size(); i++) {\n            for (int j = 0; j < guess.size();\
  \ j++) {\n                // Check if guesses at index i and j are equal and\n \
  \               // check if the guess is too big or too small\n                if\
  \ (game.get(i) == guess.get(j) && Math.abs(game.get(i) - guess.get(j)) > 1 || Math.abs(game.get(i)\
  \ - guess.get(j)) < -1) {\n                    // If they match, add one to the\
  \ list at index i\n                    list.set(i, 1);\n                }\n    \
  \            if (game.get(i) != guess.get(j) && Math.abs(game.get(i) - guess.get(j))\
  \ > 1 || Math.abs(game.get(i) - guess.get(j)) < -1) {\n                    // If\
  \ the guess is wrong but the score is the same, add one to the\n               \
  \     // list at index i\n                    list.set(i, 1 + Math.abs(game.get(i)\
  \ - guess.get(j)));\n                }\n            }\n        }\n        return\
  \ list;"
- "        Arrays.sort(guess);\n        Arrays.sort(game);\n        int result = Integer.MIN_VALUE;\n\
  \        for (int i = 0; i < game.size(); i++) {\n            Integer gameScore\
  \ = game.get(i);\n            Integer guessScore = guess.get(i);\n            int\
  \ diff = Math.abs(guessScore - gameScore);\n            if (diff == 0) {\n     \
  \           result = 0;\n            } else {\n                result = Math.max(result,\
  \ diff);\n            }\n        }\n        ArrayList<Integer> answer = new ArrayList<Integer>();\n\
  \        answer.add(0, result);\n        return answer;"
- "        ArrayList<Integer> diff = new ArrayList<>();\n        if (game.size() !=\
  \ guess.size()) {\n            System.err.println(\"Game and guess have different\
  \ sizes.\");\n            return null;\n        }\n        // We want to be able\
  \ to iterate over two ArrayList simultaneously\n        // and compare each element\
  \ from the games array to the corresponding guess\n        // from the guess array\n\
  \        // This example is probably not great for someone new to java\n       \
  \ // because it's overly complicated, and it also has some unused variables. \n\
  \        // If someone has a better way to do it please let me know!\n        int\
  \ maxIndex = 0;\n        for (int i = 0; i != game.size(); i++) {\n            if\
  \ (game.get(i) > guess.get(maxIndex)) {\n                maxIndex = i;\n       \
  \     }\n        }\n        // If game[maxIndex] is greater than guess[maxIndex],\
  \ then game[maxIndex]\n        // is greater than all the guesses. We have no idea\
  \ as to how much\n        // wrong the guess was, so we set the return value to\
  \ 0.\n        if (game.get(maxIndex) > guess.get(maxIndex)) {\n            diff.add(0);\n\
  \            return diff;\n        }\n        // Otherwise, the guesses match perfectly.\
  \ Let's see what index each guess is at.\n        // We are going to store these\
  \ index's in the diff ArrayList.\n        // The first guess has the lowest index,\
  \ because its value is lower than any other\n        // guess. \n        // The\
  \ second guess has the second lowest index, because the second guess is lower than\
  \ the first\n        // guess. \n        // The third guess has the third lowest\
  \ index, because the third guess is lower than the second.\n        // The next\
  \ guess has the next lowest index, and so on. \n        // The return value will\
  \ contain the absolute difference between the guess and the\n        // score for\
  \ each guess. The values at that index are set based on whether or not the guess\
  \ was\n        // greater than or lower than the game score. \n        // The absolute\
  \ difference is what we want, because if the guess is correct we need\n        //\
  \ it to be 0, and if the guess is incorrect we need to know how far off it was\n\
  \        // from the game score. The absolute difference is what we are asking the\
  \ program for.\n        // \n        // The reason I decided to use an ArrayList\
  \ here is that it can hold a variable size array.\n        // Since Java arrays\
  \ cannot hold variable sizes, we cannot just store all the guesses in\n        //\
  \ a fixed size array. An ArrayList will resize itself automatically.\n        int\
  \ maxDifference = 0;\n        for (int i = 0; i != guess.size(); i++) {\n      \
  \      if (guess.get(i) > game.get(maxIndex)) {\n                maxDifference =\
  \ Math.abs(guess.get(maxIndex) - game.get(maxIndex));\n                maxIndex\
  \ = i;\n            }\n        }\n        if ("
- "        ArrayList<Integer> results = new ArrayList<>();\n        for(int i = 0;\
  \ i < guess.size(); i++) {\n            int scoreDiff = Integer.valueOf(game.get(i)).compareTo(Integer.valueOf(guess.get(i)));\n\
  \            if(scoreDiff != 0) {\n                results.add(-scoreDiff);\n  \
  \          } else {\n                results.add(i);\n            }\n        }\n\
  \        return results;"
- "        ArrayList<Integer> gameCopy = game.stream().distinct().collect(Collectors.toList());\n\
  \        ArrayList<Integer> copy = new ArrayList<Integer>();\n        gameCopy.stream().forEach(x\
  \ -> copy.add(guess.get(x).compareTo(game.get(x))));\n        ArrayList<Integer>\
  \ copyArray = new ArrayList<Integer>(copy);\n        copyArray.removeAll(gameCopy);\n\
  \        copyArray.removeAll(guess);\n        ArrayList <Integer> result = new ArrayList<Integer>();\n\
  \        for (int i = 0; i < (guess.size()); i++) {\n            if (guess.get(i)\
  \ == 0) {\n                result.add(0);\n            } else if (gameCopy.contains(guess.get(i)))\
  \ {\n                result.add(0);\n            } else {\n                result.add(Math.abs(guess.get(i)\
  \ - gameCopy.get(gameCopy.indexOf(guess.get(i)))));\n            }\n        }\n\
  \        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        int gameSize\
  \ = game.size();\n        int guessSize = guess.size();\n        if (guessSize ==\
  \ 0 || gameSize == 0) {\n            return result;\n        }\n        ArrayList<Integer>\
  \ newGuess = new ArrayList<Integer>();\n        ArrayList<Integer> newGame = new\
  \ ArrayList<Integer>();\n        int bestGuessDiff = 0;\n        int gameDiff =\
  \ 0;\n        boolean winner = false;\n        int score = 0;\n        for (int\
  \ i = 0; i < guessSize; i++) {\n            int guessScore = guess.get(i);\n   \
  \         gameDiff = game - guess;\n            ArrayList<Integer> gameList = new\
  \ ArrayList<Integer>(game);\n            gameList.add(guess);\n            gameList.add(gameDiff);\n\
  \            newGame = gameList;\n            newGame.addAll(gameList);\n      \
  \      newGame.addAll(guess);\n            newGame.addAll(guess);\n            game\
  \ = newGame;\n            bestGuessDiff = 0;\n            boolean allGuess = true;\n\
  \            while (allGuess) {\n                allGuess = false;\n           \
  \     for (int j = 0; j < gameSize; j++) {\n                    int gameScore =\
  \ game.get(j);\n                    int diff = gameScore - guessScore;\n       \
  \             ArrayList<Integer> newGameList = new ArrayList<Integer>(game);\n \
  \                   newGameList.add(newGuess.get(j));\n                    newGameList.add(diff);\n\
  \                    newGame = newGameList;\n                    ArrayList<Integer>\
  \ newGuess = new ArrayList<Integer>(newGame);\n                    newGuess.add(guess);\n\
  \                    newGuess.add(guessScore);\n                    bestGuessDiff\
  \ = Math.abs(bestGuessDiff - diff);\n                    if (bestGuessDiff < diff)\
  \ {\n                        allGuess = true;\n                    }\n         \
  \       }\n                bestGuessDiff = bestGuessDiff + gameDiff + guessScore;\n\
  \            }\n            score = bestGuessDiff;\n            result.add(bestGuessDiff);\n\
  \            if (score == bestGuessDiff) {\n                winner = true;\n   \
  \         }\n        }\n        if (!winner) {\n            winner = true;\n   \
  \     }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        int counter\
  \ = 0;\n        for (int i = 0; i < game.size(); i++){\n            while (guess.get(counter)\
  \ != game.get(i)){\n                counter++;\n            }\n            result.add(0);\n\
  \            if (guess.get(counter) == game.get(i)){\n                result.add(0);\n\
  \            }\n            else{\n                result.add(Math.abs(guess.get(counter)\
  \ - game.get(i)));\n            }\n            counter++;\n        }\n        return\
  \ result;"
- "        // return new ArrayList<Integer>(Arrays.asList(game).stream().map((score)->{\n\
  \        //         Integer current=null;\n        //         for(Integer g:guess){\n\
  \        //             if(game.get(g.intValue()) == score)\n        //        \
  \         current = g;\n        //             if(current!=null)\n        //   \
  \              break;\n        //         }\n        //         return current;\n\
  \        //     }).toArray());\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
  \        for (Integer index = 0; index < game.size(); index++) {\n            int\
  \ current = 0;\n            for (Integer g : guess) {\n                if (game.get(index)\
  \ == g) {\n                    current = g;\n                    break;\n      \
  \          }\n            }\n            result.add(current);\n        }\n     \
  \   return result;"
- "        ArrayList<Integer> returnList = new ArrayList<Integer>();\n\n        if(game.size()\
  \ != guess.size()) {\n            returnList.add(0);\n        } else {\n       \
  \     for(int i = 0; i < game.size(); i++) {\n                Integer gameNum =\
  \ game.get(i);\n                Integer guessNum = guess.get(i);\n\n           \
  \     if(gameNum != guessNum) {\n                    returnList.add(Math.abs(gameNum\
  \ - guessNum));\n                } else {\n                    returnList.add(0);\n\
  \                }\n            }\n        }\n        return returnList;"
- "        ArrayList<Integer> results = new ArrayList<>();\n        ArrayList<Integer>\
  \ difference = new ArrayList<>();\n        for (int i = 0; i < game.size(); i++)\
  \ {\n            if (guess.get(i) == game.get(i)) {\n                results.add(guess.get(i));\n\
  \            } else {\n                difference.add(Math.abs(guess.get(i) - game.get(i)));\n\
  \            }\n        }\n        return difference;"
- "        ArrayList<Integer> diff = new ArrayList<Integer>();\n        int index\
  \ = 0;\n        boolean correct = false;\n        for(int i=0;i<game.size();i++)\
  \ {\n            if (game.get(i) == guess.get(index)) {\n                diff.add(0);\n\
  \                correct = true;\n            } else {\n                diff.add(Math.abs(game.get(i)-guess.get(index)));\n\
  \            }\n            index++;\n        }\n        if (correct) {\n      \
  \      return diff;\n        } else {\n            for(int i=0;i<game.size();i++)\
  \ {\n                diff.add(Math.abs(game.get(i)-guess.get(index)));\n       \
  \         index++;\n            }\n            return diff;\n        }"
- "        ArrayList<Integer> results = new ArrayList<>();\n        for(int i=0; i<guess.size();\
  \ i++) {\n            results.add(Math.abs(guess.get(i) - game.get(i)));\n     \
  \   }\n        return results;"
- "        Arrays.sort(game);\n        Arrays.sort(guess);\n        ArrayList<Integer>\
  \ result = new ArrayList<>();\n        int i = 0;\n        while (i < guess.size())\
  \ {\n            result.add(guess.get(i) - game.get(i));\n            i++;\n   \
  \     }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<>();\n        int total = 0;\n\
  \        for (int i = 0; i < game.size(); i++) {\n            total += Math.abs(game.get(i)\
  \ - guess.get(i));\n        }\n        result.add(total);\n        return result;"
- "        // TODO\n        ArrayList<Integer> compare = new ArrayList<>();\n\n  \
  \      for(int i = 0; i < guess.size(); i++){\n            compare.add((Math.abs(guess.get(i)\
  \ - game.get(i))));\n        }\n        return compare;"
- "        ArrayList<Integer> result = new ArrayList<Integer>(game.size());\n    \
  \    if (game.size() != guess.size()) {\n            throw new RuntimeException(\"\
  Arrays need to have equal length!\");\n        }\n        long difference = 0;\n\
  \        for (int i = 0; i < game.size(); i++) {\n            if (guess.get(i) ==\
  \ game.get(i)) {\n                result.set(i, 0);\n            } else {\n    \
  \            difference = Math.abs(guess.get(i) - game.get(i));\n              \
  \  result.set(i, difference);\n            }\n        }\n        return result;"
- "        // This was written by Jared Farrish on Stack Overflow at https://stackoverflow.com/questions/20543929/compare-two-arrays-in-java\n\
  \        // The code is commented and explained.\n        // I added some comments\
  \ and some more checks.\n        if (game.size() != guess.size()) {\n          \
  \  // The arrays aren't of equal size.\n            return null;\n        }\n  \
  \      // Declare a blank array for results. \n        ArrayList<Integer> results\
  \ = new ArrayList<Integer>();\n        // Declare and initialize the variable for\
  \ tracking the amount of misses.\n        int misses;\n        // Declare and initialize\
  \ the variable for tracking the amount of matches.\n        int matches = 0;\n \
  \       // Declare and initialize the variable for tracking the amount of correct\
  \ guesses.\n        int correct;\n        // Loop through each guess and each score.\
  \ \n        for (int guessIndex = 0; guessIndex < guess.size(); guessIndex++) {\n\
  \            guess = checkForAbsent(guess, guessIndex);\n            for (int scoreIndex\
  \ = 0; scoreIndex < game.size(); scoreIndex++) {\n                // Check to see\
  \ if the guess at that position is equal to the score at that position. \n     \
  \           if (game.get (scoreIndex) == guess.get (guessIndex)) {\n           \
  \         // If so, increment the number of matches.\n                    matches++;\n\
  \                }\n            }\n            // Check to see if the guess is correct.\
  \ If so, increment the number of correct guesses.\n            if (matches == game.size())\
  \ {\n                correct++;\n            }\n        }\n        // Check to see\
  \ if we have correct guesses.\n        if (correct != game.size()) {\n         \
  \   // If not, increase the number of misses.\n            misses++;\n        }\n\
  \        // Calculate the number of matches multiplied by the difference between\
  \ the number of correct guesses and number of matches.\n        results.add(matches\
  \ * Math.abs(correct - matches));\n        // Return the results array.\n      \
  \  return results;"
- "        // This list is to store the results.\n        ArrayList<Integer> results\
  \ = new ArrayList<Integer>();\n        // This is for holding the difference in\
  \ score.\n        ArrayList<Integer> difference = new ArrayList<Integer>();\n  \
  \      // This is for holding the difference in guess.\n        ArrayList<Integer>\
  \ difference2 = new ArrayList<Integer>();\n        // This holds our counter so\
  \ we know how far we've made it.\n        int counter = 0;\n        // Iterate through\
  \ both lists.\n        for (int i = 0; i < game.size(); i++) {\n            // Check\
  \ if we've gone through both lists completely.\n            if (i == game.size()\
  \ - 1) {\n                // If we have, we have our answer, so return it.\n   \
  \             return results;\n            }\n            // Check if this is the\
  \ first time through this loop (the score is zero).\n            if (game.get(i)\
  \ == 0) {\n                // Set this value to our results.\n                results.add(0,\
  \ i);\n                // Set this value to our difference.\n                difference.add(0,\
  \ i);\n                // Set this value to our difference.\n                difference2.add(0,\
  \ i);\n                // Increment our counter.\n                counter++;\n \
  \               // If this is the first time through this loop (the guess is zero),\
  \ we know we haven't gone through both\n                // lists completely. Add\
  \ the difference to the results.\n                results.add(counter, game.get(i)\
  \ - guess.get(i));\n                difference.add(counter, game.get(i) - guess.get(i));\n\
  \            } else {\n                // Set this value to our difference.\n  \
  \              difference2.add(i, game.get(i) - guess.get(i));\n               \
  \ // If we've gone through this loop exactly twice, we've found our answer.\n  \
  \              if (counter >= 2) {\n                    // Return the results.\n\
  \                    return results;\n                }\n                // If this\
  \ is the first time through this loop (the score is zero), we know we haven't gone\
  \ through both lists\n                // completely. Add the difference to the results.\n\
  \                results.add(counter, game.get(i) - guess.get(i));\n           \
  \     // If this is the first time through this loop (the guess is zero), we know\
  \ we haven't gone through both lists\n                // completely. Add the difference\
  \ to the results.\n                results.add(counter, Math.abs(game.get(i) - guess.get(i)));\n\
  \                // If this is the first time through this loop (the guess is zero),\
  \ we know we haven't gone through both lists\n                // completely. Add\
  \ the difference to the results.\n                results.add(counter, Math.abs(game.get(i)\
  \ - guess.get(i)));\n                // Increment our counter.\n               \
  \ counter++;\n            }\n        }\n        // If we've gone through both lists\
  \ completely (counter >= 2), we have our answer.\n        return results;"
- "        int i = 0;\n        int j = 0;\n        ArrayList<Integer> list = new ArrayList<Integer>();\n\
  \        for (j = 0; j < guess.size(); j++) {\n            list.add(0);\n      \
  \  }\n        while (i < game.size()) {\n            list.set(i, Math.abs(guess.get(i)\
  \ - game.get(i)));\n            i++;\n        }\n        return list;"
- "        ArrayList<Integer> result = new ArrayList<>();\n        int gameLen = game.size();\n\
  \        int guessLen = guess.size();\n        int gameTotal = 0;\n        int guessTotal\
  \ = 0;\n        for(int i = 0; i < gameLen; i++) {\n            gameTotal += game.get(i);\n\
  \        }\n        for(int i = 0; i < guessLen; i++) {\n            guessTotal\
  \ += guess.get(i);\n        }\n        if(gameLen == guessLen) {\n            for(int\
  \ i = 0; i < guessLen; i++) {\n                result.add(Math.abs(guess.get(i)\
  \ - game.get(i)));\n            }\n        } else {\n            for(int i = 0;\
  \ i < guessLen; i++) {\n                if(game.get(i) == guess.get(i)) {\n    \
  \                result.add(0, Math.abs(guess.get(i) - game.get(i)));\n        \
  \        } else {\n                    result.add(0, Math.abs(guess.get(i) - game.get(i))\
  \ + Math.abs(guessTotal - gameTotal));\n                }\n            }\n     \
  \   }\n        return result;"
- "        // Solution here\n        int a = 0;\n        int b = 0;\n        for (int\
  \ i = 0; i < game.size(); i++) {\n            if (game.equals(guess)) {\n      \
  \          a = game.indexOf(i);\n                b = guess.indexOf(i);\n       \
  \         return Arrays.asList(a, Math.abs(b - a));\n            }\n        }\n\
  \        return Arrays.asList(0, 0);"
- "        // Create our ArrayList and store our results to compare later\n      \
  \  ArrayList<Integer> result = new ArrayList<Integer>();\n        // If one array\
  \ is empty, the other array will always have at least one element\n        if (game.size()\
  \ == 0) {\n            result.add(guess.get(0));\n            return result;\n \
  \       } else if (guess.size() == 0) {\n            result.add(game.get(0));\n\
  \            return result;\n        }\n        // Iterate over each element in\
  \ our two arrays and compare them to each other\n        int index = 0;\n      \
  \  while (index < game.size() && index < guess.size()) {\n            int comp =\
  \ game.get(index) - guess.get(index);\n            if (comp == 0) {\n          \
  \      // Same as previous: only compare if values are equal\n                result.add(0);\n\
  \            } else {\n                // Different: return the absolute difference\
  \ between guess and score\n                result.add(comp);\n            }\n  \
  \          index++;\n        }\n        return result;"
- "        if (game.size() != guess.size()) {\n            throw new IllegalArgumentException(\"\
  Lengths must be equal\");\n        }\n        ArrayList<Integer> result = new ArrayList<>(game.size());\n\
  \        for (int i=0; i<game.size(); i++) {\n            if (game.get(i) != guess.get(i))\
  \ {\n                result.add(i);\n            }\n        }\n        return result;"
- "        int result[] = new int[guess.size()];\n        boolean correct = false;\n\
  \        for (int i = 0; i < guess.size(); i++) {\n            int diff = guess\n\
  \                    .stream()\n                    .filter((v) -> v >= game.get(i))\n\
  \                    .mapToInt(Integer::intValue)\n                    .sum();\n\
  \            if (diff == 0) {\n                result[i] = 0;\n                correct\
  \ = true;\n            } else {\n                result[i] = Math.abs(game.get(i)\
  \ - diff);\n            }\n        }\n        ArrayList<Integer> result = new ArrayList<>(Arrays.asList(result));\n\
  \        return correct ? result : null;"
- "        int len = Math.min(guess.size(), game.size());\n        ArrayList<Integer>\
  \ diff = new ArrayList<>(len);\n        for (int i = 0; i < len; i++) {\n      \
  \      diff.add((guess.get(i) - game.get(i)) == 0 ? 0 : Math.abs(guess.get(i) -\
  \ game.get(i)));\n        }\n        return diff;"
- "        // TODO: Complete me!\n        // You will need to complete this method.\n\
  \        ArrayList<Integer> result = new ArrayList<>();\n\n        if (game.size()\
  \ != guess.size()) {\n            result.add(0);\n        } else {\n           \
  \ for (int i = 0; i < game.size(); i++) {\n                int diff = game.get(i)\
  \ - guess.get(i);\n                if (diff != 0) {\n                    result.add(Math.abs(diff));\n\
  \                }\n            }\n        }\n        return result;"
- "        if (game.size() == guess.size()) {\n            ArrayList<Integer> result\
  \ = new ArrayList<>(game.size());\n            for (int i = 0; i < game.size();\
  \ i++) {\n                int correct = game.equals(guess);\n                if\
  \ (correct) {\n                    result.set(i, 0);\n                } else {\n\
  \                    result.set(i, Math.abs(guess.get(i - 1) - game.get(i)));\n\
  \                }\n            }\n            return result;\n        }\n     \
  \   throw new IllegalArgumentException(\"The two arrays should have equal size\"\
  );"
- "        ArrayList<Integer> output = new ArrayList<>(game.size());\n        for\
  \ (Integer score : game) {\n            int diff = Math.abs(guess.get(guess.indexOf(score))\
  \ - score);\n            output.add(diff);\n        }\n        return output;"
- "        ArrayList<Integer> score = new ArrayList<>();\n        for(int i = 0; i<game.size();i++)\n\
  \            score.add(game.get(i) - guess.get(i));\n        ArrayList<Integer>\
  \ results = new ArrayList<>();\n        for(int i = 0; i<game.size();i++)\n    \
  \    {\n            Integer currentScore = game.get(i);\n            Integer currentGuess\
  \ = guess.get(i);\n            if(i == 0)\n            {\n                if((Math.abs(currentScore\
  \ - currentGuess) == 0))\n                    results.add(0);\n                else\n\
  \                    results.add(Math.abs(currentScore - currentGuess));\n     \
  \       }\n            else\n            {\n                Integer bestScore =\
  \ score.get(i - 1);\n                Integer bestGuess = guess.get(i - 1);\n   \
  \             if((Math.abs(bestScore - bestGuess) == 0))\n                    results.add(0);\n\
  \                else\n                    results.add(Math.abs(bestScore - bestGuess));\n\
  \            }\n        }\n        return results;"
- "        ArrayList<Integer> distance = new ArrayList<>();\n        int index = 0;\n\
  \        boolean correct = true;\n\n        // This loop is used to determine if\
  \ the guesses appear to have matched\n        // correctly\n        while (index\
  \ < game.size() && index < guess.size()) {\n            if (game.get(index) == guess.get(index))\
  \ {\n                distance.add(0);\n            } else {\n                distance.add(Math.abs(game.get(index)\
  \ - guess.get(index)));\n            }\n            index++;\n        }\n\n    \
  \    // This loop is used to determine if the guesses appear to have matched correctly\n\
  \        while (index < game.size() && index < guess.size()) {\n            if (game.get(index)\
  \ != guess.get(index)) {\n                correct = false;\n            }\n    \
  \        index++;\n        }\n\n        if (correct) {\n            for (int i =\
  \ 0; i < guess.size(); i++) {\n                distance.set(i, 0);\n           \
  \ }\n        }\n\n        // This loop is used to compare each element of distance\
  \ to the best guess so far\n        for (int i = 0; i < distance.size(); i++) {\n\
  \            if (guess.get(i) != -1) {\n                distance.set(i, distance.get(i)\
  \ - 1);\n            } else {\n                distance.set(i, distance.get(i) +\
  \ 1);\n            }\n        }\n\n        return distance;"
- "        ArrayList<Integer> results = new ArrayList<Integer>();\n        for(int\
  \ i = 0; i < game.size(); i++) {\n            for(int j = 0; j < guess.size(); j++)\
  \ {\n                if(game.get(i) == guess.get(j)) {\n                    results.add(0,\
  \ 0);\n                } else {\n                    int difference = Math.abs(guess.get(j)\
  \ - game.get(i));\n                    results.add(difference);\n              \
  \  }\n            }\n        }\n        return results;"
- "        List<Integer> result = new ArrayList<>();\n        game.forEach((i) ->\
  \ {\n            guess.forEach((j) -> {\n                if (i == j) {\n       \
  \             result.add(0);\n                } else if (Math.abs(i - j) > 2) {\n\
  \                    result.add(Math.abs(i - j));\n                }\n         \
  \   });\n        });\n        return result;"
- "        // sort game and guess first\n        game.sort(Collections.reverseOrder());\n\
  \        guess.sort(Collections.reverseOrder());\n\n        ArrayList<Integer> diff\
  \ = new ArrayList<>();\n\n        for(int i = 0; i < game.size(); i++) {\n     \
  \       diff.clear();\n            \n            // compare each game guess to the\
  \ first guess in the guess list\n            int index = guess.indexOf(game.get(i));\n\
  \            int index2 = -1; // will store the index of game guess in the second\
  \ list if it's found\n            int index3 = -1; // will store the index of game\
  \ guess in the third list if it's found\n            for(int j = i; j < guess.size();\
  \ j++) {\n                \n                // if any guesses are found at all\n\
  \                boolean found = false;\n                \n                // try\
  \ all games until a match is found - if all games match then break\n           \
  \     while(index < 0) {\n                    if(index2 == -1) {\n             \
  \           index = guess.indexOf(game.get(j));\n                    } else if(index2\
  \ == 0) {\n                        found = true;\n                        break;\n\
  \                    } else if(index2 == 1) {\n                        found = true;\n\
  \                        break;\n                    }\n                    j++;\n\
  \                }\n                \n                // if no match was found -\
  \ go on\n                if(found) break;\n\n                index = -1;\n     \
  \           \n                // try all games until a match is found - if all games\
  \ match then break\n                while(index < 0) {\n                    if(index3\
  \ == -1) {\n                        index = guess.indexOf(game.get(j));\n      \
  \              } else if(index3 == 0) {\n                        found = true;\n\
  \                        break;\n                    } else if(index3 == 1) {\n\
  \                        found = true;\n                        break;\n       \
  \             }\n                    j++;\n                }\n                \n\
  \                // if no match was found - go on\n                if(found) break;\n\
  \                \n                // if we found one - store it\n             \
  \   if(index != -1) index2 = j;\n                if(index != -1) index3 = j;\n \
  \               \n                // if we found one - store it\n              \
  \  if(index != -1) index2 = j;\n                if(index != -1) index3 = j;\n  \
  \          }\n\n            // if all games match - store a 0 difference\n     \
  \       if(!found) diff.add(0);\n            \n            // otherwise, if the\
  \ second and third guesses were not found - store a difference\n            else\
  \ if(index2 == -1 && index3 == -1) diff.add((game.get(i) - guess.get(i))); // the\
  \ absolute difference between the first game and current guess\n            else\
  \ if(index2 == 0 && index3 == 0) diff.add((game.get(i) - guess.get(i)));\n     \
  \       else if(index2 == 1 && index3 == 1) diff.add((game.get(i) - guess.get(i)));\n\
  \            else diff.add((game.get(i) - guess.get(i))); // the absolute difference\
  \ between the first game and "
- "        ArrayList<Integer> array = new ArrayList<Integer>(guess.size());\n    \
  \    int index = 0;\n        int gameIndex = 0;\n        int guessesLeft = 0;\n\
  \        int gameSize = 0;\n\n        while(gameIndex < game.size()) {\n       \
  \     int result = game.get(gameIndex) - guess.get(gameIndex);\n            gameSize\
  \ ++;\n\n            if(result == 0) {\n                array.add(0);\n        \
  \    } else {\n                array.add(Math.abs(result - game.get(gameIndex)));\n\
  \            }\n\n            gameIndex++;\n            guessesLeft++;\n\n     \
  \       if(guessesLeft <= guess.size()) {\n                if(gameSize == guess.size())\
  \ {\n                    index++;\n                    gameIndex = 0;\n        \
  \            gameSize = 0;\n                }\n            }\n        }\n\n    \
  \    return array;"
- "        ArrayList<Integer> result = new ArrayList<>(game.size());\n        int\
  \ score = game.get(0);\n        for (int i = 0; i < game.size() - 1; i++) {\n  \
  \          if (game.get(i) == guess.get(i)) {\n                if (game.get(i +\
  \ 1) != score) {\n                    result.add(Math.abs(guess.get(i) - score));\n\
  \                }\n            } else {\n                result.add(Math.abs(guess.get(i)\
  \ - score));\n            }\n        }\n        /*\n        boolean result = false;\n\
  \        for (int i = 0; i < game.size() - 1; i++) {\n            if (game.get(i)\
  \ == guess.get(i)) {\n                if (game.get(i + 1) != score) {\n        \
  \            result = true;\n                    break;\n                }\n   \
  \         }\n        }\n        */\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        for(int\
  \ i = 0; i < game.size(); i++) {\n            int score = 0;\n            if(game.get(i)\
  \ == guess.get(i)) {\n                score = 0;\n            } else {\n       \
  \         score = Math.abs(guess.get(i) - game.get(i));\n            }\n       \
  \     result.add(score);\n        }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<>();\n        // If both arrays\
  \ are empty, the results are trivially obvious\n        if (game.size() == 0 &&\
  \ guess.size() == 0) {\n            result.add(0);\n            return result;\n\
  \        }\n        // If only one array is empty, guesses are definitely wrong\n\
  \        if (game.size() == 0) {\n            result.add(Integer.MIN_VALUE);\n \
  \           return result;\n        }\n        if (guess.size() == 0) {\n      \
  \      result.add(Integer.MIN_VALUE);\n            return result;\n        }\n \
  \       // If either array has 1 element, guessing is probably right\n        if\
  \ (game.size() == 1) {\n            result.add(Integer.MIN_VALUE);\n           \
  \ return result;\n        }\n        // Otherwise, first find out the minimum score\
  \ in either array\n        int min = Math.min(game.stream().mapToInt(Integer::intValue).sum(),\
  \ guess.stream().mapToInt(Integer::intValue).sum());\n        // If either the score\
  \ or the guess is too low, guess is definitely wrong\n        if (min == Integer.MIN_VALUE)\
  \ {\n            result.add(Integer.MIN_VALUE);\n            return result;\n  \
  \      }\n        // If either array is empty, guesses are definitely wrong\n  \
  \      if (game.size() == 0) {\n            result.add(Integer.MIN_VALUE);\n   \
  \         return result;\n        }\n        // If either array has 1 element, guessing\
  \ is probably right\n        if (game.size() == 1) {\n            result.add(Integer.MIN_VALUE);\n\
  \            return result;\n        }\n        // Otherwise, go through both arrays\
  \ and compare pairs one by one\n        for (int i = 0; i < game.size(); i++) {\n\
  \            for (int j = 0; j < guess.size(); j++) {\n                // Compare\
  \ pairs\n                if (game.get(i) == guess.get(j)) {\n                  \
  \  result.add(i-j);\n                }\n            }\n        }\n        return\
  \ result;"
- '        // Your code here...'
- "        ArrayList<Integer> result = new ArrayList<>();\n        for(int i = 0;\
  \ i < game.size(); i++) {\n            result.add(Math.abs(game.get(i) - guess.get(i)));\n\
  \        }\n        return result;"
- '        // Your code goes here'
- "        // write your code in here\n        int size = game.size();\n        ArrayList<Integer>\
  \ gameResult = new ArrayList<>(size);\n        for(int i = 0; i< size; i++){\n \
  \           if(game.get(i) == guess.get(i)){\n                gameResult.add(0);\n\
  \            }\n            else{\n                gameResult.add((int)(Math.abs(game.get(i)\
  \ - guess.get(i))));\n            }\n        }\n        return gameResult;"
- "        ArrayList<Integer> list = new ArrayList<Integer>();\n        if (game.size()\
  \ != guess.size()) {\n            System.out.println(\"Not same length\");\n   \
  \         return list;\n        }\n        for (int i = 0; i < game.size(); i++)\
  \ {\n            if (game.get(i) != guess.get(i)) {\n                list.add(Math.abs(game.get(i)\
  \ - guess.get(i)));\n            } else {\n                list.add(0);\n      \
  \      }\n        }\n        return list;"
- "        ArrayList<Integer> result = new ArrayList<>();\n        for(int i = 0;\
  \ i < guess.size(); i++) {\n            int a = Math.abs(game.get(i) - guess.get(i));\n\
  \            if(i == 0) {\n                result.add(a);\n            } else if(a\
  \ != 0) {\n                result.add(a);\n            } else {\n              \
  \  result.add(Math.abs(game.get(0) - guess.get(0)));\n            }\n        }\n\
  \        return result;"
- "        ArrayList<Integer> guesses = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ scores = new ArrayList<Integer>();\n        for(int i = 0; i < game.size(); i++)\
  \ {\n            guesses.add(guess.get(i));\n            scores.add(game.get(i));\n\
  \        }\n        Arrays.sort(guesses);\n        Arrays.sort(scores);\n      \
  \  ArrayList<Integer> wrong = new ArrayList<Integer>();\n        for (int i = 0;\
  \ i < guesses.size(); i++) {\n            if (guess.get(i) != scores.get(i)) {\n\
  \                wrong.add(i);\n            }\n        }\n        return wrong;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        for(int\
  \ i = 0; i < guess.size(); i++) {\n            Integer guess = guess.get(i);\n \
  \           int score = 0;\n            for (int j = 0; j < game.size(); j++) {\n\
  \                if(game.get(j) == guess) {\n                    score++;\n    \
  \            }\n            }\n            result.add(score);\n        }\n     \
  \   return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        double bestDiff\
  \ = Double.MAX_VALUE;\n        // Loop through the game's guesses\n        for (Integer\
  \ guess: guess) {\n            // Calculate diff\n            double diff = guess\
  \ - game.get(game.indexOf(guess));\n            // If diff is smaller, we know it's\
  \ worse\n            if (diff < bestDiff) {\n                result.add(diff);\n\
  \            } else if (diff == bestDiff) {\n                // If diff is equal,\
  \ we can probably just add one\n                result.add(1);\n            } else\
  \ {\n                // If diff is larger, we'll probably want to keep going\n \
  \           }\n        }\n        // Return result\n        return result;"
- "        int[] gameArray = new int[game.size()];\n        int[] guessArray = new\
  \ int[guess.size()];\n        for(int i = 0; i < guess.size(); i++) {\n        \
  \    guessArray[i] = guess.get(i);\n        }\n        Arrays.sort(guessArray);\n\
  \        int j = 0;\n        int index = 0;\n        int guessCount = guess.size();\n\
  \        ArrayList<Integer> result = new ArrayList<Integer>();\n        for(int\
  \ i = 0; i < guess.size(); i++) {\n            int max = 0;\n            for(int\
  \ k = i; k < guessCount; k++) {\n                if(gameArray[k] > max) {\n    \
  \                max = gameArray[k];\n                    index = k;\n         \
  \       }\n            }\n            result.add(guessArray[j++] - max);\n     \
  \   }\n        return result;"
- "        // first sort our arrays\n        Collections.sort(game);\n        Collections.sort(guess);\n\
  \        // now compare them one by one\n        ArrayList<Integer> result = new\
  \ ArrayList<>();\n        for (int i = 0; i < game.size(); i++) {\n            int\
  \ dif = guess.get(i) - game.get(i);\n            result.add(dif);\n            if\
  \ (dif < 0) {\n                dif *= -1;\n            }\n        }\n        return\
  \ result;"
- "        int index = 0;\n        ArrayList<Integer> correct = new ArrayList<>(game.size());\n\
  \        for (int i = 0; i < game.size(); i++) {\n            if (game.get(i) ==\
  \ guess.get(i)) {\n                index++;\n            } else {\n            \
  \    if (Math.abs(game.get(i) - guess.get(i)) < 5) {\n                    index++;\n\
  \                } else {\n                    index += Math.abs(game.get(i) - guess.get(i));\n\
  \                }\n            }\n            correct.add(index);\n        }\n\
  \        return correct;"
- "        int n = game.size();\n        int k = guess.size();\n        ArrayList<Integer>\
  \ result = new ArrayList<Integer>(n);\n        for (int i = 0; i < n; i++) {\n \
  \           int diff = Math.abs(game.get(i) - guess.get(i));\n            if (Math.abs(diff)\
  \ != 0) {\n                result.add(diff);\n            }\n        }\n       \
  \ return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        int correct\
  \ = 0;\n        for (int i = 0; i < game.size(); i++) {\n            if (game.get(i)\
  \ == guess.get(i)) {\n                correct++;\n            }\n            result.add(guess);\n\
  \        }\n        if (correct == game.size()) {\n            for (int i = 0; i\
  \ < game.size(); i++) {\n                result.add(-game.get(i));\n           \
  \ }\n        }\n        return result;"
- "        // Sort the guesses into the correct order\n        Arrays.sort(guess);\n\
  \n        // Find the minimum difference in the guesses vs scores. If the difference\
  \ is 0 then they\n        // guessed correctly\n        int minDifference = Integer.MAX_VALUE;\n\
  \        ArrayList<Integer> diff = new ArrayList<>();\n        for (int i = 0; i\
  \ < game.size(); i++) {\n            int difference = guess.get(i) - game.get(i);\n\
  \            if (Math.abs(difference) < minDifference) {\n                minDifference\
  \ = difference;\n            }\n            diff.add(difference);\n        }\n\n\
  \        // Return the absolute differences\n        return diff;"
- "        // Create an array that will store how far off each guess was from the\
  \ game score.\n        ArrayList<Integer> diff = new ArrayList<Integer>(game.size());\n\
  \        // Loop through all guesses, keeping track of the absolute difference\n\
  \        for (int i=0; i < guess.size(); i++) {\n            diff.add((int)Math.abs\
  \ ( guess.get(i) - game.get(i)));\n        }\n        return diff;"
- "        // Your code goes here\n        // first we need a counter of matches and\
  \ a list of the matches\n        int matches = 0;\n        ArrayList<Integer> match\
  \ = new ArrayList<Integer>();\n        // for loop to run through each match\n \
  \       // start at first index\n        for (int i = 0; i <= game.size() - 1; i++)\
  \ {\n            // if game[i] is equal to the match in guess\n            // add\
  \ 1 to matches\n            if (game.get(i).equals(guess.get(i))) {\n          \
  \      matchs.add(matches);\n                // reset the counter\n            \
  \    matches = 0;\n                // then add the match to the match list\n   \
  \             match.add(game.get(i));\n            }\n            // if not equal\n\
  \            // increment the counter\n            else {\n                matches++;\n\
  \            }\n        }\n        // return match\n        return match;"
- "        if (game.size() != guess.size()) {\n            throw new IllegalArgumentException(\"\
  Size mismatch: \" + game.size() + \" != \" + guess.size());\n        }\n       \
  \ ArrayList<Integer> errors = new ArrayList<>();\n        for (int i = 0; i < game.size();\
  \ i++) {\n            int gameValue = game.get(i);\n            int guessValue =\
  \ guess.get(i);\n            int error = 0;\n            if (guessValue < gameValue)\
  \ {\n                error++;\n            }\n            if (guessValue > gameValue)\
  \ {\n                error++;\n            }\n            if (error > 0) {\n   \
  \             errors.add(error);\n            }\n        }\n        ArrayList<Integer>\
  \ totalErrors = new ArrayList<>();\n        for (int i = 0; i < game.size(); i++)\
  \ {\n            totalErrors.add(errors.get(i));\n        }\n        ArrayList<Integer>\
  \ totalErrorsGroupedByGame = new ArrayList<>();\n        for (int i = 0; i < game.size();\
  \ i++) {\n            int gameValue = game.get(i);\n            int total = 0;\n\
  \            for (int j = 0; j < game.size(); j++) {\n                total += totalErrors.get(j);\n\
  \            }\n            totalErrorsGroupedByGame.add(total);\n        }\n  \
  \      ArrayList<Integer> groupedTotalErrorsGroupedByGame = new ArrayList<>();\n\
  \        int groupedTotal = 0;\n        for (int i = 0; i < game.size(); i++) {\n\
  \            groupedTotal += totalErrorsGroupedByGame.get(i);\n        }\n     \
  \   for (int i = 0; i < game.size(); i++) {\n            int gameValue = game.get(i);\n\
  \            int groupedErrors = totalErrorsGroupedByGame.get(i);\n            groupedTotalErrorsGroupedByGame.add(groupedErrors\
  \ / groupedTotal);\n        }\n        return groupedTotalErrorsGroupedByGame;"
- "        // Your code here\n        ArrayList<Integer> score = new ArrayList<>();\n\
  \        int index = 0;\n        score.add(0);\n        for (int i = 0; i < game.size();\
  \ i++) {\n            if (game.get(i) == guess.get(index)) {\n                score.add(0);\n\
  \            } else {\n                score.add(game.get(i) - guess.get(index));\n\
  \            }\n            index++;\n        }\n        return score;"
- "        ArrayList<Integer> diff = new ArrayList<Integer>();\n        // the length\
  \ of our guesses array is always equal to our score array length\n        for (int\
  \ i = 0; i < game.size(); i++) {\n            int score = game.get(i);\n       \
  \     int guess = guess.get(i);\n            diff.set(i, Math.abs(guess - score));\n\
  \        }\n        return diff;"
- "        int i, j, diff = 0, last = -10000000;\n\n        // We have to store them\
  \ in an array as they will need indexing later on.\n        int[] scores = new int[game.length];\n\
  \        int[] guesses = new int[guess.size()];\n\n        for (i = 0; i < guesses.length;\
  \ i++)\n            guesses[i] = guess.get(i);\n\n        for (i = 0; i < game.length;\
  \ i++)\n            scores[i] = game[i];\n\n        for (i = 0; i < guesses.length;\
  \ i++) {\n            // For each guess, calculate the difference between the current\
  \ score and the\n            // difference between the next guess and score to determine\
  \ how many matches\n            // are required to score the difference. Keep track\
  \ of the last score so we can\n            // report how many matches were required\
  \ and how many guesses we have left.\n            j = i;\n            do {\n   \
  \             diff = 0;\n                if (scores[j] < guesses[i]) {\n       \
  \             diff = 1;\n                } else if (scores[j] == guesses[i]) {\n\
  \                    diff = 0;\n                } else if (scores[j] > guesses[i])\
  \ {\n                    diff = -1; // The difference is positive, therefore we\
  \ would have guessed too low.\n                }\n                last = Math.abs(diff\
  \ + last - scores[j]);\n                j++;\n            } while (j <= game.length\
  \ && j >= i);\n        }\n        // If we have made enough guesses, return an array\
  \ of length guesses.length\n        if (j > game.length)\n            j = game.length;\n\
  \        ArrayList<Integer> guessesOnGame = new ArrayList<Integer>();\n        guessesOnGame.add(j);\n\
  \        guessesOnGame.add(last);\n        return guessesOnGame;"
- "        ArrayList<Integer> result = new ArrayList<>();\n\n        for (int i =\
  \ 0; i < guess.size(); i++) {\n            if (guess.get(i) == game.get(i)) {\n\
  \                result.add(i);\n            } else {\n                result.add(guess.get(i)\
  \ - game.get(i));\n            }\n        }\n        return result;"
- "        // We store the result here.\n        ArrayList<Integer> scores = new ArrayList<>();\n\
  \        // We go through each score in each array, compare it to each guess and\
  \ store the result \n        // into a variable we can return after the end of the\
  \ loop.\n        for (int i = 0; i < game.size(); i++) {\n            // Each score\
  \ is checked against each guess in the array. If a score is greater than the \n\
  \            // guess, we set its result to 0, and if not, we set its result to\
  \ the difference between \n            // the score and the guess.\n           \
  \ int score = 0;\n            for (int j = 0; j < guess.size(); j++) {\n       \
  \         int diff = game.get(i) - guess.get(j);\n                if (diff > score)\
  \ {\n                    score = 0;\n                } else if (diff < score) {\n\
  \                    score = Math.abs(diff);\n                }\n            }\n\
  \            // If the score is 0, then it means it wasn't greater than any of the\
  \ guesses,\n            // so the result will be 0. If it's not 0, then it means\
  \ it was greater than all \n            // the guesses, so we add that difference\
  \ to the score and return it.\n            if (score == 0)\n                scores.add(0);\n\
  \            else\n                scores.add(score);\n        }\n        // Once\
  \ we return this list of scores, each score is the absolute difference from the\
  \ guess to the\n        // score in the game.\n        return scores;"
- "        ArrayList<Integer> result = new ArrayList<>();\n        \n        // find\
  \ matches in the arrays\n        // create a set for the game array\n        //\
  \ create a set for the guess array\n        Set<Integer> gameSet = new HashSet<>(game);\n\
  \        Set<Integer> guessSet = new HashSet<>(guess);\n        \n        // find\
  \ the number of matches\n        int numMatches = 0;\n        for (Integer i : gameSet)\
  \ {\n            if (guessSet.contains(i)) {\n                numMatches++;\n  \
  \          }\n        }\n        \n        // create an array of the number of matches\
  \ found and subtract each game value from the total\n        int numDiffs = 0;\n\
  \        for (Integer i : gameSet) {\n            if (guessSet.contains(i)) {\n\
  \                numDiffs++;\n            }\n        }\n        \n        // create\
  \ the array of differences using the numDiffs value\n        // create a loop to\
  \ loop over the number of diffs found\n        // subtract each diff from the sum\
  \ of the games guessed\n        // if the sum is equal to the number of matches\
  \ found, return the array\n        // otherwise, subtract the sum of all diffs from\
  \ 100\n        // if the sum is 100, return the array\n        \n        double\
  \ sum = 0;\n        for (int i = 0; i < numDiffs; i++) {\n            sum += game.get(i);\n\
  \        }\n        \n        if (sum == numMatches) {\n            for (int i =\
  \ 0; i < numDiffs; i++) {\n                result.add(game.get(i) - guess.get(i));\n\
  \            }\n        }\n        else if (sum == numMatches + 100) {\n       \
  \     for (int i = 0; i < numDiffs; i++) {\n                result.add(game.get(i)\
  \ - guess.get(i));\n            }\n        }\n        else {\n            double\
  \ sumDiffs = 0;\n            for (int i = 0; i < numDiffs; i++) {\n            \
  \    sumDiffs += Math.abs(game.get(i) - guess.get(i));\n            }\n        \
  \    \n            double average = sumDiffs / numDiffs;\n            \n       \
  \     for (int i = 0; i < numDiffs; i++) {\n                result.add(average -\
  \ Math.abs(game.get(i) - guess.get(i)));\n            }\n        }\n        \n \
  \       return result;"
- "        ArrayList<Integer> diff = new ArrayList<Integer>();\n        if (game.size()\
  \ != guess.size()) {\n            throw new RuntimeException(\"Game and guess size\
  \ must equal\");\n        }\n        int n = game.size();\n        int m = guess.size();\n\
  \        int[] a = new int[n];\n        int[] b = new int[m];\n        for (int\
  \ i = 0; i < n; i++) {\n            a[i] = game.get(i);\n        }\n        for\
  \ (int i = 0; i < m; i++) {\n            b[i] = guess.get(i);\n        }\n     \
  \   for (int i = 0; i < n; i++) {\n            int a1 = i;\n            int b1 =\
  \ i;\n            while (true) {\n                if (a[a1] == b[b1]) {\n      \
  \              a1 = a1 + 1;\n                    b1 = b1 + 1;\n                }\
  \ else {\n                    break;\n                }\n            }\n       \
  \     int a2 = i;\n            int b2 = i;\n            while (true) {\n       \
  \         if (a[a2] == b[b2]) {\n                    a2 = a2 + 1;\n            \
  \        b2 = b2 + 1;\n                } else {\n                    break;\n  \
  \              }\n            }\n            int a3 = i;\n            int b3 = i;\n\
  \            while (true) {\n                if (a[a3] == b[b3]) {\n           \
  \         a3 = a3 + 1;\n                    b3 = b3 + 1;\n                } else\
  \ {\n                    break;\n                }\n            }\n            int\
  \ a4 = i;\n            int b4 = i;\n            while (true) {\n               \
  \ if (a[a4] == b[b4]) {\n                    a4 = a4 + 1;\n                    b4\
  \ = b4 + 1;\n                } else {\n                    break;\n            \
  \    }\n            }\n            if (a1 != a2) {\n                diff.add(Math.abs(a2\
  \ - a1));\n            }\n            if (a3 != a4) {\n                diff.add(Math.abs(a4\
  \ - a3));\n            }\n            if (b1 != b2) {\n                diff.add(Math.abs(b2\
  \ - b1));\n            }\n            if (b3 != b4) {\n                diff.add(Math.abs(b4\
  \ - b3));\n            }\n        }\n        return diff;"
- "        ArrayList<Integer> guessedCorrect = new ArrayList<Integer>();\n       \
  \ Arrays.stream(guess,(a,b) -> Math.abs(a - b))\n            .filter(x -> game.contains(x))\n\
  \            .forEach(x -> guessedCorrect.add(x));\n        return guessedCorrect;"
- "        int n = game.size();\n        ArrayList<Integer> result = new ArrayList<Integer>(n);\n\
  \        for (int i = 0; i < n; i++)\n        {\n            int score = game.get(i);\n\
  \            int guess = guess.get(i);\n            if(guess != score)\n       \
  \     {\n                result.add(Math.abs(guess - score));\n            }\n \
  \           else\n            {\n                result.set(i, 0);\n           \
  \ }\n        }\n        return result;"
- "        // Initialize array to hold result\n        ArrayList<Integer> result =\
  \ new ArrayList<>();\n        // Add each difference as result\n        result.addAll(game.subList(0,\
  \ game.size()));\n        result.addAll(guess.subList(0, guess.size()));\n     \
  \   // Return result\n        return result;"
- "        int difference = 0;\n        int counter = 0;\n        int lengthDiff =\
  \ 0;\n        ArrayList<Integer> diff = new ArrayList<>();\n\n        for(int i\
  \ = 0; i<game.size() && i<guess.size(); i++){\n            if(game.get(i)>guess.get(i)){\n\
  \                difference = game.get(i) - guess.get(i);\n                diff.add(difference);\n\
  \                lengthDiff = lengthDiff + Math.abs(difference);\n             \
  \   counter++;\n            }else if(game.get(i)<guess.get(i)){\n              \
  \  difference = guess.get(i) - game.get(i);\n                diff.add(difference);\n\
  \                lengthDiff = lengthDiff + Math.abs(difference);\n             \
  \   counter++;\n            }else {\n                counter++;\n            }\n\
  \        }\n\n        if(counter==0){\n            System.out.println(\"Your guesses\
  \ are equally far from your target score\");\n        }else {\n            System.out.println(lengthDiff);\n\
  \            for(int i = 0; i<guess.size(); i++){\n                if(game.get(i)>guess.get(i)){\n\
  \                    diff.set(i,diff.get(i)*-1);\n                }else if(game.get(i)<guess.get(i)){\n\
  \                    diff.set(i,diff.get(i)*-1 );\n                }else {\n   \
  \                 diff.set(i,diff.get(i)*0 );\n                }\n            }\n\
  \            return diff;\n        }"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        int gameSize\
  \ = game.size();\n        int guessSize = guess.size();\n        if(guessSize !=\
  \ gameSize) {\n            System.out.println(\"The number of guess should be equal\
  \ or larger than the length of game!\");\n            return result;\n        }\n\
  \        int count = 0;\n        for(int i = 0; i < gameSize && i < guessSize &&\
  \ count < guessSize && count < gameSize; i++) {\n            int diff = game.get(i)\
  \ - guess.get(count);\n            result.add(diff);\n            if(game.get(i)\
  \ == guess.get(count)) {\n                count++;\n            }\n        }\n \
  \       return result;"
- "        int i = 0;\n        ArrayList<Integer> result = new ArrayList<>();\n  \
  \      while (i < game.size()) {\n            result.add(0);\n            int bestDiff\
  \ = Integer.MAX_VALUE;\n            int bestIndex = -1;\n            int j = 0;\n\
  \            while (j < guess.size()) {\n                int diff = game.get(i)\
  \ - guess.get(j);\n                if (diff > bestDiff) {\n                    bestDiff\
  \ = diff;\n                    bestIndex = j;\n                }\n             \
  \   j++;\n            }\n            if (bestIndex > -1) {\n                result.set(i,\
  \ bestDiff);\n                i++;\n            } else {\n                result.add(game.get(i)\
  \ - guess.get(0));\n                i++;\n            }\n        }\n        return\
  \ result;"
- "        ArrayList<Integer> difference = new ArrayList<Integer>();\n        int\
  \ n = game.size();\n        int m = guess.size();\n        for (int i = 0; i < n;\
  \ i++) {\n            difference.add((Math.abs(guess.get(i) - game.get(i))));\n\
  \        }\n        return difference;"
- "        ArrayList<Integer> result = new ArrayList<Integer>(guess.size());\n   \
  \     for(int index = 0; index < guess.size(); index++) {\n            int difference\
  \ = Math.abs(guess.get(index) - game.get(index));\n            if(difference ==\
  \ 0) result.add(0); else result.add(difference);\n        }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        if (game.size()\
  \ != guess.size()) {\n            throw new IllegalArgumentException(\"Mismatched\
  \ scores\");\n        }\n\n        Map<Integer, Integer> gameMap = new HashMap<Integer,\
  \ Integer>();\n\n        game.forEach((index, score) -> {\n            int maxScore\
  \ = Collections.max(Arrays.asList(game, guess));\n            if (score == maxScore)\
  \ {\n                gameMap.put(index, maxScore);\n            } else {\n     \
  \           gameMap.put(index, Math.abs(score - maxScore));\n            }\n   \
  \     });\n\n        guess.forEach((index, guessScore) -> {\n            int gameScore\
  \ = gameMap.get(index);\n            if (gameScore == guessScore) {\n          \
  \      result.add(0);\n            } else {\n                result.add(Math.abs(guessScore\
  \ - gameScore));\n            }\n        });\n\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        // get size\
  \ of the arrays\n        int size = game.size();\n        int guessSize = guess.size();\n\
  \        \n        // get index of first element of game\n        int index = 0;\n\
  \        \n        for(; index < size; index++) {\n            int currGuess = guess.get(index);\n\
  \            int currScore = game.get(index);\n            \n            for(int\
  \ guessIndex = 0; guessIndex < guessSize; guessIndex++) {\n                int guess\
  \ = guess.get(guessIndex);\n                int score = game.get(guessIndex);\n\
  \                \n                if(guess != currGuess) {\n                  \
  \  result.add(Math.abs(currScore - currGuess));\n                    result.add(guess);\n\
  \                    result.add(currScore);\n                    result.add(currGuess);\n\
  \                    break;\n                }\n                \n            }\n\
  \            \n        }\n        \n        return result;"
- "        ArrayList<Integer> correct = new ArrayList<>();\n        for(int i = 0;\
  \ i < game.size(); i++) {\n            for(int j = 0; j < guess.size(); j++) {\n\
  \                int correctAnswer = game.get(i) == guess.get(j);\n            \
  \    if(correctAnswer) {\n                    correct.set(i, guess.get(j));\n  \
  \              } else {\n                    int diff = game.get(i) - guess.get(j);\n\
  \                    correct.set(i, Math.abs(diff));\n                }\n      \
  \      }\n        }\n        return correct;"
- "        ArrayList<Integer> result = new ArrayList<Integer>(guess.size());\n   \
  \     for(int i = 0; i < guess.size(); i++) {\n            // i will hold the index\
  \ of the guess in guess\n            // i is also used as the index in game\n  \
  \          int guess = guess.get(i);\n            int game = game.get(i);\n    \
  \        int result = 0;\n            if(guess == game) {\n                result\
  \ = 0;\n            } else {\n                result = Math.abs(guess - game);\n\
  \            }\n            result.add(result);\n        }\n        return result;"
- "        // If only one input array is provided, it is assumed to be correct.\n\
  \        // If multiple inputs are provided, all are checked.\n        // A match\
  \ is any input that matches any value in the other input array.\n        // A miss\
  \ is any input that doesn't match any value in the other input array.\n        //\
  \ A guess is any input that doesn't match any value in the input array.\n      \
  \  if (game.size() == guess.size()) return new ArrayList<Integer>(guess); // If\
  \ they guessed correctly they are equal to each other\n        List<Integer> matches\
  \ = new ArrayList<Integer>(); // List to store all matches\n        List<Integer>\
  \ misses = new ArrayList<Integer>(); // List to store all misses\n        List<Integer>\
  \ guesses = new ArrayList<Integer>(); // List to store all guesses\n        // If\
  \ there are any matches, iterate through them and store them in our matches list\n\
  \        // This is where our list of matches could have been filled in much easier\
  \ if all inputs were sorted.\n        // This is where our list of matches could\
  \ have been filled in much easier if all inputs were sorted.\n        for (int i\
  \ = 0; i < game.size(); i++) {\n            if (game.get(i) == guess.get(i)) {\n\
  \                matches.add(i);\n                matches.add(i);\n            }\n\
  \            \n        }\n        // This loop iterates through all the remaining\
  \ matches and checks if they match any value in the guess list\n        // If so,\
  \ it's a match, else it's a miss.\n        for (int i = 0; i < matches.size(); i++)\
  \ {\n            for (int j = 0; j < guess.size(); j++) {\n                if (game.get(matches.get(i))\
  \ == guess.get(j)) {\n                    matches.add(j);\n                }\n \
  \           }\n        }\n        // This loop iterates through all the remaining\
  \ matches and checks if they match any value in the guess list\n        // If so,\
  \ it's a match, else it's a miss.\n        for (int i = 0; i < matches.size(); i++)\
  \ {\n            for (int j = 0; j < guess.size(); j++) {\n                if (game.get(matches.get(i))\
  \ == guess.get(j)) {\n                    matches.add(j);\n                }\n \
  \           }\n        }\n        // This loop iterates through all the remaining\
  \ misses and checks if they match any value in the game list\n        // If so,\
  \ it's a miss, else it's a match.\n        for (int i = 0; i < matches.size(); i++)\
  \ {\n            for (int j = 0; j < game.size(); j++) {\n                if (game.get(matches.get(i))\
  \ == guess.get(j)) {\n                    misses.add(j);\n                }\n  \
  \          }\n        }\n        // This loop iterates through all the remaining\
  \ misses and checks if they match any value in the game list\n        // If so,\
  \ it's a miss, else it's a match.\n        for (int i = 0; i < matches.size(); i++)\
  \ {\n            for (int j = 0; j < game.size(); j++) {\n                if (game.get(matches.get(i))\
  \ == guess.get(j)) {\n                    misses.add(j);\n                }\n  \
  \          }\n        }\n        // This loop iterates "
- "        if (game.size() != guess.size()) {\n            return null;\n        }\n\
  \        ArrayList<Integer> result = new ArrayList<>();\n        for (int i = 0;\
  \ i < game.size(); i++) {\n            if (game.equals(guess)) {\n             \
  \   return null;\n            }\n            Integer diff = Integer.valueOf(Math.abs(game.get(i)\
  \ - guess.get(i)));\n            if (diff == 0) {\n                result.add(i);\n\
  \            } else {\n                result.add(diff);\n            }\n      \
  \  }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        for(int\
  \ i = 0; i < game.size(); i++) {\n            int score = game.get(i);\n       \
  \     int guessScore = guess.get(i);\n            result.add((score - guessScore)\
  \ + (Math.abs(score - guessScore) == score - guessScore ? 0 : Math.abs(score - guessScore)));\n\
  \        }\n        return result;"
- "        ArrayList<Integer> a = new ArrayList<>();\n        ArrayList<Integer> b\
  \ = new ArrayList<>();\n        for(int i=0;i<guess.size();i++){\n            if(i!=game.size()-1){\n\
  \                for(int j=0;j<game.size();j++){\n                    if(game.get(j)==guess.get(i)){\n\
  \                        a.add(0);\n                    }\n                    else{\n\
  \                        if(j==game.size()-1){\n                            b.add(game.get(j)-guess.get(i));\n\
  \                        }\n                        else{\n                    \
  \        b.add(game.get(j)-guess.get(i));\n                        }\n         \
  \           }\n                }\n            }\n            else{\n           \
  \     for(int j=0;j<game.size();j++){\n                    if(game.get(j)==guess.get(i)){\n\
  \                        a.add(0);\n                    }\n                    else{\n\
  \                        b.add(game.get(j)-guess.get(i));\n                    }\n\
  \                }\n            }\n        }\n        return b;"
- "        \n        ArrayList<Integer> array = new ArrayList<Integer>(game.size());\n\
  \        for (int i = 0; i < game.size(); i++) {\n            \n            int\
  \ value = Math.abs(game.get(i)-guess.get(i));\n            array.add(value);\n \
  \       }\n        return array;"
- "        int answer=0;\n        for(int i=0; i<game.size(); i++) {\n           \
  \ int temp=Integer.parseInt(game.get(i).toString());\n            int temp2=Integer.parseInt(guess.get(i).toString());\n\
  \            if(temp==temp2) {\n                answer++;\n            }\n     \
  \   }\n        ArrayList<Integer> output = new ArrayList<>();\n        for(int i=0;\
  \ i<game.size(); i++) {\n            int temp=Integer.parseInt(game.get(i).toString());\n\
  \            int temp2=Integer.parseInt(guess.get(i).toString());\n            int\
  \ temp3=Math.abs(temp-temp2);\n            output.add(temp3);\n        }\n     \
  \   return output;"
- "        // The results of our comparison\n        ArrayList<Integer> results =\
  \ new ArrayList<Integer>();\n\n        // The index at which we will compare to\n\
  \        int guessIndex = 0;\n\n        // The maximum difference between the guess\
  \ and the scores\n        int maxDifference = 0;\n\n        // Keep track of the\
  \ score for which we know the result\n        int knownScore = game.get(0);\n\n\
  \        // Loop until we have no more guesses\n        while (guessIndex < guess.size())\
  \ {\n            // Calculate the difference between the current score and the guess\n\
  \            int difference = guessIndex - game.get(guessIndex);\n\n           \
  \ // Is this guess correct?\n            if (difference < 0) {\n               \
  \ // Yes, increment the difference if it's not too high and we're not already too\
  \ high\n                if (difference < maxDifference) {\n                    maxDifference\
  \ = difference;\n                }\n            } else if (difference > 0) {\n \
  \               // No, increment the difference if it is too high and we're not\
  \ already too low\n                if (difference > maxDifference) {\n         \
  \           maxDifference = difference;\n                }\n            } else {\n\
  \                // Increment the difference if it isn't too high or too low\n \
  \               if (maxDifference == 0) {\n                    maxDifference = difference;\n\
  \                }\n            }\n\n            // Increment the index and move\
  \ on\n            guessIndex++;\n        }\n\n        // If the result is not known,\
  \ compare against the known score\n        if (maxDifference != 0) {\n         \
  \   results.add(knownScore - maxDifference);\n        }\n\n        return results;"
- "        ArrayList<Integer> result = new ArrayList<>();\n        for(int i = 0;\
  \ i < game.size(); i++) {\n            int j = i;\n            int gameScore = game.get(i);\n\
  \            int guessScore = guess.get(j);\n            int diff = abs(gameScore\
  \ - guessScore);\n            while(j != 0) {\n                if(game.get(j-1)\
  \ == gameScore) {\n                    j--;\n                    gameScore = game.get(j);\n\
  \                    guessScore = guess.get(j);\n                    diff = abs(gameScore\
  \ - guessScore);\n                } else if(game.get(j-1) < gameScore) {\n     \
  \               j--;\n                } else {\n                    break;\n   \
  \             }\n            }\n            result.add(diff);\n        }\n     \
  \   return result;"
- '        // TODO: implement me'
- "        ArrayList<Integer> differences = new ArrayList<>();\n        // your solution\
  \ here"
- "        ArrayList<Integer> answer = new ArrayList<>();\n        for (int index\
  \ = 0; index < game.size(); index++) {\n            int diff = abs(game.get (index)\
  \ - guess.get(index));\n            answer.add(diff);\n        }\n        return\
  \ answer;"
- "        ArrayList<Integer> score = new ArrayList<>();\n        // The best guess\
  \ so far is the best score. So lets compare them in descending order. \n       \
  \ for (int i : game.subList(0, game.size() - guess.size())) {\n            // Find\
  \ the difference between the current score and the correct one.\n            int\
  \ diff = guess.get(i) - game.get(i);\n            // Check if we have found the\
  \ correct one.\n            if (diff == 0) {\n                score.add(0);\n  \
  \          } else {\n                // The correct one is wrong. Subtract it from\
  \ the best guess so far. \n                // Then add it to our best score. If\
  \ our guesses were not even close, \n                // the difference will actually\
  \ be bigger than 1 so we'll just keep \n                // subtracting until they\
  \ are. \n                for (int j = 0; j < i; j++) {\n                    if (diff\
  \ > 0) {\n                        diff -= guess.get(j);\n                    } else\
  \ {\n                        diff += guess.get(j);\n                    }\n    \
  \            }\n                score.add(diff);\n            }\n        }\n   \
  \     return score;"
- "        // Step 1: determine how many matches and how many games\n        int matches\
  \ = 0;\n        int games = 0;\n        for (int i = 0; i < game.size(); i++) {\n\
  \            if (game.get(i) == guess.get(i)) {\n                matches++;\n  \
  \          }\n            if (guess.get(i) != game.get(i)) {\n                games++;\n\
  \            }\n        }\n\n        // Step 2: figure out where to store the result\n\
  \        ArrayList<Integer> result;\n        if (matches == games) {\n         \
  \   result = new ArrayList<>(game.size());\n            for(int i = 0; i < game.size();\
  \ i++) {\n                if (game.get(i) == guess.get(i)) {\n                 \
  \   result.add(0);\n                }\n                else if (guess.get(i) ==\
  \ game.get(i)) {\n                    result.add(i);\n                }\n      \
  \          else {\n                    result.add(Math.abs(guess.get(i)-game.get(i)));\n\
  \                }\n            }\n        }\n        else {\n            result\
  \ = new ArrayList<>(game.size());\n            for(int i = 0; i < game.size(); i++)\
  \ {\n                if (game.get(i) == guess.get(i)) {\n                    result.add(i);\n\
  \                }\n                else {\n                    result.add(Math.abs(guess.get(i)-game.get(i)));\n\
  \                }\n            }\n        }\n\n        // Step 3: return the result\n\
  \        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        int total\
  \ = 0, temp;\n        game = game.stream().filter(e -> e != 0).collect(Collectors.toCollection(ArrayList::new));\n\
  \        guess = guess.stream().filter(e -> e != 0).collect(Collectors.toCollection(ArrayList::new));\n\
  \        if (game.size() !=guess.size()){\n            return result;\n        }\n\
  \        game = game.stream().filter(e -> e > 0).collect(Collectors.toCollection(ArrayList::new));\n\
  \        guess = guess.stream().filter(e -> e > 0).collect(Collectors.toCollection(ArrayList::new));\n\
  \        for(int i = 0; i < game.size(); i++){\n            for(int j = 0; j < guess.size();\
  \ j++){\n                if(game.get(i) == guess.get(j)){\n                    total++;\n\
  \                    temp = total;\n                }\n            }\n        }\n\
  \        if(total == game.size()){\n            ArrayList<Integer> temp = new ArrayList<Integer>();\n\
  \            temp.add(0);\n            temp.add(temp - game.get(0));\n         \
  \   result.add(temp);\n        }\n        if(total == 0){\n            temp = new\
  \ ArrayList<Integer>();\n            temp.add(0);\n            result.add(temp);\n\
  \        }\n        return result;"
- "        int index = 0;\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
  \        while ((index < game.size()) && (index < guess.size())) {\n           \
  \ result.add(game.get(index) - guess.get(index));\n            index++;\n      \
  \  }\n        if (index != game.size() || index != guess.size()) {\n           \
  \ System.out.println(\"index: \" + index);\n            System.out.println(\"game:\
  \ \" + game);\n            System.out.println(\"guess: \" + guess);\n          \
  \  System.out.println(\"result: \" + result);\n        }\n        return result;"
- "        ArrayList<Integer> results = new ArrayList<>();\n        int max = Collections.max(game)\
  \ - Collections.min(game);\n        int min = -Collections.min(game);\n        int\
  \ gameSize = game.size();\n        int guessSize = guess.size();\n        // int\
  \ gameSize_0 = game.stream().filter(v -> v == 0).count();\n        int gameSize_0\
  \ = game.stream().filter(v -> v == 0).count();\n        int guessSize_0 = guess.stream().filter(v\
  \ -> v == 0).count();\n        int gameSize_1 = game.stream().filter(v -> v == 1).count();\n\
  \        int guessSize_1 = guess.stream().filter(v -> v == 1).count();\n       \
  \ int gameSize_2 = game.stream().filter(v -> v == 2).count();\n        int guessSize_2\
  \ = guess.stream().filter(v -> v == 2).count();\n        int gameSize_3 = game.stream().filter(v\
  \ -> v == 3).count();\n        int guessSize_3 = guess.stream().filter(v -> v ==\
  \ 3).count();\n        int gameSize_4 = game.stream().filter(v -> v == 4).count();\n\
  \        int guessSize_4 = guess.stream().filter(v -> v == 4).count();\n       \
  \ int gameSize_5 = game.stream().filter(v -> v == 5).count();\n        int guessSize_5\
  \ = guess.stream().filter(v -> v == 5).count();\n        int gameSize_6 = game.stream().filter(v\
  \ -> v == 6).count();\n        int guessSize_6 = guess.stream().filter(v -> v ==\
  \ 6).count();\n        int gameSize_7 = game.stream().filter(v -> v == 7).count();\n\
  \        int guessSize_7 = guess.stream().filter(v -> v == 7).count();\n       \
  \ int gameSize_8 = game.stream().filter(v -> v == 8).count();\n        int guessSize_8\
  \ = guess.stream().filter(v -> v == 8).count();\n        int gameSize_9 = game.stream().filter(v\
  \ -> v == 9).count();\n        int guessSize_9 = guess.stream().filter(v -> v ==\
  \ 9).count();\n        // int gameSize_10 = game.stream().filter(v -> v == 10).count();\n\
  \        // int guessSize_10 = guess.stream().filter(v -> v == 10).count();\n  \
  \      // int gameSize_11 = game.stream().filter(v -> v == 11).count();\n      \
  \  // int guessSize_11 = guess.stream().filter(v -> v == 11).count();\n        //\
  \ int gameSize_12 = game.stream().filter(v -> v == 12).count();\n        // int\
  \ guessSize_12 = "
- "        ArrayList<Integer> result = new ArrayList<Integer>(game.size());\n    \
  \    for (int i = 0; i < game.size(); i++) {\n            if (guess.get(i) == game.get(i))\
  \ {\n                result.add(0, 0);\n            } else {\n                result.add(0,\
  \ Math.abs(guess.get(i) - game.get(i)));\n            }\n        }\n        return\
  \ result;"
- "        ArrayList<Integer> result = new ArrayList<>();\n\n        // for each guess\
  \ check the game against that guess\n        for( int i = 0; i < guess.size(); i++\
  \ ) {\n            // if they don't match then the guess is wrong\n            if(\
  \ game.get(i) != guess.get(i) ) {\n                // increment the result array\
  \ by that difference\n                result.add( (guess.get(i) - game.get(i)) );\n\
  \            }\n        }\n\n        // return the array\n        return result;"
- "        // TODO: implement me\n        ArrayList<Integer> returnArray = new ArrayList<>();\n\
  \        int i = 0;\n        int j = 0;\n        while (i<game.size() && j<guess.size())\
  \ {\n            if (game.get(i) == guess.get(j)) {\n                returnArray.set(i,\
  \ 0);\n                i++;\n                j++;\n            } else if (game.get(i)\
  \ < guess.get(j)) {\n                returnArray.set(i, 1);\n                i++;\n\
  \            } else if (game.get(i) > guess.get(j)) {\n                returnArray.set(i,\
  \ 2);\n                j++;\n            } else {\n                returnArray.set(i,\
  \ 3);\n                i++;\n                j++;\n            }\n        }\n  \
  \      return returnArray;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        for (int\
  \ i = 0; i < game.size(); i++) {\n            int score = 0;\n            int guessValue\
  \ = 0;\n            int diff = 0;\n            for (int j = 0; j < guess.size();\
  \ j++) {\n                if (i == j) {\n                    score = game.get(i);\n\
  \                    guessValue = guess.get(j);\n                }\n           \
  \     else {\n                    if (game.get(i) > guess.get(j)) {\n          \
  \              score = game.get(i);\n                        guessValue = guess.get(j);\n\
  \                    }\n                    else {\n                        score\
  \ = guess.get(j);\n                        guessValue = guess.get(i);\n        \
  \            }\n                }\n                diff = abs(guessValue - score);\n\
  \            }\n            result.add(diff);\n        }\n        return result;"
- "        ArrayList<Integer> guessesSoFar = new ArrayList<Integer>();\n        for(int\
  \ i = 0; i < game.size(); i++){\n            guessesSoFar.add(guess.get(i));\n \
  \       }\n        int differenceSum = 0;\n        for(int i = 0; i < game.size();\
  \ i++){\n            int difference = game.get(i) - guessesSoFar.get(i);\n     \
  \       differenceSum += Math.abs(difference);\n        }\n        ArrayList<Integer>\
  \ result = new ArrayList<Integer>(game.size());\n        for(int i = 0; i < game.size();\
  \ i++){\n            result.add(game.get(i) - differenceSum);\n        }\n     \
  \   return result;"
- "        // TODO Auto-generated method stub\n        ArrayList<Integer> gameArray\
  \ = new ArrayList<Integer>();\n        ArrayList<Integer> guessArray = new ArrayList<Integer>();\n\
  \        ArrayList<Integer> resultArray = new ArrayList<Integer>();\n        for(int\
  \ i = 0; i < game.size(); i++) {\n            gameArray.add(game.get(i));\n    \
  \        guessArray.add(guess.get(i));\n        }\n        //System.out.println(gameArray);\n\
  \        //System.out.println(guessArray);\n        \n        int gameSize = gameArray.size();\n\
  \        int guessSize = guessArray.size();\n        \n        int a = 0;\n    \
  \    int b = 0;\n        int c = 0;\n        int d = 0;\n        int e = 0;\n  \
  \      int f = 0;\n        int g = 0;\n        int h = 0;\n        int i = 0;\n\
  \        int j = 0;\n        int k = 0;\n        int l = 0;\n        int m = 0;\n\
  \        int n = 0;\n        int o = 0;\n        int p = 0;\n        int q = 0;\n\
  \        int r = 0;\n        int s = 0;\n        int t = 0;\n        int u = 0;\n\
  \        int v = 0;\n        int w = 0;\n        int x = 0;\n        int y = 0;\n\
  \        int z = 0;\n        \n        for(int a = 0; a < gameSize; a++) {\n   \
  \         if(guessArray.get(a) == gameArray.get(a)) {\n                //System.out.println(\"\
  game\");\n                //System.out.println(guessArray.get(a));\n           \
  \     gameArray.remove(a);\n                guessArray.remove(a);\n            \
  \    gameArray.add(a);\n                guessArray.add(a);\n                a++;\n\
  \                \n            }\n            else if(guessArray.get(a) > gameArray.get(a))\
  \ {\n                //System.out.println(\"guess\");\n                //System.out.println(guessArray.get(a));\n\
  \                gameArray.remove(a);\n                guessArray.remove(a);\n \
  \               gameArray.add(a);\n                guessArray.add(a);\n        \
  \        a++;\n                \n            }\n        }\n        \n        //System.out.println(\"\
  a\");\n        //System.out.println(gameArray);\n        //System.out.println(\"\
  b\");\n        //System.out.println(guessArray);\n        \n        for(int b =\
  \ 0; b < gameSize; b++) {\n            if(guessArray.get(b) == gameArray.get(b))\
  \ {\n                //System.out.println(\"game\");\n                //System.out.println(guessArray.get(b));\n\
  \                gameArray.remove(b);\n                guessArray.remove(b);\n \
  \               gameArray.add(b);\n                guessArray.add(b);\n        \
  \        b++;\n                \n            }\n            else if(guessArray.get(b)\
  \ > gameArray.get(b)) {\n                //System.out.println(\"guess\");\n    \
  \            //System.out.println(guessArray.get(b));\n                gameArray.remove(b);\n\
  \                guessArray.remove(b);\n                gameArray.add(b);\n    \
  \            guessArray.add(b);\n                b++;\n                \n      \
  \      }\n        }\n        \n        for(int c = 0; c < gameSize; c++) {\n   \
  \         if("
- "        ArrayList<Integer> scores = new ArrayList<>();\n        int max = game.size();\n\
  \        int len = guess.size();\n        ArrayList<Integer> result = new ArrayList<>();\n\
  \        for(int i = 0; i < max; i++) {\n            scores.add((game.get(i) - guess.get(i))%max);\n\
  \        }\n        int index = 0;\n        while(index < len) {\n            if(!guess.isEmpty())\
  \ {\n                int index2 = scores.size() - 1;\n                while(index2\
  \ >= 0) {\n                    int scoreDifference = scores.get(index2) - (scores.get(index2-1)\
  \ % max);\n                    int newScore = scores.get(index2);\n            \
  \        if(scoreDifference < 0) {\n                        result.add(Math.abs(scoreDifference\
  \ + guess.get(index2)));\n                        break;\n                    }\n\
  \                    result.add(scoreDifference);\n                    index2--;\n\
  \                }\n            }\n        }\n        return result;"
- "        // Step 1: Determine which index is most relevant and correct. \n     \
  \   int maxIndex = -1;\n        int maxIndexIndex = 0;\n        for (int i = 0;\
  \ i < game.size(); i++) {\n            int index = i;\n            if (game.get(i)\
  \ == guess.get(maxIndexIndex)) {\n                index = i;\n            }\n  \
  \          if (game.get(i) > guess.get(maxIndexIndex)) {\n                index\
  \ = i;\n            }\n            if (index != maxIndex) {\n                maxIndex\
  \ = index;\n                maxIndexIndex = i;\n            }\n        }\n     \
  \   // Step 2: Calculate the difference for each array (maxIndexIndex) and add it\
  \ to the list.\n        ArrayList<Integer> answer = new ArrayList<Integer>();\n\
  \        for (int i = 0; i < game.size(); i++) {\n            int diff = game.get(i)\
  \ - guess.get(maxIndexIndex);\n            answer.add(diff);\n        }\n      \
  \  return answer;"
- "        ArrayList<Integer> diff = new ArrayList<>();\n        int gameSize = game.size();\n\
  \        int guessSize = guess.size();\n\n        for(int i = 0; i < guessSize;\
  \ i++) {\n            int diffOfGuess;\n            if(guess.get(i) == game.get(i))\
  \ {\n                diffOfGuess = 0;\n            } else {\n                diffOfGuess\
  \ = Math.abs(guess.get(i) - game.get(i));\n            }\n            diff.add(diffOfGuess);\n\
  \        }\n        return diff;"
- "        // the main difference between this and other approaches is that you're\
  \ storing the result\n        // of the comparison here instead of printing out\
  \ a line of text and then returning it\n        ArrayList<Integer> compared = new\
  \ ArrayList<>();\n        // a while loop that runs until we have compared all guesses\
  \ to their corresponding score\n        // the loop will stop when the loop counter\
  \ has been reached\n        // the only difference between the while loop and the\
  \ for loop is that we're using the\n        // i counter instead of the length as\
  \ an exit condition\n        for(int i = 0; i < game.size(); i++) {\n          \
  \  // if the two arrays are not the same length, then we have run out of guesses\n\
  \            // either way\n            if(game.size() != guess.size()) {\n    \
  \            return compared;\n            }\n            // the while loop will\
  \ keep going until it reaches the length of the game, at which\n            // point\
  \ it will break the loop and return our result\n            while(!compared(game.get(i),\
  \ guess.get(i))) {\n                // if the two arrays are the same length, and\
  \ the game score is less than the guess\n                // score then we must keep\
  \ going - this can happen if both arrays contain the same score\n              \
  \  if(game.size() == guess.size()) {\n                    if(!compared(game.get(i),\
  \ guess.get(i))) {\n                        // in case the game score is equal to\
  \ the guess score we must return the game score\n                        return\
  \ new ArrayList<Integer>(Arrays.asList(game.get(i)));\n                    }\n \
  \               }\n            }\n            // if the game score is equal to the\
  \ guess score we must return an empty array\n            compared.add(0);\n    \
  \    }\n        // after comparing all guesses to their corresponding scores, we\
  \ return our result as an\n        // ArrayList\n        return compared;"
- "        ArrayList<Integer> diff = new ArrayList<>();\n        for(int i = 0; i\
  \ < game.size(); i++) {\n            diff.add(Math.abs(guess.get(i) - game.get(i)));\n\
  \        }\n        return diff;"
- "        ArrayList<Integer> results = new ArrayList<Integer>(game.size());\n   \
  \     for( int i = 0; i < game.size(); ++i ) {\n            int result = Math.abs(guess.get(i)\
  \ - game.get(i));\n            results.add(result);\n        }\n        return results;"
- "        ArrayList<Integer> comp = new ArrayList<>(game);\n        for(int i = 0;\
  \ i < game.size(); i++) {\n            comp.set(i, Math.abs(game.get(i) - guess.get(i)));\n\
  \        }\n        return comp;"
- "        ArrayList<Integer> diff = new ArrayList<>();\n        for(int i = 0; i\
  \ < game.size(); i++) {\n            for(int j = 0; j < guess.size(); j++) {\n \
  \               if (game.get(i) == guess.get(j)) {\n                    if (game.get(i)\
  \ > guess.get(j)) {\n                        diff.add(0);\n                    }\
  \ else {\n                        diff.add((int) Math.abs(game.get(i) - guess.get(j)));\n\
  \                    }\n                    break;\n                }\n        \
  \    }\n        }\n        return diff;"
- "        // TODO: Implement me please\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
  \        for(int i = 0; i < game.size(); i++) {\n            result.add(game.get(i)\
  \ - guess.get(i));\n        }\n        return result;"
- "        //I took the liberty to refactor your code to make it less prone to errors\n\
  \        // 1. I made sure to pass both arrays in the same type\n        // 2. I\
  \ took your comparison function and made it shorter and more readable\n        //\
  \ 3. I used Java 8 features (especially the Stream API) to solve the problem\n \
  \       \n        // 1. I made sure to pass both arrays in the same type\n     \
  \   // 2. I took your comparison function and made it shorter and more readable\n\
  \        boolean correct = false;\n        \n        // 3. I used Java 8 features\
  \ (especially the Stream API) to solve the problem\n        int i = 0;\n       \
  \ \n        //The result of our task\n        ArrayList<Integer> result = new ArrayList<>();\n\
  \        \n        //I refactored your comparison function into a function that\
  \ returns the difference \n        //between score and guess\n        Function<Integer,\
  \ Integer> scoreGuess = score -> Math.abs(score - guess);\n        \n        //I\
  \ refactored your comparison function into a function that returns the difference\
  \ \n        //between score and guess\n        Function<Integer, Integer> scoreGuess\
  \ = score -> Math.abs(score - guess);\n        \n        //I refactored your comparison\
  \ function into a function that returns the difference \n        //between score\
  \ and guess\n        Function<Integer, Integer> scoreGuess = score -> Math.abs(score\
  \ - guess);\n        \n        //I refactored your comparison function into a function\
  \ that returns the difference \n        //between score and guess\n        Function<Integer,\
  \ Integer> scoreGuess = score -> Math.abs(score - guess);\n        \n        //I\
  \ refactored your comparison function into a function that returns the difference\
  \ \n        //between score and guess\n        Function<Integer, Integer> scoreGuess\
  \ = score -> Math.abs(score - guess);\n        \n        //I refactored your comparison\
  \ function into a function that returns the difference \n        //between score\
  \ and guess\n        Function<Integer, Integer> scoreGuess = score -> Math.abs(score\
  \ - guess);\n        \n        //I refactored your comparison function into a function\
  \ that returns the difference \n        //between score and guess\n        Function<Integer,\
  \ Integer> scoreGuess = score -> Math.abs(score - guess);\n        \n        //I\
  \ refactored your comparison function into a function that returns the difference\
  \ \n        //between score and guess\n        Function<Integer, Integer> scoreGuess\
  \ = score -> Math.abs(score - guess);\n        \n        //I refactored your comparison\
  \ function into a function that returns the difference \n        //between score\
  \ and guess\n        Function<Integer, Integer> scoreGuess = score -> Math.abs(score\
  \ - guess);\n        \n        //I refactored your "
- "        // write your code here\n        return null;"
- '        // Your code here'
- "        int difference = Integer.MAX_VALUE;\n        ArrayList<Integer> result\
  \ = new ArrayList<>();\n        for (int i = 0; i < game.size(); i++) {\n      \
  \      for (int j = 0; j < guess.size(); j++) {\n                if (game.get(i)\
  \ == guess.get(j)) {\n                    result.add(i * game.get(i));\n       \
  \             difference = Math.min(difference, Math.abs(guess.get(j) - game.get(i)));\n\
  \                }\n            }\n        }\n        return result;"
- "        ArrayList<Integer> ret = new ArrayList<>(guess.length);\n        // If\
  \ all values in the guess array are zero return an empty array\n        if (guess.stream().allMatch(x\
  \ -> x == 0)) return ret;\n        // If all values in the game array are zero return\
  \ an empty array\n        if (game.stream().allMatch(x -> x == 0)) return ret;\n\
  \        for(int i=0;i<guess.length;i++) {\n            if (guess.get(i) == game.get(i))\
  \ {\n                ret.set(i, 0);\n            }\n            else {\n       \
  \         ret.set(i, Math.abs(guess.get(i)-game.get(i)));\n            }\n     \
  \   }\n        return ret;"
- "        if (game.size() != guess.size()) {\n            return null;\n        }\n\
  \n        ArrayList<Integer> diffs = new ArrayList<Integer>();\n        int n =\
  \ game.size();\n        for (int i = 0; i < n; i++) {\n            diffs.add((Math.abs(game.get(i)\
  \ - guess.get(i))));\n        }\n        return diffs;"
- "        ArrayList<Integer> comparer = new ArrayList<>(game.size());\n        for\
  \ (int i = 0; i < game.size(); i++) {\n            Integer gameScore = game.get(i);\n\
  \            Integer guessScore = guess.get(i);\n            if (gameScore != guessScore)\
  \ {\n                comparer.add(Math.abs(guessScore - gameScore));\n         \
  \   } else {\n                comparer.add(0);\n            }\n        }\n     \
  \   return comparer;"
- "        ArrayList<Integer> result = new ArrayList<>();\n        if (game.size()\
  \ != guess.size()) {\n            throw new IllegalArgumentException(\"The game\
  \ and guess lists are not of equal length.\");\n        }\n        for (int i =\
  \ 0; i < game.size(); i++) {\n            if (game.get(i) == guess.get(i)) {\n \
  \               result.add(0, 0);\n            } else {\n                result.add(0,\
  \ Math.abs(guess.get(i) - game.get(i)));\n            }\n        }\n        return\
  \ result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>(game);\n        for\
  \ (int i = 0; i < game.size(); i++) {\n            int scoreDiff = game.get(i) -\
  \ guess.get(i);\n            if (scoreDiff != 0) {\n                result.add(-scoreDiff);\n\
  \            }\n        }\n        return result;"
- "        ArrayList<Integer> correct = new ArrayList<>();\n        ArrayList<Integer>\
  \ difference = new ArrayList<>();\n\n        //We don't have to check all guesses,\
  \ just the first one\n        int index = 0;\n        boolean isCorrect = false;\n\
  \        for (int i = 0; i < game.size(); i++) {\n            for (int j = 0; j\
  \ < guess.size(); j++) {\n                if (index == i) {\n                  \
  \  if (game.get(index) == guess.get(j)) {\n                        isCorrect = true;\n\
  \                    } else {\n                        isCorrect = false;\n    \
  \                }\n                }\n\n                if (index != i) {\n   \
  \                 //We need to check each time we encounter a guess with a different\
  \ index\n                    if (isCorrect == true) {\n                        difference.add(0);\n\
  \                    }\n                    isCorrect = false;\n               \
  \ }\n\n                if (isCorrect == true) {\n                    //If the guess\
  \ is correct, store the difference\n                    difference.add(Math.abs(guess.get(j)\
  \ - game.get(index)));\n                }\n\n                //If no difference,\
  \ add the guess\n                if (difference.size() == 0) {\n               \
  \     difference.add(Math.abs(guess.get(j) - game.get(index)));\n              \
  \  }\n\n                index++;\n            }\n        }\n\n        return difference;"
- "        // Write your solution here\n        ArrayList<Integer> difference = new\
  \ ArrayList<Integer>();\n        boolean gameCorrect = true;\n        for(int i\
  \ = 0; i < game.size(); i++){\n            if (game.get(i) != guess.get(i)){\n \
  \               difference.add(Math.abs(game.get(i)-guess.get(i)));\n          \
  \      gameCorrect = false;\n            }\n        }\n        \n        if(gameCorrect){\n\
  \            difference.add(0);\n        }\n        return difference;"
- "        ArrayList<Integer> diff = new ArrayList<Integer>();\n        for(int i\
  \ = 0; i < guess.size(); i++) {\n            int diff = game.get(i) - guess.get(i);\n\
  \            if(diff != 0) {\n                diff.add(-diff);\n            }\n\
  \        }\n        return diff;"
- "        int n = 0;\n        int correct = 0;\n        for (int i = 0; i < game.size();\
  \ i++) {\n            if (guess.get(i) == game.get(i)) {\n                n++;\n\
  \                if (guess.get(i) == game.get(i)) {\n                    correct++;\n\
  \                }\n            } else {\n                n--;\n            }\n\
  \        }\n        ArrayList<Integer> arr = new ArrayList<>();\n        for (int\
  \ i = 0; i < guess.size(); i++) {\n            int diff = game.get(i) - guess.get(i);\n\
  \            if (diff < 0) {\n                diff *= -1;\n            }\n     \
  \       if (correct > 0) diff /= correct;\n            if (diff < 0) diff *= -1;\n\
  \            arr.add(diff);\n        }\n        return arr;"
- "        int size = game.size();\n        ArrayList<Integer> result = new ArrayList<>(size);\n\
  \        for(int i = 0; i < size; i++) {\n            int difference = Math.abs(guess.get(i)\
  \ - game.get(i));\n            int index = i;\n            while (difference > 0)\
  \ {\n                if (guess.get(index) == game.get(index)) {\n              \
  \      difference--;\n                    index++;\n                }\n        \
  \        else {\n                    result.add(difference);\n                 \
  \   difference = 0;\n                    index = i;\n                }\n       \
  \     }\n        }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        for(Integer\
  \ i : game) {\n            int score = 0;\n            boolean found = false;\n\
  \            for(int j : guess) {\n                if(j == i) {\n              \
  \      found = true;\n                    score++;\n                    break;\n\
  \                }\n            }\n            result.add(found ? score : Math.abs(i\
  \ - score));\n        }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<Integer>(game);\n        for(int\
  \ i=0; i<guess.size(); i++) {\n            int guessed = guess.get(i);\n       \
  \     int score = game.get(i);\n            if(guessed != score)\n             \
  \   result.add((Math.abs(guessed-score))+guessed);\n        }\n        return result;"
- "        //sort the guesses\n        Arrays.sort(guess);\n\n        //find the max\
  \ number of guesses\n        int maxNumGuesses = Integer.MIN_VALUE;\n        int\
  \ maxNumGuessesCounter = 0;\n        for (int i = 0; i < guess.size(); i++) {\n\
  \            if (maxNumGuesses > guess.get(i)) {\n                maxNumGuesses\
  \ = guess.get(i);\n                maxNumGuessesCounter = 0;\n            }\n  \
  \          if (guess.get(i) == game.get(i)) {\n                maxNumGuessesCounter++;\n\
  \            }\n        }\n        ArrayList<Integer> result = new ArrayList<Integer>(guess.size());\n\
  \        //find difference in guesses and score\n        for (int i = 0; i < maxNumGuessesCounter;\
  \ i++) {\n            int diff = maxNumGuesses - guess.get(i);\n            result.add(diff);\n\
  \        }\n        for (int i = 0; i < maxNumGuessesCounter; i++) {\n         \
  \   int diff = game.get(i) - maxNumGuesses - guess.get(i);\n            result.add(diff);\n\
  \        }\n        return result;"
- "        ArrayList<Integer> result = new ArrayList<>();\n        int gameSize =\
  \ game.size();\n        int guessSize = guess.size();\n        // the result is\
  \ a score that is off by some amount (a negative number means you guessed correctly)\n\
  \        // and if they both scored 0 then we are done\n        int resultScore\
  \ = 0;\n        // if both scores were 0 then the game and guess matched\n     \
  \   // but they have a difference in position, so we take the guess\n        //\
  \ and the score and compare them\n        if (gameSize == 0 && guessSize == 0) {\n\
  \            for (int i = 0; i < guessSize; i++) {\n                // we found\
  \ a match between guess and score\n                if (guess.equals(game)) {\n \
  \                   result.add(0);\n                    break;\n               \
  \ }\n                // the guess is not in game\n                else {\n     \
  \               // how far off the guess was\n                    int guessDiff\
  \ = guess.get(i) - game.get(i);\n                    // the guess that is closest\
  \ in game\n                    if (Math.abs(guessDiff) < Math.abs(resultScore))\
  \ {\n                        result.add(guessDiff);\n                        resultScore\
  \ = Math.abs(guessDiff);\n                    }\n                }\n           \
  \ }\n        }\n        // the game has more guesses than the guess\n        else\
  \ if (guessSize > gameSize) {\n            // a game has more guesses than a guess,\
  \ they must have played all games\n            for (int i = 0; i < gameSize; i++)\
  \ {\n                // the game has more guesses than a guess, they must have played\
  \ all games\n                if (guess.equals(game)) {\n                    // the\
  \ guess that is closest in game\n                    result.add(0);\n          \
  \          break;\n                }\n                // the game does not have\
  \ that match\n                else {\n                    int guessDiff = guess.get(i)\
  \ - game.get(i);\n                    // the guess that is closest in game\n   \
  \                 if (Math.abs(guessDiff) < Math.abs(resultScore)) {\n         \
  \               result.add(guessDiff);\n                        resultScore = Math.abs(guessDiff);\n\
  \                    }\n                }\n            }\n        }\n        //\
  \ the guesses are not equal\n        else if (guessSize < gameSize) {\n        \
  \    for (int i = 0; i < guessSize; i++) {\n                // guesses have a lower\
  \ score than games\n                if (game.equals(guess)) {\n                \
  \    // the guess that is closest in game\n                    result.add(0);\n\
  \                    break;\n                }\n                // the guesses do\
  \ not have the same match\n                else {\n                    // how far\
  \ off the guess was\n                    int guessDiff = guess.get(i) - game.get(i);\n\
  \                    // the guess that is closest in game\n                    if\
  \ (Math.abs(guessDiff) < Math.abs(resultScore)) {\n                        result.add(guessDiff);\n\
  \                        resultScore = Math.abs(guessDiff);\n                  \
  \  }\n                }\n            }\n        }\n        // guesses are equal,\
  \ they must have been played all games\n        else {\n            // the "
- "        ArrayList<Integer> out = new ArrayList<Integer>();\n        // Ok, this\
  \ is going to be a tricky one, because we're going to be working on two sets. \n\
  \        // We need to get both sets, sort them, then compare them.\n        //\
  \ A bit of work, and we'll be back in a bit.\n        ArrayList scores = new ArrayList<Integer>(game);\n\
  \        ArrayList guesses = new ArrayList<Integer>(guess);\n        ArrayList temp\
  \ = new ArrayList();\n        temp.addAll(scores.size());\n        temp.addAll(guesses.size());\n\
  \        temp.sort(Collections.reverseOrder());\n        int i = 0;\n        int\
  \ j = 0;\n        int compared = 0;\n        while(i < game.size()) {\n        \
  \    while(j < guesses.size()) {\n                if (game.get(i) == guesses.get(j))\
  \ {\n                    compared++;\n                }\n                j++;\n\
  \            }\n            out.add(compared);\n            compared = 0;\n    \
  \        i++;\n            j = 0;\n        }\n        // We have one more thing\
  \ to do, which is to figure out what to return.\n        // If we have no matches,\
  \ we can just return the difference between our guess and the score.\n        if\
  \ (compared == 0) {\n            int difference = 0;\n            for (int k = 0;\
  \ k < game; k++) {\n                difference += Math.abs(guess.get(k) - scores.get(k));\n\
  \            }\n            out.add(difference);\n        } else {\n           \
  \ return out;\n        }"
- "        ArrayList<Integer> result = new ArrayList<>();\n        if (game.size()\
  \ != guess.size()) {\n            throw new IllegalArgumentException(\"Arrays must\
  \ have same size\");\n        }\n        Arrays.sort(game);\n        Arrays.sort(guess);\n\
  \        int current = 0;\n        while (current < game.size()) {\n           \
  \ if (game.get(current) == guess.get(current)) {\n                result.add(0);\n\
  \                current++;\n            } else {\n                result.add(Math.abs(guess.get(current)\
  \ - game.get(current)));\n                current++;\n            }\n        }\n\
  \        return result;"
- "        ArrayList<Integer> diff = new ArrayList<Integer>();\n        int sum =\
  \ 0;\n        for (int i = 0; i < game.size(); i++) {\n            sum = 0;\n  \
  \          for (int j = 0; j < guess.size(); j++) {\n                if (game.get(i)\
  \ == guess.get(j)) {\n                    sum++;\n                }\n          \
  \  }\n            if (sum == guess) {\n                diff.put(i);\n          \
  \  }\n        }\n        return diff;"
- "        // Your code here\n        int size = game.size();\n        ArrayList<Integer>\
  \ result = new ArrayList<Integer>(size);\n        for(int i = 0; i < size; i++){\n\
  \            result.add( Math.abs(guess.get(i) - game.get(i)) );\n        }\n  \
  \      return result;"
- "        ArrayList<Integer> diff = new ArrayList<>();\n\n        int i = 0;\n  \
  \      while (i < guess.size()) {\n            int j = 0;\n            while (j\
  \ < game.size() && game.get(j) == guess.get(i)) {\n                j++;\n      \
  \      }\n            diff.put(i,Math.abs(guess.get(i)-game.get(j)));\n        \
  \    i++;\n        }\n        return diff;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n\n        for (int\
  \ i = 0; i < game.size(); i++) {\n            if (guess.get(i) == game.get(i)) {\n\
  \                result.add(i);\n            }\n        }\n        return result;"
- "        ArrayList<Integer> solution = new ArrayList<Integer>();\n        // The\
  \ for loop here is the same as yours for loop, but it is more obvious that we are\
  \ looping\n        // over all the elements of game and guess\n        for(int i\
  \ = 0; i < game.size(); i++){\n            solution.add((Math.abs(game.get(i) -\
  \ guess.get(i))));\n        }\n        return solution;"
- "        ArrayList<Integer> result = new ArrayList<Integer>();\n        int diff\
  \ = game.get(0) - guess.get(0);\n        result.add(diff);\n        for (int i =\
  \ 1; i < game.size(); i++) {\n            diff = diff - game.get(i) - guess.get(i);\n\
  \            if (diff != 0) {\n                result.add(Math.abs(diff));\n   \
  \         }\n        }\n        return result;"
- "        ArrayList<Integer> scores = new ArrayList<Integer>();\n        ArrayList<Integer>\
  \ diffs = new ArrayList<Integer>();\n        Arrays.stream(game).forEach(i -> {\n\
  \            if (guess.contains(i)) {\n                scores.add(i);\n        \
  \    }\n        });\n        Arrays.stream(guess).forEach(i -> {\n            diffs.add(i-scores.get(0));\n\
  \        });\n        return diffs;"
- "        ArrayList<Integer> correct = new ArrayList<>();\n        for (int i = 0;\
  \ i < game.size(); i++) {\n            if (game.get(i) == guess.get(i)) {\n    \
  \            correct.set(i, 0);\n            } else {\n                int gameScore\
  \ = game.get(i);\n                int guess = guess.get(i);\n                int\
  \ diff = guess - gameScore;\n                if (diff > 0) {\n                 \
  \   correct.set(i, diff);\n                } else {\n                    correct.set(i,\
  \ Math.abs(diff));\n                }\n            }\n        }\n        return\
  \ correct;"
- "        List<Integer> ret = new ArrayList<Integer>();\n        if(game.size() !=\
  \ guess.size())\n            return ret;\n        for(int i = 0; i < game.size();\
  \ i++) {\n            int temp = game.size() - 1;\n            if(game.get(i) ==\
  \ guess.get(i)) {\n                ret.add(0);\n            } else {\n         \
  \       while(temp >= 0) {\n                    if(game.get(temp) == guess.get(temp))\n\
  \                        ret.add(0);\n                    else\n               \
  \         break;\n                    temp--;\n                }\n             \
  \   ret.add(Math.abs(game.get(i) - guess.get(i)));\n            }\n        }\n \
  \       return ret;"
- "        ArrayList<Integer> list = new ArrayList<>();\n        int i = 0;\n    \
  \    int gameLen = game.size();\n        int guessLen = guess.size();\n        while\
  \ (i < guessLen) {\n            int j = 0;\n            int guessVal = guess.get(i);\n\
  \            while (j < gameLen) {\n                if (game.get(j) == guessVal)\
  \ {\n                    list.add(game.get(j));\n                    game.add(gameLen,\
  \ 0);\n                    guessLen--;\n                    gameLen--;\n       \
  \             j++;\n                }\n                j++;\n            }\n   \
  \         i++;\n        }\n        if (guessLen == 0) {\n            list.addAll(game);\n\
  \        }\n        return list;"
- "        int size = game.size();\n        ArrayList<Integer> result = new ArrayList<Integer>(size);\n\
  \        for (int i = 0; i < size; i++) {\n            int difference = guess.get(i)\
  \ - game.get(i);\n            if (difference > 0 || difference < 0)\n          \
  \      difference = Math.abs(difference);\n            result.add(difference);\n\
  \        }\n        return result;"
- "        ArrayList<Integer> result;\n        int lenghtGuess = guess.size();\n \
  \       int lenghtGame = game.size();\n        result = new ArrayList<>();\n   \
  \     int score = 0;\n        for (int i = 0; i < lenghtGame; i++) {\n         \
  \   if (game.get(i) == guess.get(i)) {\n                score += 1;\n          \
  \  }\n        }\n        for (int i = 0; i < lenghtGuess; i++) {\n            if\
  \ (guess.get(i) == game.get(i)) {\n                score -= 1;\n            }\n\
  \        }\n        result.add(score);\n        return result;"
- "        ArrayList<Integer> guess = new ArrayList<>();\n        for(int i = 0; i\
  \ < game.size(); i++) {\n            if(game.get(i) == guess.get(i)) {\n       \
  \         guess.set(i, 0);\n            } else if(game.get(i) < guess.get(i)) {\n\
  \                guess.set(i, game.get(i)-guess.get(i));\n            } else {\n\
  \                guess.set(i, Math.abs(game.get(i)-guess.get(i)));\n           \
  \ }\n        }\n        return guess;"
- "        ArrayList<Integer> diff = new ArrayList<Integer>();\n        int diffIndex\
  \ = 0;\n        int diffVal = 0;\n        for(int i = 0; i < game.size(); i++){\n\
  \            int gameVal = game.get(i);\n            int guessVal = guess.get(i);\n\
  \            if (gameVal < guessVal) {\n                diffVal = gameVal - guessVal;\n\
  \                game.set(i, gameVal);\n                guess.set(i, guessVal);\n\
  \                diff.add(diffVal);\n                diffIndex++;\n            }\n\
  \            if (gameVal > guessVal) {\n                diffVal = guessVal - gameVal;\n\
  \                game.set(i, gameVal);\n                guess.set(i, guessVal);\n\
  \                diff.add(diffVal);\n                diffIndex++;\n            }\n\
  \        }\n        if (game.size() != guess.size()) {\n            diff.add(Math.abs(diff.get(0)-diff.get(game.size()-1)));\n\
  \        }\n        return diff;"
- "        ArrayList<Integer> answer = new ArrayList<>();\n        for (int i = 0;\
  \ i < game.size(); i++) {\n            int currentScore = game.get(i);\n       \
  \     int currentGuess = guess.get(i);\n            answer.add(Math.abs(currentScore\
  \ - currentGuess));\n        }\n        return answer;"
- "        ArrayList<Integer> score = new ArrayList<>(game.size());\n        ArrayList<Integer>\
  \ difference = new ArrayList<>(game.size());\n        ArrayList<Integer> distance\
  \ = new ArrayList<>(game.size());\n        for (Integer i : game) {\n          \
  \  score.add(i);\n        }\n        for (Integer i : guess) {\n            difference.add(i);\n\
  \        }\n        for (int i = 0; i < game.size(); i++) {\n            Integer\
  \ score = score.get(i);\n            Integer difference = difference.get(i);\n \
  \           Integer distance = distance.get(i);\n            score.set(i, Math.abs(score\
  \ - difference));\n            distance.set(i, Math.abs(score - distance));\n  \
  \      }\n        return distance;"
- "        ArrayList<Integer> result = new ArrayList<Integer>(game);\n        for\
  \ (int i = 0; i < game.size(); i++) {\n            int diff = abs(game.get(i) -\
  \ guess.get(i));\n            if (diff > result.size()) {\n                result.add(diff);\n\
  \            } else if (diff != result.size()) {\n                for (int j = i;\
  \ j < game.size(); j++) {\n                    int newDiff = abs(game.get(j) - guess.get(j));\n\
  \                    if (newDiff < diff || newDiff == diff && game.get(j) != guess.get(j))\
  \ {\n                        diff = newDiff;\n                    }\n          \
  \      }\n                result.add(diff);\n            }\n        }\n        return\
  \ result;"
- "        ArrayList<Integer> result = new ArrayList<>();\n        game.forEach((i,j)\
  \ -> {\n            int difference = Math.abs(guess-i);\n            if (difference\
  \ == 0){\n                result.add(0);\n            }else{\n                result.add(difference);\n\
  \            }\n        });\n        return result;"
- "        ArrayList<Integer> answer = new ArrayList<Integer>();\n        int sum\
  \ = 0;\n        int a = 0;\n        int b = 0;\n        for(int i = 0; i < game.size();\
  \ i++) {\n            answer.add(game.get(i) - guess.get(i));\n            sum +=\
  \ game.get(i);\n            sum += guess.get(i);\n        }\n        int diff =\
  \ sum - game.get(a) + guess.get(a) - guess.get(b);\n        if (diff < 0) {\n  \
  \          diff = -diff;\n        }\n        answer.add(0, diff);\n        return\
  \ answer;"
- "        // Sort the two lists\n        Collections.sort(game);\n        Collections.sort(guess);\n\
  \        int diff = 0;\n        // For each of the guesses, subtract the correct\
  \ answer to find their difference\n        for(Integer i : guess) {\n          \
  \  diff = i - game.get(game.indexOf(i));\n        }\n        // Return the results\n\
  \        return new ArrayList<>(Arrays.asList(game)).subList(0,game.size()).toArray();"
- "        ArrayList<Integer> out = new ArrayList<>();\n        int counter = 0, correct\
  \ = 0, incorrect = 0, total = 0;\n        for(int i = 0; i < guess.size(); i++)\
  \ {\n            if(game.get(i) == guess.get(i)) counter++;\n            else incorrect++;\n\
  \        }\n        // This is what we're going to do:\n        // The first guess\
  \ is correct, let's put 0 on it's spot in the output array,\n        // we know\
  \ that it's the wrong answer.\n        // Then we put correct guesses into a while\
  \ loop, each one should only loop \n        // once because we don't know the correct\
  \ answer. The loop will run as long \n        // as the guesses are correct, and\
  \ only then will the program know that \n        // the right answer was reached.\n\
  \        // If there are no more guesses, we know that they got the right answer.\n\
  \        // The while loop will run until they get to the correct answer.\n    \
  \    // This is how we know that they are at the correct answer.\n        if(counter\
  \ == 1) out.add(0, 0);\n        else {\n            while(correct < incorrect) {\n\
  \                total = 0;\n                for(int i = 0; i < guess.size(); i++)\
  \ {\n                    total += Math.abs(game.get(i) - guess.get(i));\n      \
  \          }\n                out.add(total);\n                correct++;\n    \
  \        }\n        }\n        return out;"
- "        int score = 0;\n        int guessIndex = 0;\n        int trueIndex = -1;\n\
  \n        for(Integer score : game) {\n            if(guess != null) {\n       \
  \         for(Integer guess : guess) {\n                    if(guess == score) {\n\
  \                        trueIndex = guessIndex;\n                        break;\n\
  \                    }\n                    if(guessIndex >= guess.size()) {\n \
  \                       break;\n                    }\n                    if(guess\
  \ != score && Math.abs(guess - score) < Math.abs(guess - game.get(guessIndex)))\
  \ {\n                        trueIndex = guessIndex;\n                    }\n  \
  \                  ++guessIndex;\n                }\n            }\n           \
  \ score = Math.abs(score - game.get(trueIndex));\n            game.add(score);\n\
  \        }\n\n        return new ArrayList<>(game);"
- "        ArrayList<Integer> results = new ArrayList<>();\n        for (int i = 0;\
  \ i < game.size(); i++) {\n            int scoreDifference = Math.abs(guess.get(i)\
  \ - game.get(i));\n            results.add(scoreDifference);\n        }\n      \
  \  return results;"
- "        ArrayList<Integer> correct = new ArrayList<>();\n        int maxLength\
  \ = 0;\n        for (int i = 0; i < game.size(); i++) {\n            if (guess.get(i)\
  \ == game.get(i)) {\n                correct.get(i).add(0);\n            } else\
  \ {\n                correct.get(i).add(Math.abs(guess.get(i) - game.get(i)));\n\
  \            }\n        }\n        for (int i = 0; i < guess.size(); i++) {\n  \
  \          maxLength = Math.max(maxLength, correct.get(i).size());\n        }\n\
  \        ArrayList<Integer> out = new ArrayList<>(maxLength);\n        for (int\
  \ i = 0; i < guess.size(); i++) {\n            for (int j = 0; j < correct.get(i).size();\
  \ j++) {\n                out.set(i, out.get(j) + correct.get(i).get(j));\n    \
  \        }\n        }\n        return out;"
- "        ArrayList<Integer> difference = new ArrayList<>();\n        double sum\
  \ = 0, differenceTotal = 0;\n        Arrays.sort(game);\n        Arrays.sort(guess);\n\
  \        for (int i = 0; i < game.size(); i++) {\n            sum = (double) game.get(i)\
  \ + (double) guess.get(i);\n            difference.add(Math.max(Math.abs(sum - game.get(i)),\
  \ Math.abs(sum - guess.get(i))));\n            differenceTotal += difference.get(i);\n\
  \        }\n        difference.forEach(i -> System.out.println(difference.get(i)));\n\
  \        System.out.println(differenceTotal);\n        return difference;"
- "        ArrayList<Integer> returns = new ArrayList<>(game.size());\n        for\
  \ (Integer g : guess) {\n            int i = 0;\n            for (Integer g2 : game)\
  \ {\n                if (g == g2) {\n                    i++;\n                }\n\
  \            }\n            if (i == game.size()) {\n                returns.add(0);\n\
  \            } else {\n                returns.add((int) Math.abs(g - game.get(i)));\n\
  \            }\n        }\n        return returns;"
- "        // TODO Auto-generated method stub\n        ArrayList<Integer> result =\
  \ new ArrayList<Integer>();\n        int i = game.size() - 1;\n        int j = guess.size()\
  \ - 1;\n        while (i>0 && j>0) {\n            if (game.get(i) == guess.get(j))\
  \ {\n                result.add(0);\n                i--;\n                j--;\n\
  \            } else if (game.get(i) > guess.get(j)) {\n                i--;\n  \
  \          } else {\n                j--;\n            }\n        }\n        return\
  \ result;"
- "        ArrayList<Integer> diff = new ArrayList<Integer>();\n        if (game.size()\
  \ != guess.size()) {\n            throw new AssertionError(\"Arrays differ in size\
  \ \" + game.size() + \" and \" + guess.size());\n        }\n        int count =\
  \ 0;\n        for (int i = 0; i < game.size(); i++) {\n            if (game.get(i)\
  \ == guess.get(i)) {\n                count++;\n            }\n        }\n     \
  \   diff.add(count * -1);\n        return diff;"
language: java
name: HumanEval_152_compare
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // I think we all remember that feeling when the result of\
  \ some long-awaited\n    // event is finally known. The feelings and thoughts you\
  \ have at that moment are\n    // definitely worth noting down and comparing.\n\
  \    // Your task is to determine if a person correctly guessed the results of a\
  \ number of matches.\n    // You are given two arrays of scores and guesses of equal\
  \ length, where each index shows a match. \n    // Return an array of the same length\
  \ denoting how far off each guess was. If they have guessed correctly,\n    // the\
  \ value is 0, and if not, the value is the absolute difference between the guess\
  \ and the score.\n    // example:\n    // compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\
  \ -> [0,0,0,0,3,3]\n    // compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n\
  \    public static ArrayList<Integer> compare(ArrayList<Integer> game, ArrayList<Integer>\
  \ guess) {\n"
stop_tokens:
- "    }\n    //"
- "    }\n    p"
- '    }

  }'
- "\n    }\n"
tests: "}\n    public static void main(String[] args) {\n    assert(compare((new ArrayList<Integer>(Arrays.asList((int)1,\
  \ (int)2, (int)3, (int)4, (int)5, (int)1))), (new ArrayList<Integer>(Arrays.asList((int)1,\
  \ (int)2, (int)3, (int)4, (int)2, (int)-2)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
  \ (int)0, (int)0, (int)0, (int)3, (int)3)))));\n    assert(compare((new ArrayList<Integer>(Arrays.asList((int)0,\
  \ (int)0, (int)0, (int)0, (int)0, (int)0))), (new ArrayList<Integer>(Arrays.asList((int)0,\
  \ (int)0, (int)0, (int)0, (int)0, (int)0)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
  \ (int)0, (int)0, (int)0, (int)0, (int)0)))));\n    assert(compare((new ArrayList<Integer>(Arrays.asList((int)1,\
  \ (int)2, (int)3))), (new ArrayList<Integer>(Arrays.asList((int)-1, (int)-2, (int)-3)))).equals((new\
  \ ArrayList<Integer>(Arrays.asList((int)2, (int)4, (int)6)))));\n    assert(compare((new\
  \ ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3, (int)5))), (new ArrayList<Integer>(Arrays.asList((int)-1,\
  \ (int)2, (int)3, (int)4)))).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
  \ (int)0, (int)0, (int)1)))));\n    }\n\n}\n"
