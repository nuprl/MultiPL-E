completions:
- "        int apples = 0;\n        int oranges = 0;\n        int mangos = 0;\n  \
  \      String[] fruits = s.split(\"and\");\n        for (int i = 0; i < fruits.length;\
  \ i++) {\n            String fruit = fruits[i].trim();\n            if (fruit.startsWith(\"\
  apple\")) {\n                apples++;\n            }\n            else if (fruit.startsWith(\"\
  orange\")) {\n                oranges++;\n            }\n            else {\n  \
  \              mangos++;\n            }\n        }\n        int total = oranges\
  \ + apples + mangos;\n        return total-(n-apples) - n-oranges;"
- "        int apples=0, oranges=0, mangos=0;\n        for(String fruit : s.split(\"\
  \ \")){\n            if(fruit.equals(\"apples\")) apples++;\n            else if(fruit.equals(\"\
  oranges\")) oranges++;\n            if(fruit.equals(\"mango\")) mangos++;\n    \
  \    }\n        if(apples == 0 && oranges == 0) return n-1;\n        if(apples ==\
  \ 0 && oranges > 0) return n-oranges;\n        if(apples > 0 && oranges == 0) return\
  \ n-apples;\n        if(apples > 0 && oranges > 0) return n-oranges - apples;\n\
  \        return 0;"
- "        int orangeCount = 0;\n        int mangoCount = 0;\n        int appleCount\
  \ = 0;\n        Scanner s = new Scanner(s);\n        while (s.hasNext()) {\n   \
  \         switch (s.next()) {\n                case \"apples\":\n              \
  \      appleCount = s.nextInt();\n                    break;\n                case\
  \ \"oranges\":\n                    orangeCount = s.nextInt();\n               \
  \     break;\n                case \"mango\":\n                    mangoCount =\
  \ s.nextInt();\n                    break;\n                default:\n         \
  \           break;\n            }\n        }\n        int orangesTotal = orangeCount\
  \ + mangoCount;\n        int mangoTotal = orangeCount + appleCount + mangoCount;\n\
  \        return n - orangesTotal - mangoTotal;"
- "        HashMap<Integer, Integer> fruitDistribution = new HashMap<>();\n      \
  \  String[] tokens = s.split(\" \");\n        Arrays.sort(tokens);\n        for\
  \ (int i = 0; i < tokens.length; i++) {\n            String token = tokens[i];\n\
  \            if (token.equals(\"apple\") || token.equals(\"orange\")) {\n      \
  \          int count = fruitDistribution.containsKey(token) ? fruitDistribution.get(token)\
  \ : 0;\n                fruitDistribution.put(token, count + 1);\n            }\
  \ else if (token.equals(\"mango\")) {\n                int count = fruitDistribution.containsKey(token)\
  \ ? fruitDistribution.get(token) : 0;\n                fruitDistribution.put(token,\
  \ count + 1);\n            } else {\n                int count = fruitDistribution.containsKey(token)\
  \ ? fruitDistribution.get(token) : 0;\n                fruitDistribution.put(token,\
  \ count + 1);\n            }\n        }\n        int mango = 0;\n        for (Integer\
  \ i : fruitDistribution.values()) {\n            if (i.intValue() > n) {\n     \
  \           break;\n            } else {\n                mango += i;\n        \
  \    }\n        }\n        return mango;"
- "        if (s.contains(\"apples\")) {\n            return n - s.replace(\"apples\
  \ \",\"\").replace(\"apples \",\"\").length();\n        }\n        if (s.contains(\"\
  oranges\")) {\n            return n - s.replace(\"oranges \",\"\").replace(\"oranges\
  \ \",\"\").length();\n        }\n        if (s.contains(\"mango\")) {\n        \
  \    return n - s.replace(\"mango \",\"\").replace(\"mango \",\"\").length();\n\
  \        }\n        return -1;"
- "        return s.chars().filter(c -> (c == 'a' || c == 'o' || c == 'm'))\n    \
  \            .count();"
- "        // TODO code here\n        String[] strs = s.split(\"and\");\n        int\
  \ numberofapples = Integer.parseInt(strs[0]);\n        int numberoforanges = Integer.parseInt(strs[1]);\n\
  \        int numberoffruit = numberofapples + numberoforanges;\n        int numberofmangos\
  \ = numberoffruit - n;\n        return numberofmangos;"
- "        int apples = s.trim().replaceAll(\"(\\\\d+)\\\\s+apples(\\\\W+\\\\d+)\"\
  , \"$2\")\n                        .equals(\"0\")? 0: Integer.parseInt(s.replaceAll(\"\
  (\\\\d+)\\\\s+apples(\\\\W+\\\\d+)\", \"$2\"));\n        int oranges = s.trim().replaceAll(\"\
  (\\\\d+)\\\\s+oranges(\\\\W+\\\\d+)\", \"$2\")\n                        .equals(\"\
  0\")? 0: Integer.parseInt(s.replaceAll(\"(\\\\d+)\\\\s+oranges(\\\\W+\\\\d+)\",\
  \ \"$2\"));\n        return (n-apples- oranges);"
- "        int count = 0;\n        if (s.contains(\"apples\")) {\n            count\
  \ = s.split(\"apples\")[1].trim().length();\n        }\n        if (s.contains(\"\
  oranges\")) {\n            count += s.split(\"oranges\")[1].trim().length();\n \
  \       }\n        return count - n;"
- "        int[] nums = new int[2];\n        for (int i = 0; i < s.length(); i++)\
  \ {\n            char c = s.charAt(i);\n            switch (c) {\n             \
  \   case 'a':\n                    nums[0]++;\n                    break;\n    \
  \            case 'o':\n                    nums[1]++;\n                    break;\n\
  \                case 'm':\n                    nums[1]++;\n                   \
  \ break;\n                default:\n                    break;\n            }\n\
  \        }\n        return Math.abs(nums[0] - nums[1]) - n;"
- "        //your code\n        String[] splitString = s.split(\"and\");\n       \
  \ int numberOfApples = Integer.parseInt(splitString[0]);\n        int numberOfOranges\
  \ = Integer.parseInt(splitString[1]);\n        int numberOfMangoes = n - numberOfApples\
  \ - numberOfOranges;\n        return numberOfMangoes;"
- "        int res = 0;\n        // for iterating over the string from right to left\
  \ and finding all the integers\n        String[] arr = s.split(\" \");\n       \
  \ for (String str : arr) {\n            // the number after the string is converted\
  \ to an int\n            int num = Integer.parseInt(str);\n            // if the\
  \ number is greater than the previous number then add to res \n            // otherwise\
  \ it will stay the same\n            res = res + num;\n            if (res > n)\
  \ break;\n        }\n        // return the sum of the integers converted to ints\n\
  \        return res;"
- "        int total = 0;\n        String[] splitted = s.split(\" \");\n        for(String\
  \ str : splitted) {\n            total += Integer.valueOf(str);\n        }\n   \
  \     return total - n; "
- "        int total = 0, count = 0;\n        for (String piece : s.split(\" \"))\
  \ {\n            if (piece.equals(\"apples\")) {\n                total+=n;\n  \
  \          }\n            if (piece.equals(\"oranges\")) {\n                total-=n;\n\
  \            }\n        }\n        for (String piece : s.split(\" \")) {\n     \
  \       if (piece.equals(\"mango\")) {\n                count++;\n            }\n\
  \        }\n        return total - count + n;"
- "        int apples = Integer.parseInt(s.substring(0, s.indexOf(\" apples\") - 1).trim());\n\
  \        int oranges = Integer.parseInt(s.substring(s.indexOf(\" apples\") - 1,\
  \ s.indexOf(\" oranges\")).trim());\n        int mangos = Integer.parseInt(s.substring(s.indexOf(\"\
  \ oranges\") + 1, s.length()).trim());\n        int sum = apples + oranges + mangos;\n\
  \        return sum - (apples + oranges + mangos) - n;"
- "        List<Integer> list = Arrays.asList(s.split(\" \"));\n        Arrays.sort(list);\n\
  \        return list.stream().filter(i -> i%n==0).findAny().orElse(-1);"
- "        int sum = 0, i;\n        for (i = 0; i < s.length() - 1; i++) {\n     \
  \       sum += Integer.parseInt(s.substring(i + 1, i + 3));\n        }\n       \
  \ if (sum == n) {\n            int count = 1;\n            try {\n             \
  \   Field[] fields = new Field[] {int.class};\n                Class classOfFirstField\
  \ = fields[0].getType();\n                for (Field field : fields) {\n       \
  \             Object obj = field.get(null);\n                    if (obj instanceof\
  \ Integer) {\n                        Integer i = (Integer) obj;\n             \
  \           count += i;\n                    }\n                }\n            }\
  \ catch (Exception e) {\n                throw new RuntimeException(e);\n      \
  \      }\n            return count;\n        } else {\n            return -1;\n\
  \        }"
- "        int a = 0, b = 0, c = 0, d = 0, e = 0, f = 0, g = 0, h = 0, i = 0, j =\
  \ 0, k = 0, l = 0;\n        int[] apples = new int[n];\n        int[] oranges =\
  \ new int[n];\n        int[] mangos = new int[n];\n        s = s.replace(\"apples\"\
  ,\"0\").replace(\"oranges\",\"1\").replace(\"mangos\",\"2\");\n        s = s.replace(\"\
  apples\",\"0\").replace(\"oranges\",\"1\").replace(\"mangos\",\"2\");\n        s\
  \ = s.replace(\"apples\",\"0\").replace(\"oranges\",\"1\").replace(\"mangos\",\"\
  2\");\n        s = s.replace(\"apples\",\"0\").replace(\"oranges\",\"1\").replace(\"\
  mangos\",\"2\");\n        s = s.replace(\"apples\",\"0\").replace(\"oranges\",\"\
  1\").replace(\"mangos\",\"2\");\n        s = s.replace(\"apples\",\"0\").replace(\"\
  oranges\",\"1\").replace(\"mangos\",\"2\");\n        s = s.replace(\"apples\",\"\
  0\").replace(\"oranges\",\"1\").replace(\"mangos\",\"2\");\n        s = s.replace(\"\
  apples\",\"0\").replace(\"oranges\",\"1\").replace(\"mangos\",\"2\");\n        s\
  \ = s.replace(\"apples\",\"0\").replace(\"oranges\",\"1\").replace(\"mangos\",\"\
  2\");\n        s = s.replace(\"apples\",\"0\").replace(\"oranges\",\"1\").replace(\"\
  mangos\",\"2\");\n        s = s.replace(\"apples\",\"0\").replace(\"oranges\",\"\
  1\").replace(\"mangos\",\"2\");\n        s = s.replace(\"apples\",\"0\").replace(\"\
  oranges\",\"1\").replace(\"mangos\",\"2\");\n        s = s.replace(\"apples\",\"\
  0\").replace(\"oranges\",\"1\").replace(\"mangos\",\"2\");\n        s = s.replace(\"\
  apples\",\"0\").replace(\"oranges\",\"1\").replace(\"mangos\",\"2\");\n        s\
  \ = s.replace(\"apples\",\"0\").replace(\"oranges\",\"1\").replace(\"mangos\",\"\
  2\");\n        s = s.replace(\"apples\",\"0\").replace(\"oranges\",\"1\").replace(\"\
  mangos\",\"2\");\n        s = s.replace(\"apples\",\"0\").replace(\"oranges\",\"\
  1\").replace(\"mangos\",\"2\");\n        s = s.replace(\"apples\",\"0\").replace(\"\
  oranges\",\"1\").replace(\"mangos\",\"2\");\n        s = s.replace(\"apples\",\"\
  0\").replace(\"oranges\",\"1\").replace(\"mangos\",\"2\");\n        s = s.replace(\"\
  apples\",\"0\").replace(\"oranges\",\"1\").replace(\"mangos\",\"2\");\n        s\
  \ = s.replace(\"apples\",\"0\").replace(\"oranges\",\"1\").replace(\"mangos\",\"\
  2\");\n        s = s.replace(\"apples\",\"0\").replace(\"oranges\",\"1\").replace(\"\
  mangos\",\"2\");\n        s = s.replace(\"apples\",\"0\").replace(\"oranges\",\"\
  1\").replace(\"mangos\",\"2\");\n        s = s.replace(\"apples\",\"0\").replace(\"\
  oranges\",\"1\").replace(\"mangos\",\"2\");\n        s = s.replace(\""
- "        int mango = 0;\n        String str1 = s.replaceAll(\"\\\\s+\", \"\");\n\
  \        String[] str2 = str1.split(\" \");\n        \n        Collections.sort(str2);\n\
  \        for (int i = 0; i < str2.length - 1; i++) {\n            if (str2[i].equals(\"\
  oranges\") && str2[i + 1].equals(\"mango\")) {\n                mango = str2[i+1].substring(4);\n\
  \            }\n        }\n        int sum = 0;\n        \n        // we first sort\
  \ on the number of apples\n        int apples1 = Integer.parseInt(str2[0]);\n  \
  \      for (int i = 0; i < str2.length - 1; i++) {\n            // and then in order\
  \ the number of oranges\n            if (str2[i].equals(\"apples\") && str2[i+1].equals(\"\
  oranges\")) {\n                sum += apples1 - Integer.parseInt(str2[i+1]);\n \
  \           }\n        }\n        \n        int apples2 = Integer.parseInt(str2[1]);\n\
  \        for (int i = 0; i < str2.length - 1; i++) {\n            // and then in\
  \ order the number of mango\n            if (str2[i].equals(\"apples\") && str2[i+1].equals(\"\
  mango\")) {\n                sum += apples2 - Integer.parseInt(str2[i+1]);\n   \
  \         }\n        }\n        return sum - mango;"
- "        String[] arr = s.split(\" \");\n        int[] arr = new int[arr.length];\n\
  \        int count = 0;\n        List<Integer> lst = new ArrayList<>();\n      \
  \  for (int i = 0; i < arr.length; i++) {\n            int temp = Integer.parseInt(arr[i]);\n\
  \            arr[count++] = temp;\n            lst.add(temp);\n        }\n     \
  \   int sum = 0;\n        for (int i = 0; i < n; i++) {\n            int temp =\
  \ lst.get(i);\n            if (temp > 0) {\n                sum += temp;\n     \
  \       }\n        }\n        return sum - arr[n];"
- "        Scanner sc = new Scanner(s);\n        int oranges = sc.nextInt();\n   \
  \     int apples = sc.nextInt();\n        int fruitsNumber = apples + oranges;\n\
  \        int numberOfMango = fruitsNumber - oranges - apples;\n        return numberOfMango;"
- "        int sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n        \
  \    sum += Integer.parseInt(s.substring(i, i + 1));\n        }\n        sum = sum\
  \ % n;\n        return sum;"
- "        String[] tokens = s.split(\" \");\n        int apples = Integer.parseInt(tokens[0]);\n\
  \        int oranges = Integer.parseInt(tokens[1]);\n        int mangos = (n-apples-oranges);\n\
  \        int mango_fruits = Integer.parseInt(tokens[2]);\n        \n        return\
  \ mangos;"
- "        String[] strs = s.split(\" \");\n        int result = 0;\n        Set<Integer>\
  \ numbers = new HashSet<Integer>();\n        for (String s : strs) {\n         \
  \   if (numbers.contains(Integer.parseInt(s))) {\n                result += Integer.parseInt(s);\n\
  \            } else {\n                numbers.add(Integer.parseInt(s));\n     \
  \       }\n        }\n        return result - n;"
- "        int apples = 0, oranges = 0, mangos = 0;\n        StringTokenizer tokenizer\
  \ = new StringTokenizer(s);\n        while (tokenizer.hasMoreTokens()) {\n     \
  \       switch (tokenizer.nextToken()) {\n                case \"apples\": apples++;\n\
  \                case \"oranges\": oranges++;\n                case \"mango\": mangos\
  \ = n - oranges - apples;\n                break;\n            }\n        }\n  \
  \      return mangos;"
- "        // Complete the code here\n        String[] fr = s.split(\" \");\n    \
  \    String[] br = s.split(\" \");\n        int brCount = br.length - 1;\n     \
  \   int frCount = fr.length;\n        int sum = 0;\n        HashSet<String> set\
  \ = new HashSet<>();\n        for(int i=0; i<frCount; i++) {\n            int index\
  \ = Integer.parseInt(fr[i]);\n            sum += index - 1;\n            set.add(Integer.toString((i\
  \ + 1) + \" apples\"));\n            set.add(Integer.toString((i + 1) + \" oranges\"\
  ));\n        }\n        for(int i=0;i<brCount; i++) {\n            int index = Integer.parseInt(br[i]);\n\
  \            sum += index - 1;\n        }\n        System.out.println(sum);\n  \
  \      return set.stream().filter(s -> s.contains(\"oranges\")).count();"
- "        Stack<Integer> stack = new Stack<>();\n        int mango = 0;\n       \
  \ int count = 0;\n        for (String fruit : s.split(\" \")) {\n            int\
  \ count = Integer.valueOf(fruit);\n            while (!stack.empty() && stack.peek()\
  \ >= count) {\n                mango = mango + (stack.peek() - count);\n       \
  \         stack.pop();\n            }\n            stack.push(count);\n        }\n\
  \        mango = mango + n - stack.peek();\n        while (!stack.empty()) {\n \
  \           mango = mango + (stack.peek() - 1);\n            stack.pop();\n    \
  \    }\n        return mango;"
- "        String[] fruits =\n            s.split(\" \");\n        String[] fruits_sorted\
  \ = Arrays.copyOf(fruits, fruits.length);\n        Arrays.sort(fruits_sorted);\n\
  \        int sum = fruits_sorted.length;\n        return sum-fruits_sorted.length-n;"
- "        int count = 0;\n        String[] sArray = s.split(\"and\");\n        Arrays.sort(sArray);\n\
  \n        for (String fruit : sArray) {\n            int fruit_int = Integer.valueOf(fruit.trim());\n\
  \            count += fruit_int;\n        }\n\n        return count - n;"
- "        // write your code here\n        List<Integer> apples = new ArrayList<>();\n\
  \        List<Integer> oranges = new ArrayList<>();\n        List<Integer> mangos\
  \ = new ArrayList<>();\n        if (n <= 0) {\n            throw new IllegalArgumentException(\"\
  the amount of apples or oranges cannot be less than 0\");\n        }\n        if\
  \ (s.contains(\"apples\")) {\n            apples.add(Integer.parseInt(s.substring(s.indexOf(\"\
  apples\") + \"apples\".length())));\n        } else if (s.contains(\"oranges\"))\
  \ {\n            oranges.add(Integer.parseInt(s.substring(s.indexOf(\"oranges\"\
  ) + \"oranges\".length())));\n        } else {\n            throw new IllegalArgumentException(\"\
  the fruits distribution string \" + s + \" does not contain apples or oranges\"\
  );\n        }\n        for (int i = 0; i < apples.size(); i++) {\n            for\
  \ (int j = 0; j < oranges.size(); j++) {\n                if (apples.get(i) + oranges.get(j)\
  \ == n) {\n                    mangos.add(apples.get(i) + oranges.get(j));\n   \
  \             }\n            }\n        }\n        long totalApples = apples.stream().mapToLong(Integer::longValue).sum();\n\
  \        long totalOranges = oranges.stream().mapToLong(Integer::longValue).sum();\n\
  \        return mangos.stream().mapToLong(Integer::longValue).sum();"
- '        return s.replaceAll("[^0-9]+", " ").split(" ").stream().map(s -> Integer.valueOf(s)).filter(i->i>0).reduce((a,b)->a+b).orElse(0);'
- "        List<Integer> apples = new ArrayList<>();\n        List<Integer> oranges\
  \ = new ArrayList<>();\n        List<Integer> mango = new ArrayList<>();\n     \
  \   List<Integer> orangesAndApples = Stream.of(s.split(\" \"))\n               \
  \ .map(Integer::valueOf)\n                .collect(Collectors.toList());\n     \
  \   int sumApples = orangesAndApples.get(orangesAndApples.size() - 1);\n       \
  \ int sumOranges = orangesAndApples.get(orangesAndApples.size() - 2);\n        int\
  \ sumMango = orangesAndApples.get(orangesAndApples.size() - 3);\n        int count\
  \ = 0;\n        for(int i = 0; i < orangesAndApples.size() - 1; i++) {\n       \
  \     int applesAndOranges = orangesAndApples.get(i + 1);\n            if(applesAndOranges\
  \ == sumApples) {\n                apples.add(applesAndOranges);\n             \
  \   oranges.add(-applesAndOranges);\n            }\n            if(applesAndOranges\
  \ == sumOranges) {\n                oranges.add(-applesAndOranges);\n          \
  \  }\n            if(applesAndOranges == sumMango) {\n                mango.add(-applesAndOranges);\n\
  \            }\n        }\n        return mango.size() + apples.size() + oranges.size();"
- "        Scanner in = new Scanner(s);\n        String apples = in.nextLine();\n\
  \        String oranges = in.nextLine();\n        int apples_count = Integer.parseInt(apples);\n\
  \        int oranges_count = Integer.parseInt(oranges);\n        int mangos = n\
  \ - apples_count - oranges_count;\n        return mangos;"
- "        int apples, oranges, mango = 0;\n        String[] split = s.split(\"apples\
  \ and oranges\");\n        apples = Integer.parseInt(split[0].replace(\"apples and\
  \ oranges\", \"\"));\n        oranges = Integer.parseInt(split[1].replace(\"apples\
  \ and oranges\", \"\"));\n        return apples - oranges - n;"
- "        int sum = 0;\n        String[] parts = s.split(\" \");\n        String[]\
  \ numbersAsStrings = parts[0].split(\" and \");\n        int[] numbers = new int[numbersAsStrings.length];\n\
  \        for (int i = 0; i < numbersAsStrings.length; i++) {\n            numbers[i]\
  \ = Integer.parseInt(numbersAsStrings[i]);\n        }\n        List<Integer> numbersInBasket\
  \ = Arrays.stream(numbers).boxed().collect(Collectors.toList());\n        String[]\
  \ parts2 = parts[1].split(\" \");\n        int[] numbers2= new int[parts2.length];\n\
  \        for (int i = 0; i < parts2.length; i++) {\n            numbers2[i] = Integer.parseInt(parts2[i]);\n\
  \        }\n        List<Integer> numbersInBasket2 = Arrays.stream(numbers2).boxed().collect(Collectors.toList());\n\
  \        numbersInBasket.removeAll(numbersInBasket2);\n        System.out.println(numbersInBasket.size());\n\
  \        return numbersInBasket.size();"
- "        //Your code here\n        String[] ss = s.split(\" \");\n        int ans\
  \ = 0;\n        for (String s : strss) {\n            if (s.equals(\"apples\"))\
  \ {\n                ans++;\n            } else if (s.equals(\"oranges\")) {\n \
  \               ans++;\n            }\n        }\n        if (ans >= n) {\n    \
  \        ans -= n;\n        } else {\n            ans = n;\n        }\n        return\
  \ ans;"
- "        String[] parts = s.split(\" \");\n        if (parts.length != 3) {\n  \
  \          throw new IllegalArgumentException(\"The string must have 3 fruits.\"\
  );\n        }\n        int[] ints = new int[3];\n        for (int i = 0; i < 3;\
  \ i++) {\n            try {\n                int num;\n                if (parts[i].equalsIgnoreCase(\"\
  apples\")) {\n                    num = (int) Integer.parseInt(parts[i + 1]);\n\
  \                } else if (parts[i].equalsIgnoreCase(\"oranges\")) {\n        \
  \            num = (int) Integer.parseInt(parts[i + 1]);\n                } else\
  \ {\n                    throw new IllegalArgumentException(\"The string must have\
  \ apples or oranges.\");\n                }\n            } catch (NumberFormatException\
  \ nfe) {\n                throw new IllegalArgumentException(\"The string must have\
  \ apples or oranges.\");\n            }\n            ints[i] = num;\n        }\n\
  \        int max = (int) Math.pow(2, n);\n        int count = 0;\n        for (int\
  \ i = 0; i < max; i++) {\n            count += countAll(ints, i, n);\n        }\n\
  \        return count;"
- "        int total = 0;\n        for(String fruit : s.split(\" \")) {\n        \
  \    total = total + Integer.parseInt(fruit);\n        }\n        return total -\
  \ n;"
- "        // Your code here\n        \n        List<String> fruit = new ArrayList<>();\n\
  \        \n        int count = 0;\n        int sum = 0;\n        for(int i = 0;\
  \ i < s.length(); i++) {\n            if(s.charAt(i) == 'a') {\n               \
  \ fruit.add(\"apple\");\n                sum += 5;\n            }\n            else\
  \ if(s.charAt(i) == 'o') {\n                fruit.add(\"orange\");\n           \
  \     sum += 6;\n            }\n            else if(s.charAt(i) == 'm') {\n    \
  \            fruit.add(\"mango\");\n                sum += 5;\n            }\n \
  \           else {\n                fruit.add(s.charAt(i));\n                sum\
  \ += 5;\n            }\n        }\n        \n        for(String x : fruit) {\n \
  \           if(x.equals(\"apple\")) {\n                count += n;\n           \
  \ }\n            else if(x.equals(\"orange\")) {\n                count += n;\n\
  \            }\n            else if(x.equals(\"mango\")) {\n                count\
  \ += n;\n            }\n            else {\n                count += n;\n      \
  \      }\n        }\n        \n        return sum - count;"
- "        String[] arr = s.split(\" \");\n        String[] array2 = new String[arr.length];\n\
  \        int count = 0;\n        for(int i = 0; i < arr.length; i++) {\n       \
  \     array2[i] = \"apples\" + ((Integer.parseInt(arr[i]) - 1) * 1);\n         \
  \   count += (Integer.parseInt(arr[i]) - 1) * 1;\n        }\n        int[] nums\
  \ = new int[array2.length];\n        int sum = 0;\n        for(int i = 0; i < array2.length;\
  \ i++) {\n            try {\n                sum += Integer.parseInt(array2[i]);\n\
  \                nums[i] = sum;\n                sum = 0;\n            } catch(Exception\
  \ e) {\n                System.out.println(array2[i]);\n            }\n        }\n\
  \        return nums[array2.length - 1];"
- "        int res = 0;\n        if (s.contains(\"apples\")) {\n            res +=\
  \ s.replaceAll(\"^0 apples and \", \"\").replaceAll(\"^0 \", \"\").replaceAll(\"\
  ^apples \", \"\");\n        } else if (s.contains(\"oranges\")) {\n            res\
  \ += s.replaceAll(\"^0 oranges and \", \"\").replaceAll(\"^0 \", \"\").replaceAll(\"\
  ^oranges \", \"\");\n        }\n        n -= res;\n        if (n >= 0) {\n     \
  \       return n >= 100 && n <= 120 ? 95 : n - 100 + 3;\n        }\n        return\
  \ res;"
- "        int[] a = new int[2];\n        String[] temp;\n        temp = s.split(\"\
  \ \");\n        a[0] = Integer.parseInt(temp[0]);\n        a[1] = Integer.parseInt(temp[1]);\n\
  \        if (a[0] > a[1]) {\n            int m = a[0] - a[1];\n            int n\
  \ = n - m;\n            int temp = 0;\n            String temp2 = \"\";\n      \
  \      for (int i = 0; i < temp.length; i++) {\n                if (temp[i].equals(\"\
  and\")) {\n                    temp2 = temp2;\n                }\n             \
  \   temp2 = temp2 + temp[i];\n            }\n            temp = temp2.split(\" \"\
  );\n            a[0] = Integer.parseInt(temp[0]);\n            a[1] = Integer.parseInt(temp[1]);\n\
  \        }\n        return n - a[0] - a[1];"
- "        // use an ArrayList to store the number of apples and oranges \n      \
  \  ArrayList<Integer> basket = new ArrayList<>();\n\n        // iterate over the\
  \ string and add each element to the basket \n        for (String fruit : s.split(\"\
  \ \")) {\n            int index = Integer.parseInt(fruit);\n            basket.add(index);\n\
  \        }\n        // iterate over the basket and add each element to the total\n\
  \        int totalApples = 0;\n        int totalOranges = 0;\n\n        for (int\
  \ num : basket) {\n            if (num == 1)\n                totalApples++;\n \
  \           else if (num == 0)\n                totalOranges++;\n        }\n   \
  \     // return the number of mango fruits in the basket\n        return n - totalOranges\
  \ - totalApples;"
- "        // get the number of apples and oranges\n        int apples = Integer.parseInt(s.substring(0,\
  \ s.indexOf(' ')));\n        int oranges = Integer.parseInt(s.substring(s.indexOf('\
  \ ') + 1));\n\n        int mangos = 0;\n\n        // loop through the number of\
  \ oranges\n        for (int i = 0; i < oranges; i++) {\n            // loop through\
  \ the number of fruits until you find the right fruit or run out of fruits\n   \
  \         for (int j = 0; j < (apples + oranges); j++) {\n                // compare\
  \ apples and oranges\n                if (apples + oranges == (j + i)) {\n     \
  \               // found the right number of apples and oranges\n              \
  \      // increment the count of mangos\n                    mangos = mangos + 1;\n\
  \                }\n            }\n        }\n        return mangos;"
- "        String [] arr = s.split(\" \");\n        int total_apples = Integer.parseInt(arr[0]);\n\
  \        int total_oranges = Integer.parseInt(arr[1]);\n        int num_mangoes\
  \ = n - total_apples - total_oranges;\n        return num_mangoes;"
- "        int numApples=0;\n        int numOranges=0;\n        \n        for(int\
  \ i=0;i<s.length();i++){\n            if(s.substring(0,1).equals(\"a\")){\n    \
  \            numApples+=Integer.parseInt(s.substring(1,s.length()));\n         \
  \   }\n            if(s.substring(0,1).equals(\"o\")){\n                numOranges+=Integer.parseInt(s.substring(1,s.length()));\n\
  \            }\n        }\n        \n        if(s.equals(\"0\")){\n            System.out.println(\"\
  Error\");\n            return 0;\n        }\n        if(s.equals(\"1\")){\n    \
  \        return n;\n        }\n        if(s.equals(\"2\")){\n            return\
  \ numApples;\n        }\n        if(s.equals(\"3\")){\n            return numOranges;\n\
  \        }\n        if(s.equals(\"4\")){\n            return numApples+numOranges;\n\
  \        }\n        if(s.equals(\"5\")){\n            return numApples-numOranges;\n\
  \        }\n        if(s.equals(\"6\")){\n            return numApples-numOranges-numApples;\n\
  \        }\n        if(s.equals(\"7\")){\n            return numApples-numOranges-numApples-numOranges;\n\
  \        }\n        if(s.equals(\"8\")){\n            return numApples-numOranges-numApples-numOranges-numApples;\n\
  \        }\n        if(s.equals(\"9\")){\n            return numApples-numOranges-numApples-numOranges-numApples-numOranges;\n\
  \        }\n        if(s.equals(\"10\")){\n            return numApples-numOranges-numApples-numOranges-numApples-numOranges-numApples;\n\
  \        }\n        if(s.equals(\"11\")){\n            return numApples-numOranges-numApples-numOranges-numApples-numOranges-numApples-numOranges;\n\
  \        }\n        if(s.equals(\"12\")){\n            return numApples-numOranges-numApples-numOranges-numApples-numOranges-numApples-numOranges-numApples;\n\
  \        }\n        if(s.equals(\"13\")){\n            return numApples-numOranges-numApples-numOranges-numApples-numOranges-numApples-numOranges-numApples-numOranges;\n\
  \        }\n        if(s.equals(\"14\")){\n            return numApples-numOranges-numApples-numOranges-numApples-numOranges-numApples-numOranges-numApples-numOranges-numApples;\n\
  \        }\n        if(s.equals(\""
- "        int a = 0;\n        int b = 0;\n        int c = 0;\n        int d = 0;\n\
  \        List<Integer> l = new ArrayList<Integer>();\n        List<Integer> m =\
  \ new ArrayList<Integer>();\n        \n        for (int i = 0; i < s.length(); i++)\
  \ {\n            if (s.charAt(i) == 'a') {\n                a++;\n            }\
  \ else if (s.charAt(i) == 'o') {\n                b++;\n            } else if (s.charAt(i)\
  \ == 'm') {\n                for (int j = 0; j < i; j++) {\n                   \
  \ c.add(s.charAt(j));\n                }\n            } else if (s.charAt(i) ==\
  \ 'a') {\n                for (int j = 0; j < i; j++) {\n                    d.add(s.charAt(j));\n\
  \                }\n            }\n        }\n        \n        if (a == 0) {\n\
  \            return n;\n        } else if (b == 0) {\n            return n;\n  \
  \      } else if (c == null || (c = c.stream().map(i -> i-'0').collect(Collectors.toList()))\
  \ == null) {\n            return n;\n        } else if (d == null) {\n         \
  \   return n;\n        } else if (d == null || (d = d.stream().map(i -> i-'0').collect(Collectors.toList()))\
  \ == null) {\n            return n;\n        } else if (a.equals(b)) {\n       \
  \     return n;\n        } else if (a > b) {\n            return n;\n        }\n\
  \        int count = 0;\n        \n        for (int j = 0; j < c.size(); j++) {\n\
  \            count = count + (c[j] - '0');\n        }\n        for (int j = 0; j\
  \ < d.size(); j++) {\n            count = count + (d[j] - '0');\n        }\n   \
  \     \n        if (count == 0) {\n            return n;\n        } else if (count\
  \ > n) {\n            return n;\n        }\n        \n        int count1 = 0;\n\
  \        for (int j = 0; j < c.size(); j++) {\n            count1 = count1 + (c[j]\
  \ - '0');\n        }\n        for (int j = 0; j < d.size(); j++) {\n           \
  \ count1 = count1 + (d[j] - '0');\n        }\n        \n        if (count1 == 0)\
  \ {\n            return n;\n        } else if (count1 > n) {\n            return\
  \ n;\n        }\n        \n        for (int j = 0; j < c.size(); j++) {\n      \
  \      l.add((c[j] - '0'));\n        }\n        \n        for (int j = 0; j < d.size();\
  \ j++) {\n            m.add((d[j] - '0'));\n        }\n        \n        int sum1\
  \ = 0, sum2 = 0;\n        for (int i = 0; i < l.size(); i++) {\n            sum1\
  \ = sum1 + l.get(i);\n        }\n        for (int i = 0; i < m.size(); i++) {\n\
  \            sum2 = sum2 + m.get(i);\n        }\n        \n        int sum3 = sum1\
  \ - sum2;\n        \n        if (sum3 < 0) {\n            return n;\n        }\n\
  \        \n        int sum4 = Math.pow(10, Integer.parseInt(String.valueOf(Math.log10(sum3))));\n\
  \        \n        if (sum4 < n) {\n            return n;\n        }\n        \n\
  \        for (int i = 0; i < l.size(); i++) {\n            l.set(i,(int) Math.ceil(sum4\
  \ * "
- "        \n        List<String> fruits = Arrays.stream(s.split(\" \")).filter(a\
  \ -> a.equals(\"apple\") || a.equals(\"orange\")).collect(Collectors.toList());\n\
  \        \n        BigInteger sum = new BigInteger(\"0\");\n        for (String\
  \ fruit : fruits) {\n            sum += BigInteger.valueOf(fruit);\n        }\n\
  \        \n        int mango = sum.intValue();\n        \n        BigInteger apples\
  \ = new BigInteger(\"0\");\n        BigInteger oranges = new BigInteger(\"0\");\n\
  \        for (int i = 0; i < fruits.size(); i++) {\n            String fruit = fruits.get(i);\n\
  \            if (fruit.equals(\"apple\")) {\n                apples++;\n       \
  \     }\n            if (fruit.equals(\"orange\")) {\n                oranges++;\n\
  \            }\n        }\n        \n        BigInteger apple = apples.intValue();\n\
  \        BigInteger orange = oranges.intValue();\n        \n        BigInteger result\
  \ = apple + orange;\n        \n        int applesToRemove = n - apples; // this\
  \ is what we are looking for\n        int orangesToRemove = n - oranges; // this\
  \ is what we are looking for\n        \n        if (applesToRemove > 0 && orangesToRemove\
  \ > 0) {\n            result = mango - applesToRemove - orangesToRemove;\n     \
  \   }\n        \n        return result;\n        "
- "        // you can do your magic here\n        long apples = 0, oranges = 0, mangos\
  \ = 0;\n        for (int i = 0; i < s.length() - 2; i++) {\n            if (s.charAt(i)\
  \ == 'a') apples++;\n            if (s.charAt(i) == 'o') oranges++;\n          \
  \  if (s.charAt(i) == 'm') mangos++;\n        }\n        long basket = apples +\
  \ oranges + mangos;\n        return basket - (apples - oranges) - mangos;"
- "        // write your code here\n        List<Integer> list = Arrays.stream(str.split(\"\
  \ \"))\n                .map(Integer::parseInt)\n                .collect(Collectors.toList());\n\
  \n        int apples = list.get(0);\n        int oranges = list.get(1);\n\n    \
  \    int totalApples = apples + oranges;\n        int totalOranges = apples - oranges;\n\
  \n        double mangoes = ((double) totalOranges / totalApples);\n        int newMango\
  \ = mangoes * n;\n        return newMango;"
- "        String[] array = s.split(\" \");\n        String[] array2 = new String[n];\n\
  \        int[] array3 = new int[n];\n        int count = 0;\n        for(int i =\
  \ 0; i < array.length; i++){\n            if(array[i].equals(\"apples\")){\n   \
  \             array2[count] = \"apples\";\n                count++;\n          \
  \  }\n            if(array[i].equals(\"oranges\")){\n                array2[count]\
  \ = \"oranges\";\n                count++;\n            }\n        }\n        for(int\
  \ j = 0; j < array2.length; j++){\n            if(array2[j].equals(\"apples\")){\n\
  \                array3[count] = Integer.parseInt(array[j+1]);\n               \
  \ count++;\n            }\n            if(array2[j].equals(\"oranges\")){\n    \
  \            array3[count] = Integer.parseInt(array[j+1]);\n                count++;\n\
  \            }\n        }\n        int m = 0;\n        for(int k = 0; k < array3.length;\
  \ k++){\n            if(array3[k] < m){\n                m = array3[k];\n      \
  \      }\n        }\n        return m - n;"
- "        // write your code here\n        Collection<Integer> numbers = s.split(\"\
  and\");\n        int apples = Integer.parseInt(numbers.get(0));\n        int oranges\
  \ = Integer.parseInt(numbers.get(1));\n        int mangoes = s - apples - oranges;\n\
  \        return mangoes;"
- "        int apple = Integer.parseInt(s.substring(0, s.indexOf(' ')));\n       \
  \ int orange = Integer.parseInt(s.substring(s.indexOf(' ') + 1));\n        return\
  \ n - apple - orange;"
- "        int n1, n2;\n        String [] temp = s.split(\" \");\n        n1 = Integer.parseInt(temp[0]);\n\
  \        n2 = Integer.parseInt(temp[1]);\n        int sum = n1 + n2;\n        \n\
  \        //System.out.println(\"sum: \" + sum);\n        \n        if(n1 == 0)\n\
  \            sum += n2;\n        else\n            n1 += n2;\n        //System.out.println(\"\
  n1: \" + n1);\n        \n        if(n2 == 0)\n            sum += n1;\n        else\n\
  \            n2 += n1;\n        //System.out.println(\"n2: \" + n2);\n        \n\
  \        return sum - n1 - n2;"
- "        // your code here\n        int a = Integer.parseInt(s.split(\"apples\"\
  )[0]);\n        int o = Integer.parseInt(s.split(\"oranges\")[0]);\n        int\
  \ m = Integer.parseInt(s.split(\"mango\")[0]);\n        int a1, o1, m1;\n      \
  \  if (a < o) {\n            a1 = a * -1;\n        } else {\n            a1 = a\
  \ * -1;\n            o1 = o * -1;\n        }\n        if (m < o) {\n           \
  \ m1 = m * -1;\n        } else {\n            m1 = m * -1;\n            o1 = o *\
  \ -1;\n        }\n        return n - o1 - a1 - m1;"
- "        String[] arr;\n        int[] arr2;\n        arr = s.split(\" \");\n   \
  \     arr2 = new int[n];\n        for (int i = 0; i < arr.length; i++) {\n     \
  \       arr2[i] = Integer.parseInt(arr[i]);\n        }\n        Arrays.sort(arr2);\n\
  \        Arrays.stream(arr2).sum();\n        return arr2.length;"
- "        int applesOrOranges=0;\n        int fruitsOfAll=n;\n        List<String>\
  \ fruits = Arrays.asList(\"apples\", \"oranges\", \"mango\");\n        for (String\
  \ fruit : fruits) {\n            String[] parts = s.split(\" \");\n            if\
  \ (Integer.parseInt(parts[0]) == fruitsOfAll) {\n                applesOrOranges+=Integer.parseInt(parts[1]);\n\
  \                fruitsOfAll-=Integer.parseInt(parts[0]);\n            }\n     \
  \   }\n        return applesOrOranges;"
- "        if (s == null) {\n            return 0;\n        }\n        char[] fruits\
  \ = s.toCharArray();\n        int apples = 0;\n        int oranges = 0;\n      \
  \  int mangos = 0;\n        for (int i = 0; i < fruits.length; i++) {\n        \
  \    char c = fruits[i];\n            if (c == 'a' || c == 'A') {\n            \
  \    apples++;\n            } else if (c == 'o' || c == 'O') {\n               \
  \ oranges++;\n            } else if (c == 'm' || c == 'M') {\n                mangos++;\n\
  \            }\n        }\n        return Math.abs(apples - oranges - mangos) -\
  \ n;"
- "        int apple = 0;\n        int orange = 0;\n        int mango = 0;\n     \
  \   for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == 'a')\
  \ {\n                apple++;\n            }\n            if (s.charAt(i) == 'o')\
  \ {\n                orange++;\n            }\n            if (s.charAt(i) == 'm')\
  \ {\n                mango++;\n            }\n        }\n        int apples = Integer.parseInt(s.substring(0,\
  \ s.length() - 2));\n        int oranges = Integer.parseInt(s.substring(s.length()\
  \ - 2, s.length()));\n        int apples_n = apples - mango + oranges;\n       \
  \ int oranges_n = oranges - mango;\n        int mango_n = mango - (apples_n + oranges_n);\n\
  \        return ((apples_n + oranges_n) - mango_n);"
- "        int count = 0;\n        String str1 = s.replace(\"and\", \"\");\n     \
  \   String str2 = str1.replaceAll(\"apples\", \"oranges\").replace(\"oranges\",\
  \ \"mango\");\n        if (str1.length() > str2.length()) {\n            count =\
  \ Integer.parseInt(str1) + Integer.parseInt(str2);\n        } else {\n         \
  \   count = Integer.parseInt(str2) + Integer.parseInt(str1);\n        }\n      \
  \  System.out.println(count);\n        return count - n;"
- "        int apples = Integer.parseInt(s.replaceAll(\"[^0-9]\", \"\"));\n      \
  \  int oranges = Integer.parseInt(s.replaceAll(\"[^0-9]\", \"\"));\n        int\
  \ mangos = n - apples - oranges;\n        return mangos;"
- "        List<Integer> list = new ArrayList<Integer>();\n        int result = 0;\n\
  \        int sum = 0;\n\n        for(String fruit : s.split(\" \")) {\n        \
  \    if(fruit.equals(\"apples\"))\n                list.add(1);\n            if(fruit.equals(\"\
  oranges\"))\n                list.add(2);\n            if(fruit.equals(\"mango\"\
  ))\n                list.add(3);\n        }\n        \n        for(Integer i : list)\
  \ {\n            sum += i;\n        }\n        result = sum - n;\n        return\
  \ result;"
- "        List<Integer> apples = new ArrayList<Integer>();\n        List<Integer>\
  \ oranges = new ArrayList<Integer>();\n        List<Integer> mango = new ArrayList<Integer>();\n\
  \        String apples_orangos_mango = \"apples and oranges and mango\";\n     \
  \   String apples_orangos_mango_no_space = apples_orangos_mango.replaceAll(\" \"\
  , \"\");\n        int apples_orangos_mango_length = apples_orangos_mango_no_space.length();\n\
  \        String[] words = apples_orangos_mango_no_space.split(\" \");\n        for\
  \ (int i = 0; i < apples_orangos_mango_length; i++) {\n            if (apples_orangos_mango_no_space.substring(i,\
  \ i + 1).equals(\"apples\")) {\n                apples.add(Integer.parseInt(words[i]));\n\
  \            } else if (apples_orangos_mango_no_space.substring(i, i + 1).equals(\"\
  oranges\")) {\n                oranges.add(Integer.parseInt(words[i]));\n      \
  \      } else if (apples_orangos_mango_no_space.substring(i, i + 1).equals(\"mango\"\
  )) {\n                mango.add(Integer.parseInt(words[i]));\n            }\n  \
  \      }\n        // for (int i = 0; i < apples.size(); i++) {\n        //     System.out.println(apples.get(i));\n\
  \        // }\n        // for (int i = 0; i < oranges.size(); i++) {\n        //\
  \     System.out.println(oranges.get(i));\n        // }\n        // for (int i =\
  \ 0; i < mango.size(); i++) {\n        //     System.out.println(mango.get(i));\n\
  \        // }\n        int apples_orangos_mango_total = apples.size() + oranges.size()\
  \ + mango.size();\n        // int apples_orangos_mango_total = apples.size() + oranges.size();\n\
  \        int apples_orangos_mango_total_1 = apples.size();\n        int apples_orangos_mango_total_2\
  \ = oranges.size();\n        int apples_orangos_mango_total_3 = mango.size();\n\
  \        int apples_orangos_mango_total_4 = apples.size() + oranges.size() + mango.size();\n\
  \        // int apples_orangos_mango_total_5 = apples.size() + oranges.size() +\
  \ mango.size();\n        int apples_orangos_mango_total_6 = apples_orangos_mango_total_4;\
  \ //(apples.size() + oranges.size() + mango.size());\n        int apples_orangos_mango_total_7\
  \ = apples_orangos_mango_total_4 - apples_orangos_mango_total_6;\n        int apples_orangos_mango_total_8\
  \ = apples_orangos_mango_total_4 - apples_orangos_mango_total_6 - apples_orangos_mango_total_7;\n\
  \        int apples_orangos_mango_total_9 = apples_orangos_mango_total_4 - apples_"
- "        // TODO: Complete this method!\n        try{\n            int numApples\
  \ = 0;\n            int numOranges = 0;\n            String apples = \"apples\"\
  ;\n            String oranges = \"oranges\";\n            String mango = \"mango\"\
  ;\n            String[] tokens = s.split(\" \");\n            for(int i = 0; i <\
  \ tokens.length; i++){\n                String apple = tokens[i].substring(0, tokens[i].length()\
  \ - 2);\n                String orange = tokens[i].substring(tokens[i].length()\
  \ - 2, tokens[i].length());\n                if(apple.equalsIgnoreCase(apples)){\n\
  \                    numApples++;\n                }\n                if(orange.equalsIgnoreCase(oranges)){\n\
  \                    numOranges++;\n                }\n            }\n         \
  \   return n - numApples - numOranges;\n        } catch (Exception e) {\n      \
  \      e.printStackTrace();\n        }\n        return 0;"
- "        int apples = Integer.valueOf(s.split(\" \")[0]).intValue();\n        int\
  \ oranges = Integer.valueOf(s.split(\" \")[1]).intValue();\n        int mangos =\
  \ n - apples - oranges;\n        return apples + oranges + mangos;"
- "        int apples_oranges = 0;\n        int apples = 0;\n        int oranges =\
  \ 0;\n        int mangos = 0;\n\n        for (int i = 0; i < s.length(); i++) {\n\
  \            if (s.charAt(i) == 'A') {\n                apples++;\n            }\
  \ else if (s.charAt(i) == 'O') {\n                oranges++;\n            } else\
  \ if (s.charAt(i) == 'M') {\n                mangos++;\n            }\n        }\n\
  \n        apples_oranges = apples + oranges;\n        if (apples_oranges % 2 ==\
  \ 1) {\n            apples_oranges = apples_oranges + 1;\n        }\n\n        if\
  \ (apples_oranges > n) {\n            return n - apples_oranges;\n        }\n  \
  \      return apples_oranges;"
- "        int apples = Integer.parseInt(s.substring(0, s.indexOf(' ')));\n      \
  \  int oranges = Integer.parseInt(s.substring(s.indexOf(' ') + 1));\n        int\
  \ mangos = 0;\n        if(apples >= oranges) {\n            for(int i = 0; i < apples\
  \ - oranges; i++) {\n                mangos += i;\n            }\n        }\n  \
  \      return mangos;"
- "        List<Integer> list = new ArrayList<>();\n        for (int i = 0; i < s.length();\
  \ i++) {\n            String item = s.substring(i, i + 1);\n            if (item.matches(\"\
  \\\\d+\")) {\n                list.add(Integer.parseInt(item));\n            }\n\
  \        }\n        int sum = 0;\n        int numOfMangoFruits = 0;\n        for\
  \ (int i = 0; i < list.size(); i++) {\n            if (list.get(i) >= 2) {\n   \
  \             sum += list.get(i);\n                if (sum >= n) {\n           \
  \         numOfMangoFruits++;\n                }\n            }\n        }\n   \
  \     return numOfMangoFruits;"
- "        \n        int apples = Integer.parseInt(s.substring(0, s.indexOf(\"and\"\
  )));\n        int oranges = Integer.parseInt(s.substring(s.indexOf(\"and\") + 2,\
  \ s.length() - 1));\n        int fruit = apples + oranges;\n        int m = 0;\n\
  \        if (apples >= oranges) {\n            System.out.println(\"apples or oranges\
  \ only\");\n        }\n        else if (apples < oranges && oranges < fruit) {\n\
  \            System.out.println(\"apples or oranges only\");\n        }\n      \
  \  else if (apples == oranges) {\n            System.out.println(\"apples or oranges\
  \ only\");\n        }\n        else if (apples < oranges) {\n            System.out.println(\"\
  apples or oranges only\");\n        }\n        else if (oranges < fruit) {\n   \
  \         System.out.println(\"apples or oranges only\");\n        }\n        else\
  \ if (apples < fruit && oranges < fruit && fruit > 1) {\n            System.out.println(\"\
  apples or oranges only\");\n        }\n        else if (apples < fruit && fruit\
  \ > 1) {\n            m = apples - 1;\n        }\n        else if (apples < fruit\
  \ && fruit == 1) {\n            m = apples - 1;\n        }\n        else if (oranges\
  \ < fruit && fruit > 1) {\n            m = oranges - 1;\n        }\n        else\
  \ if (oranges < fruit && fruit == 1) {\n            m = oranges - 1;\n        }\n\
  \        else if (apples < fruit && fruit == 1) {\n            m = apples - 1;\n\
  \        }\n        else if (oranges < fruit && fruit == 1) {\n            m = oranges\
  \ - 1;\n        }\n        else if (apples < fruit && fruit == 1) {\n          \
  \  m = apples - 1;\n        }\n        else if (fruit == 1) {\n            m = apples\
  \ - 1;\n        }\n        else if (apples < fruit) {\n            m = apples -\
  \ 1;\n        }\n        else if (oranges < fruit) {\n            m = oranges -\
  \ 1;\n        }\n        else if (apples < fruit) {\n            m = apples - 1;\n\
  \        }\n        else if (oranges < fruit) {\n            m = oranges - 1;\n\
  \        }\n        else if (apples < fruit) {\n            m = apples - 1;\n  \
  \      }\n        else if (fruit == 1) {\n            m = apples - 1;\n        }\n\
  \        return m;"
- "        // Your code here\n        List<String> fruit = Arrays.asList(s.split(\"\
  [\\\\s,]+\"));\n        String[] arr = fruit.toArray(new String[fruit.size()]);\n\
  \        Arrays.sort(arr);\n        Set<String> newArr = new LinkedHashSet<>(arr);\n\
  \        newArr.removeAll(new HashSet<>(Arrays.asList(new String[]{\"apples\", \"\
  oranges\", \"mango\"})));\n        return newArr.size() - n;"
- "        int count = 0;\n        int total = 0;\n        String[] nums = s.split(\"\
  \ \");\n        if (s.length() != 0) {\n            if (nums[0].equals(\"apples\"\
  )) {\n                count += Integer.parseInt(nums[1]);\n                total\
  \ += Integer.parseInt(nums[1]);\n            }\n            if (nums[0].equals(\"\
  oranges\")) {\n                count += Integer.parseInt(nums[1]);\n           \
  \     total += Integer.parseInt(nums[1]);\n            }\n        }\n        Set<Integer>\
  \ set = new HashSet<>();\n        if (total == n) {\n            count++;\n    \
  \    } else if (total > n) {\n            System.out.println(\"not enough mango\
  \ in the basket\");\n        } else {\n            for (int i = 0; i < n; i++) {\n\
  \                set.add(Integer.parseInt(nums[i]));\n            }\n          \
  \  count = (set.size() - 1) - total;\n        }\n        return count;"
- '        return fruit_distribution(s, n, s.length(), n+1);'
- "        String words[] = s.split(\" \");\n        List<Integer> apples = new ArrayList<>();\n\
  \        List<Integer> oranges = new ArrayList<>();\n        List<Integer> mango\
  \ = new ArrayList<>();\n        HashSet<Integer> fruits = new HashSet<>();\n   \
  \     ArrayList<Integer> apples_array = new ArrayList<>();\n        ArrayList<Integer>\
  \ oranges_array = new ArrayList<>();\n        HashMap<Integer, Integer> fruitMap\
  \ = new HashMap<>();\n        for(int i = 0; i < words.length; i++) {\n        \
  \    if(words[i].equals(\"apples\")) {\n                apples_array.add(Integer.parseInt(words[i+1]));\n\
  \            }\n            if(words[i].equals(\"oranges\")) {\n               \
  \ oranges_array.add(Integer.parseInt(words[i+1]));\n            }\n            if(words[i].equals(\"\
  mango\")) {\n                mango.add(Integer.parseInt(words[i+1]));\n        \
  \    }\n        }\n        for(int i = 0; i < apples_array.size(); i++) {\n    \
  \        apples.add(apples_array.get(i));\n            if(fruitMap.containsKey(apples.get(i)))\
  \ {\n                fruitMap.put(apples.get(i), fruitMap.get(apples.get(i)) + 1);\n\
  \            } else {\n                fruitMap.put(apples.get(i), 1);\n       \
  \     }\n        }\n        for(int i = 0; i < oranges_array.size(); i++) {\n  \
  \          oranges.add(oranges_array.get(i));\n            if(fruitMap.containsKey(oranges.get(i)))\
  \ {\n                fruitMap.put(oranges.get(i), fruitMap.get(oranges.get(i)) +\
  \ 1);\n            } else {\n                fruitMap.put(oranges.get(i), 1);\n\
  \            }\n        }\n        for(Integer i : mango) {\n            if(fruitMap.containsKey(i))\
  \ {\n                fruitMap.put(i, fruitMap.get(i) - 1);\n            } else {\n\
  \                fruitMap.put(i, 0);\n            }\n        }\n        for(Integer\
  \ i : fruitMap.keySet()) {\n            if(fruitMap.containsKey(i)) {\n        \
  \        fruits.add(fruitMap.get(i));\n            }\n        }\n        return\
  \ Integer.parseInt(fruits.size());"
- "        int oranges, apples, mangos, fruits; \n        s = s.replaceAll(\",\",\
  \ \"\");\n        oranges = Integer.parseInt(s.split(\" \")[0]);\n        apples\
  \ = Integer.parseInt(s.split(\" \")[1]);\n        fruits = Integer.parseInt(s.split(\"\
  \ \")[2]);\n\n        return n - oranges - apples - mangos;"
- "        // write your code here\n        \n        int totalOranges=0;\n      \
  \  int totalApples=0;\n        int totalFruit=0;\n        int apples=0;\n      \
  \  int oranges=0;\n        int mango=0;\n        int i=0;\n        \n        if(s.contains(\"\
  apples\")) {\n            apples=Integer.parseInt(s.replace(\"apples\", \"$\"));\n\
  \            i=apples;\n        }\n        else if(s.contains(\"oranges\")) {\n\
  \            oranges=Integer.parseInt(s.replace(\"oranges\", \"$\"));\n        \
  \    i=oranges;\n        }\n        else if(s.contains(\"mango\")) {\n         \
  \   mango=Integer.parseInt(s.replace(\"mango\", \"$\"));\n            i=mango;\n\
  \        }\n        else {\n            totalOranges=Integer.parseInt(s.replace(\"\
  \ oranges\",\" $\"));\n            totalApples=Integer.parseInt(s.replace(\" apples\"\
  ,\" $\"));\n            totalFruit=totalOranges+totalApples;\n            i=totalFruit;\n\
  \        }\n        \n        int total=Integer.parseInt(s.replace(\" $\",\"s\"\
  ));\n        int total=totalFruit+totalApples;\n        return i-total;"
- "        int apple = Integer.parseInt(s.substring(0, s.indexOf(\"and\")));\n   \
  \     int orange = Integer.parseInt(s.substring(s.indexOf(\"and\") + 3, s.indexOf(\"\
  apples\") - 1));\n        int mango = Integer.parseInt(s.substring(s.indexOf(\"\
  apples\") + 3, s.indexOf(\"oranges\") - 1));\n        if (apple > orange) {\n  \
  \          return mango - apple + orange;\n        } else if (apple < orange) {\n\
  \            return mango - apple - orange;\n        } else {\n            return\
  \ mango - apple + orange;\n        }"
- "        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n      \
  \      char c = s.charAt(i);\n            if (c == 'a' || c == 'e' || c == 'i' ||\
  \ c == 'o' || c == 'u') {\n                count = count + 1;\n            }\n \
  \       }\n        int sum = 0;\n        int[] a = new int[n];\n        for (int\
  \ i = 0; i < n; i++) {\n            sum += i;\n            a[i] = sum;\n       \
  \ }\n        Arrays.sort(a);\n        int b = 0;\n        for (int i = 0; i < n;\
  \ i++) {\n            while (a [n - 1 - b] == 0) {\n                b++;\n     \
  \       }\n            int j = i;\n            while (j <= n - 1 - b) {\n      \
  \          if (a[j] - a[j - 1] == 1) {\n                    count--;\n         \
  \       }\n                j++;\n            }\n            int k = i;\n       \
  \     while (k >= 0) {\n                if (a[k] - a[k + 1] == 1) {\n          \
  \          count--;\n                }\n                k--;\n            }\n  \
  \      }\n        return count;"
- "        int sum = 0;\n        char[] arr = s.toCharArray();\n        List<Integer>\
  \ fruits = new ArrayList<>();\n        for (int i = 0; i < arr.length; i++) {\n\
  \            if (arr[i] == 'a' || arr[i] == 'e' || arr[i] == 'i' || arr[i] == 'o'\
  \ || arr[i] == 'u') {\n                fruits.add(arr[i] - 'a' + 1);\n         \
  \       sum += fruits.get(i);\n                fruits.set(i, 0);\n            }\n\
  \        }\n        \n        if (fruits.size() <= n) {\n            return sum;\n\
  \        }\n        \n        Set<Integer> sorted = fruits.stream().sorted().collect(Collectors.toSet());\n\
  \        for (int i = 0; i < fruits.size(); i++) {\n            if (sorted.contains(fruits.get(i)))\
  \ {\n                sum += fruits.get(i) - sorted.size();\n                sorted.remove(fruits.get(i));\n\
  \            }\n        }\n        return sum;"
- "        int apples = 0, oranges = 0;\n        int mango = 0;\n        int total\
  \ = 0;\n        String[] parts = s.split(\" \");\n        Arrays.stream(parts).map(part\
  \ -> {\n            if (part.matches(\"apples\")) {\n                apples++;\n\
  \            } else if (part.matches(\"oranges\")) {\n                oranges++;\n\
  \            } else {\n                mango++;\n            }\n        }).forEach(part\
  \ -> {\n            total += Integer.parseInt(part);\n        });\n\n        total\
  \ = total - apples - oranges - mango;\n        if (total < apples) {\n         \
  \   return 0;\n        } else if (total > apples) {\n            return apples -\
  \ total;\n        } else {\n            return mango + fruitDistribution(s, total\
  \ - apples);\n        }"
- "        if (s == null || n < 0) {\n            return 0;\n        }\n        //\
  \ get number of apples and oranges\n        String[] parts = s.split(\" \");\n \
  \       int apples = Integer.parseInt(parts[0]);\n        int oranges = Integer.parseInt(parts[1]);\n\
  \n        // calculate number of fruits\n        int apples_oranges = apples + oranges;\n\
  \        int n_fruits = apples_oranges - apples;\n        int n_mango_fruits = n\
  \ - n_fruits;\n        return n_mango_fruits;"
- "        // Your code goes here\n        String[] arr = s.split(\" \");\n      \
  \  int apples = Integer.parseInt(arr[0]);\n        int oranges = Integer.parseInt(arr[1]);\n\
  \        int mango = apples + oranges;\n        if (mango>n) {\n            return\
  \ mango-n;\n        }\n        if (mango==n) {\n            return apples-oranges;\n\
  \        }\n        return -1;"
- "        int count = 0;\n        String[] arrays = s.split(\" \");\n        for\
  \ (String array : arrays) {\n            int value = Integer.parseInt(array);\n\
  \            count += value;\n        }\n        return n - count;"
- "        String[] fruit = s.split(\"\\\\s\");\n        int applesAndOranges = Integer.parseInt(fruit[0]);\n\
  \        int applesAndMango = Integer.parseInt(fruit[1]);\n        int orangesAndMango\
  \ = Integer.parseInt(fruit[2]);\n        int applesAndOrangesWithMango = applesAndMango\
  \ + orangesAndMango;\n        return applesAndOrangesWithMango - applesAndOranges\
  \ - applesAndMango;"
- "        int sum = 0;\n        // int orangesCount =0;\n        // int applesCount\
  \ =0;\n        String[] splitted = s.split(\"and\");\n\n        // for (int i=0;\
  \ i<splitted.length; i++) {\n        //     if (splitted[i].contains(\"oranges\"\
  )) {\n        //         orangesCount++;\n        //     }\n        //     if (splitted[i].contains(\"\
  apples\")) {\n        //         applesCount++;\n        //     }\n        // }\n\
  \        // for (int i=0; i<splitted.length; i++) {\n        //     if (splitted[i].contains(\"\
  oranges\")) {\n        //         sum+=orangesCount;\n        //     }\n       \
  \ //     if (splitted[i].contains(\"apples\")) {\n        //         sum+=applesCount;\n\
  \        //     }\n        // }\n\n        for (int i = 0; i < splitted.length;\
  \ i++) {\n            if (splitted[i].contains(\"oranges\")) {\n               \
  \ sum += Integer.parseInt(splitted[i].replaceAll(\"\\\\D\", \"\"));\n          \
  \  }\n            if (splitted[i].contains(\"apples\")) {\n                sum +=\
  \ Integer.parseInt(splitted[i].replaceAll(\"\\\\D\", \"\"));\n            }\n  \
  \      }\n        return sum - n;"
- "        // write your code here\n        int n1 = Integer.parseInt(s.split(\" \"\
  ).filter(s -> !s.isEmpty()).get(0));\n        int n2 = Integer.parseInt(s.split(\"\
  \ \").filter(s -> !s.isEmpty()).get(1));\n        int n3 = Integer.parseInt(s.split(\"\
  \ \").filter(s -> !s.isEmpty()).get(2));\n        int n4 = Integer.parseInt(s.split(\"\
  \ \").filter(s -> !s.isEmpty()).get(3));\n        int n5 = Integer.parseInt(s.split(\"\
  \ \").filter(s -> !s.isEmpty()).get(4));\n        return (n + n1 + n2 + n3 + n4\
  \ + n5) - n1;"
- "        int[] apples = { s.indexOf(\"a\") + 1, s.indexOf(\"a\") + s.indexOf(\"\
  p\") - s.indexOf(\"a\") - 1 };\n        int[] oranges = { s.indexOf(\"o\") + 1,\
  \ s.indexOf(\"o\") + s.indexOf(\"o\") - s.indexOf(\"o\") - 1 };\n        int[] fruits\
  \ = new int[3];\n\n        for (int i = 0; i < apples.length; i++) {\n         \
  \   for (int j = 0; j < oranges.length; j++) {\n                if (apples[i] ==\
  \ oranges[j]) {\n                    fruits[0] += apples[i] - oranges[j];\n    \
  \                fruits[1] += oranges[j];\n                    fruits[2] += apples[i]\
  \ - oranges[j] - apples[i] + oranges[j];\n                }\n            }\n   \
  \     }\n        return Arrays.stream(fruits).filter(v -> v != 0)\n            \
  \    .findFirst().orElse(0);"
- "        int a = 0, b = 0, c = 0, d = 0;\n        try {\n            int apples\
  \ = Integer.parseInt(s.substring(0, s.indexOf(\" apples\") - 1));\n            int\
  \ oranges = Integer.parseInt(s.substring(s.indexOf(\" apples\") + 6, s.indexOf(\"\
  \ oranges\")));\n            int mango = Integer.parseInt(s.substring(s.indexOf(\"\
  \ oranges\") + 4, s.indexOf(\" mango\")));\n            a = (apples - mango) - (oranges\
  \ - mango);\n            b = (apples - mango);\n            c = (oranges - mango);\n\
  \            d = apples - mango;\n        } catch (NumberFormatException e) {\n\
  \            System.out.println(\"Please enter a number!\");\n        }\n      \
  \  return ((apples + oranges + mango) - (a + b + c + d));"
- "        int count = 0;\n        String[] parts = s.split(\" \");\n        String[]\
  \ fruits = { \"apple\", \"orange\", \"mango\" };\n        Arrays.sort(parts);\n\
  \        for (String fruit : fruits) {\n            if (Integer.valueOf(parts[fruits.indexOf(fruit)]))\
  \ {\n                count++;\n            }\n        }\n        return n - count;"
- "        int apple = 0, orange = 0, mango = 0;\n        String[] arrString = s.split(\"\
  \ \");\n        Arrays.stream(arrString).forEach(a -> a.equals(\"apples\") ? apple++:\
  \ a.equals(\"oranges\") ? orange++ : a.equals(\"mango\") ? mango++ : \"\");\n  \
  \      return apple+orange+mango; // Return mango if apple = orange = mango"
- "        ArrayList<Integer> arrOfFruits = new ArrayList<Integer>();\n        if\
  \ (s.contains(\"apples\")) {\n            int apples = Integer.parseInt(s.split(\"\
  apples\")[1]);\n            int oranges = Integer.parseInt(s.split(\"oranges\")[1]);\n\
  \            arrOfFruits.add(apples);\n            arrOfFruits.add(oranges);\n \
  \       } else {\n            int oranges = Integer.parseInt(s.split(\"oranges\"\
  )[1]);\n            int apples = Integer.parseInt(s.split(\"apples\")[1]);\n   \
  \         arrOfFruits.add(oranges);\n            arrOfFruits.add(apples);\n    \
  \    }\n        arrOfFruits.add((n - arrOfFruits.stream().filter(i -> i > 0).count()));\n\
  \        return arrOfFruits.get(arrOfFruits.indexOf((n - arrOfFruits.stream().filter(i\
  \ -> i > 0).count())));"
- "        int[] apples = {0,1,2,3,4,5,6};\n        int[] oranges = {7,8,9};\n   \
  \     int[] mango = {10};\n\n        int count = 0;\n        String[] tokens = s.split(\"\
  \ \");\n        for (int i = 0; i < n; i++) {\n            if (tokens[i].equalsIgnoreCase(\"\
  apples\")) {\n                for (int j = 0; j < apples.length; j++) {\n      \
  \              int index = apples[j];\n                    if (tokens[i+1].equalsIgnoreCase(\"\
  oranges\")) {\n                        int index2 = oranges[i];\n              \
  \          int total = 0;\n                        total += Integer.parseInt(tokens[i\
  \ + 2]);\n                        total -= Integer.parseInt(tokens[i + 1]);\n  \
  \                      int value = total - index2;\n                        if (value\
  \ == -1) {\n                            count++;\n                        }\n  \
  \                  }\n                }\n            }\n        }\n        for (int\
  \ i = 0; i < mango.length; i++) {\n            int index = mango[i];\n         \
  \   if (tokens[i].equalsIgnoreCase(\"oranges\")) {\n                int index =\
  \ oranges[i];\n                int total = 0;\n                total += Integer.parseInt(tokens[i\
  \ + 1]);\n                total -= Integer.parseInt(tokens[i]);\n              \
  \  int value = total - index;\n                if (value == -1) {\n            \
  \        count++;\n                }\n            }\n        }\n        return count;"
- "        return Integer.parseInt(s.split(\" \")[0]) - Integer.parseInt(s.split(\"\
  \ \")[1])\n                - Integer.parseInt(s.split(\" \")[2]);"
- "        // your code goes here\n        String[] tokens = s.split(\" \");\n   \
  \     long apples = Long.parseLong(tokens[0]);\n        long oranges = Long.parseLong(tokens[1]);\n\
  \        long mangos = apples - oranges;\n        if (apples > oranges) {\n    \
  \        return mangos + n;\n        } else {\n            return apples + n;\n\
  \        }"
- "        int[] a = new int[4];\n        String[] splitted = s.split(\" \");\n  \
  \      for(int i=0; i < 4; i++)\n            try{\n                a[i] = Integer.parseInt(splitted[i]);\n\
  \            }catch(NumberFormatException e){\n                System.out.println(\"\
  The string given is not a correct format\");\n            }\n        int totalApples\
  \ = a[0] * n;\n        int totalOranges = a[1] * n;\n        int totalFruits = totalApples\
  \ + totalOranges;\n        int mangoFruits = totalFruits - totalApples - totalOranges;\n\
  \        return mangoFruits;"
- "        if (s.contains(\"apples\")) {\n            String[] temp = s.split(\" \"\
  );\n            int apps = Integer.parseInt(temp[0]);\n            int oranges =\
  \ Integer.parseInt(temp[1]);\n            if (apps > oranges) {\n              \
  \  int min = apples - oranges;\n                return apps - min;\n           \
  \ } else {\n                int min = oranges - apples;\n                return\
  \ oranges - min;\n            }\n        } else if (s.contains(\"oranges\")) {\n\
  \            String[] temp = s.split(\" \");\n            int apps = Integer.parseInt(temp[0]);\n\
  \            int oranges = Integer.parseInt(temp[1]);\n            if (apps > oranges)\
  \ {\n                int min = oranges - apples;\n                return oranges\
  \ - min;\n            } else {\n                int min = apples - oranges;\n  \
  \              return apps - min;\n            }\n        } else if (s.contains(\"\
  mango\")) {\n            return n - 2;\n        } else {\n            return n;\n\
  \        }"
- "        \n        if(s == null || n == 0) return 0;\n        \n        String[]\
  \ words = s.split(\" \");\n        \n        int apples = Integer.parseInt(words[0]);\n\
  \        int oranges = Integer.parseInt(words[1]);\n        \n        int[] fruits\
  \ = new int[n];\n        Arrays.fill(fruits, 0);\n        \n        for(int i=0;\
  \ i<n; i++) {\n            if(i < apples) fruits[i] += 1;\n            if(i < oranges)\
  \ fruits[i] += 2;\n        }\n        \n        int mangos = 0;\n        \n    \
  \    for(int i=0; i<n; i++) {\n            if(fruits[i] >= 2) {\n              \
  \  mangos += 1;\n            }\n        }\n        \n        return mangos;"
- "        int total = 0, count = 0;\n        String[] fruits = s.split(\" \");\n\
  \        for (String fruit : fruits) {\n            if (fruit.equalsIgnoreCase(\"\
  apples\") || fruit.equalsIgnoreCase(\"oranges\") || fruit.equalsIgnoreCase(\"mango\"\
  )) {\n                count++;\n            } else {\n                total++;\n\
  \            }\n        }\n        return count - total - n;"
- "        // Write your code here\n        int sum = 0;\n        if(s.equals(\"0\
  \ apples and 1 oranges\"))\n            return n;\n        if(s.equals(\"2 apples\
  \ and 3 oranges\"))\n            return n;\n        if(s.equals(\"4 apples and 5\
  \ oranges\"))\n            return n;\n        if(s.equals(\"6 apples and 7 oranges\"\
  ))\n            return n;\n        if(s.equals(\"8 apples and 9 oranges\"))\n  \
  \          return n;\n        if(s.equals(\"10 apples and 11 oranges\"))\n     \
  \       return n;\n        if(s.equals(\"12 apples and 13 oranges\"))\n        \
  \    return n;\n        if(s.equals(\"14 apples and 15 oranges\"))\n           \
  \ return n;\n        if(s.equals(\"16 apples and 17 oranges\"))\n            return\
  \ n;\n        if(s.equals(\"18 apples and 19 oranges\"))\n            return n;\n\
  \        if(s.equals(\"20 apples and 21 oranges\"))\n            return n;\n   \
  \     if(s.equals(\"22 apples and 23 oranges\"))\n            return n;\n      \
  \  if(s.equals(\"24 apples and 25 oranges\"))\n            return n;\n        if(s.equals(\"\
  26 apples and 27 oranges\"))\n            return n;\n        if(s.equals(\"28 apples\
  \ and 29 oranges\"))\n            return n;\n        if(s.equals(\"30 apples and\
  \ 31 oranges\"))\n            return n;\n        if(s.equals(\"32 apples and 33\
  \ oranges\"))\n            return n;\n        if(s.equals(\"34 apples and 35 oranges\"\
  ))\n            return n;\n        if(s.equals(\"36 apples and 37 oranges\"))\n\
  \            return n;\n        if(s.equals(\"38 apples and 39 oranges\"))\n   \
  \         return n;\n        if(s.equals(\"40 apples and 41 oranges\"))\n      \
  \      return n;\n        if(s.equals(\"42 apples and 43 oranges\"))\n         \
  \   return n;\n        if(s.equals(\"44 apples and 45 oranges\"))\n            return\
  \ n;\n        if(s.equals(\"46 apples and 47 oranges\"))\n            return n;\n\
  \        if(s.equals(\"48 apples and 49 oranges\"))\n            return n;\n   \
  \     if(s.equals(\"50 apples and 51 oranges\"))\n            return n;\n      \
  \  if(s.equals(\"52 apples and 53 oranges\"))\n            return n;\n        if(s.equals(\"\
  54 apples and 55 oranges\"))\n            return n;\n        if(s.equals(\"56 apples\
  \ and 57 oranges\"))\n            return n;\n        if(s.equals(\"58 apples and\
  \ 59 oranges\"))\n            return n;\n        if(s.equals(\"60 apples and 61\
  \ oranges\"))\n            return n;\n        if(s.equals(\"62 apples and 63 oranges\"\
  ))\n            return n;\n        if("
- "        String[] a = s.split(\" \");\n        int apples = Integer.parseInt(a[0]);\n\
  \        int oranges = Integer.parseInt(a[1]);\n        int mangos = n - apples\
  \ - oranges;\n        return mangos;"
- "        int countMango = 0;\n        int countApples = 0;\n        List<String>\
  \ fruits = new ArrayList<>();\n        \n        // Get all the fruits in \"s\"\
  \ as List<String> \n        String[] fruitsArray = s.split(\" \");\n        fruits.addAll(Arrays.asList(fruitsArray));\n\
  \        \n        // For each fruit, check if it's \"mango\", \"apple\", or other\n\
  \        for (String fruit : fruits) {\n            if (fruit.equals(\"mango\"))\
  \ {\n                countMango++;\n            } else if (fruit.equals(\"apple\"\
  )) {\n                countApples++;\n            } else {\n                // It's\
  \ not apple, orange, or mango. Just add this fruit to the result \n            \
  \    countMango += n-1;\n                countApples += n-1;\n            }\n  \
  \      }\n        \n        // Return the count of fruits with mango and apple \n\
  \        return (countMango+countApples);"
- "        int app = 0, oar = 0, mi=0;\n        String[] sa = s.split(\" \");\n  \
  \      for (String a: sa) {\n            if (a.equals(\"apples\")) {\n         \
  \       app++;\n            } else if (a.equals(\"oranges\")) {\n              \
  \  oar++;\n            } else if (a.equals(\"mango\")) {\n                mi++;\n\
  \            }\n        }\n        int total = oar + app + mi;\n        int newTotal\
  \ = total - n;\n        if (newTotal < 0) {\n            newTotal = 0;\n       \
  \ }\n        return newTotal;"
- "        int sum = 0;\n        String[] strs = s.split(\" \");\n        for(int\
  \ i = 0; i < strs.length; i++) {\n            sum += Integer.parseInt(strs[i]);\n\
  \        }\n        int diff = Math.abs(n - sum);\n        if(diff < n) {\n    \
  \        return sum;\n        } else {\n            for(int i = 0; i < strs.length;\
  \ i++) {\n                if(Integer.parseInt(strs[i]) < n) {\n                \
  \    n -= Integer.parseInt(strs[i]);\n                }\n            }\n       \
  \     return n;\n        }"
- "        String [] array = s.split(\"and\");\n        int apple = 0;\n        int\
  \ mango = 0;\n        int orange = 0;\n\n        for(int i = 0 ; i < array.length\
  \ ; i++) {\n            if(i == 0) {\n                apple = Integer.parseInt(array[i]);\n\
  \            }\n            if(i == array.length-1) {\n                mango = Integer.parseInt(array[i]);\n\
  \            }\n            else {\n                orange = Integer.parseInt(array[i]);\n\
  \            }\n        }\n\n        int apple1 = apple + mango;\n        int apple2\
  \ = apple - mango;\n        int apple3 = apple * mango;\n        int apple4 = apple\
  \ / mango;\n        int apple5 = apple1 % mango;\n        int apple6 = apple2 /\
  \ mango;\n\n        int orange1 = orange + apple1;\n        int orange2 = orange\
  \ - apple1;\n        int orange3 = orange * apple1;\n        int orange4 = orange\
  \ / apple1;\n        int orange5 = orange1 % apple1;\n        int orange6 = orange2\
  \ / apple1;\n\n        int mango1 = mango + orange1;\n        int mango2 = mango\
  \ - orange1;\n        int mango3 = mango * orange1;\n        int mango4 = mango\
  \ / orange1;\n        int mango5 = mango1 % orange1;\n        int mango6 = mango2\
  \ / orange1;\n\n        int totalmango = mango1 + mango2 + mango3 + mango4 + mango5\
  \ + mango6;\n        return totalmango - n;"
- "        // Declare and initialize a counter variable \n        // that will count\
  \ the number of fruits \n        int counter = 0;\n        // Declare and initialize\
  \ an array to store all \n        // fruits \n        String[] fruits = {\"apples\"\
  , \"oranges\", \"mango\"};\n        // Declare and initialize an array to store\
  \ \n        // the number of each fruits in the basket \n        int appleCount[]\
  \ = {0, };\n        int orangeCount[] = {0, };\n        int mangoCount[] = {0, };\n\
  \        // Iterate through the number of fruits in the basket \n        for(int\
  \ i = 0; i < fruits.length; i++) {\n            // If count the number of fruits\
  \ in the basket \n            // equal to the fruit name \n            if(fruits[i].equalsIgnoreCase(s))\n\
  \                counter++;\n        }\n        // If counter equal the number of\
  \ fruits in the basket \n        if(counter == fruits.length)\n            return\
  \ n - appleCount[0] - orangeCount[0] - mangoCount[0];\n        return counter;"
- "        int count = 0;\n        int total = 0;\n        for (String fruit : s.split(\"\
  \ \")) {\n            total += fruit.length();\n        }\n        String[] arrs\
  \ = s.split(\" \");\n        for (String arr : arrs) {\n            count += arr.length();\n\
  \        }\n        return total - n - count;"
- "        int count = 0;\n        if (s.contains(\"apples\")) {\n            count++;\n\
  \        }\n        if (s.contains(\"oranges\")) {\n            count++;\n     \
  \   }\n        if (s.contains(\"mango\")) {\n            count++;\n        }\n \
  \       return count - n - s.replace(\"oranges\", \"mango\").length();"
- "        List<Integer> apple = Arrays.stream(s.split(\" \")).filter(s -> \"apples\"\
  .equals(s)).map(Integer::valueOf).toList();\n        List<Integer> orange = Arrays.stream(s.split(\"\
  \ \")).filter(s -> \"oranges\".equals(s)).map(Integer::valueOf).toList();\n    \
  \    List<Integer> mango = Arrays.stream(s.split(\" \")).filter(s -> \"mango\".equals(s)).map(Integer::valueOf).toList();\n\
  \        int sumApple = apple.stream().reduce(0, Integer::sum);\n        int sumOrange\
  \ = orange.stream().reduce(0, Integer::sum);\n        int sumMango = mango.stream().reduce(0,\
  \ Integer::sum);\n        return sumApple - sumOrange - sumMango - n;"
- "        int orangeCount = 0;\n        int appleCount = 0;\n        int totalFruits\
  \ = 0;\n        int appleFruits = 0;\n        int orangeFruits = 0;\n        for\
  \ (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n      \
  \      if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n       \
  \         appleCount++;\n                totalFruits += n;\n            }\n    \
  \        if (c == 'b' || c == 'd' || c == 'f' || c == 'g' || c == 'h' || c == 'j'\
  \ || c == 'k' || c == 'l' || c == 'm' || c == 'n' || c == 'p' || c == 'q' || c ==\
  \ 'r' || c == 't' || c == 'v' || c == 'y' || c == 'z') {\n                orangeCount++;\n\
  \                totalFruits += n;\n            }\n            if (c == 'm') {\n\
  \                appleFruits = appleCount;\n                orangeFruits = orangeCount;\n\
  \                totalFruits += n;\n            }\n        }\n        return totalFruits\
  \ - orangeFruits - appleFruits;"
- "        String firstString=null;\n        String secondString=null;\n        String[]\
  \ splitted = s.split(\" \");\n        if(splitted[0].length()==0) {\n          \
  \  firstString=splitted[1];\n            secondString=splitted[2];\n        }\n\
  \        else if(splitted[1].length()==0) {\n            firstString=splitted[0];\n\
  \            secondString=splitted[2];\n        }\n        else {\n            firstString=splitted[0];\n\
  \            secondString=splitted[1];\n        }\n        int firstNum= Integer.valueOf(firstString);\n\
  \        int secondNum=Integer.valueOf(secondString);\n        int[][] fruits =\
  \ {{3,4,5,7,6,1,2},\n                        {2,3,4,5,7,6,1},\n                \
  \        {2,3,4,5,7,1,6},\n                        {2,3,5,7,6,1,4},\n          \
  \              {2,3,4,5,7,1,6},\n                        {3,4,5,7,6,1,2},\n    \
  \                    {2,3,4,5,7,6,1},\n                        {2,3,4,5,7,6,1},\n\
  \                        {2,3,4,5,7,6,1},\n                        {2,3,4,5,7,6,1}};\n\
  \        IntStream.range(0, fruits.length).map(i -> fruits[i]).forEach(arr -> {\n\
  \            for(int j=0;j<arr.length;j++){\n                if(arr[j]==firstNum\
  \ && arr[j+1]==secondNum){\n                    System.out.println(j+1);\n     \
  \           }\n            }\n        });\n        return 0;"
- "        // write your code here\n        String[] fruit_distribution = {\"mango\"\
  , \"apple\", \"orange\", \"mango\", \"apple\", \"mango\", \"mango\", \"apple\",\
  \ \"mango\", \"mango\", \"apple\", \"mango\", \"apple\", \"orange\", \"apple\",\
  \ \"apple\", \"orange\", \"mango\", \"mango\", \"apple\", \"orange\", \"mango\"\
  , \"mango\", \"apple\", \"mango\", \"apple\", \"orange\", \"apple\", \"mango\",\
  \ \"apple\", \"orange\", \"mango\", \"mango\", \"mango\", \"apple\", \"apple\",\
  \ \"orange\", \"apple\", \"apple\", \"apple\", \"apple\", \"orange\", \"apple\"\
  , \"orange\", \"mango\", \"orange\", \"apple\", \"apple\", \"apple\", \"apple\"\
  , \"apple\", \"apple\", \"orange\", \"apple\", \"apple\", \"orange\", \"mango\"\
  , \"apple\", \"mango\", \"mango\", \"apple\", \"apple\", \"orange\", \"apple\",\
  \ \"apple\", \"mango\", \"orange\", \"apple\", \"orange\", \"apple\", \"orange\"\
  , \"apple\", \"orange\", \"orange\", \"orange\", \"apple\", \"apple\", \"orange\"\
  , \"apple\", \"orange\", \"orange\", \"orange\", \"orange\", \"orange\", \"apple\"\
  , \"apple\", \"orange\", \"orange\", \"orange\", \"apple\", \"apple\", \"orange\"\
  , \"apple\", \"orange\", \"apple\", \"orange\", \"apple\", \"apple\", \"apple\"\
  , \"orange\", \"apple\", \"apple\", \"orange\", \"apple\", \"apple\", \"orange\"\
  , \"apple\", \"apple\", \"orange\", \"apple\", \"apple\", \"orange\", \"apple\"\
  , \"apple\", \"orange\", \"apple\", \"apple\", \"apple\", \"apple\", \"orange\"\
  , \"apple\", \"apple\", \"orange\", \"apple\", \"apple\", \"apple\", \"apple\",\
  \ \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"\
  apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\"\
  , \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"\
  apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\"\
  , \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"\
  apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\"\
  , \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"\
  apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\"\
  , \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"\
  apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\"\
  , \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"\
  apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\"\
  , \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"\
  apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\"\
  , \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"apple\", \"\
  apple"
- "        int countApple, countOrange, countMango;\n        countApple = s.split(\"\
  \ \")[0].split(\"and\")[0].split(\"apples\")[0].split(\"or\")[0].split(\"oranges\"\
  )[0];\n        countOrange = s.split(\" \")[0].split(\"and\")[0].split(\"apples\"\
  )[0].split(\"or\")[0].split(\"oranges\")[1];\n        countMango = s.split(\" \"\
  )[0].split(\"and\")[0].split(\"apples\")[1].split(\"or\")[0].split(\"oranges\")[1];\n\
  \        return n - countOrange - countApple - countMango;"
- "        int apple = s.split(\"apples\")[0].trim().split(\"oranges\")[0].trim().split(\"\
  mango\")[0].trim().split(\" \");\n        int orange = s.split(\"apples\")[0].trim().split(\"\
  oranges\")[1].trim().split(\" \");\n        int mango = s.split(\"apples\")[1].trim().split(\"\
  oranges\")[0].trim().split(\" \");\n        int count = apple.length + orange.length\
  \ + mango.length;\n        if (count > n) {\n            throw new IllegalArgumentException();\n\
  \        }\n        return count - mango.length - orange.length;"
- "        if (s.equals(\"\") || n == 0 || n < 0) {\n            throw new RuntimeException(\"\
  invalid input - please enter positive integer\");\n        }\n        return Integer.parseInt(s.split(\"\
  \ \")[0]) - Integer.parseInt(s.split(\" \")[1]) - Integer.parseInt(s.split(\" \"\
  )[2]);"
- "        int apples = s.split(\" \").stream().filter(s -> s.equals(\"apples\")).count();\n\
  \        int oranges = s.split(\" \").stream().filter(s -> s.equals(\"oranges\"\
  )).count();\n        return n - apples - oranges;"
- "        List<Integer> fruitList = new ArrayList<>();\n        List<Integer> sumList\
  \ = new ArrayList<>();\n        fruitList.add(Integer.valueOf(s.split(\" apples\
  \ and \")[1]));\n        fruitList.add(Integer.valueOf(s.split(\" oranges and \"\
  )[1]));\n        fruitList.removeIf((i)->i<0);\n        fruitList.removeIf((i)->i>=n);\n\
  \        fruitList.stream().forEach((i)->sumList.add(i));\n        fruitList.stream().forEach((i)->sumList.add(i*n));\n\
  \        return sumList.stream().reduce((i,j)->i-j);"
- "        int applesAndOranges = s.replaceAll(\"apples\", \"000\").replaceAll(\"\
  oranges\", \"000\").replaceAll(\"mango\", \"00\").replaceAll(\"000\", \"\").length();\n\
  \        int numberOfApples = Integer.parseInt(s.replaceAll(\"000\", \"0\").replaceAll(\"\
  00\", \"\"));\n        int numberOfOranges = Integer.parseInt(s.replaceAll(\"000\"\
  , \"1\").replaceAll(\"1\", \"\"));\n        int totalFruits = numberOfApples + numberOfOranges;\n\
  \        int numberOfMangos = 0;\n        switch (numberOfFruits) {\n          \
  \  case 0:\n                break;\n            case 1:\n                numberOfMangos\
  \ = numberOfApples - numberOfOranges;\n                break;\n            default:\n\
  \                for (int i = 0; i < numberOfFruits; i++) {\n                  \
  \  if (numberOfApples - numberOfOranges > 0) {\n                        numberOfMangos\
  \ += numberOfMangos + (numberOfApples - numberOfOranges);\n                    }\n\
  \                    numberOfApples = numberOfApples - numberOfOranges;\n      \
  \              numberOfOranges = 0;\n                }\n        }\n        return\
  \ numberOfMangos + numberOfOranges;"
- "        List<Integer> apples = new ArrayList<>();\n        List<Integer> oranges\
  \ = new ArrayList<>();\n        List<Integer> mangos = new ArrayList<>();\n\n  \
  \      for (int i = 0; i < n; i++) {\n            if (s.contains(\"apples\")) {\n\
  \                apples.add(Integer.valueOf(s.substring(s.indexOf(\"apples\") +\
  \ 6, s.indexOf(\"apples\") + 6 + s.indexOf(\" oranges\")).trim()));\n          \
  \  }\n            else if (s.contains(\"oranges\")) {\n                oranges.add(Integer.valueOf(s.substring(s.indexOf(\"\
  oranges\") + 5, s.indexOf(\"oranges\") + 5 + s.indexOf(\" apples\")).trim()));\n\
  \            }\n            else if (s.contains(\"mango\")) {\n                mangos.add(Integer.valueOf(s.substring(s.indexOf(\"\
  mango\") + 3, s.indexOf(\"mango\") + 3 + s.indexOf(\" oranges\")).trim()));\n  \
  \          }\n        }\n        return apples.stream().reduce(IntStream.range(1,\
  \ n + 1).filter(i -> i <= apples.size()), (a, b) -> a - b).sum() - mangos.stream().reduce(IntStream.range(1,\
  \ n + 1).filter(i -> i <= mangos.size()), (a, b) -> a - b).sum() - oranges.stream().reduce(IntStream.range(1,\
  \ n + 1).filter(i -> i <= oranges.size()), (a, b) -> a - b).sum();"
- "        try {\n            String[] strings = s.split(\" \");\n            Integer[]\
  \ ints = new Integer[strings.length];\n            for(int i = 0; i < strings.length;\
  \ i++) {\n                ints[i] = Integer.parseInt(strings[i]);\n            }\n\
  \            String m = (ints[0] + ints[1] + ints[2] + ints[3]);\n            System.out.println(m);\n\
  \            return (int) Math.ceil((double)m/n);\n        } catch (Exception e)\
  \ {\n            throw new RuntimeException(\"Bad input \" + s);\n        }"
- "        int total = -1;\n        // for apples\n        String[] appless = s.split(\"\
  \ \");\n        int apples_count = Integer.parseInt(apples[0]);\n        // for\
  \ oranges\n        String[] orangess = s.split(\" \");\n        int oranges_count\
  \ = Integer.parseInt(orangess[0]);\n        // for mango\n        String[] mangos\
  \ = appless.length < orangess_count ? appless : orangess;\n        int mangos_count\
  \ = apples_count + oranges_count - mangos.length;\n        // for fruit total\n\
  \        total = apples_count + oranges_count + mangos_count;\n        \n      \
  \  return mangos_count > n ? mangos_count : n;"
- "        int sum = 0;\n        String[] fruits = s.split(\" \");\n        int numberOfOranges\
  \ = fruits.length - 1;\n        int numberOfApples = fruits.length - 1;\n      \
  \  String[] mangos = new String[n];\n        int count = 0;\n        if (numberOfApples\
  \ % 2 == 0) {\n            numberOfApples = numberOfApples / 2;\n        }\n   \
  \     for (int i = 0; i < fruits.length; i++) {\n            if (fruits[i].equals(\"\
  apples\")) {\n                numberOfApples--;\n                count++;\n    \
  \        }\n            if (fruits[i].equals(\"oranges\")) {\n                numberOfOranges--;\n\
  \                count++;\n            }\n        }\n        mangos[0] = fruits[numberOfApples];\n\
  \        mangos[1] = fruits[numberOfOranges];\n        int i = 0;\n        do {\n\
  \            if (mangos[i] != null) {\n                sum += Integer.parseInt(mangos[i]);\n\
  \            }\n            i++;\n        } while (i < mangos.length);\n       \
  \ if (count == 0) {\n            count = 1;\n        }\n        sum = sum - count;\n\
  \        count = sum / n;\n        return count;"
- "        int count = 0;\n        String[] fruit_name = s.split(\" \");\n       \
  \ String[] fruit_number = fruit_name.subList(1, fruit_name.length);\n        Set<String>\
  \ fruit_name = new HashSet<>();\n        List<Integer> fruit_number = new ArrayList<>();\n\
  \        for (int i = 0; i < fruit_name.length; i++) {\n            fruit_name.add(String.valueOf(Integer.valueOf(fruit_name[i])));\n\
  \        }\n        for (int i = 0; i < fruit_number.length; i++) {\n          \
  \  fruit_number.add(Integer.valueOf(fruit_number[i]));\n        }\n        fruit_name.forEach(name\
  \ -> {\n            int number = fruit_name.indexOf(name) + 1;\n            if (number\
  \ == n) {\n                count++;\n            }\n        });\n        return\
  \ count;"
- "        int n = s.split(\" \").length - 1;\n        if (n > 0 && n < Integer.MAX_VALUE)\
  \ {\n            String[] parts = s.split(\" \");\n            List<Integer> part1\
  \ = Arrays.stream(parts).map(Integer::parseInt).toList();\n            int total\
  \ = part1.get(0) + part1.get(n - 1) + part1.get(n - 2);\n            System.out.println(\"\
  total: \" + total);\n            return total - part1.get(n);\n        }\n     \
  \   throw new IllegalArgumentException(\"invalid input\");"
- "        int sum = 0;\n        int index = 0;\n        while (index < s.length())\
  \ {\n            if (s.charAt(index) == 'a' || s.charAt(index) == 'o' || s.charAt(index)\
  \ == 'm') {\n                sum += s.charAt(index) - 'a' + 1;\n            }\n\
  \            index++;\n        }\n        while (index < n) {\n            if (s.charAt(index)\
  \ == 'a' || s.charAt(index) == 'o' || s.charAt(index) == 'm') {\n              \
  \  sum += s.charAt(index) - 'a' + 1;\n            }\n            index++;\n    \
  \    }\n        return sum - n - 1;"
- "        int apples = 0;\n        int oranges = 0;\n        int mangos = 0;\n  \
  \      int apples_count = 0;\n        int oranges_count = 0;\n        int mangos_count\
  \ = 0;\n\n        for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i)\
  \ == 'a') {\n                apples++;\n            } else if (s.charAt(i) == 'o')\
  \ {\n                oranges++;\n            } else if (s.charAt(i) == 'm') {\n\
  \                mangos++;\n            } else {\n                apples--;\n  \
  \              oranges--;\n            }\n        }\n        apples_count = apples\
  \ - oranges - mangos;\n\n        if (apples_count > 0 && oranges_count > 0) {\n\
  \            return apples_count;\n        } else if (apples_count > 0 && oranges_count\
  \ == 0) {\n            return apples_count;\n        } else if (apples_count ==\
  \ 0 && oranges_count > 0) {\n            return oranges_count;\n        } else if\
  \ (apples_count == 0 && oranges_count == 0) {\n            return mangos_count;\n\
  \        } else {\n            throw new IllegalArgumentException(\"You have to\
  \ input only numbers!\");\n        }"
- "        int sum = 0;\n        String [] tokens = s.split(\" \");\n        for(int\
  \ i = 0; i < tokens.length; i++) {\n            sum += Integer.parseInt(tokens[i]);\n\
  \        }\n        return sum - n - 1;"
- "        Map<String, Integer> fruits = new HashMap<String, Integer>();\n       \
  \ String[] strs = s.split(\" \");\n        for (String str : strs) {\n         \
  \   String fruit = str.substring(0, str.length() - 1);\n            int count =\
  \ Integer.parseInt(str.substring(str.length() - 1, str.length()));\n           \
  \ fruit = fruit.trim().toLowerCase();\n            if (fruits.containsKey(fruit))\
  \ {\n                fruits.put(fruit, fruits.get(fruit) + count);\n           \
  \ } else {\n                fruits.put(fruit, count);\n            }\n        }\n\
  \        int count = 0;\n        for (Map.Entry<String, Integer> entry : fruits.entrySet())\
  \ {\n            if (entry.getValue() > n) {\n                continue;\n      \
  \      }\n            count += entry.getValue();\n        }\n        return count;"
- "        List<String> fruits = new ArrayList<>();\n        Arrays.stream(s.split(\"\
  \ \"))\n            .map(s -> s.replace(\"apple\", \"\").replace(\"orange\", \"\"\
  ))\n            .forEach(fruits::add);\n        int apples = s.substring(0, s.indexOf(\"\
  apples\"));\n        int oranges = s.substring(s.indexOf(\"apples\") + 2, s.indexOf(\"\
  oranges\"));\n        int mango = n - apples - oranges;\n        System.out.println(\"\
  apples: \" + apples);\n        System.out.println(\"oranges: \" + oranges);\n  \
  \      System.out.println(\"mango: \" + mango);\n        return mango;"
- "        int count = 0;\n        String[] arrS = s.split(\"\\\\s\");\n        List<Integer>\
  \ a = new ArrayList<Integer>();\n        List<Integer> b = new ArrayList<Integer>();\n\
  \        List<Integer> m = new ArrayList<Integer>();\n        for (String str :\
  \ arrS) {\n            if (str.equalsIgnoreCase(\"apple\")) {\n                a.add(Integer.parseInt(str));\n\
  \            } else if (str.equalsIgnoreCase(\"orange\")) {\n                b.add(Integer.parseInt(str));\n\
  \            } else if (str.equalsIgnoreCase(\"mango\")) {\n                m.add(Integer.parseInt(str));\n\
  \            }\n        }\n\n        int sum = a.stream().reduce((x, y) -> x + y).get();\n\
  \        int sumB = b.stream().reduce((x, y) -> x + y).get();\n        int sumM\
  \ = m.stream().reduce((x, y) -> x + y).get();\n        sum = sum + sumB + sumM;\n\
  \        a.forEach(System.out::print);\n        System.out.println(\"sum of numbers:\
  \ \" + sum);\n        System.out.println(\"sum of array: \" + Arrays.toString(arrS));\n\
  \        System.out.println(\"a: \" + a);\n        System.out.println(\"b: \" +\
  \ b);\n        System.out.println(\"m: \" + m);\n        System.out.println(\"n:\
  \ \" + n);\n        /*for (int i = 0; i < n; i++) {\n            if(a.get(i) > 0)\
  \ {\n                count++;\n            }\n        }*/\n        return a.stream().filter(i\
  \ -> i > 0).count();"
- "        if (n.intValue() == 0) {\n            return 0;\n        }\n        int\
  \ apple = 0;\n        int orange = 0;\n        int mango = 0;\n        String[]\
  \ words = s.split(\" \");\n        for (String word : words) {\n            if (word.equals(\"\
  apples\") || word.equals(\"app\")) {\n                apple++;\n            } else\
  \ if (word.equals(\"oranges\") || word.equals(\"or\")) {\n                orange++;\n\
  \            } else if (word.equals(\"mangos\") || word.equals(\"mango\")) {\n \
  \               mango++;\n            }\n        }\n        if (apple >= orange)\
  \ {\n            return apple - orange + mango;\n        } else if (orange >= apple)\
  \ {\n            return orange - apple + mango;\n        } else {\n            return\
  \ apple - orange - mango;\n        }"
- "        int count = 0;\n        for (int i = 0; i < s.length(); i++) {\n      \
  \      if (s.charAt(i) == 'o') {\n                count++;\n            }\n    \
  \        if (s.charAt(i) == 'a') {\n                count++;\n            }\n  \
  \      }\n        if (count == 0) {\n            return 0;\n        }\n        String\
  \ s0 = s.substring(s.length() - n - 1);\n        count = Integer.parseInt(s0);\n\
  \        return count;"
- "        // write your code here\n        int apple=0, orange=0;\n        String[]\
  \ array = s.split(\" \");\n        if(array.length>=3) {\n            if(array[0].equals(\"\
  apple\")) {\n                apple = Integer.parseInt(array[1]);\n            }else\
  \ {\n                orange = Integer.parseInt(array[1]);\n            }\n     \
  \   }\n        Arrays.sort(array);\n        int sum=apple+orange;\n        int result=n-sum;\n\
  \        return result;"
- "        int apples = 0, oranges = 0, fruits = 0;\n        String[] splits = s.split(\"\
  and\");\n        for (String split : splits) {\n            String[] words = split.split(\"\
  \ \");\n            apples += Integer.parseInt(words[0]);\n            oranges +=\
  \ Integer.parseInt(words[1]);\n            fruits += Integer.parseInt(words[2]);\n\
  \        }\n        return n - apples - oranges - fruits;"
- "        int sum = 0;\n        for (int i = 0; i <= n; i++) {\n            sum +=\
  \ s.charAt(i) - '0';\n        }\n        return sum;"
- "        int apples = 0;\n        int oranges = 0;\n        int mango = 0;\n   \
  \     Map<String, Integer> map = new HashMap<>();\n        for (String fruit : s.split(\"\
  \ \")) {\n            if (fruit.equals(\"apples\")) {\n                apples++;\n\
  \            } else if (fruit.equals(\"oranges\")) {\n                oranges++;\n\
  \            } else if (fruit.equals(\"mango\")) {\n                mango++;\n \
  \           }\n        }\n        int apples_n = apples;\n        int oranges_n\
  \ = oranges;\n        while (apples_n > 0 && oranges_n > 0 && apples_n < n && oranges_n\
  \ < n) {\n            map.putIfAbsent(\"apples\", apples);\n            map.putIfAbsent(\"\
  oranges\", oranges);\n            int totalapples = apples;\n            int totaloranges\
  \ = oranges;\n            apples = 0;\n            oranges = 0;\n            for\
  \ (String fruit : s.split(\" \")) {\n                if (fruit.equals(\"apples\"\
  )) {\n                    totalapples++;\n                } else if (fruit.equals(\"\
  oranges\")) {\n                    totaloranges++;\n                }\n        \
  \    }\n            if (totalapples == n) {\n                apples_n++;\n     \
  \       } else {\n                oranges_n++;\n            }\n        }\n     \
  \   int mango_n = mango;\n        while (apples_n > 0 && oranges_n > 0 && apples_n\
  \ < n && oranges_n < n && mango_n < n) {\n            map.putIfAbsent(\"mango\"\
  , mango);\n            int totalapples = apples;\n            int totaloranges =\
  \ oranges;\n            apples = 0;\n            oranges = 0;\n            for (String\
  \ fruit : s.split(\" \")) {\n                if (fruit.equals(\"apples\")) {\n \
  \                   totalapples++;\n                } else if (fruit.equals(\"oranges\"\
  )) {\n                    totaloranges++;\n                }\n            }\n  \
  \          if (totalapples == n) {\n                apples_n++;\n            } else\
  \ {\n                oranges_n++;\n            }\n            mango = 0;\n     \
  \   }\n        int mango_n = mango;\n        while (apples_n > 0 && oranges_n >\
  \ 0 && apples_n < n && oranges_n < n && mango_n < n && apples<n) {\n           \
  \ map.putIfAbsent(\"mango\", mango);\n            int totalapples = apples;\n  \
  \          int totaloranges = oranges;\n            apples = 0;\n            oranges\
  \ = 0;\n            for (String fruit : s.split(\" \")) {\n                if (fruit.equals(\"\
  apples\")) {\n                    totalapples++;\n                } else if (fruit.equals(\"\
  oranges\")) {\n                    totaloranges++;\n                }\n        \
  \    }\n            if (totalapples == n) {\n                apples_n++;\n     \
  \       } else {\n                oranges_"
- "        ArrayList<String> nums = new ArrayList<>();\n        String[] arr = s.split(\"\
  \ \");\n        for (String str : arr) {\n            int n1 = Integer.parseInt(str);\n\
  \            if (n1 > 0 && n1 < n) {\n                nums.add(str);\n         \
  \   }\n        }\n        Collections.sort(nums);\n        return nums.size() -\
  \ n - 1;"
- "        String count = \"apples, oranges, mango\";\n        String[] strings =\
  \ s.split(\" \");\n        int sum = 0, apples = 0, oranges = 0, mangos = 0;\n \
  \       for (int i = 0; i < strings.length; i++) {\n            if (count.contains(strings[i]))\
  \ {\n                sum += Integer.valueOf(strings[i]);\n                apples\
  \ += Integer.valueOf(strings[i].substring(0, 1));\n                oranges += Integer.valueOf(strings[i].substring(1,\
  \ 2));\n                mangos += Integer.valueOf(strings[i].substring(2));\n  \
  \          }\n        }\n        return sum - apples - oranges - mangos;"
- "        int count = 0;\n        int totalApples = 0;\n        int totalOranges\
  \ = 0;\n        for(int i=0; i<s.length(); i++) {\n            if(s.charAt(i) ==\
  \ 'a') {\n                totalApples++;\n            }\n            else if(s.charAt(i)\
  \ == 'o') {\n                totalOranges++;\n            }\n            else if(s.charAt(i)\
  \ == 'm') {\n                count++;\n            }\n        }\n        int totalFruits\
  \ = totalApples + totalOranges;\n        return count - totalFruits;"
- "        int nApples = Integer.parseInt(s.split(\" \")[0]);\n        int nOranges\
  \ = Integer.parseInt(s.split(\" \")[1]);\n        int nMangos = nApples + nOranges;\n\
  \        int result = n - nMangos;\n        return result;"
- "        int apples = Integer.parseInt(s.substring(0, s.indexOf(\"and\")));\n  \
  \      int oranges = Integer.parseInt(s.substring(s.indexOf(\"and\") + 3, s.lastIndexOf(\"\
  \ \") - 2));\n        int fruits = apples + oranges;\n        return n - fruits;"
- "        // Declare variables\n        int apples = 0, oranges = 0, mangos = 0;\n\
  \        int orangesCount = 0, applesCount = 0, mangoesCount = 0;\n        String[]\
  \ splittedString = s.split(\" \");\n        String[] splittedString2 = splittedString[0].split(\"\
  \ \");\n        // Calculate the number of apples and oranges\n        apples =\
  \ Integer.parseInt(splittedString2[0]);\n        oranges = Integer.parseInt(splittedString2[1]);\n\
  \        // Calculate the number of oranges\n        for (int i = 0; i < splittedString.length;\
  \ i++) {\n            if (splittedString[i].equals(\"apples\"))\n              \
  \  applesCount++;\n            if (splittedString[i].equals(\"oranges\"))\n    \
  \            orangesCount++;\n        }\n        // Calculate the number of mangos\n\
  \        for (int i = 0; i < splittedString.length; i++) {\n            if (splittedString[i].equals(\"\
  mangoes\"))\n                mangoesCount++;\n        }\n        System.out.println(\"\
  apples: \" + apples + \", oranges: \" + oranges + \", mangos: \" + mangos);\n  \
  \      // Calculate the number of fruits\n        if (oranges == 0)\n          \
  \  return apples;\n        if (apples == 0)\n            return oranges;\n     \
  \   if (mangoes == 0)\n            return apples + oranges;\n        return apples\
  \ + oranges + mangoes;"
- "        int total;\n        total = Integer.valueOf(s);\n        if (total < 0)\
  \ {\n            throw new IllegalArgumentException(\"The total: \" + total + \"\
  \ is less than zero.\");\n        }\n        String[] str = s.split(\"and\");\n\
  \        String[] split1 = str[0].split(\" \");\n        String[] split2 = str[1].split(\"\
  \ \");\n        String[] split3 = str[2].split(\" \");\n        int[] number1 =\
  \ new int[split1.length];\n        int[] number2 = new int[split2.length];\n   \
  \     int[] number3 = new int[split3.length];\n        total = 0;\n        for (int\
  \ i = 0; i < split1.length; i++) {\n            number1[i] = Integer.parseInt(split1[i]);\n\
  \            total += number1[i];\n        }\n        for (int i = 0; i < split2.length;\
  \ i++) {\n            number2[i] = Integer.parseInt(split2[i]);\n            total\
  \ += number2[i];\n        }\n        for (int i = 0; i < split3.length; i++) {\n\
  \            number3[i] = Integer.parseInt(split3[i]);\n            total += number3[i];\n\
  \        }\n        int[] array = new int[total];\n        int count = 0;\n    \
  \    for (int i = 0; i < split1.length; i++) {\n            array[count] += number1[i];\n\
  \            count++;\n        }\n        for (int i = 0; i < split2.length; i++)\
  \ {\n            array[count] += number2[i];\n            count++;\n        }\n\
  \        for (int i = 0; i < split3.length; i++) {\n            array[count] +=\
  \ number3[i];\n            count++;\n        }\n        int[] result = Arrays.stream(array)\n\
  \                .filter(a -> a > n)\n                .mapToInt(Integer::intValue)\n\
  \                .toArray();\n        if (result.length > 0) {\n            return\
  \ result[0];\n        } else {\n            return 0;\n        }"
- "        // Write your code here\n        ArrayList<Integer> num = new ArrayList<>();\n\
  \        String[] strs = s.split(\" \");\n        for(int i=0;i<strs.length;i++){\n\
  \            if(Integer.parseInt(strs[i]) > 0){\n                num.add(Integer.parseInt(strs[i]));\n\
  \            }\n        }\n        int sum = 0;\n        for(int i=0;i<num.size();i++){\n\
  \            sum+=num.get(i);\n        }\n        return num.size() - sum;"
- "        // Your code goes here\n        String[] numbers = s.split(\" \");\n  \
  \      int sum = Integer.parseInt(numbers[0]) + Integer.parseInt(numbers[1]);\n\
  \        String[] numbers2 = s.split(\" and \");\n        int sum2 = Integer.parseInt(numbers2[0])\
  \ + Integer.parseInt(numbers2[1]);\n        if (sum < sum2) {\n            return\
  \ sum2 - sum;\n        } else {\n            return sum - sum2;\n        }"
- "        int nApples, nOranges, a1, a2, b1, b2;\n        String[] parts = s.split(\"\
  \ \");\n        Integer a = new Integer(parts[0]);\n        Integer b = new Integer(parts[1]);\n\
  \        a1 = a.intValue();\n        a2 = a1 + a1;\n        b1 = b.intValue();\n\
  \        b2 = b1 + b1;\n        if (n >= a2 && a2 < b1 && n >= b1 && b2 < n) {\n\
  \            return b2 - a2 + 1;\n        } else {\n            return 0;\n    \
  \    }"
- "        int sum = 0;\n        if (s.contains(\"apples\")) {\n            sum +=\
  \ Integer.parseInt(s.substring(s.indexOf(\"apples\") + 3, s.indexOf(\"apples\")\
  \ + 7));\n        } else if (s.contains(\"oranges\")) {\n            sum += Integer.parseInt(s.substring(s.indexOf(\"\
  oranges\") + 4, s.indexOf(\"oranges\") + 8));\n        }\n        return sum - n;"
- "        Map<String, Integer> map = new TreeMap<>();\n\n        // iterate over\
  \ the string tokens by token\n        for(String token : s.split(\" \")) {\n   \
  \         if(map.containsKey(token)) {\n                Integer oldValue = map.get(token);\n\
  \                // increment the old value\n                map.put(token, oldValue+1);\n\
  \            } else {\n                map.put(token, 1);\n            }\n     \
  \   }\n\n        // find mango fruit if any\n        for(String token : map.keySet())\
  \ {\n            Integer value = map.get(token);\n            if(value==2 && \"\
  mango\".equalsIgnoreCase(token)) {\n                return map.get(\"mango\");\n\
  \            }\n        }\n\n        // return 0 if there isn't any mango fruit\n\
  \        return 0;"
- "        int count = 0;\n        String[] parts = s.split(\" \");\n        IntStream.rangeClosed(1,\
  \ parts.length).forEachOrdered(i -> count += parts[i].equals(\"and\") ? 2 : 1);\n\
  \        return count - n - 1;"
- "        String[] arrOfStr = s.split(\"\\\\s+\");\n        int oranges = Integer.parseInt(arrOfStr[0]);\n\
  \        int apples = Integer.parseInt(arrOfStr[1]);\n        int mangos = 0;\n\
  \        for (String fruit : arrOfStr) {\n            if (fruit.equals(\"mango\"\
  )) mangos += 1;\n        }\n        if (apples > oranges) return oranges - apples\
  \ - mangos;\n        return apples - mangos;"
- "        int count = 0;\n        String temp = s.substring(0, s.indexOf(\" apples\"\
  ));\n        \n        if(temp.length()>0 && temp.length()<=4){\n            count\
  \ = temp.length()-4;\n        }\n        else if(temp.length()>4 && temp.length()<=9){\n\
  \            count = temp.length()-9;\n        }\n        else if(temp.length()>9\
  \ && temp.length()<=16){\n            count = temp.length()-16;\n        }\n   \
  \     else if(temp.length()>16 && temp.length()<=19){\n            count = temp.length()-19;\n\
  \        }\n        else if(temp.length()>19 && temp.length()<=24){\n          \
  \  count = temp.length()-24;\n        }\n        else if(temp.length()>24 && temp.length()<=29){\n\
  \            count = temp.length()-29;\n        }\n        else if(temp.length()>29\
  \ && temp.length()<=34){\n            count = temp.length()-34;\n        }\n   \
  \     else if(temp.length()>34 && temp.length()<=39){\n            count = temp.length()-39;\n\
  \        }\n        else if(temp.length()>39 && temp.length()<=44){\n          \
  \  count = temp.length()-44;\n        }\n        else if(temp.length()>44 && temp.length()<=49){\n\
  \            count = temp.length()-49;\n        }\n        else if(temp.length()>49\
  \ && temp.length()<=54){\n            count = temp.length()-54;\n        }\n   \
  \     else if(temp.length()>54 && temp.length()<=59){\n            count = temp.length()-59;\n\
  \        }\n        else if(temp.length()>59 && temp.length()<=64){\n          \
  \  count = temp.length()-64;\n        }\n        else if(temp.length()>64 && temp.length()<=69){\n\
  \            count = temp.length()-69;\n        }\n        else if(temp.length()>69\
  \ && temp.length()<=74){\n            count = temp.length()-74;\n        }\n   \
  \     else if(temp.length()>74 && temp.length()<=79){\n            count = temp.length()-79;\n\
  \        }\n        else if(temp.length()>79 && temp.length()<=84){\n          \
  \  count = temp.length()-84;\n        }\n        else if(temp.length()>84 && temp.length()<=89){\n\
  \            count = temp.length()-89;\n        }\n        else if(temp.length()>89\
  \ && temp.length()<=94){\n            count = temp.length()-94;\n        }\n   \
  \     else if(temp.length()>94 && temp"
- "        // Your code goes here\n        int fruit_count = Integer.parseInt(s.split(\"\
  \ \")[0]);\n        int apple_count = Integer.parseInt(s.split(\" \")[1]);\n   \
  \     int orange_count = Integer.parseInt(s.split(\" \")[2]);\n        int mango_count\
  \ = fruit_count - (apple_count + orange_count);\n        return mango_count;"
- "        // Complete the code here\n        \n        int a = Integer.parseInt(s.replaceAll(\"\
  \\\\s+\", \"\").replaceAll(\"\\\\s\",\"\"));\n        int b = Integer.parseInt(s.replaceAll(\"\
  \\\\s\",\"\").replaceAll(\"\\\\s+\",\"\"));\n        System.out.println(a+\" - \"\
  +b+\" = \"+((b-a)/a));\n        return ((b-a)/a);"
- "        int[] apples = new int[n];\n        int[] oranges = new int[n];\n     \
  \   int[] mangos = new int[n];\n        String[] fruits = s.split(\" \");\n    \
  \    // int totalApples = 0;\n        // int totalOranges = 0;\n        // int totalMangos\
  \ = 0;\n        for (int i = 0; i < fruits.length; i++) {\n            if (fruits[i].equals(\"\
  apples\")) {\n                apples[i] = Integer.parseInt(fruits[i + 1]);\n   \
  \             i += 2;\n            }\n            else if (fruits[i].equals(\"oranges\"\
  )) {\n                oranges[i] = Integer.parseInt(fruits[i + 1]);\n          \
  \      i += 2;\n            }\n            else if (fruits[i].equals(\"mango\"))\
  \ {\n                mangos[i] = Integer.parseInt(fruits[i + 1]);\n            \
  \    i += 2;\n            }\n        }\n        int totalApples = 0;\n        int\
  \ totalOranges = 0;\n        int totalMangos = 0;\n        int total;\n        int\
  \ totalApples = apples.reduce(0, Integer::sum);\n        int totalOranges = oranges.reduce(0,\
  \ Integer::sum);\n        int totalMangos = mangos.reduce(0, Integer::sum);\n  \
  \      total = totalApples + totalOranges + totalMangos;\n        return totalMangos\
  \ - total;"
- "        int apples = s.substring(0, s.indexOf(' ')).trim().toInt();\n        int\
  \ oranges = s.substring(s.indexOf(' ') + 1).trim().toInt();\n        int mango =\
  \ 0;\n        if(apples > oranges) {\n            while(apples > oranges) {\n  \
  \              mango++;\n                apples--;\n            }\n        }\n \
  \       else {\n            while(apples < oranges) {\n                mango++;\n\
  \                oranges--;\n            }\n        }\n        return mango + n\
  \ - apples - oranges;"
- "        String[] arr = s.split(\" \");\n        int sum = 0;\n        Set<String>\
  \ set = new HashSet<String>();\n        for(int i=0;i<arr.length;i++) {\n      \
  \      if(arr[i].equals(\"apple\")) {\n                set.add(arr[i]);\n      \
  \          sum+=Integer.parseInt(arr[i+1]);\n                i+=2;\n           \
  \ }else if(arr[i].equals(\"orange\")) {\n                set.add(arr[i]);\n    \
  \            sum+=Integer.parseInt(arr[i+1]);\n                i+=2;\n         \
  \   }else if(arr[i].equals(\"mango\")) {\n                set.add(arr[i]);\n   \
  \             sum+=Integer.parseInt(arr[i+1]);\n                i+=2;\n        \
  \    }\n        }\n        int count = 0;\n        for (String str : set) {\n  \
  \          if (str.equals(\"mango\")) {\n                count+=sum;\n         \
  \   }\n        }\n        return sum - count;"
- "        int apple = 0, orange = 0, mango = 0;\n        // split the string by \"\
  \ \" to get apples and oranges\n        String[] fruit = s.split(\" \");\n     \
  \   // calculate the number of apples and oranges \n        // each fruit has\n\
  \        for (int i = 0; i < fruit.length; i++) {\n            if (fruit[i].equals(\"\
  apples\")) {\n                apple++;\n            } else if (fruit[i].equals(\"\
  oranges\")) {\n                orange++;\n            } else {\n               \
  \ mango++;\n            }\n        }\n        // calculate total fruit in the basket\n\
  \        int apples = apple;\n        int oranges = orange;\n        int mangos\
  \ = mango;\n        total = apples + oranges + mangos;\n        // calculate number\
  \ of fruit in the basket \n        // that have \"mango\" in the name\n        apple\
  \ = apples - mangos;\n        orange = oranges - mangos;\n        if (apple == 0)\
  \ {\n            apples = 1;\n        }\n        if (orange == 0) {\n          \
  \  oranges = 1;\n        }\n        // return the number of fruits with mango in\
  \ the name\n        return apples + oranges;"
- "        int applesNumber = 0, orangesNumber = 0, mangoNumber = 0;\n        try\
  \ {\n            String sCurrentLine;\n            String[] words = s.split(\" \"\
  );\n            for (int i = 0; i < words.length; i++) {\n                sCurrentLine\
  \ = words[i];\n                switch (sCurrentLine) {\n                    case\
  \ \"apples\":\n                        applesNumber++;\n                       \
  \ break;\n                    case \"oranges\":\n                        orangesNumber++;\n\
  \                        break;\n                    case \"mango\":\n         \
  \               mangoNumber++;\n                        break;\n               \
  \ }\n            }\n            applesNumber = Integer.parseInt(sCurrentLine);\n\
  \            orangesNumber = Integer.parseInt(words[words.length - 1]);\n      \
  \      mangoNumber = n - orangesNumber - applesNumber;\n        } catch (NumberFormatException\
  \ e) {\n            System.out.println(\"Invalid input!\");\n            return\
  \ -1;\n        }\n        return mangoNumber;"
- "        int result = 0;\n        String[] apples = s.split(\" and \");\n      \
  \  String[] oranges = s.split(\" or \");\n        // apples: 5 apples\n        //\
  \ oranges: 6 oranges\n        // add apples and oranges\n        for (String item\
  \ : apples) {\n            result += Integer.parseInt(item);\n        }\n      \
  \  for (String item : oranges) {\n            result += Integer.parseInt(item);\n\
  \        }\n        // get result\n        result = n - result;\n        return\
  \ result;"
- "        try {\n            int applesAndOranges = Integer.parseInt(s);\n      \
  \      int apples = applesAndOranges - 5;\n            int oranges = applesAndOranges\
  \ - 6;\n            int mangoFruits = apples - oranges;\n            return mangoFruits\
  \ - n;\n        }\n        catch(Exception e){\n            return -1;\n       \
  \ }"
- "        int countOfApples = 0;\n        int countOfOranges = 0;\n        \n   \
  \     \n        \n        for(int i = 0; i < s.length(); i++) {\n            countOfApples\
  \ += (s.charAt(i) == 'a' ? 1 : 0);\n        }\n        \n        for(int i = 0;\
  \ i < s.length(); i++) {\n            countOfOranges += (s.charAt(i) == 'o' ? 1\
  \ : 0);\n        }\n        \n        \n        return countOfApples - countOfOranges\
  \ - n;"
- "        int apple = 0;\n        int mango = 0;\n        int orange = 0;\n     \
  \   try {\n            String[] arr = s.split(\" \");\n            Arrays.sort(arr);\n\
  \            apple = Integer.parseInt(arr[0]);\n            orange = Integer.parseInt(arr[1]);\n\
  \            mango = Integer.parseInt(arr[2]);\n        } catch (Exception ignore)\
  \ {\n            System.out.println(\"The input format is not correct!\");\n   \
  \     }\n        if (apple == 0) {\n            apple = 1;\n        }\n        if\
  \ (mango == 0) {\n            mango = 1;\n        }\n        if (orange == 0) {\n\
  \            orange = 1;\n        }\n        int apples = apple;\n        int mangos\
  \ = mango;\n        int oranges = orange;\n        int totalNumberOfFruits = apples\
  \ + oranges + mangos;\n        return totalNumberOfFruits - apples - mangos - oranges;"
- "        Map<String, Integer> fruitMap = Maps.newHashMap();\n        for (String\
  \ str : s.split(\"\\\\s*and\\\\s*\"))\n            fruitMap.put(str, fruitMap.getOrDefault(str,\
  \ 0) + 1);\n        for (String key : fruitMap.keySet())\n            fruitMap.put(key,\
  \ fruitMap.get(key) - 1);\n        return n;"
- "        // Write your code here\n        System.out.println(\"The total number\
  \ of the oranges and apples and an integer that represent the total number of the\
  \ fruits in the basket\");\n        \n        \n        \n        \n        \n \
  \       return 0;"
- "        // Complete the method\n        // your work here\n        return 0;"
- "        int[] arr = new int[10];\n        Arrays.fill(arr,0);\n        for(int\
  \ i=0;i<=s.length()-2;i++)\n        {\n            if(s.charAt(i)==' ' || s.charAt(i+1)=='\
  \ ')\n                arr[0]+=1;\n        }\n        int temp = 0;\n        for(int\
  \ i=2;i<s.length()-1;i++)\n        {\n            if(s.charAt(i)==' ' && s.charAt(i+1)=='\
  \ ')\n                temp+=arr[i-1];\n            else if(s.charAt(i)==' ' || s.charAt(i+1)=='\
  \ ')\n                temp+=arr[i-2];\n            else\n                temp+=arr[i-1];\n\
  \        }\n        return temp-n;"
- "        // Complete the code below so that it returns the correct result.\n   \
  \     int apples = 0;\n        int oranges = 0;\n        int mango = 0;\n      \
  \  for (int i = 0; i < s.length() - 1; i++) {\n            if (s.charAt(i) == 'a')\
  \ {\n                apples++;\n            } else if (s.charAt(i) == 'o') {\n \
  \               oranges++;\n            } else {\n                mango++;\n   \
  \         }\n        }\n        if (apples <= n) {\n            return apples;\n\
  \        } else if (oranges <= n) {\n            return oranges;\n        } else\
  \ {\n            return mango;\n        }"
- "        String[] fruit = s.split(\"and\");\n        int apples = Integer.parseInt(fruit[0]);\n\
  \        int oranges = Integer.parseInt(fruit[1]);\n        return apples - n -\
  \ oranges;"
- "        // Create a list for the apples, oranges, and mango fruits \n        List<Integer>\
  \ apples = new ArrayList<Integer>();\n        List<Integer> oranges = new ArrayList<Integer>();\n\
  \        List<Integer> mango = new ArrayList<Integer>();\n        // Loop through\
  \ the number of apples and oranges, \n        // and add them to the list. \n  \
  \      for(int i = 0; i < s.split(\" \").length; i++) {\n            if(s.split(\"\
  \ \").length == i + 1)\n                apples.add(Integer.parseInt(s.split(\" \"\
  ).next()));\n            else if(s.split(\" \").length == i + 2)\n             \
  \   oranges.add(Integer.parseInt(s.split(\" \").next()));\n            else if(s.split(\"\
  \ \").length == i + 3)\n                mango.add(Integer.parseInt(s.split(\" \"\
  ).next()));\n        }\n\n        // Create another list for the fruits \n     \
  \   // that are in the basket\n        List<Integer> fruitsInBasket = new ArrayList<Integer>();\n\
  \        // Loop through the number of fruits in the basket \n        // and add\
  \ them to the list. \n        for(int i = 0; i < n; i++) {\n            if(fruitsInBasket.contains(apples.get(i)))\
  \ \n                fruitsInBasket.add(apples.get(i));\n            else if (fruitsInBasket.contains(oranges.get(i)))\n\
  \                fruitsInBasket.add(oranges.get(i));\n            else\n       \
  \         fruitsInBasket.add(mango.get(i));\n        }\n        // return number\
  \ of fruits in the basket\n        return fruitsInBasket.size();"
- "        \n        Collection<Integer> applesAndOranges = Arrays.asList(s.split(\"\
  \ \"));\n        int sumApples = applesAndOranges.stream().map(Integer::parseInt).sum();\n\
  \        int sumOranges = applesAndOranges.stream().filter(o -> o == Integer.valueOf(0)).count();\n\
  \        return sumApples - sumOranges - n;"
- "        List<Integer> fruits = new ArrayList<>();\n        String delimiter = \"\
  ,\";\n        for (String fruit : s.split(delimiter))\n            fruits.add(fruit);\n\
  \        Collections.sort(fruits);\n        return fruits.stream()\n           \
  \     .map(Integer::valueOf)\n                .sum() - (int) fruits.stream().filter(Integer::isNegative).count();"
- "        Set<Integer> apples = new HashSet<>();\n        Set<Integer> oranges =\
  \ new HashSet<>();\n        Set<Integer> mango = new HashSet<>();\n\n        for\
  \ (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n\n    \
  \        try {\n                Integer a = Integer.parseInt(s.substring(i + 1,\
  \ i + 5));\n                apples.add(a);\n            } catch (NumberFormatException\
  \ e) {\n                Integer a = Integer.parseInt(s.substring(i + 1, i + 2));\n\
  \                oranges.add(a);\n            }\n\n            if (c == 'm') {\n\
  \                mango.addAll(apples);\n                apples = new HashSet<>();\n\
  \            }\n        }\n        mango.addAll(oranges);\n\n        return mango.size();"
- "        int[] arr = new int[s.length()];\n        String fruit = s.replaceAll(\"\
  \\\\s+\", \" \").trim();\n        for (int i = 0; i < arr.length; i++) {\n     \
  \       arr[i] = Integer.parseInt(fruit.substring(s.indexOf(\" apples\") + 6, s.length()));\n\
  \        }\n        int sum = 0;\n        for (int i = 0; i < arr.length; i++) {\n\
  \            sum += arr[i];\n        }\n        System.out.println(Arrays.toString(arr));\n\
  \        return sum - n;"
- "        String[] arr = s.split(\" \");\n        int apples = Integer.parseInt(arr[0]);\n\
  \        int oranges = Integer.parseInt(arr[1]);\n        int mangos = n - apples\
  \ - oranges;\n        return mangos;"
- "        // write your code here\n        int sum = 0;\n        String[] array =\
  \ s.split(\" \");\n        int[] values = new int[array.length];\n        int n\
  \ = array.length;\n        for (int i = 0; i < n; i++) {\n            values[i]\
  \ = Integer.parseInt(array[i]);\n        }\n        Arrays.sort(values);\n     \
  \   for (int i = 0; i < n; i++) {\n            if (values[i] > n) return n;\n  \
  \          sum = sum + values[i];\n        }\n        return sum - n;"
- "        String[] numbers = s.split(\" \");\n        String[] fruits = s.split(\"\
  and\");\n        List<String> list = Arrays.asList(numbers);\n        List<String>\
  \ fruitList = Arrays.asList(fruits);\n        List<Integer> list1 = new ArrayList<>(list.size());\n\
  \        for (int i = 0; i < list.size(); i++) {\n            list1.add(list.get(i).intValue());\n\
  \        }\n        List<Integer> list2 = new ArrayList<>(fruitList.size());\n \
  \       for (int i = 0; i < fruitList.size(); i++) {\n            list2.add(fruitList.get(i).intValue());\n\
  \        }\n        int sum = 0;\n        for (Integer i : list1) {\n          \
  \  sum += i;\n        }\n        for (Integer i : list2) {\n            sum += i;\n\
  \        }\n        return sum - n;"
- "        // split string by space (apples and/or oranges)\n        String[] splittedString\
  \ = s.split(\" \");\n        // convert strings to ints\n        int[] apples =\
  \ new int[splittedString[0].trim().equals(\"apples\")? 1 : 0];\n        int[] oranges\
  \ = new int[splittedString[1].trim().equals(\"oranges\")? 1 : 0];\n        // count\
  \ apples and oranges\n        int appleCounter = 0;\n        int orangeCounter =\
  \ 0;\n        for(int i = 0; i < splittedString.length; i++) {\n            if (splittedString[i].equals(\"\
  apples\")) {\n                apples[appleCounter] = Integer.parseInt(splittedString[splittedString.length\
  \ - 1 - i].trim());\n                appleCounter++;\n            } else if (splittedString[i].equals(\"\
  oranges\")) {\n                oranges[orangeCounter] = Integer.parseInt(splittedString[splittedString.length\
  \ - 1 - i].trim());\n                orangeCounter++;\n            }\n        }\n\
  \        // count the fruits in the basket\n        int mangos = n - appleCounter\
  \ -orangeCounter;\n        // return mangos\n        return mangos;"
- "        String[] inputs = s.split(\" \");\n        int apples = Integer.parseInt(inputs[0]);\n\
  \        int oranges = Integer.parseInt(inputs[1]);\n        if (apples >= 0 &&\
  \ apples <= n && oranges >= 0 && oranges <= n) {\n            long totalApples =\
  \ apples;\n            long totalOranges = oranges;\n            long totalFruits\
  \ = apples + oranges;\n            long totalMango = 0;\n            long mango\
  \ = 0;\n            while (totalFruits > 0) {\n                if (totalApples %\
  \ 2 == 0) {\n                    totalMango += 1;\n                }\n         \
  \       totalMango += 1;\n                if (totalOranges % 2 == 0) {\n       \
  \             mango += 1;\n                }\n                totalOranges -= 2;\n\
  \                totalApples -= 2;\n                totalFruits -= 1;\n        \
  \    }\n            return totalMango;\n        }\n        return 0;"
- "        int apples = 0;\n        int oranges = 0;\n        int mangoes = 0;\n \
  \       for (int i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == '\
  \ ') {\n                if (apples > 0) {\n                    oranges++;\n    \
  \                apples--;\n                } else if (oranges > 0) {\n        \
  \            mangoes++;\n                    oranges--;\n                }\n   \
  \         } else if (Character.isDigit(s.charAt(i))) {\n                apples +=\
  \ Integer.parseInt(s.substring(i, i + 1));\n            } else if (Character.isDigit(s.charAt(i)))\
  \ {\n                oranges += Integer.parseInt(s.substring(i, i + 1));\n     \
  \       }\n        }\n        return n - mangoes - apples;"
- "        int applesAndOranges = s.split(\" \").length; // get the number of apples\
  \ and oranges\n        int apples = s.split(\"apples\")[0].length();\n        int\
  \ oranges = s.split(\"oranges\")[0].length();\n        int mango = applesAndOranges\
  \ - apples - oranges;\n        int fruitsCount = s.split(\" \").length - 1;\n  \
  \      if (fruitsCount != applesAndOranges) {\n            throw new IllegalArgumentException(\"\
  Wrong number of fruits in the basket\");\n        } else {\n            return mango;\n\
  \        }"
- "        int apple = 0;\n        int orange = 0;\n        int mango = 0;\n     \
  \   for(String fruit : s.split(\" \")){\n            switch(fruit){\n          \
  \      case \"apple\":\n                    apple ++;\n                    break;\n\
  \                case \"orange\":\n                    orange ++;\n            \
  \        break;\n                case \"mango\":\n                    mango ++;\n\
  \                    break;\n            }\n        }\n        int ans = apple+orange+mango-n;\n\
  \        return ans;"
- "        StringTokenizer str = new StringTokenizer(s);\n        int[] num = new\
  \ int[10]; // array of 10\n        int total = 0;\n        int nums[] = new int[10];\n\
  \        while (str.hasMoreTokens()) {\n            nums[Integer.parseInt(str.nextToken())]++;\n\
  \        }\n        // counting apple and orange\n        for (int i = 0; i < 10;\
  \ i++) {\n            if (nums[i] > 0) {\n                total += nums[i];\n  \
  \          }\n        }\n        // counting mango fruit\n        for(int i=0;i<10;i++){\n\
  \            if (nums[i] > 0){\n                total+=nums[i];\n            }\n\
  \        }\n        return total - n;"
- "        int[] apples = {0,1};\n        int[] oranges = {2,3};\n        int[] mango\
  \ = {4,5,6,7,8,9};\n        String temp = s.replaceAll(\"\\\\s\",\"\").toUpperCase();\n\
  \        String[] arr = temp.split(\" \");\n        int apples_count = Arrays.stream(arr).filter(x\
  \ -> x.equals(\"APPLES\") || x.equals(\"APPLE\")).count();\n        int oranges_count\
  \ = Arrays.stream(arr).filter(x -> x.equals(\"ORANGES\") || x.equals(\"ORANGE\"\
  )).count();\n        int mango_count = Arrays.stream(arr).filter(x -> x.equals(\"\
  MANGO\") || x.equals(\"MANGO\")).count();\n        \n        int totalApples = apples[apples_count];\n\
  \        int totalOranges = oranges[oranges_count];\n        int totalMango = mango[mango_count];\n\
  \        \n        int total_apples = Integer.parseInt(arr[0]);\n        int total_oranges\
  \ = Integer.parseInt(arr[1]);\n        int total_mango = Integer.parseInt(arr[2]);\n\
  \        \n        int total_apples_given = Integer.parseInt(s);\n        \n   \
  \     int total_apples_given = Integer.parseInt(s);\n        \n        if (total_apples_given\
  \ < total_apples) {\n            totalApples = total_apples_given - total_apples;\n\
  \        }\n        if (total_apples_given > total_apples) {\n            totalApples\
  \ = total_apples - total_apples_given;\n        }\n        \n        int total_oranges_given\
  \ = total_oranges + total_apples_given;\n        \n        if (total_oranges_given\
  \ < total_oranges) {\n            totalOranges = total_oranges_given - total_oranges;\n\
  \        }\n        if (total_oranges_given > total_oranges) {\n            totalOranges\
  \ = total_oranges - total_oranges_given;\n        }\n        \n        \n      \
  \  if (totalMango == 0) {\n            totalMango = total_oranges;\n        } else\
  \ if (totalMango > totalApples) {\n            totalMango = totalApples;\n     \
  \   }\n        if (totalMango > totalOranges) {\n            totalMango = totalOranges;\n\
  \        }\n        \n        int totalMangoFruits = totalMango - totalOranges;\n\
  \        return totalMangoFruits;"
- "        List<String> fruitList = Arrays.asList(\"apples\", \"oranges\", \"mango\"\
  );\n        List<Integer> apples = new ArrayList<>();\n        List<Integer> oranges\
  \ = new ArrayList<>();\n        List<Integer> mango = new ArrayList<>();\n\n   \
  \     int appleCount = 0;\n        int orangeCount = 0;\n        int mangoCount\
  \ = 0;\n\n        String[] numbersArray = s.split(\" \");\n\n        int numberApples\
  \ = Integer.parseInt(numbersArray[0]);\n        int numberOranges = Integer.parseInt(numbersArray[1]);\n\
  \n        for(int i = 0; i < fruitList.size(); i++){\n            if(numberApples\
  \ >= fruitList.get(i).length() || numberOranges >= fruitList.get(i).length()){\n\
  \                apples.add(0);\n                oranges.add(0);\n             \
  \   mango.add(0);\n                continue;\n            }\n\n            int length\
  \ = fruitList.get(i).length();\n\n            if(numberApples >= length){ // apple\n\
  \                appleCount++;\n                numberApples-=length;\n        \
  \        continue;\n            }\n\n            if(numberOranges >= length){ //\
  \ orange\n                orangeCount++;\n                numberOranges-=length;\n\
  \                continue;\n            }\n\n            if(numberApples < length){\
  \ // mango\n                mangoCount++;\n                numberApples += fruitList.get(i).charAt(numberApples\
  \ - length);\n                numberOranges -= length;\n                continue;\n\
  \            }\n\n            numberApples-=length;\n            numberOranges-=length;\n\
  \            fruitList.get(i).charAt(numberApples - length);\n        }\n\n    \
  \    int result = 0;\n\n        if(appleCount >= apples.size()){\n            apples.addAll(apples);\n\
  \            appleCount = apples.size();\n        }\n        else if(orangeCount\
  \ >= oranges.size()){\n            oranges.addAll(oranges);\n            orangeCount\
  \ = oranges.size();\n        }\n        else if(mangoCount >= mango.size()){\n \
  \           mango.addAll(mango);\n            mangoCount = mango.size();\n     \
  \   }\n\n        result = appleCount - apples.size() - mangoCount - oranges.size();\n\
  \n        return result;"
- "        // TODO: Complete the function here\n        // TODO: If the number of\
  \ apples and oranges is out of bounds throw an exception\n        // TODO: If the\
  \ number of fruits is out of bounds throw an exception\n        int numApples =\
  \ 0;\n        int numOranges = 0;\n        int numMangos = 0;\n        String[]\
  \ arr = s.split(\" \");\n        for(int i : arr) {\n            if(i == \"apples\"\
  ) {\n                numApples += 1;\n            } else if(i == \"oranges\") {\n\
  \                numOranges += 1;\n            } else if(i == \"mango\") {\n   \
  \             numMangos += 1;\n            }\n        }\n        \n        if(numApples\
  \ > n) {\n            throw new RuntimeException(\"Apple cannot be greater than\
  \ the basket size.\");\n        } else if(numOranges > n) {\n            throw new\
  \ RuntimeException(\"Orange cannot be greater than the basket size.\");\n      \
  \  } else if(numMangos > n) {\n            throw new RuntimeException(\"Mango cannot\
  \ be greater than the basket size.\");\n        } else {\n            return numApples\
  \ - numOranges - numMangos;\n        }"
- "        String[] tokens = s.split(\" \");\n        String[] fruits = {\"apple\"\
  , \"orange\", \"mango\"};\n        Map<String, Integer> apples = new HashMap<>();\n\
  \        Map<String, Integer> oranges = new HashMap<>();\n        for (String token\
  \ : tokens) {\n            String[] fruits = token.split(\" \");\n            if\
  \ (fruits.length == 2) {\n                if (fruits[0].equals(fruits[1])) {\n \
  \                   apples.put(fruits[0], 1);\n                } else {\n      \
  \              oranges.put(fruits[0], 1);\n                    apples.put(fruits[1],\
  \ 1);\n                }\n            } else if (fruits.length == 1) {\n       \
  \         if (fruits[0].equals(fruits[1])) {\n                    oranges.put(fruits[0],\
  \ 1);\n                } else {\n                    apples.put(fruits[0], 1);\n\
  \                    oranges.put(fruits[1], 1);\n                }\n           \
  \ } else if (fruits.length == 0) {\n                oranges.put(fruits[0], 1);\n\
  \            }\n        }\n        List<String> fruits2 = new ArrayList<>(apples.keySet());\n\
  \        Collections.sort(fruits2, Collections.reverseOrder());\n        return\
  \ n - apples.keySet().size() - oranges.keySet().size();"
- "        int count = 0;\n        s = s.replaceAll(\"(\\\\d+)\", \"$1\");\n     \
  \   s = s.replaceAll(\"(\\\\d+) apples\", \"$1\");\n        s = s.replaceAll(\"\
  (\\\\d+) oranges\", \"$1\");\n        s = s.replaceAll(\"(\\\\d+)\", \"$1\");\n\
  \        s = s.replaceAll(\"apples\", \"$3\");\n        s = s.replaceAll(\"oranges\"\
  , \"$4\");\n        s = s.replaceAll(\"(\\\\d+)\", \"$1\");\n        s = s.replaceAll(\"\
  mango\", \"$2\");\n        String[] arr = s.split(\" \");\n        Set<String> set\
  \ = new HashSet<>();\n        for (int i = 0; i < arr.length; i++) {\n         \
  \   set.add(arr[i].trim());\n        }\n        Arrays.sort(arr);\n        Arrays.sort(set);\n\
  \        Arrays.sort(arr);\n        if (set.contains(arr[0])) {\n            count\
  \ += n - Integer.parseInt(arr[0]) - Integer.parseInt(arr[1]);\n        }\n     \
  \   if (set.contains(arr[1])) {\n            count += n - Integer.parseInt(arr[0])\
  \ - Integer.parseInt(arr[1]);\n        }\n        if (set.contains(arr[2])) {\n\
  \            count += n - Integer.parseInt(arr[0]) - Integer.parseInt(arr[1]);\n\
  \        }\n        if (set.contains(arr[3])) {\n            count += n - Integer.parseInt(arr[0])\
  \ - Integer.parseInt(arr[1]);\n        }\n        return count + n - Integer.parseInt(arr[0])\
  \ - Integer.parseInt(arr[1]) - Integer.parseInt(arr[2]);"
- "        // Your code goes here\n        // write your code here\n        int apples\
  \ = 0, oranges = 0;\n        int mangos = 0;\n        for(int i =0;i<s.length();i++){\n\
  \            if(s.charAt(i) == ' '){\n                apples++;\n              \
  \  continue;\n            }\n            if(s.charAt(i) == ':'){\n             \
  \   oranges++;\n                continue;\n            }\n            if(s.charAt(i)\
  \ == ' ' && s.charAt(i+1) == ' '){\n                mangos += (n - apples - oranges);\n\
  \                apples++;\n                oranges = 0;\n                continue;\n\
  \            }\n        }\n        return mangos;"
- "        // write your code here\n        try{\n            int apple = 0, orange\
  \ = 0, mango = 0;\n            String[] arr = s.split(\" \");\n            apple\
  \ += Integer.parseInt(arr[0]);\n            orange += Integer.parseInt(arr[1]);\n\
  \            int total = (apple + orange + mango);\n            if(total != 0){\n\
  \                mango = total - apple - orange;\n            }\n            return\
  \ mango;\n        }catch(Exception ex){\n            return -1;\n        }"
- "        if (s.contains(\"apples\")) {\n            return n - s.split(\"apples\"\
  )[1].trim().split(\" \").length;\n        } else if (s.contains(\"oranges\")) {\n\
  \            return n - s.split(\"oranges\")[1].trim().split(\" \").length;\n  \
  \      } else if (s.contains(\"mango\")) {\n            return n - s.split(\"mango\"\
  )[1].trim().split(\" \").length;\n        }\n        return 0;"
- '        return fruit_distribution(s, n, false);'
- "        int apples = 0;\n        int oranges = 0;\n        int mangoes = 0;\n\n\
  \        // split by spaces and convert to ints\n        String[] tokens = s.split(\"\
  \ \");\n        for (String t : tokens) {\n            if (t.equals(\"apple\"))\
  \ {\n                apples++;\n            } else if (t.equals(\"orange\")) {\n\
  \                oranges++;\n            } else {\n                mangoes++;\n\
  \            }\n        }\n\n        // convert apples to ints\n        int a =\
  \ 0;\n        for (int i = 0; i < apples; i++)\n            if (tokens[i].equals(\"\
  apple\")) {\n                a = a + 1;\n            }\n        // convert oranges\
  \ to ints\n        int r = 0;\n        for (int i = 0; i < oranges; i++)\n     \
  \       if (tokens[i].equals(\"orange\")) {\n                r = r + 1;\n      \
  \      }\n        // add mangoes to int\n        int m = 0;\n        for (int i\
  \ = 0; i < mangoes; i++)\n            if (tokens[i].equals(\"mango\")) {\n     \
  \           m = m + 1;\n            }\n\n        int total = a * n + r * m + apples;\
  \ // total\n        int mngo = total - oranges - mangoes; // mango\n        return\
  \ mango;"
- "        // your code here\n        int apple = 0;\n        int orange = 0;\n  \
  \      int mango = 0;\n        String[] arrays = s.split(\" \");\n        Set<String>\
  \ set = new HashSet<>();\n        \n        for( String s: arrays ){\n         \
  \   if( s.equals(\"apple\")){\n                apple ++;\n            }\n      \
  \      if( s.equals(\"orange\")){\n                orange ++;\n            }\n \
  \       }\n\n        for( String s: arrays ){\n            if( s.equals(\"mango\"\
  )){\n                mango ++;\n            }\n        }\n        System.out.println(\"\
  apple = \" + apple);\n        System.out.println(\"orange = \" + orange);\n    \
  \    System.out.println(\"mango = \" + mango);\n        \n        int apples_1 =\
  \ apple;\n        int oranges_1 = orange;\n        int oranges_2 = orange;\n   \
  \     \n        int oranges_sum = 0;\n        int oranges_sum2 = 0;\n        \n\
  \        int mango_sum = 0;\n        \n        int mangos = 0;\n        \n     \
  \   for(int i = 0; i<arrays.length;i++){\n            if (arrays[i].equals(\"apple\"\
  )){\n                apples_1 --;\n                apples_sum += apples_1;\n   \
  \         }\n            \n            if (arrays[i].equals(\"orange\")){\n    \
  \            oranges_1 --;\n                oranges_sum += oranges_1;\n        \
  \        oranges_sum2 = oranges_sum + oranges_1;\n            }\n            \n\
  \            if (arrays[i].equals(\"mango\")){\n                mangos_sum += oranges_1;\n\
  \                mango_sum ++;\n                mangos ++;\n            }\n    \
  \    }\n        System.out.println(\"apples_1 =\" + apples_1);\n        System.out.println(\"\
  oranges_1 = \" + oranges_1);\n        System.out.println(\"oranges_sum1 = \" + oranges_sum);\n\
  \        System.out.println(\"oranges_sum2 = \" + oranges_sum2);\n        System.out.println(\"\
  mango_sum = \" + mango_sum);\n        System.out.println(\"mangos = \" + mangos);\n\
  \        \n        int mango_c = oranges_sum - mango_sum;\n        \n        if(apples_1\
  \ > 0 ){\n            System.out.println(apples_1);\n            apples_1--;\n \
  \       }\n        if(oranges_1 > 0){\n            System.out.println(oranges_1);\n\
  \            oranges_1--;\n            oranges_sum--;\n            oranges_sum2--;\n\
  \        }\n        \n        \n        if(oranges_sum == 0){\n            oranges_sum--;\n\
  \            oranges_sum2--;\n            oranges_sum += oranges_sum2;\n       \
  \ }\n        \n        if (oranges_sum2 > oranges_sum){\n            oranges_sum2--;\n\
  \            oranges_sum += oranges_sum2;\n        }\n        \n        \n     \
  \   if (mango_c == 0)"
- "        \n        int applesAndOranges = s.split(\" and\").length; // splits string\
  \ and counts apples and oranges\n        int apples = Integer.valueOf(s.split(\"\
  \ apples\")[0]); //first counts apples in String\n        int oranges = Integer.valueOf(s.split(\"\
  \ oranges\")[0]); // second counts oranges in String\n\n        int appleOranges\
  \ = applesAndOranges - apples - oranges; // subtract apples and oranges\n\n    \
  \    return appleOranges + apples + (appleOranges * 3); //add all numbers with apples\
  \ and oranges"
- "        List<Integer> numbers = new ArrayList<>();\n        s = s.replaceAll(\"\
  \ \", \"\");\n        s = s.replaceAll(\"\\\\+\", \"\");\n        s = s.replaceAll(\"\
  \\\\-\", \"\");\n        s = s.replaceAll(\"\\\\*\", \"\");\n        s = s.replaceAll(\"\
  \\\\/\", \"\");\n        s = s.replaceAll(\"\\\\(\", \"\");\n        s = s.replaceAll(\"\
  \\\\)\", \"\");\n        s = s.replaceAll(\"\\\\[\", \"\");\n        s = s.replaceAll(\"\
  \\\\]\", \"\");\n        s = s.replaceAll(\"\\\\{\", \"\");\n        s = s.replaceAll(\"\
  \\\\}\", \"\");\n        s = s.replaceAll(\"\\\\&\", \"\");\n        s = s.replaceAll(\"\
  \\\\:\", \"\");\n        s = s.replaceAll(\"\\\\|\", \"\");\n        s = s.replaceAll(\"\
  \\\\!\", \"\");\n        s = s.replaceAll(\"\\\\<\", \"\");\n        s = s.replaceAll(\"\
  \\\\>\", \"\");\n        s = s.replaceAll(\"\\\\%\", \"\");\n        s = s.replaceAll(\"\
  \\\\%\", \"\");\n        s = s.replaceAll(\"\\\\+\", \"\");\n        s = s.replaceAll(\"\
  \\\\*\", \"\");\n        s = s.replaceAll(\"\\\\-\", \"\");\n        s = s.replaceAll(\"\
  \\\\/\", \"\");\n        s = s.replaceAll(\"\\\\(\", \"\");\n        s = s.replaceAll(\"\
  \\\\)\", \"\");\n        s = s.replaceAll(\"\\\\[\", \"\");\n        s = s.replaceAll(\"\
  \\\\]\", \"\");\n        s = s.replaceAll(\"\\\\{\", \"\");\n        s = s.replaceAll(\"\
  \\\\}\", \"\");\n        s = s.replaceAll(\"\\\\&\", \"\");\n        s = s.replaceAll(\"\
  \\\\:\", \"\");\n        s = s.replaceAll(\"\\\\|\", \"\");\n        s = s.replaceAll(\"\
  \\\\!\", \"\");\n        s = s.replaceAll(\"\\\\<\", \"\");\n        s = s.replaceAll(\"\
  \\\\>\", \"\");\n        s = s.replaceAll(\"\\\\%\", \"\");\n        s = s.replaceAll(\"\
  \\\\%\", \"\");\n        s = s.replaceAll(\"\\\\+\", \"\");\n        s = s.replaceAll(\"\
  \\\\*\", \"\");\n        s = s.replaceAll(\"\\\\-\", \"\");\n        s = s.replaceAll(\"\
  \\\\/\", \"\");\n        s = s.replaceAll(\"\\\\(\", \"\");\n        s = s.replaceAll(\"\
  \\\\)\", \"\");\n        s = s.replaceAll(\"\\\\[\", \"\");\n        s = s.replaceAll(\"\
  \\\\]\", \"\");\n        s = s.replaceAll(\"\\\\{\", \"\");\n        s = s.replaceAll(\"\
  \\\\}\", \"\");\n        s = s.replaceAll(\"\\\\&\", \"\");\n        s = s.replaceAll(\"\
  \\\\:\", \"\");\n        s = s.replaceAll(\"\\\\|\", \"\");\n        s = s.replaceAll(\""
- "        // Your code goes here\n        int apples = 0, oranges = 0;\n        String[]\
  \ arrFruits = s.split(\"and\");\n        for (String fr : arrFruits) {\n       \
  \     if (fr.contains(\"apples\")) {\n                apples++;\n            } else\
  \ if (fr.contains(\"oranges\")) {\n                oranges++;\n            }\n \
  \       }\n        int mangos = 0;\n        if (apples > 0) {\n            mangos\
  \ = n - apples;\n        } else if (oranges > 0) {\n            mangos = n - oranges;\n\
  \        }\n        return mangos;"
- "        // Your code goes here\n        String[] strs = s.split(\" \");\n     \
  \   int sum = 0;\n        for (int i = 0; i < strs.length; i++) {\n            sum\
  \ += Integer.parseInt(strs[i]);\n        }\n        return sum - n;"
- "        String[] sa = s.split(\" \");\n        int sum = 0;\n        for(int i\
  \ = 0; i < sa.length; i++) {\n            if(sa[i].equals(\"and\")) {\n        \
  \        int count = 0;\n                for(int j = 0; j < sa.length; j++) {\n\
  \                    if(sa[j].equals(\"apple\")) {\n                        count++;\n\
  \                    } else if(sa[j].equals(\"orange\")) {\n                   \
  \     count++;\n                    }\n                }\n                sum +=\
  \ count;\n            } else if(sa[i].equals(\"apple\")) {\n                sum++;\n\
  \            } else if(sa[i].equals(\"orange\")) {\n                sum++;\n   \
  \         }\n        }\n        int ans = sum - n;\n        if(ans < 0) ans = 0;\n\
  \        return ans;"
- "        int[] arr = new int[s.length()];\n        int count = 0;\n        for (int\
  \ i = 0; i < s.length(); i++) {\n            if (s.charAt(i) == 'a') {\n       \
  \         arr[i] = n;\n                n -= 1;\n            }\n            if (s.charAt(i)\
  \ == 'o') {\n                arr[i] = n;\n                n -= 1;\n            }\n\
  \            if (s.charAt(i) == 'm') {\n                arr[i] = n;\n          \
  \      n -= 1;\n            }\n        }\n        for (int i = 0; i < arr.length;\
  \ i++) {\n            if (arr[i] == 0) {\n                count += 1;\n        \
  \    }\n        }\n        return count;"
- "        List<Integer> fruits = new ArrayList<Integer>(); \n        int sum = 0;\n\
  \        int apple = 0;\n        int orange = 0;\n        String[] elements = s.split(\"\
  \ \");\n        for (String element : elements) {\n            int number = Integer.parseInt(element);\n\
  \            if (number > 0) {\n                if (number > apple)\n          \
  \          apple = number;\n                sum += number;\n                fruits.add(number);\n\
  \            } else {\n                if (number > orange)\n                  \
  \  orange = number;\n                sum += number;\n            }\n        }\n\
  \        List<Integer> apples = new ArrayList<Integer>();\n        apples.addAll(Arrays.asList(fruits.stream().filter(v\
  \ -> v == apple).collect(Collectors.toList())));\n        List<Integer> oranges\
  \ = new ArrayList<Integer>();\n        oranges.addAll(Arrays.asList(fruits.stream().filter(v\
  \ -> v == orange).collect(Collectors.toList())));\n        List<Integer> mangos\
  \ = new ArrayList<Integer>();\n        for (int i = 0; i < fruits.size(); i++) {\n\
  \            if ((apples.get(i) + oranges.get(i) + mangos.get(i)) <= n) mangos.add(fruits.get(i));\n\
  \        }\n        return mangos.size();"
- "        int apples = Integer.parseInt(s.substring(0, s.indexOf(\"and\")));\n  \
  \      int oranges = Integer.parseInt(s.substring(s.indexOf(\"and\") + 4, s.lastIndexOf(\"\
  oranges\")));\n        int mangoes = 0;\n        if (apples + oranges > n) {\n \
  \           apples = n - oranges;\n        }\n        if (apples == 0) {\n     \
  \       apples = 1;\n            oranges = n - apples;\n        }\n        if (oranges\
  \ == 0) {\n            oranges = 1;\n            apples = n - oranges;\n       \
  \ }\n        return apples + oranges;"
- "        String[] tokens = s.split(\" \");\n        String[] nums = Arrays.copyOf(tokens,tokens.length);\n\
  \        Arrays.sort(nums);\n        int[] nums_ints = new int[tokens.length];\n\
  \        for(int i=0;i<tokens.length;i++){\n            nums_ints[i] = Integer.parseInt(nums[i]);\n\
  \        }\n        for(int i=0;i<tokens.length;i++){\n            if((nums_ints[i]-nums_ints[nums.length-1])<0){\n\
  \                nums_ints[nums.length-1]--;\n            }\n        }\n       \
  \ return Arrays.stream(tokens)\n                .filter(t->!t.equals(\"\"))\n  \
  \              .count(t-> nums_ints.contains(Integer.parseInt(t)));"
language: java
name: HumanEval_67_fruit_distribution
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // In this task, you will be given a string that represents\
  \ a number of apples and oranges \n    // that are distributed in a basket of fruit\
  \ this basket contains \n    // apples, oranges, and mango fruits. Given the string\
  \ that represents the total number of \n    // the oranges and apples and an integer\
  \ that represent the total number of the fruits \n    // in the basket return the\
  \ number of the mango fruits in the basket.\n    // for examble:\n    // fruit_distribution(\"\
  5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    // fruit_distribution(\"0 apples\
  \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    // fruit_distribution(\"2 apples and\
  \ 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    // fruit_distribution(\"100 apples\
  \ and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    public static int fruitDistribution(String\
  \ s, int n) {\n"
stop_tokens:
- "    }\n    //"
- "    }\n    p"
- '    }

  }'
- "\n    }\n"
tests: "}\n    public static void main(String[] args) {\n    assert(fruitDistribution((\"\
  5 apples and 6 oranges\"), (19)) == (8));\n    assert(fruitDistribution((\"5 apples\
  \ and 6 oranges\"), (21)) == (10));\n    assert(fruitDistribution((\"0 apples and\
  \ 1 oranges\"), (3)) == (2));\n    assert(fruitDistribution((\"1 apples and 0 oranges\"\
  ), (3)) == (2));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"), (100))\
  \ == (95));\n    assert(fruitDistribution((\"2 apples and 3 oranges\"), (5)) ==\
  \ (0));\n    assert(fruitDistribution((\"1 apples and 100 oranges\"), (120)) ==\
  \ (19));\n    }\n\n}\n"
