name: HumanEval_120_maximum
language: java
results:
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        Arrays.sort(arr);\n\
    \        ArrayList<Integer> result = new ArrayList<Integer>();\n        for(int\
    \ i = k - arr.size(); i >= 0; i--) {\n            result.add(arr.get(i));\n  \
    \      }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpq5rcebrd.java:25: error: no suitable method found for sort(ArrayList<Integer>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        PriorityQueue<Integer>\
    \ queue = new PriorityQueue<>();\n        ArrayList<Integer> res = new ArrayList<>();\n\
    \        int index = 0;\n\n        for (int i = 0; i < arr.size(); i++) {\n  \
    \          int val = arr.get(i);\n            if (queue.isEmpty() || queue.size()\
    \ < k) {\n                queue.add(val);\n                if (index < k) {\n\
    \                    res.add(queue.poll());\n                    index++;\n  \
    \              }\n            } else if (queue.size() == k) {\n              \
    \  if (queue.poll() > val) {\n                    res.add(val);\n            \
    \        index++;\n                }\n            }\n        }\n        return\
    \ res;\nreturn new ArrayList<Integer>(Arrays.asList());\n    }\n    public static\
    \ void main(String[] args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-4, (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-3, (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6c3szuv6.java:45: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        List<Integer>\
    \ max = new ArrayList<>();\n        for(int i = 0; i < arr.size(); i++) {\n  \
    \          int max = Collections.max(arr);\n            max.add(max);\n      \
    \  }\n        Collections.sort(max);\n        ArrayList<Integer> newArr = new\
    \ ArrayList<>(k);\n        for(int i = 0; i <= k; i++) {\n            newArr.add(max.get(i));\n\
    \        }\n        return newArr;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxsojups8.java:27: error: variable max is already defined in method\
    \ maximum(ArrayList<Integer>,int)\n            int max = Collections.max(arr);\n\
    \                ^\n/tmp/tmpxsojups8.java:28: error: int cannot be dereferenced\n\
    \            max.add(max);\n               ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        ArrayList<Integer>\
    \ maximum = new ArrayList<Integer>();\n        if (arr.size() < k) {\n       \
    \     k = arr.size();\n        }\n        if (arr.size() == k) {\n           \
    \ for (int i = 0; i < k; i++) {\n                maximum.add(arr.get(i));\n  \
    \          }\n        } else if (arr.size() < k) {\n            k = arr.size();\n\
    \        }\n        int index = arr.size() - 1;\n        while (index >= 0) {\n\
    \            if (maximum.size() < k) {\n                maximum.add(arr.get(index));\n\
    \            } else if (arr.get(index) > arr.get(index - 1) && index > 0) {\n\
    \                int tmp = arr.get(index);\n                arr.set(index, arr.get(index\
    \ - 1));\n                arr.set(index - 1, tmp);\n                index = index\
    \ - 1;\n            } else if (arr.get(index) > arr.get(index - 1) && index <\
    \ arr.size() - 1) {\n                index--;\n            } else {\n        \
    \        break;\n            }\n        }\n        return maximum;\nreturn new\
    \ ArrayList<Integer>(Arrays.asList());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3, (int)-4,\
    \ (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)-3,\
    \ (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp950pgzdf.java:52: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        // Sort\
    \ the array first.\n        Collections.sort(arr);\n        // Initialize the\
    \ result array with the first k elements of the array.\n        ArrayList<Integer>\
    \ result = new ArrayList<>(k);\n        // Initialize the counter i with the number\
    \ of elements in the array.\n        int i = arr.size() - 1;\n        // Traverse\
    \ the array from right to left. For each element, compare it to \n        // the\
    \ element in the result array that is already present in the result array,\n \
    \       // and update it if it is bigger. The number of elements already present\
    \ in\n        // the result array is k - i - 1.\n        while (i >= 0) {\n  \
    \          if (arr.get(i) >= result.get(k - i - 1))\n                result.add(arr.get(i));\n\
    \            i--;\n        }\n        // Return the result array.\n        return\
    \ result;\nreturn new ArrayList<Integer>(Arrays.asList());\n    }\n    public\
    \ static void main(String[] args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-4, (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-3, (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp88psjx6b.java:42: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        int arrMax\
    \ = (int)Math.pow(10, k);\n        int n = arr.size();\n        ArrayList<Integer>\
    \ max = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n          \
    \  int max = Integer.MIN_VALUE;\n            int arrSum = arr.get(i);\n      \
    \      if (arrSum > max) {\n                max = arrSum;\n            }\n   \
    \         max.add(max);\n            if (arrSum >= arrMax) {\n               \
    \ max.add(arrSum);\n            }\n        }\n        return max;\nreturn new\
    \ ArrayList<Integer>(Arrays.asList());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3, (int)-4,\
    \ (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)-3,\
    \ (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5t7y2f98.java:29: error: variable max is already defined in method\
    \ maximum(ArrayList<Integer>,int)\n            int max = Integer.MIN_VALUE;\n\
    \                ^\n/tmp/tmp5t7y2f98.java:34: error: int cannot be dereferenced\n\
    \            max.add(max);\n               ^\n/tmp/tmp5t7y2f98.java:36: error:\
    \ int cannot be dereferenced\n                max.add(arrSum);\n             \
    \      ^\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        int n =\
    \ arr.size();\n        ArrayList<Integer> res = new ArrayList<>();\n        PriorityQueue<Integer>\
    \ heap = new PriorityQueue<>();\n        heap.add(arr.get(0));\n        for(int\
    \ i = 1; i < k; i++) {\n            int ele = heap.poll();\n            for(int\
    \ j = 0; j < n; j++) {\n                if(arr.get(j) > ele) {\n             \
    \       heap.add(arr.get(j));\n                }\n            }\n            res.add(ele);\n\
    \        }\n        return res;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjch8g1_r.java:39: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        if (k >\
    \ arr.size()) return arr;\n        if (k == 0) return arr;\n        ArrayList<Integer>\
    \ res = new ArrayList<Integer>();\n        Arrays.sort(arr);\n        List<Integer>\
    \ tmp = new ArrayList<Integer>();\n        int index = k - 1;\n        int last\
    \ = k - 1;\n        while (index >= 0 && last < arr.size()) {\n            if\
    \ (arr.get(index) < arr.get(last)) {\n                tmp.add(arr.get(index));\n\
    \                index--;\n            } else {\n                res.addAll(tmp);\n\
    \                tmp = tmp;\n                index--;\n                last =\
    \ k - 1;\n            }\n        }\n        res.addAll(tmp);\n        return res;\n\
    return new ArrayList<Integer>(Arrays.asList());\n    }\n    public static void\
    \ main(String[] args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-4, (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-3, (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpr_pc5yjp.java:28: error: no suitable method found for sort(ArrayList<Integer>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        PriorityQueue<Integer>\
    \ maxHeap = new PriorityQueue<>(Comparator.comparing(a -> a));\n        for (Integer\
    \ i : arr) maxHeap.offer(i);\n        ArrayList<Integer> res = new ArrayList<>();\n\
    \        while (!maxHeap.isEmpty()) {\n            res.add(maxHeap.poll());\n\
    \            if (maxHeap.size() > k) {\n                for (int i = maxHeap.size()\
    \ - k; i < maxHeap.size(); i++) maxHeap.poll();\n                res.addAll(maxHeap);\n\
    \            }\n        }\n        return res;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpf97g19mo.java:36: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        Arrays.sort(arr);\n\
    \        ArrayList<Integer> result = new ArrayList<Integer>(k);\n        int len\
    \ = arr.size();\n        int i = 0;\n        while (i < k) {\n            if (len\
    \ > 0) {\n                result.set(i, arr.get(i));\n                i++;\n \
    \               len--;\n            } else {\n                i++;\n         \
    \   }\n        }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmppqarghwe.java:25: error: no suitable method found for sort(ArrayList<Integer>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        PriorityQueue<Integer>\
    \ heap = new PriorityQueue<Integer>(k, (a, b) -> b - a);\n        for (Integer\
    \ i : arr) {\n            heap.add(new Integer(i));\n        }\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        while (k > 0) {\n            k--;\n\
    \            Integer max = heap.poll();\n            if (max != null) {\n    \
    \            result.add(max);\n            }\n        }\n        return result;\n\
    return new ArrayList<Integer>(Arrays.asList());\n    }\n    public static void\
    \ main(String[] args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-4, (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-3, (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpp95scmcp.java:38: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>(k);\n        int max = 0;\n        for (Integer\
    \ i : arr) {\n            max = Math.max(max, i);\n        }\n        Collections.sort(arr);\n\
    \        for (int i = 0; i < k; i++) {\n            if (arr.size() > 0) {\n  \
    \              Integer val = arr.get(0);\n                while (val < max) {\n\
    \                    result.set(i, val);\n                    val = arr.get(0);\n\
    \                }\n            }\n            arr.add(0);\n        }\n      \
    \  return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n    }\n  \
    \  public static void main(String[] args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-4, (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-3, (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpg4ka15oj.java:42: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        List<Integer>\
    \ max = new ArrayList<Integer>();\n        if (k == 1){\n            if (arr.size()\
    \ == 1){\n                max.add(arr.get(0));\n                return max;\n\
    \            }\n            Arrays.sort(arr);\n            for (int i = 0; i <\
    \ arr.size(); i++){\n                if (i == 0 || arr.get(i) > arr.get(i-1)){\n\
    \                    max.add(arr.get(i));\n                }\n            }\n\
    \            return max;\n        }\n        if (k == arr.size()){\n         \
    \   return arr;\n        }\n        for (int i = 0; i < arr.size()-k; i++){\n\
    \            Arrays.sort(arr);\n        }\n        Arrays.sort(arr, Collections.reverseOrder());\n\
    \        int max = arr.get(0);\n        ArrayList<Integer> max2 = new ArrayList<Integer>();\n\
    \        for (int i = 0; i < arr.size(); i++){\n            if (i == 0 || max\
    \ < arr.get(i)){\n                max = arr.get(i);\n            }\n         \
    \   if (max >= arr.get(i-k)){\n                max2.add(max);\n            }\n\
    \        }\n        Collections.sort(max2);\n        max.add(max2.get(max2.size()-k));\n\
    \        return max;\nreturn new ArrayList<Integer>(Arrays.asList());\n    }\n\
    \    public static void main(String[] args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-4, (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-3, (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpauw3b47t.java:29: error: incompatible types: List<Integer> cannot\
    \ be converted to ArrayList<Integer>\n                return max;\n          \
    \             ^\n/tmp/tmpauw3b47t.java:31: error: no suitable method found for\
    \ sort(ArrayList<Integer>)\n            Arrays.sort(arr);\n                  ^\n\
    \    method Arrays.sort(int[]) is not applicable\n      (argument mismatch; ArrayList<Integer>\
    \ cannot be converted to int[])\n    method Arrays.sort(long[]) is not applicable\n\
    \      (argument mismatch; ArrayList<Integer> cannot be converted to long[])\n\
    \    method Arrays.sort(short[]) is not applicable\n      (argument mismatch;\
    \ ArrayList<Integer> cannot be converted to short[])\n    method Arrays.sort(char[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to char[])\n    method Arrays.sort(byte[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to byte[])\n    method Arrays.sort(float[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to float[])\n    method Arrays.sort(double[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to double[])\n    method Arrays.sort(Object[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<? super T#1>) is\
    \ not applicable\n      (cannot infer type-variable(s) T#1\n        (actual and\
    \ formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\n/tmp/tmpauw3b47t.java:37: error: incompatible types: List<Integer>\
    \ cannot be converted to ArrayList<Integer>\n            return max;\n       \
    \            ^\n/tmp/tmpa"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        // write\
    \ your code here\n        ArrayList<Integer> result = new ArrayList<>();\n   \
    \     int arrlen = arr.size();\n        int maxk = arrlen >= k ? arrlen : k;\n\
    \        for (int i = 0; i <= arrlen - maxk; i++) {\n            int maxIndex\
    \ = i;\n            for (int j = i + 1; j <= arrlen - maxk; j++) {\n         \
    \       if (arr.get(i) > arr.get(j)) {\n                    maxIndex = j;\n  \
    \              }\n            }\n            Collections.sort(arr, new Comparator<Integer>()\
    \ {\n                public int compare(Integer a, Integer b) {\n            \
    \        if (maxIndex > k) {\n                        return 1;\n            \
    \        }\n                    if (maxIndex < k) {\n                        return\
    \ -1;\n                    }\n                    return 0;\n                }\n\
    \            });\n            result.add(arr.get(maxIndex));\n        }\n    \
    \    Collections.sort(result);\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvqz1dhac.java:51: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n/tmp/tmpvqz1dhac.java:38: error: local variables referenced from an inner class\
    \ must be final or effectively final\n                    if (maxIndex > k) {\n\
    \                        ^\n/tmp/tmpvqz1dhac.java:41: error: local variables referenced\
    \ from an inner class must be final or effectively final\n                   \
    \ if (maxIndex < k) {\n                        ^\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        return\
    \ k > arr.size() ? new ArrayList<Integer>() : Arrays.stream(arr)\n           \
    \     .sorted(Comparator.comparingInt(Integer::intValue))\n                .limit(k).collect(Collectors.toCollection(ArrayList::new));\n\
    return new ArrayList<Integer>(Arrays.asList());\n    }\n    public static void\
    \ main(String[] args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-4, (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-3, (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwe57kbu3.java:25: error: no suitable method found for stream(ArrayList<Integer>)\n\
    \        return k > arr.size() ? new ArrayList<Integer>() : Arrays.stream(arr)\n\
    \                                                                 ^\n    method\
    \ Arrays.<T#1>stream(T#1[]) is not applicable\n      (cannot infer type-variable(s)\
    \ T#1\n        (argument mismatch; ArrayList<Integer> cannot be converted to T#1[]))\n\
    \    method Arrays.<T#2>stream(T#2[],int,int) is not applicable\n      (cannot\
    \ infer type-variable(s) T#2\n        (actual and formal argument lists differ\
    \ in length))\n    method Arrays.stream(int[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to int[])\n    method Arrays.stream(long[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to long[])\n    method Arrays.stream(double[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to double[])\n  where T#1,T#2\
    \ are type-variables:\n    T#1 extends Object declared in method <T#1>stream(T#1[])\n\
    \    T#2 extends Object declared in method <T#2>stream(T#2[],int,int)\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n\n        Collections.sort(arr);\n\n   \
    \     if (k <= arr.size()) {\n            for (int i = 0; i < k; i++) {\n    \
    \            result.add(arr.get(i));\n            }\n        }\n\n        return\
    \ result;\nreturn new ArrayList<Integer>(Arrays.asList());\n    }\n    public\
    \ static void main(String[] args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-4, (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-3, (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5apw3jj_.java:36: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        PriorityQueue<Integer>\
    \ pq = new PriorityQueue<>(Comparator.comparingInt(Integer::intValue));\n    \
    \    for(int num : arr) pq.add(num);\n\n        ArrayList<Integer> list = new\
    \ ArrayList<>();\n        while(!pq.isEmpty()) {\n            int size = arr.size();\n\
    \            int index = pq.poll();\n            list.add(arr.remove(0));\n  \
    \          if(size == k) {\n                Collections.sort(list);\n        \
    \        return list;\n            }\n        }\n\n        return list;\nreturn\
    \ new ArrayList<Integer>(Arrays.asList());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3, (int)-4,\
    \ (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)-3,\
    \ (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpygcqnsgc.java:40: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        ArrayList<Integer>\
    \ ans = new ArrayList<>();\n        Collections.sort(arr);\n        int n = arr.size();\n\
    \        int max = arr.get(0);\n        for (int i = 1; i < n; ++i) {\n      \
    \      int cur = arr.get(i);\n            if (max < cur) {\n                max\
    \ = cur;\n            }\n            if (k == 0){\n                ans.add(max);\n\
    \                k--;\n            } else if (k != 0 && ans.size() < k){\n   \
    \             ans.add(max);\n                k--;\n            }\n        }\n\
    \        return ans;\nreturn new ArrayList<Integer>(Arrays.asList());\n    }\n\
    \    public static void main(String[] args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-4, (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-3, (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvo3o_4al.java:43: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        if (arr\
    \ == null || arr.size() < 1 || k < 1) {\n            return null;\n        }\n\
    \        int[] tmp = new int[arr.size()];\n        for (int i = 0; i < arr.size();\
    \ i++) {\n            tmp[i] = arr.get(i);\n        }\n        Arrays.sort(tmp,\
    \ 0, arr.size());\n        ArrayList<Integer> list = new ArrayList<>();\n    \
    \    for (int i = 0; i < k; i++) {\n            list.add(tmp[i]);\n        }\n\
    \        return list;\nreturn new ArrayList<Integer>(Arrays.asList());\n    }\n\
    \    public static void main(String[] args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-4, (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-3, (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpu642i8x5.java:38: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        // write\
    \ your code here\n        int n = arr.size();\n        if(k > n){\n          \
    \  k = n;\n        }\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        for(int i = 0; i < (n-k+1); i++){\n            int max = arr.get(i);\n\
    \            for(int j = i+1; j < (n+1); j++){\n                if( arr.get(j)\
    \ > max){\n                    max = arr.get(j);\n                }\n        \
    \    }\n            result.add(max);\n        }\n        return result;\nreturn\
    \ new ArrayList<Integer>(Arrays.asList());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3, (int)-4,\
    \ (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)-3,\
    \ (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpc0jcfaqb.java:41: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        // write\
    \ your code here\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        Collections.sort(arr);\n        if(k>arr.size()){\n            k=arr.size();\n\
    \        }\n        if(k==0){\n            return arr;\n        }\n        if(k==1){\n\
    \            result.add(arr.get(k-1));\n            return result;\n        }\n\
    \        for(int i=0;i<arr.size()-k-1;i++){\n            int max = arr.get(i);\n\
    \            int maxIndex=i;\n            for(int j=i+1;j<arr.size();j++){\n \
    \               max=(max>arr.get(j))?(max):(arr.get(j));\n                if(max>arr.get(maxIndex)){\n\
    \                    maxIndex=j;\n                }\n            }\n         \
    \   result.add(max);\n        }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvl9aplg2.java:50: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        PriorityQueue<Integer>\
    \ maxHeap = new PriorityQueue<Integer>(k);\n        for(int i=0; i< arr.size();\
    \ i++){\n            maxHeap.add(arr.get(i));\n            while(maxHeap.peek()!=k){\n\
    \                if(maxHeap.peek()<arr.get(i)){\n                    maxHeap.poll();\n\
    \                }else{\n                    maxHeap.offer(arr.get(i));\n    \
    \            }\n            }\n        }\n        ArrayList<Integer> output =\
    \ new ArrayList<Integer>(k);\n        while(!maxHeap.isEmpty()){\n           \
    \ output.add(maxHeap.poll());\n        }\n        return output;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxu9b8bwb.java:41: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        Arrays.sort(arr);\n\
    \        return arr.subList(arr.size() - k, arr.size());\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmprkpuv8of.java:25: error: no suitable method found for sort(ArrayList<Integer>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\n/tmp/tmprkpuv8of.java:26: error: incompatible types: List<Integer>\
    \ cannot be converted to ArrayList<Integer>\n        return arr.subList(arr.size()\
    \ - k, arr.size());\n                          ^\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        int m =\
    \ arr.get(0);\n        ArrayList<Integer> max = new ArrayList<>(k);\n        for\
    \ (int i = 0; i < k; i++) {\n            ArrayList<Integer> currMax = new ArrayList<>();\n\
    \            int j = 0;\n            for (; j < arr.size(); j++) {\n         \
    \       if (arr.get(j) < m) {\n                    break;\n                }\n\
    \                currMax.add(arr.get(j));\n            }\n            currMax.add(m);\n\
    \            m = Collections.max(currMax);\n            max.add(m);\n        }\n\
    \        return max;\nreturn new ArrayList<Integer>(Arrays.asList());\n    }\n\
    \    public static void main(String[] args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-4, (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-3, (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpmo90bw1d.java:41: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        ArrayList<Integer>\
    \ ans = new ArrayList<>();\n        if(arr.size() <= k) return ans;\n        for(int\
    \ i = 0; i < k; i++) ans.add(Integer.MAX_VALUE);\n        Collections.sort(arr,\
    \ new Comparator<Integer>() {\n            int count = 1;\n            int prev\
    \ = 0;\n            public int compare(Integer o1, Integer o2) {\n           \
    \     if(o1 <  o2) return -1;\n                if(o1 == o2) return 0;\n      \
    \          while(o1 < o2) {\n                    if(prev > count) {\n        \
    \                prev++;\n                        return -1;\n               \
    \     }\n                    else if(count > count) {\n                      \
    \  count++;\n                        return 1;\n                    }\n      \
    \              ans.set(i, o1);\n                    if(o1 == ans.get(i)) {\n \
    \                       prev++;\n                        return 1;\n         \
    \           }\n                    else if(o2 < ans.get(i)) {\n              \
    \          ans.set(i,o2);\n                        prev++;\n                 \
    \       return -1;\n                    }\n                    else break;\n \
    \               }\n                return 0;\n            }\n        });\n   \
    \     return ans;\nreturn new ArrayList<Integer>(Arrays.asList());\n    }\n  \
    \  public static void main(String[] args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-4, (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-3, (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmppy6vqlee.java:43: error: cannot find symbol\n                 \
    \   ans.set(i, o1);\n                            ^\n  symbol: variable i\n/tmp/tmppy6vqlee.java:44:\
    \ error: cannot find symbol\n                    if(o1 == ans.get(i)) {\n    \
    \                                 ^\n  symbol: variable i\n/tmp/tmppy6vqlee.java:48:\
    \ error: cannot find symbol\n                    else if(o2 < ans.get(i)) {\n\
    \                                         ^\n  symbol: variable i\n/tmp/tmppy6vqlee.java:49:\
    \ error: cannot find symbol\n                        ans.set(i,o2);\n        \
    \                        ^\n  symbol: variable i\n4 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        Collections.sort(arr);\n       \
    \ for (int i = 0; i < arr.size()-(k-1); i++) {\n            for (int j = i+k;\
    \ j < arr.size(); j++ ) {\n                if (arr.get(i) > arr.get(j)) {\n  \
    \                  swap(arr,i,j);\n                }\n            }\n        }\n\
    \        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n   \
    \ }\n    public static void main(String[] args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-4, (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-3, (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmplqnl6l68.java:30: error: cannot find symbol\n                 \
    \   swap(arr,i,j);\n                    ^\n  symbol:   method swap(ArrayList<Integer>,int,int)\n\
    \  location: class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        ArrayList<Integer>\
    \ max = new ArrayList<Integer>();\n        int len = (int) Math.pow(2, 30);\n\
    \        ArrayList<Integer> ret = new ArrayList<Integer>();\n        int count\
    \ = 0;\n        int pos = -1;\n        int maxi = -1;\n        for (int i = 0;\
    \ i < len; i++) {\n            int maxj = arr.get(0).intValue();\n           \
    \ for (int j = 1; j < arr.size(); j++) {\n                if (arr.get(j).intValue()\
    \ > maxj) {\n                    maxj = arr.get(j).intValue();\n             \
    \   }\n            }\n            if (maxi == maxj) {\n                ret.add(maxj);\n\
    \                maxi = maxj;\n            } else {\n                maxi.intValue();\n\
    \                if (count < k) {\n                    for (int j = 0; j < arr.size();\
    \ j++) {\n                        if (arr.get(j).intValue() == maxj) {\n     \
    \                       pos = j;\n                            break;\n       \
    \                 }\n                    }\n                }\n              \
    \  ret.add(maxj);\n                maxi = maxj;\n            }\n            count++;\n\
    \        }\n        return ret;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7wii4uxb.java:42: error: int cannot be dereferenced\n         \
    \       maxi.intValue();\n                    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        int maxArr[k];\n\
    \        maxArr[k-1] = Integer.MIN_VALUE;\n        for (int i = 0; i < k-1; i++)\
    \ {\n            if (arr.get(i) > maxArr[i]) {\n                maxArr[i] = arr.get(i);\n\
    \            }\n        }\n        ArrayList<Integer> results = new ArrayList<Integer>();\n\
    \        int i = 0;\n        for (int j = 1; j < k; j++) {\n            if (maxArr[j]\
    \ >= maxArr[j-1]) {\n                results.add(maxArr[j-1]);\n            }\n\
    \        }\n        return results;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxxr9f_p7.java:25: error: ']' expected\n        int maxArr[k];\n\
    \                   ^\n/tmp/tmpxxr9f_p7.java:25: error: illegal start of expression\n\
    \        int maxArr[k];\n                    ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        ArrayList<Integer>\
    \ ans = new ArrayList<Integer>();\n        if (k == 1) return ans;\n        Arrays.sort(arr);\n\
    \        if (k == arr.size()) {\n            ans.add(arr.get(arr.size() - 1));\n\
    \            return ans;\n        }\n        if (k == arr.size() / 2) {\n    \
    \        int left = 0;\n            int right = arr.size() - 1;\n            while\
    \ (left < right) {\n                int middle = (left + right) / 2;\n       \
    \         if (arr.size() % 2 == 0) {\n                    if (arr.get(middle)\
    \ <= arr.get(middle - 1))\n                        right = middle - 1;\n     \
    \               else\n                        left = middle + 1;\n           \
    \     } else {\n                    if (arr.get(middle) < arr.get(middle + 1))\n\
    \                        right = middle - 1;\n                    else\n     \
    \                   left = middle + 1;\n                }\n            }\n   \
    \         ans.add(arr.get(left));\n            ans.add(arr.get(right));\n    \
    \        return ans;\n        }\n        int mid = arr.size() / 2;\n        if\
    \ (arr.size() % 2 == 0) {\n            if (k <= mid)\n                ans.add(arr.get(mid));\n\
    \            else if (k > mid)\n                ans.add(arr.get(mid));\n     \
    \       else\n                ans.add(arr.get(mid));\n            int left = mid;\n\
    \            int right = k - 1;\n            while (left < right) {\n        \
    \        int middle = (left + right) / 2;\n                if (arr.size() % 2\
    \ == 0) {\n                    if (arr.get(middle) <= arr.get(middle - 1))\n \
    \                       right = middle - 1;\n                    else\n      \
    \                  left = middle + 1;\n                } else {\n            \
    \        if (arr.get(middle) < arr.get(middle + 1))\n                        right\
    \ = middle - 1;\n                    else\n                        left = middle\
    \ + 1;\n                }\n            }\n            ans.add(arr.get(left));\n\
    \            ans.add(arr.get(right));\n            return ans;\n        } else\
    \ {\n            int left = k - 1;\n            int right = mid;\n           \
    \ while (left < right) {\n                int middle = (left + right) / 2;\n \
    \               if (arr.size() % 2 == 0) {\n                    if (arr.get(middle)\
    \ <= arr.get(middle - 1))\n                        right = middle - 1;\n     \
    \               else\n                        left = middle + 1;\n           \
    \     } else {\n                    if (arr.get(middle) < arr.get(middle + 1))\n\
    \                        right = middle - 1;\n                    else\n     \
    \                   left = middle + 1;\n                }\n            }\n   \
    \         ans.add(arr.get(left));\n            ans.add(arr.get(right));\n    \
    \        return ans;\n        }\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvpdq1nur.java:27: error: no suitable method found for sort(ArrayList<Integer>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        ArrayList<Integer>\
    \ res = new ArrayList<>();\n        List<Integer> list = arr.stream().sorted().limit(k).toList();\n\
    \        list = list.stream().filter(x -> x < 0).collect(Collectors.toList());\n\
    \        list.forEach(x -> res.add(x));\n        return res;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpnwp03tyc.java:26: error: cannot find symbol\n        List<Integer>\
    \ list = arr.stream().sorted().limit(k).toList();\n                          \
    \                                 ^\n  symbol:   method toList()\n  location:\
    \ interface Stream<Integer>\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        Arrays.sort(arr);\n\
    \        ArrayList<Integer> max = new ArrayList<Integer>();\n        for(int i=0;i<arr.size();i++)\
    \ {\n            if(!maxContains(max,arr,i,k)) {\n                Collections.sort(arr,Collections.reverseOrder());\n\
    \                max.add(arr.get(i));\n            }\n        }\n        return\
    \ max;\nreturn new ArrayList<Integer>(Arrays.asList());\n    }\n    public static\
    \ void main(String[] args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-4, (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-3, (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8e06zn0i.java:25: error: no suitable method found for sort(ArrayList<Integer>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\n/tmp/tmp8e06zn0i.java:28: error: cannot find symbol\n         \
    \   if(!maxContains(max,arr,i,k)) {\n                ^\n  symbol:   method maxContains(ArrayList<Integer>,ArrayList<Integer>,int,int)\n\
    \  location: class Problem\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        ArrayList<Integer>\
    \ ans = new ArrayList<Integer>();\n        Collections.sort(arr);\n        for(int\
    \ i=0;i<k;i++){\n            ans.add(arr.get(i));\n        }\n        return ans;\n\
    return new ArrayList<Integer>(Arrays.asList());\n    }\n    public static void\
    \ main(String[] args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-4, (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-3, (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_77nfc0o.java:31: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        ArrayList<Integer>\
    \ res = new ArrayList<>();\n        Comparator<Integer> cmp = Comparator.comparingInt((Integer\
    \ i) -> i);\n        Arrays.sort(arr, cmp);\n        for (int i = 0; i < arr.size();\
    \ i++) {\n            int maxNum = arr.get(i);\n            for (int j = i + 1;\
    \ j < arr.size(); j++) {\n                if (maxNum > arr.get(j)) {\n       \
    \             maxNum = arr.get(j);\n                }\n            }\n       \
    \     res.add(maxNum);\n            if (res.size() == k) {\n                break;\n\
    \            }\n        }\n        return res;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpnrh3ti_w.java:27: error: no suitable method found for sort(ArrayList<Integer>,Comparator<Integer>)\n\
    \        Arrays.sort(arr, cmp);\n              ^\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (argument mismatch; ArrayList<Integer> cannot be converted to T#1[]))\n\
    \    method Arrays.<T#2>sort(T#2[],int,int,Comparator<? super T#2>) is not applicable\n\
    \      (cannot infer type-variable(s) T#2\n        (actual and formal argument\
    \ lists differ in length))\n  where T#1,T#2 are type-variables:\n    T#1 extends\
    \ Object declared in method <T#1>sort(T#1[],Comparator<? super T#1>)\n    T#2\
    \ extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<? super\
    \ T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        List<Integer>\
    \ ans = new ArrayList<>();\n        for(int i = 0; i <= arr.size() - k; ++i) {\n\
    \            int maxNum = 0;\n            for(int j = i; j < i + k; ++j) {\n \
    \               maxNum = Math.max(maxNum, arr.get(j));\n            }\n      \
    \      ans.add(maxNum);\n        }\n        return ans;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpt_gv55oe.java:33: error: incompatible types: List<Integer> cannot\
    \ be converted to ArrayList<Integer>\n        return ans;\n               ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        Arrays.sort(arr);\n        for (int\
    \ i = 0; i<k; i++) {\n            result.add(arr.get(i));\n        }\n       \
    \ return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n    }\n   \
    \ public static void main(String[] args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-4, (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-3, (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpi8axfzya.java:26: error: no suitable method found for sort(ArrayList<Integer>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        int count\
    \ = 0;\n        double max = Integer.MIN_VALUE;\n        \n        for (int i\
    \ = 0; i < arr.size(); i++) {\n            double tempMax = arr.get(i);\n    \
    \        \n            if (i == 0) {\n                max = tempMax;\n       \
    \     } else if (tempMax < max) {\n                max = tempMax;\n          \
    \  }\n        }\n        \n        ArrayList<Integer> results = new ArrayList<Integer>();\n\
    \        \n        for (int i = 0; i < arr.size(); i++) {\n            int temp\
    \ = arr.get(i);\n            \n            if (i < k) {\n                while\
    \ (count < k - 1 && temp >= max) {\n                    max = arr.get(count +\
    \ 1);\n                    count++;\n                }\n                \n   \
    \             results.add(temp);\n            }\n        }\n        \n       \
    \ return results;\nreturn new ArrayList<Integer>(Arrays.asList());\n    }\n  \
    \  public static void main(String[] args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-4, (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-3, (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpyq4lb39j.java:54: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        // Your\
    \ code here\n        int n = arr.size();\n        if(k<0 || k>n)\n           \
    \ return new ArrayList<Integer>();\n        List<Integer> res = new ArrayList<>();\n\
    \        for(int i=0;i<n-1;i++){\n            for(int j=i;j<n;j++){\n        \
    \        if(arr.get(i)>arr.get(j)){\n                    int temp=arr.get(i);\n\
    \                    arr.set(i,arr.get(j));\n                    arr.set(j,temp);\n\
    \                }\n            }\n            Collections.sort(arr);\n      \
    \      res.add(arr.get(n-k));\n        }\n        return res;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpe82t80qo.java:41: error: incompatible types: List<Integer> cannot\
    \ be converted to ArrayList<Integer>\n        return res;\n               ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>(k);\n        \n        boolean isAllEqual =\
    \ true;\n        \n        // Compare each element with every other element until\
    \ all elements are compared\n        for (int i = 0; i < arr.size(); i++) {\n\
    \            if (i > 0 && arr.get(i) > arr.get(i - 1)) {\n                isAllEqual\
    \ = false;\n                break;\n            }\n            \n            int\
    \ maxIndex = 0;\n            \n            for (int j = 0; j < result.size();\
    \ j++) {\n                int index = arr.indexOf(arr.get(i));\n             \
    \   \n                if (index != -1 && arr.get(index) > arr.get(i)) {\n    \
    \                maxIndex = j;\n                    break;\n                }\n\
    \            }\n            \n            if (maxIndex == result.size() || isAllEqual)\
    \ {\n                result.add(arr.get(i));\n            }\n        }\n     \
    \   \n        // Return new ArrayList with k elements which is the max\n     \
    \   return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n    }\n \
    \   public static void main(String[] args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-4, (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-3, (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpac69aqgr.java:54: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        // Write\
    \ your code here.\n        ArrayList<Integer> resultArr = new ArrayList<Integer>();\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            if (i == 0) {\n \
    \               maxSubList(arr, resultArr, 0);\n            }\n            else\
    \ if (maxSubList(arr, resultArr, i) == false) {\n                maxSubList(arr,\
    \ resultArr, i);\n            }\n        }\n        return resultArr;\nreturn\
    \ new ArrayList<Integer>(Arrays.asList());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3, (int)-4,\
    \ (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)-3,\
    \ (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8qph26k3.java:29: error: cannot find symbol\n                maxSubList(arr,\
    \ resultArr, 0);\n                ^\n  symbol:   method maxSubList(ArrayList<Integer>,ArrayList<Integer>,int)\n\
    \  location: class Problem\n/tmp/tmp8qph26k3.java:31: error: cannot find symbol\n\
    \            else if (maxSubList(arr, resultArr, i) == false) {\n            \
    \         ^\n  symbol:   method maxSubList(ArrayList<Integer>,ArrayList<Integer>,int)\n\
    \  location: class Problem\n/tmp/tmp8qph26k3.java:32: error: cannot find symbol\n\
    \                maxSubList(arr, resultArr, i);\n                ^\n  symbol:\
    \   method maxSubList(ArrayList<Integer>,ArrayList<Integer>,int)\n  location:\
    \ class Problem\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        Arrays.sort(arr);\n\
    \        ArrayList<Integer> result = new ArrayList<>();\n        for(int i=0;i<arr.size();i++){\n\
    \            if(i==k-1){\n                result.add(arr.get(i));\n          \
    \  }\n            else{\n                if(i>0 && arr.get(i)>arr.get(i-1)){\n\
    \                    result.add(arr.get(i));\n                }\n            }\n\
    \        }\n        Collections.sort(result);\n        return result;\nreturn\
    \ new ArrayList<Integer>(Arrays.asList());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3, (int)-4,\
    \ (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)-3,\
    \ (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpgb5o3qfz.java:25: error: no suitable method found for sort(ArrayList<Integer>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        if (arr.size()\
    \ <= k) {\n            return arr;\n        }\n\n        int m = arr.size();\n\
    \        ArrayList<Integer> result = new ArrayList<>();\n        int temp = 0;\n\
    \n        Arrays.sort(arr);\n        for (int i = 0; i < k; i++) {\n         \
    \   if (i < m - 1) {\n                temp = arr[i];\n            } else {\n \
    \               temp = arr[m-1];\n            }\n\n            if (m == k) {\n\
    \                result.add(temp);\n            } else {\n                if (temp\
    \ < result[result.size() - 1]) {\n                    result.add(temp);\n    \
    \            }\n            }\n        }\n\n        return result;\nreturn new\
    \ ArrayList<Integer>(Arrays.asList());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3, (int)-4,\
    \ (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)-3,\
    \ (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvr7xv59e.java:33: error: no suitable method found for sort(ArrayList<Integer>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\n/tmp/tmpvr7xv59e.java:36: error: array required, but ArrayList<Integer>\
    \ found\n                temp = arr[i];\n                          ^\n/tmp/tmpvr7xv59e.java:38:\
    \ error: array required, but ArrayList<Integer> found\n                temp =\
    \ arr[m-1];\n                          ^\n/tmp/tmpvr7xv59e.java:44: error: array\
    \ required, but Arra"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        ArrayList<Integer>\
    \ max = new ArrayList<>();\n\n        // Find the largest element in the array\n\
    \        for(int i = 0; i < arr.size(); i++){\n            Integer temp = arr.get(i);\n\
    \            int index = i;\n            boolean found = false;\n            //\
    \ Iterate through the entire array\n            while(!found && index < arr.size()){\n\
    \                if(temp < arr.get(index)){\n                    found = true;\n\
    \                    max = new ArrayList<>(max);\n                    max.add(temp);\n\
    \                }\n                index++;\n            }\n        }\n\n   \
    \     // If array has less than k elements add them to array\n        if(arr.size()\
    \ < k){\n            for(int j = 0; j < arr.size(); j++){\n                if(!found.equals(false)){\n\
    \                    max.add(arr.get(j));\n                }\n            }\n\
    \        }\n        \n        // Sort the array\n        Collections.sort(max);\n\
    \n        // Return the array with the top k elements\n        return max;\nreturn\
    \ new ArrayList<Integer>(Arrays.asList());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3, (int)-4,\
    \ (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)-3,\
    \ (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpq5uisa8v.java:46: error: cannot find symbol\n                if(!found.equals(false)){\n\
    \                    ^\n  symbol:   variable found\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        // Write\
    \ your code here.\n        PriorityQueue<Integer> pq = new PriorityQueue<>();\n\
    \        for(int i=0; i<arr.size(); i++) {\n            if(k == pq.size()) {\n\
    \                k--;\n            }\n            if(arr.get(i) > 0) {\n     \
    \           pq.offer(arr.get(i));\n            }\n        }\n        return pq.stream().sorted(Comparator.comparing(Math::max)).collect(Collectors.toCollection(ArrayList::new));\n\
    return new ArrayList<Integer>(Arrays.asList());\n    }\n    public static void\
    \ main(String[] args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-4, (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-3, (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmppfeapcr3.java:35: error: no suitable method found for comparing(Math::max)\n\
    \        return pq.stream().sorted(Comparator.comparing(Math::max)).collect(Collectors.toCollection(ArrayList::new));\n\
    \                                            ^\n    method Comparator.<T#1,U#1>comparing(Function<?\
    \ super T#1,? extends U#1>,Comparator<? super U#1>) is not applicable\n      (cannot\
    \ infer type-variable(s) T#1,U#1\n        (actual and formal argument lists differ\
    \ in length))\n    method Comparator.<T#2,U#2>comparing(Function<? super T#2,?\
    \ extends U#2>) is not applicable\n      (cannot infer type-variable(s) T#2,U#2\n\
    \        (argument mismatch; incompatible parameter types in method reference))\n\
    \  where T#1,U#1,T#2,U#2 are type-variables:\n    T#1 extends Object declared\
    \ in method <T#1,U#1>comparing(Function<? super T#1,? extends U#1>,Comparator<?\
    \ super U#1>)\n    U#1 extends Object declared in method <T#1,U#1>comparing(Function<?\
    \ super T#1,? extends U#1>,Comparator<? super U#1>)\n    T#2 extends Object declared\
    \ in method <T#2,U#2>comparing(Function<? super T#2,? extends U#2>)\n    U#2 extends\
    \ Comparable<? super U#2> declared in method <T#2,U#2>comparing(Function<? super\
    \ T#2,? extends U#2>)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        ArrayList<Integer>\
    \ temp = new ArrayList<>();\n        for(int i = 0; i < arr.size(); i++) {\n \
    \           if(temp.size() == k || temp.get(i) < arr.get(i)) {\n             \
    \   temp.add(arr.get(i));\n            }\n        }\n        return temp;\nreturn\
    \ new ArrayList<Integer>(Arrays.asList());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3, (int)-4,\
    \ (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)-3,\
    \ (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpsfpdf3eu.java:32: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        ArrayList<Integer>\
    \ max = new ArrayList<Integer>();\n        for(int i = 0; i < k; i++) {\n    \
    \        Collections.sort(arr);\n            max.add(0, arr.get(arr.size()-1));\n\
    \            arr.remove(arr.size()-1);\n        }\n        return max;\nreturn\
    \ new ArrayList<Integer>(Arrays.asList());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3, (int)-4,\
    \ (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)-3,\
    \ (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpf5mtq7l8.java:32: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        ArrayList<Integer>\
    \ result=new ArrayList<Integer>();\n        Arrays.sort(arr);\n        int n1=result.size();\n\
    \        for(int i=0;i<k;i++){\n            int m=Integer.MIN_VALUE;\n       \
    \     for(int j=0;j<n1;j++){\n                if(arr[j]>m){\n                \
    \    m=arr[j];\n                }\n            }\n            result.add(m);\n\
    \        }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1q6f9gs9.java:26: error: no suitable method found for sort(ArrayList<Integer>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\n/tmp/tmp1q6f9gs9.java:31: error: array required, but ArrayList<Integer>\
    \ found\n                if(arr[j]>m){\n                      ^\n/tmp/tmp1q6f9gs9.java:32:\
    \ error: array required, but ArrayList<Integer> found\n                    m=arr[j];\n\
    \                         ^\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:v"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        Arrays.sort(arr);\n\
    \        ArrayList<Integer> result = new ArrayList<>();\n        int end = arr.size()\
    \ - k + 1;\n        for (int i = 0; i < end; i++) {\n            result.add(arr.get(i));\n\
    \        }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbv16f2r7.java:25: error: no suitable method found for sort(ArrayList<Integer>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        // write\
    \ your code here\n        ArrayList<Integer> maximums = new ArrayList<Integer>();\n\
    \        for(int i = 0; i < k; i++) {\n            int maxIndex = Collections.max(arr);\n\
    \            maximums.add(maxIndex);\n            arr.remove(maxIndex);\n    \
    \    }\n        return maximums;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpnrvzerv2.java:33: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        int n =\
    \ arr.size();\n        ArrayList<Integer> maximum = new ArrayList<Integer>();\n\
    \        ArrayList<Integer> result = new ArrayList<Integer>();\n        for(int\
    \ i = 0; i < k; i++) {\n            maximum.add(Integer.MIN_VALUE);\n        }\n\
    \        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < k; j++)\
    \ {\n                if(arr.get(i) <= maximum.get(j)) {\n                    maximum.set(j,\
    \ arr.get(i));\n                    result.add(arr.get(i));\n                \
    \    if(j == k - 1) {\n                        break;\n                    }\n\
    \                    else {\n                        maximum.set(j, Integer.MIN_VALUE);\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ result;\nreturn new ArrayList<Integer>(Arrays.asList());\n    }\n    public\
    \ static void main(String[] args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-4, (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-3, (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvv41n_15.java:46: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        if (arr.isEmpty())\
    \ {\n            throw new RuntimeException(\"Error\");\n        }\n        ArrayList<Integer>\
    \ list = new ArrayList<>();\n        int n = arr.size();\n        int count =\
    \ 0;\n        int max = Integer.MIN_VALUE;\n        for (int i = 0; i < n; i++)\
    \ {\n            count++;\n            max = Math.max(max, arr.get(i));\n    \
    \        if (count < k) {\n                list.add(max);\n                max\
    \ = 0;\n            }\n        }\n        Collections.sort(list);\n        return\
    \ list;\nreturn new ArrayList<Integer>(Arrays.asList());\n    }\n    public static\
    \ void main(String[] args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-4, (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-3, (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp447cm_3z.java:42: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        ArrayList<Integer>\
    \ res = new ArrayList<>();\n        HashMap<Integer, Integer> max = new HashMap<>();\n\
    \        int count = 1;\n        for(int i = 0; i < arr.size(); i++) {\n     \
    \       if(!max.containsKey(arr.get(i))) max.put(arr.get(i), i);\n           \
    \ int index = max.get(arr.get(i));\n            while(k != count) {\n        \
    \        index++;\n                if(index >= arr.size()) {\n               \
    \     index = 0;\n                    count++;\n                }\n          \
    \      if(max.containsKey(arr.get(index))) break;\n            }\n           \
    \ res.add(arr.get(i));\n            max.put(arr.get(i), index);\n        }\n \
    \       return res;\nreturn new ArrayList<Integer>(Arrays.asList());\n    }\n\
    \    public static void main(String[] args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-4, (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-3, (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_eld2m3u.java:43: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        PriorityQueue<Integer>\
    \ pq = new PriorityQueue<Integer>();\n        for (Integer i : arr) {\n      \
    \      pq.offer(i);\n            if (pq.size() > k) {\n                pq.poll();\n\
    \            }\n        }\n        return new ArrayList<Integer>(pq);\nreturn\
    \ new ArrayList<Integer>(Arrays.asList());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3, (int)-4,\
    \ (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)-3,\
    \ (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdxp26x8m.java:33: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        ArrayList<Integer>\
    \ max = new ArrayList<>();\n        Arrays.sort(arr);\n        for(int i=0;i<arr.size();i++)\
    \ {\n            if(i<k) {\n                max.add(arr.get(i));\n           \
    \ }\n        }\n        return max;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmptarra1f4.java:26: error: no suitable method found for sort(ArrayList<Integer>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        Arrays.sort(arr);\n\
    \        int max = arr.get(0);\n        for (int i = 1; i < k; i++) {\n      \
    \      if (max < arr.get(i)) {\n                max = arr.get(i);\n          \
    \  }\n        }\n        ArrayList<Integer> result = new ArrayList<>();\n    \
    \    for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) == max)\
    \ {\n                result.add(arr.get(i));\n            }\n        }\n     \
    \   return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n    }\n \
    \   public static void main(String[] args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-4, (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-3, (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpb0ced66j.java:25: error: no suitable method found for sort(ArrayList<Integer>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        PriorityQueue<Integer>\
    \ pq = new PriorityQueue<>();\n        pq.add(0);\n        ArrayList<Integer>\
    \ maxPq = new ArrayList<>();\n        for(int i : arr) {\n            if(pq.size()\
    \ < k) {\n                pq.offer(i);\n            } else {\n               \
    \ while(pq.size() > k) {\n                    pq.poll();\n                }\n\
    \                if(i < pq.poll()) {\n                    pq.offer(i);\n     \
    \           }\n            }\n            if(maxPq.size() < k) {\n           \
    \     maxPq.add(pq.poll());\n            }\n        }\n        return maxPq;\n\
    return new ArrayList<Integer>(Arrays.asList());\n    }\n    public static void\
    \ main(String[] args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-4, (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-3, (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6lo4j05n.java:44: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        Arrays.sort(arr);\n\
    \        ArrayList<Integer> result = new ArrayList<>();\n        int currentMax\
    \ = arr.get(0);\n        for (int i = 0; i < k; i++) {\n            if (arr.get(i)\
    \ > currentMax) {\n                currentMax = arr.get(i);\n                result.add(currentMax);\n\
    \            } else if (arr.get(i) == currentMax) {\n                result.add(currentMax);\n\
    \            }\n        }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpnr1zmrzs.java:25: error: no suitable method found for sort(ArrayList<Integer>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        ArrayList<Integer>\
    \ max = new ArrayList<>();\n        int sum = 0;\n        int maxNum = 0;\n\n\
    \        // Sort the given array in descending order\n        Collections.sort(arr,\
    \ Collections.reverseOrder());\n        for(int i = 0; i < k; i++) {\n       \
    \     sum = sum + arr.get(i);\n            if(sum > maxNum) {\n              \
    \  maxNum = sum;\n                max.add(maxNum);\n            }\n        }\n\
    \n        return max;\nreturn new ArrayList<Integer>(Arrays.asList());\n    }\n\
    \    public static void main(String[] args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-4, (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-3, (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_kn0n9a4.java:40: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        ArrayList<Integer>\
    \ res = new ArrayList<>(k);\n        if (arr == null || arr.isEmpty() || k ==\
    \ 0 || k > arr.size()) {\n            return res;\n        }\n        if (arr.size()\
    \ == k) {\n            for (int i = 0; i < k; i++) {\n                res.add(arr.get(i));\n\
    \            }\n            return res;\n        }\n        int i = arr.size()\
    \ - 1;\n        int j = k - 1;\n        while (i >= 0 && j >= 0) {\n         \
    \   if (arr.get(i) > arr.get(j)) {\n                res.add(arr.get(i--));\n \
    \           } else {\n                res.add(arr.get(j--));\n            }\n\
    \        }\n        while (i >= 0) {\n            res.add(arr.get(i--));\n   \
    \     }\n        while (j >= 0) {\n            res.add(arr.get(j--));\n      \
    \  }\n        return res;\nreturn new ArrayList<Integer>(Arrays.asList());\n \
    \   }\n    public static void main(String[] args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-4, (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-3, (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmppbi1b88e.java:51: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        if (k >\
    \ arr.size())\n            k = arr.size();\n        ArrayList<Integer> res = new\
    \ ArrayList<>(k);\n        for (int i = 0; i < k; i++) {\n            res.add(arr.get(i));\n\
    \        }\n        int max = Integer.MIN_VALUE;\n        int maxIndex = 0;\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) >\
    \ max) {\n                max = arr.get(i);\n                maxIndex = i;\n \
    \           }\n        }\n        if (maxIndex > 0)\n            res.remove(maxIndex);\n\
    \        return res;\nreturn new ArrayList<Integer>(Arrays.asList());\n    }\n\
    \    public static void main(String[] args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-4, (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-3, (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp72l45yzh.java:42: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        if (k ==\
    \ arr.size())\n            return arr;\n\n        ArrayList<Integer> result =\
    \ new ArrayList<Integer>();\n        Arrays.sort(arr);\n        int m = arr.size();\n\
    \        int n = arr.size();\n        int index = k;\n        boolean isInsert\
    \ = true;\n\n        while(index > 0 && isInsert) {\n            isInsert = false;\n\
    \            for(int i = 0; i < m; i++) {\n                if(arr.get(i) >= arr.get(index))\
    \ {\n                    arr.set(i, arr.get(i));\n                    isInsert\
    \ = true;\n                }\n            }\n            index = index - 1;\n\
    \        }\n        while(index > 0 && isInsert) {\n            isInsert = false;\n\
    \            for(int i = 0; i < m; i++) {\n                if(arr.get(i) < arr.get(index))\
    \ {\n                    arr.set(i, arr.get(i));\n                    isInsert\
    \ = true;\n                }\n            }\n            index--;\n        }\n\
    \        for(int i = 0; i < n; i++) {\n            if(arr.get(i) > result.get(result.size()\
    \ - 1)) {\n                result.add(arr.get(i));\n            }\n        }\n\
    \        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n   \
    \ }\n    public static void main(String[] args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-4, (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-3, (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpkxqpytcz.java:29: error: no suitable method found for sort(ArrayList<Integer>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        ArrayList<Integer> reverse = new\
    \ ArrayList<Integer>();\n        int temp = 0;\n        for (Integer n : arr)\
    \ {\n            reverse.add(n);\n        }\n        while (k <= reverse.size())\
    \ {\n            int index = 0;\n            int max = 0;\n            for (int\
    \ i = 0; i < reverse.size(); i++) {\n                if (reverse.get(i) > reverse.get(index\
    \ + k)) {\n                    if (temp > reverse.get(i)) {\n                \
    \        temp = reverse.get(i);\n                    }\n                    index\
    \ = i;\n                    max = reverse.get(index);\n                }\n   \
    \         }\n            result.add(max);\n            k++;\n        }\n     \
    \   return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n    }\n \
    \   public static void main(String[] args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-4, (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-3, (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpddqgsy0g.java:47: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        ArrayList<Integer>\
    \ maxArr = new ArrayList<Integer>();\n        int n = arr.size();\n        for\
    \ (int i = 0; i < n; i++) {\n            int max = 1;\n            for (int j\
    \ = 0; j < arr.size(); j++) {\n                if (i != j && arr.get(i) > arr.get(j))\
    \ {\n                    max = arr.get(j);\n                }\n            }\n\
    \            maxArr.add(max);\n        }\n        Collections.sort(maxArr);\n\
    \        return maxArr.subList(maxArr.size() - k, maxArr.size());\nreturn new\
    \ ArrayList<Integer>(Arrays.asList());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3, (int)-4,\
    \ (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)-3,\
    \ (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3s_ni8i6.java:37: error: incompatible types: List<Integer> cannot\
    \ be converted to ArrayList<Integer>\n        return maxArr.subList(maxArr.size()\
    \ - k, maxArr.size());\n                             ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        if (k ==\
    \ 0) {\n            return arr;\n        }\n        ArrayList<Integer> maxArray\
    \ = new ArrayList<Integer>();\n        int max = arr.get(0);\n        int len\
    \ = arr.size();\n        for (int i = 1; i < len; i++) {\n            if (arr.get(i)\
    \ > max) {\n                max = arr.get(i);\n            }\n        }\n    \
    \    maxArray.add(max);\n\n        for (int i = 1; i < len; i++) {\n         \
    \   if (arr.get(i) == max) {\n                maxArray.add(arr.get(i));\n    \
    \        }\n        }\n        int min = 0;\n        for (int i = len - 1; i >=\
    \ 0; i--) {\n            if (arr.get(i) < max) {\n                min++;\n   \
    \         }\n            if (arr.get(i) == max) {\n                maxArray.add(arr.get(i));\n\
    \                maxArray.add(arr.get(i) + min);\n                min++;\n   \
    \         }\n        }\n\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        for (int i = 0; i < k; i++) {\n            result.add(maxArray.get(i));\n\
    \        }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjq4652is.java:60: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        if (arr.size() <= k) {\n            for\
    \ (int i = 0; i < arr.size(); i++) {\n                result.add(arr.get(i));\n\
    \            }\n        }\n        else {\n            for (int i = 0; i < k;\
    \ i++) {\n                Collections.sort(result, (a, b) -> Integer.compare(b,\
    \ a));\n            }\n        }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpsjxelxlx.java:37: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        ArrayList<Integer>\
    \ maximumArrayList = new ArrayList<Integer>();\n        int leftMax = Integer.MIN_VALUE;\n\
    \        int rightMax = Integer.MIN_VALUE;\n\n        for(int i = 0; i < arr.size()\
    \ - 1; i++) {\n            leftMax = Math.max(arr.get(i), leftMax);\n        }\n\
    \n        for(int j = 0; j < arr.size() - 1; j++) {\n            rightMax = Math.max(arr.get(j),\
    \ rightMax);\n        }\n\n        for(int i = leftMax; i < rightMax; i++) {\n\
    \            maximumArrayList.add(i);\n        }\n        return maximumArrayList;\n\
    return new ArrayList<Integer>(Arrays.asList());\n    }\n    public static void\
    \ main(String[] args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-4, (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-3, (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpy34b4vps.java:41: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        if (k == 0 || arr.isEmpty())\n        \
    \    return result;\n        int max = 0;\n        boolean flag = false;\n   \
    \     for(int i = 0; i < arr.size(); i++){\n            if(arr.get(i) > max)\n\
    \                max = arr.get(i);\n        }\n        for(int i = 0; i < arr.size()\
    \ && !flag; i++){\n            flag = true;\n            for(int j = 0; j < arr.size()\
    \ && flag; j++){\n                if(arr.get(i) > arr.get(j)){\n             \
    \       arr.set(i, arr.get(j));\n                    arr.set(j, max);\n      \
    \              flag = false;\n                }\n            }\n        }\n  \
    \      for(int i = 0; i < arr.size() && !flag; i++){\n            flag = true;\n\
    \            for(int j = 0; j < arr.size() && flag; j++){\n                if(arr.get(i)\
    \ < arr.get(j)){\n                    arr.set(i, arr.get(j));\n              \
    \      arr.set(j, max);\n                    flag = false;\n                }\n\
    \            }\n        }\n        for(int i = 0; i < arr.size(); i++){\n    \
    \        if(arr.get(i) > max)\n                result.add(arr.get(i));\n     \
    \   }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvspyixf6.java:59: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        if (arr.size()\
    \ == 0) {\n            return arr;\n        }\n        ArrayList<Integer> res\
    \ = new ArrayList<>();\n        int max_len = arr.size();\n        int start =\
    \ 0;\n        while(start < max_len){\n            int index = k - 1;\n      \
    \      while (index >= 0 && index < arr.size() && !arr.get(index).equals(res.get(index)))\
    \ {\n                index--;\n            }\n            if (index >= 0) {\n\
    \                res.add(arr.get(index));\n            }\n            else{\n\
    \                res.add((int)Math.pow(10, arr.size() - k));\n            }\n\
    \            start++;\n        }\n        return res;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpv8_v6rug.java:45: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        Arrays.sort(arr);\n        if (arr.size()\
    \ < k) throw new RuntimeException(\"The length of arr is less than k\");\n   \
    \     for (int i = 0; i < k; i++) {\n            result.add(arr.get(i));\n   \
    \     }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbsxr2h4c.java:26: error: no suitable method found for sort(ArrayList<Integer>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        ArrayList<Integer>\
    \ res = new ArrayList<Integer>();\n        int i = 0;\n        while (i < arr.size()\
    \ && i < k) {\n            if (arr.get(i) > arr.get(i + 1)) {\n              \
    \  res.add(arr.get(i));\n                i++;\n            } else {\n        \
    \        res.add(arr.get(i + 1));\n                i++;\n            }\n     \
    \   }\n        return res;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpk3t_b7dn.java:37: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        ArrayList<Integer>\
    \ largest = new ArrayList<>();\n        int n = arr.size();\n        Arrays.sort(arr);\n\
    \        Integer largestElement = arr.get(n-k);\n        for (int i = 0; i < (n-k+1);\
    \ i++) {\n            if (arr.get(i) == largestElement) {\n                largest.add(arr.get(i));\n\
    \            }\n        }\n        return largest;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqh0f8bie.java:27: error: no suitable method found for sort(ArrayList<Integer>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        ArrayList<Integer>\
    \ res = new ArrayList<>(k);\n        int maxValue = 0;\n        for (int i = 0;\
    \ i < k; i++) {\n            if (maxValue < arr.get(i)) maxValue = arr.get(i);\n\
    \        }\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i)\
    \ == maxValue) {\n                res.add(maxValue);\n                maxValue\
    \ = 0;\n            } else if (maxValue < arr.get(i)) maxValue = arr.get(i);\n\
    \        }\n        return res;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9v2cz2s8.java:37: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        int size = arr.size();\n        Arrays.sort(arr);\n\
    \        int left = 0;\n        int right = size - 1;\n        while (left <=\
    \ right) {\n            if (arr[left] >= k) {\n                result.add(arr[left]);\n\
    \                left += 1;\n            } else {\n                left += 1;\n\
    \            }\n        }\n        while (right > left) {\n            if (arr[right]\
    \ >= k) {\n                result.add(arr[right]);\n                right -= 1;\n\
    \            } else {\n                right -= 1;\n            }\n        }\n\
    \        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n   \
    \ }\n    public static void main(String[] args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-4, (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-3, (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpphupr_ql.java:27: error: no suitable method found for sort(ArrayList<Integer>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\n/tmp/tmpphupr_ql.java:31: error: array required, but ArrayList<Integer>\
    \ found\n            if (arr[left] >= k) {\n                   ^\n/tmp/tmpphupr_ql.java:32:\
    \ error: array required, but ArrayList<Integer> found\n                result.add(arr[left]);\n\
    \                              ^\n/tmp/tmpphupr_ql.java:39: error: array required,\
    \ bu"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        ArrayList<Integer>\
    \ list = new ArrayList<Integer>();\n        for (int i = 0; i < k; i++) {\n  \
    \          list.add(Integer.MIN_VALUE);\n        }\n        for (int i = 0; i\
    \ < arr.size(); i++) {\n            for (int j = 0; j < k; j++) {\n          \
    \      if (arr.get(i) <= list.get(j) && list.get(j) < arr.get(i)) {\n        \
    \            list.set(j, arr.get(i));\n                }\n            }\n    \
    \    }\n        return list;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmps07mgiur.java:37: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        arr.sort(Comparator.comparing(x\
    \ -> -Math.abs(x)));\n        ArrayList<Integer> ans = new ArrayList<Integer>();\n\
    \        for (int i = 0; i < k; i++) {\n            ans.add(arr.get(i));\n   \
    \     }\n        return ans;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4skpsbng.java:31: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        \n    \
    \    List<Integer> nums = new ArrayList<>();\n        nums.addAll(Arrays.asList(arr));\n\
    \        \n        // sort list\n        Collections.sort(nums);\n        \n \
    \       // create list of length k\n        List<Integer> result = new ArrayList<>();\n\
    \        for (int i = 0; i < k; i++) {\n            result.add(nums.get(i));\n\
    \        }\n        \n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvs2gxgd5.java:27: error: no suitable method found for addAll(List<ArrayList<Integer>>)\n\
    \        nums.addAll(Arrays.asList(arr));\n            ^\n    method Collection.addAll(Collection<?\
    \ extends Integer>) is not applicable\n      (argument mismatch; inferred type\
    \ does not conform to upper bound(s)\n          inferred: ArrayList<Integer>\n\
    \          upper bound(s): Integer,Object)\n    method List.addAll(Collection<?\
    \ extends Integer>) is not applicable\n      (argument mismatch; inferred type\
    \ does not conform to upper bound(s)\n          inferred: ArrayList<Integer>\n\
    \          upper bound(s): Integer,Object)\n/tmp/tmpvs2gxgd5.java:38: error: incompatible\
    \ types: List<Integer> cannot be converted to ArrayList<Integer>\n        return\
    \ result;\n               ^\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        if (arr.size() <= k) {\n       \
    \     for(Integer num: arr) {\n                if(result.size() < k) {\n     \
    \               result.add(num);\n                }\n            }\n         \
    \   return result;\n        }\n\n        for (int i = 0; i < k; i++) {\n     \
    \       int max = Integer.MIN_VALUE;\n            int maxIndex = -1;\n\n     \
    \       for (int j = 0; j < arr.size(); j++) {\n                if (arr.get(j)\
    \ > max) {\n                    max = arr.get(j);\n                    maxIndex\
    \ = j;\n                }\n            }\n            result.add(max);\n     \
    \       arr.remove(maxIndex);\n        }\n\n        return result;\nreturn new\
    \ ArrayList<Integer>(Arrays.asList());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3, (int)-4,\
    \ (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)-3,\
    \ (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpaawcm5x7.java:50: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        ArrayList<Integer>\
    \ res = new ArrayList<>(k);\n        Collections.sort(arr, Collections.reverseOrder());\n\
    \        int i = 0;\n        for (; i < k; i++) {\n            res.add(arr.get(i));\n\
    \        }\n        return res;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpve4lzn0w.java:32: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        PriorityQueue<Integer>\
    \ maxHeap = new PriorityQueue<Integer>();\n        int i = arr.size() - 1;\n \
    \       while (i >= 0 && k > 0) {\n            Integer val = arr.get(i);\n   \
    \         int comparison = Integer.compare(val, maxHeap.peek());\n           \
    \ if (comparison > 0) {\n                maxHeap.poll();\n            } else {\n\
    \                if (k > 0) {\n                    maxHeap.offer(val);\n     \
    \               k--;\n                } else {\n                    ArrayList<Integer>\
    \ res = new ArrayList<Integer>();\n                    while (!maxHeap.empty())\
    \ {\n                        res.add(maxHeap.poll());\n                    }\n\
    \                    return res;\n                }\n            }\n         \
    \   i--;\n        }\n        if (k == 0) {\n            ArrayList<Integer> res\
    \ = new ArrayList<Integer>();\n            while (!maxHeap.empty()) {\n      \
    \          res.add(maxHeap.poll());\n            }\n            return res;\n\
    \        } else {\n            return null;\n        }\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_1_62_7p.java:38: error: cannot find symbol\n                 \
    \   while (!maxHeap.empty()) {\n                                   ^\n  symbol:\
    \   method empty()\n  location: variable maxHeap of type PriorityQueue<Integer>\n\
    /tmp/tmp_1_62_7p.java:48: error: cannot find symbol\n            while (!maxHeap.empty())\
    \ {\n                           ^\n  symbol:   method empty()\n  location: variable\
    \ maxHeap of type PriorityQueue<Integer>\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        Arrays.sort(arr);\n        int size\
    \ = arr.size();\n        if (k > size) {\n            k = size;\n        }\n \
    \       for (int i = 0; i < k; i++) {\n            result.add(arr.get(i));\n \
    \       }\n        Collections.reverse(arr);\n        Arrays.sort(arr);\n    \
    \    for (int i = 0; i < k; i++) {\n            result.add(arr.get(i));\n    \
    \    }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1g2cgm14.java:26: error: no suitable method found for sort(ArrayList<Integer>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\n/tmp/tmp1g2cgm14.java:35: error: no suitable method found for sort(ArrayList<Integer>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayL"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        Arrays.sort(arr);\n\
    \        ArrayList<Integer> maxs = new ArrayList<Integer>();\n        if (arr.get(0)+1\
    \ == arr.get(1)) {\n            maxs.add(arr.get(0));\n            for (int i\
    \ = 2; i < arr.size(); i++) {\n                if (arr.get(i) > arr.get(i-1))\
    \ maxs.add(arr.get(i));\n            }\n        } else if (arr.get(1)+1 == arr.get(2))\
    \ {\n            maxs.add(arr.get(1));\n            for (int i = 3; i < arr.size();\
    \ i++) {\n                if (arr.get(i) > arr.get(i-2)) maxs.add(arr.get(i));\n\
    \            }\n        } else if (arr.get(0)+1 == arr.get(1)+1 == arr.get(2)+1)\
    \ {\n            maxs.add(arr.get(0));\n            for (int i = 3; i < arr.size();\
    \ i++) {\n                if (arr.get(i) > arr.get(i-2)) maxs.add(arr.get(i));\n\
    \            }\n        }\n        if (maxs.size() > k) return maxs;\n       \
    \ if (k == 0) return maxs;\n        int max = Integer.MIN_VALUE;\n        for\
    \ (int i = 0; i < arr.size()-1; i++) {\n            if (arr.get(i) > arr.get(i+1))\
    \ break;\n            if (max < arr.get(i)) {\n                max = arr.get(i);\n\
    \            }\n        }\n        ArrayList<Integer> maxs2 = new ArrayList<Integer>();\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) >\
    \ max) maxs2.add(arr.get(i));\n        }\n        return maxs2;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbiai9mqt.java:25: error: no suitable method found for sort(ArrayList<Integer>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\n/tmp/tmpbiai9mqt.java:37: error: incomparable types: boolean and\
    \ int\n        } else if (arr.get(0)+1 == arr.get(1)+1 == arr.get(2)+1) {\n  \
    \                                              ^\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        if (arr.size()\
    \ <= k) return arr;\n        ArrayList<Integer> maxKs = new ArrayList<Integer>(k);\n\
    \        Collections.sort(arr);\n        for (int i = 0; i < k; i++) {\n     \
    \       maxKs.add(arr.get(i));\n        }\n        return maxKs;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpyec6yr51.java:32: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        int n = arr.size();\n        if\
    \ (k > n) {\n            return result;\n        }\n        int left = 0, right\
    \ = n - 1, max = arr.get(0);\n        while (left < right) {\n            int\
    \ mid = (left + right) / 2;\n            if (arr[mid] > max) {\n             \
    \   max = arr[mid];\n            }\n            if (arr[mid] == max) {\n     \
    \           result.add(max);\n                right = mid - 1;\n            }\n\
    \            else {\n                result.add(max);\n                left =\
    \ mid;\n            }\n        }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvh96_gh4.java:33: error: array required, but ArrayList<Integer>\
    \ found\n            if (arr[mid] > max) {\n                   ^\n/tmp/tmpvh96_gh4.java:34:\
    \ error: array required, but ArrayList<Integer> found\n                max = arr[mid];\n\
    \                         ^\n/tmp/tmpvh96_gh4.java:36: error: array required,\
    \ but ArrayList<Integer> found\n            if (arr[mid] == max) {\n         \
    \          ^\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        if (k <=\
    \ 0 || k > arr.size())\n            throw new RuntimeException(\"Invalid k value\"\
    );\n\n        ArrayList<Integer> max = new ArrayList<Integer>();\n\n        for\
    \ (int i = 0; i < k; i++) {\n            int maxIndex = Collections.max(arr);\n\
    \n            max.add(maxIndex);\n            arr.remove(maxIndex);\n        }\n\
    \n        return max;\nreturn new ArrayList<Integer>(Arrays.asList());\n    }\n\
    \    public static void main(String[] args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-4, (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-3, (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvjui_y63.java:38: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        // write\
    \ your code here\n        ArrayList<Integer> max = new ArrayList<Integer>();\n\
    \        ArrayList<Integer> temp = new ArrayList<Integer>();\n        if(arr.size()\
    \ <= k){\n            max.add(arr.get(0));\n        }\n        else{\n       \
    \     for(int i=0; i<arr.size(); i++){\n                if(max.size() == k){\n\
    \                    break;\n                }\n                else if(arr.get(i)\
    \ < max.get(k-1)){\n                    temp.add(arr.get(i));\n              \
    \  }\n                else{\n                    max.add(arr.get(i));\n      \
    \          }\n            }\n            max = temp;\n        }\n        return\
    \ max;\nreturn new ArrayList<Integer>(Arrays.asList());\n    }\n    public static\
    \ void main(String[] args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-4, (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-3, (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpcgahuhlt.java:46: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        ArrayList<Integer>\
    \ maximums = new ArrayList<>();\n        \n        if (arr.size() < k) {\n   \
    \         return maximums;\n        }\n\n        for (int i=0; i<k; i++) {\n \
    \           int maxIndex = -1;\n            for (int j=0; j<arr.size(); j++) {\n\
    \                if (arr.get(j) > arr.get(maxIndex)) {\n                    maxIndex\
    \ = j;\n                }\n            }\n            maximums.add(arr.get(maxIndex));\n\
    \            arr.remove(maxIndex);\n        }\n\n        return maximums;\nreturn\
    \ new ArrayList<Integer>(Arrays.asList());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3, (int)-4,\
    \ (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)-3,\
    \ (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2j8pdq2a.java:43: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        ArrayList<Integer>\
    \ result = new ArrayList<>(k);\n        final int size = arr.size();\n       \
    \ List<Integer> list = arr;\n        int max = 0;\n        for (int i = 0; i <\
    \ k; i++) {\n            for (int j = 0; j < size; j++) {\n                max\
    \ = Math.max(max, arr.get(j));\n            }\n            result.add(max);\n\
    \            max = 0;\n        }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpy0f6d4sm.java:37: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        List<Integer> arr = new ArrayList<>();\n\
    \        arr.addAll(arr);\n        int n = arr.size();\n        int res = 0;\n\
    \        int mid = (arr.size() / 2) - 1;\n        Arrays.sort(arr);\n        for\
    \ (int i = 0; i < arr.size() - k + 1; i++) {\n            if (i == mid) {\n  \
    \              res = Math.max(res, arr.get(i));\n                res.add(arr.get(i\
    \ + 1));\n            } else {\n                res.add(arr.get(i));\n       \
    \     }\n            if (i == arr.size() - k) {\n                result.add(res);\n\
    \            }\n        }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpiopad3nf.java:26: error: variable arr is already defined in method\
    \ maximum(ArrayList<Integer>,int)\n        List<Integer> arr = new ArrayList<>();\n\
    \                      ^\n/tmp/tmpiopad3nf.java:31: error: no suitable method\
    \ found for sort(List<Integer>)\n        Arrays.sort(arr);\n              ^\n\
    \    method Arrays.sort(int[]) is not applicable\n      (argument mismatch; List<Integer>\
    \ cannot be converted to int[])\n    method Arrays.sort(long[]) is not applicable\n\
    \      (argument mismatch; List<Integer> cannot be converted to long[])\n    method\
    \ Arrays.sort(short[]) is not applicable\n      (argument mismatch; List<Integer>\
    \ cannot be converted to short[])\n    method Arrays.sort(char[]) is not applicable\n\
    \      (argument mismatch; List<Integer> cannot be converted to char[])\n    method\
    \ Arrays.sort(byte[]) is not applicable\n      (argument mismatch; List<Integer>\
    \ cannot be converted to byte[])\n    method Arrays.sort(float[]) is not applicable\n\
    \      (argument mismatch; List<Integer> cannot be converted to float[])\n   \
    \ method Arrays.sort(double[]) is not applicable\n      (argument mismatch; List<Integer>\
    \ cannot be converted to double[])\n    method Arrays.sort(Object[]) is not applicable\n\
    \      (argument mismatch; List<Integer> cannot be converted to Object[])\n  \
    \  method Arrays.<T#1>sort(T#1[],Comparator<? super T#1>) is not applicable\n\
    \      (cannot infer type-variable(s) T#1\n        (actual and formal argument\
    \ lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\n/tmp/tmpiopad3nf.java:35: error: int cannot be dereferenced\n \
    \               res.add(arr.get(i + 1));\n                   ^\n/tmp/tmpiopad3nf.java:37:\
    \ error: int cannot be dereferenced\n                re"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        if (arr.isEmpty())\
    \ {\n            return new ArrayList<Integer>();\n        }\n        int l =\
    \ 0;\n        int h = arr.size();\n        ArrayList<Integer> res = new ArrayList<>();\n\
    \        while (h > l) {\n            int m = (l + h) / 2;\n            if (arr.subList(l,\
    \ m).stream().max().get().intValue() == arr.subList(m, h).stream().max().get().intValue())\
    \ {\n                l = m;\n            } else {\n                h = m;\n  \
    \          }\n        }\n        if (k > h) {\n            for (int i = l + 1;\
    \ i <= h; i++) {\n                res.add(arr.get(i));\n            }\n      \
    \  } else {\n            for (int i = l + 1; i <= k; i++) {\n                res.add(arr.get(i));\n\
    \            }\n        }\n        return res;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpd9wqbb71.java:33: error: method max in interface Stream<T> cannot\
    \ be applied to given types;\n            if (arr.subList(l, m).stream().max().get().intValue()\
    \ == arr.subList(m, h).stream().max().get().intValue()) {\n                  \
    \                        ^\n  required: Comparator<? super Integer>\n  found:\
    \ no arguments\n  reason: actual and formal argument lists differ in length\n\
    \  where T is a type-variable:\n    T extends Object declared in interface Stream\n\
    /tmp/tmpd9wqbb71.java:33: error: method max in interface Stream<T> cannot be applied\
    \ to given types;\n            if (arr.subList(l, m).stream().max().get().intValue()\
    \ == arr.subList(m, h).stream().max().get().intValue()) {\n                  \
    \                                                                            \
    \ ^\n  required: Comparator<? super Integer>\n  found: no arguments\n  reason:\
    \ actual and formal argument lists differ in length\n  where T is a type-variable:\n\
    \    T extends Object declared in interface Stream\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        Collections.sort(arr);\n\
    \        ArrayList<Integer> result = new ArrayList<>(k);\n        result.addAll(arr);\n\
    \        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n   \
    \ }\n    public static void main(String[] args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-4, (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-3, (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpn0qwyxwk.java:29: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        PriorityQueue<Integer>\
    \ heap = new PriorityQueue<>(arr.size());\n        for(int i = 0; i < arr.size();\
    \ i++) {\n            heap.add(arr.get(i));\n            if (heap.size() >= k)\n\
    \                heap.poll();\n        }\n        ArrayList<Integer> list = new\
    \ ArrayList<>(k);\n        while(!heap.isEmpty()) {\n            list.add(heap.poll());\n\
    \        }\n        return list;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0wwvnzvg.java:36: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        int n = arr.size();\n        int[]\
    \ arr = new int[k];\n        int i = 0;\n        int j = 0;\n        while (j\
    \ < k) {\n            if (i == 0) {\n                arr[i] = arr.get(j);\n  \
    \          } else {\n                if (arr[i] > arr[j]) {\n                \
    \    arr[i] = arr.get(j);\n                } else {\n                    arr[j]\
    \ = arr[i];\n                }\n            }\n            i++;\n            j++;\n\
    \        }\n        Collections.sort(arr);\n        for (int i = 0; i < k; i++)\
    \ {\n            if (arr[i] > arr[i + 1]) {\n                result.add(arr[i\
    \ + 1]);\n            } else {\n                result.add(arr[i]);\n        \
    \    }\n        }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7zx0uwln.java:27: error: variable arr is already defined in method\
    \ maximum(ArrayList<Integer>,int)\n        int[] arr = new int[k];\n         \
    \     ^\n/tmp/tmp7zx0uwln.java:32: error: cannot find symbol\n               \
    \ arr[i] = arr.get(j);\n                            ^\n  symbol:   method get(int)\n\
    \  location: variable arr of type int[]\n/tmp/tmp7zx0uwln.java:35: error: cannot\
    \ find symbol\n                    arr[i] = arr.get(j);\n                    \
    \            ^\n  symbol:   method get(int)\n  location: variable arr of type\
    \ int[]\n/tmp/tmp7zx0uwln.java:43: error: no suitable method found for sort(int[])\n\
    \        Collections.sort(arr);\n                   ^\n    method Collections.<T#1>sort(List<T#1>)\
    \ is not applicable\n      (cannot infer type-variable(s) T#1\n        (argument\
    \ mismatch; int[] cannot be converted to List<T#1>))\n    method Collections.<T#2>sort(List<T#2>,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Comparable<? super T#1> declared in method\
    \ <T#1>sort(List<T#1>)\n    T#2 extends Object declared in method <T#2>sort(List<T#2>,Comparator<?\
    \ super T#2>)\n/tmp/tmp7zx0uwln.java:44: error: variable i is already defined\
    \ in method maximum(ArrayList<Integer>,int)\n        for (int i = 0; i < k; i++)\
    \ {\n                 ^\n5 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        int N =\
    \ arr.size();\n        Arrays.sort(arr);\n        ArrayList<Integer> result =\
    \ new ArrayList<Integer>(k);\n        for (int i = 0; i < k; i++) {\n        \
    \    result.add(arr.get(i));\n        }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpt23rvxty.java:26: error: no suitable method found for sort(ArrayList<Integer>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        // Complete\
    \ the function here\n        ArrayList<Integer> res = new ArrayList<Integer>();\n\
    \        int max = 0;\n        int temp = 0;\n        for (int i = 0; i < arr.size();\
    \ i++) {\n            if (arr.get(i) > max) {\n                max = arr.get(i);\n\
    \                temp = i;\n            }\n        }\n        if (max > k) {\n\
    \            for (int i = temp + 1; i <= arr.size(); i++) {\n                if\
    \ (arr.get(i) > max) {\n                    max = arr.get(i);\n              \
    \  }\n            }\n            res.add(max);\n        } else {\n           \
    \ for (int i = 0; i < arr.size(); i++) {\n                if (arr.get(i) > max\
    \ && i <= temp) {\n                    max = arr.get(i);\n                }\n\
    \            }\n            res.add(max);\n        }\n        return res;\nreturn\
    \ new ArrayList<Integer>(Arrays.asList());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3, (int)-4,\
    \ (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)-3,\
    \ (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3ubbu4i7.java:51: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        int left = 0, right = arr.size()\
    \ - 1;\n        while (left < right) {\n            int maxVal = -1;\n       \
    \     int mid = (left + right) / 2;\n            int midVal = arr[mid];\n    \
    \        if (midVal > 0 && midVal > maxVal) {\n                maxVal = midVal;\n\
    \            } else if (midVal < 0 && midVal < maxVal) {\n                maxVal\
    \ = midVal;\n            }\n            if (maxVal > 0) {\n                result.add(midVal);\n\
    \                left = mid + 1;\n            } else {\n                right\
    \ = mid - 1;\n            }\n        }\n        if (k == result.size()) {\n  \
    \          return result;\n        }\n        int mid = (result.size() - k + 1)\
    \ >> 1;\n        result.addAll(maximum(k, mid));\n        return result;\nreturn\
    \ new ArrayList<Integer>(Arrays.asList());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3, (int)-4,\
    \ (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)-3,\
    \ (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpx48babuw.java:30: error: array required, but ArrayList<Integer>\
    \ found\n            int midVal = arr[mid];\n                            ^\n/tmp/tmpx48babuw.java:47:\
    \ error: incompatible types: int cannot be converted to ArrayList<Integer>\n \
    \       result.addAll(maximum(k, mid));\n                              ^\nNote:\
    \ Some messages have been simplified; recompile with -Xdiags:verbose to get full\
    \ output\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        int n = arr.size();\n        int\
    \ max = Integer.MIN_VALUE;\n        for(int i = 0; i<n; i++) {\n            for(int\
    \ j = i + 1; j < n; j++) {\n                if(i+1 == j) continue;\n         \
    \       int tmp = arr.get(i);\n                if(i+1 < n && arr.get(j) > arr.get(i))\
    \ {\n                    tmp = arr.get(j);\n                    arr.set(j, arr.get(i));\n\
    \                    arr.set(i, tmp);\n                }\n                if(tmp\
    \ > max) {\n                    max = tmp;\n                }\n            }\n\
    \            result.add(max);\n            max = Integer.MIN_VALUE;\n        }\n\
    \        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n   \
    \ }\n    public static void main(String[] args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-4, (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-3, (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmppselmo_p.java:45: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        // sort\
    \ arr\n        Arrays.sort(arr);\n\n        // get max length\n        int max\
    \ = k;\n\n        // get all max length elements\n        List<Integer> result\
    \ = new ArrayList<>();\n        for (int i = 0; i < arr.size(); i++) {\n     \
    \       if (result.size() == k) {\n                break;\n            }\n   \
    \         int current = arr.get(i);\n            if (current > result.get(k -\
    \ 1)) {\n                result.add(current);\n            }\n        }\n\n  \
    \      return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n    }\n\
    \    public static void main(String[] args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-4, (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-3, (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6l5xb18w.java:26: error: no suitable method found for sort(ArrayList<Integer>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\n/tmp/tmp6l5xb18w.java:43: error: incompatible types: List<Integer>\
    \ cannot be converted to ArrayList<Integer>\n        return result;\n        \
    \       ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        // Complete\
    \ the function here\n        int n = arr.size();\n        ArrayList<Integer> max\
    \ = new ArrayList<>();\n        ArrayList<Integer> maxTemp = new ArrayList<>();\n\
    \        int temp = 0;\n        int tempMax = 0;\n\n        for(int i=0;i<n;i++){\n\
    \            if(i == 0){\n                maxTemp.add(arr.get(i));\n         \
    \   }\n            else{\n                if(arr.get(i) < maxTemp.get(tempMax)){\n\
    \                    maxTemp.add(arr.get(i));\n                }\n           \
    \     else{\n                    tempMax = tempMax;\n                    tempMax\
    \ = tempMax+1;\n                    maxTemp.set(tempMax,arr.get(i));\n       \
    \         }\n            }\n        }\n        for(int i=tempMax;i<n;i++){\n \
    \           max.add(maxTemp.get(i));\n        }\n\n        Collections.sort(max);\n\
    \        return max;\nreturn new ArrayList<Integer>(Arrays.asList());\n    }\n\
    \    public static void main(String[] args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-4, (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-3, (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpywfwr87e.java:53: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        // code\
    \ here\n        if (k > arr.size()) {\n            return arr;\n        }\n  \
    \      ArrayList<Integer> res = new ArrayList<>();\n        int index = 0;\n \
    \       while (index < k) {\n            if (arr.get(index) > arr.get(index +\
    \ 1)) {\n                res.add(arr.get(index));\n                index++;\n\
    \            } else {\n                res.add(arr.get(index + 1));\n        \
    \        index++;\n            }\n        }\n        return res;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5wowcwyg.java:41: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        Arrays.sort(arr);\n\
    \        ArrayList<Integer> result = new ArrayList<>();\n        int n = arr.size();\n\
    \        for(int i=0;i<k;i++) {\n            result.add(arr.get(n-k-i-1));\n \
    \       }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpe0jpzrqy.java:25: error: no suitable method found for sort(ArrayList<Integer>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        Arrays.sort(arr);\n\
    \        return arr.subList(arr.size()-k, arr.size());\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmppa6fmtow.java:25: error: no suitable method found for sort(ArrayList<Integer>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\n/tmp/tmppa6fmtow.java:26: error: incompatible types: List<Integer>\
    \ cannot be converted to ArrayList<Integer>\n        return arr.subList(arr.size()-k,\
    \ arr.size());\n                          ^\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        ArrayList<Integer>\
    \ list = new ArrayList<>();\n        for (int i = 0; i < k; i++) {\n         \
    \   list.add(Collections.max(arr));\n            arr.remove(Collections.max(arr));\n\
    \        }\n        return list;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5ru7sbux.java:31: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        if (k ==\
    \ 1) return arr;\n        ArrayList<Integer> result = new ArrayList<Integer>(k);\n\
    \        int startIndex = 0;\n        int endIndex = arr.size() - 1;\n       \
    \ int max = 0;\n        int maxIndex = -1;\n        while (startIndex <= endIndex)\
    \ {\n            int maxInd = startIndex + (endIndex - startIndex) / 2;\n    \
    \        if (max < arr[maxInd]) max = arr[maxInd];\n            if (maxIndex ==\
    \ -1 || arr[maxInd] > arr[maxIndex]) {\n                maxIndex = maxInd;\n \
    \           }\n            startIndex += (endIndex - startIndex) / 2;\n      \
    \      endIndex -= (endIndex - startIndex) / 2;\n        }\n        result.add(max);\n\
    \        result.add(arr[maxIndex]);\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmptylb9ab1.java:33: error: array required, but ArrayList<Integer>\
    \ found\n            if (max < arr[maxInd]) max = arr[maxInd];\n             \
    \            ^\n/tmp/tmptylb9ab1.java:33: error: array required, but ArrayList<Integer>\
    \ found\n            if (max < arr[maxInd]) max = arr[maxInd];\n             \
    \                               ^\n/tmp/tmptylb9ab1.java:34: error: array required,\
    \ but ArrayList<Integer> found\n            if (maxIndex == -1 || arr[maxInd]\
    \ > arr[maxIndex]) {\n                                     ^\n/tmp/tmptylb9ab1.java:34:\
    \ error: array required, but ArrayList<Integer> found\n            if (maxIndex\
    \ == -1 || arr[maxInd] > arr[maxIndex]) {\n                                  \
    \                 ^\n/tmp/tmptylb9ab1.java:41: error: array required, but ArrayList<Integer>\
    \ found\n        result.add(arr[maxIndex]);\n                      ^\n5 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        int result[]\
    \ = new int[k];\n        \n        // sort the array\n        Arrays.sort(arr);\n\
    \        \n        // get the maximum\n        for (int i = 0; i < k; ++i) {\n\
    \            result[i] = arr[i];\n        }\n        \n        // return the result\n\
    \        Arrays.sort(result);\n        ArrayList<Integer> resultArray = new ArrayList<Integer>(result);\n\
    \        return resultArray;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpnkj0hva5.java:28: error: no suitable method found for sort(ArrayList<Integer>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\n/tmp/tmpnkj0hva5.java:32: error: array required, but ArrayList<Integer>\
    \ found\n            result[i] = arr[i];\n                           ^\n/tmp/tmpnkj0hva5.java:37:\
    \ error: no suitable constructor found for ArrayList(int[])\n        ArrayList<Integer>\
    \ resultArray = new ArrayList<Integer>(result);\n                            \
    \         "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        int min\
    \ = arr.get(0);\n        int max = arr.get(0);\n        for (int i = 0; i < arr.size();\
    \ i++) {\n            if (arr.get(i) < min) {\n                min = arr.get(i);\n\
    \            } else if (arr.get(i) > max) {\n                max = arr.get(i);\n\
    \            }\n        }\n        ArrayList<Integer> result = new ArrayList<>(k);\n\
    \        for (int i = 0; i < k; i++) {\n            int mid = (max + min) / 2;\n\
    \            if (mid > 1000) {\n                mid = -1;\n            }\n   \
    \         if (mid < -1000) {\n                mid = -1;\n            }\n     \
    \       result.add(mid);\n        }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2iy5rdwc.java:46: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        // your\
    \ code here\n        ArrayList<Integer> ans = new ArrayList<Integer>();\n    \
    \    \n        // write your code here\n        int n = arr.size();\n        for(int\
    \ i = 0; i < arr.size(); i+=k){\n            int startIndex = 0;\n           \
    \ int endIndex = k - 1;\n            \n            if(k > arr.size()){\n     \
    \           k = arr.size();\n            }\n            for(int j = 0; j < k;\
    \ j++){\n                \n                if(startIndex == endIndex){\n     \
    \               if(arr.get(i) > arr.get(startIndex + j)){\n                  \
    \      startIndex = startIndex + j;\n                    }\n                 \
    \   else{\n                        endIndex = endIndex - j;\n                \
    \    }\n                }\n                else{\n                    if(arr.get(i)\
    \ > arr.get(startIndex) && arr.get(i) > arr.get(endIndex)){\n                \
    \        startIndex = startIndex + 1;\n                    }\n               \
    \     else if(arr.get(i) < arr.get(startIndex) && arr.get(i) > arr.get(endIndex)){\n\
    \                        endIndex = endIndex - 1;\n                    }\n   \
    \                 else if(arr.get(i) == arr.get(startIndex) && arr.get(i) > arr.get(endIndex)){\n\
    \                        startIndex = startIndex + 1;\n                    }\n\
    \                    else if(arr.get(i) == arr.get(startIndex) && arr.get(i) <\
    \ arr.get(endIndex)){\n                        endIndex = endIndex - 1;\n    \
    \                }\n                }\n            }\n            ans.add(arr.get(startIndex));\n\
    \        }\n        return ans;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp29yjmj1p.java:65: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        // write\
    \ your code here\n        ArrayList<Integer> list = new ArrayList<Integer>();\n\
    \        int max = Integer.MIN_VALUE;\n        int min = 0;\n        for(int i=0;\
    \ i<arr.size()-k; i++){\n            max = Math.max(max, arr.get(i));\n      \
    \      min = Math.min(min, arr.get(i+1));\n        }\n        for(int i=arr.size()-k-1;\
    \ i>=0; i--){\n            list.add(Math.max(max, arr.get(i)));\n        }\n \
    \       Collections.sort(list);\n        if(list.size() <= k){\n            return\
    \ list;\n        }\n        else{\n            list.remove(k);\n            return\
    \ list;\n        }\nreturn new ArrayList<Integer>(Arrays.asList());\n    }\n \
    \   public static void main(String[] args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-4, (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-3, (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqbvkhrvi.java:44: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        if(k >\
    \ arr.size()){\n            throw new RuntimeException(\"the value of k must be\
    \ less than the size of array\");\n        }\n        ArrayList<Integer> result\
    \ = new ArrayList<>();\n        Collections.sort(arr);\n        for(int i=0;i<k;i++){\n\
    \            result.add(arr.get(i));\n        }\n        return result;\nreturn\
    \ new ArrayList<Integer>(Arrays.asList());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3, (int)-4,\
    \ (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)-3,\
    \ (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpix60u6ff.java:34: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        ArrayList<Integer>\
    \ res = new ArrayList<Integer>();\n        Arrays.sort(arr);\n        int n =\
    \ arr.size();\n        for(int i=0; i<n; i++)\n            res.add(arr.get(i));\n\
    \        Collections.sort(res);\n        res = new ArrayList<Integer>();\n   \
    \     for(int i=k; i<n; i++)\n            res.add(arr.get(i));\n        Collections.sort(res);\n\
    \        return res;\nreturn new ArrayList<Integer>(Arrays.asList());\n    }\n\
    \    public static void main(String[] args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-4, (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-3, (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmphuwz_s14.java:26: error: no suitable method found for sort(ArrayList<Integer>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        ArrayList<Integer>\
    \ max = new ArrayList<>(k);\n        \n        arr.removeIf( i -> i < 0);\n  \
    \      int left = 0, right = arr.size() - 1;\n        \n        int sum = 0;\n\
    \        \n        while(left < right){\n            sum = arr.get(left) + arr.get(right);\n\
    \            \n            if( sum > max.get(k - 1)){\n                max.add(sum);\n\
    \            }\n            \n            if( sum < max.get(k - 1)){\n       \
    \         max.remove(k - 1);\n            }\n            \n            if( sum\
    \ == max.get(k - 1)){\n                right--;\n            }\n            \n\
    \            if( sum < max.get(k - 1)){\n                left++;\n           \
    \ }\n        }\n        \n        while(k != 0){\n            if( max.get(k -\
    \ 1) == -1){\n                k--;\n            }\n            else{\n       \
    \         k--;\n                max.remove(k - 1);\n            }\n        }\n\
    \        \n        arr.removeIf( i -> i < 0);\n        \n        for( Integer\
    \ i : max){\n            arr.add(i);\n        }\n        \n        return arr;\n\
    return new ArrayList<Integer>(Arrays.asList());\n    }\n    public static void\
    \ main(String[] args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-4, (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-3, (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_wz9ihnh.java:69: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        int minIndex\
    \ = 0;\n        int maxIndex = 0;\n\n        for(int i = 0; i < arr.size(); i++)\
    \ {\n            if (arr.get(i) < arr.get(minIndex))\n                minIndex\
    \ = i;\n            if (arr.get(i) > arr.get(maxIndex))\n                maxIndex\
    \ = i;\n        }\n\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        \n        for(int i = minIndex; i <= maxIndex; i++) {\n            result.add(arr.get(i));\n\
    \        }\n\n        Collections.sort(result);\n        \n        return result.toArray(new\
    \ Integer[k]);\nreturn new ArrayList<Integer>(Arrays.asList());\n    }\n    public\
    \ static void main(String[] args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-4, (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-3, (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpz1v_0v0i.java:43: error: incompatible types: no instance(s) of\
    \ type variable(s) T exist so that T[] conforms to ArrayList<Integer>\n      \
    \  return result.toArray(new Integer[k]);\n                             ^\n  where\
    \ T is a type-variable:\n    T extends Object declared in method <T>toArray(T[])\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        if (k == 1) {\n            return result;\n\
    \        }\n        Comparator<Integer> comparator = (o1, o2) -> {\n         \
    \   if (o1.intValue() > o2.intValue()) {\n                return 1;\n        \
    \    } else if (o1.intValue() < o2.intValue()) {\n                return -1;\n\
    \            } else {\n                return 0;\n            }\n        };\n\
    \        Arrays.sort(arr, comparator);\n        result.addAll(arr.subList(0, k));\n\
    \        result.addAll(arr.subList(k, arr.size()));\n        return result;\n\
    return new ArrayList<Integer>(Arrays.asList());\n    }\n    public static void\
    \ main(String[] args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-4, (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-3, (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpi9_rixlb.java:38: error: no suitable method found for sort(ArrayList<Integer>,Comparator<Integer>)\n\
    \        Arrays.sort(arr, comparator);\n              ^\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (argument mismatch; ArrayList<Integer> cannot be converted to T#1[]))\n\
    \    method Arrays.<T#2>sort(T#2[],int,int,Comparator<? super T#2>) is not applicable\n\
    \      (cannot infer type-variable(s) T#2\n        (actual and formal argument\
    \ lists differ in length))\n  where T#1,T#2 are type-variables:\n    T#1 extends\
    \ Object declared in method <T#1>sort(T#1[],Comparator<? super T#1>)\n    T#2\
    \ extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<? super\
    \ T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        // Write\
    \ your code here\n        if(k > arr.size()){\n            return arr;\n     \
    \   }\n        ArrayList<Integer> maxList = new ArrayList<Integer>();\n      \
    \  int maxValue = arr.get(0);\n        for(int i = 1; i < k; i++){\n         \
    \   if(arr.get(i) > maxValue){\n                maxValue = arr.get(i);\n     \
    \       }\n        }\n        maxList.add(maxValue);\n        return maxList;\n\
    return new ArrayList<Integer>(Arrays.asList());\n    }\n    public static void\
    \ main(String[] args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-4, (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-3, (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpo_xd092j.java:38: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        ArrayList<Integer>\
    \ list = new ArrayList<>(arr.size());\n        int leftIndex = 0;\n        int\
    \ rightIndex = arr.size() - 1;\n        int maxValue = arr.get(0);\n        while(rightIndex\
    \ >= leftIndex) {\n            if(maxValue < arr.get(rightIndex)) {\n        \
    \        maxValue = arr.get(rightIndex);\n                rightIndex--;\n    \
    \        } else if(maxValue == arr.get(rightIndex)) {\n                rightIndex--;\n\
    \            } else if(maxValue > arr.get(rightIndex)) {\n                maxValue\
    \ = arr.get(rightIndex);\n                rightIndex--;\n            } else if(maxValue\
    \ == arr.get(rightIndex) && rightIndex - leftIndex < k) {\n                list.add(maxValue);\n\
    \                maxValue = arr.get(rightIndex);\n                rightIndex--;\n\
    \            } else {\n                leftIndex++;\n            }\n        }\n\
    \        while(leftIndex < rightIndex) {\n            if(maxValue < arr.get(leftIndex))\
    \ {\n                maxValue = arr.get(leftIndex);\n                leftIndex++;\n\
    \            } else if(maxValue == arr.get(leftIndex)) {\n                leftIndex++;\n\
    \            } else if(maxValue > arr.get(leftIndex)) {\n                maxValue\
    \ = arr.get(leftIndex);\n                leftIndex++;\n            } else if(maxValue\
    \ == arr.get(leftIndex) && leftIndex - rightIndex < k) {\n                list.add(maxValue);\n\
    \                maxValue = arr.get(leftIndex);\n                leftIndex++;\n\
    \            } else {\n                rightIndex--;\n            }\n        }\n\
    \        return list;\nreturn new ArrayList<Integer>(Arrays.asList());\n    }\n\
    \    public static void main(String[] args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-4, (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-3, (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmphmiot45u.java:64: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        int maxCount\
    \ = 0;\n        ArrayList<Integer> temp = new ArrayList<>();\n        for(int\
    \ i = 0; i < arr.size(); i++) {\n            int count = Collections.frequency(arr,\
    \ arr.get(i));\n            if(count > maxCount) {\n                maxCount =\
    \ count;\n                temp = new ArrayList<>();\n                temp.add(arr.get(i));\n\
    \            }\n            if(count > maxCount && count > k) {\n            \
    \    temp = new ArrayList<>();\n                temp.add(arr.get(i));\n      \
    \      }\n        }\n        Collections.sort(temp);\n        System.out.println(temp);\n\
    \        return temp;\nreturn new ArrayList<Integer>(Arrays.asList());\n    }\n\
    \    public static void main(String[] args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-4, (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-3, (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp82i1ocf1.java:42: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        \n    \
    \    ArrayList<Integer> max = new ArrayList<Integer>();\n        \n        Arrays.sort(arr);\n\
    \        \n        int left = Math.max(0, arr.size() - k);\n        int right\
    \ = arr.size();\n        \n        ArrayList<Integer> curr = new ArrayList<Integer>();\n\
    \        \n        while((right - left) > 0) {\n            \n            for(int\
    \ i = left; i < right; i++) {\n                \n                curr.add(arr.get(i));\n\
    \            }\n            \n            curr.add(arr.get(right));\n        \
    \    \n            if(curr.size() > k) {\n                \n                max.addAll(0,\
    \ curr);\n            } else {\n                \n                max.add(curr.get(0));\n\
    \            }\n            \n            curr.remove(0);\n            \n    \
    \        left--;\n            right++;\n        }\n        \n        return max;\n\
    return new ArrayList<Integer>(Arrays.asList());\n    }\n    public static void\
    \ main(String[] args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-4, (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-3, (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpubaedfjv.java:28: error: no suitable method found for sort(ArrayList<Integer>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        ArrayList<Integer>\
    \ maxArray = new ArrayList<>();\n        int maxLen = 0;\n        int maxValue\
    \ = Integer.MIN_VALUE;\n\n        for(int i = 0; i < arr.size(); i++) {\n    \
    \        if(arr.get(i) > maxValue) {\n                maxLen = arr.size() - i\
    \ - 1;\n                maxValue = arr.get(i);\n            }\n        }\n\n \
    \       for(int i = 0; i < arr.size() - k + 1; i++) {\n            maxValue =\
    \ Math.min(maxValue, arr.get(i));\n\n            for(int j = i + 1; j < arr.size()\
    \ && j < arr.size() - k + 1; j++) {\n                if(arr.get(j) > arr.get(i)\
    \ && arr.get(j) > maxValue) {\n                    maxLen = arr.size() - j - 1;\n\
    \                    maxValue = arr.get(j);\n                }\n            }\n\
    \n            maxArray.add(maxValue);\n        }\n\n        return maxArray;\n\
    return new ArrayList<Integer>(Arrays.asList());\n    }\n    public static void\
    \ main(String[] args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-4, (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-3, (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpi_vxokhf.java:50: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        ArrayList<Integer>\
    \ maximum = new ArrayList<Integer>();\n\n        PriorityQueue<Integer> pq = new\
    \ PriorityQueue<>(arr.size(), (o1, o2) -> {\n            int val = Integer.compare(o1,\
    \ o2);\n            if (val == 0) {\n                return Integer.compare(arr.size(),\
    \ k);\n            }\n            return val;\n        });\n        for (int i\
    \ = 0; i < arr.size(); i++) {\n            pq.add(arr.get(i));\n            if\
    \ (pq.poll() == Integer.MAX_VALUE) {\n                maximum.add(Integer.MAX_VALUE);\n\
    \            } else {\n                maximum.add(i, pq.poll());\n          \
    \  }\n        }\n        return maximum;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpl_pn9855.java:43: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        // write\
    \ your code here\n        return null;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpn0alr6f4.java:27: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        // Write\
    \ your code here.\n        arr.sort(Comparator.comparing(Function.identity()));\n\
    \        return Arrays.copyOfRange(arr.subList(0, k), 0, k);\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpb0aasc86.java:26: error: cannot find symbol\n        arr.sort(Comparator.comparing(Function.identity()));\n\
    \                                      ^\n  symbol:   variable Function\n  location:\
    \ class Problem\n/tmp/tmpb0aasc86.java:27: error: no suitable method found for\
    \ copyOfRange(List<Integer>,int,int)\n        return Arrays.copyOfRange(arr.subList(0,\
    \ k), 0, k);\n                     ^\n    method Arrays.<T#1>copyOfRange(T#1[],int,int)\
    \ is not applicable\n      (cannot infer type-variable(s) T#1\n        (argument\
    \ mismatch; List<Integer> cannot be converted to T#1[]))\n    method Arrays.<T#2,U>copyOfRange(U[],int,int,Class<?\
    \ extends T#2[]>) is not applicable\n      (cannot infer type-variable(s) T#2,U\n\
    \        (actual and formal argument lists differ in length))\n    method Arrays.copyOfRange(byte[],int,int)\
    \ is not applicable\n      (argument mismatch; List<Integer> cannot be converted\
    \ to byte[])\n    method Arrays.copyOfRange(short[],int,int) is not applicable\n\
    \      (argument mismatch; List<Integer> cannot be converted to short[])\n   \
    \ method Arrays.copyOfRange(int[],int,int) is not applicable\n      (argument\
    \ mismatch; List<Integer> cannot be converted to int[])\n    method Arrays.copyOfRange(long[],int,int)\
    \ is not applicable\n      (argument mismatch; List<Integer> cannot be converted\
    \ to long[])\n    method Arrays.copyOfRange(char[],int,int) is not applicable\n\
    \      (argument mismatch; List<Integer> cannot be converted to char[])\n    method\
    \ Arrays.copyOfRange(float[],int,int) is not applicable\n      (argument mismatch;\
    \ List<Integer> cannot be converted to float[])\n    method Arrays.copyOfRange(double[],int,int)\
    \ is not applicable\n      (argument mismatch; List<Integer> cannot be converted\
    \ to double[])\n    method Arrays.copyOfRange(boolean[],int,int) is not applicable\n\
    \      (argument mismatch; List<Integer> cannot be converted to boolean[])\n \
    \ where T#1,T#2,U are type-variables:\n    T#1 extends Object declared in method\
    \ <T#1>copyOfRange(T#1[],int,int)\n    T#2 extends Object declared in method <T#2,U>copyOfRange(U[],int,int,Class"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        // code\
    \ here\n        \n        ArrayList<Integer> result=new ArrayList<>();\n     \
    \   int maxIndex=0;\n        for(int i=0; i<arr.size()-k; i++) {\n           \
    \ if(arr.get(i)>arr.get(maxIndex)){\n                maxIndex=i;\n           \
    \ }\n        }\n        for(int i=maxIndex; i<arr.size(); i++){\n            result.add(arr.get(i));\n\
    \        }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpnw8zu9tq.java:38: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        for(int i = 0; i< arr.size(); i++){\n \
    \           int max = 0;\n            for(int j=0; j<arr.size(); j++){\n     \
    \           if(arr.get(i) > arr.get(j)){\n                    max = arr.get(i);\n\
    \                }\n            }\n            result.add(max);\n        }\n \
    \       Collections.sort(result);\n        result.subList(0, k);\n        return\
    \ result;\nreturn new ArrayList<Integer>(Arrays.asList());\n    }\n    public\
    \ static void main(String[] args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-4, (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-3, (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpais2choo.java:38: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        \n    \
    \    ArrayList<Integer> max = new ArrayList<>(k);\n        \n        for(int i\
    \ = 0;i < k; i++) {\n            int index = Collections.binarySearch(arr,Integer.MIN_VALUE);\n\
    \            int value = arr.get(index);\n            max.add(value);\n      \
    \      Collections.sort(max);\n            arr.remove(index);\n            Collections.sort(arr);\n\
    \        }\n        return max;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpmn0spdd_.java:37: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        PriorityQueue<Integer>\
    \ maxHeap = new PriorityQueue<>(arr.size());\n        maxHeap.addAll(arr);\n \
    \       ArrayList<Integer> maxK = new ArrayList<>(k);\n        Integer maxVal\
    \ = null;\n        while (maxHeap.size() > k) {\n            Integer val = maxHeap.poll();\n\
    \            if (maxVal == null) {\n                maxVal = val;\n          \
    \  } else if (val > maxVal) {\n                maxVal = val;\n            }\n\
    \            maxK.add(val);\n        }\n        return maxK;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpj038j537.java:39: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        Arrays.sort(arr);\n\
    \        ArrayList result = new ArrayList<Integer>();\n        int maxNumber =\
    \ 0;\n        int index = 0;\n        for (int i = 0; i < arr.size(); i++) {\n\
    \            if (index == k) {\n                result.add(maxNumber);\n     \
    \           maxNumber = 0;\n            }\n            if (arr.get(i) > maxNumber)\
    \ {\n                maxNumber = arr.get(i);\n                index = i;\n   \
    \         }\n        }\n        result.add(maxNumber);\n        return result;\n\
    return new ArrayList<Integer>(Arrays.asList());\n    }\n    public static void\
    \ main(String[] args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-4, (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-3, (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxs70xf1h.java:25: error: no suitable method found for sort(ArrayList<Integer>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\nNote: /tmp/tmpxs70xf1h.java uses unchecked or unsafe operations.\n\
    Note: Recompile with -Xlint:unchecked for details.\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        ArrayList<Integer>\
    \ res = new ArrayList<Integer>();\n        for (int i = 0; i < arr.size(); i++)\
    \ {\n            int max = -100000;\n            for (int j = 0; j < arr.size();\
    \ j++) {\n                if (arr.get(i) > arr.get(j) && arr.get(i) != -100000\
    \ && arr.get(j) != -100000 && i != j) {\n                    max = arr.get(j);\n\
    \                }\n            }\n            res.add(max);\n        }\n    \
    \    return res.subList(k, res.size());\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpm7ca4ooi.java:35: error: incompatible types: List<Integer> cannot\
    \ be converted to ArrayList<Integer>\n        return res.subList(k, res.size());\n\
    \                          ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        if (k >\
    \ arr.size())\n            return arr;\n        Arrays.sort(arr);\n        ArrayList<Integer>\
    \ res = new ArrayList<Integer>();\n        int end = arr.size();\n        int\
    \ pos = 0;\n        int maxValue = arr.get(0);\n        while (pos < end) {\n\
    \            if (pos == k)\n                res.add(maxValue);\n            if\
    \ (arr.get(pos) > maxValue) {\n                maxValue = arr.get(pos);\n    \
    \            pos = 0;\n            } else {\n                pos++;\n        \
    \    }\n        }\n        return res;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2qjernvk.java:27: error: no suitable method found for sort(ArrayList<Integer>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        ArrayList<Integer>\
    \ maxNum = new ArrayList<Integer>();\n\n        for (int i = 0; i < arr.size();\
    \ i++) {\n            for (int j = i + 1; j < arr.size(); j++) {\n           \
    \     if (arr.get(i) <= arr.get(j)) {\n                    ArrayList<Integer>\
    \ temp = new ArrayList<Integer>();\n                    temp.add(arr.get(i));\n\
    \                    temp.add(arr.get(j));\n                    maxNum.add(temp);\n\
    \                }\n            }\n        }\n\n        return maxNum;\nreturn\
    \ new ArrayList<Integer>(Arrays.asList());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3, (int)-4,\
    \ (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)-3,\
    \ (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpli6z5ku2.java:33: error: no suitable method found for add(ArrayList<Integer>)\n\
    \                    maxNum.add(temp);\n                          ^\n    method\
    \ Collection.add(Integer) is not applicable\n      (argument mismatch; ArrayList<Integer>\
    \ cannot be converted to Integer)\n    method List.add(Integer) is not applicable\n\
    \      (argument mismatch; ArrayList<Integer> cannot be converted to Integer)\n\
    \    method AbstractCollection.add(Integer) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to Integer)\n    method AbstractList.add(Integer)\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to Integer)\n    method ArrayList.add(Integer) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to Integer)\nNote: Some messages\
    \ have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        // Write\
    \ your code here.\n        return null;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_fbztxxd.java:27: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        if (k ==\
    \ 0) return new ArrayList<>(arr);\n        \n        ArrayList<Integer> result\
    \ = new ArrayList<>();\n        \n        int maxLength = 0;\n        int maxIndex\
    \ = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.size()\
    \ >= k) {\n                maxLength = k;\n                maxIndex = i;\n   \
    \         }\n            if (maxLength > arr.size() || maxLength < k) {\n    \
    \            maxLength = 1;\n                maxIndex = i;\n            }\n  \
    \          if (arr.get(i) > arr.get(maxIndex)) {\n                maxLength =\
    \ arr.size();\n                maxIndex = i;\n            }\n        }\n     \
    \   \n        if (maxLength < arr.size()) {\n            while (maxLength < arr.size())\
    \ {\n                result.add(Integer.MIN_VALUE);\n                maxLength++;\n\
    \            }\n        }\n        \n        for (int i = maxIndex; i > 0; i--)\
    \ {\n            if (arr.get(i) < arr.get(i - 1)) {\n                result.add(arr.get(i\
    \ - 1));\n                maxLength--;\n            }\n        }\n        \n \
    \       return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n    }\n\
    \    public static void main(String[] args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-4, (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-3, (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp509kccnt.java:61: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        ArrayList<Integer>\
    \ res = new ArrayList<>();\n        int size = arr.size();\n        int counter\
    \ = 0;\n        for (int i = 0; i < k; i++) {\n            while (counter < size\
    \ && arr.get(counter) > arr.get(i))\n                counter++;\n            if\
    \ (counter < size) {\n                res.add(arr.get(i));\n            }\n  \
    \      }\n        return res;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmprzw4t648.java:36: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        ArrayList<Integer>\
    \ max = new ArrayList<Integer>();\n        if (arr.size() > k) {\n           \
    \ max.addAll(Collections.nCopies(k, Integer.MAX_VALUE));\n            max.addAll(arr.subList(0,\
    \ k));\n        } else {\n            max.addAll(arr);\n        }\n        Collections.sort(max);\n\
    \        return max;\nreturn new ArrayList<Integer>(Arrays.asList());\n    }\n\
    \    public static void main(String[] args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-4, (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-3, (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpgyezq_ot.java:34: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        ArrayList<Integer>\
    \ res = new ArrayList<>(k);\n        Integer[] array1 = arr.stream().mapToInt(i\
    \ -> i).toArray();\n        int left = 0, right = array1.length - 1;\n       \
    \ while (left <= right) {\n            while (left < right && array1[left] <=\
    \ array1[right]) {\n                left++;\n            }\n            while\
    \ (left < right && array1[left] > array1[right]) {\n                right--;\n\
    \            }\n            if (left < right) {\n                int tmp1 = array1[left];\n\
    \                int tmp2 = array1[right];\n                int index = left;\n\
    \                if (tmp1 < tmp2) {\n                    res.add(tmp1);\n    \
    \                left = ++index;\n                }\n                if (tmp1\
    \ > tmp2) {\n                    res.add(tmp2);\n                    right = --index;\n\
    \                }\n            }\n        }\n        return res;\nreturn new\
    \ ArrayList<Integer>(Arrays.asList());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3, (int)-4,\
    \ (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)-3,\
    \ (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpna95upok.java:26: error: incompatible types: int[] cannot be converted\
    \ to Integer[]\n        Integer[] array1 = arr.stream().mapToInt(i -> i).toArray();\n\
    \                                                                ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        int n =\
    \ arr.size();\n        if(k == 0 || k == n) return arr;\n        ArrayList<Integer>\
    \ max_arr = new ArrayList<Integer>();\n        for(int i = 0; i < k; i++){\n \
    \           max_arr.add(Collections.max(arr));\n            Collections.sort(arr);\n\
    \            arr.remove(Collections.max(arr));\n        }\n        return max_arr;\n\
    return new ArrayList<Integer>(Arrays.asList());\n    }\n    public static void\
    \ main(String[] args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-4, (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-3, (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdd16icec.java:34: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        ArrayList<Integer>\
    \ res = new ArrayList<Integer>();\n        Collections.sort(arr);\n        int\
    \ sum = 0;\n        int l = 0, r = 0;\n        for(int i = 0; i< arr.size(); i++)\
    \ {\n            sum += arr.get(i);\n            if (sum > k) {\n            \
    \    r++;\n                sum -= arr.get(i);\n            }\n            if (sum\
    \ > k) {\n                res.add(arr.get(r));\n                sum -= arr.get(r);\n\
    \                r++;\n            }\n        }\n        res.add(arr.get(r));\n\
    \        return res;\nreturn new ArrayList<Integer>(Arrays.asList());\n    }\n\
    \    public static void main(String[] args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-4, (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-3, (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp03hxujcg.java:43: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        ArrayList<Integer> tmp = new ArrayList<>();\n\
    \        // sort and save maximum values\n        int maxValue = arr.get(0);\n\
    \        for (int i = 1; i < arr.size(); i++) {\n            int tmp = arr.get(i);\n\
    \            if (tmp > maxValue) {\n                maxValue = tmp;\n        \
    \    }\n        }\n        for (int i = 0; i < k; i++) {\n            tmp.add(maxValue);\n\
    \        }\n        // copy tmp array into result array\n        for (int i =\
    \ 0; i < tmp.size() - 1; i++) {\n            result.add(tmp.get(i + 1));\n   \
    \     }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpw4fl5m7w.java:30: error: variable tmp is already defined in method\
    \ maximum(ArrayList<Integer>,int)\n            int tmp = arr.get(i);\n       \
    \         ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        Integer[]\
    \ arr = arr.getClass().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType\n\
    return new ArrayList<Integer>(Arrays.asList());\n    }\n    public static void\
    \ main(String[] args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-4, (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-3, (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbe5kxigc.java:25: error: ';' expected\n        Integer[] arr =\
    \ arr.getClass().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getComponentType().getCom"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        int m =\
    \ arr.size();\n        ArrayList<Integer> max = new ArrayList<>();\n        ArrayList<Integer>\
    \ ans = new ArrayList<>();\n        int j = 0;\n        for (int i = 0; i < m;\
    \ i++) {\n            if (j < k) {\n                if (arr.get(i) > arr.get(j))\
    \ {\n                    int tmp = arr.get(i);\n                    arr.set(i,\
    \ arr.get(j));\n                    arr.set(j, tmp);\n                    j++;\n\
    \                }\n            } else {\n                if (arr.get(i) > arr.get(j))\
    \ {\n                    int tmp = arr.get(i);\n                    arr.set(i,\
    \ arr.get(j));\n                    arr.set(j, tmp);\n                    max\
    \ = new ArrayList<>();\n                    max = new ArrayList<>(arr);\n    \
    \                ans.add(max.get(0));\n                    k--;\n            \
    \    }\n            }\n        }\n        if (arr.size() < k) {\n            max.add(arr.get(0));\n\
    \        }\n        return ans;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmphf7tj19d.java:53: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        if (arr.size()\
    \ == 0 || k == 0 || k < 0) return arr;\n        int n = arr.size();\n        ArrayList<Integer>\
    \ maximums = new ArrayList<>(n);\n        if (k == n) return maximums;\n     \
    \   if (k < n) k = n;\n        for (int i = 0; i < k; i++) {\n            maximums.add(Math.max(arr.get(i),\
    \ arr.get(n - 1 - i)));\n        }\n        return maximums;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp89hidan_.java:34: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        // Write\
    \ your code here.\n        ArrayList<Integer> res = new ArrayList<Integer>();\n\
    \        if(arr.isEmpty()) {\n            return res;\n        }\n        \n \
    \       \n        while(arr.size() <= k){\n            int max_val = Collections.max(arr);\n\
    \            arr.add(max_val);\n            res.add(max_val);\n        }\n   \
    \     return res;\nreturn new ArrayList<Integer>(Arrays.asList());\n    }\n  \
    \  public static void main(String[] args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-4, (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-3, (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmps6q92226.java:38: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        Arrays.sort(arr);\n\
    \        ArrayList<Integer> ans = new ArrayList<>(k);\n        for(int i=0; i<k;\
    \ i++){\n            ans.add(arr.get(i));\n        }\n        return ans;\nreturn\
    \ new ArrayList<Integer>(Arrays.asList());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3, (int)-4,\
    \ (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)-3,\
    \ (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmppq8hxxgi.java:25: error: no suitable method found for sort(ArrayList<Integer>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        Arrays.sort(arr);\n\
    \        ArrayList<Integer> result = new ArrayList<Integer>(k);\n        for (int\
    \ i = arr.size() - 1; i >= k; i--) {\n            result.add(arr.get(i));\n  \
    \      }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7hy7xp7z.java:25: error: no suitable method found for sort(ArrayList<Integer>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        Arrays.sort(arr);\n\
    \        int len = (int) Math.pow(2, Integer.parseInt(String.valueOf(arr.size())));\n\
    \        ArrayList<Integer> res = new ArrayList<Integer>();\n        for (int\
    \ i = 0; i < len; i++) {\n            int max = Integer.MIN_VALUE;\n         \
    \   for (int j = 0; j < arr.size(); j++) {\n                int t = arr.get(j);\n\
    \                if (max < t) {\n                    max = t;\n              \
    \  }\n            }\n            res.add(max);\n        }\n        int n = arr.size();\n\
    \        int m = k;\n        while (n > m) {\n            if (res.get(m) <= res.get(n))\
    \ {\n                m--;\n            }\n            n--;\n        }\n      \
    \  return res;\nreturn new ArrayList<Integer>(Arrays.asList());\n    }\n    public\
    \ static void main(String[] args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-4, (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-3, (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpomo1j1pv.java:25: error: no suitable method found for sort(ArrayList<Integer>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        PriorityQueue<Integer> queue = new\
    \ PriorityQueue<Integer>();\n\n        for(int i = 0; i < arr.size(); i++) {\n\
    \            int x = arr.get(i);\n            queue.offer(x);\n            while(queue.size()\
    \ > k && queue.peek() >= x) {\n                queue.poll();\n            }\n\
    \            if(queue.size() > k) {\n                result.add(queue.peek());\n\
    \            }\n        }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp044c0fsa.java:39: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        int start\
    \ = 0;\n        int end = arr.size() - 1;\n        ArrayList<Integer> temp = new\
    \ ArrayList<>(arr.size());\n        while (end >= start) {\n            if (end\
    \ - start == k) {\n                Collections.sort(temp);\n                for\
    \ (int i = 0; i < k; i++)\n                    temp.add(arr.get(start + i));\n\
    \                Collections.sort(temp);\n                for (int i = 0; i <\
    \ k; i++)\n                    temp.add(arr.get(end + i));\n                return\
    \ temp;\n            } else if (end - start > k) {\n                Collections.sort(temp,\
    \ (a, b) -> b - a);\n                end = end - k;\n            } else {\n  \
    \              Collections.sort(temp, (a, b) -> a - b);\n                start\
    \ = start + k;\n            }\n        }\n        return temp;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpnvszd5lp.java:46: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        if (arr.size()\
    \ <= k) {\n            ArrayList<Integer> res = new ArrayList<>(arr.size());\n\
    \            for (int i = 0; i < arr.size(); i++) {\n                res.add(arr.get(i));\n\
    \            }\n            return res;\n        }\n        PriorityQueue<Integer>\
    \ pq = new PriorityQueue<>(arr.size() - k);\n        ArrayList<Integer> res =\
    \ new ArrayList<>(k);\n        int i = 0;\n        int j = 0;\n        while (j\
    \ < k) {\n            if (i >= arr.size()) {\n                j++;\n         \
    \       continue;\n            }\n            if (pq.isEmpty()) {\n          \
    \      pq.add(arr.get(i));\n                i++;\n                continue;\n\
    \            }\n            if (pq.poll() >= arr.get(i)) {\n                pq.offer(arr.get(i));\n\
    \                res.add(arr.get(i));\n                i++;\n            } else\
    \ {\n                j++;\n            }\n        }\n        return res;\nreturn\
    \ new ArrayList<Integer>(Arrays.asList());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3, (int)-4,\
    \ (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)-3,\
    \ (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2nzkx3_d.java:55: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        // Write\
    \ your code here\n        ArrayList<Integer> max = new ArrayList<Integer>(k);\n\
    \        max.addAll(arr);\n        Collections.sort(max);\n        return max;\n\
    return new ArrayList<Integer>(Arrays.asList());\n    }\n    public static void\
    \ main(String[] args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-4, (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-3, (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpnyzjh0h6.java:30: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        int maxNum\
    \ = 0;\n        int maxIndex = 0;\n        for(int i = 0; i < arr.size(); i++)\
    \ {\n            if (maxNum < arr.get(i)) {\n                maxNum = arr.get(i);\n\
    \                maxIndex = i;\n            }\n        }\n        ArrayList<Integer>\
    \ res = new ArrayList<>();\n        for(int i = 0; i < maxIndex - k + 1; i++)\
    \ {\n            res.add(maxNum);\n        }\n        return res;\nreturn new\
    \ ArrayList<Integer>(Arrays.asList());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3, (int)-4,\
    \ (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)-3,\
    \ (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1dgpbc7h.java:38: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        ArrayList<Integer>\
    \ res = new ArrayList<>();\n        if (k > arr.size()) {\n            return\
    \ res;\n        }\n        if (k == 1) {\n            res.add(arr.get(0));\n \
    \           return res;\n        }\n        Collections.sort(arr);\n        for\
    \ (int i = 0; i < arr.size() - k; i++) {\n            Integer max = Collections.max(arr.subList(i,\
    \ i + k));\n            res.add(max);\n        }\n        return res;\nreturn\
    \ new ArrayList<Integer>(Arrays.asList());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3, (int)-4,\
    \ (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)-3,\
    \ (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpmxc8igt3.java:39: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        ArrayList<Integer>\
    \ maximum = new ArrayList<Integer>();\n        Arrays.sort(arr);\n        for(int\
    \ i = 0; i< arr.size()-k; i++) {\n            maximum.add(arr.get(i));\n     \
    \   }\n        return maximum;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvwsob5y6.java:26: error: no suitable method found for sort(ArrayList<Integer>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        ArrayList<Integer>\
    \ arr = new ArrayList<>();\n        Integer maxValue = Integer.MIN_VALUE;\n  \
    \      Integer maxIndex = null;\n\n        for (int i = 0; i < arr.size(); i++)\
    \ {\n            if (maxValue < arr.get(i)) {\n                maxValue = arr.get(i);\n\
    \                maxIndex = i;\n            }\n        }\n\n        // copy the\
    \ rest of the array\n        while (i < arr.size()) {\n            arr.add(i,\
    \ arr.get(i));\n            i++;\n        }\n\n        // sort from max to min\n\
    \        Collections.sort(arr, Collections.reverseOrder());\n\n        if (maxIndex\
    \ <= k) {\n            return new ArrayList<>(Arrays.asList(arr.get(0), arr.get(k)));\n\
    \        } else {\n            return new ArrayList<>(Arrays.asList(arr.get(maxIndex)));\n\
    \        }\nreturn new ArrayList<Integer>(Arrays.asList());\n    }\n    public\
    \ static void main(String[] args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-4, (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-3, (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpicis12f5.java:25: error: variable arr is already defined in method\
    \ maximum(ArrayList<Integer>,int)\n        ArrayList<Integer> arr = new ArrayList<>();\n\
    \                           ^\n/tmp/tmpicis12f5.java:37: error: cannot find symbol\n\
    \        while (i < arr.size()) {\n               ^\n  symbol:   variable i\n\
    \  location: class Problem\n/tmp/tmpicis12f5.java:38: error: cannot find symbol\n\
    \            arr.add(i, arr.get(i));\n                    ^\n  symbol:   variable\
    \ i\n  location: class Problem\n/tmp/tmpicis12f5.java:38: error: cannot find symbol\n\
    \            arr.add(i, arr.get(i));\n                               ^\n  symbol:\
    \   variable i\n  location: class Problem\n/tmp/tmpicis12f5.java:39: error: cannot\
    \ find symbol\n            i++;\n            ^\n  symbol:   variable i\n  location:\
    \ class Problem\n5 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        ArrayList<Integer>\
    \ maximum = new ArrayList<>();\n        boolean flag = false;\n        // 1. Check\
    \ whether k <= length of arr\n        if (k > arr.size()) {\n            return\
    \ maximum;\n        }\n        // 2. check whether the given array is sorted.\n\
    \        if (arr.get(0) == arr.get(arr.size() - 1)) {\n            return maximum;\n\
    \        }\n        Arrays.sort(arr);\n        for (int i = 1; i < k; i++) {\n\
    \            maximum.add(arr.get(i));\n        }\n        // 3. Add maximum at\
    \ last\n        maximum.add(arr.get(arr.size() - 1));\n        return maximum;\n\
    return new ArrayList<Integer>(Arrays.asList());\n    }\n    public static void\
    \ main(String[] args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-4, (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-3, (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpe99ko1_n.java:35: error: no suitable method found for sort(ArrayList<Integer>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        ArrayList<Integer>\
    \ list = new ArrayList<Integer>(arr.size());\n        int m = arr.size();\n  \
    \      for(int i = 0; i < m; i++) {\n            int max_ele = Integer.MIN_VALUE;\n\
    \            for(int j = 0; j < arr.size(); j++) {\n                if(i == j)\
    \ continue;\n                int ele = arr.get(j);\n                if(ele > max_ele)\
    \ {\n                    max_ele = ele;\n                }\n            }\n  \
    \          list.add(max_ele);\n        }\n        Collections.sort(list);\n  \
    \      return list.subList(0, k);\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpm8kkte48.java:39: error: incompatible types: List<Integer> cannot\
    \ be converted to ArrayList<Integer>\n        return list.subList(0, k);\n   \
    \                        ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        // write\
    \ your code here\n        int n = arr.size();\n        ArrayList<Integer> max\
    \ = new ArrayList<Integer>();\n        ArrayList<Integer> min = new ArrayList<Integer>();\n\
    \        ArrayList<Integer> result = new ArrayList<Integer>();\n        for (int\
    \ i = 0; i < k; i++) {\n            max.add(arr.get(i));\n            min.add(arr.get(i));\n\
    \        }\n        for (int i = 0; i < n; i++) {\n            if (max.get(i)\
    \ > max.get(i + 1) && max.get(i) > max.get(i + 2)) {\n                max.set(i,\
    \ max.get(i));\n                max.set(i + 1, max.get(i + 1));\n            \
    \    max.set(i + 2, max.get(i + 2));\n            }\n            if (min.get(i)\
    \ < min.get(i + 1) && min.get(i) < min.get(i + 2)) {\n                min.set(i,\
    \ min.get(i));\n                min.set(i + 1, min.get(i + 1));\n            \
    \    min.set(i + 2, min.get(i + 2));\n            }\n        }\n\n        for\
    \ (int i = 0; i < n; i++) {\n            result.add(max.get(i));\n           \
    \ result.add(min.get(i));\n        }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmproyoxwj_.java:52: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        Arrays.sort(arr);\n        for(int\
    \ i=0; i<k; i++) {\n            result.add(arr.get(i));\n        }\n        return\
    \ result;\nreturn new ArrayList<Integer>(Arrays.asList());\n    }\n    public\
    \ static void main(String[] args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-4, (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-3, (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfe4zdhz9.java:26: error: no suitable method found for sort(ArrayList<Integer>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        // write\
    \ your code here\n        Arrays.sort(arr);\n        return arr.subList(k, arr.size());\n\
    return new ArrayList<Integer>(Arrays.asList());\n    }\n    public static void\
    \ main(String[] args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-4, (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-3, (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpveh7xw__.java:26: error: no suitable method found for sort(ArrayList<Integer>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\n/tmp/tmpveh7xw__.java:27: error: incompatible types: List<Integer>\
    \ cannot be converted to ArrayList<Integer>\n        return arr.subList(k, arr.size());\n\
    \                          ^\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        ArrayList<Integer>\
    \ result = new ArrayList<>(k);\n        Collections.sort(arr);\n        if (k\
    \ == 0) return arr;\n        result.add(0, arr.get(k - 1));\n        for (int\
    \ i = arr.size() - 1; i > 0; i--) {\n            if (result.size() == k) {\n \
    \               Collections.sort(result);\n                return result;\n  \
    \          }\n            if (arr.get(i) >= result.get(k - 1)) {\n           \
    \     result.add(arr.get(i));\n            }\n        }\n        return result;\n\
    return new ArrayList<Integer>(Arrays.asList());\n    }\n    public static void\
    \ main(String[] args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-4, (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-3, (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpd_zvz1e_.java:39: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        // Your\
    \ code here\n        ArrayList<Integer> max = new ArrayList<Integer>();\n    \
    \    for(int i = 0; i < arr.size(); i++){\n            int count = 0;\n      \
    \      for(int j = 0; j < arr.size(); j++){\n                if(i != j){\n   \
    \                 if(arr.get(i) > arr.get(j)){\n                        if(count\
    \ == k){\n                            max.add(arr.get(i));\n                 \
    \           break;\n                        }\n                        count++;\n\
    \                    } else {\n                        max.add(arr.get(j));\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ max;\nreturn new ArrayList<Integer>(Arrays.asList());\n    }\n    public static\
    \ void main(String[] args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-4, (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-3, (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp75upj1ur.java:44: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        ArrayList<Integer>\
    \ max = new ArrayList<>();\n        Arrays.sort(arr);\n\n        for (int i =\
    \ 0; i < arr.size() - k + 1; i++) {\n            Collections.addAll(max, arr.subList(i,\
    \ i + k));\n        }\n        return max;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqe767wao.java:26: error: no suitable method found for sort(ArrayList<Integer>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\n/tmp/tmpqe767wao.java:29: error: method addAll in class Collections\
    \ cannot be applied to given types;\n            Collections.addAll(max, arr.subList(i,\
    \ i + k));\n                       ^\n  required: Collection<? super T>,T[]\n\
    \  found: ArrayList<Integer>,List<Integer>\n  reason: inferred type does not conform\
    \ to upper bound(s)\n    inf"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        if (k >\
    \ arr.size()) return new ArrayList<Integer>();\n        if (k == 0) return new\
    \ ArrayList<Integer>(arr);\n        ArrayList<Integer> res = new ArrayList<Integer>();\n\
    \        res.add(arr.get(arr.size() - 1));\n        Arrays.sort(arr);\n      \
    \  int start = 0;\n        for (int i = arr.size() - 1; i >= k; i--) {\n     \
    \       while (i < k) {\n                if (arr.get(i) > arr.get(start + i))\
    \ {\n                    res.add(arr.get(start + i));\n                    break;\n\
    \                }\n                start++;\n            }\n        }\n     \
    \   return res;\nreturn new ArrayList<Integer>(Arrays.asList());\n    }\n    public\
    \ static void main(String[] args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-4, (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-3, (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzofxv_vh.java:29: error: no suitable method found for sort(ArrayList<Integer>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        ArrayList<Integer>\
    \ res = new ArrayList<Integer>();\n        int n = 0;\n        for (int i = 0;\
    \ i < arr.size(); i++) {\n            if (n++ == k) {\n                res.add(arr.get(i));\n\
    \                res.add(arr.get(i));\n                break;\n            }\n\
    \            if (n > k) {\n                break;\n            }\n           \
    \ res.add(arr.get(i));\n        }\n        return res;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7urlh8jo.java:39: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        Arrays.sort(arr);\n\
    \        ArrayList<Integer> res = new ArrayList<Integer>();\n        if (k ==\
    \ 0) return res;\n        int n = arr.size();\n        int index = 0, maxIndex\
    \ = 0;\n        for (int i = 0; i < k; i++) {\n            if (maxIndex < n) {\n\
    \                if (arr.get(i) > arr.get(maxIndex)) maxIndex = i;\n         \
    \   }\n        }\n        while (index != n) {\n            if (index != maxIndex)\
    \ {\n                res.add(arr.get(index));\n                index++;\n    \
    \        } else {\n                res.add(arr.get(index));\n                index++;\n\
    \                maxIndex++;\n            }\n        }\n        return res;\n\
    return new ArrayList<Integer>(Arrays.asList());\n    }\n    public static void\
    \ main(String[] args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-4, (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-3, (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8mhu807v.java:25: error: no suitable method found for sort(ArrayList<Integer>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        // sort\
    \ arr\n        Arrays.sort(arr);\n        // return max k arr\n        return\
    \ arr.subList(arr.size() - k, arr.size());\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpe5wb7ph7.java:26: error: no suitable method found for sort(ArrayList<Integer>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\n/tmp/tmpe5wb7ph7.java:28: error: incompatible types: List<Integer>\
    \ cannot be converted to ArrayList<Integer>\n        return arr.subList(arr.size()\
    \ - k, arr.size());\n                          ^\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        Collections.sort(arr);\n       \
    \ int length = arr.size();\n        int[] copyArr = arr.toArray(new int[length]);\n\
    \        Arrays.sort(copyArr);\n        for (int i = 0; i < k; i++) {\n      \
    \      result.add(copyArr[i]);\n        }\n        return result;\nreturn new\
    \ ArrayList<Integer>(Arrays.asList());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3, (int)-4,\
    \ (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)-3,\
    \ (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp70fv0uha.java:28: error: no suitable method found for toArray(int[])\n\
    \        int[] copyArr = arr.toArray(new int[length]);\n                     \
    \      ^\n    method Collection.<T#1>toArray(T#1[]) is not applicable\n      (inference\
    \ variable T#1 has incompatible bounds\n        equality constraints: int\n  \
    \      upper bounds: Object)\n    method List.<T#2>toArray(T#2[]) is not applicable\n\
    \      (inference variable T#2 has incompatible bounds\n        equality constraints:\
    \ int\n        upper bounds: Object)\n    method AbstractCollection.<T#3>toArray(T#3[])\
    \ is not applicable\n      (inference variable T#3 has incompatible bounds\n \
    \       equality constraints: int\n        upper bounds: Object)\n    method ArrayList.<T#4>toArray(T#4[])\
    \ is not applicable\n      (inference variable T#4 has incompatible bounds\n \
    \       equality constraints: int\n        upper bounds: Object)\n  where T#1,T#2,T#3,T#4\
    \ are type-variables:\n    T#1 extends Object declared in method <T#1>toArray(T#1[])\n\
    \    T#2 extends Object declared in method <T#2>toArray(T#2[])\n    T#3 extends\
    \ Object declared in method <T#3>toArray(T#3[])\n    T#4 extends Object declared\
    \ in method <T#4>toArray(T#4[])\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        if(k ==\
    \ arr.size()){\n            return arr;\n        }\n        ArrayList<Integer>\
    \ maximums = new ArrayList<Integer>();\n        \n        for(int i=0; i<arr.size();\
    \ i++){\n            maximums.add(arr.get(i));\n        }\n        \n        for(int\
    \ i=0; i<arr.size(); i++){\n            for(int j=i+1; j<arr.size(); j++){\n \
    \               if(maximums.get(j) < arr.get(i)){\n                    maximums.set(j,\
    \ arr.get(i));\n                }\n            }\n        }\n        \n      \
    \  for(int i=0; i<maximums.size(); i++){\n            if(i+k > maximums.size()){\n\
    \                break;\n            }\n            \n            for(int j=0;\
    \ j<k; j++){\n                if(i+j >= maximums.size()){\n                  \
    \  break;\n                }\n                \n                if(maximums.get(i+j)\
    \ > maximums.get(i)){\n                    break;\n                }\n       \
    \     }\n            \n            maximums.remove(i+j);\n        }\n        \n\
    \        return maximums;\nreturn new ArrayList<Integer>(Arrays.asList());\n \
    \   }\n    public static void main(String[] args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-4, (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-3, (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpiq38k9sr.java:57: error: cannot find symbol\n            maximums.remove(i+j);\n\
    \                              ^\n  symbol:   variable j\n  location: class Problem\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        ArrayList<Integer>\
    \ maximums = new ArrayList<>();\n        if (arr.size() < k) \n        {\n   \
    \         while (arr.size() < k) {\n                arr.add(-1000);\n        \
    \    }\n        }\n        for (int i = 0; i < k; i++) {\n            maximums.add(arr.get(i));\n\
    \        }\n        maximums = Collections.sort(maximums);\n        return maximums;\n\
    return new ArrayList<Integer>(Arrays.asList());\n    }\n    public static void\
    \ main(String[] args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-4, (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-3, (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7m7shsxf.java:35: error: incompatible types: void cannot be converted\
    \ to ArrayList<Integer>\n        maximums = Collections.sort(maximums);\n    \
    \                               ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        if (arr.isEmpty())\
    \ return new ArrayList<Integer>();\n        if (k > arr.size()) k = arr.size();\n\
    \        Arrays.sort(arr);\n        return Arrays.copyOf(arr, k);\nreturn new\
    \ ArrayList<Integer>(Arrays.asList());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3, (int)-4,\
    \ (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)-3,\
    \ (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpc295t3qs.java:27: error: no suitable method found for sort(ArrayList<Integer>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\n/tmp/tmpc295t3qs.java:28: error: no suitable method found for copyOf(ArrayList<Integer>,int)\n\
    \        return Arrays.copyOf(arr, k);\n                     ^\n    method Arrays.<T#1>copyOf(T#1[],int)\
    \ is not applicable\n      (cannot infer type-variable(s) T#1\n        (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to T#1[]))\n "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        int kMax = -1;\n        // find the kMax\
    \ index\n        for (Integer i : arr) {\n            if (kMax < i) {\n      \
    \          kMax = i;\n            }\n        }\n\n        // remove the kMax value\n\
    \        arr.remove(kMax);\n        // sort arr\n        arr.sort(Comparator.comparingInt(i\
    \ -> i).reversed());\n        // copy the arr into result\n        for (Integer\
    \ i : arr) {\n            result.add(i);\n        }\n        // remove the arr\
    \ value\n        arr.remove(kMax);\n        // return the result\n        return\
    \ result;\nreturn new ArrayList<Integer>(Arrays.asList());\n    }\n    public\
    \ static void main(String[] args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-4, (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-3, (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpsspwldkp.java:37: error: incompatible types: cannot infer type-variable(s)\
    \ T\n        arr.sort(Comparator.comparingInt(i -> i).reversed());\n         \
    \                               ^\n    (argument mismatch; bad return type in\
    \ lambda expression\n      Object cannot be converted to int)\n  where T is a\
    \ type-variable:\n    T extends Object declared in method <T>comparingInt(ToIntFunction<?\
    \ super T>)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        // Create\
    \ an empty heap\n        PriorityQueue<Integer> pq = new PriorityQueue<Integer>();\n\
    \        // Push all numbers from the array into the heap\n        for (Integer\
    \ i : arr) {\n            pq.offer(i);\n        }\n        // Remove k numbers\
    \ from the heap according to their priority\n        while (k > 0) {\n       \
    \     Integer curr = pq.poll();\n            arr.add(curr);\n            k--;\n\
    \        }\n        return arr;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpnrosxpug.java:38: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        int n = arr.size();\n        if\
    \ (k == 0 || k >= n) {\n            return arr;\n        }\n        if (k == 1)\
    \ {\n            for (int i = 0; i < n; i++) {\n                result.add(arr.get(i));\n\
    \            }\n            return result;\n        }\n        int start = 0;\n\
    \        int end = arr.size() - k;\n        int max = Integer.MIN_VALUE;\n   \
    \     while (start < end) {\n            int mid = start + (end - start) / 2;\n\
    \            int m1 = Math.min(arr[mid], arr.get(mid));\n            int m2 =\
    \ Math.max(arr[mid], arr.get(mid));\n            if (m1 < m2) {\n            \
    \    max = Math.max(max, m1);\n                start = mid + 1;\n            }\
    \ else {\n                max = Math.max(max, m2);\n                end = mid\
    \ - 1;\n            }\n        }\n        while (start <= end) {\n           \
    \ int mid = start + (end - start) / 2;\n            int m1 = Math.min(arr[mid],\
    \ arr.get(mid));\n            int m2 = Math.max(arr[mid], arr.get(mid));\n   \
    \         if (m1 < m2) {\n                max = Math.max(max, m1);\n         \
    \       start = mid + 1;\n            } else {\n                max = Math.max(max,\
    \ m2);\n                end = mid - 1;\n            }\n        }\n        if (max\
    \ >= arr.get(k - 1)) {\n            while (start <= end) {\n                int\
    \ mid = start + (end - start) / 2;\n                int m1 = Math.min(arr[mid],\
    \ arr.get(mid));\n                int m2 = Math.max(arr[mid], arr.get(mid));\n\
    \                if (m1 < m2) {\n                    max = Math.max(max, m1);\n\
    \                    start = mid + 1;\n                } else {\n            \
    \        max = Math.max(max, m2);\n                    end = mid - 1;\n      \
    \          }\n            }\n        }\n        result.add(max);\n        for\
    \ (int i = start; i <= end; i++) {\n            int value = arr.get(i);\n    \
    \        if (value < max) {\n                max = value;\n            }\n   \
    \     }\n        result.add(max);\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmprzogya1l.java:41: error: array required, but ArrayList<Integer>\
    \ found\n            int m1 = Math.min(arr[mid], arr.get(mid));\n            \
    \                     ^\n/tmp/tmprzogya1l.java:42: error: array required, but\
    \ ArrayList<Integer> found\n            int m2 = Math.max(arr[mid], arr.get(mid));\n\
    \                                 ^\n/tmp/tmprzogya1l.java:53: error: array required,\
    \ but ArrayList<Integer> found\n            int m1 = Math.min(arr[mid], arr.get(mid));\n\
    \                                 ^\n/tmp/tmprzogya1l.java:54: error: array required,\
    \ but ArrayList<Integer> found\n            int m2 = Math.max(arr[mid], arr.get(mid));\n\
    \                                 ^\n/tmp/tmprzogya1l.java:66: error: array required,\
    \ but ArrayList<Integer> found\n                int m1 = Math.min(arr[mid], arr.get(mid));\n\
    \                                     ^\n/tmp/tmprzogya1l.java:67: error: array\
    \ required, but ArrayList<Integer> found\n                int m2 = Math.max(arr[mid],\
    \ arr.get(mid));\n                                     ^\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        if (k >\
    \ arr.size())\n            throw new IndexOutOfBoundsException();\n        int\
    \ max = Integer.MIN_VALUE;\n        for (int i = 0; i < arr.size(); i++) {\n \
    \           int curr = arr.get(i);\n            if (max < curr)\n            \
    \    max = curr;\n            else if (max - arr.get(i) < k)\n               \
    \ max = Math.max(max, curr);\n        }\n        ArrayList<Integer> maxList =\
    \ new ArrayList<>();\n        for (int i = 0; i < arr.size(); i++)\n         \
    \   if (arr.get(i) == max)\n                maxList.add(max);\n            else\n\
    \                maxList.add(arr.get(i));\n        return maxList;\nreturn new\
    \ ArrayList<Integer>(Arrays.asList());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3, (int)-4,\
    \ (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)-3,\
    \ (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3059ndre.java:42: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        Stack<Integer> s = new Stack<Integer>();\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            if (s.isEmpty() ||\
    \ s.peek() > arr.get(i)) {\n                s.push(arr.get(i));\n            }\
    \ else {\n                while (s.peek() < arr.get(i)) {\n                  \
    \  s.pop();\n                }\n                result.add(s.peek());\n      \
    \          s.push(arr.get(i));\n            }\n            if (k > 0 && result.size()\
    \ == k) {\n                break;\n            }\n        }\n        return result;\n\
    return new ArrayList<Integer>(Arrays.asList());\n    }\n    public static void\
    \ main(String[] args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-4, (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-3, (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpkwdy5f_h.java:42: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        ArrayList<Integer>\
    \ res = new ArrayList<>(k);\n        int len = arr.size();\n        if (len <=\
    \ k) {\n            return arr;\n        }\n        int start = 0;\n        int\
    \ end = len - k;\n        int mid = len - 1;\n        while (start < end) {\n\
    \            if (arr[mid] > arr[start]) {\n                mid--;\n          \
    \  } else {\n                res.add(arr[mid]);\n                mid--;\n    \
    \        }\n            start++;\n        }\n        return res;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpe1ae72ud.java:34: error: array required, but ArrayList<Integer>\
    \ found\n            if (arr[mid] > arr[start]) {\n                   ^\n/tmp/tmpe1ae72ud.java:34:\
    \ error: array required, but ArrayList<Integer> found\n            if (arr[mid]\
    \ > arr[start]) {\n                              ^\n/tmp/tmpe1ae72ud.java:37:\
    \ error: array required, but ArrayList<Integer> found\n                res.add(arr[mid]);\n\
    \                           ^\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        if (arr\
    \ == null || arr.isEmpty() || k < 0 || arr.size() <= k)\n            return null;\n\
    \        PriorityQueue<Integer> maxHeap = new PriorityQueue<>(arr.size());\n \
    \       HashSet<Integer> usedNumbers = new HashSet<>(arr.size());\n        for\
    \ (int i = 0; i < arr.size(); i++) {\n            if (!usedNumbers.contains(arr.get(i)))\n\
    \                maxHeap.add(arr.get(i));\n            usedNumbers.add(arr.get(i));\n\
    \        }\n        ArrayList<Integer> res = new ArrayList<>();\n        int cnt\
    \ = 0;\n        while (!maxHeap.isEmpty()) {\n            Integer num = maxHeap.poll();\n\
    \            if (cnt != k)\n                res.add(num);\n            if (maxHeap.size()\
    \ > k)\n                maxHeap.poll();\n            else\n                break;\n\
    \            cnt++;\n        }\n        return res;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4xsxb3u5.java:47: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        if (k >\
    \ arr.size()) k = arr.size();\n        ArrayList<Integer> max = new ArrayList<>();\n\
    \        Collections.sort(arr, (a, b) -> Integer.compare(b, a));\n        int\
    \ i = 0;\n        while (i < k) {\n            if (arr.get(i) > arr.get(i + 1))\
    \ break;\n            max.add(arr.get(i++));\n        }\n        Collections.sort(max);\n\
    \        return max;\nreturn new ArrayList<Integer>(Arrays.asList());\n    }\n\
    \    public static void main(String[] args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-4, (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-3, (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmppufx_p82.java:35: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        int n =\
    \ arr.size();\n        int m = (int) Math.ceil(n/k);\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>(m);\n        Arrays.stream(arr).skip(m * k).limit(n).forEach(i\
    \ -> result.add(i));\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7dioxbqp.java:28: error: no suitable method found for stream(ArrayList<Integer>)\n\
    \        Arrays.stream(arr).skip(m * k).limit(n).forEach(i -> result.add(i));\n\
    \              ^\n    method Arrays.<T#1>stream(T#1[]) is not applicable\n   \
    \   (cannot infer type-variable(s) T#1\n        (argument mismatch; ArrayList<Integer>\
    \ cannot be converted to T#1[]))\n    method Arrays.<T#2>stream(T#2[],int,int)\
    \ is not applicable\n      (cannot infer type-variable(s) T#2\n        (actual\
    \ and formal argument lists differ in length))\n    method Arrays.stream(int[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to int[])\n    method Arrays.stream(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to long[])\n    method Arrays.stream(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to double[])\n  where T#1,T#2 are type-variables:\n    T#1 extends Object declared\
    \ in method <T#1>stream(T#1[])\n    T#2 extends Object declared in method <T#2>stream(T#2[],int,int)\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        ArrayList<Integer>\
    \ max = new ArrayList<>();\n        ArrayList<Integer> tmp = new ArrayList<>();\n\
    \        int cur = 0;\n        int len = arr.size();\n        for(int i = 0; i\
    \ < len; i++) {\n            if(i < k) {\n                max.add(arr.get(i));\n\
    \            }\n            else {\n                tmp.add(arr.get(i));\n   \
    \             if(tmp.size() > cur) {\n                    max.add(tmp.get(cur));\n\
    \                }\n                cur++;\n                tmp.remove(0);\n \
    \           }\n        }\n        return max;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbjvb85qy.java:43: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        ArrayList<Integer>\
    \ maxArr = new ArrayList<>();\n\n        for(int i = 0; i < arr.size()-k; i++){\n\
    \            maxArr.add(arr.get(i));\n        }\n        \n        for(int j =\
    \ arr.size()-k; j < arr.size(); j++){\n            maxArr.add(arr.get(j));\n \
    \       }\n\n        return maxArr;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpathld6v0.java:36: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        if (arr.size()\
    \ == 0) {\n            return new ArrayList<>();\n        }\n        ArrayList<Integer>\
    \ largest = new ArrayList<>();\n        for (int i = 0; i < k; i++) {\n      \
    \      largest.add(Collections.max(arr));\n            Collections.sort(arr);\n\
    \        }\n        return largest;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpf0rcmt3w.java:34: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        if (k >=\
    \ arr.size()) return new ArrayList<Integer>();\n        ArrayList<Integer> res\
    \ = new ArrayList<>();\n        PriorityQueue<Integer> maxHeap = new PriorityQueue<>((a,\
    \ b) -> b - a);\n        maxHeap.addAll(arr);\n        maxHeap.removeAll(Collections.singleton(0));\n\
    \        int max = maxHeap.poll();\n        while (maxHeap.size() > 1) {\n   \
    \         int cur = maxHeap.poll();\n            int left = maxHeap.poll();\n\
    \            if (left > cur) {\n                maxHeap.add(left);\n         \
    \   }\n            if (cur > max) {\n                max = cur;\n            }\n\
    \            if (left > cur) {\n                maxHeap.add(left);\n         \
    \   }\n        }\n        res.add(max);\n        return res;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1os3dwqw.java:46: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        int n = arr.size();\n        int\
    \ maxValue = arr.get(0);\n        int maxIndex = 0;\n        for(int i = 1; i\
    \ < n; i++) {\n            if(maxValue < arr.get(i)) {\n                maxValue\
    \ = arr.get(i);\n                maxIndex = i;\n            }\n        }\n   \
    \     ArrayList<Integer> maxValues = new ArrayList<Integer>();\n        while(maxIndex\
    \ - k > 0) {\n            maxValues.add(maxValue);\n            maxIndex -= 1;\n\
    \        }\n        result.addAll(maxValues);\n        ArrayList<Integer> result\
    \ = new ArrayList<Integer>();\n        for(int i = 0; i < k; i++) {\n        \
    \    result.add(arr.get(i));\n        }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmplm_sy2mp.java:41: error: variable result is already defined in\
    \ method maximum(ArrayList<Integer>,int)\n        ArrayList<Integer> result =\
    \ new ArrayList<Integer>();\n                           ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        ArrayList<Integer>\
    \ maximum = new ArrayList<Integer>();\n        ArrayList<Integer> tmp = new ArrayList<Integer>();\n\
    \        int cnt = 0;\n        for (int i = 0; i < k; i++) {\n            tmp.add(Integer.MIN_VALUE);\n\
    \        }\n        for (int i = 0; i < arr.size(); i++) {\n            if (tmp.get(tmp.size()\
    \ - 1) < arr.get(i)) {\n                tmp.add(cnt);\n                maximum.add(arr.get(i));\n\
    \                cnt++;\n            }\n            if (cnt == k) {\n        \
    \        maximum.add(arr.get(i));\n                cnt++;\n            }\n   \
    \     }\n        return maximum;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpkib3_jf3.java:43: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        int currentMax = Integer.MIN_VALUE;\n\
    \        int currentIndex = -1;\n\n        for (int i = 0; i< arr.size(); i++)\
    \ {\n            if (currentMax<arr.get(i)) {\n                currentMax = arr.get(i);\n\
    \                currentIndex = i;\n            }\n        }\n        for (int\
    \ i = 0; i< arr.size(); i++) {\n            if (currentMax==arr.get(i)) {\n  \
    \              if (currentIndex==k) {\n                    result.add(currentMax);\n\
    \                    k++;\n                } else {\n                    k++;\n\
    \                }\n            }\n        }\n        return result;\nreturn new\
    \ ArrayList<Integer>(Arrays.asList());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3, (int)-4,\
    \ (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)-3,\
    \ (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2kj8c6qh.java:46: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        Arrays.sort(arr);\n\
    \        if (arr.size() <= k) return arr;\n        ArrayList<Integer> result =\
    \ new ArrayList<Integer>(k);\n        int start = 0;\n        int end = arr.size()\
    \ - k;\n        do {\n            while (start < end && arr[start] > 0) start++;\n\
    \            while (start < end && arr[end] < 0) end--;\n            int temp\
    \ = arr[start];\n            arr[start] = arr[end];\n            arr[end] = temp;\n\
    \            result.add(arr[start]);\n            start++;\n            end--;\n\
    \        } while (start < end);\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwq4fho7o.java:25: error: no suitable method found for sort(ArrayList<Integer>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\n/tmp/tmpwq4fho7o.java:31: error: array required, but ArrayList<Integer>\
    \ found\n            while (start < end && arr[start] > 0) start++;\n        \
    \                             ^\n/tmp/tmpwq4fho7o.java:32: error: array required,\
    \ but ArrayList<Integer> found\n            while (start < end && arr[end] < 0)\
    \ end--;\n                        "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n        Arrays.sort(arr);\n        int n\
    \ = arr.size();\n        for(int i = 0; i < n - k + 1; i++) {\n            if(i\
    \ != 0) {\n                result.add(arr.get(i));\n            }\n        }\n\
    \        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n   \
    \ }\n    public static void main(String[] args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-4, (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-3, (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6zcgfrbe.java:26: error: no suitable method found for sort(ArrayList<Integer>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        int len\
    \ = arr.size();\n        if (k <= 0 || len <= 0 || k < len) {\n            return\
    \ null;\n        }\n        PriorityQueue<Integer> pq = new PriorityQueue<Integer>(len\
    \ - k + 1);\n        for (int i = 0; i < len - k + 1; i++) {\n            pq.add(arr.get(i));\n\
    \        }\n        ArrayList<Integer> list = new ArrayList<Integer>();\n    \
    \    while (!pq.isEmpty()) {\n            list.add(pq.poll());\n        }\n  \
    \      return list;\nreturn new ArrayList<Integer>(Arrays.asList());\n    }\n\
    \    public static void main(String[] args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-4, (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-3, (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdls8mjff.java:38: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        PriorityQueue<Integer>\
    \ pQueue = new PriorityQueue<>(Collections.reverseOrder());\n        for (int\
    \ i = 0; i < arr.size(); i++) {\n            pQueue.add(arr.get(i));\n       \
    \ }\n        ArrayList<Integer> res = new ArrayList<>();\n        while (k > 0)\
    \ {\n            if (pQueue.isEmpty()) {\n                res.add(new Integer(0));\n\
    \                k--;\n                continue;\n            }\n            int\
    \ current = pQueue.poll();\n            res.add(new Integer(current));\n     \
    \       k--;\n        }\n        return res;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpx2jwmfcx.java:41: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        if (arr.size()\
    \ < k) throw new RuntimeException(\"k cannot be less than the array length\");\n\
    \        if (k == 0) return arr;\n        Arrays.sort(arr);\n        ArrayList<Integer>\
    \ list = new ArrayList<Integer>(k);\n        int maxIndex = 0;\n        for (int\
    \ i = 0; i < arr.size(); i++) {\n            if (i < k) {\n                list.add((Integer)\
    \ arr.get(i));\n            } else {\n                if (list.get(maxIndex) <\
    \ list.get(i)) {\n                    maxIndex = i;\n                }\n     \
    \       }\n        }\n        return list;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpu73s0i_q.java:27: error: no suitable method found for sort(ArrayList<Integer>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        return\
    \ arr.stream()\n                .sorted((a, b) -> Integer.compare(b, a)) // Sort\
    \ from large to small.\n                .limit(k)\n                .collect(Collectors.toCollection(ArrayList::new));\n\
    return new ArrayList<Integer>(Arrays.asList());\n    }\n    public static void\
    \ main(String[] args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-4, (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-3, (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7bdn4qte.java:29: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        int n =\
    \ arr.size();\n        ArrayList<Integer> max = new ArrayList<>();\n        Arrays.sort(arr);\n\
    \        Arrays.sort(arr);\n        for(int i=0; i<arr.size()-k+1; i++) {\n  \
    \          max.add(arr.get(i));\n        }\n        return max;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp79djyx9o.java:27: error: no suitable method found for sort(ArrayList<Integer>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\n/tmp/tmp79djyx9o.java:28: error: no suitable method found for sort(ArrayList<Integer>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayL"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        ArrayList<Integer> tempArray = new ArrayList<>();\n\
    \        arr.stream().sorted(Comparator.comparing(e -> e)).forEach(e -> {\n  \
    \          if (result.size() < k) {\n                if (e > result.get(result.size()\
    \ - 1)) {\n                    tempArray.add(e);\n                }\n        \
    \    } else if (result.size() == k) {\n                if (e > result.get(result.size()\
    \ - 1)) {\n                    tempArray.add(e);\n                }\n        \
    \    } else {\n                if (e > result.get(result.size() - 1)) {\n    \
    \                tempArray.add(e);\n                }\n                tempArray.addAll(result);\n\
    \            }\n            result.clear();\n            result.addAll(tempArray);\n\
    \        });\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpejv17r06.java:46: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        ArrayList<Integer>\
    \ result = new ArrayList<>(k);\n        int len = arr.size();\n        ArrayList<Integer>\
    \ temp = new ArrayList<>(len);\n        int pos = 0;\n        int max;\n     \
    \   for (Integer i : arr) {\n            if (pos == k) {\n                break;\n\
    \            }\n            if (i > max) {\n                max = i;\n       \
    \     }\n            temp.add(pos++, i);\n        }\n        for (int i = 0; i\
    \ < k; i++) {\n            if (temp.size() > 0) {\n                result.add(temp.remove(0));\n\
    \            }\n        }\n        return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjxs4l0cg.java:45: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n/tmp/tmpjxs4l0cg.java:34: error: variable max might not have been initialized\n\
    \            if (i > max) {\n                    ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        int max\
    \ = 0;\n        ArrayList<Integer> arr = new ArrayList<Integer>();\n\n       \
    \ Collections.sort(arr);\n\n        for(int i = 0; i < k; i++) {\n           \
    \ max = arr.get(i);\n        }\n\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \n        for(int i = 0; i <= arr.size(); i++) {\n            if(arr.get(i) ==\
    \ max) {\n                result.add(max);\n            }\n        }\n\n     \
    \   return result;\nreturn new ArrayList<Integer>(Arrays.asList());\n    }\n \
    \   public static void main(String[] args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-4, (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-3, (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmprym_mcz5.java:26: error: variable arr is already defined in method\
    \ maximum(ArrayList<Integer>,int)\n        ArrayList<Integer> arr = new ArrayList<Integer>();\n\
    \                           ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        \n    \
    \    int n = arr.size();\n        int max_index = k;\n        int max_value =\
    \ arr.get(k);\n        ArrayList<Integer> max = new ArrayList<>();\n        \n\
    \        // If size of array is 0, then return empty list\n        if (n < 1 ||\
    \ k <= 0 || k > n)\n            return max;\n        \n        // If size of array\
    \ is 1, then add max_value to array\n        if (n == 1)\n            max.add(max_value);\n\
    \        \n        // If size of array is greater than 1, then do binary search\
    \ to find max_value\n        else\n        {\n            \n            int low\
    \ = 1;\n            int high = n;\n            int mid = (high - low)/2;\n   \
    \         \n            // Check if mid point is greater than k\n            if\
    \ (k <= arr[mid])\n                high = mid - 1;\n            else\n       \
    \         low = mid + 1;\n            \n            // If mid point is equal or\
    \ larger than k, then add max_value to array\n            if (k <= arr[mid])\n\
    \                max.add(max_value);\n            \n            // If mid point\
    \ is less than or equal to k, then do binary search to find max_value\n      \
    \      else\n            {\n                // Find maximum value of arr[low ..\
    \ mid-1]\n                while (arr[low] < arr[mid] && low < high)\n        \
    \        {\n                    max_value = Math.max(arr[low], max_value);\n \
    \                   low++;\n                }\n                \n            \
    \    // Find maximum value of arr[mid+1 .. high]\n                while (arr[mid]\
    \ < arr[high] && mid < high)\n                {\n                    max_value\
    \ = Math.max(arr[mid], max_value);\n                    mid++;\n             \
    \   }\n                \n                // Find maximum value of arr[low .. mid-1]\n\
    \                while (arr[low] > arr[mid] && low < high)\n                {\n\
    \                    max_value = Math.max(arr[low], max_value);\n            \
    \        low++;\n                }\n                \n                // Find\
    \ maximum value of arr[mid+1 .. high]\n                while (arr[mid] > arr[high]\
    \ && mid < high)\n                {\n                    max_value = Math.max(arr[mid],\
    \ max_value);\n                    mid++;\n                }\n               \
    \ \n                // If mid point is greater or equal to k, then add max_value\
    \ to array\n                if (arr[mid] <= k)\n                {\n          \
    \          max.add(max_value);\n                }\n                \n        \
    \        // If mid point is less than or equal to k, then do binary search to\
    \ find max_value\n                else\n                {\n                  \
    \  // Find maximum value of arr[low .. mid-1]\n                    while (arr[low]\
    \ < arr[mid] && low < high)\n                    {\n                        max_value\
    \ = Math.max(arr[low], max_value);\n                        low++;\n         \
    \           }\n                    \n                    // Find maximum value\
    \ of arr[mid+1 .. \nreturn new ArrayList<Integer>(Arrays.asList());\n    }\n \
    \   public static void main(String[] args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-4, (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-3, (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp515htoda.java:107: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n/tmp/tmp515htoda.java:107: error:\
    \ illegal start of expression\n    public static void main(String[] args) {\n\
    \           ^\n/tmp/tmp515htoda.java:107: error: ';' expected\n    public static\
    \ void main(String[] args) {\n                 ^\n/tmp/tmp515htoda.java:107: error:\
    \ '.class' expected\n    public static void main(String[] args) {\n          \
    \                           ^\n/tmp/tmp515htoda.java:107: error: ';' expected\n\
    \    public static void main(String[] args) {\n                              \
    \           ^\n/tmp/tmp515htoda.java:121: error: reached end of file while parsing\n\
    }\n ^\n/tmp/tmp515htoda.java:122: error: reached end of file while parsing\n7\
    \ errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        int size\
    \ = arr.size();\n        ArrayList<Integer> result = new ArrayList<Integer>(k);\n\
    \        int count = 0;\n        int max = Integer.MIN_VALUE;\n        for (int\
    \ i = 0; i < size; i++) {\n            int value = arr.get(i);\n            if\
    \ (value > max) {\n                max = value;\n                count = 1;\n\
    \            }\n            if (count == k) {\n                result.add(max);\n\
    \                max = Integer.MIN_VALUE;\n                count = 1;\n      \
    \      } else {\n                count++;\n            }\n        }\n        return\
    \ result;\nreturn new ArrayList<Integer>(Arrays.asList());\n    }\n    public\
    \ static void main(String[] args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-4, (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-3, (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_dfofukx.java:44: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        // write\
    \ your code here\n        ArrayList<Integer> temp = new ArrayList<Integer>();\n\
    \        for(int i = 0; i < k; i++){\n            Collections.sort(arr);\n   \
    \         temp.add(arr.get(i));\n        }\n        return temp;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpiupt24be.java:32: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        ArrayList<Integer>\
    \ res = new ArrayList<Integer>();\n        if(arr.isEmpty())\n            return\
    \ res;\n        if(arr.size() < k)\n            k = arr.size();\n        HashMap<Integer,\
    \ Integer> temp = new HashMap<Integer, Integer>();\n        for(int i = 0; i <\
    \ arr.size(); ++i) {\n            if(!temp.containsKey(arr.get(i)))\n        \
    \        temp.put(arr.get(i), i);\n        }\n        while(true) {\n        \
    \    int minKey = Integer.MAX_VALUE;\n            int minIndex = -1;\n       \
    \     for(int i : temp.values()) {\n                if(minKey > i) {\n       \
    \             minKey = i;\n                    minIndex = i;\n               \
    \ }\n            }\n            if(!minIndex == -1 && minKey == Integer.MAX_VALUE)\n\
    \                break;\n            if(minIndex != -1) {\n                res.add(minIndex);\n\
    \                temp.put(temp.remove(minIndex), minIndex);\n            }\n \
    \           else if(minKey != Integer.MAX_VALUE)\n                res.add(minKey);\n\
    \        }\n        return res;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpi992m6c_.java:44: error: bad operand type int for unary operator\
    \ '!'\n            if(!minIndex == -1 && minKey == Integer.MAX_VALUE)\n      \
    \         ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        ArrayList<Integer>\
    \ res = new ArrayList<>();\n        // sort arr in descending order\n        Arrays.sort(arr);\n\
    \        // if the length of arr is less than k, return arr\n        if (arr.size()\
    \ < k) {\n            return arr;\n        }\n        // calculate the maximum\
    \ element\n        long maxEle = arr.get(k - 1);\n        // if length of arr\
    \ is larger than k\n        if (arr.size() > k) {\n            // find the maximum\
    \ element in the rest\n            for (int i = 0; i < arr.size() - k; i++) {\n\
    \                if (arr.get(i) > maxEle) {\n                    maxEle = arr.get(i);\n\
    \                }\n            }\n            // add the maximum element to the\
    \ result\n            ArrayList<Integer> res2 = new ArrayList<>(k);\n        \
    \    res2.addAll(Arrays.copyOf(arr, k));\n            res2.add(maxEle);\n    \
    \        // return the result\n            return res2;\n        }\n        //\
    \ if length of arr is equal to k\n        ArrayList<Integer> res2 = new ArrayList<>(k);\n\
    \        res2.addAll(Arrays.copyOf(arr, k));\n        return res2;\nreturn new\
    \ ArrayList<Integer>(Arrays.asList());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3, (int)-4,\
    \ (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)-3,\
    \ (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1f42egtw.java:27: error: no suitable method found for sort(ArrayList<Integer>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\n/tmp/tmp1f42egtw.java:44: error: no suitable method found for copyOf(ArrayList<Integer>,int)\n\
    \            res2.addAll(Arrays.copyOf(arr, k));\n                           \
    \   ^\n    method Arrays.<T#1>copyOf(T#1[],int) is not applicable\n      (cannot\
    \ infer type-variable(s) T#1\n        (argument mismatch; ArrayList<Integer> cannot\
    \ be con"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        ArrayList<Integer>\
    \ result = new ArrayList<>();\n        Arrays.sort(arr);\n        if(arr.size()\
    \ <= k) return arr;\n\n        for(int i = 0; i < arr.size() - k; i++){\n    \
    \        int curr = arr.get(i);\n            int max = Integer.MIN_VALUE;\n  \
    \          int index = 0;\n            int last = i;\n            while((index\
    \ > -1) && (last < arr.size())){\n                int tmp = arr.get(last);\n \
    \               if(!(tmp > curr)){\n                    max = tmp;\n         \
    \           index = last;\n                    last = last + 1;\n            \
    \    }\n                else\n                    last = last + 1;\n         \
    \   }\n            if(max != Integer.MIN_VALUE){\n                result.add(max);\n\
    \                last = i;\n            }\n        }\n        return result;\n\
    return new ArrayList<Integer>(Arrays.asList());\n    }\n    public static void\
    \ main(String[] args) {\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)-4, (int)5))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)-4,\
    \ (int)-3, (int)5)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)-4, (int)4))), (2)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
    \ (int)4)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-3,\
    \ (int)2, (int)1, (int)2, (int)-1, (int)-2, (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxuewbb93.java:26: error: no suitable method found for sort(ArrayList<Integer>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        ArrayList<Integer>\
    \ maxlist = new ArrayList<>();\n        if (arr.size() <= k) return maxlist;\n\
    \n        int low = Integer.MIN_VALUE;\n        int high = Integer.MAX_VALUE;\n\
    \        boolean isMax = true;\n        int max = Integer.MIN_VALUE;\n       \
    \ int i = 0;\n        for (i = 0; i < arr.size(); i++) {\n            if (arr.get(i)\
    \ <= low && arr.get(i) > max) {\n                max = arr.get(i);\n         \
    \   }\n            if (arr.get(i) > high) {\n                high = arr.get(i);\n\
    \            }\n            if (arr.get(i) == max && !isMax) {\n             \
    \   isMax = true;\n            }\n            if (arr.get(i) < max && isMax) {\n\
    \                isMax = false;\n            }\n        }\n        if (isMax)\
    \ {\n            maxlist.add(max);\n        }\n\n        if (k <= maxlist.size())\
    \ {\n            while (i < arr.size()) {\n                low = max;\n      \
    \          high = max;\n                isMax = true;\n                max = Integer.MIN_VALUE;\n\
    \                for (i; i < arr.size(); i++) {\n                    if (arr.get(i)\
    \ <= low && arr.get(i) > max) {\n                        max = arr.get(i);\n \
    \                   }\n                    if (arr.get(i) > high) {\n        \
    \                high = arr.get(i);\n                    }\n                 \
    \   if (arr.get(i) == max && !isMax) {\n                        isMax = true;\n\
    \                    }\n                    if (arr.get(i) < max && isMax) {\n\
    \                        isMax = false;\n                    }\n             \
    \   }\n                if (isMax) {\n                    maxlist.add(max);\n \
    \               }\n                if (maxlist.size() == k) return maxlist;\n\
    \                low = Integer.MIN_VALUE;\n                high = Integer.MAX_VALUE;\n\
    \                isMax = true;\n                max = Integer.MIN_VALUE;\n   \
    \             for (i; i < arr.size(); i++) {\n                    if (arr.get(i)\
    \ <= low && arr.get(i) > max) {\n                        max = arr.get(i);\n \
    \                   }\n                    if (arr.get(i) > high) {\n        \
    \                high = arr.get(i);\n                    }\n                 \
    \   if (arr.get(i) == max && !isMax) {\n                        isMax = true;\n\
    \                    }\n                    if (arr.get(i) < max && isMax) {\n\
    \                        isMax = false;\n                    }\n             \
    \   }\n                if (isMax) {\n                    maxlist.add(max);\n \
    \               }\n                if (maxlist.size() == k) return maxlist;\n\
    \            }\n        }\n\n        return maxlist;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbbquit4l.java:57: error: not a statement\n                for (i;\
    \ i < arr.size(); i++) {\n                     ^\n/tmp/tmpbbquit4l.java:79: error:\
    \ not a statement\n                for (i; i < arr.size(); i++) {\n          \
    \           ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // Input: arr = [-3, -4, 5], k = 3\n    // Output: [-4,\
    \ -3, 5]\n    // Example 2:\n    // Input: arr = [4, -4, 4], k = 2\n    // Output:\
    \ [4, 4]\n    // Example 3:\n    // Input: arr = [-3, 2, 1, 2, -1, -2, 1], k =\
    \ 1\n    // Output: [2]\n    // Note:\n    // 1. The length of the array will\
    \ be in the range of [1, 1000].\n    // 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static\
    \ ArrayList<Integer> maximum(ArrayList<Integer> arr, int k) {\n        int maxCount\
    \ = 0;\n        ArrayList<Integer> maxArray = new ArrayList<>(k);\n        \n\
    \        for(int i = 0; i<arr.size(); i++){\n            int arrCount = Collections.frequency(arr,\
    \ arr.get(i));\n            if(arrCount > maxCount){\n                maxCount\
    \ = arrCount;\n                maxArray = arr;\n                maxArray.remove(i);\n\
    \            }\n        }\n        return maxArray;\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)-4, (int)5))), (3)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)-4, (int)-3, (int)5)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)-4, (int)4))), (2)).equals((new\
    \ ArrayList<Integer>(Arrays.asList((int)4, (int)4)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-3, (int)2, (int)1, (int)2, (int)-1, (int)-2,\
    \ (int)1))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)2)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)123, (int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (3)).equals((new ArrayList<Integer>(Arrays.asList((int)2,\
    \ (int)20, (int)123)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-123,\
    \ (int)20, (int)0, (int)1, (int)2, (int)-3))), (4)).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
    \ (int)1, (int)2, (int)20)))));\n    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)5,\
    \ (int)15, (int)0, (int)3, (int)-13, (int)-8, (int)0))), (7)).equals((new ArrayList<Integer>(Arrays.asList((int)-13,\
    \ (int)-8, (int)0, (int)0, (int)3, (int)5, (int)15)))));\n    assert(maximum((new\
    \ ArrayList<Integer>(Arrays.asList((int)-1, (int)0, (int)2, (int)5, (int)3, (int)-10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)3, (int)5)))));\n   \
    \ assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)0, (int)5,\
    \ (int)-7))), (1)).equals((new ArrayList<Integer>(Arrays.asList((int)5)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)4, (int)-4))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-4, (int)4)))));\n  \
    \  assert(maximum((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10))),\
    \ (2)).equals((new ArrayList<Integer>(Arrays.asList((int)-10, (int)10)))));\n\
    \    assert(maximum((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3,\
    \ (int)-23, (int)243, (int)-400, (int)0))), (0)).equals((new ArrayList<Integer>(Arrays.asList()))));\n\
    \    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6fa3ajzj.java:37: error: unreachable statement\nreturn new ArrayList<Integer>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
