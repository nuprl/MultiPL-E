name: HumanEval_21_rescale_to_unit
language: java
results:
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        if (numbers.isEmpty() ||\
    \ numbers.size() < 2) {\n            return new ArrayList<Float>();\n        }\n\
    \        Float min = numbers.get(0);\n        Float max = numbers.get(0);\n  \
    \      for (int i = 1; i < numbers.size(); i++) {\n            max = Math.max(max,\
    \ numbers.get(i));\n            min = Math.min(min, numbers.get(i));\n       \
    \ }\n        ArrayList<Float> rescaled = new ArrayList<Float>();\n        for\
    \ (Float number : numbers) {\n            rescaled.add(Math.max(0, Math.min(max,\
    \ number)));\n        }\n        return rescaled;\nreturn new ArrayList<Float>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)1.0f)))));\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f, (float)4.0f, (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmprx3u9b86.java:28: error: unreachable statement\nreturn new ArrayList<Float>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        if (numbers.isEmpty())\n\
    \            return numbers;\n\n        // The idea is to sort the numbers to\
    \ increase the chance of finding a minimum.\n        Arrays.sort(numbers);\n\n\
    \        // Since we sort by number, the last number will have no effect on the\
    \ first number.\n        // So we keep an index of where the minimum should be,\
    \ which is what we return from the method.\n        int indexOfMin = numbers.size()\
    \ - 1;\n\n        // If there is only one number, there's nothing to do.\n   \
    \     if (numbers.size() == 1)\n            return numbers;\n\n        // The\
    \ second number will be the maximum if it's smaller than the minimum so far\n\
    \        float max = numbers.get(indexOfMin);\n\n        // If the smallest number\
    \ is smaller than our minimum, keep its original value\n        if (min < max)\n\
    \            return numbers;\n\n        // Otherwise, we will divide our minimum\
    \ by our maximum value to find a scale factor.\n        // Then we multiply the\
    \ original number by that scale factor.\n        float scaleFactor = 1.0f / max;\n\
    \        ArrayList<Float> newNumbers = new ArrayList<Float>();\n\n        for\
    \ (int i = 0; i < numbers.size(); i++) {\n            newNumbers.add((float) numbers.get(i)\
    \ * scaleFactor);\n        }\n\n        return newNumbers;\nreturn new ArrayList<Float>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)1.0f)))));\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f, (float)4.0f, (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpgw_zcuiw.java:18: error: no suitable method found for sort(ArrayList<Float>)\n\
    \        Arrays.sort(numbers);\n              ^\n    method Arrays.sort(int[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Float> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Float> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Float> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Float> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Float> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Float> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Float> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Float> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\n/tmp/tmpgw_zcuiw.java:32: error: cannot find symbol\n        if\
    \ (min < max)\n            ^\n  symbol:   variable min\n  location: class Problem\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        int n = numbers.size(); //\
    \ Number of elements in the list\n        if (n < 2) {\n            throw new\
    \ IllegalArgumentException(\"rescale_to_unit: numbers list must have at least\
    \ two elements\");\n        }\n        ArrayList<Float> result = new ArrayList<>(n);\n\
    \        float scale;\n        double min = numbers.get(0), max = numbers.get(0);\n\
    \        for (int i = 1; i < n; i++) {\n            float x = numbers.get(i);\n\
    \            scale = 1.0 / (max - min);\n            result.add(min + (scale *\
    \ x));\n            min = numbers.get(i);\n            max = numbers.get(i);\n\
    \        }\n        return result;\nreturn new ArrayList<Float>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)1.0f)))));\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f, (float)4.0f, (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0rh8p1vn.java:23: error: incompatible types: possible lossy conversion\
    \ from double to float\n            scale = 1.0 / (max - min);\n             \
    \           ^\n/tmp/tmp0rh8p1vn.java:24: error: no suitable method found for add(double)\n\
    \            result.add(min + (scale * x));\n                  ^\n    method Collection.add(Float)\
    \ is not applicable\n      (argument mismatch; double cannot be converted to Float)\n\
    \    method List.add(Float) is not applicable\n      (argument mismatch; double\
    \ cannot be converted to Float)\n    method AbstractCollection.add(Float) is not\
    \ applicable\n      (argument mismatch; double cannot be converted to Float)\n\
    \    method AbstractList.add(Float) is not applicable\n      (argument mismatch;\
    \ double cannot be converted to Float)\n    method ArrayList.add(Float) is not\
    \ applicable\n      (argument mismatch; double cannot be converted to Float)\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        ArrayList<Float> transformed\
    \ = new ArrayList<Float>(numbers.size());\n        // transform the list of numbers\
    \ to the range [0, 1]\n        float max = numbers.get(0), min = numbers.get(0);\n\
    \        for (Float number : numbers) {\n            max = Math.max(max, number);\n\
    \            min = Math.min(min, number);\n        }\n        // rescale the numbers\n\
    \        double range = max - min;\n        for (Float number : numbers) {\n \
    \           transformed.add((number - min) / range * 2.0f - 1.0f);\n        }\n\
    \        return transformed;\nreturn new ArrayList<Float>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)1.0f)))));\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f, (float)4.0f, (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp38xljivo.java:24: error: no suitable method found for add(double)\n\
    \            transformed.add((number - min) / range * 2.0f - 1.0f);\n        \
    \               ^\n    method Collection.add(Float) is not applicable\n      (argument\
    \ mismatch; double cannot be converted to Float)\n    method List.add(Float) is\
    \ not applicable\n      (argument mismatch; double cannot be converted to Float)\n\
    \    method AbstractCollection.add(Float) is not applicable\n      (argument mismatch;\
    \ double cannot be converted to Float)\n    method AbstractList.add(Float) is\
    \ not applicable\n      (argument mismatch; double cannot be converted to Float)\n\
    \    method ArrayList.add(Float) is not applicable\n      (argument mismatch;\
    \ double cannot be converted to Float)\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        // Store original numbers\
    \ in an ArrayList\n        ArrayList<Float> originalNumbers = new ArrayList<Float>(numbers);\n\
    \n        // Find the min and max of the original numbers and store them in min\
    \ and max\n        float min = Collections.min(originalNumbers);\n        float\
    \ max = Collections.max(originalNumbers);\n\n        // Calculate the new min\
    \ and max by dividing the original min and max by the new min and max\n      \
    \  float newMin = (float) (min/max);\n        float newMax = (float) (max/max);\n\
    \n        // Apply the new min and max to the original numbers\n        numbers.forEach((x)\
    \ -> {\n            x -= min;\n            x /= (newMax - newMin);\n         \
    \   x += newMin;\n        });\n\n        // Return the ArrayList with the rescaled\
    \ numbers\n        return numbers;\nreturn new ArrayList<Float>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)1.0f)))));\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f, (float)4.0f, (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_5u1gfyu.java:34: error: unreachable statement\nreturn new ArrayList<Float>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        ArrayList<Float> results\
    \ = new ArrayList<>();\n        double minValue = numbers.get(0);\n        double\
    \ maxValue = numbers.get(0);\n        for (float number : numbers) {\n       \
    \     if (number < minValue) minValue = number;\n            if (number > maxValue)\
    \ maxValue = number;\n        }\n        for (float number : numbers) {\n    \
    \        double newNumber = (number - minValue) / (maxValue - minValue); // new\
    \ number in range [0, 1]\n            newNumber *= 2; // new number in range [0,\
    \ 2]\n            newNumber /= 5; // new number in range [0, 0.2]\n          \
    \  results.add(newNumber);\n        }\n        return results;\nreturn new ArrayList<Float>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)1.0f)))));\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f, (float)4.0f, (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4780uet0.java:25: error: no suitable method found for add(double)\n\
    \            results.add(newNumber);\n                   ^\n    method Collection.add(Float)\
    \ is not applicable\n      (argument mismatch; double cannot be converted to Float)\n\
    \    method List.add(Float) is not applicable\n      (argument mismatch; double\
    \ cannot be converted to Float)\n    method AbstractCollection.add(Float) is not\
    \ applicable\n      (argument mismatch; double cannot be converted to Float)\n\
    \    method AbstractList.add(Float) is not applicable\n      (argument mismatch;\
    \ double cannot be converted to Float)\n    method ArrayList.add(Float) is not\
    \ applicable\n      (argument mismatch; double cannot be converted to Float)\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        ArrayList<Float> result =\
    \ new ArrayList<Float>();\n        float smallest = numbers.get(0);\n        float\
    \ largest = numbers.get(0);\n        for (float number : numbers) {\n        \
    \    result.add(smallest);\n            result.add(number);\n            largest\
    \ = Math.max(number, largest);\n            smallest = Math.min(number, smallest);\n\
    \        }\n        return result;\nreturn new ArrayList<Float>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)1.0f)))));\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f, (float)4.0f, (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpg8b3wlvf.java:24: error: unreachable statement\nreturn new ArrayList<Float>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        ArrayList<Float> res = new\
    \ ArrayList<>();\n        for (Float f : numbers) {\n            res.add(f / numbers.size());\n\
    \        }\n        return res;\nreturn new ArrayList<Float>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)1.0f)))));\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f, (float)4.0f, (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxf3gj9jo.java:19: error: unreachable statement\nreturn new ArrayList<Float>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        ArrayList<Float> newNumbers\
    \ = new ArrayList<>();\n        for (Float number : numbers) {\n            newNumbers.add(Float.parseFloat(String.valueOf(number)));\n\
    \        }\n        if (newNumbers.size() < 2) {\n            throw new RuntimeException(\"\
    Not enough numbers\");\n        }\n        boolean first = true;\n        for\
    \ (Float number : numbers) {\n            if (first) {\n                newNumbers.set(newNumbers.size()\
    \ - 1, 1);\n                first = false;\n            } else {\n           \
    \     newNumbers.set(newNumbers.size() - 1, newNumbers.get(newNumbers.size() -\
    \ 1));\n            }\n        }\n        return newNumbers;\nreturn new ArrayList<Float>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)1.0f)))));\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f, (float)4.0f, (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpy1p9n6u9.java:24: error: no suitable method found for set(int,int)\n\
    \                newNumbers.set(newNumbers.size() - 1, 1);\n                 \
    \         ^\n    method List.set(int,Float) is not applicable\n      (argument\
    \ mismatch; int cannot be converted to Float)\n    method AbstractList.set(int,Float)\
    \ is not applicable\n      (argument mismatch; int cannot be converted to Float)\n\
    \    method ArrayList.set(int,Float) is not applicable\n      (argument mismatch;\
    \ int cannot be converted to Float)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        ArrayList<Float> result =\
    \ new ArrayList<>();\n        if (numbers.size() >= 2) {\n            float max\
    \ = numbers.get(0);\n            float min = numbers.get(0);\n            for\
    \ (Float number : numbers) {\n                if (number > max) {\n          \
    \          max = number;\n                }\n                if (number < min)\
    \ {\n                    min = number;\n                }\n            }\n   \
    \         for (Float number : numbers) {\n                if (number != 0.0f)\
    \ {\n                    result.add(number * (max - min) / number);\n        \
    \        } else {\n                    result.add(0.0f);\n                }\n\
    \            }\n        } else {\n            result.add(0.0f);\n        }\n \
    \       return result;\nreturn new ArrayList<Float>(Arrays.asList());\n    }\n\
    \    public static void main(String[] args) {\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)2.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)1.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f, (float)49.9f)))).equals((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.25f,\
    \ (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5pkb_3ny.java:37: error: unreachable statement\nreturn new ArrayList<Float>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        // TODO: Implement this!\n\
    \        throw new UnsupportedOperationException(\"Not yet implemented\");\nreturn\
    \ new ArrayList<Float>(Arrays.asList());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)2.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)1.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f, (float)49.9f)))).equals((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.25f,\
    \ (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpg8kduwqc.java:16: error: unreachable statement\nreturn new ArrayList<Float>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        List<Float> temp = new ArrayList<>();\n\
    \        for(Float x : numbers){\n            float y = 1.0f*(x - numbers.min());\n\
    \            temp.clear();\n            for(int i = 0; i < numbers.size(); i++){\n\
    \                temp.add(numbers.get(i)+y);\n            }\n            numbers\
    \ = temp;\n        }\n        return numbers;\nreturn new ArrayList<Float>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)1.0f)))));\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f, (float)4.0f, (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmprvhhhy53.java:16: error: cannot find symbol\n            float\
    \ y = 1.0f*(x - numbers.min());\n                                       ^\n  symbol:\
    \   method min()\n  location: variable numbers of type ArrayList<Float>\n/tmp/tmprvhhhy53.java:21:\
    \ error: incompatible types: List<Float> cannot be converted to ArrayList<Float>\n\
    \            numbers = temp;\n                      ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        // Find min and max from\
    \ numbers\n        float min = numbers.get(0); // smallest element in the list\
    \ (arbitrary)\n        float max = numbers.get(numbers.size() - 1); // largest\
    \ element in the list\n        float scale = (max - min) / (numbers.size() - 1);\n\
    \n        // Perform the transform\n        ArrayList<Float> result = new ArrayList<Float>(numbers.size());\n\
    \        for (int i = 0; i < numbers.size(); i++) {\n            float element\
    \ = numbers.get(i);\n            float scaledElement = element;\n            scaledElement\
    \ -= min;\n            scaledElement /= scale;\n            result.add(scaledElement);\n\
    \        }\n\n        return result;\nreturn new ArrayList<Float>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)1.0f)))));\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f, (float)4.0f, (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5vzt3l54.java:30: error: unreachable statement\nreturn new ArrayList<Float>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        float min = numbers.stream().min(Integer::compare).get();\n\
    \        float max = numbers.stream().max(Integer::compare).get();\n        float\
    \ range = max - min;\n        ArrayList<Float> scaled = new ArrayList<Float>();\n\
    \        for (Float f : numbers) {\n            scaled.add(f - min);\n       \
    \ }\n        for (int i = 0; i < scaled.size(); i++) {\n            scaled.add(scaled.get(i)\
    \ / range);\n        }\n        return scaled;\nreturn new ArrayList<Float>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)1.0f)))));\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f, (float)4.0f, (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbtn53ce_.java:14: error: incompatible types: invalid method reference\n\
    \        float min = numbers.stream().min(Integer::compare).get();\n         \
    \                                ^\n    incompatible types: Float cannot be converted\
    \ to int\n/tmp/tmpbtn53ce_.java:15: error: incompatible types: invalid method\
    \ reference\n        float max = numbers.stream().max(Integer::compare).get();\n\
    \                                         ^\n    incompatible types: Float cannot\
    \ be converted to int\nNote: Some messages have been simplified; recompile with\
    \ -Xdiags:verbose to get full output\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        numbers = numbers.stream().map(i\
    \ -> i/numbers.stream().max()).collect(Collectors.toList());\n        numbers\
    \ = numbers.stream().map(i -> i*2).collect(Collectors.toList());\n        return\
    \ numbers;\nreturn new ArrayList<Float>(Arrays.asList());\n    }\n    public static\
    \ void main(String[] args) {\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)2.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)1.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f, (float)49.9f)))).equals((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.25f,\
    \ (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp4e_ggp_w.java:14: error: method max in interface Stream<T> cannot\
    \ be applied to given types;\n        numbers = numbers.stream().map(i -> i/numbers.stream().max()).collect(Collectors.toList());\n\
    \                                                              ^\n  required:\
    \ Comparator<? super Float>\n  found: no arguments\n  reason: actual and formal\
    \ argument lists differ in length\n  where T is a type-variable:\n    T extends\
    \ Object declared in interface Stream\n/tmp/tmp4e_ggp_w.java:14: error: incompatible\
    \ types: inference variable R has incompatible bounds\n        numbers = numbers.stream().map(i\
    \ -> i/numbers.stream().max()).collect(Collectors.toList());\n               \
    \                                                              ^\n    equality\
    \ constraints: List<Object>\n    upper bounds: ArrayList<Float>,Object\n  where\
    \ R,A,T are type-variables:\n    R extends Object declared in method <R,A>collect(Collector<?\
    \ super T,A,R>)\n    A extends Object declared in method <R,A>collect(Collector<?\
    \ super T,A,R>)\n    T extends Object declared in interface Stream\n/tmp/tmp4e_ggp_w.java:15:\
    \ error: incompatible types: inference variable R has incompatible bounds\n  \
    \      numbers = numbers.stream().map(i -> i*2).collect(Collectors.toList());\n\
    \                                                        ^\n    equality constraints:\
    \ List<Float>\n    upper bounds: ArrayList<Float>,Object\n  where R,A,T are type-variables:\n\
    \    R extends Object declared in method <R,A>collect(Collector<? super T,A,R>)\n\
    \    A extends Object declared in method <R,A>collect(Collector<? super T,A,R>)\n\
    \    T extends Object declared in interface Stream\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        ArrayList<Float> rescaledNumbers\
    \ = new ArrayList<Float>();\n        Collections.reverse(numbers);\n        double\
    \ range = numbers.get(numbers.size() - 1);\n        double minNum = numbers.get(0);\n\
    \        double maxNum = numbers.get(0);\n        for (int i = 0; i < numbers.size();\
    \ i++) {\n            double num = numbers.get(i);\n            if (num > maxNum)\
    \ {\n                maxNum = num;\n            }\n            if (num < minNum)\
    \ {\n                minNum = num;\n            }\n        }\n        double range\
    \ = maxNum - minNum;\n        for (int i = 0; i < numbers.size(); i++) {\n   \
    \         double num = numbers.get(i);\n            if (num != 0.0) {\n      \
    \          rescaledNumbers.add(num - minNum / range);\n            } else {\n\
    \                rescaledNumbers.add(0.0);\n            }\n        }\n       \
    \ return rescaledNumbers;\nreturn new ArrayList<Float>(Arrays.asList());\n   \
    \ }\n    public static void main(String[] args) {\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)1.0f)))));\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f, (float)4.0f, (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpgy27xy0o.java:28: error: variable range is already defined in method\
    \ rescaleToUnit(ArrayList<Float>)\n        double range = maxNum - minNum;\n \
    \              ^\n/tmp/tmpgy27xy0o.java:32: error: no suitable method found for\
    \ add(double)\n                rescaledNumbers.add(num - minNum / range);\n  \
    \                             ^\n    method Collection.add(Float) is not applicable\n\
    \      (argument mismatch; double cannot be converted to Float)\n    method List.add(Float)\
    \ is not applicable\n      (argument mismatch; double cannot be converted to Float)\n\
    \    method AbstractCollection.add(Float) is not applicable\n      (argument mismatch;\
    \ double cannot be converted to Float)\n    method AbstractList.add(Float) is\
    \ not applicable\n      (argument mismatch; double cannot be converted to Float)\n\
    \    method ArrayList.add(Float) is not applicable\n      (argument mismatch;\
    \ double cannot be converted to Float)\n/tmp/tmpgy27xy0o.java:34: error: no suitable\
    \ method found for add(double)\n                rescaledNumbers.add(0.0);\n  \
    \                             ^\n    method Collection.add(Float) is not applicable\n\
    \      (argument mismatch; double cannot be converted to Float)\n    method List.add(Float)\
    \ is not applicable\n      (argument mismatch; double cannot be converted to Float)\n\
    \    method AbstractCollection.add(Float) is not applicable\n      (argument mismatch;\
    \ double cannot be converted to Float)\n    method AbstractList.add(Float) is\
    \ not applicable\n      (argument mismatch; double cannot be converted to Float)\n\
    \    method ArrayList.add(Float) is not applicable\n      (argument mismatch;\
    \ double cannot be converted to Float)\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        int n = numbers.size();\n\
    \        if (n < 2) {\n            return numbers;\n        }\n\n        float[]\
    \ values = new float[n];\n        for (int i = 0; i < n; i++) {\n            values[i]\
    \ = numbers.get(i);\n        }\n        Collections.sort(values);\n        int\
    \ minIndex = 0;\n        int maxIndex = n;\n\n        while (minIndex < maxIndex)\
    \ {\n            int m = (minIndex + maxIndex) / 2;\n            float minValue\
    \ = values[minIndex];\n            float maxValue = values[maxIndex];\n      \
    \      float currentValue = values[m];\n            float factor = (maxValue -\
    \ minValue) / (currentValue - minValue);\n            values[m] = minValue + factor\
    \ * (currentValue - minValue);\n            if (values[m] == maxValue) {\n   \
    \             maxIndex--;\n            } else {\n                minIndex++;\n\
    \            }\n        }\n        return new ArrayList<Float>(values);\nreturn\
    \ new ArrayList<Float>(Arrays.asList());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)2.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)1.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f, (float)49.9f)))).equals((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.25f,\
    \ (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmph8d7ajz9.java:23: error: no suitable method found for sort(float[])\n\
    \        Collections.sort(values);\n                   ^\n    method Collections.<T#1>sort(List<T#1>)\
    \ is not applicable\n      (cannot infer type-variable(s) T#1\n        (argument\
    \ mismatch; float[] cannot be converted to List<T#1>))\n    method Collections.<T#2>sort(List<T#2>,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Comparable<? super T#1> declared in method\
    \ <T#1>sort(List<T#1>)\n    T#2 extends Object declared in method <T#2>sort(List<T#2>,Comparator<?\
    \ super T#2>)\n/tmp/tmph8d7ajz9.java:40: error: no suitable constructor found\
    \ for ArrayList(float[])\n        return new ArrayList<Float>(values);\n     \
    \          ^\n    constructor ArrayList.ArrayList(int) is not applicable\n   \
    \   (argument mismatch; float[] cannot be converted to int)\n    constructor ArrayList.ArrayList(Collection<?\
    \ extends Float>) is not applicable\n      (argument mismatch; float[] cannot\
    \ be converted to Collection<? extends Float>)\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        Arrays.sort(numbers);\n \
    \       float minValue = numbers.get(0);\n        float maxValue = numbers.get(0);\n\
    \        float difference = maxValue - minValue;\n        for (Float number :\
    \ numbers) {\n            minValue = Math.min(minValue, number);\n           \
    \ maxValue = Math.max(maxValue, number);\n        }\n        float newMax = maxValue\
    \ + difference;\n        float newMin = minValue - difference;\n        ArrayList<Float>\
    \ result = new ArrayList<Float>();\n        float rescaledValue = maxValue;\n\
    \        while (rescaledValue - minValue > 0.001) {\n            result.add(minValue\
    \ + (rescaledValue - minValue) / 2);\n            rescaledValue -= newMax;\n \
    \       }\n        rescaledValue = maxValue;\n        while (rescaledValue - minValue\
    \ > 0.001) {\n            result.add(rescaledValue + (maxValue - rescaledValue)\
    \ / 2);\n            rescaledValue += newMax;\n        }\n        return result;\n\
    return new ArrayList<Float>(Arrays.asList());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)2.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)1.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f, (float)49.9f)))).equals((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.25f,\
    \ (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7wrfssw_.java:14: error: no suitable method found for sort(ArrayList<Float>)\n\
    \        Arrays.sort(numbers);\n              ^\n    method Arrays.sort(int[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Float> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Float> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Float> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Float> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Float> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Float> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Float> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Float> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        ArrayList<Float> units =\
    \ new ArrayList<Float>();\n        float total;\n        for (Float f : numbers)\
    \ {\n            total += f;\n        }\n        float factor = (float) 1 / total;\n\
    \        for (Float f : numbers) {\n            units.add(f*factor);\n       \
    \ }\n        return units;\nreturn new ArrayList<Float>(Arrays.asList());\n  \
    \  }\n    public static void main(String[] args) {\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)1.0f)))));\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f, (float)4.0f, (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmptd5lu9x5.java:24: error: unreachable statement\nreturn new ArrayList<Float>(Arrays.asList());\n\
    ^\n/tmp/tmptd5lu9x5.java:17: error: variable total might not have been initialized\n\
    \            total += f;\n            ^\n/tmp/tmptd5lu9x5.java:19: error: variable\
    \ total might not have been initialized\n        float factor = (float) 1 / total;\n\
    \                                   ^\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        // sort largest to smallest\n\
    \        Collections.sort(numbers, Comparator.reverseOrder());\n\n        // apply\
    \ linear transformation\n        double min = numbers.get(0);\n        double\
    \ max = numbers.get(0);\n        for(int i=1; i<numbers.size(); i++) {\n     \
    \       min = Math.min(min, numbers.get(i));\n            max = Math.max(max,\
    \ numbers.get(i));\n        }\n\n        // rescale numbers to [0, 1]\n      \
    \  ArrayList<Float> rescaled = new ArrayList<Float>();\n        double range =\
    \ max - min;\n        double min1 = (range/2.0) - min;\n        double max1 =\
    \ ((range/2.0) - min)/2.0;\n        double midpoint = min1 + (max1 - min1)*0.5;\n\
    \        for (Float num : numbers) {\n            rescaled.add(midpoint + (num\
    \ - min1)/(max1 - min1));\n        }\n        return rescaled;\nreturn new ArrayList<Float>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)1.0f)))));\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f, (float)4.0f, (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8rnb1uzc.java:32: error: no suitable method found for add(double)\n\
    \            rescaled.add(midpoint + (num - min1)/(max1 - min1));\n          \
    \          ^\n    method Collection.add(Float) is not applicable\n      (argument\
    \ mismatch; double cannot be converted to Float)\n    method List.add(Float) is\
    \ not applicable\n      (argument mismatch; double cannot be converted to Float)\n\
    \    method AbstractCollection.add(Float) is not applicable\n      (argument mismatch;\
    \ double cannot be converted to Float)\n    method AbstractList.add(Float) is\
    \ not applicable\n      (argument mismatch; double cannot be converted to Float)\n\
    \    method ArrayList.add(Float) is not applicable\n      (argument mismatch;\
    \ double cannot be converted to Float)\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        // For linear transformation\
    \ to behave like unit, we need minimum to be 0 and maximum to be 1\n        //\
    \ So, minimum of array must be 0 and maximum of array must be 1\n        float\
    \ minValue  = numbers.get(0); // minimum value to be rescaled\n        float maxValue\
    \  = numbers.get(0);  // maximum value to be rescaled\n        for (Float number\
    \ : numbers) {\n            if (number > maxValue) maxValue = number;\n      \
    \      if (number < minValue) minValue = number;\n        }\n\n        double\
    \ rescaledMinValue = minValue;\n        double rescaledMaxValue = maxValue;\n\n\
    \        // for linear transformation to behave like unit we need to calculate\
    \ rescaled min and max values\n        for (Float number : numbers) {\n      \
    \      rescaledMinValue += number;\n            rescaledMaxValue += number;\n\
    \        }\n\n        rescaledMinValue /= numbers.size();\n        rescaledMaxValue\
    \ /= numbers.size();\n\n        ArrayList<Float> rescaledList = new ArrayList<Float>(numbers.size());\
    \ // list to store rescaled values\n        for (Float number : numbers) {\n \
    \           rescaledList.add(number * (rescaledMaxValue - rescaledMinValue) +\
    \ rescaledMinValue);\n        }\n        return rescaledList;\nreturn new ArrayList<Float>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)1.0f)))));\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f, (float)4.0f, (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpgqgj41xn.java:37: error: no suitable method found for add(double)\n\
    \            rescaledList.add(number * (rescaledMaxValue - rescaledMinValue) +\
    \ rescaledMinValue);\n                        ^\n    method Collection.add(Float)\
    \ is not applicable\n      (argument mismatch; double cannot be converted to Float)\n\
    \    method List.add(Float) is not applicable\n      (argument mismatch; double\
    \ cannot be converted to Float)\n    method AbstractCollection.add(Float) is not\
    \ applicable\n      (argument mismatch; double cannot be converted to Float)\n\
    \    method AbstractList.add(Float) is not applicable\n      (argument mismatch;\
    \ double cannot be converted to Float)\n    method ArrayList.add(Float) is not\
    \ applicable\n      (argument mismatch; double cannot be converted to Float)\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        if (numbers.isEmpty()) {\n\
    \            return new ArrayList<Float>();\n        }\n        \n        float\
    \ min = Collections.min(numbers);\n        float max = Collections.max(numbers);\n\
    \        \n        float scale = max - min;\n        \n        float newMax =\
    \ max;\n        float newMin = min + scale;\n        \n        ArrayList<Float>\
    \ result = new ArrayList<Float>();\n        float x = newMin;\n        for (Float\
    \ number : numbers) {\n            result.add(number * scale + x);\n         \
    \   x = newMin;\n        }\n        \n        return result;\nreturn new ArrayList<Float>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)1.0f)))));\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f, (float)4.0f, (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1wqnb5z4.java:34: error: unreachable statement\nreturn new ArrayList<Float>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        if (numbers.isEmpty()) return\
    \ numbers;\n        Float min, max;\n        min = numbers.stream().mapToFloat(Float::floatValue).min().getAsFloat();\n\
    \        max = numbers.stream().mapToFloat(Float::floatValue).max().getAsFloat();\n\
    \        System.out.println(min + \" \" + max);\n        if (min >= 0 && max <=\
    \ 1) return numbers.stream().mapToFloat(n -> n * (max - min) / (max - min)).collect(Collectors.toList());\n\
    \        float unit = (max - min) / (numbers.size() - 1);\n        System.out.println(unit\
    \ + \" \" + min + \" \" + max);\n        return numbers.stream().mapToFloat(n\
    \ -> min + (n * (unit - min) / (max - min))).collect(Collectors.toList());\nreturn\
    \ new ArrayList<Float>(Arrays.asList());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)2.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)1.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f, (float)49.9f)))).equals((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.25f,\
    \ (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpop6m01tl.java:16: error: cannot find symbol\n        min = numbers.stream().mapToFloat(Float::floatValue).min().getAsFloat();\n\
    \                              ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmpop6m01tl.java:16: error: invalid\
    \ method reference\n        min = numbers.stream().mapToFloat(Float::floatValue).min().getAsFloat();\n\
    \                                          ^\n  non-static method floatValue()\
    \ cannot be referenced from a static context\n/tmp/tmpop6m01tl.java:17: error:\
    \ cannot find symbol\n        max = numbers.stream().mapToFloat(Float::floatValue).max().getAsFloat();\n\
    \                              ^\n  symbol:   method mapToFloat(Float::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmpop6m01tl.java:17: error: invalid\
    \ method reference\n        max = numbers.stream().mapToFloat(Float::floatValue).max().getAsFloat();\n\
    \                                          ^\n  non-static method floatValue()\
    \ cannot be referenced from a static context\n/tmp/tmpop6m01tl.java:19: error:\
    \ cannot find symbol\n        if (min >= 0 && max <= 1) return numbers.stream().mapToFloat(n\
    \ -> n * (max - min) / (max - min)).collect(Collectors.toList());\n          \
    \                                               ^\n  symbol:   method mapToFloat((n)->n\
    \ * ([...] min))\n  location: interface Stream<Float>\n/tmp/tmpop6m01tl.java:22:\
    \ error: cannot find symbol\n        return numbers.stream().mapToFloat(n -> min\
    \ + (n * (unit - min) / (max - min))).collect(Collectors.toList());\n        \
    \                       ^\n  symbol:   method mapToFloat((n)->min +[...]min)))\n\
    \  location: interface Stream<Float>\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        List<Float> scaled = numbers.stream().mapToDouble(n\
    \ -> (double) n).boxed().collect(Collectors.toList());\n        scaled.sort(Comparator.reverseOrder());\n\
    \        scaled.add(0.0);\n        scaled.remove(scaled.size() - 1);\n       \
    \ return scaled;\nreturn new ArrayList<Float>(Arrays.asList());\n    }\n    public\
    \ static void main(String[] args) {\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)2.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)1.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f, (float)49.9f)))).equals((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.25f,\
    \ (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_elqbl9t.java:14: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        List<Float> scaled = numbers.stream().mapToDouble(n\
    \ -> (double) n).boxed().collect(Collectors.toList());\n                     \
    \                                                                     ^\n    equality\
    \ constraints: Float\n    lower bounds: Double\n  where T is a type-variable:\n\
    \    T extends Object declared in method <T>toList()\n/tmp/tmp_elqbl9t.java:16:\
    \ error: no suitable method found for add(double)\n        scaled.add(0.0);\n\
    \              ^\n    method Collection.add(Float) is not applicable\n      (argument\
    \ mismatch; double cannot be converted to Float)\n    method List.add(Float) is\
    \ not applicable\n      (argument mismatch; double cannot be converted to Float)\n\
    /tmp/tmp_elqbl9t.java:18: error: incompatible types: List<Float> cannot be converted\
    \ to ArrayList<Float>\n        return scaled;\n               ^\nNote: Some messages\
    \ have been simplified; recompile with -Xdiags:verbose to get full output\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        ArrayList<Float> rescaledNumbers\
    \ = new ArrayList<>();\n        for (Float number : numbers) {\n            rescaledNumbers.add(Math.abs(number));\n\
    \        }\n        Collections.sort(rescaledNumbers);\n        rescaledNumbers.add(1.0f);\n\
    \        rescaledNumbers.add(0.0f);\n        return rescaledNumbers;\nreturn new\
    \ ArrayList<Float>(Arrays.asList());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)2.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)1.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f, (float)49.9f)))).equals((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.25f,\
    \ (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpi_9annl0.java:22: error: unreachable statement\nreturn new ArrayList<Float>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        ArrayList<Float> rescaledNumbers\
    \ = new ArrayList<>(numbers.size());\n        rescaledNumbers.add(0);\n      \
    \  rescaledNumbers.add(1);\n        for (Float number : numbers) {\n         \
    \   rescaledNumbers.add(number / (float) rescaledNumbers.size());\n        }\n\
    \        return rescaledNumbers;\nreturn new ArrayList<Float>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)1.0f)))));\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f, (float)4.0f, (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp81oom_z2.java:15: error: no suitable method found for add(int)\n\
    \        rescaledNumbers.add(0);\n                       ^\n    method Collection.add(Float)\
    \ is not applicable\n      (argument mismatch; int cannot be converted to Float)\n\
    \    method List.add(Float) is not applicable\n      (argument mismatch; int cannot\
    \ be converted to Float)\n    method AbstractCollection.add(Float) is not applicable\n\
    \      (argument mismatch; int cannot be converted to Float)\n    method AbstractList.add(Float)\
    \ is not applicable\n      (argument mismatch; int cannot be converted to Float)\n\
    \    method ArrayList.add(Float) is not applicable\n      (argument mismatch;\
    \ int cannot be converted to Float)\n/tmp/tmp81oom_z2.java:16: error: no suitable\
    \ method found for add(int)\n        rescaledNumbers.add(1);\n               \
    \        ^\n    method Collection.add(Float) is not applicable\n      (argument\
    \ mismatch; int cannot be converted to Float)\n    method List.add(Float) is not\
    \ applicable\n      (argument mismatch; int cannot be converted to Float)\n  \
    \  method AbstractCollection.add(Float) is not applicable\n      (argument mismatch;\
    \ int cannot be converted to Float)\n    method AbstractList.add(Float) is not\
    \ applicable\n      (argument mismatch; int cannot be converted to Float)\n  \
    \  method ArrayList.add(Float) is not applicable\n      (argument mismatch; int\
    \ cannot be converted to Float)\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        if (numbers.isEmpty()) return\
    \ new ArrayList<Float>();\n        Collections.sort(numbers);\n        int minValue\
    \ = numbers.get(0);\n        int maxValue = numbers.get(0);\n        for (int\
    \ i = 1; i < numbers.size(); ++i) {\n            if (numbers.get(i) < minValue)\
    \ minValue = numbers.get(i);\n            if (numbers.get(i) > maxValue) maxValue\
    \ = numbers.get(i);\n        }\n        ArrayList<Float> scale = new ArrayList<>();\n\
    \        scale.add(0.50f + (maxValue - minValue) / 2);\n        scale.add(1.0f\
    \ - scale.get(0));\n        return scale;\nreturn new ArrayList<Float>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)1.0f)))));\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f, (float)4.0f, (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2ukt0a4u.java:16: error: incompatible types: Float cannot be converted\
    \ to int\n        int minValue = numbers.get(0);\n                           \
    \       ^\n/tmp/tmp2ukt0a4u.java:17: error: incompatible types: Float cannot be\
    \ converted to int\n        int maxValue = numbers.get(0);\n                 \
    \                 ^\n/tmp/tmp2ukt0a4u.java:19: error: incompatible types: Float\
    \ cannot be converted to int\n            if (numbers.get(i) < minValue) minValue\
    \ = numbers.get(i);\n                                                        \
    \         ^\n/tmp/tmp2ukt0a4u.java:20: error: incompatible types: Float cannot\
    \ be converted to int\n            if (numbers.get(i) > maxValue) maxValue = numbers.get(i);\n\
    \                                                                 ^\n4 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        ArrayList<Float> newNumbers\
    \ = new ArrayList<Float>();\n        newNumbers.add(0, numbers.get(0));\n    \
    \    for (Float f : numbers) {\n            newNumbers.add(newNumbers.get(0),\
    \ newNumbers.get(1), f);\n        }\n        return newNumbers;\nreturn new ArrayList<Float>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)1.0f)))));\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f, (float)4.0f, (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpmutb232a.java:17: error: no suitable method found for add(Float,Float,Float)\n\
    \            newNumbers.add(newNumbers.get(0), newNumbers.get(1), f);\n      \
    \                ^\n    method Collection.add(Float) is not applicable\n     \
    \ (actual and formal argument lists differ in length)\n    method List.add(Float)\
    \ is not applicable\n      (actual and formal argument lists differ in length)\n\
    \    method List.add(int,Float) is not applicable\n      (actual and formal argument\
    \ lists differ in length)\n    method AbstractCollection.add(Float) is not applicable\n\
    \      (actual and formal argument lists differ in length)\n    method AbstractList.add(Float)\
    \ is not applicable\n      (actual and formal argument lists differ in length)\n\
    \    method AbstractList.add(int,Float) is not applicable\n      (actual and formal\
    \ argument lists differ in length)\n    method ArrayList.add(Float) is not applicable\n\
    \      (actual and formal argument lists differ in length)\n    method ArrayList.add(int,Float)\
    \ is not applicable\n      (actual and formal argument lists differ in length)\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        double smallest = numbers.get(0),\
    \ largest = numbers.get(0);\n        ArrayList<Float> rescaled = new ArrayList<Float>(numbers.size());\n\
    \        for (int i = 1; i < numbers.size(); i++) {\n            if (numbers.get(i)\
    \ < smallest || smallest == 0)\n                smallest = numbers.get(i);\n \
    \           if (numbers.get(i) > largest || largest == 0)\n                largest\
    \ = numbers.get(i);\n            rescaled.add(numbers.get(i) / (largest - smallest));\n\
    \        }\n        return rescaled;\nreturn new ArrayList<Float>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)1.0f)))));\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f, (float)4.0f, (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpnxxtc0iz.java:21: error: no suitable method found for add(double)\n\
    \            rescaled.add(numbers.get(i) / (largest - smallest));\n          \
    \          ^\n    method Collection.add(Float) is not applicable\n      (argument\
    \ mismatch; double cannot be converted to Float)\n    method List.add(Float) is\
    \ not applicable\n      (argument mismatch; double cannot be converted to Float)\n\
    \    method AbstractCollection.add(Float) is not applicable\n      (argument mismatch;\
    \ double cannot be converted to Float)\n    method AbstractList.add(Float) is\
    \ not applicable\n      (argument mismatch; double cannot be converted to Float)\n\
    \    method ArrayList.add(Float) is not applicable\n      (argument mismatch;\
    \ double cannot be converted to Float)\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        float min, max;\n       \
    \ min = numbers.get(0); max = numbers.get(0);\n        for(int i = 1; i < numbers.size();\
    \ i++) {\n            min = Math.min(min, numbers.get(i));\n            max =\
    \ Math.max(max, numbers.get(i));\n        }\n        ArrayList<Float> rescaled\
    \ = new ArrayList<Float>(numbers);\n        rescaled.set(0, 0);\n        rescaled.set(rescaled.size()\
    \ - 1, 0);\n        for(int i = 0; i < numbers.size(); i++) {\n            rescaled.set(i\
    \ + 1, rescaled.get(i) * (max - min) + min);\n        }\n        return rescaled;\n\
    return new ArrayList<Float>(Arrays.asList());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)2.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)1.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f, (float)49.9f)))).equals((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.25f,\
    \ (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpsnuso3mw.java:21: error: no suitable method found for set(int,int)\n\
    \        rescaled.set(0, 0);\n                ^\n    method List.set(int,Float)\
    \ is not applicable\n      (argument mismatch; int cannot be converted to Float)\n\
    \    method AbstractList.set(int,Float) is not applicable\n      (argument mismatch;\
    \ int cannot be converted to Float)\n    method ArrayList.set(int,Float) is not\
    \ applicable\n      (argument mismatch; int cannot be converted to Float)\n/tmp/tmpsnuso3mw.java:22:\
    \ error: no suitable method found for set(int,int)\n        rescaled.set(rescaled.size()\
    \ - 1, 0);\n                ^\n    method List.set(int,Float) is not applicable\n\
    \      (argument mismatch; int cannot be converted to Float)\n    method AbstractList.set(int,Float)\
    \ is not applicable\n      (argument mismatch; int cannot be converted to Float)\n\
    \    method ArrayList.set(int,Float) is not applicable\n      (argument mismatch;\
    \ int cannot be converted to Float)\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        ArrayList<Float> rescaled\
    \ = new ArrayList<>();\n        float maxVal = numbers.get(0); // initialize max\
    \ value to first number\n        float minVal = numbers.get(1); // initialize\
    \ min value to second number\n        for (Float number : numbers) {\n       \
    \     maxVal = Math.max(maxVal, number); // keep track of max val\n          \
    \  minVal = Math.min(minVal, number); // keep track of min val\n            rescaled.add(number\
    \ - minVal / (maxVal - minVal)); // apply transform\n        }\n        return\
    \ rescaled;\nreturn new ArrayList<Float>(Arrays.asList());\n    }\n    public\
    \ static void main(String[] args) {\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)2.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)1.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f, (float)49.9f)))).equals((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.25f,\
    \ (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpw6f9ces1.java:23: error: unreachable statement\nreturn new ArrayList<Float>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        Arrays.sort(numbers);\n \
    \       // smallest number becomes 0, largest becomes 1\n        for (int i =\
    \ 0; i < numbers.size() - 1; i++) {\n            if (numbers.get(i) < numbers.get(i+1))\
    \ {\n                numbers.set(i + 1, 0f);\n            }\n        }\n     \
    \   Collections.sort(numbers);\n        return numbers;\nreturn new ArrayList<Float>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)1.0f)))));\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f, (float)4.0f, (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0psd58wh.java:14: error: no suitable method found for sort(ArrayList<Float>)\n\
    \        Arrays.sort(numbers);\n              ^\n    method Arrays.sort(int[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Float> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Float> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Float> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Float> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Float> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Float> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Float> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Float> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        ArrayList<Float> results\
    \ = new ArrayList<>();\n        double smallest = Math.min(numbers.get(0), numbers.get(1));\n\
    \        double largest = Math.max(numbers.get(0), numbers.get(1));\n        double\
    \ scale = (largest - smallest) / (numbers.size() - 1);\n        double delta =\
    \ 0.0;\n\n        for (Float x : numbers) {\n            results.add(x - smallest);\n\
    \            delta += Math.pow((x - smallest), 2);\n        }\n        double\
    \ scaleFactor = scale;\n\n        while (delta * scaleFactor > delta) {\n    \
    \        for (Float x : numbers) {\n                results.add(x - smallest);\n\
    \                delta += Math.pow((x - smallest), 2);\n            }\n      \
    \      scaleFactor *= scale;\n        }\n\n        return results;\nreturn new\
    \ ArrayList<Float>(Arrays.asList());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)2.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)1.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f, (float)49.9f)))).equals((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.25f,\
    \ (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmph_qdnp5y.java:21: error: no suitable method found for add(double)\n\
    \            results.add(x - smallest);\n                   ^\n    method Collection.add(Float)\
    \ is not applicable\n      (argument mismatch; double cannot be converted to Float)\n\
    \    method List.add(Float) is not applicable\n      (argument mismatch; double\
    \ cannot be converted to Float)\n    method AbstractCollection.add(Float) is not\
    \ applicable\n      (argument mismatch; double cannot be converted to Float)\n\
    \    method AbstractList.add(Float) is not applicable\n      (argument mismatch;\
    \ double cannot be converted to Float)\n    method ArrayList.add(Float) is not\
    \ applicable\n      (argument mismatch; double cannot be converted to Float)\n\
    /tmp/tmph_qdnp5y.java:28: error: no suitable method found for add(double)\n  \
    \              results.add(x - smallest);\n                       ^\n    method\
    \ Collection.add(Float) is not applicable\n      (argument mismatch; double cannot\
    \ be converted to Float)\n    method List.add(Float) is not applicable\n     \
    \ (argument mismatch; double cannot be converted to Float)\n    method AbstractCollection.add(Float)\
    \ is not applicable\n      (argument mismatch; double cannot be converted to Float)\n\
    \    method AbstractList.add(Float) is not applicable\n      (argument mismatch;\
    \ double cannot be converted to Float)\n    method ArrayList.add(Float) is not\
    \ applicable\n      (argument mismatch; double cannot be converted to Float)\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        // Transform numbers to range\
    \ 0 to 1\n        ArrayList<Float> rescaledNumbers = new ArrayList<Float>();\n\
    \        for (Float number : numbers) {\n            // Calculate rescaled number\
    \ between zero and one\n            rescaledNumbers.add(Math.min(1, number));\n\
    \        }\n        // Sum all the numbers and divide by the number of elements\n\
    \        rescaledNumbers.add(0);\n        rescaledNumbers.add(1);\n        rescaledNumbers.add(numbers.size());\n\
    \        rescaledNumbers.stream().mapToDouble(Float::doubleValue).sum();\n   \
    \     rescaledNumbers.stream().mapToDouble(Float::doubleValue).forEachOrdered(n\
    \ -> {\n            rescaledNumbers.add(n / numbers.size());\n        });\n  \
    \      // Remove duplicates, sort and return\n        rescaledNumbers.stream().distinct().sorted().collect(Collectors.toCollection(ArrayList::new));\n\
    \        return rescaledNumbers;\nreturn new ArrayList<Float>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)1.0f)))));\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f, (float)4.0f, (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7cx0bo90.java:21: error: no suitable method found for add(int)\n\
    \        rescaledNumbers.add(0);\n                       ^\n    method Collection.add(Float)\
    \ is not applicable\n      (argument mismatch; int cannot be converted to Float)\n\
    \    method List.add(Float) is not applicable\n      (argument mismatch; int cannot\
    \ be converted to Float)\n    method AbstractCollection.add(Float) is not applicable\n\
    \      (argument mismatch; int cannot be converted to Float)\n    method AbstractList.add(Float)\
    \ is not applicable\n      (argument mismatch; int cannot be converted to Float)\n\
    \    method ArrayList.add(Float) is not applicable\n      (argument mismatch;\
    \ int cannot be converted to Float)\n/tmp/tmp7cx0bo90.java:22: error: no suitable\
    \ method found for add(int)\n        rescaledNumbers.add(1);\n               \
    \        ^\n    method Collection.add(Float) is not applicable\n      (argument\
    \ mismatch; int cannot be converted to Float)\n    method List.add(Float) is not\
    \ applicable\n      (argument mismatch; int cannot be converted to Float)\n  \
    \  method AbstractCollection.add(Float) is not applicable\n      (argument mismatch;\
    \ int cannot be converted to Float)\n    method AbstractList.add(Float) is not\
    \ applicable\n      (argument mismatch; int cannot be converted to Float)\n  \
    \  method ArrayList.add(Float) is not applicable\n      (argument mismatch; int\
    \ cannot be converted to Float)\n/tmp/tmp7cx0bo90.java:23: error: no suitable\
    \ method found for add(int)\n        rescaledNumbers.add(numbers.size());\n  \
    \                     ^\n    method Collection.add(Float) is not applicable\n\
    \      (argument mismatch; int cannot be converted to Float)\n    method List.add(Float)\
    \ is not applicable\n      (argument mismatch; int cannot be converted to Float)\n\
    \    method AbstractCollection.add(Float) is not applicable\n      (argument mismatch;\
    \ int cannot be converted to Float)\n    method AbstractList.add(Float) is not\
    \ applicable\n      (argument mismatch; int cannot be converted to Float)\n  \
    \  method ArrayList.add(Float) is not applicable\n      (argument mismatch; int\
    \ cannot "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        ArrayList<Float> scale =\
    \ new ArrayList<>();\n        float min = Collections.min(numbers);\n        float\
    \ max = Collections.max(numbers);\n        for (int i = 0; i < numbers.size();\
    \ i++) {\n            float x = (numbers.get(i) - min) / (max - min);\n      \
    \      scale.add(x);\n        }\n        return scale;\nreturn new ArrayList<Float>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)1.0f)))));\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f, (float)4.0f, (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpl7nyhlov.java:22: error: unreachable statement\nreturn new ArrayList<Float>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        ArrayList<Float> rescaled\
    \ = new ArrayList<>();\n        if (numbers.size() <= 1) {\n            rescaled.add(numbers.get(0));\n\
    \            return rescaled;\n        }\n        double smallest = numbers.get(0);\n\
    \        double largest = numbers.get(0);\n        for (Float i : numbers) {\n\
    \            if (Math.abs(smallest) < Math.abs(i)) {\n                smallest\
    \ = i;\n            } else if (Math.abs(largest) > Math.abs(i)) {\n          \
    \      largest = i;\n            }\n        }\n        double ratio = (largest\
    \ - smallest) / (numbers.get(numbers.size() - 1) - smallest);\n        rescaled.add(smallest);\n\
    \        for (int i = 0; i < numbers.size(); i++) {\n            rescaled.add(numbers.get(i)\
    \ + ratio);\n        }\n        return rescaled;\nreturn new ArrayList<Float>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)1.0f)))));\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f, (float)4.0f, (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1uo61eo_.java:29: error: no suitable method found for add(double)\n\
    \        rescaled.add(smallest);\n                ^\n    method Collection.add(Float)\
    \ is not applicable\n      (argument mismatch; double cannot be converted to Float)\n\
    \    method List.add(Float) is not applicable\n      (argument mismatch; double\
    \ cannot be converted to Float)\n    method AbstractCollection.add(Float) is not\
    \ applicable\n      (argument mismatch; double cannot be converted to Float)\n\
    \    method AbstractList.add(Float) is not applicable\n      (argument mismatch;\
    \ double cannot be converted to Float)\n    method ArrayList.add(Float) is not\
    \ applicable\n      (argument mismatch; double cannot be converted to Float)\n\
    /tmp/tmp1uo61eo_.java:31: error: no suitable method found for add(double)\n  \
    \          rescaled.add(numbers.get(i) + ratio);\n                    ^\n    method\
    \ Collection.add(Float) is not applicable\n      (argument mismatch; double cannot\
    \ be converted to Float)\n    method List.add(Float) is not applicable\n     \
    \ (argument mismatch; double cannot be converted to Float)\n    method AbstractCollection.add(Float)\
    \ is not applicable\n      (argument mismatch; double cannot be converted to Float)\n\
    \    method AbstractList.add(Float) is not applicable\n      (argument mismatch;\
    \ double cannot be converted to Float)\n    method ArrayList.add(Float) is not\
    \ applicable\n      (argument mismatch; double cannot be converted to Float)\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        if (numbers.size() < 2) {\n\
    \            throw new RuntimeException(\"Need at least two numbers to rescale\"\
    );\n        }\n        \n        ArrayList<Float> result = new ArrayList<>(numbers.size());\n\
    \        \n        float min = numbers.get(0); // smallest number in list\n  \
    \      float max = numbers.get(numbers.size()); // largest number in list\n  \
    \      \n        // Find smallest and largest number in list\n        float smallest\
    \ = Float.NEGATIVE_INFINITY;\n        float largest = Float.POSITIVE_INFINITY;\n\
    \        \n        for (Float number : numbers) {\n            if (number < smallest)\
    \ {\n                smallest = number;\n            }\n            if (number\
    \ > largest) {\n                largest = number;\n            }\n        }\n\n\
    \        // Apply linear transformation\n        float new_min = smallest; //\
    \ smallest number after transformation\n        float new_max = largest; // largest\
    \ number after transformation\n        \n        for (Float number : numbers)\
    \ {\n            float new_number = (number - min) / (max - min) * (new_max -\
    \ new_min) + new_min;\n            result.add(new_number);\n        }\n      \
    \  \n        return result;\nreturn new ArrayList<Float>(Arrays.asList());\n \
    \   }\n    public static void main(String[] args) {\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)1.0f)))));\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f, (float)4.0f, (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmph4j0ooo8.java:46: error: unreachable statement\nreturn new ArrayList<Float>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        ArrayList<Float> result =\
    \ new ArrayList<Float>(numbers);\n\n        // If all numbers are positive, simply\
    \ set them to 0 and 1\n        if (numbers.stream().allMatch(Math::isFinite))\
    \ {\n            if (numbers.get(0) > 0) {\n                result.set(0, numbers.get(0)\
    \ / numbers.get(0));\n            }\n            if (numbers.get(numbers.size()-1)\
    \ > 0) {\n                result.set(numbers.get(numbers.size()-1) / numbers.get(numbers.size()-1),\
    \ 1);\n            }\n            return result;\n        }\n\n        // Otherwise,\
    \ first normalize to [0,1)\n        System.out.println(\"Normalizing...\");\n\
    \        float min = Float.MAX_VALUE;\n        float max = -Float.MAX_VALUE;\n\
    \        for (Float number : numbers) {\n            if (number > max) {\n   \
    \             max = number;\n            }\n            if (number < min) {\n\
    \                min = number;\n            }\n        }\n        float scale\
    \ = 1.0 / (max - min);\n        for (Float number : numbers) {\n            result.set((number\
    \ - min) * scale, scale);\n        }\n\n        return result;\nreturn new ArrayList<Float>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)1.0f)))));\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f, (float)4.0f, (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmphoump7zd.java:17: error: invalid method reference\n        if (numbers.stream().allMatch(Math::isFinite))\
    \ {\n                                      ^\n  cannot find symbol\n    symbol:\
    \   method isFinite()\n    location: class Math\n/tmp/tmphoump7zd.java:22: error:\
    \ no suitable method found for set(float,int)\n                result.set(numbers.get(numbers.size()-1)\
    \ / numbers.get(numbers.size()-1), 1);\n                      ^\n    method List.set(int,Float)\
    \ is not applicable\n      (argument mismatch; possible lossy conversion from\
    \ float to int)\n    method AbstractList.set(int,Float) is not applicable\n  \
    \    (argument mismatch; possible lossy conversion from float to int)\n    method\
    \ ArrayList.set(int,Float) is not applicable\n      (argument mismatch; possible\
    \ lossy conversion from float to int)\n/tmp/tmphoump7zd.java:39: error: incompatible\
    \ types: possible lossy conversion from double to float\n        float scale =\
    \ 1.0 / (max - min);\n                          ^\n/tmp/tmphoump7zd.java:41: error:\
    \ no suitable method found for set(float,float)\n            result.set((number\
    \ - min) * scale, scale);\n                  ^\n    method List.set(int,Float)\
    \ is not applicable\n      (argument mismatch; possible lossy conversion from\
    \ float to int)\n    method AbstractList.set(int,Float) is not applicable\n  \
    \    (argument mismatch; possible lossy conversion from float to int)\n    method\
    \ ArrayList.set(int,Float) is not applicable\n      (argument mismatch; possible\
    \ lossy conversion from float to int)\n4 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        // Write your solution\n\
    return new ArrayList<Float>(Arrays.asList());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)2.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)1.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f, (float)49.9f)))).equals((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.25f,\
    \ (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2iomp1eq.java:18)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        float min = Math.min(numbers.get(0),\
    \ numbers.get(1));\n        float max = Math.max(numbers.get(0), numbers.get(1));\n\
    \        float range = max - min;\n        ArrayList<Float> scaled = new ArrayList<>();\n\
    \        float increment = range / numbers.size();\n        for (int i = 0; i\
    \ < numbers.size(); i++) {\n            scaled.add(numbers.get(i) * increment\
    \ + min);\n        }\n        return scaled;\nreturn new ArrayList<Float>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)1.0f)))));\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f, (float)4.0f, (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfm5hq2hj.java:23: error: unreachable statement\nreturn new ArrayList<Float>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        ArrayList<Float> list = new\
    \ ArrayList<Float>();\n        double min = numbers.get(0); // Get minimum of\
    \ list\n        int max = 0;\n        for(Float number : numbers) {\n        \
    \    float scaled = (float) number / min;\n            list.add(scaled);\n   \
    \         max = Math.max(max, scaled);\n        }\n        // Fill with 0s\n \
    \       for(int i = 0; i < list.size(); i++) {\n            list.set(i, 0.0);\n\
    \        }\n        // Fill with 1s\n        for(int i = 0; i < list.size(); i++)\
    \ {\n            list.set(i, 1.0);\n        }\n        return list;\nreturn new\
    \ ArrayList<Float>(Arrays.asList());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)2.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)1.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f, (float)49.9f)))).equals((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.25f,\
    \ (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfllz9_44.java:18: error: incompatible types: possible lossy conversion\
    \ from double to float\n            float scaled = (float) number / min;\n   \
    \                                       ^\n/tmp/tmpfllz9_44.java:20: error: incompatible\
    \ types: possible lossy conversion from float to int\n            max = Math.max(max,\
    \ scaled);\n                          ^\n/tmp/tmpfllz9_44.java:24: error: no suitable\
    \ method found for set(int,double)\n            list.set(i, 0.0);\n          \
    \      ^\n    method List.set(int,Float) is not applicable\n      (argument mismatch;\
    \ double cannot be converted to Float)\n    method AbstractList.set(int,Float)\
    \ is not applicable\n      (argument mismatch; double cannot be converted to Float)\n\
    \    method ArrayList.set(int,Float) is not applicable\n      (argument mismatch;\
    \ double cannot be converted to Float)\n/tmp/tmpfllz9_44.java:28: error: no suitable\
    \ method found for set(int,double)\n            list.set(i, 1.0);\n          \
    \      ^\n    method List.set(int,Float) is not applicable\n      (argument mismatch;\
    \ double cannot be converted to Float)\n    method AbstractList.set(int,Float)\
    \ is not applicable\n      (argument mismatch; double cannot be converted to Float)\n\
    \    method ArrayList.set(int,Float) is not applicable\n      (argument mismatch;\
    \ double cannot be converted to Float)\n4 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        ArrayList<Float> numbers_rescaled\
    \ = new ArrayList<Float>();\n        for (Float x : numbers) {\n            float\
    \ min = Collections.min(numbers);\n            float max = Collections.max(numbers);\n\
    \            float x_scaled = (((float) x - min) / (max - min)) - 0.5f;\n    \
    \        numbers_rescaled.add(x_scaled);\n        }\n        return numbers_rescaled;\n\
    return new ArrayList<Float>(Arrays.asList());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)2.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)1.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f, (float)49.9f)))).equals((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.25f,\
    \ (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp23vtnkwa.java:22: error: unreachable statement\nreturn new ArrayList<Float>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        ArrayList<Float> rescaled\
    \ = new ArrayList<Float>(numbers.size());\n        float smallest = numbers.get(0);\n\
    \        float largest = numbers.get(0);\n        for (float number : numbers)\
    \ {\n            smallest = Math.min(smallest, number);\n            largest =\
    \ Math.max(largest, number);\n        }\n        for (int i = 0; i < numbers.size();\
    \ i++) {\n            rescaled.add( ((numbers.get(i) - smallest) / (largest -\
    \ smallest))\n                    * numbers.get(i));\n        }\n        return\
    \ rescaled;\nreturn new ArrayList<Float>(Arrays.asList());\n    }\n    public\
    \ static void main(String[] args) {\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)2.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)1.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f, (float)49.9f)))).equals((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.25f,\
    \ (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp71wkvj9a.java:26: error: unreachable statement\nreturn new ArrayList<Float>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        ArrayList<Float> result =\
    \ new ArrayList<>();\n        double minNum = numbers.get(0); // First number\
    \ is minimum\n        double maxNum = numbers.get(numbers.size()-1); // Last number\
    \ is maximum\n        for (int i=0; i < numbers.size(); i++) {\n            double\
    \ x = numbers.get(i);\n            float fx = Float.valueOf(x);\n            float\
    \ factor = (float)(maxNum-minNum)/((float)(fx+1)-minNum);\n            result.add(factor*fx);\n\
    \        }\n        return result;\nreturn new ArrayList<Float>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)1.0f)))));\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f, (float)4.0f, (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpapnavzm1.java:19: error: no suitable method found for valueOf(double)\n\
    \            float fx = Float.valueOf(x);\n                            ^\n   \
    \ method Float.valueOf(String) is not applicable\n      (argument mismatch; double\
    \ cannot be converted to String)\n    method Float.valueOf(float) is not applicable\n\
    \      (argument mismatch; possible lossy conversion from double to float)\n/tmp/tmpapnavzm1.java:20:\
    \ error: incompatible types: possible lossy conversion from double to float\n\
    \            float factor = (float)(maxNum-minNum)/((float)(fx+1)-minNum);\n \
    \                                                ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        ArrayList<Float> rescaledNumbers\
    \ = new ArrayList<>();\n        // Sort the numbers to minimize the number of\
    \ \"swapping\" operations during scaling\n        numbers.sort(Comparator.comparingDouble(Number::floatValue));\n\
    \        // Now we start at the highest element and end at the smallest. At every\
    \ step we\n        // shift the highest element by one unit and divide each number\
    \ by that new unit. After\n        // each step we store the original number,\
    \ the rescaled number and the new unit\n        for (Float number : numbers) {\n\
    \            // Find the smallest element and shift it one unit to the left\n\
    \            Float newMin = number + 1;\n            // Find the largest element\
    \ and shift it one unit to the right\n            Float newMax = number - 1;\n\
    \            // Iterate over the numbers again, dividing each number by its new\
    \ unit\n            for (Float origNumber : numbers) {\n                // Divide\
    \ each number by the new unit\n                rescaledNumbers.add(origNumber\
    \ / newMax);\n                // Store the original number, the rescaled number\
    \ and the new unit\n                rescaledNumbers.add(origNumber);\n       \
    \         rescaledNumbers.add(newMax);\n                rescaledNumbers.add(newMin);\n\
    \            }\n        }\n        // Return the rescaled numbers list\n     \
    \   return rescaledNumbers;\nreturn new ArrayList<Float>(Arrays.asList());\n \
    \   }\n    public static void main(String[] args) {\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)1.0f)))));\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f, (float)4.0f, (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp794y0jw_.java:37: error: unreachable statement\nreturn new ArrayList<Float>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        ArrayList<Float> result =\
    \ new ArrayList<>();\n        // Scale the numbers down to the unit interval\n\
    \        double minValue = numbers.get(0).toDouble();\n        double maxValue\
    \ = numbers.get(numbers.size() - 1).toDouble();\n        for (int i = 0; i < numbers.size();\
    \ i++) {\n            result.add(numbers.get(i) / maxValue - minValue);\n    \
    \    }\n        return result;\nreturn new ArrayList<Float>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)1.0f)))));\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f, (float)4.0f, (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpeljdikyd.java:16: error: cannot find symbol\n        double minValue\
    \ = numbers.get(0).toDouble();\n                                        ^\n  symbol:\
    \   method toDouble()\n  location: class Float\n/tmp/tmpeljdikyd.java:17: error:\
    \ cannot find symbol\n        double maxValue = numbers.get(numbers.size() - 1).toDouble();\n\
    \                                                         ^\n  symbol:   method\
    \ toDouble()\n  location: class Float\n/tmp/tmpeljdikyd.java:19: error: no suitable\
    \ method found for add(double)\n            result.add(numbers.get(i) / maxValue\
    \ - minValue);\n                  ^\n    method Collection.add(Float) is not applicable\n\
    \      (argument mismatch; double cannot be converted to Float)\n    method List.add(Float)\
    \ is not applicable\n      (argument mismatch; double cannot be converted to Float)\n\
    \    method AbstractCollection.add(Float) is not applicable\n      (argument mismatch;\
    \ double cannot be converted to Float)\n    method AbstractList.add(Float) is\
    \ not applicable\n      (argument mismatch; double cannot be converted to Float)\n\
    \    method ArrayList.add(Float) is not applicable\n      (argument mismatch;\
    \ double cannot be converted to Float)\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        ArrayList<Float> result =\
    \ new ArrayList<>();\n\n        for (int i = 0; i < numbers.size(); ++i) {\n \
    \           Float num = numbers.get(i);\n            double rangeMin = rangeMin(num);\n\
    \            double rangeMax = rangeMax(num);\n            if (rangeMin > 0) //\
    \ if rangeMin is non-zero\n                result.add(0.0f - num / rangeMax *\
    \ 1.0f);\n            else // if rangeMin is zero\n                result.add(0.0f);\n\
    \        }\n        return result;\nreturn new ArrayList<Float>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)1.0f)))));\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f, (float)4.0f, (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpb8c8s4v_.java:18: error: cannot find symbol\n            double\
    \ rangeMin = rangeMin(num);\n                              ^\n  symbol:   method\
    \ rangeMin(Float)\n  location: class Problem\n/tmp/tmpb8c8s4v_.java:19: error:\
    \ cannot find symbol\n            double rangeMax = rangeMax(num);\n         \
    \                     ^\n  symbol:   method rangeMax(Float)\n  location: class\
    \ Problem\n/tmp/tmpb8c8s4v_.java:21: error: no suitable method found for add(double)\n\
    \                result.add(0.0f - num / rangeMax * 1.0f);\n                 \
    \     ^\n    method Collection.add(Float) is not applicable\n      (argument mismatch;\
    \ double cannot be converted to Float)\n    method List.add(Float) is not applicable\n\
    \      (argument mismatch; double cannot be converted to Float)\n    method AbstractCollection.add(Float)\
    \ is not applicable\n      (argument mismatch; double cannot be converted to Float)\n\
    \    method AbstractList.add(Float) is not applicable\n      (argument mismatch;\
    \ double cannot be converted to Float)\n    method ArrayList.add(Float) is not\
    \ applicable\n      (argument mismatch; double cannot be converted to Float)\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        ArrayList<Float> newNumbers\
    \ = new ArrayList<>();\n        Float smallestNumber = numbers.get(0); // store\
    \ the first number, as we will use it for the transformation\n        // iterate\
    \ through the list, starting with the second number (the smallest number)\n  \
    \      for (Float number : numbers) {\n            // if the current number is\
    \ smaller than the smallest number, store it\n            if (number < smallestNumber)\
    \ {\n                smallestNumber = number;\n            }\n            // if\
    \ the current number is the smallest number, just add the current number\n   \
    \         if (number == smallestNumber) {\n                newNumbers.add(number);\n\
    \            }\n            // otherwise, multiply it by 10 and then divide it\
    \ by the current number\n            else {\n                newNumbers.add(smallestNumber\
    \ * 10f / number);\n            }\n        }\n        return newNumbers;\nreturn\
    \ new ArrayList<Float>(Arrays.asList());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)2.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)1.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f, (float)49.9f)))).equals((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.25f,\
    \ (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfugiykbi.java:32: error: unreachable statement\nreturn new ArrayList<Float>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        return numbers.stream().map(number\
    \ -> Math.max(0, Math.min(number, 1))).collect(Collectors.toCollection(ArrayList::new));\n\
    return new ArrayList<Float>(Arrays.asList());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)2.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)1.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f, (float)49.9f)))).equals((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.25f,\
    \ (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjoqz0a06.java:15: error: unreachable statement\nreturn new ArrayList<Float>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        if (numbers.size() <= 1)\
    \ {\n            return numbers;\n        }\n        ArrayList<Float> rescaled\
    \ = new ArrayList<>();\n        for (Float f : numbers) {\n            rescaled.add(f);\n\
    \        }\n        float minValue = rescaled.get(0);\n        float maxValue\
    \ = rescaled.get(0);\n        float scale = (maxValue - minValue) / rescaled.size();\n\
    \        boolean first = true;\n        for (float f : rescaled) {\n         \
    \   if (first) {\n                first = false;\n                minValue = 0;\n\
    \            }\n            else {\n                minValue = f;\n          \
    \  }\n            maxValue = f;\n            rescaled.add((minValue + maxValue)\
    \ / 2);\n            rescaled.add((minValue - maxValue) / 2);\n        }\n   \
    \     return rescaled;\nreturn new ArrayList<Float>(Arrays.asList());\n    }\n\
    \    public static void main(String[] args) {\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)2.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)1.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f, (float)49.9f)))).equals((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.25f,\
    \ (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpsjl8zziq.java:38: error: unreachable statement\nreturn new ArrayList<Float>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        ArrayList<Float> result =\
    \ new ArrayList<>();\n        ArrayList<Float> scale = new ArrayList<>();\n  \
    \      for (float n : numbers) {\n            float max = numbers.stream().max().getAsFloat();\n\
    \            float min = numbers.stream().min().getAsFloat();\n            float\
    \ scale = (max - min) / (n - 1);\n            result.add(n * scale);\n       \
    \     scale.add(scale);\n        }\n        return result;\nreturn new ArrayList<Float>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)1.0f)))));\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f, (float)4.0f, (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxhxwi26x.java:17: error: method max in interface Stream<T> cannot\
    \ be applied to given types;\n            float max = numbers.stream().max().getAsFloat();\n\
    \                                        ^\n  required: Comparator<? super Float>\n\
    \  found: no arguments\n  reason: actual and formal argument lists differ in length\n\
    \  where T is a type-variable:\n    T extends Object declared in interface Stream\n\
    /tmp/tmpxhxwi26x.java:18: error: method min in interface Stream<T> cannot be applied\
    \ to given types;\n            float min = numbers.stream().min().getAsFloat();\n\
    \                                        ^\n  required: Comparator<? super Float>\n\
    \  found: no arguments\n  reason: actual and formal argument lists differ in length\n\
    \  where T is a type-variable:\n    T extends Object declared in interface Stream\n\
    /tmp/tmpxhxwi26x.java:19: error: variable scale is already defined in method rescaleToUnit(ArrayList<Float>)\n\
    \            float scale = (max - min) / (n - 1);\n                  ^\n/tmp/tmpxhxwi26x.java:21:\
    \ error: float cannot be dereferenced\n            scale.add(scale);\n       \
    \          ^\n4 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        int size = numbers.size();\n\
    \        int maxValue = numbers.get(0); //largest value will be used as base for\
    \ transformation\n        if (size <= 1) return numbers; // nothing to do\n  \
    \      if (size == 2) return numbers; // only two values, nothing to do\n    \
    \    int largestInList = findLargestInList(numbers);\n        if (largestInList\
    \ == -1) return numbers;\n        ArrayList<Float> scaled = new ArrayList<Float>(numbers.size());\n\
    \        scaled.add(0.0f);\n        for (int index = 0; index < numbers.size()\
    \ - 1; index++) {\n            if (numbers.get(index) != maxValue) {\n       \
    \         scaled.add(numbers.get(index) * maxValue / largestInList);\n       \
    \     } else if (numbers.get(index) == maxValue) {\n                scaled.add(0.0f);\n\
    \            } else {\n                scaled.add(1.0f);\n            }\n    \
    \    }\n        return scaled;\nreturn new ArrayList<Float>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)1.0f)))));\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f, (float)4.0f, (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvh9oxb8e.java:15: error: incompatible types: Float cannot be converted\
    \ to int\n        int maxValue = numbers.get(0); //largest value will be used\
    \ as base for transformation\n                                  ^\n/tmp/tmpvh9oxb8e.java:18:\
    \ error: cannot find symbol\n        int largestInList = findLargestInList(numbers);\n\
    \                            ^\n  symbol:   method findLargestInList(ArrayList<Float>)\n\
    \  location: class Problem\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        float min = Float.MAX_VALUE;\n\
    \        float max = Float.MIN_VALUE;\n        for (Float x : numbers) {\n   \
    \         min = Math.min(min, x);\n            max = Math.max(max, x);\n     \
    \   }\n        // Now we map all the values to [0,1)\n        ArrayList<Float>\
    \ result = new ArrayList<Float>(numbers.size());\n        for (Float x : numbers)\
    \ {\n            result.add(x / min - .5f);\n        }\n        return result;\n\
    return new ArrayList<Float>(Arrays.asList());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)2.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)1.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f, (float)49.9f)))).equals((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.25f,\
    \ (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwlno9b9v.java:26: error: unreachable statement\nreturn new ArrayList<Float>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        if (numbers.isEmpty()) {\n\
    \            return numbers;\n        }\n        Float largest = numbers.get(0);\n\
    \        numbers.remove(0);\n        Float smallest = numbers.get(0);\n      \
    \  numbers.remove(0);\n        for(Float number : numbers) {\n            if (number\
    \ > largest) {\n                largest = number;\n            } else if (number\
    \ < smallest) {\n                smallest = number;\n            }\n        }\n\
    \        ArrayList<Float> newNumbers = new ArrayList<>();\n        for(Float number\
    \ : numbers) {\n            newNumbers.add(number * (largest - smallest) + smallest);\n\
    \        }\n        return newNumbers;\nreturn new ArrayList<Float>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)1.0f)))));\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f, (float)4.0f, (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpc71qgndh.java:33: error: unreachable statement\nreturn new ArrayList<Float>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        int size = numbers.size();\n\
    \        float min = getMin(numbers);\n        float max = getMax(numbers);\n\
    \        float range = max - min;\n        if (range == 0) {\n            ArrayList<Float>\
    \ resultList = new ArrayList<Float>();\n            resultList.add(min);\n   \
    \         return resultList;\n        }\n        float scale = (float) range /\
    \ 2.0f;\n        ArrayList<Float> resultList = new ArrayList<Float>();\n     \
    \   float newMin = scale * (float)getMin(numbers);\n        float newMax = scale\
    \ * (float)getMax(numbers);\n        for (int i = 0; i < size; i++) {\n      \
    \      resultList.add(numbers.get(i) - newMin);\n        }\n        return resultList;\n\
    return new ArrayList<Float>(Arrays.asList());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)2.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)1.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f, (float)49.9f)))).equals((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.25f,\
    \ (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpo04pjxkx.java:15: error: cannot find symbol\n        float min\
    \ = getMin(numbers);\n                    ^\n  symbol:   method getMin(ArrayList<Float>)\n\
    \  location: class Problem\n/tmp/tmpo04pjxkx.java:16: error: cannot find symbol\n\
    \        float max = getMax(numbers);\n                    ^\n  symbol:   method\
    \ getMax(ArrayList<Float>)\n  location: class Problem\n/tmp/tmpo04pjxkx.java:25:\
    \ error: cannot find symbol\n        float newMin = scale * (float)getMin(numbers);\n\
    \                                      ^\n  symbol:   method getMin(ArrayList<Float>)\n\
    \  location: class Problem\n/tmp/tmpo04pjxkx.java:26: error: cannot find symbol\n\
    \        float newMax = scale * (float)getMax(numbers);\n                    \
    \                  ^\n  symbol:   method getMax(ArrayList<Float>)\n  location:\
    \ class Problem\n4 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        if (numbers.size() < 2) {\n\
    \            return numbers;\n        }\n        double min = numbers.get(0).doubleValue();\n\
    \        double max = numbers.get(1).doubleValue();\n        // apply the transform\n\
    \        ArrayList<Double> transformed = new ArrayList<>();\n        for (Float\
    \ i : numbers) {\n            double d = i.doubleValue();\n            double\
    \ rescaled = (d - min) / (max - min);\n            transformed.add(rescaled);\n\
    \        }\n        return new ArrayList<Float>(transformed);\nreturn new ArrayList<Float>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)1.0f)))));\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f, (float)4.0f, (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpxavj2rcf.java:26: error: no suitable constructor found for ArrayList(ArrayList<Double>)\n\
    \        return new ArrayList<Float>(transformed);\n               ^\n    constructor\
    \ ArrayList.ArrayList(int) is not applicable\n      (argument mismatch; ArrayList<Double>\
    \ cannot be converted to int)\n    constructor ArrayList.ArrayList(Collection<?\
    \ extends Float>) is not applicable\n      (argument mismatch; ArrayList<Double>\
    \ cannot be converted to Collection<? extends Float>)\nNote: Some messages have\
    \ been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        // Apply linear transform\n\
    \        ArrayList<Float> result = new ArrayList<Float>(numbers);\n        for\
    \ (int i = 0; i < numbers.size(); i++) {\n            result.add(i, (numbers.get(i)\
    \ - min(numbers)) / (max(numbers) - min(numbers)));\n        }\n        return\
    \ result;\nreturn new ArrayList<Float>(Arrays.asList());\n    }\n    public static\
    \ void main(String[] args) {\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)2.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)1.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f, (float)49.9f)))).equals((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.25f,\
    \ (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpgs4zpc08.java:17: error: cannot find symbol\n            result.add(i,\
    \ (numbers.get(i) - min(numbers)) / (max(numbers) - min(numbers)));\n        \
    \                                    ^\n  symbol:   method min(ArrayList<Float>)\n\
    \  location: class Problem\n/tmp/tmpgs4zpc08.java:17: error: cannot find symbol\n\
    \            result.add(i, (numbers.get(i) - min(numbers)) / (max(numbers) - min(numbers)));\n\
    \                                                             ^\n  symbol:   method\
    \ max(ArrayList<Float>)\n  location: class Problem\n/tmp/tmpgs4zpc08.java:17:\
    \ error: cannot find symbol\n            result.add(i, (numbers.get(i) - min(numbers))\
    \ / (max(numbers) - min(numbers)));\n                                        \
    \                                    ^\n  symbol:   method min(ArrayList<Float>)\n\
    \  location: class Problem\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        if (numbers.isEmpty()) return\
    \ numbers;\n        ArrayList<Float> rescaled = new ArrayList<Float>(numbers.size());\n\
    \        for (Float number : numbers) {\n            rescaled.add(Math.min(1,\
    \ Math.max(0, number)));\n        }\n        return rescaled;\nreturn new ArrayList<Float>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)1.0f)))));\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f, (float)4.0f, (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpp50f9hqa.java:20: error: unreachable statement\nreturn new ArrayList<Float>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        float smallest = numbers.get(0);\
    \ //get the smallest number\n        float largest = numbers.get(numbers.size()-1);\
    \ //get the largest number\n        ArrayList<Float> result = new ArrayList<Float>();\
    \ //create an empty list\n\n        for(int i = 0; i < numbers.size(); i++) {\n\
    \            float value = numbers.get(i); //get the current number\n        \
    \    float scale = (largest - smallest) / (value + smallest); //calculate the\
    \ scale\n            result.add(value * scale); //apply the scale\n        }\n\
    \        return result; //return the result list\nreturn new ArrayList<Float>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)1.0f)))));\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f, (float)4.0f, (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2hoh8qnz.java:24: error: unreachable statement\nreturn new ArrayList<Float>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        float min = minOf(numbers);\n\
    \        float max = maxOf(numbers);\n        ArrayList<Float> rescaled = new\
    \ ArrayList<Float>(numbers);\n        for (float number : numbers) {\n       \
    \     rescaled.add(max - number * max + min);\n        }\n        return rescaled;\n\
    return new ArrayList<Float>(Arrays.asList());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)2.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)1.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f, (float)49.9f)))).equals((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.25f,\
    \ (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp17jnzpsf.java:14: error: cannot find symbol\n        float min\
    \ = minOf(numbers);\n                    ^\n  symbol:   method minOf(ArrayList<Float>)\n\
    \  location: class Problem\n/tmp/tmp17jnzpsf.java:15: error: cannot find symbol\n\
    \        float max = maxOf(numbers);\n                    ^\n  symbol:   method\
    \ maxOf(ArrayList<Float>)\n  location: class Problem\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        ArrayList<Float> result =\
    \ new ArrayList<Float>();\n        float max = Collections.max(numbers);\n   \
    \     float min = Collections.min(numbers);\n        float range = max - min;\n\
    \        result.add((range == 0) ? 0.0 : range);\n        for (Float f : numbers)\
    \ {\n            result.add((f - min) / range);\n        }\n        return result;\n\
    return new ArrayList<Float>(Arrays.asList());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)2.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)1.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f, (float)49.9f)))).equals((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.25f,\
    \ (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_pp_qxov.java:18: error: no suitable method found for add(double)\n\
    \        result.add((range == 0) ? 0.0 : range);\n              ^\n    method\
    \ Collection.add(Float) is not applicable\n      (argument mismatch; double cannot\
    \ be converted to Float)\n    method List.add(Float) is not applicable\n     \
    \ (argument mismatch; double cannot be converted to Float)\n    method AbstractCollection.add(Float)\
    \ is not applicable\n      (argument mismatch; double cannot be converted to Float)\n\
    \    method AbstractList.add(Float) is not applicable\n      (argument mismatch;\
    \ double cannot be converted to Float)\n    method ArrayList.add(Float) is not\
    \ applicable\n      (argument mismatch; double cannot be converted to Float)\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        int size = numbers.size();\n\
    \        ArrayList<Float> result = new ArrayList<Float>(numbers);\n        while\
    \ (result.size() < size) result.add(0.0f);\n        float minValue = result.get(0);\n\
    \        float maxValue = result.get(0);\n        for (int i = 0; i < size; i++)\
    \ {\n            float val = result.get(i);\n            minValue = Math.min(minValue,\
    \ val);\n            maxValue = Math.max(maxValue, val);\n            result.set(i,\
    \ val / (maxValue - minValue));\n        }\n        return result;\nreturn new\
    \ ArrayList<Float>(Arrays.asList());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)2.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)1.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f, (float)49.9f)))).equals((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.25f,\
    \ (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1y2yw560.java:26: error: unreachable statement\nreturn new ArrayList<Float>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        ArrayList<Float> newNumbers\
    \ = new ArrayList<Float>(numbers);\n        Collections.sort(newNumbers);\n  \
    \      int smallest = Collections.min(newNumbers);\n        int largest = Collections.max(newNumbers);\n\
    \        double scale = largest / smallest;\n        for(Float number : newNumbers)\
    \ {\n            number *= scale;\n        }\n        return newNumbers;\nreturn\
    \ new ArrayList<Float>(Arrays.asList());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)2.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)1.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f, (float)49.9f)))).equals((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.25f,\
    \ (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0yzkrgum.java:16: error: incompatible types: no instance(s) of\
    \ type variable(s)  exist so that T conforms to int\n        int smallest = Collections.min(newNumbers);\n\
    \                                      ^\n  where T is a type-variable:\n    T\
    \ extends Object,Comparable<? super T> declared in method <T>min(Collection<?\
    \ extends T>)\n/tmp/tmp0yzkrgum.java:17: error: incompatible types: no instance(s)\
    \ of type variable(s)  exist so that T conforms to int\n        int largest =\
    \ Collections.max(newNumbers);\n                                     ^\n  where\
    \ T is a type-variable:\n    T extends Object,Comparable<? super T> declared in\
    \ method <T>max(Collection<? extends T>)\n/tmp/tmp0yzkrgum.java:20: error: incompatible\
    \ types: double cannot be converted to Float\n            number *= scale;\n \
    \                     ^\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        // The linear transform that\
    \ scales each element of the list from [min, max] to\n        // [0 , 1]\n   \
    \     Function<Float, Float> scale = (x) -> {\n            if (x < min || x >\
    \ max) return 0.0f;\n            return ((float) (x-min) / (max-min)) * (1.0f-min);\n\
    \        };\n        // A function that maps each element of the list to an integer.\n\
    \        // >>> rescaleToInt([1.0, 2.0, 3.0, 4.0, 5.0])\n        // [0, 1, 2,\
    \ 3, 4]\n        Function<Float, Integer> rescaleToInt = (x) -> {\n          \
    \  if (x < min || x > max) return 0;\n            return (int) ((float) (x-min)\
    \ / (max-min));\n        };\n        // Apply the linear transform to the list\n\
    \        ArrayList<Float> rescaled = new ArrayList<>(numbers);\n        for (int\
    \ i = 0; i < numbers.size(); i++) {\n            rescaled.set(i, rescale(rescaled.get(i),\
    \ scale));\n        }\n        // And map the list back to a list\n        ArrayList<Integer>\
    \ rescaledInt = new ArrayList<>(rescaled);\n        for (int i = 0; i < numbers.size();\
    \ i++) {\n            rescaledInt.set(i, rescaleToInt(rescaledInt.get(i)));\n\
    \        }\n        return rescaledInt;\nreturn new ArrayList<Float>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)1.0f)))));\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f, (float)4.0f, (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpl3pl8ynr.java:16: error: cannot find symbol\n        Function<Float,\
    \ Float> scale = (x) -> {\n        ^\n  symbol:   class Function\n  location:\
    \ class Problem\n/tmp/tmpl3pl8ynr.java:16: error: lambda expression not expected\
    \ here\n        Function<Float, Float> scale = (x) -> {\n                    \
    \                   ^\n/tmp/tmpl3pl8ynr.java:23: error: cannot find symbol\n \
    \       Function<Float, Integer> rescaleToInt = (x) -> {\n        ^\n  symbol:\
    \   class Function\n  location: class Problem\n/tmp/tmpl3pl8ynr.java:23: error:\
    \ lambda expression not expected here\n        Function<Float, Integer> rescaleToInt\
    \ = (x) -> {\n                                                ^\n/tmp/tmpl3pl8ynr.java:33:\
    \ error: incompatible types: cannot infer type arguments for ArrayList<>\n   \
    \     ArrayList<Integer> rescaledInt = new ArrayList<>(rescaled);\n          \
    \                                            ^\n    reason: inference variable\
    \ E has incompatible bounds\n      equality constraints: Integer\n      lower\
    \ bounds: Float\n  where E is a type-variable:\n    E extends Object declared\
    \ in class ArrayList\n/tmp/tmpl3pl8ynr.java:35: error: cannot find symbol\n  \
    \          rescaledInt.set(i, rescaleToInt(rescaledInt.get(i)));\n           \
    \                    ^\n  symbol:   method rescaleToInt(Integer)\n  location:\
    \ class Problem\n/tmp/tmpl3pl8ynr.java:37: error: incompatible types: ArrayList<Integer>\
    \ cannot be converted to ArrayList<Float>\n        return rescaledInt;\n     \
    \          ^\n7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        // Find min and max values\n\
    \        float max = numbers.stream().max(Float::compareTo).orElse(Float.MIN_VALUE);\n\
    \        float min = numbers.stream().min(Float::compareTo).orElse(Float.MAX_VALUE);\n\
    \        // Normalize list\n        List<Float> rescaled = new ArrayList<Float>(numbers);\n\
    \        rescaled.removeIf(v -> v == Float.MAX_VALUE);\n        rescaled.removeIf(v\
    \ -> v == Float.MIN_VALUE);\n        rescaled.removeIf(v -> v == 0);\n       \
    \ rescaled.removeIf(v -> v == 1);\n        rescaled.removeIf(v -> v == -1);\n\
    \        rescaled.removeIf(v -> v == -Float.MAX_VALUE);\n        rescaled.removeIf(v\
    \ -> v == -Float.MIN_VALUE);\n        rescaled.removeIf(v -> v == Float.NEGATIVE_INFINITY);\n\
    \        rescaled.removeIf(v -> v == Float.POSITIVE_INFINITY);\n        // Normalize\
    \ list - now rescaled should be in range (0, 1)\n        rescaled.forEach(number\
    \ -> {\n            float x = number - min;\n            rescaled.add(x / max\
    \ - min * max);\n        });\n        return rescaled;\nreturn new ArrayList<Float>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)1.0f)))));\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f, (float)4.0f, (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmprave5gn2.java:33: error: incompatible types: List<Float> cannot\
    \ be converted to ArrayList<Float>\n        return rescaled;\n               ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        ArrayList<Float> result =\
    \ new ArrayList<Float>(numbers);\n        if (result.size() < 2) {\n         \
    \   return result;\n        }\n        float min = result.get(0);\n        float\
    \ max = result.get(0);\n        for (int i = 0; i < result.size() - 1; i++) {\n\
    \            float current = result.get(i);\n            float next = result.get(i\
    \ + 1);\n            min = Math.min(min, current);\n            max = Math.max(max,\
    \ next);\n        }\n        result.remove(0);\n        result.add(0.0);\n   \
    \     result.add(1.0);\n        for (int i = 0; i < result.size() - 1; i++) {\n\
    \            result.set(i, result.get(i) * max - min);\n            result.set(i\
    \ + 1, result.get(i + 1) * min - max);\n        }\n        return result;\nreturn\
    \ new ArrayList<Float>(Arrays.asList());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)2.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)1.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f, (float)49.9f)))).equals((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.25f,\
    \ (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmppkxgxbk8.java:27: error: no suitable method found for add(double)\n\
    \        result.add(0.0);\n              ^\n    method Collection.add(Float) is\
    \ not applicable\n      (argument mismatch; double cannot be converted to Float)\n\
    \    method List.add(Float) is not applicable\n      (argument mismatch; double\
    \ cannot be converted to Float)\n    method AbstractCollection.add(Float) is not\
    \ applicable\n      (argument mismatch; double cannot be converted to Float)\n\
    \    method AbstractList.add(Float) is not applicable\n      (argument mismatch;\
    \ double cannot be converted to Float)\n    method ArrayList.add(Float) is not\
    \ applicable\n      (argument mismatch; double cannot be converted to Float)\n\
    /tmp/tmppkxgxbk8.java:28: error: no suitable method found for add(double)\n  \
    \      result.add(1.0);\n              ^\n    method Collection.add(Float) is\
    \ not applicable\n      (argument mismatch; double cannot be converted to Float)\n\
    \    method List.add(Float) is not applicable\n      (argument mismatch; double\
    \ cannot be converted to Float)\n    method AbstractCollection.add(Float) is not\
    \ applicable\n      (argument mismatch; double cannot be converted to Float)\n\
    \    method AbstractList.add(Float) is not applicable\n      (argument mismatch;\
    \ double cannot be converted to Float)\n    method ArrayList.add(Float) is not\
    \ applicable\n      (argument mismatch; double cannot be converted to Float)\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        ArrayList<Float> rescaled\
    \ = new ArrayList<Float>(numbers);\n        Collections.sort(rescaled);\n    \
    \    float min = rescaled.get(0);\n        float max = rescaled.get(rescaled.size()\
    \ - 1);\n        if (min > 0.0f) {\n            rescaled.set(0, 0.0f);\n     \
    \       rescaled.set(1, 1.0f / min);\n        } else if (max < 1.0f) {\n     \
    \       rescaled.set(0, 1.0f / max);\n            rescaled.set(1, 0.0f);\n   \
    \     } else {\n            rescaled.set(0, 0.0f);\n            rescaled.set(1,\
    \ 1.0f);\n        }\n        return rescaled;\nreturn new ArrayList<Float>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)1.0f)))));\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f, (float)4.0f, (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfk3mbwwf.java:29: error: unreachable statement\nreturn new ArrayList<Float>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        float min = Math.min(numbers.get(0),\
    \ numbers.get(numbers.size()-1));\n        float max = Math.max(numbers.get(0),\
    \ numbers.get(numbers.size()-1));\n        ArrayList<Float> result = new ArrayList<>(numbers);\n\
    \        Collections.reverse(result);\n        result.forEach(number -> number\
    \ *= (max-min) / (float)result.size());\n        return result;\nreturn new ArrayList<Float>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)1.0f)))));\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f, (float)4.0f, (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpso5nqn64.java:20: error: unreachable statement\nreturn new ArrayList<Float>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        // Compute the minimum and\
    \ maximum values\n        float minValue = numbers.isEmpty() ? 0 : numbers.get(0);\
    \ // initialize min to first number\n        float maxValue = numbers.isEmpty()\
    \ ? 1 : numbers.get(1); // initialize max to first number\n        for (float\
    \ n : numbers) {\n            if (n < minValue) minValue = n;\n            if\
    \ (n > maxValue) maxValue = n;\n        }\n        // Find the range of the new\
    \ values\n        float range = (maxValue - minValue) / (numbers.size() - 1);\
    \ // range is based on number of elements\n        // Create the new array\n \
    \       ArrayList<Float> newValues = new ArrayList<Float>();\n        for (float\
    \ n : numbers) {\n            // Calculate the new value\n            float newValue\
    \ = range*(n - minValue) + minValue;\n            newValues.add(newValue);\n \
    \       }\n        return newValues;\nreturn new ArrayList<Float>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)1.0f)))));\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f, (float)4.0f, (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmplcctggzg.java:31: error: unreachable statement\nreturn new ArrayList<Float>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        // First, sort numbers in\
    \ ascending order\n        Arrays.sort(numbers);\n\n        // Now create an array\
    \ that contains min and max values\n        float minValue = numbers.get(0);\n\
    \        float maxValue = numbers.get(0);\n        for (int i = 1; i < numbers.size();\
    \ i++) {\n            float currentMin = numbers.get(i);\n            float currentMax\
    \ = numbers.get(i);\n            if (currentMin < minValue)\n                minValue\
    \ = currentMin;\n            if (currentMax > maxValue)\n                maxValue\
    \ = currentMax;\n        }\n\n        // Rescale numbers to range 0 to 1\n   \
    \     ArrayList<Float> scaledNumbers = new ArrayList<Float>();\n        scaledNumbers.add(minValue);\n\
    \        scaledNumbers.add(maxValue);\n        scaledNumbers = scaledNumbers.stream().map(f\
    \ -> f / minValue).collect(Collectors.toList());\n\n        // Sort scaled numbers\
    \ in ascending order\n        Collections.sort(scaledNumbers);\n        return\
    \ scaledNumbers;\nreturn new ArrayList<Float>(Arrays.asList());\n    }\n    public\
    \ static void main(String[] args) {\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)2.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)1.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f, (float)49.9f)))).equals((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.25f,\
    \ (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp04cunyk6.java:15: error: no suitable method found for sort(ArrayList<Float>)\n\
    \        Arrays.sort(numbers);\n              ^\n    method Arrays.sort(int[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Float> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Float> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Float> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Float> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Float> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Float> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Float> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Float> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\n/tmp/tmp04cunyk6.java:33: error: incompatible types: inference\
    \ variable R has incompatible bounds\n        scaledNumbers = scaledNumbers.stream().map(f\
    \ -> f / minValue).collect(Collectors.toList());\n                           \
    \                                                  ^\n    equality constraints:\
    \ List<Float>\n    upper bounds: ArrayList<Floa"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        // sort numbers by their\
    \ absolute value\n        numbers.sort((a, b) -> Math.abs(a) - Math.abs(b));\n\
    \        // scale numbers between 0 and 1\n        numbers.parallelStream().map(n\
    \ -> n / numbers.size()).forEach(n -> numbers.add(n));\n        return numbers;\n\
    return new ArrayList<Float>(Arrays.asList());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)2.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)1.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f, (float)49.9f)))).equals((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.25f,\
    \ (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzmvedvue.java:15: error: incompatible types: bad return type in\
    \ lambda expression\n        numbers.sort((a, b) -> Math.abs(a) - Math.abs(b));\n\
    \                                           ^\n    possible lossy conversion from\
    \ float to int\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        if (numbers.isEmpty()) {\n\
    \            throw new IllegalArgumentException(\"cannot rescale to zero, empty\
    \ input\");\n        }\n        if (numbers.size() < 2) {\n            throw new\
    \ IllegalArgumentException(\"cannot rescale to zero, input too small\");\n   \
    \     }\n        ArrayList<Float> result = new ArrayList<>(numbers);\n       \
    \ Collections.sort(result);\n        float smallest = result.get(0);\n       \
    \ float largest = result.get(1);\n        float length = numbers.size();\n   \
    \     while (smallest > 0 && largest < 1) {\n            float temp = smallest\
    \ / length; // get this value out of range\n            result.set(result.indexOf(temp),\
    \ temp); // store this value in result\n            result.remove(temp);\n   \
    \         length = length - 1;\n        }\n        return result;\nreturn new\
    \ ArrayList<Float>(Arrays.asList());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)2.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)1.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f, (float)49.9f)))).equals((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.25f,\
    \ (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpgtcjafxv.java:32: error: unreachable statement\nreturn new ArrayList<Float>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        Arrays.sort(numbers);\n \
    \       float maxNumber=numbers.get(numbers.size()-1);\n        float minNumber=numbers.get(0);\n\
    \        if(minNumber>maxNumber){\n            float temp = minNumber;\n     \
    \       minNumber = maxNumber;\n            maxNumber = temp;\n        }\n   \
    \     ArrayList<Float> rescaled=new ArrayList<Float>();\n        for(float num:numbers){\n\
    \            rescaled.add(num-minNumber);\n        }\n        rescaled.add(1);\n\
    \        rescaled.add(0);\n        return rescaled;\nreturn new ArrayList<Float>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)1.0f)))));\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f, (float)4.0f, (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpekz1_e0x.java:14: error: no suitable method found for sort(ArrayList<Float>)\n\
    \        Arrays.sort(numbers);\n              ^\n    method Arrays.sort(int[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Float> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Float> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Float> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Float> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Float> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Float> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Float> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Float> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\n/tmp/tmpekz1_e0x.java:26: error: no suitable method found for add(int)\n\
    \        rescaled.add(1);\n                ^\n    method Collection.add(Float)\
    \ is not applicable\n      (argument mismatch; int cannot be converted to Float)\n\
    \    method List.add(Float) is not applicable\n      (argument mismatch; int cannot\
    \ be converted to Float)\n    method Abstra"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        Arrays.sort(numbers);\n \
    \       float min = numbers.stream().min().getAsFloat();\n        float max =\
    \ numbers.stream().max().getAsFloat();\n        double newMin = (double) min;\n\
    \        double newMax = (double) max;\n        double newMinVal = min / newMax;\n\
    \        double newMaxVal = max / newMin;\n        ArrayList<Float> newNumbers\
    \ = new ArrayList<>();\n        for (float num : numbers) {\n            newNumbers.add(((double)\
    \ num - newMinVal) * (newMaxVal - newMinVal) / (newMax - newMin) + newMinVal);\n\
    \        }\n        return newNumbers;\nreturn new ArrayList<Float>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)1.0f)))));\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f, (float)4.0f, (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvt2f3cry.java:14: error: no suitable method found for sort(ArrayList<Float>)\n\
    \        Arrays.sort(numbers);\n              ^\n    method Arrays.sort(int[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Float> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Float> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Float> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Float> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Float> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Float> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Float> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Float> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\n/tmp/tmpvt2f3cry.java:15: error: method min in interface Stream<T>\
    \ cannot be applied to given types;\n        float min = numbers.stream().min().getAsFloat();\n\
    \                                    ^\n  required: Comparator<? super Float>\n\
    \  found: no arguments\n  reason: actual and formal argument lists differ in length\n\
    \  where T is a type-variable:\n "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        ArrayList<Float> result =\
    \ new ArrayList<>();\n        // Find the minimum and maximum of the list\n  \
    \      Float min = Math.min(numbers.get(0), numbers.get(1));\n        Float max\
    \ = Math.max(numbers.get(0), numbers.get(1));\n        // Find the scale factor\
    \ between min and max\n        Float scale = (max - min) / (numbers.get(2) - numbers.get(1));\n\
    \        // Apply the scale to each number\n        for (Float number : numbers)\
    \ {\n            result.add(number * scale);\n        }\n        return result;\n\
    return new ArrayList<Float>(Arrays.asList());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)2.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)1.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f, (float)49.9f)))).equals((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.25f,\
    \ (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpn77u7ons.java:25: error: unreachable statement\nreturn new ArrayList<Float>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        if (numbers.isEmpty()) return\
    \ new ArrayList<Float>();\n        numbers.sort((a, b) -> {\n            int r\
    \ = Float.compare(a, b);\n            if (r != 0) {\n                // Reverse\
    \ order if numbers are equal.\n                return -r;\n            }\n   \
    \         return 0;\n        });\n        float largest = numbers.get(0);\n  \
    \      float smallest = numbers.get(0);\n        for (float number : numbers)\
    \ {\n            if (number > largest) {\n                largest = number;\n\
    \            }\n            if (number < smallest) {\n                smallest\
    \ = number;\n            }\n        }\n        ArrayList<Float> result = new ArrayList<>(numbers.size());\n\
    \        double smallestInUnit = (double) smallest / largest;\n        double\
    \ unit = (double) smallestInUnit;\n        // If smallest is 0, set smallest to\
    \ 1.\n        if (smallestInUnit == 0) {\n            smallestInUnit = 1;\n  \
    \          unit = 1;\n        }\n        for (int i = 0; i < numbers.size(); i++)\
    \ {\n            float number = numbers.get(i);\n            double converted\
    \ = unit * number;\n            result.add(converted / smallestInUnit);\n    \
    \    }\n        return result;\nreturn new ArrayList<Float>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)1.0f)))));\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f, (float)4.0f, (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfp6cw34p.java:44: error: no suitable method found for add(double)\n\
    \            result.add(converted / smallestInUnit);\n                  ^\n  \
    \  method Collection.add(Float) is not applicable\n      (argument mismatch; double\
    \ cannot be converted to Float)\n    method List.add(Float) is not applicable\n\
    \      (argument mismatch; double cannot be converted to Float)\n    method AbstractCollection.add(Float)\
    \ is not applicable\n      (argument mismatch; double cannot be converted to Float)\n\
    \    method AbstractList.add(Float) is not applicable\n      (argument mismatch;\
    \ double cannot be converted to Float)\n    method ArrayList.add(Float) is not\
    \ applicable\n      (argument mismatch; double cannot be converted to Float)\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        if (numbers.size() < 2) {\n\
    \            return numbers;\n        }\n\n        ArrayList<Float> results =\
    \ new ArrayList<Float>();\n        double minValue = numbers.get(0);\n       \
    \ double maxValue = numbers.get(0);\n        for (Float f : numbers) {\n     \
    \       if (f > maxValue) {\n                maxValue = f;\n            } else\
    \ if (f < minValue) {\n                minValue = f;\n            }\n        }\n\
    \n        double scale = (maxValue - minValue) / (double) numbers.size();\n  \
    \      for (Float f : numbers) {\n            results.add(f - minValue * scale);\n\
    \        }\n\n        return results;\nreturn new ArrayList<Float>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)1.0f)))));\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f, (float)4.0f, (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpm6elr4sj.java:31: error: no suitable method found for add(double)\n\
    \            results.add(f - minValue * scale);\n                   ^\n    method\
    \ Collection.add(Float) is not applicable\n      (argument mismatch; double cannot\
    \ be converted to Float)\n    method List.add(Float) is not applicable\n     \
    \ (argument mismatch; double cannot be converted to Float)\n    method AbstractCollection.add(Float)\
    \ is not applicable\n      (argument mismatch; double cannot be converted to Float)\n\
    \    method AbstractList.add(Float) is not applicable\n      (argument mismatch;\
    \ double cannot be converted to Float)\n    method ArrayList.add(Float) is not\
    \ applicable\n      (argument mismatch; double cannot be converted to Float)\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        List<Float> result = new\
    \ ArrayList<Float>(numbers);\n        Collections.sort(result);\n        float\
    \ minVal = result.stream().min().getAsFloat();\n        float maxVal = result.stream().max().getAsFloat();\n\
    \        result.stream().map(val -> val * (maxVal - minVal) / maxVal + minVal).forEach(val\
    \ -> result.add(val));\n        return result;\nreturn new ArrayList<Float>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)1.0f)))));\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f, (float)4.0f, (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5hx2uz98.java:16: error: method min in interface Stream<T> cannot\
    \ be applied to given types;\n        float minVal = result.stream().min().getAsFloat();\n\
    \                                      ^\n  required: Comparator<? super Float>\n\
    \  found: no arguments\n  reason: actual and formal argument lists differ in length\n\
    \  where T is a type-variable:\n    T extends Object declared in interface Stream\n\
    /tmp/tmp5hx2uz98.java:17: error: method max in interface Stream<T> cannot be applied\
    \ to given types;\n        float maxVal = result.stream().max().getAsFloat();\n\
    \                                      ^\n  required: Comparator<? super Float>\n\
    \  found: no arguments\n  reason: actual and formal argument lists differ in length\n\
    \  where T is a type-variable:\n    T extends Object declared in interface Stream\n\
    /tmp/tmp5hx2uz98.java:19: error: incompatible types: List<Float> cannot be converted\
    \ to ArrayList<Float>\n        return result;\n               ^\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        // Your code here\n     \
    \   ArrayList<Float> rescaled = new ArrayList<>();\n        Iterator<Float> it\
    \ = numbers.iterator();\n        float x = it.next();\n        while (it.hasNext())\
    \ {\n            rescaled.add(x / ((Float)it.next()));\n        }\n        rescaled.remove(rescaled.size()\
    \ - 1);\n        return rescaled;\nreturn new ArrayList<Float>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)1.0f)))));\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f, (float)4.0f, (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpal00ogf1.java:23: error: unreachable statement\nreturn new ArrayList<Float>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        ArrayList<Float> rescaled\
    \ = new ArrayList<Float>(numbers);\n        rescaled.remove(rescaled.size() -\
    \ 1);\n        rescaled.remove(rescaled.size() - 1);\n        rescaled.remove(rescaled.size()\
    \ - 1);\n        rescaled.remove(rescaled.size() - 1);\n        rescaled.remove(rescaled.size()\
    \ - 1);\n        rescaled.remove(rescaled.size() - 1);\n        rescaled.remove(rescaled.size()\
    \ - 1);\n        rescaled.remove(rescaled.size() - 1);\n        rescaled.remove(rescaled.size()\
    \ - 1);\n        rescaled.remove(rescaled.size() - 1);\n        rescaled.remove(rescaled.size()\
    \ - 1);\n        rescaled.remove(rescaled.size() - 1);\n        rescaled.remove(rescaled.size()\
    \ - 1);\n        rescaled.remove(rescaled.size() - 1);\n        rescaled.remove(rescaled.size()\
    \ - 1);\n        rescaled.remove(rescaled.size() - 1);\n        rescaled.remove(rescaled.size()\
    \ - 1);\n        rescaled.remove(rescaled.size() - 1);\n        rescaled.remove(rescaled.size()\
    \ - 1);\n        rescaled.remove(rescaled.size() - 1);\n        rescaled.remove(rescaled.size()\
    \ - 1);\n        rescaled.remove(rescaled.size() - 1);\n        rescaled.remove(rescaled.size()\
    \ - 1);\n        rescaled.remove(rescaled.size() - 1);\n        rescaled.remove(rescaled.size()\
    \ - 1);\n        rescaled.remove(rescaled.size() - 1);\n        rescaled.remove(rescaled.size()\
    \ - 1);\n        rescaled.remove(rescaled.size() - 1);\n        rescaled.remove(rescaled.size()\
    \ - 1);\n        rescaled.remove(rescaled.size() - 1);\n        rescaled.remove(rescaled.size()\
    \ - 1);\n        rescaled.remove(rescaled.size() - 1);\n        rescaled.remove(rescaled.size()\
    \ - 1);\n        rescaled.remove(rescaled.size() - 1);\n        rescaled.remove(rescaled.size()\
    \ - 1);\n        rescaled.remove(rescaled.size() - 1);\n        rescaled.remove(rescaled.size()\
    \ - 1);\n        rescaled.remove(rescaled.size() - 1);\n        rescaled.remove(rescaled.size()\
    \ - 1);\n        rescaled.remove(rescaled.size() - 1);\n        rescaled.remove(rescaled.size()\
    \ - 1);\n        rescaled.remove(rescaled.size() - 1);\n        rescaled.remove(rescaled.size()\
    \ - 1);\n        rescaled.remove(rescaled.size() - 1);\n        rescaled.remove(rescaled.size()\
    \ - 1);\n        rescaled.remove(rescaled.size() - 1);\n        rescaled.remove(rescaled.size()\
    \ - 1);\n        rescaled.remove(rescaled.size() - 1);\n        rescaled.remove(rescaled.size()\
    \ - 1);\n        rescaled.remove(rescaled.size() - 1);\nreturn new ArrayList<Float>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)1.0f)))));\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f, (float)4.0f, (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.ArrayIndexOutOfBoundsException:\
    \ -1\n\tat java.util.ArrayList.elementData(ArrayList.java:422)\n\tat java.util.ArrayList.remove(ArrayList.java:499)\n\
    \tat Problem.rescaleToUnit(tmps9h34xgc.java:17)\n\tat Problem.main(tmps9h34xgc.java:68)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        ArrayList<Float> unit = new\
    \ ArrayList<>();\n\n        for (Float number : numbers) {\n            if (number\
    \ != 0) {\n                unit.add(number);\n            }\n        }\n\n   \
    \     return unit;\nreturn new ArrayList<Float>(Arrays.asList());\n    }\n   \
    \ public static void main(String[] args) {\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)2.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)1.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f, (float)49.9f)))).equals((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.25f,\
    \ (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6bmcp3ym.java:23: error: unreachable statement\nreturn new ArrayList<Float>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        double min = Collections.min(numbers);\n\
    \        double max = Collections.max(numbers);\n        if (min == max) {\n \
    \           max = max * 1.01;\n        }\n        if (max < 1.0) {\n         \
    \   max = 1.0f;\n        }\n        if (min > 0.0) {\n            min = 0.0f;\n\
    \        }\n        ArrayList<Float> scaled = new ArrayList<Float>();\n      \
    \  for (Float number : numbers) {\n            scaled.add(Float.valueOf((float)\
    \ (number - min) / (max - min)));\n        }\n        return scaled;\nreturn new\
    \ ArrayList<Float>(Arrays.asList());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)2.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)1.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f, (float)49.9f)))).equals((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.25f,\
    \ (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfkul5fwq.java:27: error: no suitable method found for valueOf(double)\n\
    \            scaled.add(Float.valueOf((float) (number - min) / (max - min)));\n\
    \                            ^\n    method Float.valueOf(String) is not applicable\n\
    \      (argument mismatch; double cannot be converted to String)\n    method Float.valueOf(float)\
    \ is not applicable\n      (argument mismatch; possible lossy conversion from\
    \ double to float)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        float minNum = Collections.min(numbers);\n\
    \        float maxNum = Collections.max(numbers);\n\n        float range = (maxNum\
    \ - minNum);\n        if (range == 0) {\n            return numbers;\n       \
    \ }\n\n        int scaledSize = (int) Math.ceil(numbers.size() / 2.0f);\n\n  \
    \      ArrayList<Float> scaled = new ArrayList<Float>(scaledSize);\n        for\
    \ (Float num : numbers) {\n            scaled.add(num - minNum / range);\n   \
    \     }\n        return scaled;\nreturn new ArrayList<Float>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)1.0f)))));\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f, (float)4.0f, (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpuwiq4sbb.java:29: error: unreachable statement\nreturn new ArrayList<Float>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        ArrayList<Float> result =\
    \ new ArrayList<Float>(numbers);\n        Collections.sort(result); // ascending\
    \ order\n        int n = result.size(); // number of elements\n        float min\
    \ = (float) result.get(0); // smallest element\n        float max = (float) result.get(n\
    \ - 1); // largest element\n        float inc = max - min; // increment\n    \
    \    float scale = 1.0f / inc; // scale\n        Collections.reverse(result);\
    \ // descending order\n        for (int i = 0; i < n; i++) {\n            result.set(i,\
    \ result.get(i) * scale);\n        }\n        return result;\nreturn new ArrayList<Float>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)1.0f)))));\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f, (float)4.0f, (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp10jo40_5.java:26: error: unreachable statement\nreturn new ArrayList<Float>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        ArrayList<Float> newNumbers\
    \ = new ArrayList<>();\n        numbers.sort((f1, f2) -> Float.compare(f2, f1));\n\
    \        double min = numbers.get(0);\n        double max = numbers.get(0);\n\
    \        for (Float number : numbers) {\n            newNumbers.add((float) (((number\
    \ - min) / (max - min)) * (1.0)));\n            min = Math.min(number, min);\n\
    \            max = Math.max(number, max);\n        }\n        return newNumbers;\n\
    return new ArrayList<Float>(Arrays.asList());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)2.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)1.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f, (float)49.9f)))).equals((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.25f,\
    \ (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwbz4moe1.java:24: error: unreachable statement\nreturn new ArrayList<Float>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        float min = numbers.get(0),\
    \ max = numbers.get(0);\n        for (int i = 1; i < numbers.size(); i++) {\n\
    \            min = Math.min(min, numbers.get(i));\n            max = Math.max(max,\
    \ numbers.get(i));\n        }\n        ArrayList<Float> rescaledNumbers = new\
    \ ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n       \
    \     rescaledNumbers.add(numbers.get(i) / max);\n        }\n        return rescaledNumbers;\n\
    return new ArrayList<Float>(Arrays.asList());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)2.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)1.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f, (float)49.9f)))).equals((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.25f,\
    \ (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpuz1kwi_g.java:24: error: unreachable statement\nreturn new ArrayList<Float>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        float min = Collections.min(numbers);\n\
    \        float max = Collections.max(numbers);\n        float diff = max - min;\n\
    \        float scaleFactor = diff / (float) numbers.size(); //(diff / numbers.size())\
    \ * (max - min);\n        int newSize = numbers.size();\n        ArrayList result\
    \ = new ArrayList(newSize);\n\n        for (float item : numbers) {\n        \
    \    result.add(scaleFactor * (item - min) + min);\n        }\n        return\
    \ result;\nreturn new ArrayList<Float>(Arrays.asList());\n    }\n    public static\
    \ void main(String[] args) {\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)2.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)1.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f, (float)49.9f)))).equals((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.25f,\
    \ (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmplvfxzxoo.java:25: error: unreachable statement\nreturn new ArrayList<Float>(Arrays.asList());\n\
    ^\nNote: /tmp/tmplvfxzxoo.java uses unchecked or unsafe operations.\nNote: Recompile\
    \ with -Xlint:unchecked for details.\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        numbers.stream().mapToDouble(number\
    \ -> number).forEach(number -> {\n            float min = Math.min(number);\n\
    \            float max = Math.max(number);\n            if (max < min) {\n   \
    \             max = 1.0f;\n            }\n            float scale = (max - min);\n\
    \            number = (number - min) / scale;\n            System.out.println(number);\n\
    \        });\n        return numbers;\nreturn new ArrayList<Float>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)1.0f)))));\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f, (float)4.0f, (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpuvbeh3uy.java:15: error: no suitable method found for min(double)\n\
    \            float min = Math.min(number);\n                            ^\n  \
    \  method Math.min(int,int) is not applicable\n      (actual and formal argument\
    \ lists differ in length)\n    method Math.min(long,long) is not applicable\n\
    \      (actual and formal argument lists differ in length)\n    method Math.min(float,float)\
    \ is not applicable\n      (actual and formal argument lists differ in length)\n\
    \    method Math.min(double,double) is not applicable\n      (actual and formal\
    \ argument lists differ in length)\n/tmp/tmpuvbeh3uy.java:16: error: no suitable\
    \ method found for max(double)\n            float max = Math.max(number);\n  \
    \                          ^\n    method Math.max(int,int) is not applicable\n\
    \      (actual and formal argument lists differ in length)\n    method Math.max(long,long)\
    \ is not applicable\n      (actual and formal argument lists differ in length)\n\
    \    method Math.max(float,float) is not applicable\n      (actual and formal\
    \ argument lists differ in length)\n    method Math.max(double,double) is not\
    \ applicable\n      (actual and formal argument lists differ in length)\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        ArrayList<Float> rescaledNumbers\
    \ = new ArrayList<Float>(numbers);\n\n        float min = Math.min(rescaledNumbers.get(0),\
    \ rescaledNumbers.get(1));\n        float max = Math.max(rescaledNumbers.get(0),\
    \ rescaledNumbers.get(1));\n\n        rescaledNumbers.set(rescaledNumbers.indexOf(max),\
    \ 1);\n        rescaledNumbers.set(rescaledNumbers.indexOf(min), 0);\n\n     \
    \   return rescaledNumbers;\nreturn new ArrayList<Float>(Arrays.asList());\n \
    \   }\n    public static void main(String[] args) {\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)1.0f)))));\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f, (float)4.0f, (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdv8w87jv.java:19: error: no suitable method found for set(int,int)\n\
    \        rescaledNumbers.set(rescaledNumbers.indexOf(max), 1);\n             \
    \          ^\n    method List.set(int,Float) is not applicable\n      (argument\
    \ mismatch; int cannot be converted to Float)\n    method AbstractList.set(int,Float)\
    \ is not applicable\n      (argument mismatch; int cannot be converted to Float)\n\
    \    method ArrayList.set(int,Float) is not applicable\n      (argument mismatch;\
    \ int cannot be converted to Float)\n/tmp/tmpdv8w87jv.java:20: error: no suitable\
    \ method found for set(int,int)\n        rescaledNumbers.set(rescaledNumbers.indexOf(min),\
    \ 0);\n                       ^\n    method List.set(int,Float) is not applicable\n\
    \      (argument mismatch; int cannot be converted to Float)\n    method AbstractList.set(int,Float)\
    \ is not applicable\n      (argument mismatch; int cannot be converted to Float)\n\
    \    method ArrayList.set(int,Float) is not applicable\n      (argument mismatch;\
    \ int cannot be converted to Float)\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        // If there's only one element,\
    \ just return that element as is\n        if (numbers.isEmpty()) return numbers;\n\
    \        // Find min and max of original numbers\n        float min = Collections.min(numbers);\n\
    \        float max = Collections.max(numbers);\n        // Scale numbers to [0,\
    \ 1] interval\n        for (Float number : numbers) number = ((number - min) /\
    \ (max - min)) * 2.0f - 1.0f;\n        // Return scaled array\n        return\
    \ numbers;\nreturn new ArrayList<Float>(Arrays.asList());\n    }\n    public static\
    \ void main(String[] args) {\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)2.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)1.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f, (float)49.9f)))).equals((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.25f,\
    \ (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfw7yt6fu.java:23: error: unreachable statement\nreturn new ArrayList<Float>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        ArrayList<Float> result =\
    \ new ArrayList<>(numbers);\n        if (result.isEmpty()) {\n            throw\
    \ new RuntimeException(\"The input list must contain at least 2 elements\");\n\
    \        }\n        if (result.size() <= 1) {\n            return result;\n  \
    \      }\n        if (result.get(0) > result.get(result.size() - 1)) {\n     \
    \       ArrayList<Float> tmp = new ArrayList<>(result);\n            Collections.reverse(tmp);\n\
    \            result = tmp;\n        }\n        if (result.size() <= 2) {\n   \
    \         throw new RuntimeException(\"The input list must contain at least 3\
    \ or more elements\");\n        }\n        // Compute the scaling factors for\
    \ each element\n        ArrayList<Float> scalesToApplyToAllElements = new ArrayList<>();\n\
    \        for (Float f : result.toArray()) {\n            scalesToApplyToAllElements.add(1.0f\
    \ / f);\n        }\n        // Apply a linear transform to each element, using\
    \ the scaling factors to compute the output values\n        ArrayList<Float> output\
    \ = new ArrayList<>(result.size());\n        for (Float f : result.toArray())\
    \ {\n            Float s = scalesToApplyToAllElements.get(f);\n            output.add(s\
    \ * (f - 0.5f));\n        }\n        return output;\nreturn new ArrayList<Float>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)1.0f)))));\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f, (float)4.0f, (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzrlu5b0y.java:31: error: incompatible types: Object cannot be converted\
    \ to Float\n        for (Float f : result.toArray()) {\n                     \
    \                ^\n/tmp/tmpzrlu5b0y.java:36: error: incompatible types: Object\
    \ cannot be converted to Float\n        for (Float f : result.toArray()) {\n \
    \                                    ^\n/tmp/tmpzrlu5b0y.java:37: error: no suitable\
    \ method found for get(Float)\n            Float s = scalesToApplyToAllElements.get(f);\n\
    \                                                ^\n    method List.get(int) is\
    \ not applicable\n      (argument mismatch; Float cannot be converted to int)\n\
    \    method AbstractList.get(int) is not applicable\n      (argument mismatch;\
    \ Float cannot be converted to int)\n    method ArrayList.get(int) is not applicable\n\
    \      (argument mismatch; Float cannot be converted to int)\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        ArrayList<Float> unit = new\
    \ ArrayList<Float>();\n\n        if (numbers.isEmpty()) return unit;\n\n     \
    \   double min = Math.min(numbers.get(0), numbers.get(numbers.size()-1));\n  \
    \      double max = Math.max(numbers.get(0), numbers.get(numbers.size()-1));\n\
    \n        for(int i = 0; i < numbers.size()-1; ++i) {\n            unit.add(numbers.get(i)\
    \ / max);\n        }\n\n        unit.add(numbers.get(numbers.size()-1) / max);\n\
    \n        return unit;\nreturn new ArrayList<Float>(Arrays.asList());\n    }\n\
    \    public static void main(String[] args) {\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)2.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)1.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f, (float)49.9f)))).equals((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.25f,\
    \ (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjijs_dpv.java:22: error: no suitable method found for add(double)\n\
    \            unit.add(numbers.get(i) / max);\n                ^\n    method Collection.add(Float)\
    \ is not applicable\n      (argument mismatch; double cannot be converted to Float)\n\
    \    method List.add(Float) is not applicable\n      (argument mismatch; double\
    \ cannot be converted to Float)\n    method AbstractCollection.add(Float) is not\
    \ applicable\n      (argument mismatch; double cannot be converted to Float)\n\
    \    method AbstractList.add(Float) is not applicable\n      (argument mismatch;\
    \ double cannot be converted to Float)\n    method ArrayList.add(Float) is not\
    \ applicable\n      (argument mismatch; double cannot be converted to Float)\n\
    /tmp/tmpjijs_dpv.java:25: error: no suitable method found for add(double)\n  \
    \      unit.add(numbers.get(numbers.size()-1) / max);\n            ^\n    method\
    \ Collection.add(Float) is not applicable\n      (argument mismatch; double cannot\
    \ be converted to Float)\n    method List.add(Float) is not applicable\n     \
    \ (argument mismatch; double cannot be converted to Float)\n    method AbstractCollection.add(Float)\
    \ is not applicable\n      (argument mismatch; double cannot be converted to Float)\n\
    \    method AbstractList.add(Float) is not applicable\n      (argument mismatch;\
    \ double cannot be converted to Float)\n    method ArrayList.add(Float) is not\
    \ applicable\n      (argument mismatch; double cannot be converted to Float)\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        if (numbers.size() < 2)\n\
    \            return numbers;\n        numbers.sort(Float::compare);\n        float\
    \ min = numbers.get(0) / numbers.size();\n        float max = numbers.get(numbers.size()\
    \ - 1) / numbers.size();\n        ArrayList<Float> scaledNumbers = new ArrayList<>(numbers.size());\n\
    \        for (int i = 0; i < numbers.size(); i++)\n            scaledNumbers.add(((float)\
    \ numbers.get(i) - min) / (max - min));\n        return scaledNumbers;\nreturn\
    \ new ArrayList<Float>(Arrays.asList());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)2.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)1.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f, (float)49.9f)))).equals((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.25f,\
    \ (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfeh90zu7.java:23: error: unreachable statement\nreturn new ArrayList<Float>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        Float min = numbers.get(0);\
    \ //minimum value\n        Float max = numbers.get(numbers.size() - 1); //maximum\
    \ value\n        Float range = (max - min); //range\n        ArrayList<Float>\
    \ scaled = new ArrayList<>();\n        for (Float i : numbers) {\n           \
    \ scaled.add(i / range);\n        }\n        return scaled;\nreturn new ArrayList<Float>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)1.0f)))));\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f, (float)4.0f, (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5xb32xax.java:22: error: unreachable statement\nreturn new ArrayList<Float>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        if (numbers.isEmpty()) {\n\
    \            return numbers;\n        }\n        List<Float> outList = new ArrayList<Float>(numbers.size()+1);\n\
    \        outList.add(numbers.get(0));\n        ArrayList<Float> outSubList = new\
    \ ArrayList<Float>(numbers.size()+1);\n        for (Float f : numbers) {\n   \
    \         outSubList.add(f);\n            outList.add(outList.get(0)*outSubList.get(0));\n\
    \        }\n        return outList;\nreturn new ArrayList<Float>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)1.0f)))));\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f, (float)4.0f, (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpu4s8bqk_.java:24: error: incompatible types: List<Float> cannot\
    \ be converted to ArrayList<Float>\n        return outList;\n               ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        numbers.sort((a, b) -> Double.compare(a,\
    \ b));\n        ArrayList<Float> result = new ArrayList<Float>();\n        for\
    \ (Float num : numbers) {\n            if (num > 0) {\n                result.add(num);\n\
    \            } else {\n                result.add(0.1f);\n            }\n    \
    \    }\n        return result;\nreturn new ArrayList<Float>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)1.0f)))));\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f, (float)4.0f, (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjglkgm41.java:24: error: unreachable statement\nreturn new ArrayList<Float>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        // If this problem was unsolvable,\
    \ return empty list\n        if (numbers.size() < 2) {\n            return new\
    \ ArrayList<>();\n        }\n\n        // Set up an arraylist to hold the transformed\
    \ numbers\n        ArrayList<Float> transformedNumbers = new ArrayList<>();\n\n\
    \        // Iterate through the list, keeping track of the smallest and largest\
    \ numbers\n        float smallest = numbers.get(0);\n        float largest = numbers.get(0);\n\
    \        for (float num : numbers) {\n            // Keep track of the smallest\
    \ and largest numbers in the list\n            smallest = (num < smallest ? num\
    \ : smallest);\n            largest = (num > largest ? num : largest);\n\n   \
    \         // Apply the linear transform by scaling the number by the difference\
    \ between\n            // the smallest and largest numbers\n            float\
    \ scale = largest - smallest;\n            transformedNumbers.add(num * scale);\n\
    \        }\n\n        return transformedNumbers;\nreturn new ArrayList<Float>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)1.0f)))));\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f, (float)4.0f, (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_k5mgxet.java:37: error: unreachable statement\nreturn new ArrayList<Float>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        ArrayList<Float> results\
    \ = new ArrayList<>();\n\n        // Loop through numbers\n        for (Float\
    \ n : numbers) {\n            // If the number is > 1, make it == 0\n        \
    \    if (n > 1.0f) {\n                n = 0.0f;\n            }\n\n           \
    \ // If the number is < 0, make it == 1\n            if (n < -1.0f) {\n      \
    \          n = 1.0f;\n            }\n\n            // Add the number to the list\
    \ of results\n            results.add(n);\n        }\n\n        return results;\n\
    return new ArrayList<Float>(Arrays.asList());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)2.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)1.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f, (float)49.9f)))).equals((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.25f,\
    \ (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqzmj29j0.java:33: error: unreachable statement\nreturn new ArrayList<Float>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        double min = numbers.stream().mapToDouble(Double::doubleValue).min().getAsDouble();\n\
    \        double max = numbers.stream().mapToDouble(Double::doubleValue).max().getAsDouble();\n\
    \        double scaledMin = (min == 0) ? 0.0 : min;\n        double scaledMax\
    \ = (max == 0) ? 1.0 : max;\n        numbers.forEach(number -> number *= scaledMax);\n\
    \        numbers.forEach(number -> number += scaledMin);\n        return numbers.stream().map(Float::valueOf).collect(Collectors.toList());\n\
    return new ArrayList<Float>(Arrays.asList());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)2.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)1.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f, (float)49.9f)))).equals((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.25f,\
    \ (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp8zf9cjgo.java:14: error: incompatible types: invalid method reference\n\
    \        double min = numbers.stream().mapToDouble(Double::doubleValue).min().getAsDouble();\n\
    \                                                  ^\n    no suitable method found\
    \ for doubleValue(Float)\n        method Number.doubleValue() is not applicable\n\
    \          (actual and formal argument lists differ in length)\n        method\
    \ Double.doubleValue() is not applicable\n          (actual and formal argument\
    \ lists differ in length)\n/tmp/tmp8zf9cjgo.java:15: error: incompatible types:\
    \ invalid method reference\n        double max = numbers.stream().mapToDouble(Double::doubleValue).max().getAsDouble();\n\
    \                                                  ^\n    no suitable method found\
    \ for doubleValue(Float)\n        method Number.doubleValue() is not applicable\n\
    \          (actual and formal argument lists differ in length)\n        method\
    \ Double.doubleValue() is not applicable\n          (actual and formal argument\
    \ lists differ in length)\n/tmp/tmp8zf9cjgo.java:18: error: incompatible types:\
    \ double cannot be converted to Float\n        numbers.forEach(number -> number\
    \ *= scaledMax);\n                                            ^\n/tmp/tmp8zf9cjgo.java:19:\
    \ error: incompatible types: double cannot be converted to Float\n        numbers.forEach(number\
    \ -> number += scaledMin);\n                                            ^\n/tmp/tmp8zf9cjgo.java:20:\
    \ error: incompatible types: inference variable R has incompatible bounds\n  \
    \      return numbers.stream().map(Float::valueOf).collect(Collectors.toList());\n\
    \                                                           ^\n    equality constraints:\
    \ List<Float>\n    upper bounds: ArrayList<Float>,Object\n  where R,A,T are type-variables:\n\
    \    R extends Object declared in method <R,A>collect(Collector<? super T,A,R>)\n\
    \    A extends Object declared in method <R,A>collect(Collector<? super T,A,R>)\n\
    \    T extends Object declared in interface Stream\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        numbers.forEach((number)\
    \ -> {\n            float min = number.stream().min().orElse(Float.MAX_VALUE);\n\
    \            float max = number.stream().max().orElse(Float.MIN_VALUE);\n    \
    \        float scaledValue = min + (max - min) / (numbers.size()-1);\n       \
    \     numbers.add(scaledValue);\n        });\n        return numbers;\nreturn\
    \ new ArrayList<Float>(Arrays.asList());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)2.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)1.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f, (float)49.9f)))).equals((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.25f,\
    \ (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqbkdoacq.java:15: error: cannot find symbol\n            float\
    \ min = number.stream().min().orElse(Float.MAX_VALUE);\n                     \
    \         ^\n  symbol:   method stream()\n  location: variable number of type\
    \ Float\n/tmp/tmpqbkdoacq.java:16: error: cannot find symbol\n            float\
    \ max = number.stream().max().orElse(Float.MIN_VALUE);\n                     \
    \         ^\n  symbol:   method stream()\n  location: variable number of type\
    \ Float\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        if (numbers.size() < 2) {\n\
    \            return numbers;\n        }\n        final float minNum = numbers.get(0),\
    \ maxNum = numbers.get(0);\n        for (int i = 1; i < numbers.size(); i++) {\n\
    \            if (numbers.get(i) < minNum) {\n                minNum = numbers.get(i);\n\
    \            }\n            if (numbers.get(i) > maxNum) {\n                maxNum\
    \ = numbers.get(i);\n            }\n        }\n        ArrayList<Float> result\
    \ = new ArrayList<Float>(numbers.size()); // result\n        double maxAbs = Double.MIN_VALUE;\
    \ // Maximum absolute value of elements in result\n        for (float num : numbers)\
    \ {\n            double abs = Math.abs(num);\n            if (abs > maxAbs) {\n\
    \                maxAbs = abs;\n            }\n        }\n        double scale\
    \ = maxAbs / (maxNum - minNum); // scale factor between [0, 1]\n        for (int\
    \ i = 0; i < numbers.size(); i++) {\n            float num = (float) (i + 0.5f);\n\
    \            double abs = Math.abs(num);\n            double delta = abs - maxAbs;\n\
    \            float scaleFactor = delta / maxAbs;\n            result.add((float)\
    \ ((num - minNum) * scaleFactor));\n        }\n        return result;\nreturn\
    \ new ArrayList<Float>(Arrays.asList());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)2.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)1.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f, (float)49.9f)))).equals((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.25f,\
    \ (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpie91n4p6.java:20: error: cannot assign a value to final variable\
    \ minNum\n                minNum = numbers.get(i);\n                ^\n/tmp/tmpie91n4p6.java:23:\
    \ error: cannot assign a value to final variable maxNum\n                maxNum\
    \ = numbers.get(i);\n                ^\n/tmp/tmpie91n4p6.java:39: error: incompatible\
    \ types: possible lossy conversion from double to float\n            float scaleFactor\
    \ = delta / maxAbs;\n                                      ^\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        ArrayList<Float> rescaled\
    \ = new ArrayList<>();\n        // find minimum and maximum elements\n       \
    \ float min = numbers.get(0f);\n        float max = numbers.get(0);\n        for\
    \ (float num : numbers) {\n            min = Math.min(min, num);\n           \
    \ max = Math.max(max, num);\n        }\n        // apply the formula\n       \
    \ for (float num : numbers) {\n            rescaled.add( ((float)num - min) /\
    \ (max - min) );\n        }\n        return rescaled;\nreturn new ArrayList<Float>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)1.0f)))));\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f, (float)4.0f, (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp853rg5pj.java:16: error: no suitable method found for get(float)\n\
    \        float min = numbers.get(0f);\n                           ^\n    method\
    \ List.get(int) is not applicable\n      (argument mismatch; possible lossy conversion\
    \ from float to int)\n    method AbstractList.get(int) is not applicable\n   \
    \   (argument mismatch; possible lossy conversion from float to int)\n    method\
    \ ArrayList.get(int) is not applicable\n      (argument mismatch; possible lossy\
    \ conversion from float to int)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        return numbers.stream().map(n\
    \ -> {\n            float d = n / numbers.get(0); // Divide each element by the\
    \ smallest element\n            while (d == 0) { // If d is 0, repeat until d\
    \ is non-zero\n                d = 1 / numbers.get(0); // Set d = 1/smallest element\n\
    \            }\n            // Return the scaled element\n            return d\
    \ * numbers.get(0); // Multiply element by smallest element\n        }).collect(Collectors.toCollection(ArrayList::new));\n\
    return new ArrayList<Float>(Arrays.asList());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)2.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)1.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f, (float)49.9f)))).equals((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.25f,\
    \ (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6dwwmvn3.java:22: error: unreachable statement\nreturn new ArrayList<Float>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        float sum = numbers.get(0)\
    \ + numbers.get(1);\n        float smallest = Math.min(numbers.get(0), numbers.get(1));\n\
    \        float largest = Math.max(numbers.get(0), numbers.get(1));\n        float\
    \ scale = largest - smallest;\n        float scale = 1.0f / scale;\n        ArrayList<Float>\
    \ rescaled = new ArrayList<>(numbers.size());\n        for (Float i : numbers)\n\
    \            rescaled.add(i * scale);\n        return rescaled;\nreturn new ArrayList<Float>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)1.0f)))));\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f, (float)4.0f, (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpr7dbf21f.java:18: error: variable scale is already defined in method\
    \ rescaleToUnit(ArrayList<Float>)\n        float scale = 1.0f / scale;\n     \
    \         ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        if (numbers.size() < 2) {\n\
    \            return null;\n        }\n        double sumOfNumbers = numbers.stream().mapToDouble(n\
    \ -> n).sum();\n        double smallestNumber = numbers.get(0) / sumOfNumbers;\n\
    \        double largestNumber = numbers.get(numbers.size()-1) / sumOfNumbers;\n\
    \        // This loop will scale the numbers linearly between the smallestNumber\
    \ and largestNumber\n        for (float number : numbers) {\n            number\
    \ *= (largestNumber - smallestNumber) / (numbers.size()-1);\n        }\n     \
    \   // Return a list of floats that represent unit values\n        return numbers.stream().mapToObj(Float::valueOf).collect(Collectors.toCollection(ArrayList::new));\n\
    return new ArrayList<Float>(Arrays.asList());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)2.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)1.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f, (float)49.9f)))).equals((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.25f,\
    \ (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvb65pahh.java:25: error: cannot find symbol\n        return numbers.stream().mapToObj(Float::valueOf).collect(Collectors.toCollection(ArrayList::new));\n\
    \                               ^\n  symbol:   method mapToObj(Float::valueOf)\n\
    \  location: interface Stream<Float>\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        if (numbers.size() < 2) return\
    \ numbers;\n        numbers.sort(Float.compare);\n\n        float first = numbers.get(0);\n\
    \        float last = numbers.get(1);\n        float factor = (last - first) /\
    \ (numbers.size() - 1);\n\n        int i = 0;\n        for (float number : numbers)\
    \ {\n            numbers[i] = number * factor;\n            i += 1;\n        }\n\
    \n        return numbers;\nreturn new ArrayList<Float>(Arrays.asList());\n   \
    \ }\n    public static void main(String[] args) {\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)1.0f)))));\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f, (float)4.0f, (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmph3hah6w0.java:15: error: cannot find symbol\n        numbers.sort(Float.compare);\n\
    \                          ^\n  symbol:   variable compare\n  location: class\
    \ Float\n/tmp/tmph3hah6w0.java:23: error: array required, but ArrayList<Float>\
    \ found\n            numbers[i] = number * factor;\n                   ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        ArrayList<Float> rescaledNumbers\
    \ = new ArrayList<Float>();\n        if (numbers.isEmpty()) {\n            return\
    \ rescaledNumbers;\n        }\n\n        // The first element must be 0.0\n  \
    \      rescaledNumbers.add(0.0);\n        // The last element must be 1.0\n  \
    \      rescaledNumbers.add(1.0);\n\n        float min = numbers.get(0), max =\
    \ numbers.get(0);\n\n        // For every element in the list...\n        for\
    \ (Float number : numbers) {\n            float diff = max - min;\n          \
    \  min = Math.min(min, number);\n            max = Math.max(max, number);\n\n\
    \            rescaledNumbers.add(min + (diff * number));\n        }\n\n      \
    \  return rescaledNumbers;\nreturn new ArrayList<Float>(Arrays.asList());\n  \
    \  }\n    public static void main(String[] args) {\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)1.0f)))));\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f, (float)4.0f, (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3009n4_u.java:20: error: no suitable method found for add(double)\n\
    \        rescaledNumbers.add(0.0);\n                       ^\n    method Collection.add(Float)\
    \ is not applicable\n      (argument mismatch; double cannot be converted to Float)\n\
    \    method List.add(Float) is not applicable\n      (argument mismatch; double\
    \ cannot be converted to Float)\n    method AbstractCollection.add(Float) is not\
    \ applicable\n      (argument mismatch; double cannot be converted to Float)\n\
    \    method AbstractList.add(Float) is not applicable\n      (argument mismatch;\
    \ double cannot be converted to Float)\n    method ArrayList.add(Float) is not\
    \ applicable\n      (argument mismatch; double cannot be converted to Float)\n\
    /tmp/tmp3009n4_u.java:22: error: no suitable method found for add(double)\n  \
    \      rescaledNumbers.add(1.0);\n                       ^\n    method Collection.add(Float)\
    \ is not applicable\n      (argument mismatch; double cannot be converted to Float)\n\
    \    method List.add(Float) is not applicable\n      (argument mismatch; double\
    \ cannot be converted to Float)\n    method AbstractCollection.add(Float) is not\
    \ applicable\n      (argument mismatch; double cannot be converted to Float)\n\
    \    method AbstractList.add(Float) is not applicable\n      (argument mismatch;\
    \ double cannot be converted to Float)\n    method ArrayList.add(Float) is not\
    \ applicable\n      (argument mismatch; double cannot be converted to Float)\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        if (numbers.size() < 2) {\n\
    \            return numbers;\n        }\n\n        ArrayList<Float> newNumbers\
    \ = new ArrayList<Float>(numbers.size());\n        newNumbers.add(0.0f);\n   \
    \     for (Float value : numbers) {\n            newNumbers.add(value / numbers.size());\n\
    \        }\n\n        return newNumbers;\nreturn new ArrayList<Float>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)1.0f)))));\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f, (float)4.0f, (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpe__27g7l.java:25: error: unreachable statement\nreturn new ArrayList<Float>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        numbers.sort((a, b) -> Float.compare(a,\
    \ b));\n        float rangeMin = numbers.get(0);\n        float rangeMax = numbers.get(1);\n\
    \        float scaledRangeMin = 0f;\n        float scaledRangeMax = 1f;\n    \
    \    for (int i = 0; i < numbers.size(); i++) {\n            float newValue =\
    \ numbers.get(i) * rangeMax;\n            rangeMax = Math.max(rangeMax, newValue);\n\
    \            rangeMin = Math.min(rangeMin, newValue);\n            scaledRangeMax\
    \ = Math.min(scaledRangeMax, rangeMax);\n            scaledRangeMin = Math.max(scaledRangeMin,\
    \ rangeMin);\n        }\n        ArrayList<Float> rescaledNumbers = new ArrayList<>();\n\
    \        for (int i = 0; i < numbers.size(); i++) {\n            float newValue\
    \ = numbers.get(i) / (rangeMax - rangeMin);\n            rescaledNumbers.add(newValue);\n\
    \        }\n        return rescaledNumbers;\nreturn new ArrayList<Float>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)1.0f)))));\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f, (float)4.0f, (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpo5ckkkx1.java:32: error: unreachable statement\nreturn new ArrayList<Float>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        Collections.sort(numbers);\n\
    \        Collections.reverse(numbers);\n        float total = 0.0f;\n        for\
    \ (Float n : numbers) {\n            total += n;\n        }\n        float length\
    \ = numbers.get(numbers.size() - 1);\n        float scale = total / length;\n\
    \        float min = 0.0f;\n        float max = 1.0f;\n        ArrayList<Float>\
    \ result = new ArrayList<Float>();\n        for (Float n : numbers) {\n      \
    \      float value = n * scale;\n            if (value < min) value = min;\n \
    \           if (value > max) value = max;\n            result.add(value);\n  \
    \      }\n        Collections.sort(result);\n        return result;\nreturn new\
    \ ArrayList<Float>(Arrays.asList());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)2.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)1.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f, (float)49.9f)))).equals((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.25f,\
    \ (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpj065cuiz.java:33: error: unreachable statement\nreturn new ArrayList<Float>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        float min = numbers.stream().min(Float::compare).get();\n\
    \        float max = numbers.stream().max(Float::compare).get();\n        float\
    \ scale = max - min;\n        ArrayList<Float> rescaled = new ArrayList<>(numbers);\n\
    \        for (float n : rescaled) {\n            n = ((n - min) / scale) * scale;\n\
    \        }\n        return rescaled;\nreturn new ArrayList<Float>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)1.0f)))));\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f, (float)4.0f, (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpdd9lkc1e.java:22: error: unreachable statement\nreturn new ArrayList<Float>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        // Write your code here\n\
    \        numbers.sort((a, b) -> Float.compare(a, b));\n        double maxNum =\
    \ numbers.get(0);\n        double minNum = numbers.get(1);\n        for(int i\
    \ = 1; i < numbers.size(); i++) {\n            maxNum = Math.max(maxNum, numbers.get(i));\n\
    \            minNum = Math.min(minNum, numbers.get(i));\n        }\n        for(int\
    \ i = 0; i < numbers.size(); i++) {\n            numbers.set(i, (numbers.get(i)\
    \ - minNum) / (maxNum - minNum));\n        }\n        return numbers;\nreturn\
    \ new ArrayList<Float>(Arrays.asList());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)2.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)1.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f, (float)49.9f)))).equals((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.25f,\
    \ (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp_jqvht0s.java:23: error: no suitable method found for set(int,double)\n\
    \            numbers.set(i, (numbers.get(i) - minNum) / (maxNum - minNum));\n\
    \                   ^\n    method List.set(int,Float) is not applicable\n    \
    \  (argument mismatch; double cannot be converted to Float)\n    method AbstractList.set(int,Float)\
    \ is not applicable\n      (argument mismatch; double cannot be converted to Float)\n\
    \    method ArrayList.set(int,Float) is not applicable\n      (argument mismatch;\
    \ double cannot be converted to Float)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        ArrayList<Float> result =\
    \ new ArrayList<Float>(numbers.size());\n        // First and last elements are\
    \ 0 and 1, others are scaled to 0 and 1\n        result.add(0);\n        result.add(1);\n\
    \        for (Float n : numbers) {\n            result.add(n / max(n));\n    \
    \    }\n        return result;\nreturn new ArrayList<Float>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)1.0f)))));\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f, (float)4.0f, (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpn608rq9p.java:16: error: no suitable method found for add(int)\n\
    \        result.add(0);\n              ^\n    method Collection.add(Float) is\
    \ not applicable\n      (argument mismatch; int cannot be converted to Float)\n\
    \    method List.add(Float) is not applicable\n      (argument mismatch; int cannot\
    \ be converted to Float)\n    method AbstractCollection.add(Float) is not applicable\n\
    \      (argument mismatch; int cannot be converted to Float)\n    method AbstractList.add(Float)\
    \ is not applicable\n      (argument mismatch; int cannot be converted to Float)\n\
    \    method ArrayList.add(Float) is not applicable\n      (argument mismatch;\
    \ int cannot be converted to Float)\n/tmp/tmpn608rq9p.java:17: error: no suitable\
    \ method found for add(int)\n        result.add(1);\n              ^\n    method\
    \ Collection.add(Float) is not applicable\n      (argument mismatch; int cannot\
    \ be converted to Float)\n    method List.add(Float) is not applicable\n     \
    \ (argument mismatch; int cannot be converted to Float)\n    method AbstractCollection.add(Float)\
    \ is not applicable\n      (argument mismatch; int cannot be converted to Float)\n\
    \    method AbstractList.add(Float) is not applicable\n      (argument mismatch;\
    \ int cannot be converted to Float)\n    method ArrayList.add(Float) is not applicable\n\
    \      (argument mismatch; int cannot be converted to Float)\n/tmp/tmpn608rq9p.java:19:\
    \ error: cannot find symbol\n            result.add(n / max(n));\n           \
    \                ^\n  symbol:   method max(Float)\n  location: class Problem\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        int len = numbers.size();\n\
    \        ArrayList<Float> result = new ArrayList<Float>(len);\n\n        if (len\
    \ < 2) {\n            System.out.println(\"Can't rescale less than 2 elements\"\
    );\n            return result;\n        }\n\n        double maxValue = numbers.stream().max(Double::compareTo).get();\n\
    \        double minValue = numbers.stream().min(Double::compareTo).get();\n\n\
    \        // If all numbers are positive then simply set the min and max to 0.0\
    \ and 1.0\n        if (maxValue > 0.0) {\n            float scale = (float) 1.0\
    \ / (maxValue - minValue);\n            numbers.forEach(n -> result.add(n * scale));\n\
    \        } else {\n            // If all numbers are negative then set min and\
    \ max to -0.0 and -1.0\n            float scale = (float) 1.0 / (minValue - maxValue);\n\
    \            numbers.forEach(n -> result.add(n * scale));\n        }\n\n     \
    \   return result;\nreturn new ArrayList<Float>(Arrays.asList());\n    }\n   \
    \ public static void main(String[] args) {\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)2.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)1.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f, (float)49.9f)))).equals((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.25f,\
    \ (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpyisdbq4s.java:22: error: incompatible types: invalid method reference\n\
    \        double maxValue = numbers.stream().max(Double::compareTo).get();\n  \
    \                                             ^\n    method compareTo in class\
    \ Double cannot be applied to given types\n      required: Double\n      found:\
    \ Float,Float\n      reason: actual and formal argument lists differ in length\n\
    /tmp/tmpyisdbq4s.java:23: error: incompatible types: invalid method reference\n\
    \        double minValue = numbers.stream().min(Double::compareTo).get();\n  \
    \                                             ^\n    method compareTo in class\
    \ Double cannot be applied to given types\n      required: Double\n      found:\
    \ Float,Float\n      reason: actual and formal argument lists differ in length\n\
    /tmp/tmpyisdbq4s.java:27: error: incompatible types: possible lossy conversion\
    \ from double to float\n            float scale = (float) 1.0 / (maxValue - minValue);\n\
    \                                      ^\n/tmp/tmpyisdbq4s.java:31: error: incompatible\
    \ types: possible lossy conversion from double to float\n            float scale\
    \ = (float) 1.0 / (minValue - maxValue);\n                                   \
    \   ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n4 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        if (numbers.size() < 2) return\
    \ numbers;\n        float min = numbers.stream().min(Comparator.naturalOrder()).get();\n\
    \        float max = numbers.stream().max(Comparator.naturalOrder()).get();\n\
    \        List<Float> result = new ArrayList<>();\n        for (float number :\
    \ numbers) {\n            result.add(number - min);\n            result.add(number\
    \ / max - min);\n        }\n        return result;\nreturn new ArrayList<Float>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)1.0f)))));\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f, (float)4.0f, (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpaj7jmfdj.java:22: error: incompatible types: List<Float> cannot\
    \ be converted to ArrayList<Float>\n        return result;\n               ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        // Using a lambda expression\
    \ to do this:\n        numbers.sort( (lhs, rhs) -> { return (lhs < rhs) ? 1 :\
    \ (lhs > rhs) ? -1 : 0; } );\n        double smallest = numbers.get(0); // First\
    \ number is the smallest\n        int rescaleToMinusOne = (int) (numbers.get(0)\
    \ - smallest); // If this number was negative, we need to subtract one\n     \
    \   double largest = numbers.get(numbers.size() - 1); // Last number is the largest\n\
    \        rescaleToMinusOne = rescaleToMinusOne > 0 ? rescaleToMinusOne : 0; //If\
    \ this was 0, make it positive\n        largest = largest > 0 ? largest : 1;\n\
    \n        // Using a lambda expression to do this:\n        ArrayList<Float> rescaledNumbers\
    \ = new ArrayList<Float>();\n        for (Float number : numbers) {\n        \
    \    rescaledNumbers.add((float) (number - smallest) / rescaleToMinusOne);\n \
    \       }\n\n        return rescaledNumbers;\nreturn new ArrayList<Float>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)1.0f)))));\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f, (float)4.0f, (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2csj3krm.java:29: error: unreachable statement\nreturn new ArrayList<Float>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        if (numbers.isEmpty()) {\n\
    \            return new ArrayList<>();\n        }\n        ArrayList<Float> newNumbers\
    \ = new ArrayList<>(numbers);\n        Collections.sort(newNumbers);\n       \
    \ Collections.reverse(newNumbers);\n        ArrayList<Float> newUnitNumbers =\
    \ new ArrayList<>(newNumbers);\n        float sum = 0;\n        for (int i = 0;\
    \ i < newUnitNumbers.size(); i++) {\n            sum += newUnitNumbers.get(i);\n\
    \        }\n        if (sum == 0) {\n            return newUnitNumbers;\n    \
    \    }\n        float factor = 1 / sum;\n        for (float number : newUnitNumbers)\
    \ {\n            newUnitNumbers.set(newUnitNumbers.indexOf(number), number * factor);\n\
    \        }\n        return newUnitNumbers;\nreturn new ArrayList<Float>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)1.0f)))));\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f, (float)4.0f, (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp368ioy7w.java:33: error: unreachable statement\nreturn new ArrayList<Float>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        ArrayList<Float> result =\
    \ new ArrayList<Float>(numbers.size());\n        // This should always work, since\n\
    \        // min and max are defined on a unit interval and hence always integers\n\
    \        // min(0) = min(1) = 0\n        // max(0) = max(1) = 1\n        // Since\
    \ we're dealing with integers here, all numbers will be between 0 and 1\n    \
    \    float min = Math.min(numbers.get(0), numbers.get(1));\n        float max\
    \ = Math.max(numbers.get(0), numbers.get(1));\n        // This doesn't quite work\
    \ as intended\n        // >>> rescale_to_unit([0.5, 0.5, 0.5])\n        // [0.25,\
    \ 0.25, 0.25]\n        for (Float f : numbers) {\n            float scaled = f/((max\
    \ - min) / 2.0f);\n            result.add(scaled);\n        }\n        return\
    \ result;\nreturn new ArrayList<Float>(Arrays.asList());\n    }\n    public static\
    \ void main(String[] args) {\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)2.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)1.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f, (float)49.9f)))).equals((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.25f,\
    \ (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpb51x5hd8.java:30: error: unreachable statement\nreturn new ArrayList<Float>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        if (numbers.isEmpty()) throw\
    \ new NoSuchElementException(\"No numbers!\");\n        if (numbers.size() <=\
    \ 1) throw new IllegalArgumentException(\"Invalid number of numbers: \" + numbers.size());\n\
    \n        numbers.sort(Comparator.comparing((Number n) -> n));\n        float\
    \ largest = numbers.get(0);\n        float smallest = numbers.get(0);\n      \
    \  for (Number number : numbers) {\n            float newVal = (float) (((number\
    \ - smallest) * 100.0) / (largest - smallest));\n            largest = number;\n\
    \            smallest = newVal;\n        }\n        numbers.sort(Comparator.comparing((Number\
    \ n) -> n));\n        return numbers;\nreturn new ArrayList<Float>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)1.0f)))));\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f, (float)4.0f, (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpb05crsj3.java:17: error: no suitable method found for comparing((Number\
    \ n)->n)\n        numbers.sort(Comparator.comparing((Number n) -> n));\n     \
    \                          ^\n    method Comparator.<T#1,U#1>comparing(Function<?\
    \ super T#1,? extends U#1>,Comparator<? super U#1>) is not applicable\n      (cannot\
    \ infer type-variable(s) T#1,U#1\n        (actual and formal argument lists differ\
    \ in length))\n    method Comparator.<T#2,U#2>comparing(Function<? super T#2,?\
    \ extends U#2>) is not applicable\n      (inferred type does not conform to upper\
    \ bound(s)\n        inferred: Number\n        upper bound(s): Comparable<? super\
    \ Number>,Object)\n  where T#1,U#1,T#2,U#2 are type-variables:\n    T#1 extends\
    \ Object declared in method <T#1,U#1>comparing(Function<? super T#1,? extends\
    \ U#1>,Comparator<? super U#1>)\n    U#1 extends Object declared in method <T#1,U#1>comparing(Function<?\
    \ super T#1,? extends U#1>,Comparator<? super U#1>)\n    T#2 extends Object declared\
    \ in method <T#2,U#2>comparing(Function<? super T#2,? extends U#2>)\n    U#2 extends\
    \ Comparable<? super U#2> declared in method <T#2,U#2>comparing(Function<? super\
    \ T#2,? extends U#2>)\n/tmp/tmpb05crsj3.java:21: error: bad operand types for\
    \ binary operator '-'\n            float newVal = (float) (((number - smallest)\
    \ * 100.0) / (largest - smallest));\n                                        \
    \     ^\n  first type:  Number\n  second type: float\n/tmp/tmpb05crsj3.java:22:\
    \ error: incompatible types: Number cannot be converted to float\n           \
    \ largest = number;\n                      ^\n/tmp/tmpb05crsj3.java:25: error:\
    \ no suitable method found for comparing((Number n)->n)\n        numbers.sort(Comparator.comparing((Number\
    \ n) -> n));\n                               ^\n    method Comparator.<T#1,U#1>comparing(Function<?\
    \ super T#1,? extends U#1>,Comparator<? super U#1>) is not applicable\n      (cannot\
    \ infer type-variable(s) T#1,U#1\n        (actual and formal argument lists differ\
    \ in length))\n    method Comparator.<T#2,U#2>comparing(Function<? super T#2,?\
    \ extends U#2>) is not applicable\n  "
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        // The first element of the\
    \ list is at index 1, the second is at index 0\n        ArrayList<Float> rescaled\
    \ = new ArrayList<Float>();\n        rescaled.add(numbers.get(0));\n        for\
    \ (int i = 1; i < numbers.size(); i++) {\n            // The next number will\
    \ be at index (i - 1)\n            rescaled.add(numbers.get(i) / rescaled.get(i\
    \ - 1));\n        }\n        return rescaled;\nreturn new ArrayList<Float>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)1.0f)))));\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f, (float)4.0f, (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpf22vsmvj.java:22: error: unreachable statement\nreturn new ArrayList<Float>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        ArrayList<Float> rescaled\
    \ = new ArrayList<>(numbers);\n        if (rescaled.size() < 2) {\n          \
    \  rescaled.set(0, 0);\n            rescaled.set(rescaled.size(), 1);\n      \
    \      return rescaled;\n        }\n\n        float min = rescaled.get(0);\n \
    \       float max = rescaled.get(rescaled.size() - 1);\n\n        for (int i =\
    \ 1; i < rescaled.size(); i++) {\n            rescaled.set(i, (rescaled.get(i)\
    \ - min) / (max - min));\n        }\n        return rescaled;\nreturn new ArrayList<Float>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)1.0f)))));\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f, (float)4.0f, (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1dzz509z.java:16: error: no suitable method found for set(int,int)\n\
    \            rescaled.set(0, 0);\n                    ^\n    method List.set(int,Float)\
    \ is not applicable\n      (argument mismatch; int cannot be converted to Float)\n\
    \    method AbstractList.set(int,Float) is not applicable\n      (argument mismatch;\
    \ int cannot be converted to Float)\n    method ArrayList.set(int,Float) is not\
    \ applicable\n      (argument mismatch; int cannot be converted to Float)\n/tmp/tmp1dzz509z.java:17:\
    \ error: no suitable method found for set(int,int)\n            rescaled.set(rescaled.size(),\
    \ 1);\n                    ^\n    method List.set(int,Float) is not applicable\n\
    \      (argument mismatch; int cannot be converted to Float)\n    method AbstractList.set(int,Float)\
    \ is not applicable\n      (argument mismatch; int cannot be converted to Float)\n\
    \    method ArrayList.set(int,Float) is not applicable\n      (argument mismatch;\
    \ int cannot be converted to Float)\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        ArrayList<Float> ret = new\
    \ ArrayList<>();\n        for (Float f : numbers) {\n            int index = Collections.binarySearch(ret,\
    \ f);\n            if (index >= 0) {\n                ret.set(f);\n          \
    \  } else {\n                ret.add(f, 1.0f);\n            }\n        }\n   \
    \     return ret;\nreturn new ArrayList<Float>(Arrays.asList());\n    }\n    public\
    \ static void main(String[] args) {\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)2.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)1.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f, (float)49.9f)))).equals((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.25f,\
    \ (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmppos8llb0.java:18: error: no suitable method found for set(Float)\n\
    \                ret.set(f);\n                   ^\n    method List.set(int,Float)\
    \ is not applicable\n      (actual and formal argument lists differ in length)\n\
    \    method AbstractList.set(int,Float) is not applicable\n      (actual and formal\
    \ argument lists differ in length)\n    method ArrayList.set(int,Float) is not\
    \ applicable\n      (actual and formal argument lists differ in length)\n/tmp/tmppos8llb0.java:20:\
    \ error: no suitable method found for add(Float,float)\n                ret.add(f,\
    \ 1.0f);\n                   ^\n    method List.add(int,Float) is not applicable\n\
    \      (argument mismatch; Float cannot be converted to int)\n    method AbstractList.add(int,Float)\
    \ is not applicable\n      (argument mismatch; Float cannot be converted to int)\n\
    \    method ArrayList.add(int,Float) is not applicable\n      (argument mismatch;\
    \ Float cannot be converted to int)\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        ArrayList<Float> result =\
    \ new ArrayList<>();\n        double sum = 0;\n        for (Float number : numbers)\
    \ {\n            sum += number;\n            result.add(sum / numbers.size());\n\
    \        }\n        return result;\nreturn new ArrayList<Float>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)1.0f)))));\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f, (float)4.0f, (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpyaboehka.java:18: error: no suitable method found for add(double)\n\
    \            result.add(sum / numbers.size());\n                  ^\n    method\
    \ Collection.add(Float) is not applicable\n      (argument mismatch; double cannot\
    \ be converted to Float)\n    method List.add(Float) is not applicable\n     \
    \ (argument mismatch; double cannot be converted to Float)\n    method AbstractCollection.add(Float)\
    \ is not applicable\n      (argument mismatch; double cannot be converted to Float)\n\
    \    method AbstractList.add(Float) is not applicable\n      (argument mismatch;\
    \ double cannot be converted to Float)\n    method ArrayList.add(Float) is not\
    \ applicable\n      (argument mismatch; double cannot be converted to Float)\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        System.out.println(\"input\
    \ numbers: \" + numbers);\n\n        ArrayList<Float> ret = new ArrayList<Float>();\n\
    \        float max_val = numbers.get(0).getMax();\n        float min_val = numbers.get(0).getMin();\n\
    \        float rescale_ratio = (float) max_val / (float) min_val;\n        for\
    \ (int i = 1; i < numbers.size(); i++) {\n            float curr_val = numbers.get(i).getMax();\n\
    \            float new_val = curr_val * rescale_ratio;\n            rescale_ratio\
    \ = new_val / curr_val;\n            ret.add(new_val);\n        }\n        return\
    \ ret;\nreturn new ArrayList<Float>(Arrays.asList());\n    }\n    public static\
    \ void main(String[] args) {\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)2.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)1.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f, (float)49.9f)))).equals((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.25f,\
    \ (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpcqvbji3l.java:17: error: cannot find symbol\n        float max_val\
    \ = numbers.get(0).getMax();\n                                      ^\n  symbol:\
    \   method getMax()\n  location: class Float\n/tmp/tmpcqvbji3l.java:18: error:\
    \ cannot find symbol\n        float min_val = numbers.get(0).getMin();\n     \
    \                                 ^\n  symbol:   method getMin()\n  location:\
    \ class Float\n/tmp/tmpcqvbji3l.java:21: error: cannot find symbol\n         \
    \   float curr_val = numbers.get(i).getMax();\n                              \
    \             ^\n  symbol:   method getMax()\n  location: class Float\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        Collections.sort(numbers);\n\
    \        float max = numbers.stream().reduce((x, y) -> Float.compare(x, y) > 0\
    \ ? x : y).orElse(1);\n        float min = numbers.stream().reduce((x, y) -> Float.compare(x,\
    \ y) > 0 ? y : x).orElse(0);\n        float diff = max - min;\n        float newMax\
    \ = Math.max(min, diff / 2);\n        float newMin = Math.min(max, diff / 2);\n\
    \        if (newMax == max) {\n            System.out.println(\"Max == max\");\n\
    \            newMax = newMin = 1;\n        } else if (newMax == min) {\n     \
    \       newMax = newMin = 0;\n        } else {\n            System.out.println(\"\
    newMax: \" + newMax);\n        }\n        numbers.stream().forEach((x) -> {\n\
    \            if (x > newMax) {\n                x = newMax;\n            } else\
    \ if (x < newMin) {\n                x = newMin;\n            }\n        });\n\
    \        return new ArrayList<>(numbers);\nreturn new ArrayList<Float>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)1.0f)))));\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f, (float)4.0f, (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmptfy01i22.java:15: error: incompatible types: int cannot be converted\
    \ to Float\n        float max = numbers.stream().reduce((x, y) -> Float.compare(x,\
    \ y) > 0 ? x : y).orElse(1);\n                                               \
    \                                               ^\n/tmp/tmptfy01i22.java:16: error:\
    \ incompatible types: int cannot be converted to Float\n        float min = numbers.stream().reduce((x,\
    \ y) -> Float.compare(x, y) > 0 ? y : x).orElse(0);\n                        \
    \                                                                      ^\nNote:\
    \ Some messages have been simplified; recompile with -Xdiags:verbose to get full\
    \ output\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        ArrayList<Float> results\
    \ = new ArrayList<>(numbers.size());\n        for (float number : numbers) {\n\
    \            results.add(number / (float) numbers.size());\n        }\n      \
    \  return results;\nreturn new ArrayList<Float>(Arrays.asList());\n    }\n   \
    \ public static void main(String[] args) {\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)2.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)1.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f, (float)49.9f)))).equals((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.25f,\
    \ (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6zif8ix1.java:19: error: unreachable statement\nreturn new ArrayList<Float>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        if (numbers.isEmpty()) {\n\
    \            return null;\n        }\n        ArrayList<Float> rescaled = new\
    \ ArrayList<>(numbers);\n        double minval = rescaled.get(0);\n        rescaled.remove(0);\n\
    \        double maxval = rescaled.get(rescaled.size() - 1);\n        if (minval\
    \ > maxval) {\n            rescaled.remove(rescaled.size() - 1);\n           \
    \ rescaled.remove(0);\n        }\n        int midval = rescaled.size() / 2;\n\
    \        double midvalrescaled = rescaled.get(midval);\n        int rescaledpos\
    \ = 0;\n        for (int i = midval; i < rescaled.size() - 1; i++) {\n       \
    \     rescaled.set(rescaledpos, (midvalrescaled + (maxval - midvalrescaled) *\
    \ i) / (maxval - minval));\n            rescaledpos++;\n        }\n        return\
    \ rescaled;\nreturn new ArrayList<Float>(Arrays.asList());\n    }\n    public\
    \ static void main(String[] args) {\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)2.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)1.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f, (float)49.9f)))).equals((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.25f,\
    \ (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmptywuuoh_.java:29: error: no suitable method found for set(int,double)\n\
    \            rescaled.set(rescaledpos, (midvalrescaled + (maxval - midvalrescaled)\
    \ * i) / (maxval - minval));\n                    ^\n    method List.set(int,Float)\
    \ is not applicable\n      (argument mismatch; double cannot be converted to Float)\n\
    \    method AbstractList.set(int,Float) is not applicable\n      (argument mismatch;\
    \ double cannot be converted to Float)\n    method ArrayList.set(int,Float) is\
    \ not applicable\n      (argument mismatch; double cannot be converted to Float)\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        if (numbers.isEmpty()) {\n\
    \            return numbers;\n        }\n\n        ArrayList<Float> out = new\
    \ ArrayList<>(numbers.size());\n\n        Collections.sort(numbers);\n\n     \
    \   double minX = numbers.get(0);\n        double maxX = numbers.get(0);\n\n \
    \       for (Float n : numbers) {\n            out.add(0 - ((n * 2 - 1) * 0.5));\n\
    \            maxX = Math.max(maxX, n);\n        }\n\n        int i = 0;\n    \
    \    while (i < numbers.size()) {\n            if (numbers.get(i) > 0) {\n   \
    \             double ratio = ((maxX - minX) / (numbers.get(i) - minX));\n    \
    \            out.add((float) (numbers.get(i) - ratio * minX + minX));\n      \
    \          maxX += (numbers.get(i) - minX) * ratio;\n                i++;\n  \
    \          }\n        }\n\n        return out;\nreturn new ArrayList<Float>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)1.0f)))));\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f, (float)4.0f, (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpruq97dcj.java:26: error: no suitable method found for add(double)\n\
    \            out.add(0 - ((n * 2 - 1) * 0.5));\n               ^\n    method Collection.add(Float)\
    \ is not applicable\n      (argument mismatch; double cannot be converted to Float)\n\
    \    method List.add(Float) is not applicable\n      (argument mismatch; double\
    \ cannot be converted to Float)\n    method AbstractCollection.add(Float) is not\
    \ applicable\n      (argument mismatch; double cannot be converted to Float)\n\
    \    method AbstractList.add(Float) is not applicable\n      (argument mismatch;\
    \ double cannot be converted to Float)\n    method ArrayList.add(Float) is not\
    \ applicable\n      (argument mismatch; double cannot be converted to Float)\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        ArrayList<Float> results\
    \ = new ArrayList<Float>();\n        if (numbers.isEmpty()) {\n            return\
    \ results;\n        }\n        if (numbers.size() == 1) {\n            results.add(numbers.get(0));\n\
    \            return results;\n        }\n        double min = numbers.get(0).toDouble();\n\
    \        double max = numbers.get(0).toDouble();\n        for (int i = 1; i <\
    \ numbers.size(); i++) {\n            results.add(numbers.get(i).toDouble());\n\
    \            if (results.get(i) < min) min = results.get(i);\n            if (results.get(i)\
    \ > max) max = results.get(i);\n        }\n        if (max == min)\n         \
    \   return results;\n        double difference = max - min;\n        if (difference\
    \ < Double.MIN_VALUE) {\n            return results;\n        }\n        double\
    \ scalingFactor = 1.0 / (difference / max);\n        double scalingFactor2 = scalingFactor\
    \ * scalingFactor;\n        for (int i = 1; i < numbers.size(); i++) {\n     \
    \       results.set(i, scalingFactor * results.get(i) + scalingFactor2);\n   \
    \     }\n        return results;\nreturn new ArrayList<Float>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)1.0f)))));\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f, (float)4.0f, (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwd9zy732.java:22: error: cannot find symbol\n        double min\
    \ = numbers.get(0).toDouble();\n                                   ^\n  symbol:\
    \   method toDouble()\n  location: class Float\n/tmp/tmpwd9zy732.java:23: error:\
    \ cannot find symbol\n        double max = numbers.get(0).toDouble();\n      \
    \                             ^\n  symbol:   method toDouble()\n  location: class\
    \ Float\n/tmp/tmpwd9zy732.java:25: error: cannot find symbol\n            results.add(numbers.get(i).toDouble());\n\
    \                                      ^\n  symbol:   method toDouble()\n  location:\
    \ class Float\n/tmp/tmpwd9zy732.java:38: error: no suitable method found for set(int,double)\n\
    \            results.set(i, scalingFactor * results.get(i) + scalingFactor2);\n\
    \                   ^\n    method List.set(int,Float) is not applicable\n    \
    \  (argument mismatch; double cannot be converted to Float)\n    method AbstractList.set(int,Float)\
    \ is not applicable\n      (argument mismatch; double cannot be converted to Float)\n\
    \    method ArrayList.set(int,Float) is not applicable\n      (argument mismatch;\
    \ double cannot be converted to Float)\n4 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        int minIndex = -1;\n    \
    \    float minValue = numbers.get(0);\n        for (int i = 1; i < numbers.size();\
    \ i++) {\n            if (numbers.get(i) < minValue) {\n                minValue\
    \ = numbers.get(i);\n                minIndex = i;\n            }\n        }\n\
    \        if (minIndex == -1)\n            minIndex = 0;\n        ArrayList<Float>\
    \ rescaledNumbers = new ArrayList<>();\n        for (int i = 0; i < numbers.size();\
    \ i++) {\n            if (i == minIndex) {\n                rescaledNumbers.add(0);\n\
    \            } else {\n                rescaledNumbers.add(numbers.get(i) / minValue);\n\
    \            }\n        }\n        return rescaledNumbers;\nreturn new ArrayList<Float>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)1.0f)))));\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f, (float)4.0f, (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjunep3y2.java:27: error: no suitable method found for add(int)\n\
    \                rescaledNumbers.add(0);\n                               ^\n \
    \   method Collection.add(Float) is not applicable\n      (argument mismatch;\
    \ int cannot be converted to Float)\n    method List.add(Float) is not applicable\n\
    \      (argument mismatch; int cannot be converted to Float)\n    method AbstractCollection.add(Float)\
    \ is not applicable\n      (argument mismatch; int cannot be converted to Float)\n\
    \    method AbstractList.add(Float) is not applicable\n      (argument mismatch;\
    \ int cannot be converted to Float)\n    method ArrayList.add(Float) is not applicable\n\
    \      (argument mismatch; int cannot be converted to Float)\nNote: Some messages\
    \ have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        ArrayList<Float> result =\
    \ new ArrayList<>();\n        float min = Collections.min(numbers);\n        float\
    \ max = Collections.max(numbers);\n        float scale = (max - min);\n      \
    \  for (float number : numbers) {\n            result.add(number * scale);\n \
    \       }\n        return result;\nreturn new ArrayList<Float>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)1.0f)))));\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f, (float)4.0f, (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpd85_51fa.java:22: error: unreachable statement\nreturn new ArrayList<Float>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        if (numbers.isEmpty()) {\n\
    \            return numbers;\n        }\n        double minValue = numbers.get(0);\
    \ // Use this to compare against later\n        double maxValue = numbers.get(0);\n\
    \        for (Float number : numbers) {\n            if (minValue > number) {\n\
    \                minValue = number;\n            }\n            if (maxValue <\
    \ number) {\n                maxValue = number;\n            }\n        }\n  \
    \      // Scale the smallest to 0, and the largest to 1\n        double diff =\
    \ (maxValue - minValue);\n        double diff = diff / numbers.size();\n     \
    \   List<Float> rescaledNumbers = new ArrayList<>(numbers.size()); // Copy\n \
    \       for (Float number : numbers) {\n            rescaledNumbers.add(number\
    \ * diff);\n        }\n        // Return the results\n        return rescaledNumbers;\n\
    return new ArrayList<Float>(Arrays.asList());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)2.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)1.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f, (float)49.9f)))).equals((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.25f,\
    \ (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpbrdf5llc.java:29: error: variable diff is already defined in method\
    \ rescaleToUnit(ArrayList<Float>)\n        double diff = diff / numbers.size();\n\
    \               ^\n/tmp/tmpbrdf5llc.java:32: error: no suitable method found for\
    \ add(double)\n            rescaledNumbers.add(number * diff);\n             \
    \              ^\n    method Collection.add(Float) is not applicable\n      (argument\
    \ mismatch; double cannot be converted to Float)\n    method List.add(Float) is\
    \ not applicable\n      (argument mismatch; double cannot be converted to Float)\n\
    /tmp/tmpbrdf5llc.java:35: error: incompatible types: List<Float> cannot be converted\
    \ to ArrayList<Float>\n        return rescaledNumbers;\n               ^\nNote:\
    \ Some messages have been simplified; recompile with -Xdiags:verbose to get full\
    \ output\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        ArrayList<Float> rescaledNumbers\
    \ = new ArrayList<>();\n        float min = numbers.isEmpty() ? 0 : Math.min(numbers.get(0),\
    \ numbers.stream().max(Integer::compare).get()) * 0.5f;\n        float max = numbers.isEmpty()\
    \ ? 0 : Math.max(numbers.get(0), numbers.stream().min(Integer::compare).get())\
    \ * 0.5f;\n        for (float n : numbers) {\n            rescaledNumbers.add((n\
    \ - min) / (max - min));\n        }\n        return rescaledNumbers;\nreturn new\
    \ ArrayList<Float>(Arrays.asList());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)2.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)1.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f, (float)49.9f)))).equals((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.25f,\
    \ (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1pw73311.java:15: error: incompatible types: invalid method reference\n\
    \        float min = numbers.isEmpty() ? 0 : Math.min(numbers.get(0), numbers.stream().max(Integer::compare).get())\
    \ * 0.5f;\n                                                                  \
    \                        ^\n    incompatible types: Float cannot be converted\
    \ to int\n/tmp/tmp1pw73311.java:16: error: incompatible types: invalid method\
    \ reference\n        float max = numbers.isEmpty() ? 0 : Math.max(numbers.get(0),\
    \ numbers.stream().min(Integer::compare).get()) * 0.5f;\n                    \
    \                                                                      ^\n   \
    \ incompatible types: Float cannot be converted to int\nNote: Some messages have\
    \ been simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        ArrayList<Float> result =\
    \ new ArrayList<>();\n        float max = numbers.get(0);\n        float min =\
    \ numbers.get(0);\n        for (float number : numbers) {\n            if (number\
    \ > max) {\n                max = number;\n            }\n            if (number\
    \ < min) {\n                min = number;\n            }\n        }\n        for\
    \ (float number : numbers) {\n            float rescale = 1 - (number - min) /\
    \ (max - min);\n            result.add(rescale);\n        }\n        return result;\n\
    return new ArrayList<Float>(Arrays.asList());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)2.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)1.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f, (float)49.9f)))).equals((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.25f,\
    \ (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp220vlt14.java:30: error: unreachable statement\nreturn new ArrayList<Float>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        ArrayList<Float> result =\
    \ new ArrayList<Float>();\n        double smallest = Double.MAX_VALUE;\n     \
    \   double largest = Double.MIN_VALUE;\n        for (Float number : numbers) {\n\
    \            smallest =\n                    smallest > number ? smallest : number\
    \ < smallest ? number : smallest;\n            largest = largest < number ? largest\
    \ : number > largest ? number : largest;\n            double rescaled = ((number\
    \ - smallest) / (largest - smallest)) * 2.0 - 1.0;\n            result.add(rescaled);\n\
    \        }\n        return result;\nreturn new ArrayList<Float>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)1.0f)))));\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f, (float)4.0f, (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp746z1da3.java:22: error: no suitable method found for add(double)\n\
    \            result.add(rescaled);\n                  ^\n    method Collection.add(Float)\
    \ is not applicable\n      (argument mismatch; double cannot be converted to Float)\n\
    \    method List.add(Float) is not applicable\n      (argument mismatch; double\
    \ cannot be converted to Float)\n    method AbstractCollection.add(Float) is not\
    \ applicable\n      (argument mismatch; double cannot be converted to Float)\n\
    \    method AbstractList.add(Float) is not applicable\n      (argument mismatch;\
    \ double cannot be converted to Float)\n    method ArrayList.add(Float) is not\
    \ applicable\n      (argument mismatch; double cannot be converted to Float)\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        numbers.sort(Comparator.naturalOrder());\n\
    \n        ArrayList<Float> result = new ArrayList<>();\n        float lastNum\
    \ = numbers.get(0);\n        for(float num : numbers) {\n            if(Math.abs(lastNum-num)\
    \ < 1e-6) {\n                result.add(0);\n            } else {\n          \
    \      result.add(lastNum);\n            }\n            lastNum = num;\n     \
    \   }\n\n        if(lastNum!=0) {\n            result.add(lastNum);\n        }\n\
    \n        return result;\nreturn new ArrayList<Float>(Arrays.asList());\n    }\n\
    \    public static void main(String[] args) {\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)2.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)1.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f, (float)49.9f)))).equals((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.25f,\
    \ (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpb2htqcln.java:20: error: no suitable method found for add(int)\n\
    \                result.add(0);\n                      ^\n    method Collection.add(Float)\
    \ is not applicable\n      (argument mismatch; int cannot be converted to Float)\n\
    \    method List.add(Float) is not applicable\n      (argument mismatch; int cannot\
    \ be converted to Float)\n    method AbstractCollection.add(Float) is not applicable\n\
    \      (argument mismatch; int cannot be converted to Float)\n    method AbstractList.add(Float)\
    \ is not applicable\n      (argument mismatch; int cannot be converted to Float)\n\
    \    method ArrayList.add(Float) is not applicable\n      (argument mismatch;\
    \ int cannot be converted to Float)\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        if (numbers.isEmpty()) {\n\
    \            return numbers;\n        }\n        ArrayList<Float> result = new\
    \ ArrayList<Float>();\n        result.add(0);\n        float minValue = numbers.get(0).toFloat();\n\
    \        float maxValue = numbers.get(0);\n        for (int i = 1; i < numbers.size();\
    \ i++) {\n            float newValue = numbers.get(i).toFloat();\n           \
    \ float factor = (newValue - minValue) / (maxValue - minValue);\n            result.add((float)\
    \ factor);\n            maxValue = newValue;\n        }\n        result.add(1);\n\
    \        return result;\nreturn new ArrayList<Float>(Arrays.asList());\n    }\n\
    \    public static void main(String[] args) {\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)2.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)1.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f, (float)49.9f)))).equals((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.25f,\
    \ (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp7hhdeyzz.java:18: error: no suitable method found for add(int)\n\
    \        result.add(0);\n              ^\n    method Collection.add(Float) is\
    \ not applicable\n      (argument mismatch; int cannot be converted to Float)\n\
    \    method List.add(Float) is not applicable\n      (argument mismatch; int cannot\
    \ be converted to Float)\n    method AbstractCollection.add(Float) is not applicable\n\
    \      (argument mismatch; int cannot be converted to Float)\n    method AbstractList.add(Float)\
    \ is not applicable\n      (argument mismatch; int cannot be converted to Float)\n\
    \    method ArrayList.add(Float) is not applicable\n      (argument mismatch;\
    \ int cannot be converted to Float)\n/tmp/tmp7hhdeyzz.java:19: error: cannot find\
    \ symbol\n        float minValue = numbers.get(0).toFloat();\n               \
    \                        ^\n  symbol:   method toFloat()\n  location: class Float\n\
    /tmp/tmp7hhdeyzz.java:22: error: cannot find symbol\n            float newValue\
    \ = numbers.get(i).toFloat();\n                                           ^\n\
    \  symbol:   method toFloat()\n  location: class Float\n/tmp/tmp7hhdeyzz.java:27:\
    \ error: no suitable method found for add(int)\n        result.add(1);\n     \
    \         ^\n    method Collection.add(Float) is not applicable\n      (argument\
    \ mismatch; int cannot be converted to Float)\n    method List.add(Float) is not\
    \ applicable\n      (argument mismatch; int cannot be converted to Float)\n  \
    \  method AbstractCollection.add(Float) is not applicable\n      (argument mismatch;\
    \ int cannot be converted to Float)\n    method AbstractList.add(Float) is not\
    \ applicable\n      (argument mismatch; int cannot be converted to Float)\n  \
    \  method ArrayList.add(Float) is not applicable\n      (argument mismatch; int\
    \ cannot be converted to Float)\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n4 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        ArrayList<Float> result =\
    \ new ArrayList<Float>(numbers);\n        if (numbers.isEmpty()) return result;\n\
    \        Collections.sort(numbers);\n        float min = numbers.get(0); //the\
    \ smallest will always be 0 as you cannot have negative numbers\n        float\
    \ max = numbers.get(numbers.size()-1); //the largest will always be 1 as you cannot\
    \ have more than 1 number\n        // scale from -1 to 1 using division\n    \
    \    // result[0] = min + (numbers.get(0) - min) / (max - min) * (max - min);\n\
    \        // result[1] = min + (numbers.get(1) - min) / (max - min) * (max - min);\n\
    \        // result[2] = min + (numbers.get(2) - min) / (max - min) * (max - min);\n\
    \        // result[3] = min + (numbers.get(3) - min) / (max - min) * (max - min);\n\
    \        // result[4] = min + (numbers.get(4) - min) / (max - min) * (max - min);\n\
    \        // result[5] = min + (numbers.get(5) - min) / (max - min) * (max - min);\n\
    \        // result[6] = min + (numbers.get(6) - min) / (max - min) * (max - min);\n\
    \        // result[7] = min + (numbers.get(7) - min) / (max - min) * (max - min);\n\
    \        // result[8] = min + (numbers.get(8) - min) / (max - min) * (max - min);\n\
    \        // result[9] = min + (numbers.get(9) - min) / (max - min) * (max - min);\n\
    \        // result[10] = min + (numbers.get(10) - min) / (max - min) * (max -\
    \ min);\n        // result[11] = min + (numbers.get(11) - min) / (max - min) *\
    \ (max - min);\n        // result[12] = min + (numbers.get(12) - min) / (max -\
    \ min) * (max - min);\n        // result[13] = min + (numbers.get(13) - min) /\
    \ (max - min) * (max - min);\n        // result[14] = min + (numbers.get(14) -\
    \ min) / (max - min) * (max - min);\n        // result[15] = min + (numbers.get(15)\
    \ - min) / (max - min) * (max - min);\n        // result[16] = min + (numbers.get(16)\
    \ - min) / (max - min) * (max - min);\n        // result[17] = min + (numbers.get(17)\
    \ - min) / (max - min) * (max - min);\n        // result[18] = min + (numbers.get(18)\
    \ - min) / (max - min) * (max - min);\n        // result[19] = min + (numbers.get(19)\
    \ - min) / (max - min) * (max - min);\n        // result[20] = min + (numbers.get(20)\
    \ - min) / (max - min) * (max - min);\n        // result[21] = min + (numbers.get(21)\
    \ - min) / (max - min) * (max - min);\n        // result[22] = min + (numbers.get(22)\
    \ - min) / (max - min\nreturn new ArrayList<Float>(Arrays.asList());\n    }\n\
    \    public static void main(String[] args) {\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)2.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)1.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f, (float)49.9f)))).equals((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.25f,\
    \ (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvrxgwg2h.java:46)\n"
  exit_code: 1
  status: Exception
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        // Your code here\n     \
    \   ArrayList<Float> newNumbers = new ArrayList<>();\n        float min = 0;\n\
    \        float max = numbers.get(0);\n        for (Float number : numbers) {\n\
    \            if (number > max) {\n                max = number;\n            }\n\
    \            if (number < min) {\n                min = number;\n            }\n\
    \            newNumbers.add(number);\n        }\n        for (Float number : newNumbers)\
    \ {\n            if (number < min) {\n                newNumbers.add(0.0);\n \
    \           } else if (number > max) {\n                newNumbers.add(1.0);\n\
    \            }\n        }\n        System.out.println(newNumbers);\n        return\
    \ newNumbers;\nreturn new ArrayList<Float>(Arrays.asList());\n    }\n    public\
    \ static void main(String[] args) {\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)2.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)1.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f, (float)49.9f)))).equals((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.25f,\
    \ (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6w903945.java:29: error: no suitable method found for add(double)\n\
    \                newNumbers.add(0.0);\n                          ^\n    method\
    \ Collection.add(Float) is not applicable\n      (argument mismatch; double cannot\
    \ be converted to Float)\n    method List.add(Float) is not applicable\n     \
    \ (argument mismatch; double cannot be converted to Float)\n    method AbstractCollection.add(Float)\
    \ is not applicable\n      (argument mismatch; double cannot be converted to Float)\n\
    \    method AbstractList.add(Float) is not applicable\n      (argument mismatch;\
    \ double cannot be converted to Float)\n    method ArrayList.add(Float) is not\
    \ applicable\n      (argument mismatch; double cannot be converted to Float)\n\
    /tmp/tmp6w903945.java:31: error: no suitable method found for add(double)\n  \
    \              newNumbers.add(1.0);\n                          ^\n    method Collection.add(Float)\
    \ is not applicable\n      (argument mismatch; double cannot be converted to Float)\n\
    \    method List.add(Float) is not applicable\n      (argument mismatch; double\
    \ cannot be converted to Float)\n    method AbstractCollection.add(Float) is not\
    \ applicable\n      (argument mismatch; double cannot be converted to Float)\n\
    \    method AbstractList.add(Float) is not applicable\n      (argument mismatch;\
    \ double cannot be converted to Float)\n    method ArrayList.add(Float) is not\
    \ applicable\n      (argument mismatch; double cannot be converted to Float)\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        int n = numbers.size();\n\
    \        double smallest = numbers.get(0), largest = numbers.get(0);\n       \
    \ if (n < 2) {\n            return numbers;\n        }\n        for (int i = 1;\
    \ i < n; i++) {\n            if (numbers.get(i) < smallest) {\n              \
    \  smallest = numbers.get(i);\n            }\n            if (numbers.get(i) >\
    \ largest) {\n                largest = numbers.get(i);\n            }\n     \
    \   }\n        // now we know smallest and largest are in range\n        double\
    \ range = (largest - smallest);\n        double scale = 1D / ((n - 1) * (range\
    \ / n));\n        ArrayList<Float> result = new ArrayList<>(numbers.size()); //\
    \ copy the list\n        numbers.forEach(number -> result.add(scale * number));\n\
    \        return result;\nreturn new ArrayList<Float>(Arrays.asList());\n    }\n\
    \    public static void main(String[] args) {\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)2.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)1.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f, (float)49.9f)))).equals((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.25f,\
    \ (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpy4c7pdd1.java:31: error: no suitable method found for add(double)\n\
    \        numbers.forEach(number -> result.add(scale * number));\n            \
    \                            ^\n    method Collection.add(Float) is not applicable\n\
    \      (argument mismatch; double cannot be converted to Float)\n    method List.add(Float)\
    \ is not applicable\n      (argument mismatch; double cannot be converted to Float)\n\
    \    method AbstractCollection.add(Float) is not applicable\n      (argument mismatch;\
    \ double cannot be converted to Float)\n    method AbstractList.add(Float) is\
    \ not applicable\n      (argument mismatch; double cannot be converted to Float)\n\
    \    method ArrayList.add(Float) is not applicable\n      (argument mismatch;\
    \ double cannot be converted to Float)\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        double min = numbers.get(0);\
    \ max = numbers.get(0);\n        for (Float f : numbers) {\n            min =\
    \ Math.min(min, f);\n            max = Math.max(max, f);\n        }\n        ArrayList<Float>\
    \ r = new ArrayList<>();\n        for (Float f : numbers) {\n            r.add(((f\
    \ - min) / (max - min)) * 1.0f);\n        }\n        return r;\nreturn new ArrayList<Float>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)1.0f)))));\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f, (float)4.0f, (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2z7rsaan.java:14: error: cannot find symbol\n        double min\
    \ = numbers.get(0); max = numbers.get(0);\n                                  \
    \   ^\n  symbol:   variable max\n  location: class Problem\n/tmp/tmp2z7rsaan.java:17:\
    \ error: cannot find symbol\n            max = Math.max(max, f);\n           \
    \ ^\n  symbol:   variable max\n  location: class Problem\n/tmp/tmp2z7rsaan.java:17:\
    \ error: cannot find symbol\n            max = Math.max(max, f);\n           \
    \                ^\n  symbol:   variable max\n  location: class Problem\n/tmp/tmp2z7rsaan.java:21:\
    \ error: cannot find symbol\n            r.add(((f - min) / (max - min)) * 1.0f);\n\
    \                                ^\n  symbol:   variable max\n  location: class\
    \ Problem\n4 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        // Convert to a stream\n\
    \        Stream<Float> s = numbers.stream().map(Float::valueOf);\n        // Filter\
    \ out zeroes\n        Stream<Float> nonZero = s.filter(f -> f > 0.0f);\n     \
    \   // Get min and max values\n        Float max = nonZero.max(Float::compareTo);\n\
    \        Float min = nonZero.min(Float::compareTo);\n        // Apply linear transform\n\
    \        s = nonZero.mapToObj(f -> min + (max - min) * (f / max));\n        //\
    \ Convert back to an array\n        return s.collect(Collectors.toCollection(ArrayList::new));\n\
    return new ArrayList<Float>(Arrays.asList());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)2.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)1.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f, (float)49.9f)))).equals((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.25f,\
    \ (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpr82hsi_9.java:19: error: incompatible types: Optional<Float> cannot\
    \ be converted to Float\n        Float max = nonZero.max(Float::compareTo);\n\
    \                               ^\n/tmp/tmpr82hsi_9.java:20: error: incompatible\
    \ types: Optional<Float> cannot be converted to Float\n        Float min = nonZero.min(Float::compareTo);\n\
    \                               ^\n/tmp/tmpr82hsi_9.java:22: error: cannot find\
    \ symbol\n        s = nonZero.mapToObj(f -> min + (max - min) * (f / max));\n\
    \                   ^\n  symbol:   method mapToObj((f)->min +[...] max))\n  location:\
    \ variable nonZero of type Stream<Float>\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        ArrayList<Float> result =\
    \ new ArrayList<Float>();\n        for (Float f : numbers) {\n            result.add(f\
    \ / numbers.size());\n        }\n        return result;\nreturn new ArrayList<Float>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)1.0f)))));\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f, (float)4.0f, (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp842sndj4.java:19: error: unreachable statement\nreturn new ArrayList<Float>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        Arrays.sort(numbers);\n \
    \       Collections.reverse(numbers);\n        ArrayList<Float> result = new ArrayList<>(numbers);\n\
    \        int firstNonZeroIndex = Collections.binarySearch(result, 0.f);\n    \
    \    if (firstNonZeroIndex < 0) {\n            firstNonZeroIndex = -firstNonZeroIndex\
    \ - 1;\n        } else {\n            firstNonZeroIndex = firstNonZeroIndex +\
    \ 1;\n        }\n        for (int i = 0; i < result.size(); i++) {\n         \
    \   result[i] = result[i] / firstNonZeroIndex;\n        }\n        return result;\n\
    return new ArrayList<Float>(Arrays.asList());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)2.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)1.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f, (float)49.9f)))).equals((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.25f,\
    \ (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpeez8w9e1.java:14: error: no suitable method found for sort(ArrayList<Float>)\n\
    \        Arrays.sort(numbers);\n              ^\n    method Arrays.sort(int[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Float> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Float> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Float> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Float> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Float> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Float> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Float> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Float> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\n/tmp/tmpeez8w9e1.java:24: error: array required, but ArrayList<Float>\
    \ found\n            result[i] = result[i] / firstNonZeroIndex;\n            \
    \      ^\n/tmp/tmpeez8w9e1.java:24: error: array required, but ArrayList<Float>\
    \ found\n            result[i] = result[i] / firstNonZeroIndex;\n            \
    \                  ^\nNote: Some messages have been sim"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        float minNumber = 0f;\n \
    \       float maxNumber = 1f;\n        if (numbers.isEmpty()) {\n            return\
    \ new ArrayList<Float>(numbers);\n        } else {\n            minNumber = numbers.stream().min().getAsFloat();\n\
    \            maxNumber = numbers.stream().max().getAsFloat();\n        }\n   \
    \     return numbers.stream().map(v -> minNumber + (v - minNumber) / (maxNumber\
    \ - minNumber) * (maxNumber - minNumber)).collect(Collectors.toCollection(ArrayList::new));\n\
    return new ArrayList<Float>(Arrays.asList());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)2.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)1.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f, (float)49.9f)))).equals((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.25f,\
    \ (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp1_la1v_r.java:19: error: method min in interface Stream<T> cannot\
    \ be applied to given types;\n            minNumber = numbers.stream().min().getAsFloat();\n\
    \                                        ^\n  required: Comparator<? super Float>\n\
    \  found: no arguments\n  reason: actual and formal argument lists differ in length\n\
    \  where T is a type-variable:\n    T extends Object declared in interface Stream\n\
    /tmp/tmp1_la1v_r.java:20: error: method max in interface Stream<T> cannot be applied\
    \ to given types;\n            maxNumber = numbers.stream().max().getAsFloat();\n\
    \                                        ^\n  required: Comparator<? super Float>\n\
    \  found: no arguments\n  reason: actual and formal argument lists differ in length\n\
    \  where T is a type-variable:\n    T extends Object declared in interface Stream\n\
    2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        ArrayList<Float> transformedList\
    \ = new ArrayList<Float>();\n\n        for (float number : numbers) {\n      \
    \      transformedList.add(number / numbers.size());\n        }\n\n        return\
    \ transformedList;\nreturn new ArrayList<Float>(Arrays.asList());\n    }\n   \
    \ public static void main(String[] args) {\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)2.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)1.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f, (float)49.9f)))).equals((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.25f,\
    \ (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp2kio1lg4.java:21: error: unreachable statement\nreturn new ArrayList<Float>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        ArrayList<Float> result =\
    \ new ArrayList<>(numbers);\n        Collections.sort(result);\n        result.forEach(b\
    \ -> {\n            if (b <= 0) {\n                b = 0.0;\n            } else\
    \ if (b >= 1) {\n                b = 1.0;\n            }\n        });\n      \
    \  return result;\nreturn new ArrayList<Float>(Arrays.asList());\n    }\n    public\
    \ static void main(String[] args) {\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)2.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)1.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f, (float)49.9f)))).equals((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.25f,\
    \ (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp535tdap0.java:18: error: incompatible types: double cannot be converted\
    \ to Float\n                b = 0.0;\n                    ^\n/tmp/tmp535tdap0.java:20:\
    \ error: incompatible types: double cannot be converted to Float\n           \
    \     b = 1.0;\n                    ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        ArrayList<Float> scaledNumbers\
    \ = new ArrayList<>();\n        if (numbers.isEmpty()){\n            return scaledNumbers;\n\
    \        }\n        float min = numbers.get(0); // The smallest element in the\
    \ list\n        int count = 0; // For keeping track of how many numbers are to\
    \ be changed\n        // Loop through the list, changing the first number to be\
    \ 0\n        for (float num : numbers) {\n            if (num < min){\n      \
    \          min = num;\n            }\n            if (num > min){\n          \
    \      scaledNumbers.add(0);\n                count++;\n            } else {\n\
    \                scaledNumbers.add(num);\n            }\n        }\n        //\
    \ If we have any numbers that are larger than the smallest number, set them to\
    \ 1\n        if (count > 0){\n            for (int i = 0; i < scaledNumbers.size();\
    \ i++){\n                if (scaledNumbers.get(i) > min){\n                  \
    \  scaledNumbers.set(i, 1);\n                }\n            }\n        }\n   \
    \     return scaledNumbers;\nreturn new ArrayList<Float>(Arrays.asList());\n \
    \   }\n    public static void main(String[] args) {\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)1.0f)))));\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f, (float)4.0f, (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmph72624vh.java:26: error: no suitable method found for add(int)\n\
    \                scaledNumbers.add(0);\n                             ^\n    method\
    \ Collection.add(Float) is not applicable\n      (argument mismatch; int cannot\
    \ be converted to Float)\n    method List.add(Float) is not applicable\n     \
    \ (argument mismatch; int cannot be converted to Float)\n    method AbstractCollection.add(Float)\
    \ is not applicable\n      (argument mismatch; int cannot be converted to Float)\n\
    \    method AbstractList.add(Float) is not applicable\n      (argument mismatch;\
    \ int cannot be converted to Float)\n    method ArrayList.add(Float) is not applicable\n\
    \      (argument mismatch; int cannot be converted to Float)\n/tmp/tmph72624vh.java:36:\
    \ error: no suitable method found for set(int,int)\n                    scaledNumbers.set(i,\
    \ 1);\n                                 ^\n    method List.set(int,Float) is not\
    \ applicable\n      (argument mismatch; int cannot be converted to Float)\n  \
    \  method AbstractList.set(int,Float) is not applicable\n      (argument mismatch;\
    \ int cannot be converted to Float)\n    method ArrayList.set(int,Float) is not\
    \ applicable\n      (argument mismatch; int cannot be converted to Float)\nNote:\
    \ Some messages have been simplified; recompile with -Xdiags:verbose to get full\
    \ output\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        ArrayList<Float> result =\
    \ new ArrayList<Float>();\n        float scale = 0.0;\n        for (float n :\
    \ numbers) {\n            scale = Math.max(scale, n);\n            result.add(scale\
    \ / n);\n        }\n        return result;\nreturn new ArrayList<Float>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)1.0f)))));\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f, (float)4.0f, (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpfv71lxty.java:15: error: incompatible types: possible lossy conversion\
    \ from double to float\n        float scale = 0.0;\n                      ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        int numPoints = numbers.size();\n\
    \        float minPoint = numbers.get(0);\n        float maxPoint = numbers.get(0);\n\
    \        for (int i = 1; i < numPoints; i++) {\n            float point = numbers.get(i);\n\
    \            if (minPoint > point) {\n                minPoint = point;\n    \
    \        } else if (maxPoint < point) {\n                maxPoint = point;\n \
    \           }\n        }\n        ArrayList<Float> newList = new ArrayList<>(numPoints);\n\
    \        for (int i = 0; i < numPoints; i++) {\n            float point = numbers.get(i);\n\
    \            int index = 0;\n            while (point > minPoint && point < maxPoint)\
    \ {\n                point -= minPoint;\n                index++;\n          \
    \  }\n            newList.add(point);\n            newList.add(point / index);\n\
    \        }\n        return newList;\nreturn new ArrayList<Float>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)1.0f)))));\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f, (float)4.0f, (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmps01t0xw2.java:37: error: unreachable statement\nreturn new ArrayList<Float>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        if (numbers.size() < 2) {\n\
    \            throw new IllegalArgumentException(\"At least two numbers must be\
    \ provided\");\n        }\n        // create an empty array for the transformed\
    \ numbers, of the same size as the original\n        ArrayList<Float> transformedNumbers\
    \ = new ArrayList<>(numbers.size());\n        // apply the transform\n       \
    \ for (Float number : numbers) {\n            transformedNumbers.add(Float.valueOf(number\
    \ - MINIMUM));\n            transformedNumbers.add(Float.valueOf(number + MAXIMUM));\n\
    \        }\n        return transformedNumbers;\nreturn new ArrayList<Float>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)1.0f)))));\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f, (float)4.0f, (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3lyzyo0y.java:21: error: cannot find symbol\n            transformedNumbers.add(Float.valueOf(number\
    \ - MINIMUM));\n                                                          ^\n\
    \  symbol:   variable MINIMUM\n  location: class Problem\n/tmp/tmp3lyzyo0y.java:22:\
    \ error: cannot find symbol\n            transformedNumbers.add(Float.valueOf(number\
    \ + MAXIMUM));\n                                                          ^\n\
    \  symbol:   variable MAXIMUM\n  location: class Problem\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        numbers.sort(Comparator.comparing(Float::floatValue));\n\
    \        if (numbers.size() > 1) {\n            double range = Math.abs(numbers.get(1)\
    \ - numbers.get(0));\n            int numUnits = (int) Math.ceil((double) numbers.size()\
    \ / range);\n            ArrayList<Float> units = new ArrayList<Float>(numUnits);\n\
    \            double range = range * numUnits;\n            for (int i = 0; i <\
    \ numUnits; i++) {\n                double lower = numbers.get(range*i);\n   \
    \             double upper = numbers.get(range*(i+1));\n                double\
    \ diff = (upper - lower) / 2;\n                units.add((float) ((diff+lower)/range));\n\
    \            }\n            numbers = units;\n        }\n        return numbers;\n\
    return new ArrayList<Float>(Arrays.asList());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)2.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)1.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f, (float)49.9f)))).equals((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.25f,\
    \ (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmphpnk080n.java:19: error: variable range is already defined in method\
    \ rescaleToUnit(ArrayList<Float>)\n            double range = range * numUnits;\n\
    \                   ^\n/tmp/tmphpnk080n.java:21: error: no suitable method found\
    \ for get(double)\n                double lower = numbers.get(range*i);\n    \
    \                                  ^\n    method List.get(int) is not applicable\n\
    \      (argument mismatch; possible lossy conversion from double to int)\n   \
    \ method AbstractList.get(int) is not applicable\n      (argument mismatch; possible\
    \ lossy conversion from double to int)\n    method ArrayList.get(int) is not applicable\n\
    \      (argument mismatch; possible lossy conversion from double to int)\n/tmp/tmphpnk080n.java:22:\
    \ error: no suitable method found for get(double)\n                double upper\
    \ = numbers.get(range*(i+1));\n                                      ^\n    method\
    \ List.get(int) is not applicable\n      (argument mismatch; possible lossy conversion\
    \ from double to int)\n    method AbstractList.get(int) is not applicable\n  \
    \    (argument mismatch; possible lossy conversion from double to int)\n    method\
    \ ArrayList.get(int) is not applicable\n      (argument mismatch; possible lossy\
    \ conversion from double to int)\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        ArrayList<Float> rescaled\
    \ = new ArrayList<Float>(numbers);\n        int min = rescaled.stream().min().getAsInt();\n\
    \        rescaled.stream().map(n -> n - (float)min).forEachOrdered(rescaled::add);\n\
    \        rescaled.stream().map(n -> n / numbers.size()).forEachOrdered(rescaled::add);\n\
    \        return rescaled;\nreturn new ArrayList<Float>(Arrays.asList());\n   \
    \ }\n    public static void main(String[] args) {\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)1.0f)))));\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f, (float)4.0f, (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp06tmqj7w.java:15: error: method min in interface Stream<T> cannot\
    \ be applied to given types;\n        int min = rescaled.stream().min().getAsInt();\n\
    \                                   ^\n  required: Comparator<? super Float>\n\
    \  found: no arguments\n  reason: actual and formal argument lists differ in length\n\
    \  where T is a type-variable:\n    T extends Object declared in interface Stream\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        // Create a list to hold\
    \ the result of the rescaled numbers\n        ArrayList<Float> rescaledNumbers\
    \ = new ArrayList<Float>();\n        // Create min and max of the numbers\n  \
    \      float min = Float.MAX_VALUE;\n        float max = Float.MIN_VALUE;\n  \
    \      // Add all the numbers to the list\n        for (float number : numbers)\
    \ {\n            min = Math.min(min, number);\n            max = Math.max(max,\
    \ number);\n        }\n        // Iterate over the numbers again, and set each\
    \ to the scaled value\n        for (float number : numbers) {\n            rescaledNumbers.add(number\
    \ - ((number - min) / (max - min)) * 0.5);\n        }\n        return rescaledNumbers;\n\
    return new ArrayList<Float>(Arrays.asList());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)2.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)1.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f, (float)49.9f)))).equals((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.25f,\
    \ (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpa1s8_pfy.java:26: error: no suitable method found for add(double)\n\
    \            rescaledNumbers.add(number - ((number - min) / (max - min)) * 0.5);\n\
    \                           ^\n    method Collection.add(Float) is not applicable\n\
    \      (argument mismatch; double cannot be converted to Float)\n    method List.add(Float)\
    \ is not applicable\n      (argument mismatch; double cannot be converted to Float)\n\
    \    method AbstractCollection.add(Float) is not applicable\n      (argument mismatch;\
    \ double cannot be converted to Float)\n    method AbstractList.add(Float) is\
    \ not applicable\n      (argument mismatch; double cannot be converted to Float)\n\
    \    method ArrayList.add(Float) is not applicable\n      (argument mismatch;\
    \ double cannot be converted to Float)\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        ArrayList<Float> output =\
    \ new ArrayList<>();\n        // Compute total number\n        float sum = 0;\n\
    \        for (Float number : numbers) {\n            sum += number;\n        }\n\
    \        // Divide numbers by sum\n        for (Float number : numbers) {\n  \
    \          output.add(number / sum);\n        }\n        return output;\nreturn\
    \ new ArrayList<Float>(Arrays.asList());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)2.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)1.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f, (float)49.9f)))).equals((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.25f,\
    \ (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpqkukm4pm.java:25: error: unreachable statement\nreturn new ArrayList<Float>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        float min = numbers.get(0);\n\
    \        float max = numbers.get(0);\n        for (Float f: numbers) {\n     \
    \       min = Math.min(min, f);\n            max = Math.max(max, f);\n       \
    \ }\n        float scale = (max - min) / (numbers.size()-1);\n        ArrayList<Float>\
    \ ret = new ArrayList<Float>();\n        for (Float f: numbers) {\n          \
    \  ret.add(f - min*scale);\n        }\n        return ret;\nreturn new ArrayList<Float>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)1.0f)))));\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f, (float)4.0f, (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmptxc9n89_.java:26: error: unreachable statement\nreturn new ArrayList<Float>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        // Write your solution here\n\
    \        System.out.println(numbers);\n        FloatStream.of(numbers).collect(Collectors.toList()).stream().mapToDouble(f\
    \ -> (float)(f/numbers.size())).mapToInt(x -> x+1)\n                .mapToDouble(x\
    \ -> x/numbers.size()).mapToInt(x -> x-1).collect(Collectors.toList()).stream().map(x\
    \ -> x*numbers.get(numbers.size()-1)).collect(Collectors.toList());\n        //\
    \ System.out.println(numbers.stream().map(x -> x*numbers.get(numbers.size()-1)).collect(Collectors.toList()));\n\
    \        return numbers.stream().map(x -> x*numbers.get(numbers.size()-1)).collect(Collectors.toList());\n\
    return new ArrayList<Float>(Arrays.asList());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)2.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)1.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f, (float)49.9f)))).equals((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.25f,\
    \ (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpnd79_nh0.java:16: error: cannot find symbol\n        FloatStream.of(numbers).collect(Collectors.toList()).stream().mapToDouble(f\
    \ -> (float)(f/numbers.size())).mapToInt(x -> x+1)\n        ^\n  symbol:   variable\
    \ FloatStream\n  location: class Problem\n/tmp/tmpnd79_nh0.java:19: error: incompatible\
    \ types: inference variable R has incompatible bounds\n        return numbers.stream().map(x\
    \ -> x*numbers.get(numbers.size()-1)).collect(Collectors.toList());\n        \
    \                                                                         ^\n\
    \    equality constraints: List<Float>\n    upper bounds: ArrayList<Float>,Object\n\
    \  where R,A,T are type-variables:\n    R extends Object declared in method <R,A>collect(Collector<?\
    \ super T,A,R>)\n    A extends Object declared in method <R,A>collect(Collector<?\
    \ super T,A,R>)\n    T extends Object declared in interface Stream\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        ArrayList<Float> result =\
    \ new ArrayList<>();\n\n        // If the list is empty, just return it\n    \
    \    if (numbers.isEmpty()) {\n            return result;\n        }\n\n     \
    \   float smallest = Collections.min(numbers);\n        float largest = Collections.max(numbers);\n\
    \n        result.add(smallest);\n\n        double minToZero = smallest - smallest;\n\
    \        result.add((float) (minToZero / largest));\n\n        result.add(largest);\n\
    \n        return result;\nreturn new ArrayList<Float>(Arrays.asList());\n    }\n\
    \    public static void main(String[] args) {\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)2.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)1.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f, (float)49.9f)))).equals((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.25f,\
    \ (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpe9mih9zm.java:32: error: unreachable statement\nreturn new ArrayList<Float>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        // Your code here\n     \
    \   float min = numbers.get(0); // first number\n        float max = numbers.get(numbers.size()\
    \ - 1); // last number\n        float diff = max - min;\n        float midPoint\
    \ = min + diff/2;\n        ArrayList<Float> scaled = new ArrayList<Float>(numbers.size());\n\
    \        for(float num : numbers) {\n            // apply your formula\n     \
    \       scaled.add(midPoint + (num - midPoint) * ((max - min)/diff));\n      \
    \  }\n        return scaled;\nreturn new ArrayList<Float>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)1.0f)))));\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f, (float)4.0f, (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpubeobwis.java:25: error: unreachable statement\nreturn new ArrayList<Float>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        double minValue = Math.min(numbers.get(0),\
    \ numbers.get(1));\n        double maxValue = Math.max(numbers.get(0), numbers.get(1));\n\
    \        double range = maxValue - minValue;\n        double scale = 1.0 / range;\n\
    \        ArrayList<Float> result = new ArrayList<>(numbers);\n        result.set(0,\
    \ numbers.get(0) * scale);\n        result.set(1, numbers.get(1) * scale);\n \
    \       return result;\nreturn new ArrayList<Float>(Arrays.asList());\n    }\n\
    \    public static void main(String[] args) {\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)2.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)1.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f, (float)49.9f)))).equals((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.25f,\
    \ (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwl3qxp4d.java:19: error: no suitable method found for set(int,double)\n\
    \        result.set(0, numbers.get(0) * scale);\n              ^\n    method List.set(int,Float)\
    \ is not applicable\n      (argument mismatch; double cannot be converted to Float)\n\
    \    method AbstractList.set(int,Float) is not applicable\n      (argument mismatch;\
    \ double cannot be converted to Float)\n    method ArrayList.set(int,Float) is\
    \ not applicable\n      (argument mismatch; double cannot be converted to Float)\n\
    /tmp/tmpwl3qxp4d.java:20: error: no suitable method found for set(int,double)\n\
    \        result.set(1, numbers.get(1) * scale);\n              ^\n    method List.set(int,Float)\
    \ is not applicable\n      (argument mismatch; double cannot be converted to Float)\n\
    \    method AbstractList.set(int,Float) is not applicable\n      (argument mismatch;\
    \ double cannot be converted to Float)\n    method ArrayList.set(int,Float) is\
    \ not applicable\n      (argument mismatch; double cannot be converted to Float)\n\
    2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        float min = numbers.get(0f);\n\
    \        float max = numbers.get(0);\n        float min = numbers.get(0);\n  \
    \      for (int i = 1; i < numbers.size(); i++) {\n            min = Math.min(min,\
    \ numbers.get(i));\n            max = Math.max(max, numbers.get(i));\n       \
    \ }\n        float range = (max - min);\n        float newMax = (1.0f / range);\n\
    \        float newMin = -(1.0f / range);\n        ArrayList<Float> rescaled =\
    \ new ArrayList<Float>();\n        for (float num : numbers) {\n            rescaled.add((num\
    \ - min) * newMax + newMin);\n        }\n        return rescaled;\nreturn new\
    \ ArrayList<Float>(Arrays.asList());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)2.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)1.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f, (float)49.9f)))).equals((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.25f,\
    \ (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6n_8215f.java:14: error: no suitable method found for get(float)\n\
    \        float min = numbers.get(0f);\n                           ^\n    method\
    \ List.get(int) is not applicable\n      (argument mismatch; possible lossy conversion\
    \ from float to int)\n    method AbstractList.get(int) is not applicable\n   \
    \   (argument mismatch; possible lossy conversion from float to int)\n    method\
    \ ArrayList.get(int) is not applicable\n      (argument mismatch; possible lossy\
    \ conversion from float to int)\n/tmp/tmp6n_8215f.java:16: error: variable min\
    \ is already defined in method rescaleToUnit(ArrayList<Float>)\n        float\
    \ min = numbers.get(0);\n              ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        ArrayList<Float> output =\
    \ new ArrayList<Float>(numbers);\n        output.sort(Comparator.comparingFloat(x\
    \ -> x));\n        output.forEach((x) -> {\n            double rescale = 1 - (double)\
    \ (x / output.size()); // rescale\n            x = rescale * output.size();\n\
    \        });\n        return output;\nreturn new ArrayList<Float>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)1.0f)))));\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f, (float)4.0f, (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpvb09vviq.java:15: error: cannot find symbol\n        output.sort(Comparator.comparingFloat(x\
    \ -> x));\n                              ^\n  symbol:   method comparingFloat((x)->x)\n\
    \  location: interface Comparator\n/tmp/tmpvb09vviq.java:18: error: incompatible\
    \ types: double cannot be converted to Float\n            x = rescale * output.size();\n\
    \                        ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        float min = 0;\n        float\
    \ max = Float.MAX_VALUE;\n        float max = Math.max(max, numbers.get(0));\n\
    \        min = Math.min(min, numbers.get(0));\n        for (int i = 1; i < numbers.size();\
    \ i++) {\n            max = Math.max(max, numbers.get(i));\n            min =\
    \ Math.min(min, numbers.get(i));\n        }\n        numbers = new ArrayList<Float>();\n\
    \        for (int i = 0; i < numbers.size(); i++) {\n            numbers.add((numbers.get(i)\
    \ - min) / (max - min));\n        }\n        return numbers;\nreturn new ArrayList<Float>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)1.0f)))));\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f, (float)4.0f, (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp3nfsfqc1.java:16: error: variable max is already defined in method\
    \ rescaleToUnit(ArrayList<Float>)\n        float max = Math.max(max, numbers.get(0));\n\
    \              ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        float min = Math.min(numbers.get(0),\
    \ numbers.get(1));\n        float max = Math.max(numbers.get(0), numbers.get(1));\n\
    \        float scale = (max - min) / 2.0f;\n        ArrayList<Float> rescaledNumbers\
    \ = new ArrayList<Float>();\n        for (Float number : numbers) {\n        \
    \    rescaledNumbers.add(number * scale);\n        }\n        return rescaledNumbers;\n\
    return new ArrayList<Float>(Arrays.asList());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)2.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)1.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f, (float)49.9f)))).equals((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.25f,\
    \ (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpac2o93u0.java:22: error: unreachable statement\nreturn new ArrayList<Float>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        List<Float> result = new\
    \ ArrayList<>();\n        for (int i = 0; i < numbers.size(); i++) {\n       \
    \     result.add(numbers.get(i) / numbers.get(0));\n        }\n        return\
    \ result;\nreturn new ArrayList<Float>(Arrays.asList());\n    }\n    public static\
    \ void main(String[] args) {\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)2.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)1.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f, (float)49.9f)))).equals((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.25f,\
    \ (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpcph0szo9.java:18: error: incompatible types: List<Float> cannot\
    \ be converted to ArrayList<Float>\n        return result;\n               ^\n\
    1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        if (numbers.size() <= 1)\
    \ return numbers;\n        ArrayList<Float> scaled = numbers.stream().mapToInt(i\
    \ -> (int) (i / (numbers.get(numbers.size()) / 2))).boxed().collect(Collectors.toCollection(ArrayList::new));\n\
    \        scaled.add(0);\n        scaled.add(1);\n        return scaled;\nreturn\
    \ new ArrayList<Float>(Arrays.asList());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)2.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)1.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f, (float)49.9f)))).equals((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.25f,\
    \ (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp0u4yfus3.java:15: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        ArrayList<Float> scaled = numbers.stream().mapToInt(i\
    \ -> (int) (i / (numbers.get(numbers.size()) / 2))).boxed().collect(Collectors.toCollection(ArrayList::new));\n\
    \                                                                            \
    \                                                   ^\n    equality constraints:\
    \ Float,E\n    lower bounds: Integer\n  where T,C,E are type-variables:\n    T\
    \ extends Object declared in method <T,C>toCollection(Supplier<C>)\n    C extends\
    \ Collection<T> declared in method <T,C>toCollection(Supplier<C>)\n    E extends\
    \ Object declared in class ArrayList\n/tmp/tmp0u4yfus3.java:16: error: no suitable\
    \ method found for add(int)\n        scaled.add(0);\n              ^\n    method\
    \ Collection.add(Float) is not applicable\n      (argument mismatch; int cannot\
    \ be converted to Float)\n    method List.add(Float) is not applicable\n     \
    \ (argument mismatch; int cannot be converted to Float)\n    method AbstractCollection.add(Float)\
    \ is not applicable\n      (argument mismatch; int cannot be converted to Float)\n\
    \    method AbstractList.add(Float) is not applicable\n      (argument mismatch;\
    \ int cannot be converted to Float)\n    method ArrayList.add(Float) is not applicable\n\
    \      (argument mismatch; int cannot be converted to Float)\n/tmp/tmp0u4yfus3.java:17:\
    \ error: no suitable method found for add(int)\n        scaled.add(1);\n     \
    \         ^\n    method Collection.add(Float) is not applicable\n      (argument\
    \ mismatch; int cannot be converted to Float)\n    method List.add(Float) is not\
    \ applicable\n      (argument mismatch; int cannot be converted to Float)\n  \
    \  method AbstractCollection.add(Float) is not applicable\n      (argument mismatch;\
    \ int cannot be converted to Float)\n    method AbstractList.add(Float) is not\
    \ applicable\n      (argument mismatch; int cannot be converted to Float)\n  \
    \  method ArrayList.add(Float) is not applicable\n      (argument mismatch; int\
    \ cannot be converted to Float)\nNote: Some messages hav"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        List<Float> rescaled = new\
    \ ArrayList<>();\n\n        float max = numbers.stream().mapToDouble(n -> n).max();\n\
    \        rescaled.add(0.0f);\n        rescaled.add(1.0f);\n\n        for (int\
    \ i = 0; i < numbers.size(); i++) {\n            float ratio = (float) numbers.get(i)\
    \ / max;\n            rescaled.add(rescaled.get(i) * ratio + 0.0f);\n        }\n\
    \n        return rescaled;\nreturn new ArrayList<Float>(Arrays.asList());\n  \
    \  }\n    public static void main(String[] args) {\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)1.0f)))));\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f, (float)4.0f, (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpnd11tpto.java:16: error: incompatible types: OptionalDouble cannot\
    \ be converted to float\n        float max = numbers.stream().mapToDouble(n ->\
    \ n).max();\n                                                            ^\n/tmp/tmpnd11tpto.java:25:\
    \ error: incompatible types: List<Float> cannot be converted to ArrayList<Float>\n\
    \        return rescaled;\n               ^\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        // write your code here\n\
    \        ArrayList <Float> rescaledNumbers = new ArrayList <Float> ();\n     \
    \   int rescaledNumber = 0;\n        float originalNumber = numbers.get (0);\n\
    \        rescaledNumbers.add((float)0);\n        for (int i = 0; i < numbers.size\
    \ (); i++) {\n            rescaledNumbers.add((float)originalNumber + (numbers.get(i)\
    \ - originalNumber) / (numbers.size () - 1));\n        }\n        return rescaledNumbers;\n\
    return new ArrayList<Float>(Arrays.asList());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)2.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)1.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f, (float)49.9f)))).equals((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.25f,\
    \ (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpieyq9vfw.java:23: error: unreachable statement\nreturn new ArrayList<Float>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        // Write your code here\n\
    \        ArrayList<Float> returnList = new ArrayList<Float>();\n        ArrayList<Float>\
    \ newList = new ArrayList<Float>();\n        float maxValue = numbers.get(0) +\
    \ numbers.get(1);\n        float minValue = numbers.get(0) - numbers.get(1);\n\
    \        float newMaxValue = 0;\n        float newMinValue = 1;\n        float\
    \ maxValue = numbers.get(0) + numbers.get(1);\n        float minValue = numbers.get(0)\
    \ - numbers.get(1);\n        for(float num: numbers){\n            if(num>maxValue){\n\
    \                maxValue = num;\n            }\n            if(num<minValue){\n\
    \                minValue = num;\n            }\n        }\n        for(int i\
    \ = 0; i < numbers.size(); i++){\n            newList.add(num * maxValue/minValue);\n\
    \        }\n        return returnList;\nreturn new ArrayList<Float>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)1.0f)))));\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f, (float)4.0f, (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjflfkr6b.java:21: error: variable maxValue is already defined in\
    \ method rescaleToUnit(ArrayList<Float>)\n        float maxValue = numbers.get(0)\
    \ + numbers.get(1);\n              ^\n/tmp/tmpjflfkr6b.java:22: error: variable\
    \ minValue is already defined in method rescaleToUnit(ArrayList<Float>)\n    \
    \    float minValue = numbers.get(0) - numbers.get(1);\n              ^\n/tmp/tmpjflfkr6b.java:32:\
    \ error: cannot find symbol\n            newList.add(num * maxValue/minValue);\n\
    \                        ^\n  symbol:   variable num\n  location: class Problem\n\
    3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        if (numbers.size() < 2) {\n\
    \            return numbers;\n        }\n\n        ArrayList<Float> rescaled =\
    \ new ArrayList<>();\n        float min = numbers.get(0), max = numbers.get(0);\n\
    \        for (Float num : numbers) {\n            if (num < min) {\n         \
    \       rescaled.add(0);\n                min = num;\n            } else if (num\
    \ > max) {\n                rescaled.add(1);\n                max = num;\n   \
    \         } else {\n                rescaled.add(num - min);\n            }\n\
    \        }\n        return rescaled;\nreturn new ArrayList<Float>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)1.0f)))));\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f, (float)4.0f, (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp6irgifg9.java:22: error: no suitable method found for add(int)\n\
    \                rescaled.add(0);\n                        ^\n    method Collection.add(Float)\
    \ is not applicable\n      (argument mismatch; int cannot be converted to Float)\n\
    \    method List.add(Float) is not applicable\n      (argument mismatch; int cannot\
    \ be converted to Float)\n    method AbstractCollection.add(Float) is not applicable\n\
    \      (argument mismatch; int cannot be converted to Float)\n    method AbstractList.add(Float)\
    \ is not applicable\n      (argument mismatch; int cannot be converted to Float)\n\
    \    method ArrayList.add(Float) is not applicable\n      (argument mismatch;\
    \ int cannot be converted to Float)\n/tmp/tmp6irgifg9.java:25: error: no suitable\
    \ method found for add(int)\n                rescaled.add(1);\n              \
    \          ^\n    method Collection.add(Float) is not applicable\n      (argument\
    \ mismatch; int cannot be converted to Float)\n    method List.add(Float) is not\
    \ applicable\n      (argument mismatch; int cannot be converted to Float)\n  \
    \  method AbstractCollection.add(Float) is not applicable\n      (argument mismatch;\
    \ int cannot be converted to Float)\n    method AbstractList.add(Float) is not\
    \ applicable\n      (argument mismatch; int cannot be converted to Float)\n  \
    \  method ArrayList.add(Float) is not applicable\n      (argument mismatch; int\
    \ cannot be converted to Float)\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        ArrayList<Float> results\
    \ = new ArrayList<>();\n        float smallest = numbers.get(0);\n        float\
    \ largest = numbers.get(0);\n        for (int i = 0; i < numbers.size(); i++)\
    \ {\n            if (numbers.get(i) < smallest)\n                smallest = numbers.get(i);\n\
    \            if (numbers.get(i) > largest)\n                largest = numbers.get(i);\n\
    \        }\n        results.add(largest);\n        results.add(smallest);\n  \
    \      double scale = (double) largest;\n        for (int i = 0; i < numbers.size();\
    \ i++) {\n            results.add(((float) numbers.get(i)) / scale);\n       \
    \ }\n        return results;\nreturn new ArrayList<Float>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)1.0f)))));\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f, (float)4.0f, (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpl9kyhkkl.java:27: error: no suitable method found for add(double)\n\
    \            results.add(((float) numbers.get(i)) / scale);\n                \
    \   ^\n    method Collection.add(Float) is not applicable\n      (argument mismatch;\
    \ double cannot be converted to Float)\n    method List.add(Float) is not applicable\n\
    \      (argument mismatch; double cannot be converted to Float)\n    method AbstractCollection.add(Float)\
    \ is not applicable\n      (argument mismatch; double cannot be converted to Float)\n\
    \    method AbstractList.add(Float) is not applicable\n      (argument mismatch;\
    \ double cannot be converted to Float)\n    method ArrayList.add(Float) is not\
    \ applicable\n      (argument mismatch; double cannot be converted to Float)\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        final ArrayList<Float> result\
    \ = new ArrayList<>(numbers);\n        Float min = result.get(0);\n        Float\
    \ max = result.get(1);\n        Float range = max - min;\n        for (int i =\
    \ 2; i < result.size(); i++) {\n            result.set(i, result.get(i) * (range\
    \ + 1));\n        }\n        return result;\nreturn new ArrayList<Float>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)1.0f)))));\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f, (float)4.0f, (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp9fa16zn9.java:22: error: unreachable statement\nreturn new ArrayList<Float>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        ArrayList<Float> ret = new\
    \ ArrayList<Float>();\n        ArrayList<Float> scaled = new ArrayList<Float>();\n\
    \        float minX = 0, maxX = 0;\n        float scale = 1;\n        // min and\
    \ max are used to calculate scale factor.\n        // If any value lies outside\
    \ this range, use the next higher one\n        if (numbers.size() > 2) {\n   \
    \         minX = numbers.get(0); maxX = numbers.get(numbers.size() - 1);\n   \
    \     } else {\n            // If there is only one element, we can use that\n\
    \            if (numbers.size() == 1) {\n                minX = numbers.get(0);\
    \ maxX = numbers.get(0);\n            }\n            // else, find the min and\
    \ max of the given numbers\n            else {\n                minX = numbers.get(0);\
    \ maxX = Collections.max(numbers);\n            }\n        }\n        for (float\
    \ x : numbers) {\n            float scaledX = ((x - minX) / (maxX - minX))\n \
    \                   * scale;\n            scaled.add(scaledX);\n        }\n  \
    \      for (float x : scaled) {\n            ret.add(x);\n        }\n        return\
    \ ret;\nreturn new ArrayList<Float>(Arrays.asList());\n    }\n    public static\
    \ void main(String[] args) {\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)2.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)1.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f, (float)49.9f)))).equals((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.25f,\
    \ (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmph1qnwa4q.java:41: error: unreachable statement\nreturn new ArrayList<Float>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        ArrayList<Float> scaled =\
    \ numbers.stream().map(x -> {\n            if (x>0.0) {\n                return\
    \ (1.0 * x) / x;\n            } else {\n                return (1.0 * x) / (1.0\
    \ * x);\n            }\n        }).collect(Collectors.toCollection(ArrayList::new));\n\
    \        return scaled;\nreturn new ArrayList<Float>(Arrays.asList());\n    }\n\
    \    public static void main(String[] args) {\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)2.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)1.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f, (float)49.9f)))).equals((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.25f,\
    \ (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpk7lgpwdy.java:20: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        }).collect(Collectors.toCollection(ArrayList::new));\n\
    \                  ^\n    equality constraints: Float,E\n    lower bounds: Double\n\
    \  where T,C,E are type-variables:\n    T extends Object declared in method <T,C>toCollection(Supplier<C>)\n\
    \    C extends Collection<T> declared in method <T,C>toCollection(Supplier<C>)\n\
    \    E extends Object declared in class ArrayList\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        if (numbers.size() < 2)\n\
    \            return null;\n\n        ArrayList<Float> result = new ArrayList<>(numbers);\n\
    \        Collections.sort(result);\n        if (result.get(0) == result.get(1))\n\
    \            return result;\n\n        float max = result.get(result.size() -\
    \ 1);\n        float min = result.get(0);\n        float scale = max - min;\n\
    \        for (Integer i = 0; i < result.size(); i++) {\n            result.set(i,\
    \ result.get(i) * scale + min);\n        }\n        return result;\nreturn new\
    \ ArrayList<Float>(Arrays.asList());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)2.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)1.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f, (float)49.9f)))).equals((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.25f,\
    \ (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp5jp78x0w.java:29: error: unreachable statement\nreturn new ArrayList<Float>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        ArrayList<Float> rescaledNumbers\
    \ = new ArrayList<Float>();\n        for (float number : numbers) {\n        \
    \    rescaledNumbers.add((number - Math.min(number, Math.max(number))) / Math.max(Math.abs(number),\
    \ Math.abs(Math.min(number, Math.max(number))));\n        }\n        return rescaledNumbers;\n\
    return new ArrayList<Float>(Arrays.asList());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)2.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)1.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f, (float)49.9f)))).equals((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.25f,\
    \ (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpog6c5__g.java:16: error: ')' expected\n            rescaledNumbers.add((number\
    \ - Math.min(number, Math.max(number))) / Math.max(Math.abs(number), Math.abs(Math.min(number,\
    \ Math.max(number))));\n                                                     \
    \                                                                            \
    \                       ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        ArrayList<Float> result =\
    \ new ArrayList<Float>();\n        double smallest = numbers.get(0); double largest\
    \ = numbers.get(0);\n        for (int i = 0; i < numbers.size(); i++) {\n    \
    \        double value = numbers.get(i);\n            smallest = Math.min(smallest,\
    \ value);\n            largest = Math.max(largest, value);\n            result.add(0\
    \ - (value - smallest) / (largest - smallest));\n        }\n        return result;\n\
    return new ArrayList<Float>(Arrays.asList());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)2.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)1.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f, (float)49.9f)))).equals((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.25f,\
    \ (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpu6ifc7n_.java:20: error: no suitable method found for add(double)\n\
    \            result.add(0 - (value - smallest) / (largest - smallest));\n    \
    \              ^\n    method Collection.add(Float) is not applicable\n      (argument\
    \ mismatch; double cannot be converted to Float)\n    method List.add(Float) is\
    \ not applicable\n      (argument mismatch; double cannot be converted to Float)\n\
    \    method AbstractCollection.add(Float) is not applicable\n      (argument mismatch;\
    \ double cannot be converted to Float)\n    method AbstractList.add(Float) is\
    \ not applicable\n      (argument mismatch; double cannot be converted to Float)\n\
    \    method ArrayList.add(Float) is not applicable\n      (argument mismatch;\
    \ double cannot be converted to Float)\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        if (numbers.isEmpty()) {\n\
    \            return new ArrayList<Float>();\n        } else if (numbers.size()\
    \ == 1) {\n            return new ArrayList<Float>() {\n                {add(numbers.get(0));}\n\
    \            };\n        } else {\n            double max = Double.MIN_VALUE;\n\
    \            double min = Double.MAX_VALUE;\n            for (float num : numbers)\
    \ {\n                double d = (num - min) / (max - min);\n                max\
    \ = Math.max(max, num);\n                min = Math.min(min, num);\n         \
    \   }\n            min = -0.25;\n            max = 0.75;\n            double delta\
    \ = (max - min);\n            ArrayList<Float> list = new ArrayList<Float>();\n\
    \            list.add((float)min);\n            for (float num : numbers) {\n\
    \                double d = (num - min) / (max - min);\n                list.add((float)(num\
    \ - delta * d));\n            }\n            return list;\n        }\nreturn new\
    \ ArrayList<Float>(Arrays.asList());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)2.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)1.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f, (float)49.9f)))).equals((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.25f,\
    \ (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpwjehkamu.java:39: error: unreachable statement\nreturn new ArrayList<Float>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        if (numbers.isEmpty()) return\
    \ new ArrayList<Float>(); // nothing to do\n        // first, let's assume our\
    \ list is properly sorted\n        float min = numbers.get(0); // we'll assume\
    \ this will be the first number\n        float max = numbers.get(0); // we'll\
    \ assume this will be the first number\n        for (Float f : numbers) {\n  \
    \          min = Math.min(min, f);\n            max = Math.max(max, f);\n    \
    \    }\n        float range = max - min;\n        // now apply the scaling transformation\n\
    \        ArrayList<Float> rescaled = new ArrayList<Float>(numbers);\n        for\
    \ (Float f : numbers) {\n            rescaled.add((f - min) / range * 2 - 1);\n\
    \        }\n        return rescaled;\nreturn new ArrayList<Float>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)1.0f)))));\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f, (float)4.0f, (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjrcqnfn3.java:29: error: unreachable statement\nreturn new ArrayList<Float>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        ArrayList<Float> result =\
    \ new ArrayList<Float>();\n        double min = Collections.min(numbers);\n  \
    \      double max = Collections.max(numbers);\n        // Handle case where only\
    \ min or only max is present\n        if (min == max) {\n            result.add(0.0);\n\
    \            result.add(1.0);\n        } else {\n            // Scale by (max\
    \ - min) so that minimum value becomes 0 and maximum value becomes 1\n       \
    \     result.add((float) (max - min) / (1.0 + max - min));\n            result.add(0.0);\n\
    \            result.add(1.0);\n        }\n        return result;\nreturn new ArrayList<Float>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)1.0f)))));\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f, (float)4.0f, (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp73tvub3i.java:19: error: no suitable method found for add(double)\n\
    \            result.add(0.0);\n                  ^\n    method Collection.add(Float)\
    \ is not applicable\n      (argument mismatch; double cannot be converted to Float)\n\
    \    method List.add(Float) is not applicable\n      (argument mismatch; double\
    \ cannot be converted to Float)\n    method AbstractCollection.add(Float) is not\
    \ applicable\n      (argument mismatch; double cannot be converted to Float)\n\
    \    method AbstractList.add(Float) is not applicable\n      (argument mismatch;\
    \ double cannot be converted to Float)\n    method ArrayList.add(Float) is not\
    \ applicable\n      (argument mismatch; double cannot be converted to Float)\n\
    /tmp/tmp73tvub3i.java:20: error: no suitable method found for add(double)\n  \
    \          result.add(1.0);\n                  ^\n    method Collection.add(Float)\
    \ is not applicable\n      (argument mismatch; double cannot be converted to Float)\n\
    \    method List.add(Float) is not applicable\n      (argument mismatch; double\
    \ cannot be converted to Float)\n    method AbstractCollection.add(Float) is not\
    \ applicable\n      (argument mismatch; double cannot be converted to Float)\n\
    \    method AbstractList.add(Float) is not applicable\n      (argument mismatch;\
    \ double cannot be converted to Float)\n    method ArrayList.add(Float) is not\
    \ applicable\n      (argument mismatch; double cannot be converted to Float)\n\
    /tmp/tmp73tvub3i.java:23: error: no suitable method found for add(double)\n  \
    \          result.add((float) (max - min) / (1.0 + max - min));\n            \
    \      ^\n    method Collection.add(Float) is not applicable\n      (argument\
    \ mismatch; double cannot be converted to Float)\n    method List.add(Float) is\
    \ not applicable\n      (argument mismatch; double cannot be converted to Float)\n\
    \    method AbstractCollection.add(Float) is not applicable\n      (argument mismatch;\
    \ double cannot be converted to Float)\n    method AbstractList.add(Float) is\
    \ not applicable\n      (argument mismatch; double cannot be converted to Float)\n\
    \    method ArrayList.add(Float) is no"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        if (numbers.isEmpty()) return\
    \ new ArrayList<Float>();\n\n        ArrayList<Float> rescaled = new ArrayList<Float>();\n\
    \        float min = numbers.get(0); \n        float max = numbers.get(0);\n \
    \       for (float number : numbers) {\n            rescaled.add(0 + ((number\
    \ - min) / (max - min)));\n            min = number;\n            max = number;\n\
    \        }\n        return rescaled;\nreturn new ArrayList<Float>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)1.0f)))));\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f, (float)4.0f, (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpjgv0t9iy.java:25: error: unreachable statement\nreturn new ArrayList<Float>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        if (numbers.size() < 2) {\n\
    \            return null;\n        }\n\n        double min = numbers.get(0),\n\
    \            max = numbers.get(0);\n        for (int i = 1; i < numbers.size();\
    \ i++) {\n            min = Math.min(min, numbers.get(i));\n            max =\
    \ Math.max(max, numbers.get(i));\n        }\n\n        double deltaMax = max -\
    \ min;\n\n        for (int i = 0; i < numbers.size(); i++) {\n            numbers.set(i\
    \ * deltaMax / numbers.size(), deltaMax);\n        }\n\n        return numbers;\n\
    return new ArrayList<Float>(Arrays.asList());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)2.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)1.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f, (float)49.9f)))).equals((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.25f,\
    \ (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzeii2ae5.java:28: error: no suitable method found for set(double,double)\n\
    \            numbers.set(i * deltaMax / numbers.size(), deltaMax);\n         \
    \          ^\n    method List.set(int,Float) is not applicable\n      (argument\
    \ mismatch; possible lossy conversion from double to int)\n    method AbstractList.set(int,Float)\
    \ is not applicable\n      (argument mismatch; possible lossy conversion from\
    \ double to int)\n    method ArrayList.set(int,Float) is not applicable\n    \
    \  (argument mismatch; possible lossy conversion from double to int)\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        if (numbers.isEmpty())\n\
    \            return new ArrayList<Float>();\n        if (numbers.size() <= 1)\n\
    \            return numbers;\n        ArrayList<Float> scaledNumbers = new ArrayList<Float>();\n\
    \        for (Float number : numbers) {\n            if (number >= 0 && number\
    \ <= 1)\n                scaledNumbers.add(number);\n            else\n      \
    \          scaledNumbers.add(0);\n        }\n        return scaledNumbers;\nreturn\
    \ new ArrayList<Float>(Arrays.asList());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)2.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)1.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f, (float)49.9f)))).equals((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.25f,\
    \ (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpityaplf7.java:23: error: no suitable method found for add(int)\n\
    \                scaledNumbers.add(0);\n                             ^\n    method\
    \ Collection.add(Float) is not applicable\n      (argument mismatch; int cannot\
    \ be converted to Float)\n    method List.add(Float) is not applicable\n     \
    \ (argument mismatch; int cannot be converted to Float)\n    method AbstractCollection.add(Float)\
    \ is not applicable\n      (argument mismatch; int cannot be converted to Float)\n\
    \    method AbstractList.add(Float) is not applicable\n      (argument mismatch;\
    \ int cannot be converted to Float)\n    method ArrayList.add(Float) is not applicable\n\
    \      (argument mismatch; int cannot be converted to Float)\nNote: Some messages\
    \ have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        ArrayList<Float> resultList\
    \ = new ArrayList<>();\n        float min = numbers.get(0); // Store the min value\
    \ to scale to 0\n        float max = numbers.get(numbers.size()-1); // Store the\
    \ max value to scale to 1\n        float range = max - min; // Range of numbers\n\
    \        for (float number: numbers) {\n            float scalingFactor = number\
    \ - min; // How much should each number be scaled to \n            resultList.add(scalingFactor\
    \ * range); // Scale the number to the range minus min to range\n        }\n \
    \       return resultList;\nreturn new ArrayList<Float>(Arrays.asList());\n  \
    \  }\n    public static void main(String[] args) {\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)1.0f)))));\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f, (float)4.0f, (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpx6joqh_e.java:23: error: unreachable statement\nreturn new ArrayList<Float>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        ArrayList<Float> result =\
    \ new ArrayList<Float>();\n        result.add(numbers.get(0));\n        result.add(numbers.get(0));\n\
    \        for (Float i : numbers) {\n            int pos = result.size() - 1;\n\
    \            while (pos > 0 && !isZero(result.get(pos)) && isZero(i)) {\n    \
    \            results.set(pos, result.get(pos) - 1);\n                pos -= 1;\n\
    \            }\n            if (pos == 0 || isZero(i)) {\n                results.add(i);\
    \ \n            } else {\n                results.set(pos, result.get(pos) + 1);\n\
    \            }\n        }\n        return results;\nreturn new ArrayList<Float>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)1.0f)))));\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f, (float)4.0f, (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpy1bz1r8n.java:19: error: cannot find symbol\n            while\
    \ (pos > 0 && !isZero(result.get(pos)) && isZero(i)) {\n                     \
    \          ^\n  symbol:   method isZero(Float)\n  location: class Problem\n/tmp/tmpy1bz1r8n.java:19:\
    \ error: cannot find symbol\n            while (pos > 0 && !isZero(result.get(pos))\
    \ && isZero(i)) {\n                                                          ^\n\
    \  symbol:   method isZero(Float)\n  location: class Problem\n/tmp/tmpy1bz1r8n.java:20:\
    \ error: cannot find symbol\n                results.set(pos, result.get(pos)\
    \ - 1);\n                ^\n  symbol:   variable results\n  location: class Problem\n\
    /tmp/tmpy1bz1r8n.java:23: error: cannot find symbol\n            if (pos == 0\
    \ || isZero(i)) {\n                            ^\n  symbol:   method isZero(Float)\n\
    \  location: class Problem\n/tmp/tmpy1bz1r8n.java:24: error: cannot find symbol\n\
    \                results.add(i); \n                ^\n  symbol:   variable results\n\
    \  location: class Problem\n/tmp/tmpy1bz1r8n.java:26: error: cannot find symbol\n\
    \                results.set(pos, result.get(pos) + 1);\n                ^\n \
    \ symbol:   variable results\n  location: class Problem\n/tmp/tmpy1bz1r8n.java:29:\
    \ error: cannot find symbol\n        return results;\n               ^\n  symbol:\
    \   variable results\n  location: class Problem\n7 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        Arrays.sort(numbers);\n \
    \       float newMin = numbers.get(0);\n        float newMax = numbers.get(1);\n\
    \        if (newMax == newMin) {\n            return numbers;\n        } else\
    \ {\n            float scale = newMax - newMin;\n            for (int i = 0; i\
    \ < numbers.size(); i++) {\n                numbers.set(0, (numbers.get(0) - newMin)\
    \ / scale);\n                numbers.set(1, (numbers.get(1) - newMax) / scale);\n\
    \            }\n            return numbers;\n        }\nreturn new ArrayList<Float>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)1.0f)))));\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f, (float)4.0f, (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpd8eouu92.java:14: error: no suitable method found for sort(ArrayList<Float>)\n\
    \        Arrays.sort(numbers);\n              ^\n    method Arrays.sort(int[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Float> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Float> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Float> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Float> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Float> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Float> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Float> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Float> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        ArrayList<Float> rescaledNumbers\
    \ = new ArrayList<Float>();\n        double minimum = numbers.get(0); \n     \
    \   double maximum = numbers.get(0);\n        for(Float number : numbers) {\n\
    \            rescaledNumbers.add(Math.min(1, number));\n            rescaledNumbers.add(Math.max(0,\
    \ number));\n        }\n        rescaledNumbers.add(1);\n        rescaledNumbers.add(1);\n\
    \        return rescaledNumbers;\nreturn new ArrayList<Float>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)1.0f)))));\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f, (float)4.0f, (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpac2uc5el.java:21: error: no suitable method found for add(int)\n\
    \        rescaledNumbers.add(1);\n                       ^\n    method Collection.add(Float)\
    \ is not applicable\n      (argument mismatch; int cannot be converted to Float)\n\
    \    method List.add(Float) is not applicable\n      (argument mismatch; int cannot\
    \ be converted to Float)\n    method AbstractCollection.add(Float) is not applicable\n\
    \      (argument mismatch; int cannot be converted to Float)\n    method AbstractList.add(Float)\
    \ is not applicable\n      (argument mismatch; int cannot be converted to Float)\n\
    \    method ArrayList.add(Float) is not applicable\n      (argument mismatch;\
    \ int cannot be converted to Float)\n/tmp/tmpac2uc5el.java:22: error: no suitable\
    \ method found for add(int)\n        rescaledNumbers.add(1);\n               \
    \        ^\n    method Collection.add(Float) is not applicable\n      (argument\
    \ mismatch; int cannot be converted to Float)\n    method List.add(Float) is not\
    \ applicable\n      (argument mismatch; int cannot be converted to Float)\n  \
    \  method AbstractCollection.add(Float) is not applicable\n      (argument mismatch;\
    \ int cannot be converted to Float)\n    method AbstractList.add(Float) is not\
    \ applicable\n      (argument mismatch; int cannot be converted to Float)\n  \
    \  method ArrayList.add(Float) is not applicable\n      (argument mismatch; int\
    \ cannot be converted to Float)\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        ArrayList<Float> result =\
    \ new ArrayList<>(numbers);\n        for (int i = numbers.size()-2; i >= 0; --i)\
    \ {\n            float minNum = numbers.get(i);\n            float maxNum = numbers.get(i+1);\n\
    \            result.add(minNum - maxNum);\n        }\n        return result;\n\
    return new ArrayList<Float>(Arrays.asList());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)2.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)1.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f, (float)49.9f)))).equals((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.25f,\
    \ (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpa934ji2_.java:21: error: unreachable statement\nreturn new ArrayList<Float>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        ArrayList<Float> result =\
    \ new ArrayList<>(numbers);\n        Collections.sort(result);\n        for (Float\
    \ f : result) {\n            if (f < 0.5f) {\n                f = 0f;\n      \
    \      } else if (f > 0.5f) {\n                f = 1f;\n            }\n      \
    \      result.add(f);\n        }\n        return result;\nreturn new ArrayList<Float>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)1.0f)))));\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f, (float)4.0f, (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpnu4h74r6.java:25: error: unreachable statement\nreturn new ArrayList<Float>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        ArrayList<Float> newList\
    \ = new ArrayList<Float>(numbers.size());\n        for (Float i : numbers) {\n\
    \            newList.add(i * Float.MAX_VALUE);\n        }\n        return newList;\n\
    return new ArrayList<Float>(Arrays.asList());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)2.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)1.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f, (float)49.9f)))).equals((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.25f,\
    \ (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpshy8cnf1.java:19: error: unreachable statement\nreturn new ArrayList<Float>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        int n = numbers.size();\n\
    \        ArrayList<Float> results = new ArrayList<>(n);\n        for (int i =\
    \ 0; i < n; ++i) {\n            results.add(linearTransform(numbers.get(i)));\n\
    \        }\n        return results;\nreturn new ArrayList<Float>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)1.0f)))));\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f, (float)4.0f, (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmp96xjznk_.java:17: error: cannot find symbol\n            results.add(linearTransform(numbers.get(i)));\n\
    \                        ^\n  symbol:   method linearTransform(Float)\n  location:\
    \ class Problem\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        if (numbers.isEmpty()) {\n\
    \            throw new RuntimeException(\"Can't rescale a empty list\");\n   \
    \     }\n        ArrayList<Float> rescaled = new ArrayList<Float>();\n       \
    \ rescaled.add(0.0);\n        rescaled.add(1.0);\n        final float min = rescaled.get(0);\n\
    \        final float max = rescaled.get(1);\n        for (Float f : numbers) {\n\
    \            if (min > f) {\n                rescaled.add(0.0);\n            \
    \    rescaled.add(1.0);\n            } else if (max < f) {\n                rescaled.add(0.0);\n\
    \                rescaled.add(1.0);\n            } else if (f <= min) {\n    \
    \            rescaled.add(0.0);\n                rescaled.add(1.0);\n        \
    \    } else if (f >= max) {\n                rescaled.add(1.0);\n            \
    \    rescaled.add(1.0);\n            } else if (f <= min && f >= max) {\n    \
    \            rescaled.add(1.0);\n                rescaled.add(1.0);\n        \
    \    } else {\n                rescaled.add((f - min) / (max - min));\n      \
    \      }\n        }\n        return rescaled;\nreturn new ArrayList<Float>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)1.0f)))));\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f, (float)4.0f, (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmptq2fr692.java:18: error: no suitable method found for add(double)\n\
    \        rescaled.add(0.0);\n                ^\n    method Collection.add(Float)\
    \ is not applicable\n      (argument mismatch; double cannot be converted to Float)\n\
    \    method List.add(Float) is not applicable\n      (argument mismatch; double\
    \ cannot be converted to Float)\n    method AbstractCollection.add(Float) is not\
    \ applicable\n      (argument mismatch; double cannot be converted to Float)\n\
    \    method AbstractList.add(Float) is not applicable\n      (argument mismatch;\
    \ double cannot be converted to Float)\n    method ArrayList.add(Float) is not\
    \ applicable\n      (argument mismatch; double cannot be converted to Float)\n\
    /tmp/tmptq2fr692.java:19: error: no suitable method found for add(double)\n  \
    \      rescaled.add(1.0);\n                ^\n    method Collection.add(Float)\
    \ is not applicable\n      (argument mismatch; double cannot be converted to Float)\n\
    \    method List.add(Float) is not applicable\n      (argument mismatch; double\
    \ cannot be converted to Float)\n    method AbstractCollection.add(Float) is not\
    \ applicable\n      (argument mismatch; double cannot be converted to Float)\n\
    \    method AbstractList.add(Float) is not applicable\n      (argument mismatch;\
    \ double cannot be converted to Float)\n    method ArrayList.add(Float) is not\
    \ applicable\n      (argument mismatch; double cannot be converted to Float)\n\
    /tmp/tmptq2fr692.java:24: error: no suitable method found for add(double)\n  \
    \              rescaled.add(0.0);\n                        ^\n    method Collection.add(Float)\
    \ is not applicable\n      (argument mismatch; double cannot be converted to Float)\n\
    \    method List.add(Float) is not applicable\n      (argument mismatch; double\
    \ cannot be converted to Float)\n    method AbstractCollection.add(Float) is not\
    \ applicable\n      (argument mismatch; double cannot be converted to Float)\n\
    \    method AbstractList.add(Float) is not applicable\n      (argument mismatch;\
    \ double cannot be converted to Float)\n    method ArrayList.add(Float) is not\
    \ applicable\n      (argument mis"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        ArrayList<Float> results\
    \ = new ArrayList<Float>();\n        double min = Double.MAX_VALUE;\n        double\
    \ max = -Double.MAX_VALUE;\n        for (Float number : numbers) {\n         \
    \   min = Math.min(min, number);\n            max = Math.max(max, number);\n \
    \       }\n        if (min == 0.0) {\n            min = 1.0;\n            max\
    \ = 1.0;\n        }\n        for (Float number : numbers) {\n            double\
    \ range = (max - min);\n            float normalized = (number - min) / range;\n\
    \            results.add(normalized + 0.5);\n        }\n        return results;\n\
    return new ArrayList<Float>(Arrays.asList());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)2.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)1.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f, (float)49.9f)))).equals((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.25f,\
    \ (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpx2run1jv.java:27: error: incompatible types: possible lossy conversion\
    \ from double to float\n            float normalized = (number - min) / range;\n\
    \                                              ^\n/tmp/tmpx2run1jv.java:28: error:\
    \ no suitable method found for add(double)\n            results.add(normalized\
    \ + 0.5);\n                   ^\n    method Collection.add(Float) is not applicable\n\
    \      (argument mismatch; double cannot be converted to Float)\n    method List.add(Float)\
    \ is not applicable\n      (argument mismatch; double cannot be converted to Float)\n\
    \    method AbstractCollection.add(Float) is not applicable\n      (argument mismatch;\
    \ double cannot be converted to Float)\n    method AbstractList.add(Float) is\
    \ not applicable\n      (argument mismatch; double cannot be converted to Float)\n\
    \    method ArrayList.add(Float) is not applicable\n      (argument mismatch;\
    \ double cannot be converted to Float)\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        if (numbers.isEmpty()) {\n\
    \            return Collections.emptyList();\n        }\n        if (numbers.size()\
    \ < 2) {\n            return Collections.singletonList(numbers.get(0));\n    \
    \    }\n        ArrayList<Float> scaledNumbers = new ArrayList<>(numbers.size());\n\
    \        scaledNumbers.add(numbers.get(0));\n        for (int i = 1; i < numbers.size();\
    \ i++) {\n            float number = numbers.get(i) / (numbers.get(i) + numbers.get(i));\n\
    \            scaledNumbers.add(number);\n        }\n        return scaledNumbers;\n\
    return new ArrayList<Float>(Arrays.asList());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)2.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)1.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f, (float)49.9f)))).equals((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.25f,\
    \ (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpsrx348m6.java:15: error: incompatible types: no instance(s) of\
    \ type variable(s) T exist so that List<T> conforms to ArrayList<Float>\n    \
    \        return Collections.emptyList();\n                                   \
    \     ^\n  where T is a type-variable:\n    T extends Object declared in method\
    \ <T>emptyList()\n/tmp/tmpsrx348m6.java:18: error: incompatible types: no instance(s)\
    \ of type variable(s) T exist so that List<T> conforms to ArrayList<Float>\n \
    \           return Collections.singletonList(numbers.get(0));\n              \
    \                              ^\n  where T is a type-variable:\n    T extends\
    \ Object declared in method <T>singletonList(T)\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        ArrayList<Float> numbers_copy\
    \ = numbers.clone();\n        float first_min = numbers_copy.stream().min(Float::compare).get();\n\
    \        float first_max = numbers_copy.stream().max(Float::compare).get();\n\
    \        float factor = first_max / first_min;\n        numbers_copy.remove(0);\
    \ // remove the first item from the list\n\n        double result = 0;\n     \
    \   for (float number : numbers_copy) {\n            result += number * factor;\n\
    \        }\n\n        ArrayList<Float> result = new ArrayList<>();\n        result.add(Float.intBitsToFloat(result));\n\
    \        result.add(1);\n        return result;\nreturn new ArrayList<Float>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)1.0f)))));\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f, (float)4.0f, (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmphnpfznrp.java:14: error: incompatible types: Object cannot be converted\
    \ to ArrayList<Float>\n        ArrayList<Float> numbers_copy = numbers.clone();\n\
    \                                                     ^\n/tmp/tmphnpfznrp.java:25:\
    \ error: variable result is already defined in method rescaleToUnit(ArrayList<Float>)\n\
    \        ArrayList<Float> result = new ArrayList<>();\n                      \
    \   ^\n/tmp/tmphnpfznrp.java:26: error: incompatible types: possible lossy conversion\
    \ from double to int\n        result.add(Float.intBitsToFloat(result));\n    \
    \                                    ^\n/tmp/tmphnpfznrp.java:26: error: double\
    \ cannot be dereferenced\n        result.add(Float.intBitsToFloat(result));\n\
    \              ^\n/tmp/tmphnpfznrp.java:27: error: double cannot be dereferenced\n\
    \        result.add(1);\n              ^\n/tmp/tmphnpfznrp.java:28: error: incompatible\
    \ types: double cannot be converted to ArrayList<Float>\n        return result;\n\
    \               ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n6 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        int smallest = Collections.min(numbers);\n\
    \        int largest = Collections.max(numbers);\n        numbers.stream().mapToDouble(d\
    \ -> (d - smallest) / (largest - smallest)).boxed().collect(Collectors.toList());\n\
    \        return numbers;\nreturn new ArrayList<Float>(Arrays.asList());\n    }\n\
    \    public static void main(String[] args) {\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)2.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)1.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f, (float)49.9f)))).equals((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.25f,\
    \ (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzaltw57f.java:14: error: incompatible types: no instance(s) of\
    \ type variable(s)  exist so that T conforms to int\n        int smallest = Collections.min(numbers);\n\
    \                                      ^\n  where T is a type-variable:\n    T\
    \ extends Object,Comparable<? super T> declared in method <T>min(Collection<?\
    \ extends T>)\n/tmp/tmpzaltw57f.java:15: error: incompatible types: no instance(s)\
    \ of type variable(s)  exist so that T conforms to int\n        int largest =\
    \ Collections.max(numbers);\n                                     ^\n  where T\
    \ is a type-variable:\n    T extends Object,Comparable<? super T> declared in\
    \ method <T>max(Collection<? extends T>)\n2 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        return Arrays.stream(numbers).mapToObj(Math::min)\n\
    \                .map(f -> f / numbers.size()).toArray(Float[]::new);\nreturn\
    \ new ArrayList<Float>(Arrays.asList());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)2.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)1.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f, (float)49.9f)))).equals((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.25f,\
    \ (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpor6f4b8p.java:14: error: no suitable method found for stream(ArrayList<Float>)\n\
    \        return Arrays.stream(numbers).mapToObj(Math::min)\n                 \
    \    ^\n    method Arrays.<T#1>stream(T#1[]) is not applicable\n      (cannot\
    \ infer type-variable(s) T#1\n        (argument mismatch; ArrayList<Float> cannot\
    \ be converted to T#1[]))\n    method Arrays.<T#2>stream(T#2[],int,int) is not\
    \ applicable\n      (cannot infer type-variable(s) T#2\n        (actual and formal\
    \ argument lists differ in length))\n    method Arrays.stream(int[]) is not applicable\n\
    \      (argument mismatch; ArrayList<Float> cannot be converted to int[])\n  \
    \  method Arrays.stream(long[]) is not applicable\n      (argument mismatch; ArrayList<Float>\
    \ cannot be converted to long[])\n    method Arrays.stream(double[]) is not applicable\n\
    \      (argument mismatch; ArrayList<Float> cannot be converted to double[])\n\
    \  where T#1,T#2 are type-variables:\n    T#1 extends Object declared in method\
    \ <T#1>stream(T#1[])\n    T#2 extends Object declared in method <T#2>stream(T#2[],int,int)\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        if (numbers.isEmpty())\n\
    \            return numbers;\n        ArrayList<Float> rescaled = new ArrayList<Float>(numbers);\n\
    \        Collections.sort(rescaled);\n        int index = 0;\n        while (index\
    \ < rescaled.size() - 1) {\n            rescaled.set(index, (rescaled.get(index)\
    \ + rescaled.get(index + 1)) / 2f);\n            index += 1;\n        }\n    \
    \    return rescaled;\nreturn new ArrayList<Float>(Arrays.asList());\n    }\n\
    \    public static void main(String[] args) {\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)2.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)1.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f, (float)49.9f)))).equals((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f, (float)4.0f,\
    \ (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f, (float)0.25f,\
    \ (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpj0xx5dh2.java:24: error: unreachable statement\nreturn new ArrayList<Float>(Arrays.asList());\n\
    ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        float[] array = numbers.stream().mapToFloat(Number::floatValue).toArray();\n\
    \n        float min = Math.min(array[0], array[1]);\n        float max = Math.max(array[0],\
    \ array[1]);\n\n        if (min == max)\n            throw new IllegalArgumentException(\"\
    List contains only one number: \" + numbers);\n        int minIndex = 0;\n   \
    \     int maxIndex = 0;\n\n        if (max > min)\n            maxIndex = numbers.size()\
    \ - 1;\n        else\n            minIndex = numbers.size() - 1;\n\n        for\
    \ (int i = 0; i < numbers.size(); i++) {\n            float scaled = (float) (array[i]\
    \ - min) / (max - min);\n            if (i == minIndex)\n                array[i]\
    \ = scaled;\n            else if (i == maxIndex)\n                array[i] = scaled\
    \ * (numbers.size() - 1);\n            else\n                array[i] = scaled;\n\
    \        }\n\n        return Arrays.asList(array);\nreturn new ArrayList<Float>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)1.0f)))));\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f, (float)4.0f, (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpzhres0oo.java:14: error: cannot find symbol\n        float[] array\
    \ = numbers.stream().mapToFloat(Number::floatValue).toArray();\n             \
    \                           ^\n  symbol:   method mapToFloat(Number::floatValue)\n\
    \  location: interface Stream<Float>\n/tmp/tmpzhres0oo.java:14: error: invalid\
    \ method reference\n        float[] array = numbers.stream().mapToFloat(Number::floatValue).toArray();\n\
    \                                                    ^\n  non-static method floatValue()\
    \ cannot be referenced from a static context\n/tmp/tmpzhres0oo.java:39: error:\
    \ incompatible types: no instance(s) of type variable(s) T exist so that List<T>\
    \ conforms to ArrayList<Float>\n        return Arrays.asList(array);\n       \
    \                     ^\n  where T is a type-variable:\n    T extends Object declared\
    \ in method <T>asList(T...)\n3 errors\n"
  exit_code: 1
  status: SyntaxError
- program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n    // such that the smallest number will\
    \ become 0 and the largest will become 1\n    // >>> rescale_to_unit([1.0, 2.0,\
    \ 3.0, 4.0, 5.0])\n    // [0.0, 0.25, 0.5, 0.75, 1.0]\n    public static ArrayList<Float>\
    \ rescaleToUnit(ArrayList<Float> numbers) {\n        if (numbers.isEmpty()) {\n\
    \            return numbers;\n        }\n\n        final float minNumber = Collections.min(numbers);\n\
    \        final float maxNumber = Collections.max(numbers);\n        final float\
    \ range = maxNumber - minNumber;\n        final float scale = range == 0.0 ? 0.000001\
    \ : range;\n\n        for (Float number : numbers) {\n            number *= scale;\n\
    \        }\n\n        return numbers;\nreturn new ArrayList<Float>(Arrays.asList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)1.0f)))));\n    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)49.9f)))).equals((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)0.0f)))));\n\
    \    assert(rescaleToUnit((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f, (float)4.0f, (float)5.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.0f,\
    \ (float)0.25f, (float)0.5f, (float)0.75f, (float)1.0f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)2.0f, (float)1.0f, (float)5.0f, (float)3.0f,\
    \ (float)4.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    assert(rescaleToUnit((new\
    \ ArrayList<Float>(Arrays.asList((float)12.0f, (float)11.0f, (float)15.0f, (float)13.0f,\
    \ (float)14.0f)))).equals((new ArrayList<Float>(Arrays.asList((float)0.25f, (float)0.0f,\
    \ (float)1.0f, (float)0.5f, (float)0.75f)))));\n    }\n\n}\n"
  stdout: ''
  stderr: "/tmp/tmpi5tzv_dv.java:21: error: incompatible types: possible lossy conversion\
    \ from double to float\n        final float scale = range == 0.0 ? 0.000001 :\
    \ range;\n                                         ^\n1 error\n"
  exit_code: 1
  status: SyntaxError
