language: java
name: HumanEval_161_solve
results:
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        String[]\
    \ sArray = s.split(\"\");\n        String result = \"\";\n        for (String\
    \ s2 : sArray) {\n            String s2 = s2.toLowerCase();\n            if (s2.matches(\"\
    [a-zA-Z]\")) {\n                String s3 = \"\";\n                for (int i\
    \ = s2.length() - 1; i >= 0; i--) {\n                    s3 += s2.charAt(i);\n\
    \                }\n                result = result + s3;\n            } else\
    \ {\n                result = result + s2;\n            }\n        }\n       \
    \ result = result.replaceAll(\"^\", \"\").replaceAll(\"$\", \"\");\n        return\
    \ result;\n}\n    public static void main(String[] args) {\n    assert(solve((\"\
    AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n\
    \    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9p3wvbbt.java:22: error: variable s2 is already defined in method\
    \ solve(String)\n            String s2 = s2.toLowerCase();\n                 \
    \  ^\n1 error\n"
  stdout: ''
  timestamp: 1660011155
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        char[]\
    \ chars = s.toCharArray();\n        List<Character> list = Arrays.asList(chars);\n\
    \        return list.stream().map(Character.toLowerCase).collect(Collectors.joining());\n\
    }\n    public static void main(String[] args) {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplwheume0.java:20: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        List<Character> list = Arrays.asList(chars);\n\
    \                                            ^\n    equality constraints: Character\n\
    \    lower bounds: char[]\n  where T is a type-variable:\n    T extends Object\
    \ declared in method <T>asList(T...)\n/tmp/tmplwheume0.java:21: error: cannot\
    \ find symbol\n        return list.stream().map(Character.toLowerCase).collect(Collectors.joining());\n\
    \                                          ^\n  symbol:   variable toLowerCase\n\
    \  location: class Character\n2 errors\n"
  stdout: ''
  timestamp: 1660011155
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        int length\
    \ = s.length();\n        if (length == 0) {\n            return \"\";\n      \
    \  }\n\n        boolean isLetter = false;\n        for (int i = 0; i < length;\
    \ i++) {\n            if (s.charAt(i) >= 'A' && s.charAt(i) <= 'Z') {\n      \
    \          isLetter = true;\n            }\n        }\n        if (isLetter) {\n\
    \            char temp;\n            String output = \"\";\n            for (int\
    \ i = 0; i < length; i++) {\n                temp = s.charAt(i);\n           \
    \     output = Character.toLowerCase(output) + Character.toUpperCase(temp);\n\
    \            }\n            return output;\n        }\n        else {\n      \
    \      return s;\n        }\n}\n    public static void main(String[] args) {\n\
    \    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\"\
    )).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"\
    #a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\"\
    )));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n    assert(solve((\"\
    #$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\")).equals((\"#CCC\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1rv47y3j.java:35: error: no suitable method found for toLowerCase(String)\n\
    \                output = Character.toLowerCase(output) + Character.toUpperCase(temp);\n\
    \                                  ^\n    method Character.toLowerCase(char) is\
    \ not applicable\n      (argument mismatch; String cannot be converted to char)\n\
    \    method Character.toLowerCase(int) is not applicable\n      (argument mismatch;\
    \ String cannot be converted to int)\n1 error\n"
  stdout: ''
  timestamp: 1660011155
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        if (s.isEmpty())\
    \ {\n            return s;\n        }\n        StringBuilder sb = new StringBuilder(s.length());\n\
    \        char[] c = s.toCharArray();\n        int i = 0;\n        char last =\
    \ 0;\n        do {\n            char curr = c[i];\n            if (curr >= 'a'\
    \ && curr < 'z') {\n                char upper = Character.toUpperCase(curr);\n\
    \                char lower = Character.toLowerCase(curr);\n                char\
    \ c = sb.length() > i ? sb.charAt(i) : upper;\n                sb.setCharAt(i,\
    \ c);\n                sb.setCharAt(i + 1, upper);\n                sb.setCharAt(i\
    \ + 2, lower);\n                i += 3;\n            } else if (curr >= 'A' &&\
    \ curr < 'Z') {\n                char upper = Character.toUpperCase(curr);\n \
    \               char lower = Character.toLowerCase(curr);\n                char\
    \ c = sb.length() > i ? sb.charAt(i) : lower;\n                sb.setCharAt(i,\
    \ c);\n                sb.setCharAt(i + 1, upper);\n                sb.setCharAt(i\
    \ + 2, lower);\n                i += 3;\n            } else {\n              \
    \  sb.append(curr);\n            }\n        } while (i < c.length);\n        return\
    \ sb.toString();\n}\n    public static void main(String[] args) {\n    assert(solve((\"\
    AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n\
    \    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7tnw0eqy.java:31: error: variable c is already defined in method\
    \ solve(String)\n                char c = sb.length() > i ? sb.charAt(i) : upper;\n\
    \                     ^\n/tmp/tmp7tnw0eqy.java:39: error: variable c is already\
    \ defined in method solve(String)\n                char c = sb.length() > i ?\
    \ sb.charAt(i) : lower;\n                     ^\n2 errors\n"
  stdout: ''
  timestamp: 1660011155
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        Map<Character,\
    \ String> mapping = new HashMap<>();\n        mapping.put('a', \"A\");\n     \
    \   mapping.put('b', \"B\");\n        mapping.put('c', \"C\");\n        mapping.put('d',\
    \ \"D\");\n        mapping.put('e', \"E\");\n        mapping.put('f', \"F\");\n\
    \        mapping.put('g', \"G\");\n        mapping.put('h', \"H\");\n        mapping.put('i',\
    \ \"I\");\n        mapping.put('j', \"J\");\n        mapping.put('k', \"K\");\n\
    \        mapping.put('l', \"L\");\n        mapping.put('m', \"M\");\n        mapping.put('n',\
    \ \"N\");\n        mapping.put('o', \"O\");\n        mapping.put('p', \"P\");\n\
    \        mapping.put('q', \"Q\");\n        mapping.put('r', \"R\");\n        mapping.put('s',\
    \ \"S\");\n        mapping.put('t', \"T\");\n        mapping.put('u', \"U\");\n\
    \        mapping.put('v', \"V\");\n        mapping.put('w', \"W\");\n        mapping.put('x',\
    \ \"X\");\n        mapping.put('y', \"Y\");\n        mapping.put('z', \"Z\");\n\
    \        mapping.put('.', \"#\");\n        mapping.put('/', \"/\");\n        mapping.put('\"\
    ', \"\\\"\");\n        mapping.put('-', \"-\");\n        mapping.put('$', \"\\\
    \\$\");\n        mapping.put('!', \"!\");\n        mapping.put('~', \"/\");\n\
    \        mapping.put(';', \",\");\n        mapping.put('\\'', '\\\\');\n\n   \
    \     final String reversedString = s.replaceAll(\"([a-z])\", mapping::get);\n\
    \n        return reversedString.replaceAll(\"[a-z]\", mapping::get);\n}\n    public\
    \ static void main(String[] args) {\n    assert(solve((\"AsDf\")).equals((\"aSdF\"\
    )));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkuf3bfj1.java:54: error: incompatible types: char cannot be converted\
    \ to String\n        mapping.put('\\'', '\\\\');\n                          ^\n\
    /tmp/tmpkuf3bfj1.java:56: error: incompatible types: String is not a functional\
    \ interface\n        final String reversedString = s.replaceAll(\"([a-z])\", mapping::get);\n\
    \                                                              ^\n/tmp/tmpkuf3bfj1.java:58:\
    \ error: incompatible types: String is not a functional interface\n        return\
    \ reversedString.replaceAll(\"[a-z]\", mapping::get);\n                      \
    \                            ^\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n3 errors\n"
  stdout: ''
  timestamp: 1660011155
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        String[]\
    \ arr = s.split(\"\");\n        for (String str : arr)\n            str = str.replaceAll(\"\
    [a-z]\", \"\").toLowerCase() + str.replaceAll(\"[A-Z]\", \"\").toUpperCase();\n\
    \        return s.isEmpty() ? str : s.replaceAll(\"[a-z]\", \"\").replaceAll(\"\
    [A-Z]\", \"\");\n}\n    public static void main(String[] args) {\n    assert(solve((\"\
    AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n\
    \    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmposh772ks.java:22: error: cannot find symbol\n        return s.isEmpty()\
    \ ? str : s.replaceAll(\"[a-z]\", \"\").replaceAll(\"[A-Z]\", \"\");\n       \
    \                      ^\n  symbol:   variable str\n  location: class Problem\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011155
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        final\
    \ int length = s.length();\n        final char[] chars = s.toCharArray();\n  \
    \      Arrays.stream(chars).map(Character::toLowerCase).collect(toList()).stream()\n\
    \            .map(Character::toUpperCase).forEach(System.out::println);\n    \
    \    if (length < 2) {\n            return s;\n        }\n        char[] newArr\
    \ = new char[length - 1];\n        for (int i = 0; i < length - 1; i++) {\n  \
    \          if (Character.isLetter(s.charAt(i))) {\n                newArr[i] =\
    \ Character.toUpperCase(s.charAt(i));\n            } else {\n                newArr[i]\
    \ = Character.toLowerCase(s.charAt(i));\n            }\n        }\n        return\
    \ new String(newArr);\n}\n    public static void main(String[] args) {\n    assert(solve((\"\
    AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n\
    \    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5wyyr8bx.java:21: error: no suitable method found for stream(char[])\n\
    \        Arrays.stream(chars).map(Character::toLowerCase).collect(toList()).stream()\n\
    \              ^\n    method Arrays.<T#1>stream(T#1[]) is not applicable\n   \
    \   (inference variable T#1 has incompatible bounds\n        equality constraints:\
    \ char\n        lower bounds: Object)\n    method Arrays.<T#2>stream(T#2[],int,int)\
    \ is not applicable\n      (cannot infer type-variable(s) T#2\n        (actual\
    \ and formal argument lists differ in length))\n    method Arrays.stream(int[])\
    \ is not applicable\n      (argument mismatch; char[] cannot be converted to int[])\n\
    \    method Arrays.stream(long[]) is not applicable\n      (argument mismatch;\
    \ char[] cannot be converted to long[])\n    method Arrays.stream(double[]) is\
    \ not applicable\n      (argument mismatch; char[] cannot be converted to double[])\n\
    \  where T#1,T#2 are type-variables:\n    T#1 extends Object declared in method\
    \ <T#1>stream(T#1[])\n    T#2 extends Object declared in method <T#2>stream(T#2[],int,int)\n\
    /tmp/tmp5wyyr8bx.java:21: error: cannot find symbol\n        Arrays.stream(chars).map(Character::toLowerCase).collect(toList()).stream()\n\
    \                                                                 ^\n  symbol:\
    \   method toList()\n  location: class Problem\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1660011155
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        List<String>\
    \ list = new ArrayList<>(Arrays.asList(s.split(\"\")));\n        Collections.reverse(list);\n\
    \        return new StringBuilder().append(list).reverse().toString();\n}\n  \
    \  public static void main(String[] args) {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpv9z2zklu.java:24)\n"
  stdout: ''
  timestamp: 1660011156
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        ArrayList<Character>\
    \ arr;\n        ArrayList<Integer> arr2;\n        ArrayList<Character> temp;\n\
    \        if (s.length() % 2 != 0) {\n            arr = new ArrayList<>();\n  \
    \          temp = new ArrayList<>();\n            String s1 = s.toLowerCase();\n\
    \            String s2 = \"abcdefghijklmnopqrstuvwxyz\";\n            for (int\
    \ i = 0; i < s1.length(); i++) {\n                if (s1.charAt(i) >= 'a' && s1.charAt(i)\
    \ <= 'z') {\n                    arr.add((s1.charAt(i))); // adds the letter to\
    \ an array\n                    temp.add(s2.charAt(s1.charAt(i))); // adds the\
    \ letter to another array\n                } else {\n                    arr.add((s1.charAt(i)));\
    \ // adds the letter to an array\n                    temp.add(s1.charAt(i));\
    \ // adds the letter to another array\n                }\n            }\n    \
    \        StringBuilder builder = new StringBuilder();\n            for (int i\
    \ = 0; i < arr.size(); i++) {\n                if (temp.get(i) >= 'a' && temp.get(i)\
    \ <= 'z') {\n                    builder.append(temp.get(i));\n              \
    \  } else {\n                    builder.append(arr.get(i));\n               \
    \ }\n            }\n            return builder.toString();\n        } else {\n\
    \            arr = new ArrayList<>();\n            temp = new ArrayList<>();\n\
    \            String s1 = s.toLowerCase();\n            String s2 = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n            for (int i = 0; i < s1.length(); i++) {\n                if (s1.charAt(i)\
    \ >= 'a' && s1.charAt(i) <= 'z') {\n                    arr.add((s1.charAt(i)));\
    \ // adds the letter to an array\n                    temp.add(s2.charAt(s1.charAt(i)));\
    \ // adds the letter to another array\n                } else {\n            \
    \        arr.add((s1.charAt(i))); // adds the letter to an array\n           \
    \         temp.add(s1.charAt(i)); // adds the letter to another array\n      \
    \          }\n            }\n            StringBuilder builder = new StringBuilder();\n\
    \            for (int i = 0; i < arr.size(); i++) {\n                if (temp.get(i)\
    \ >= 'a' && temp.get(i) <= 'z') {\n                    builder.append(temp.get(i));\n\
    \                } else {\n                    builder.append(arr.get(i));\n \
    \               }\n            }\n            return builder.toString();\n   \
    \     }\n}\n    public static void main(String[] args) {\n    assert(solve((\"\
    AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n\
    \    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StringIndexOutOfBoundsException:\
    \ String index out of range: 97\n\tat java.base/java.lang.StringLatin1.charAt(StringLatin1.java:48)\n\
    \tat java.base/java.lang.String.charAt(String.java:1515)\n\tat Problem.solve(tmp__h8xrl7.java:53)\n\
    \tat Problem.main(tmp__h8xrl7.java:71)\n"
  stdout: ''
  timestamp: 1660011155
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        return\
    \ s.replaceAll(\"[\\\\p{Alpha}\\\\p{Digit}]\", \n                c -> c.toUpperCase().matches(\"\
    \\\\p{Alpha}\") ? \n                        c.toLowerCase() : c.toUpperCase());\n\
    }\n    public static void main(String[] args) {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5r9k6dtu.java:19: error: incompatible types: String is not a functional\
    \ interface\n        return s.replaceAll(\"[\\\\p{Alpha}\\\\p{Digit}]\", \n  \
    \              ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660011155
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        StringBuilder\
    \ result = new StringBuilder();\n        for(Character c: s.toCharArray()) {\n\
    \            if(!Character.isLetter(c)) {\n                result.append(Character.toLowerCase(c));\n\
    \            } else {\n                result.append(c);\n            }\n    \
    \    }\n        return result.toString().replaceAll(\"(.)\\\\1+\", \"$1\");\n\
    }\n    public static void main(String[] args) {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcq4g8unh.java:30)\n"
  stdout: ''
  timestamp: 1660011155
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        Stack<Character>\
    \ st = new Stack<>();\n        for (int i = 0; i < s.length(); i++) {\n      \
    \      if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z' || s.charAt(i) >= 'A' && s.charAt(i)\
    \ <= 'Z') {\n                st.push(s.charAt(i));\n            } else {\n   \
    \             st.pop();\n            }\n        }\n        return st.reverse().toString();\n\
    }\n    public static void main(String[] args) {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwch1zrpz.java:27: error: cannot find symbol\n        return st.reverse().toString();\n\
    \                 ^\n  symbol:   method reverse()\n  location: variable st of\
    \ type Stack<Character>\n1 error\n"
  stdout: ''
  timestamp: 1660011155
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        // Your\
    \ code here\n        List<Character> listOfCharacters = new ArrayList<Character>();\n\
    \        for(int i = 0;i < s.length();i++){\n            char c = s.charAt(i);\n\
    \            if(Character.isLetter(c)){\n                listOfCharacters.add(c);\n\
    \            }\n        }\n        Collections.reverse(listOfCharacters);\n  \
    \      String reversed = new String(listOfCharacters);\n        if(listOfCharacters.isEmpty()){\n\
    \            reversed = s;\n        }\n        return reversed;\n}\n    public\
    \ static void main(String[] args) {\n    assert(solve((\"AsDf\")).equals((\"aSdF\"\
    )));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl8okip_u.java:28: error: no suitable constructor found for String(List<Character>)\n\
    \        String reversed = new String(listOfCharacters);\n                   \
    \       ^\n    constructor String.String(String) is not applicable\n      (argument\
    \ mismatch; List<Character> cannot be converted to String)\n    constructor String.String(char[])\
    \ is not applicable\n      (argument mismatch; List<Character> cannot be converted\
    \ to char[])\n    constructor String.String(byte[]) is not applicable\n      (argument\
    \ mismatch; List<Character> cannot be converted to byte[])\n    constructor String.String(StringBuffer)\
    \ is not applicable\n      (argument mismatch; List<Character> cannot be converted\
    \ to StringBuffer)\n    constructor String.String(StringBuilder) is not applicable\n\
    \      (argument mismatch; List<Character> cannot be converted to StringBuilder)\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1660011155
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        if(s.isEmpty()){\n\
    \            return s;\n        }\n        char[] chars = s.toCharArray();\n \
    \       for(int i = 0; i<chars.length;i++){\n            char c = chars[i];\n\
    \            if(Character.isLetter(c)){\n                if(Character.isLowerCase(c)){\n\
    \                    chars[i] = Character.toUpperCase(c);\n                }else{\n\
    \                    chars[i] = Character.toLowerCase(c);\n                }\n\
    \            }\n        }\n        return new String(chars);\n}\n    public static\
    \ void main(String[] args) {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n\
    \    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"\
    AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"\
    #AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"\
    2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"\
    #ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpokitd6uy.java:37)\n"
  stdout: ''
  timestamp: 1660011155
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        StringBuilder\
    \ reverse = new StringBuilder();\n        for (char c : s.toCharArray()) {\n \
    \           if (Character.isLetter(c)) {\n                char t = Character.toUpperCase(c);\n\
    \                reverse.append(t);\n            } else {\n                reverse.append(c);\n\
    \            }\n        }\n        return reverse.toString();\n}\n    public static\
    \ void main(String[] args) {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n\
    \    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"\
    AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"\
    #AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"\
    2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"\
    #ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3wdk_yre.java:31)\n"
  stdout: ''
  timestamp: 1660011155
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        // Write\
    \ your code here\n        StringBuilder sb = new StringBuilder(s);\n        for(int\
    \ i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n         \
    \   if(c == 'A' || c == 'a'){\n                sb.setCharAt(i, (char) ('A' + sb.length()-1));\n\
    \            }\n            if(c == 'a' || c == 'A'){\n                sb.setCharAt(i,\
    \ (char) ('a' + sb.length()-1));\n            }\n        }\n        return sb.toString();\n\
    }\n    public static void main(String[] args) {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8z0q_8po.java:33)\n"
  stdout: ''
  timestamp: 1660011155
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        if (s.contains(\"\
    @\")){\n            String first = s.substring(0,1);\n            String last=\
    \ s.substring(s.indexOf(\"@\")+1);\n            String reverse= last.substring(0,1).toUpperCase()+\
    \ first.substring(1)+last.substring(1).toLowerCase();\n            return reverse;\n\
    \        }else{\n            return s;\n        }\n\n}\n    public static void\
    \ main(String[] args) {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n \
    \   assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"\
    AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"\
    #AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"\
    2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"\
    #ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgi58x4iq.java:30)\n"
  stdout: ''
  timestamp: 1660011155
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        String\
    \ newString = \"\";\n        for(char ch : s.toCharArray()){\n            if(Character.isLetter(ch)){\n\
    \                if(Character.isUpperCase(ch)){\n                    newString\
    \ = newString.concat(Character.toLowerCase(ch));\n                }\n        \
    \        else{\n                    newString = newString.concat(Character.toUpperCase(ch));\n\
    \                }\n            }\n            else{\n                newString\
    \ = newString.concat(ch);\n            }\n        }\n        return newString;\n\
    }\n    public static void main(String[] args) {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxaxrj7f7.java:23: error: incompatible types: char cannot be converted\
    \ to String\n                    newString = newString.concat(Character.toLowerCase(ch));\n\
    \                                                                      ^\n/tmp/tmpxaxrj7f7.java:26:\
    \ error: incompatible types: char cannot be converted to String\n            \
    \        newString = newString.concat(Character.toUpperCase(ch));\n          \
    \                                                            ^\n/tmp/tmpxaxrj7f7.java:30:\
    \ error: incompatible types: char cannot be converted to String\n            \
    \    newString = newString.concat(ch);\n                                     \
    \        ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n3 errors\n"
  stdout: ''
  timestamp: 1660011155
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        StringBuilder\
    \ sb = new StringBuilder(s);\n        char ch;\n        StringBuilder reverse\
    \ = new StringBuilder();\n        for (int i = 0; i < sb.length(); i++) {\n  \
    \          ch = sb.charAt(i);\n            if (Character.isLetter(ch)) {\n   \
    \             reverse.append(Character.toUpperCase(ch));\n            } else {\n\
    \                reverse.append(Character.toLowerCase(ch));\n            }\n \
    \       }\n        return reverse.toString();\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpa5dascnb.java:33)\n"
  stdout: ''
  timestamp: 1660011155
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        if (s.isEmpty())\
    \ return \"\";\n        if (s.charAt(0) == s.toLowerCase().charAt(0)) s = s.replaceFirst(s.toLowerCase(),\
    \ s.toUpperCase());\n        if (s.charAt(0) == s.toUpperCase().charAt(0)) s =\
    \ s.replaceFirst(s.toUpperCase(), s.toLowerCase());\n        return s;\n}\n  \
    \  public static void main(String[] args) {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5b6566ob.java:25)\n"
  stdout: ''
  timestamp: 1660011155
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        StringBuilder\
    \ sb = new StringBuilder();\n        char[] cs = s.toCharArray();\n        for\
    \ (int i = 0; i < cs.length; i++) {\n            if (isLetter(cs[i])) {\n    \
    \            sb.append(cs[i].toLowerCase());\n            } else {\n         \
    \       sb.append(cs[i]);\n            }\n        }\n        return sb.toString();\n\
    }\n    public static void main(String[] args) {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4wmlwe77.java:22: error: cannot find symbol\n            if (isLetter(cs[i]))\
    \ {\n                ^\n  symbol:   method isLetter(char)\n  location: class Problem\n\
    /tmp/tmp4wmlwe77.java:23: error: char cannot be dereferenced\n               \
    \ sb.append(cs[i].toLowerCase());\n                               ^\n2 errors\n"
  stdout: ''
  timestamp: 1660011155
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        String\
    \ result = \"\";\n        char[] chars = s.toCharArray();\n        for (int i\
    \ = 0; i < chars.length; i++) {\n            char c = chars[i];\n            if\
    \ (Character.isLetter(c)) {\n                result += Character.toLowerCase(c);\n\
    \            } else {\n                result += Character.toUpperCase(c);\n \
    \           }\n        }\n        return result;\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpquihio6m.java:32)\n"
  stdout: ''
  timestamp: 1660011155
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        StringBuilder\
    \ sb = new StringBuilder(s.length());\n        for (int i = 0; i < s.length();\
    \ i++) {\n            char ch = s.charAt(i);\n            if (Character.isLetter(ch))\
    \ {\n                char upperCase = Character.toUpperCase(ch);\n           \
    \     if (sb.length() > 0) {\n                    sb.setCharAt(sb.length() - 1,\
    \ upperCase);\n                } else {\n                    sb.append(upperCase);\n\
    \                }\n            } else {\n                sb.append(ch);\n   \
    \         }\n        }\n        return sb.toString();\n}\n    public static void\
    \ main(String[] args) {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n \
    \   assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"\
    AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"\
    #AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"\
    2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"\
    #ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpe0f07i8a.java:36)\n"
  stdout: ''
  timestamp: 1660011155
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        \n   \
    \     \n        \n        \n        if(s.length()==0)\n        {\n           \
    \ \n            return s;\n        }\n        \n        String str = \"\";\n \
    \       char ch;\n        for(int i=0;i<s.length();i++)\n        {\n         \
    \   ch=s.charAt(i);\n            if(Character.isLetter(ch))\n            {\n \
    \               if(Character.isLowerCase(ch))\n                {\n           \
    \         str+=Character.toUpperCase(ch);\n                }\n               \
    \ else\n                {\n                    str+=Character.toLowerCase(ch);\n\
    \                }\n            }\n            else\n            {\n         \
    \       str+=ch;\n            }\n        }\n        return str;\n}\n    public\
    \ static void main(String[] args) {\n    assert(solve((\"AsDf\")).equals((\"aSdF\"\
    )));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpm3dn3dl2.java:54)\n"
  stdout: ''
  timestamp: 1660011157
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        int len\
    \ = s.length();\n        char[] chars = new char[len];\n        for(int i = 0;\
    \ i < len; i++) {\n            chars[i] = s.charAt(i);\n        }\n        Arrays.sort(chars);\n\
    \        if(chars[0] < chars[1]) {\n            chars[0] += 32;\n            chars[1]\
    \ -= 32;\n        }\n        return new String(chars);\n}\n    public static void\
    \ main(String[] args) {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n \
    \   assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"\
    AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"\
    #AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"\
    2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"\
    #ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1mkx5aog.java:32)\n"
  stdout: ''
  timestamp: 1660011157
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        if (s\
    \ == null) return null;\n        char[] chArray = s.toCharArray();\n        Arrays.stream(chArray).map(x\
    \ -> Character.toUpperCase(x)).forEach(System.out::println);\n        Arrays.stream(chArray).map(x\
    \ -> Character.toLowerCase(x)).forEach(System.out::println);\n        Arrays.stream(chArray).map(x\
    \ -> x.equals(Character.toLowerCase(x) ? Character.toUpperCase(x) : Character.toLowerCase(x))).filter(x\
    \ -> !x.equals(true)).forEach(System.out::println);\n        Arrays.stream(chArray).map(x\
    \ -> {\n            char[] res = new char[chArray.length];\n            for (int\
    \ i = 0; i < chArray.length; i++) res[i] = chArray[i];\n            res[i] = Character.toUpperCase(chArray[i]);\n\
    \            return new String(res);\n        }).map(x -> {\n            char[]\
    \ res = new char[chArray.length];\n            for (int i = 0; i < chArray.length;\
    \ i++) res[i] = chArray[i];\n            res[i] = Character.toLowerCase(chArray[i]);\n\
    \            return new String(res);\n        }).filter(x -> !x.equals(true)).forEach(System.out::println);\n\
    \        Arrays.stream(chArray).map(x -> {\n            char[] res = new char[chArray.length];\n\
    \            for (int i = 0; i < chArray.length; i++) res[i] = chArray[i];\n \
    \           return new String(res);\n        }).map(x -> {\n            char[]\
    \ res = new char[chArray.length];\n            for (int i = 0; i < chArray.length;\
    \ i++) res[i] = chArray[i];\n            return new String(res);\n        }).filter(x\
    \ -> !x.equals(true)).forEach(System.out::println);\n        return null;\n}\n\
    \    public static void main(String[] args) {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_539igpz.java:21: error: no suitable method found for stream(char[])\n\
    \        Arrays.stream(chArray).map(x -> Character.toUpperCase(x)).forEach(System.out::println);\n\
    \              ^\n    method Arrays.<T#1>stream(T#1[]) is not applicable\n   \
    \   (inference variable T#1 has incompatible bounds\n        equality constraints:\
    \ char\n        lower bounds: Object)\n    method Arrays.<T#2>stream(T#2[],int,int)\
    \ is not applicable\n      (cannot infer type-variable(s) T#2\n        (actual\
    \ and formal argument lists differ in length))\n    method Arrays.stream(int[])\
    \ is not applicable\n      (argument mismatch; char[] cannot be converted to int[])\n\
    \    method Arrays.stream(long[]) is not applicable\n      (argument mismatch;\
    \ char[] cannot be converted to long[])\n    method Arrays.stream(double[]) is\
    \ not applicable\n      (argument mismatch; char[] cannot be converted to double[])\n\
    \  where T#1,T#2 are type-variables:\n    T#1 extends Object declared in method\
    \ <T#1>stream(T#1[])\n    T#2 extends Object declared in method <T#2>stream(T#2[],int,int)\n\
    /tmp/tmp_539igpz.java:22: error: no suitable method found for stream(char[])\n\
    \        Arrays.stream(chArray).map(x -> Character.toLowerCase(x)).forEach(System.out::println);\n\
    \              ^\n    method Arrays.<T#1>stream(T#1[]) is not applicable\n   \
    \   (inference variable T#1 has incompatible bounds\n        equality constraints:\
    \ char\n        lower bounds: Object)\n    method Arrays.<T#2>stream(T#2[],int,int)\
    \ is not applicable\n      (cannot infer type-variable(s) T#2\n        (actual\
    \ and formal argument lists differ in length))\n    method Arrays.stream(int[])\
    \ is not applicable\n      (argument mismatch; char[] cannot be converted to int[])\n\
    \    method Arrays.stream(long[]) is not applicable\n      (argument mismatch;\
    \ char[] cannot be converted to long[])\n    method Arrays.stream(double[]) is\
    \ not applicable\n      (argument mismatch; char[] cannot be converted to double[])\n\
    \  where T#1,T#2 are type-variables:\n    T#1 extends Object declared in method\
    \ <T#1>stream(T#1[])\n    T#2 extends Object declared in "
  stdout: ''
  timestamp: 1660011157
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        if(s.length()==0){\n\
    \            return s;\n        }\n        String[] strList = Arrays.stream(s.split(\"\
    (?!^)\")\n                .map(s -> s.toLowerCase())\n                .map(s ->\
    \ s.trim()).toArray()).distinct().toArray(String[]::new);\n        char[] charList\
    \ = Arrays.stream(s.split(\"(?!^)\")\n                .map(s -> s.toLowerCase())\n\
    \                .map(s -> s.trim()).toArray()).distinct().toArray(char[]::new);\n\
    \        for(String str : strList){\n            String strReversed = str.replaceFirst(Character.toString(strList.indexOf(str)),\"\
    \").replaceAll(strList.get(strList.indexOf(str)),Character.toString(strList.indexOf(str)));\n\
    \            char[] charReversed = strReversed.replaceFirst(Character.toString(strList.indexOf(str)),\"\
    \").replaceAll(strList.get(strList.indexOf(str)),Character.toString(strList.indexOf(str)));\n\
    \            for(int i =0;i< charList.length; i++){\n                charList[i]\
    \ = charList[i].toLowerCase();\n            }\n            charList.reverse();\n\
    \            charList = Arrays.stream(charList).distinct().toArray(char[]::new);\n\
    \            for(int i =0;i<charList.length;i++){\n                charList[i]\
    \ = charReversed[i];\n            }\n        }\n        return new String(charList);\n\
    }\n    public static void main(String[] args) {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpox02cwj3.java:23: error: cannot find symbol\n                .map(s\
    \ -> s.toLowerCase())\n                ^\n  symbol:   method map((s)->s.toL[...]ase())\n\
    \  location: class String[]\n/tmp/tmpox02cwj3.java:23: error: variable s is already\
    \ defined in method solve(String)\n                .map(s -> s.toLowerCase())\n\
    \                     ^\n/tmp/tmpox02cwj3.java:24: error: variable s is already\
    \ defined in method solve(String)\n                .map(s -> s.trim()).toArray()).distinct().toArray(String[]::new);\n\
    \                     ^\n/tmp/tmpox02cwj3.java:26: error: cannot find symbol\n\
    \                .map(s -> s.toLowerCase())\n                ^\n  symbol:   method\
    \ map((s)->s.toL[...]ase())\n  location: class String[]\n/tmp/tmpox02cwj3.java:26:\
    \ error: variable s is already defined in method solve(String)\n             \
    \   .map(s -> s.toLowerCase())\n                     ^\n/tmp/tmpox02cwj3.java:27:\
    \ error: variable s is already defined in method solve(String)\n             \
    \   .map(s -> s.trim()).toArray()).distinct().toArray(char[]::new);\n        \
    \             ^\n/tmp/tmpox02cwj3.java:29: error: cannot find symbol\n       \
    \     String strReversed = str.replaceFirst(Character.toString(strList.indexOf(str)),\"\
    \").replaceAll(strList.get(strList.indexOf(str)),Character.toString(strList.indexOf(str)));\n\
    \                                                                            ^\n\
    \  symbol:   method indexOf(String)\n  location: variable strList of type String[]\n\
    /tmp/tmpox02cwj3.java:29: error: cannot find symbol\n            String strReversed\
    \ = str.replaceFirst(Character.toString(strList.indexOf(str)),\"\").replaceAll(strList.get(strList.indexOf(str)),Character.toString(strList.indexOf(str)));\n\
    \                                                                            \
    \                                                 ^\n  symbol:   method indexOf(String)\n\
    \  location: variable strList of type String[]\n/tmp/tmpox02cwj3.java:29: error:\
    \ cannot find symbol\n            String strReversed = str.replaceFirst(Character.toString(strList.indexOf(str)),\"\
    \").replac"
  stdout: ''
  timestamp: 1660011157
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        StringBuilder\
    \ sb = new StringBuilder();\n        for (char c : s.toCharArray()) {\n      \
    \      if (Character.isLetter(c)) {\n                if (Character.isLowerCase(c))\
    \ {\n                    c = Character.toUpperCase(c);\n                } else\
    \ {\n                    c = Character.toLowerCase(c);\n                }\n  \
    \          }\n            sb.append(c);\n        }\n        return sb.toString();\n\
    }\n    public static void main(String[] args) {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmproowp2t_.java:34)\n"
  stdout: ''
  timestamp: 1660011157
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        // Your\
    \ code goes here\n        String str = \"\";\n        if (s.length() == 0) {\n\
    \            return str;\n        } else {\n            str = s.replaceAll(\"\
    [A-Z]\",\n                    s -> s.toUpperCase()\n            );\n         \
    \   str = s.replaceAll(\"[a-z]\",\n                    s -> s.toLowerCase()\n\
    \            );\n            return str;\n        }\n}\n    public static void\
    \ main(String[] args) {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n \
    \   assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"\
    AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"\
    #AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"\
    2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"\
    #ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprhs3wbs9.java:24: error: incompatible types: String is not a functional\
    \ interface\n            str = s.replaceAll(\"[A-Z]\",\n                   ^\n\
    /tmp/tmprhs3wbs9.java:25: error: variable s is already defined in method solve(String)\n\
    \                    s -> s.toUpperCase()\n                    ^\n/tmp/tmprhs3wbs9.java:27:\
    \ error: incompatible types: String is not a functional interface\n          \
    \  str = s.replaceAll(\"[a-z]\",\n                   ^\n/tmp/tmprhs3wbs9.java:28:\
    \ error: variable s is already defined in method solve(String)\n             \
    \       s -> s.toLowerCase()\n                    ^\nNote: Some messages have\
    \ been simplified; recompile with -Xdiags:verbose to get full output\n4 errors\n"
  stdout: ''
  timestamp: 1660011156
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        Map<String,\
    \ String> map = new HashMap<>();\n        for (char c : s.toCharArray()) {\n \
    \           String key = (char) c + \"\";\n            String value = map.containsKey(key)\
    \ ? map.get(key) : \"\";\n            map.put(key, value);\n        }\n      \
    \  String[] keys = map.keySet().toArray(new String[0]);\n        String result\
    \ = \"\";\n        for (String key : keys) {\n            String value = map.get(key);\n\
    \            if (value.equals(\"#\")) {\n                result = result + key;\n\
    \            } else if (value.equals(\"@\")) {\n                result = value\
    \ + result;\n            } else {\n                result = value + result;\n\
    \            }\n        }\n        return result;\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6lareq96.java:40)\n"
  stdout: ''
  timestamp: 1660011157
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        return\
    \ s.replaceAll(\"[^a-zA-Z]\", s -> {\n            int len = (int) (s.length()\
    \ / 2);\n            return new StringBuilder(s).reverse().replace(s.charAt(len),\
    \ s.charAt(len - 1), \"\");\n        });\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfo8l7i7i.java:19: error: incompatible types: String is not a functional\
    \ interface\n        return s.replaceAll(\"[^a-zA-Z]\", s -> {\n             \
    \   ^\n/tmp/tmpfo8l7i7i.java:19: error: variable s is already defined in method\
    \ solve(String)\n        return s.replaceAll(\"[^a-zA-Z]\", s -> {\n         \
    \                                ^\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1660011156
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        //return\
    \ s.replaceAll(\"[A-Za-z]+\", s -> s.toUpperCase());\n        //return s.replaceAll(\"\
    [A-Z]+\", s -> s.toLowerCase());\n        \n        List<Character> letters =\
    \ new ArrayList<>();\n        for (int i=0; i<s.length(); i++) {\n           \
    \ char c = s.charAt(i);\n            if (Character.isLetter(c)) {\n          \
    \      letters.add(c);\n            } else {\n                letters.add(Character.toLowerCase(c));\n\
    \            }\n        }\n        \n        return letters.stream().map(String::valueOf).collect(Collectors.joining(\"\
    \"));\n}\n    public static void main(String[] args) {\n    assert(solve((\"AsDf\"\
    )).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n \
    \   assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy1c4v1f4.java:35)\n"
  stdout: ''
  timestamp: 1660011157
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        \n   \
    \     if(s.length() == 0){\n            return s;\n        }\n        \n     \
    \   char[] arr = s.toCharArray();\n        \n        if(Character.isLetter(arr[0]))\
    \ {\n            return new StringBuilder(arr).reverse().toString();\n       \
    \ }\n        \n        StringBuilder sb = new StringBuilder();\n        for(int\
    \ i=0; i<arr.length; i++){\n            \n            String tempStr = new StringBuilder(arr[i]).toString();\n\
    \            if(Character.isLetter(arr[i])) {\n                tempStr = tempStr.toUpperCase();\n\
    \            }\n            sb.append(tempStr);\n        }\n        return sb.toString();\n\
    }\n    public static void main(String[] args) {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8lyqiipr.java:27: error: no suitable constructor found for StringBuilder(char[])\n\
    \            return new StringBuilder(arr).reverse().toString();\n           \
    \        ^\n    constructor StringBuilder.StringBuilder(int) is not applicable\n\
    \      (argument mismatch; char[] cannot be converted to int)\n    constructor\
    \ StringBuilder.StringBuilder(String) is not applicable\n      (argument mismatch;\
    \ char[] cannot be converted to String)\n    constructor StringBuilder.StringBuilder(CharSequence)\
    \ is not applicable\n      (argument mismatch; char[] cannot be converted to CharSequence)\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1660011157
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        \n   \
    \     int len = s.length();\n        \n        for (int i = 0; i < len; i++) {\n\
    \            char ch = s.charAt(i);\n            \n            if (isLetter(ch))\
    \ {\n                s = s.toUpperCase();\n                s = s.substring(0,\
    \ i) + s.substring(i + 1);\n                s = s.toUpperCase();\n           \
    \     \n                if (i == 0) s = s.substring(i + 1);\n            }\n \
    \       }\n        return s;\n}\n    public static void main(String[] args) {\n\
    \    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\"\
    )).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"\
    #a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\"\
    )));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n    assert(solve((\"\
    #$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\")).equals((\"#CCC\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4acwrmpk.java:25: error: cannot find symbol\n            if (isLetter(ch))\
    \ {\n                ^\n  symbol:   method isLetter(char)\n  location: class Problem\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011156
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        s=s.replaceAll(\"\
    [A-z]\", ch -> ch.toUpperCase());\n        s=s.replaceAll(\"[a-z]\", ch -> ch.toLowerCase());\n\
    \        \n        \n        if (s.isEmpty()) {\n            return s;\n     \
    \   }\n        \n        if (Character.isLowerCase(s.charAt(0))) {\n         \
    \   String temp = s.substring(0);\n            int len = 0;\n            String\
    \ result = \"\";\n            \n            for (int i = 0; i < temp.length();\
    \ i++) {\n                if (Character.isUpperCase(temp.charAt(i))) {\n     \
    \               result += temp.charAt(i);\n                } else {\n        \
    \            result += temp.substring(0, i) + temp.substring(i + 1);\n       \
    \         }\n            }\n            \n            return result;\n       \
    \ }\n        \n        return s;\n}\n    public static void main(String[] args)\
    \ {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\"\
    )).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"\
    #a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\"\
    )));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n    assert(solve((\"\
    #$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\")).equals((\"#CCC\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp84t6la0m.java:19: error: incompatible types: String is not a functional\
    \ interface\n        s=s.replaceAll(\"[A-z]\", ch -> ch.toUpperCase());\n    \
    \       ^\n/tmp/tmp84t6la0m.java:20: error: incompatible types: String is not\
    \ a functional interface\n        s=s.replaceAll(\"[a-z]\", ch -> ch.toLowerCase());\n\
    \           ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1660011156
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        \n   \
    \     Stack<Character> stack = new Stack<>();\n        boolean hasLetter = false;\n\
    \        int count = 0;\n\n        for(int i = 0; i < s.length(); i++) {\n   \
    \         if(s.charAt(i) >= 65 && s.charAt(i) <= 90) {\n                if(count\
    \ == 0) {\n                    hasLetter = true;\n                }\n        \
    \        stack.push(s.charAt(i));\n                count++;\n            } else\
    \ {\n                if(count > 0) {\n                    while(!stack.isEmpty())\
    \ {\n                        if(s.charAt(i) == stack.peek()) {\n             \
    \               stack.pop();\n                            count--;\n         \
    \                   continue;\n                        }\n                   \
    \     break;\n                    }\n                    if(count == 0) {\n  \
    \                      hasLetter = true;\n                    }\n            \
    \    }\n                stack.push(s.charAt(i));\n                count++;\n \
    \           }\n        }\n        if(count > 0) {\n            while(!stack.isEmpty())\
    \ {\n                if(s.charAt(i) == stack.peek()) {\n                    stack.pop();\n\
    \                    count--;\n                    continue;\n               \
    \ }\n                break;\n            }\n            if(count == 0) {\n   \
    \             hasLetter = true;\n            }\n        }\n        if(!hasLetter)\
    \ {\n            for(int i = 0; i < s.length(); i++) {\n                if(s.charAt(i)\
    \ >= 65 && s.charAt(i) <= 90) {\n                    stack.push(s.charAt(i));\n\
    \                    count++;\n                }\n            }\n            while(!stack.isEmpty())\
    \ {\n                if(s.charAt(i) == stack.peek()) {\n                    stack.pop();\n\
    \                    count--;\n                    continue;\n               \
    \ }\n                break;\n            }\n        }\n\n        String reverse\
    \ = new StringBuilder().append(stack).toString();\n        if(reverse.length()\
    \ > 0) {\n            reverse = reverse.substring(1);\n        }\n        return\
    \ reverse;\n}\n    public static void main(String[] args) {\n    assert(solve((\"\
    AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n\
    \    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvwvwnsfd.java:51: error: cannot find symbol\n                if(s.charAt(i)\
    \ == stack.peek()) {\n                            ^\n  symbol:   variable i\n\
    \  location: class Problem\n/tmp/tmpvwvwnsfd.java:70: error: cannot find symbol\n\
    \                if(s.charAt(i) == stack.peek()) {\n                         \
    \   ^\n  symbol:   variable i\n  location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660011157
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        return\
    \ s.replaceAll(\"[a-zA-Z]\", \"$0\" + s.charAt(0).toUpperCase() + s.substring(1).toLowerCase());\n\
    }\n    public static void main(String[] args) {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2sjjmc4h.java:19: error: char cannot be dereferenced\n        return\
    \ s.replaceAll(\"[a-zA-Z]\", \"$0\" + s.charAt(0).toUpperCase() + s.substring(1).toLowerCase());\n\
    \                                                          ^\n1 error\n"
  stdout: ''
  timestamp: 1660011156
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        StringBuilder\
    \ sb = new StringBuilder();\n        for(char c:s.toCharArray()) {\n         \
    \   switch(c) {\n                case 'A': case 'a':\n                    sb.append('a');\n\
    \                    break;\n                case 'B': case 'b':\n           \
    \         sb.append('b');\n                    break;\n                case 'C':\
    \ case 'c':\n                    sb.append('c');\n                    break;\n\
    \                case 'D': case 'd':\n                    sb.append('d');\n  \
    \                  break;\n                case 'E': case 'e':\n             \
    \       sb.append('e');\n                    break;\n                case 'F':\
    \ case 'f':\n                    sb.append('f');\n                    break;\n\
    \                case 'G': case 'g':\n                    sb.append('g');\n  \
    \                  break;\n                case 'H': case 'h':\n             \
    \       sb.append('h');\n                    break;\n                case 'I':\
    \ case 'i':\n                    sb.append('i');\n                    break;\n\
    \                case 'J': case 'j':\n                    sb.append('j');\n  \
    \                  break;\n                case 'K': case 'k':\n             \
    \       sb.append('k');\n                    break;\n                case 'L':\
    \ case 'l':\n                    sb.append('l');\n                    break;\n\
    \                case 'M': case 'm':\n                    sb.append('m');\n  \
    \                  break;\n                case 'N': case 'n':\n             \
    \       sb.append('n');\n                    break;\n                case 'O':\
    \ case 'o':\n                    sb.append('o');\n                    break;\n\
    \                case 'P': case 'p':\n                    sb.append('p');\n  \
    \                  break;\n                case 'Q': case 'q':\n             \
    \       sb.append('q');\n                    break;\n                case 'R':\
    \ case 'r':\n                    sb.append('r');\n                    break;\n\
    \                case 'S': case 's':\n                    sb.append('s');\n  \
    \                  break;\n                case 'T': case 't':\n             \
    \       sb.append('t');\n                    break;\n                case 'U':\
    \ case 'u':\n                    sb.append('u');\n                    break;\n\
    \                case 'V': case 'v':\n                    sb.append('v');\n  \
    \                  break;\n                case 'W': case 'w':\n             \
    \       sb.append('w');\n                    break;\n                case 'X':\
    \ case 'x':\n                    sb.append('x');\n                    break;\n\
    \                case 'Y': case 'y':\n                    sb.append('y');\n  \
    \                  break;\n                case 'Z': case 'z':\n             \
    \       sb.append('z');\n                    break;\n            }\n        }\n\
    \        return sb.toString();\n}\n    public static void main(String[] args)\
    \ {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\"\
    )).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"\
    #a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\"\
    )));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n    assert(solve((\"\
    #$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\")).equals((\"#CCC\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp714yl5f6.java:105)\n"
  stdout: ''
  timestamp: 1660011157
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        StringBuilder\
    \ sb = new StringBuilder();\n        char[] arr = s.toCharArray();\n        Arrays.sort(arr);\n\
    \        for (int i = 0; i < arr.length; i++) {\n            if (Character.isLetter(arr[i]))\
    \ {\n                sb.append(Character.toUpperCase(arr[i]));\n            }\
    \ else {\n                sb.append(arr[i]);\n            }\n        }\n     \
    \   return sb.toString();\n}\n    public static void main(String[] args) {\n \
    \   assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\"\
    )).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"\
    #a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\"\
    )));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n    assert(solve((\"\
    #$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\")).equals((\"#CCC\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3dgjj1y1.java:32)\n"
  stdout: ''
  timestamp: 1660011157
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        \n   \
    \     String result = \"\";\n        for (int i = 0; i < s.length(); i++) {\n\
    \            char c = s.charAt(i);\n            if (Character.isLetter(c)) {\n\
    \                result += Character.toLowerCase(c);\n            }\n        \
    \    else {\n                result += Character.toUpperCase(c);\n           \
    \ }\n        }\n        return result;\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4w6hj700.java:33)\n"
  stdout: ''
  timestamp: 1660011157
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        if (s\
    \ == null || s.length() <= 0) return s;\n        char ch;\n        StringBuilder\
    \ sb = new StringBuilder();\n        for (int i = 0; i < s.length(); i++) {\n\
    \            ch = s.charAt(i);\n            switch (ch) {\n            case 'a':\n\
    \            case 'b':\n            case 'c':\n            case 'd':\n       \
    \     case 'e':\n            case 'f':\n            case 'g':\n            case\
    \ 'h':\n            case 'i':\n            case 'j':\n            case 'k':\n\
    \            case 'l':\n            case 'm':\n            case 'n':\n       \
    \     case 'o':\n            case 'p':\n            case 'q':\n            case\
    \ 'r':\n            case 's':\n            case 't':\n            case 'u':\n\
    \            case 'v':\n            case 'w':\n            case 'x':\n       \
    \     case 'y':\n            case 'z':\n            case 'A':\n            case\
    \ 'B':\n            case 'C':\n            case 'D':\n            case 'E':\n\
    \            case 'F':\n            case 'G':\n            case 'H':\n       \
    \     case 'I':\n            case 'J':\n            case 'K':\n            case\
    \ 'L':\n            case 'M':\n            case 'N':\n            case 'O':\n\
    \            case 'P':\n            case 'Q':\n            case 'R':\n       \
    \     case 'S':\n            case 'T':\n            case 'U':\n            case\
    \ 'V':\n            case 'W':\n            case 'X':\n            case 'Y':\n\
    \            case 'Z':\n                sb.append(Character.toUpperCase(ch));\n\
    \                break;\n            case '@':\n            case '#':\n      \
    \          sb.append(Character.toLowerCase(ch));\n                break;\n   \
    \         default:\n                sb.append(ch);\n            }\n        }\n\
    \        return sb.toString();\n}\n    public static void main(String[] args)\
    \ {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\"\
    )).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"\
    #a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\"\
    )));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n    assert(solve((\"\
    #$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\")).equals((\"#CCC\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpatxyxmxg.java:90)\n"
  stdout: ''
  timestamp: 1660011157
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        // Write\
    \ your code here\n        char[] charArray = s.toCharArray();\n        Arrays.sort(charArray);\n\
    \        if(charArray.length==0){\n            return s;\n        }\n        StringBuilder\
    \ res=new StringBuilder();\n        for(int i=0;i<charArray.length-1;i++){\n \
    \           if(Character.isLetter(charArray[i])){\n                if(charArray[i+1]<Character.toUpperCase(charArray[i])){\n\
    \                    res.append(Character.toLowerCase(charArray[i]));\n      \
    \          }else{\n                    res.append(Character.toUpperCase(charArray[i]));\n\
    \                }\n            }else{\n                res.append(charArray[i]);\n\
    \            }\n        }\n        return res.toString();\n}\n    public static\
    \ void main(String[] args) {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n\
    \    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"\
    AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"\
    #AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"\
    2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"\
    #ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6t1690n5.java:40)\n"
  stdout: ''
  timestamp: 1660011157
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        // TODO\
    \ write your code here\n        char[] cs = s.toCharArray();\n        StringBuilder\
    \ sb = new StringBuilder();\n        for(char c: cs){\n            if (Character.isLetter(c))\
    \ {\n                sb.append(Character.toUpperCase(c));\n            } else\
    \ {\n                sb.append(c);\n            }\n        }\n        return sb.toString();\n\
    }\n    public static void main(String[] args) {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpb3rrw65z.java:32)\n"
  stdout: ''
  timestamp: 1660011157
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        \n   \
    \     for(int i = 0; i < s.length(); i++){\n            \n            if(Character.isLetter(s.charAt(i))){\n\
    \                \n                if(Character.isUpperCase(s.charAt(i))){\n \
    \                   s = s.replaceAll(\"(\" + i + \")\", \"$1\" + Character.toLowerCase(s.charAt(i))\
    \ + \"$2\");\n                }else{\n                    s = s.replaceAll(\"\
    (\" + i + \")\", \"$1\" + Character.toUpperCase(s.charAt(i)) + \"$2\");\n    \
    \            }\n            }\n            \n        }\n        \n        return\
    \ s;\n}\n    public static void main(String[] args) {\n    assert(solve((\"AsDf\"\
    )).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n \
    \   assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgayvkd55.java:36)\n"
  stdout: ''
  timestamp: 1660011157
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        StringBuilder\
    \ result = new StringBuilder();\n        for(int i = 0 ; i < s.length(); i++)\
    \ {\n            char c = s.charAt(i);\n            int x = Character.toUpperCase(c);\n\
    \            int y = Character.toLowerCase(c);\n            String temp = (x ==\
    \ y) ? c : x + y;\n            result.append(temp);\n        }\n        return\
    \ result.reverse().toString();\n}\n    public static void main(String[] args)\
    \ {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\"\
    )).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"\
    #a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\"\
    )));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n    assert(solve((\"\
    #$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\")).equals((\"#CCC\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphzi08xik.java:24: error: incompatible types: int cannot be converted\
    \ to String\n            String temp = (x == y) ? c : x + y;\n               \
    \                    ^\n1 error\n"
  stdout: ''
  timestamp: 1660011157
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        int len\
    \ = s.length();\n        if(len == 0) return \"\";\n        StringBuilder sb =\
    \ new StringBuilder();\n        char[] ca = s.toCharArray();\n        for(int\
    \ i = 0; i < len; i++){\n            char c = ca[i];\n            if(Character.isLetter(c)){\n\
    \                if(Character.isLowerCase(c))\n                    sb.append(Character.toUpperCase(c));\n\
    \                else\n                    sb.append(Character.toLowerCase(c));\n\
    \            }\n            else\n                sb.append(c);\n        }\n \
    \       return sb.toString();\n}\n    public static void main(String[] args) {\n\
    \    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\"\
    )).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"\
    #a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\"\
    )));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n    assert(solve((\"\
    #$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\")).equals((\"#CCC\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbosokroe.java:38)\n"
  stdout: ''
  timestamp: 1660011157
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        if(s.isEmpty())\
    \ return \"\";\n        return s.chars().map(Character::toUpperCase)\n       \
    \                 .map(c -> c == '#' ? Character.toLowerCase(c) : c)\n       \
    \                 .map(c -> c == '@' ? Character.toUpperCase(c) : c)\n       \
    \                 .map(c -> Character.isLetter(c) ? c.toUpperCase() : c)\n   \
    \                     .map(c -> Character.isLetter(c) ? c.toLowerCase() : c)\n\
    \                        .collect(Collectors.joining(\"\"));\n}\n    public static\
    \ void main(String[] args) {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n\
    \    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"\
    AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"\
    #AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"\
    2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"\
    #ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvvt7ge9q.java:23: error: int cannot be dereferenced\n         \
    \               .map(c -> Character.isLetter(c) ? c.toUpperCase() : c)\n     \
    \                                                      ^\n/tmp/tmpvvt7ge9q.java:24:\
    \ error: int cannot be dereferenced\n                        .map(c -> Character.isLetter(c)\
    \ ? c.toLowerCase() : c)\n                                                   \
    \        ^\n/tmp/tmpvvt7ge9q.java:25: error: method collect in interface IntStream\
    \ cannot be applied to given types;\n                        .collect(Collectors.joining(\"\
    \"));\n                        ^\n  required: Supplier<R>,ObjIntConsumer<R>,BiConsumer<R,R>\n\
    \  found:    Collector<CharSequence,CAP#1,String>\n  reason: cannot infer type-variable(s)\
    \ R\n    (actual and formal argument lists differ in length)\n  where R is a type-variable:\n\
    \    R extends Object declared in method <R>collect(Supplier<R>,ObjIntConsumer<R>,BiConsumer<R,R>)\n\
    \  where CAP#1 is a fresh type-variable:\n    CAP#1 extends Object from capture\
    \ of ?\n/tmp/tmpvvt7ge9q.java:25: error: incompatible types: cannot infer type-variable(s)\
    \ R\n                        .collect(Collectors.joining(\"\"));\n           \
    \                     ^\n    (argument mismatch; Collector<CharSequence,CAP#1,String>\
    \ cannot be converted to Supplier<R>)\n  where R is a type-variable:\n    R extends\
    \ Object declared in method <R>collect(Supplier<R>,ObjIntConsumer<R>,BiConsumer<R,R>)\n\
    \  where CAP#1 is a fresh type-variable:\n    CAP#1 extends Object from capture\
    \ of ?\n4 errors\n"
  stdout: ''
  timestamp: 1660011158
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        if(s ==\
    \ null || s.length() == 0) return s;\n        char[] arr = s.toCharArray();\n\
    \        for(int i = 0; i < arr.length; i++) {\n            if(Character.isLetter(arr[i]))\
    \ {\n                switch(Character.getType(arr[i])) {\n                case\
    \ LOWER:\n                    if(Character.isLowerCase(arr[i])) {\n          \
    \              char temp = arr[i];\n                        arr[i] = Character.toUpperCase(arr[i]);\n\
    \                        arr[i] = Character.toLowerCase(temp);\n             \
    \       }\n                    break;\n                case UPPER:\n         \
    \           if(Character.isUpperCase(arr[i])) {\n                        char\
    \ temp = arr[i];\n                        arr[i] = Character.toLowerCase(arr[i]);\n\
    \                        arr[i] = Character.toUpperCase(temp);\n             \
    \       }\n                    break;\n                }\n            }\n    \
    \    }\n        return arr;\n}\n    public static void main(String[] args) {\n\
    \    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\"\
    )).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"\
    #a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\"\
    )));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n    assert(solve((\"\
    #$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\")).equals((\"#CCC\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgl_hv9d6.java:24: error: cannot find symbol\n                case\
    \ LOWER:\n                     ^\n  symbol:   variable LOWER\n  location: class\
    \ Problem\n/tmp/tmpgl_hv9d6.java:31: error: cannot find symbol\n             \
    \   case UPPER:\n                     ^\n  symbol:   variable UPPER\n  location:\
    \ class Problem\n/tmp/tmpgl_hv9d6.java:41: error: incompatible types: char[] cannot\
    \ be converted to String\n        return arr;\n               ^\n3 errors\n"
  stdout: ''
  timestamp: 1660011158
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        String[]\
    \ arr  = s.split(\"[^a-zA-Z]\");\n        \n        for( int i = 0; i < arr.length;\
    \ i++ ) {\n            if( arr[i].matches(\"[A-Za-z]+\") ) {\n               \
    \ arr[i] = arr[i].replaceAll(\"([a-z])\",\"$1\\u$2\");\n                arr[i]\
    \ = arr[i].replaceAll(\"([A-Z])\",\"$2\\u$1\");\n                arr[i] = arr[i].replaceAll(\"\
    ([0-9])\",\"$1\\u$2\");\n                arr[i] = arr[i].replaceAll(\"([0-9])\"\
    ,\"$2\\u$1\");\n                arr[i] = arr[i].replaceAll(\"([@#$])\",\"\\u$1\"\
    );\n            }\n        }\n        \n        StringBuilder result = new StringBuilder();\n\
    \        \n        for( int i = 0; i < arr.length; i++ ) {\n            result.append(\
    \ arr[i] + \"\" );\n        }\n        \n        return result.toString();\n}\n\
    \    public static void main(String[] args) {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9100g0wg.java:23: error: illegal unicode escape\n             \
    \   arr[i] = arr[i].replaceAll(\"([a-z])\",\"$1\\u$2\");\n                   \
    \                                       ^\n/tmp/tmp9100g0wg.java:24: error: illegal\
    \ unicode escape\n                arr[i] = arr[i].replaceAll(\"([A-Z])\",\"$2\\\
    u$1\");\n                                                          ^\n/tmp/tmp9100g0wg.java:25:\
    \ error: illegal unicode escape\n                arr[i] = arr[i].replaceAll(\"\
    ([0-9])\",\"$1\\u$2\");\n                                                    \
    \      ^\n/tmp/tmp9100g0wg.java:26: error: illegal unicode escape\n          \
    \      arr[i] = arr[i].replaceAll(\"([0-9])\",\"$2\\u$1\");\n                \
    \                                          ^\n/tmp/tmp9100g0wg.java:27: error:\
    \ illegal unicode escape\n                arr[i] = arr[i].replaceAll(\"([@#$])\"\
    ,\"\\u$1\");\n                                                        ^\n5 errors\n"
  stdout: ''
  timestamp: 1660011157
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        char[]\
    \ chars = s.toCharArray();\n        char[] res = new char[chars.length];\n   \
    \     Arrays.fill(res, 0);\n        for(int i = 0; i < chars.length; ++i) {\n\
    \            if (Character.isLetter(chars[i])) {\n                int charCount\
    \ = s.toCharArray().length - i - 1;\n                Arrays.fill(res, chars[i],\
    \ chars[i] + charCount / 2, chars[i] - 1);\n            }\n            else\n\
    \                res[chars.length - i - 1] = chars[i];\n        }\n        return\
    \ new String(res);\n}\n    public static void main(String[] args) {\n    assert(solve((\"\
    AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n\
    \    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2ix3abcb.java:21: error: no suitable method found for fill(char[],int)\n\
    \        Arrays.fill(res, 0);\n              ^\n    method Arrays.fill(long[],long)\
    \ is not applicable\n      (argument mismatch; char[] cannot be converted to long[])\n\
    \    method Arrays.fill(int[],int) is not applicable\n      (argument mismatch;\
    \ char[] cannot be converted to int[])\n    method Arrays.fill(short[],short)\
    \ is not applicable\n      (argument mismatch; char[] cannot be converted to short[])\n\
    \    method Arrays.fill(char[],char) is not applicable\n      (argument mismatch;\
    \ possible lossy conversion from int to char)\n    method Arrays.fill(byte[],byte)\
    \ is not applicable\n      (argument mismatch; char[] cannot be converted to byte[])\n\
    \    method Arrays.fill(boolean[],boolean) is not applicable\n      (argument\
    \ mismatch; char[] cannot be converted to boolean[])\n    method Arrays.fill(double[],double)\
    \ is not applicable\n      (argument mismatch; char[] cannot be converted to double[])\n\
    \    method Arrays.fill(float[],float) is not applicable\n      (argument mismatch;\
    \ char[] cannot be converted to float[])\n    method Arrays.fill(Object[],Object)\
    \ is not applicable\n      (argument mismatch; char[] cannot be converted to Object[])\n\
    /tmp/tmp2ix3abcb.java:25: error: no suitable method found for fill(char[],char,int,int)\n\
    \                Arrays.fill(res, chars[i], chars[i] + charCount / 2, chars[i]\
    \ - 1);\n                      ^\n    method Arrays.fill(long[],int,int,long)\
    \ is not applicable\n      (argument mismatch; char[] cannot be converted to long[])\n\
    \    method Arrays.fill(int[],int,int,int) is not applicable\n      (argument\
    \ mismatch; char[] cannot be converted to int[])\n    method Arrays.fill(short[],int,int,short)\
    \ is not applicable\n      (argument mismatch; char[] cannot be converted to short[])\n\
    \    method Arrays.fill(char[],int,int,char) is not applicable\n      (argument\
    \ mismatch; possible lossy conversion from int to char)\n    method Arrays.fill(byte[],int,int,byte)\
    \ is not applicable\n      (argument mismatch; char[] cannot be converted to byte[])\n"
  stdout: ''
  timestamp: 1660011158
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        if (s\
    \ == null || s.length() == 0) {\n            return \"\";\n        }\n       \
    \ char[] c = s.toCharArray();\n        Arrays.sort(c);\n        StringBuilder\
    \ sb = new StringBuilder();\n        for (int i = 0; i < c.length; ++i) {\n  \
    \          if (Character.isLetter(c[i])) {\n                sb.append(Character.toUpperCase(c[i]));\n\
    \            } else {\n                sb.append(c[i]);\n            }\n     \
    \   }\n        return sb.toString();\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphrq_i4yk.java:35)\n"
  stdout: ''
  timestamp: 1660011158
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        String[]\
    \ chars = s.split(\"\");\n        Arrays.sort(chars);\n        if (chars.length\
    \ == 0) {\n            return s;\n        }\n        String result = \"\";\n \
    \       for (int i = 0; i < chars.length; i++) {\n            if (chars[i].equalsIgnoreCase(Character.toLowerCase(chars[0])))\
    \ {\n                result += Character.toUpperCase(chars[i]);\n            }\
    \ else {\n                result += chars[i];\n            }\n        }\n    \
    \    return result;\n}\n    public static void main(String[] args) {\n    assert(solve((\"\
    AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n\
    \    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpn5l6h7pj.java:26: error: no suitable method found for toLowerCase(String)\n\
    \            if (chars[i].equalsIgnoreCase(Character.toLowerCase(chars[0]))) {\n\
    \                                                   ^\n    method Character.toLowerCase(char)\
    \ is not applicable\n      (argument mismatch; String cannot be converted to char)\n\
    \    method Character.toLowerCase(int) is not applicable\n      (argument mismatch;\
    \ String cannot be converted to int)\n/tmp/tmpn5l6h7pj.java:27: error: no suitable\
    \ method found for toUpperCase(String)\n                result += Character.toUpperCase(chars[i]);\n\
    \                                   ^\n    method Character.toUpperCase(char)\
    \ is not applicable\n      (argument mismatch; String cannot be converted to char)\n\
    \    method Character.toUpperCase(int) is not applicable\n      (argument mismatch;\
    \ String cannot be converted to int)\n2 errors\n"
  stdout: ''
  timestamp: 1660011158
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        StringBuilder\
    \ res=new StringBuilder();\n        Set<Character> letters=new HashSet<Character>();\n\
    \        for(char c:s.toCharArray())\n            letters.add(c);\n        for(char\
    \ c:letters)\n            if(c>64&&c<91)\n                c=Character.toUpperCase(c);\n\
    \            else\n                c=Character.toLowerCase(c);\n            res.append(c);\n\
    \        return res.toString();\n}\n    public static void main(String[] args)\
    \ {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\"\
    )).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"\
    #a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\"\
    )));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n    assert(solve((\"\
    #$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\")).equals((\"#CCC\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0581a9tb.java:28: error: cannot find symbol\n            res.append(c);\n\
    \                       ^\n  symbol:   variable c\n  location: class Problem\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011158
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        char[]\
    \ chars = s.toCharArray();\n        StringBuilder reversed = new StringBuilder();\n\
    \        for (char c : chars) {\n            if (Character.isLetter(c)) {\n  \
    \              reversed.append(Character.toUpperCase(c));\n            } else\
    \ {\n                reversed.append(Character.toLowerCase(c));\n            }\n\
    \        }\n        return reversed.toString();\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6m5f5wwi.java:31)\n"
  stdout: ''
  timestamp: 1660011158
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        return\
    \ s;\n}\n    public static void main(String[] args) {\n    assert(solve((\"AsDf\"\
    )).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n \
    \   assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzv_0ue82.java:22)\n"
  stdout: ''
  timestamp: 1660011158
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        StringBuilder\
    \ sb = new StringBuilder();\n        for (char c : s.toCharArray()) {\n      \
    \      if (Character.isLetter(c)) {\n                String upperCase = Character.toUpperCase(c);\n\
    \                String lowerCase = Character.toLowerCase(c);\n              \
    \  if (sb.length() == 0) {\n                    sb.append(lowerCase);\n      \
    \          } else if (sb.length() > 0) {\n                    sb.append(lowerCase);\n\
    \                    sb.append(upperCase);\n                }\n            } else\
    \ if (sb.length() > 0) {\n                sb.append(c);\n            }\n     \
    \   }\n        return sb.toString();\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_lg29rp3.java:22: error: incompatible types: char cannot be converted\
    \ to String\n                String upperCase = Character.toUpperCase(c);\n  \
    \                                                      ^\n/tmp/tmp_lg29rp3.java:23:\
    \ error: incompatible types: char cannot be converted to String\n            \
    \    String lowerCase = Character.toLowerCase(c);\n                          \
    \                              ^\n2 errors\n"
  stdout: ''
  timestamp: 1660011158
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        char[]\
    \ chars = s.toCharArray();\n        String result = \"\";\n        for (int i\
    \ = 0; i < chars.length; i++) {\n            Character c = chars[i];\n       \
    \     if (Character.isLetter(chars[i])) {\n                result = result.toUpperCase();\n\
    \            } else {\n                result = result.toLowerCase();\n      \
    \      }\n        }\n        return result;\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfq7s7a74.java:32)\n"
  stdout: ''
  timestamp: 1660011158
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        List<Integer>\
    \ indexs = new ArrayList<>();\n        for (char c : s.toCharArray()) {\n    \
    \        if (Character.isUpperCase(c)) {\n                indexs.add(Character.toLowerCase(c)\
    \ - 'a');\n            } else {\n                indexs.add(Character.toUpperCase(c)\
    \ - 'A');\n            }\n        }\n        return s.replaceAll(\"[\" + String.join(\"\
    \", IntStream.range(0, indexs.size()).mapToObj(i -> i + \"-\" + (i + 1)).collect(Collectors.joining(\"\
    |\"))) + \"]\", s -> String.valueOf(indexs.get(s.charAt(0) - 'a')));\n}\n    public\
    \ static void main(String[] args) {\n    assert(solve((\"AsDf\")).equals((\"aSdF\"\
    )));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpin4u3wzz.java:27: error: incompatible types: String is not a functional\
    \ interface\n        return s.replaceAll(\"[\" + String.join(\"\", IntStream.range(0,\
    \ indexs.size()).mapToObj(i -> i + \"-\" + (i + 1)).collect(Collectors.joining(\"\
    |\"))) + \"]\", s -> String.valueOf(indexs.get(s.charAt(0) - 'a')));\n       \
    \         ^\n/tmp/tmpin4u3wzz.java:27: error: variable s is already defined in\
    \ method solve(String)\n        return s.replaceAll(\"[\" + String.join(\"\",\
    \ IntStream.range(0, indexs.size()).mapToObj(i -> i + \"-\" + (i + 1)).collect(Collectors.joining(\"\
    |\"))) + \"]\", s -> String.valueOf(indexs.get(s.charAt(0) - 'a')));\n       \
    \                                                                            \
    \                                                                           ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n2 errors\n"
  stdout: ''
  timestamp: 1660011158
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        return\
    \ s.replaceAll(\"(?i)([a-z]+)\", s -> s.replaceAll(\"(?i)([A-Z]+)\", s -> s.replaceAll(\"\
    (?i)([A-Z][a-z]+)\", \"$2$1\")))\n            .replaceAll(\"(?i)([A-Z]+)\", s\
    \ -> s.replaceAll(\"(?i)([a-z]+)\", \"$2\"));\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4hmq0frw.java:19: error: incompatible types: String is not a functional\
    \ interface\n        return s.replaceAll(\"(?i)([a-z]+)\", s -> s.replaceAll(\"\
    (?i)([A-Z]+)\", s -> s.replaceAll(\"(?i)([A-Z][a-z]+)\", \"$2$1\")))\n       \
    \         ^\n/tmp/tmp4hmq0frw.java:19: error: variable s is already defined in\
    \ method solve(String)\n        return s.replaceAll(\"(?i)([a-z]+)\", s -> s.replaceAll(\"\
    (?i)([A-Z]+)\", s -> s.replaceAll(\"(?i)([A-Z][a-z]+)\", \"$2$1\")))\n       \
    \                                     ^\n/tmp/tmp4hmq0frw.java:20: error: variable\
    \ s is already defined in method solve(String)\n            .replaceAll(\"(?i)([A-Z]+)\"\
    , s -> s.replaceAll(\"(?i)([a-z]+)\", \"$2\"));\n                            \
    \            ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n3 errors\n"
  stdout: ''
  timestamp: 1660011158
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        if (s\
    \ == null || s.length() == 0) {\n            return s;\n        }\n        char[]\
    \ array = s.toCharArray();\n        Arrays.sort(array);\n        StringBuilder\
    \ builder = new StringBuilder();\n        int i = 0;\n        int count = 0;\n\
    \        while (i < array.length && count < array.length) {\n            char\
    \ a = array[i];\n            char b = array[count];\n            if (a == b) {\n\
    \                count++;\n                i++;\n            }\n            else\
    \ if (a < b) {\n                builder.append(b);\n                i++;\n   \
    \         }\n            else {\n                builder.append(a);\n        \
    \        count--;\n            }\n        }\n        while (count > 0) {\n   \
    \         builder.append(array[count]);\n            count--;\n        }\n   \
    \     return builder.toString();\n}\n    public static void main(String[] args)\
    \ {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\"\
    )).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"\
    #a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\"\
    )));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n    assert(solve((\"\
    #$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\")).equals((\"#CCC\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.ArrayIndexOutOfBoundsException:\
    \ Index 4 out of bounds for length 4\n\tat Problem.solve(tmpiith4azt.java:44)\n\
    \tat Problem.main(tmpiith4azt.java:50)\n"
  stdout: ''
  timestamp: 1660011158
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        if (s\
    \ == null || s.length() <= 0) {\n            return \"\";\n        }\n       \
    \ // write your code here\n        char[] chars = s.toCharArray();\n        StringBuilder\
    \ sb = new StringBuilder();\n        boolean flag = false;\n        for (char\
    \ c : chars) {\n            if (Character.isLetter(c)) {\n                flag\
    \ = true;\n                sb.append(Character.toUpperCase(c));\n            }\
    \ else if (flag) {\n                sb.append(Character.toLowerCase(c));\n   \
    \         } else {\n                sb.append(c);\n            }\n        }\n\
    \        return sb.toString();\n}\n    public static void main(String[] args)\
    \ {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\"\
    )).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"\
    #a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\"\
    )));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n    assert(solve((\"\
    #$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\")).equals((\"#CCC\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpu_xr_msy.java:39)\n"
  stdout: ''
  timestamp: 1660011158
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        StringBuilder\
    \ sb = new StringBuilder();\n        char[] ch = s.toCharArray();\n        for\
    \ (int i = 0; i < ch.length; i++) {\n            if (Character.isLetter(ch[i]))\n\
    \                sb.append(Character.toLowerCase(ch[i]));\n            else\n\
    \                sb.append(ch[i]);\n        }\n        return sb.toString();\n\
    }\n    public static void main(String[] args) {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpn2_3ztlg.java:30)\n"
  stdout: ''
  timestamp: 1660011158
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        return\
    \ s.chars().mapToObj(c -> (char)(c)).collect(Collectors.joining());\n}\n    public\
    \ static void main(String[] args) {\n    assert(solve((\"AsDf\")).equals((\"aSdF\"\
    )));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpy2_uebe_.java:19: error: no suitable method found for collect(Collector<CharSequence,CAP#1,String>)\n\
    \        return s.chars().mapToObj(c -> (char)(c)).collect(Collectors.joining());\n\
    \                                                 ^\n    method Stream.<R#1>collect(Supplier<R#1>,BiConsumer<R#1,?\
    \ super Character>,BiConsumer<R#1,R#1>) is not applicable\n      (cannot infer\
    \ type-variable(s) R#1\n        (actual and formal argument lists differ in length))\n\
    \    method Stream.<R#2,A>collect(Collector<? super Character,A,R#2>) is not applicable\n\
    \      (cannot infer type-variable(s) R#2,A\n        (argument mismatch; Collector<CharSequence,CAP#2,String>\
    \ cannot be converted to Collector<? super Character,A,R#2>))\n  where R#1,T,R#2,A\
    \ are type-variables:\n    R#1 extends Object declared in method <R#1>collect(Supplier<R#1>,BiConsumer<R#1,?\
    \ super T>,BiConsumer<R#1,R#1>)\n    T extends Object declared in interface Stream\n\
    \    R#2 extends Object declared in method <R#2,A>collect(Collector<? super T,A,R#2>)\n\
    \    A extends Object declared in method <R#2,A>collect(Collector<? super T,A,R#2>)\n\
    \  where CAP#1,CAP#2 are fresh type-variables:\n    CAP#1 extends Object from\
    \ capture of ?\n    CAP#2 extends Object from capture of ?\n1 error\n"
  stdout: ''
  timestamp: 1660011158
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        if (s.isEmpty())\
    \ return s;\n        String[] parts = s.split(\"\");\n        Arrays.sort(parts);\n\
    \        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i <\
    \ parts.length; i++) {\n            char c = parts[i].toUpperCase().charAt(0);\n\
    \            if (Character.isLetter(c)) {\n                if (c == 'A') {\n \
    \                   sb.append(c);\n                } else {\n                \
    \    sb.append(Character.toLowerCase(c));\n                }\n            } else\
    \ {\n                sb.append(parts[i]);\n            }\n        }\n        return\
    \ sb.toString();\n}\n    public static void main(String[] args) {\n    assert(solve((\"\
    AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n\
    \    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpud527fvz.java:38)\n"
  stdout: ''
  timestamp: 1660011159
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        StringBuilder\
    \ sb = new StringBuilder();\n        for(char ch : s.toCharArray()) {\n      \
    \      switch(ch) {\n                case 'a':\n                case 'b':\n  \
    \              case 'c':\n                    sb.append(Character.toUpperCase(ch));\n\
    \                    break;\n                case 'A':\n                case 'B':\n\
    \                case 'C':\n                    sb.append(Character.toLowerCase(ch));\n\
    \                    break;\n                default:\n                    sb.append(ch);\n\
    \            }\n        }\n        return sb.toString();\n}\n    public static\
    \ void main(String[] args) {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n\
    \    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"\
    AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"\
    #AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"\
    2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"\
    #ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpauv7q96e.java:39)\n"
  stdout: ''
  timestamp: 1660011158
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        char[]\
    \ arr1 = s.toCharArray();\n        int len = arr1.length;\n        char t;\n \
    \       if (len == 0) {\n            return \"\";\n        }\n        char[] arr2\
    \ = new char[len];\n        int index = 0;\n        for (int i = 0; i < len -\
    \ 1; i++) {\n            t = arr1[i];\n            arr2[index] = t;\n        \
    \    index++;\n        }\n        return String.valueOf(arr2);\n}\n    public\
    \ static void main(String[] args) {\n    assert(solve((\"AsDf\")).equals((\"aSdF\"\
    )));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7bue_rjw.java:35)\n"
  stdout: ''
  timestamp: 1660011158
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        String\
    \ result = \"\";\n        for( int i = 0; i < s.length(); i++) {\n           \
    \ if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z') {\n                result = result\
    \ + Character.toUpperCase(s.charAt(i)) + s.substring(0,i+1);\n            }\n\
    \            else {\n                result = result + s.charAt(i) + s.substring(0,i+1);\n\
    \            }\n        }\n        return result;\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd34kumss.java:31)\n"
  stdout: ''
  timestamp: 1660011158
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        System.out.println(s.toLowerCase());\n\
    \        return \"\";\n}\n    public static void main(String[] args) {\n    assert(solve((\"\
    AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n\
    \    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzq_mm_gw.java:23)\n"
  stdout: 'asdf

    '
  timestamp: 1660011158
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        String\
    \ newString = \"\";\n        for(char c : s.toCharArray()) {\n            if(!Character.isLetter(c))\
    \ {\n                c = Character.toUpperCase(c);\n            } else{\n    \
    \            c = Character.toLowerCase(c);\n            }\n            newString\
    \ += c;\n        }\n        return newString;\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprxf4_zi4.java:31)\n"
  stdout: ''
  timestamp: 1660011159
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        return\
    \ s;\n}\n    public static void main(String[] args) {\n    assert(solve((\"AsDf\"\
    )).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n \
    \   assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzv_0ue82.java:22)\n"
  stdout: ''
  timestamp: 1660011158
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        StringBuilder\
    \ sb = new StringBuilder();\n        if(s.length() > 0) {\n            for(char\
    \ c: s.toCharArray()) {\n                if(Character.isLetter(c)) {\n       \
    \             sb.append(Character.toUpperCase(c));\n                } else {\n\
    \                    sb.append(c);\n                }\n            }\n       \
    \     return sb.toString();\n        }\n        return s;\n}\n    public static\
    \ void main(String[] args) {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n\
    \    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"\
    AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"\
    #AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"\
    2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"\
    #ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd_x0tgjs.java:33)\n"
  stdout: ''
  timestamp: 1660011159
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        int count\
    \ = 0;\n        boolean isFirst = true;\n        char[] chArray = s.toCharArray();\n\
    \        for(int i = 0; i < chArray.length; i++) {\n            char ch1 = chArray[i];\n\
    \            if (isFirst) {\n                isFirst = false;\n              \
    \  continue;\n            } else {\n                if (isLetter(ch1)) {\n   \
    \                 int temp = ch1 - 'a';\n                    temp = temp * 10\
    \ + (isLower(ch1) ? 9 : 0);\n                    count += temp;\n            \
    \    } else if (isLetter(chArray[i])) {\n                    count += chArray[i]\
    \ - 'a';\n                } else {\n                    count += chArray[i];\n\
    \                }\n            }\n        }\n        int reverseCount = (count\
    \ + count) / 2;\n        StringBuilder sb = new StringBuilder(s.length());\n \
    \       for(int i = s.length() - 1; i >= 0; i--) {\n            char ch2 = s.charAt(i);\n\
    \            if (isFirst) {\n                sb.append(ch2);\n               \
    \ isFirst = false;\n                continue;\n            } else {\n        \
    \        if (isLetter(ch2)) {\n                    int temp = ch2 - 'a';\n   \
    \                 temp = temp * 10 + (isLower(ch2) ? 9 : 0);\n               \
    \     reverseCount += temp;\n                } else if (isLetter(chArray[i]))\
    \ {\n                    reverseCount += chArray[i] - 'a';\n                }\
    \ else {\n                    reverseCount += chArray[i];\n                }\n\
    \            }\n        }\n        count = reverseCount;\n        if(count > 0)\
    \ {\n            sb.insert(0, (char) count);\n        }\n        return sb.toString();\n\
    }\n    public static void main(String[] args) {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpx1chgaaa.java:28: error: cannot find symbol\n                if\
    \ (isLetter(ch1)) {\n                    ^\n  symbol:   method isLetter(char)\n\
    \  location: class Problem\n/tmp/tmpx1chgaaa.java:30: error: cannot find symbol\n\
    \                    temp = temp * 10 + (isLower(ch1) ? 9 : 0);\n            \
    \                            ^\n  symbol:   method isLower(char)\n  location:\
    \ class Problem\n/tmp/tmpx1chgaaa.java:32: error: cannot find symbol\n       \
    \         } else if (isLetter(chArray[i])) {\n                           ^\n \
    \ symbol:   method isLetter(char)\n  location: class Problem\n/tmp/tmpx1chgaaa.java:48:\
    \ error: cannot find symbol\n                if (isLetter(ch2)) {\n          \
    \          ^\n  symbol:   method isLetter(char)\n  location: class Problem\n/tmp/tmpx1chgaaa.java:50:\
    \ error: cannot find symbol\n                    temp = temp * 10 + (isLower(ch2)\
    \ ? 9 : 0);\n                                        ^\n  symbol:   method isLower(char)\n\
    \  location: class Problem\n/tmp/tmpx1chgaaa.java:52: error: cannot find symbol\n\
    \                } else if (isLetter(chArray[i])) {\n                        \
    \   ^\n  symbol:   method isLetter(char)\n  location: class Problem\n6 errors\n"
  stdout: ''
  timestamp: 1660011159
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        return\
    \ Arrays.stream(s.toCharArray()).map(c -> isLetter(c) ? Character.toUpperCase(c)\
    \ : Character.toLowerCase(c)).collect(joining(\"\")).reverse().orElse(s);\n}\n\
    \    public static void main(String[] args) {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpw5ggaq0m.java:19: error: no suitable method found for stream(char[])\n\
    \        return Arrays.stream(s.toCharArray()).map(c -> isLetter(c) ? Character.toUpperCase(c)\
    \ : Character.toLowerCase(c)).collect(joining(\"\")).reverse().orElse(s);\n  \
    \                   ^\n    method Arrays.<T#1>stream(T#1[]) is not applicable\n\
    \      (inference variable T#1 has incompatible bounds\n        equality constraints:\
    \ char\n        lower bounds: Object)\n    method Arrays.<T#2>stream(T#2[],int,int)\
    \ is not applicable\n      (cannot infer type-variable(s) T#2\n        (actual\
    \ and formal argument lists differ in length))\n    method Arrays.stream(int[])\
    \ is not applicable\n      (argument mismatch; char[] cannot be converted to int[])\n\
    \    method Arrays.stream(long[]) is not applicable\n      (argument mismatch;\
    \ char[] cannot be converted to long[])\n    method Arrays.stream(double[]) is\
    \ not applicable\n      (argument mismatch; char[] cannot be converted to double[])\n\
    \  where T#1,T#2 are type-variables:\n    T#1 extends Object declared in method\
    \ <T#1>stream(T#1[])\n    T#2 extends Object declared in method <T#2>stream(T#2[],int,int)\n\
    /tmp/tmpw5ggaq0m.java:19: error: cannot find symbol\n        return Arrays.stream(s.toCharArray()).map(c\
    \ -> isLetter(c) ? Character.toUpperCase(c) : Character.toLowerCase(c)).collect(joining(\"\
    \")).reverse().orElse(s);\n                                                  \
    \                                                                            \
    \    ^\n  symbol:   method joining(String)\n  location: class Problem\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    2 errors\n"
  stdout: ''
  timestamp: 1660011159
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        return\
    \ s.length() <= 0 ? s : s.chars().map(c -> Character.isUpperCase(c) && c != 0x20\
    \ || !Character.isUpperCase(c) ? Character.toLowerCase(c) : Character.toUpperCase(c)).collect(StringBuilder::new,\
    \ StringBuilder::appendCodePoint, StringBuilder::append).toString();\n}\n    public\
    \ static void main(String[] args) {\n    assert(solve((\"AsDf\")).equals((\"aSdF\"\
    )));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp29blr73n.java:22)\n"
  stdout: ''
  timestamp: 1660011159
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        if (s\
    \ == null || s.length() == 0)\n            return s;\n        char str[] = s.toCharArray();\n\
    \        Arrays.sort(str);\n        StringBuilder strBuilder = new StringBuilder();\n\
    \        for (char c : str) {\n            if (Character.isLetter(c))\n      \
    \          strBuilder.append(Character.toUpperCase(c));\n            else\n  \
    \              strBuilder.append(c);\n        }\n        return strBuilder.toString();\n\
    }\n    public static void main(String[] args) {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgdb56zc0.java:33)\n"
  stdout: ''
  timestamp: 1660011159
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        char[]\
    \ ca = s.toCharArray();\n        Arrays.sort(ca);\n        StringBuilder sb =\
    \ new StringBuilder(ca.length);\n        for(int i = 0; i < ca.length; i++) {\n\
    \            if (Character.isLetter(ca[i]))\n                ca[i] = Character.toUpperCase(ca[i]);\n\
    \            else\n                ca[i] = Character.toLowerCase(ca[i]);\n   \
    \     }\n        for(char c : ca) {\n            sb.append(c);\n        }\n  \
    \      return sb.toString();\n}\n    public static void main(String[] args) {\n\
    \    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\"\
    )).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"\
    #a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\"\
    )));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n    assert(solve((\"\
    #$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\")).equals((\"#CCC\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpylfnzivi.java:34)\n"
  stdout: ''
  timestamp: 1660011159
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        char[]\
    \ sArray = s.toCharArray();\n        StringBuilder sBuilder = new StringBuilder();\n\
    \        for(int i = 0; i < sArray.length; i++){\n            if(Character.isLetter(sArray[i])){\n\
    \                char c = Character.toUpperCase(sArray[i]);\n                sArray[i]\
    \ = c;\n                sBuilder.append(sArray[i]);\n            } else {\n  \
    \              sBuilder.append(sArray[i]);\n            }\n        }\n       \
    \ return sBuilder.toString();\n}\n    public static void main(String[] args) {\n\
    \    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\"\
    )).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"\
    #a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\"\
    )));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n    assert(solve((\"\
    #$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\")).equals((\"#CCC\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgjr44yfr.java:33)\n"
  stdout: ''
  timestamp: 1660011159
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        StringBuilder\
    \ sb = new StringBuilder();\n        char[] chars = s.toCharArray();\n       \
    \ boolean isUpper = true;\n        boolean isLower = true;\n        for (char\
    \ c : chars) {\n            if (Character.isLetter(c)) {\n                isUpper\
    \ = isUpper && Character.isUpperCase(c);\n                isLower = isLower &&\
    \ Character.isLowerCase(c);\n            }\n            else {\n             \
    \   isUpper = isUpper && !Character.isUpperCase(c);\n                isLower =\
    \ isLower && !Character.isLowerCase(c);\n            }\n            if (isUpper\
    \ && isLower && !isLower) {\n                sb.append(Character.toLowerCase(c));\n\
    \            }\n            else if (isUpper && !isLower) {\n                sb.append(Character.toUpperCase(c));\n\
    \            }\n            else if (!isUpper && isLower) {\n                sb.append(Character.toLowerCase(c));\n\
    \            }\n            else {\n                sb.append(c);\n          \
    \  }\n        }\n        return sb.toString();\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9xadbeu1.java:48)\n"
  stdout: ''
  timestamp: 1660011159
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        if(s.length()\
    \ > 0) {\n            String res = \"\";\n            char[] chArr = s.toCharArray();\n\
    \            for(int i = 0; i < chArr.length; i++) {\n                if(Character.isLetter(chArr[i]))\
    \ {\n                    //if(Character.isUpperCase(chArr[i])) \n            \
    \        //    chArr[i] = Character.toLowerCase(chArr[i]);\n                 \
    \   //else\n                    //    chArr[i] = Character.toUpperCase(chArr[i]);\n\
    \                    if(Character.isUpperCase(chArr[i])) \n                  \
    \      chArr[i] = Character.toLowerCase(chArr[i]);\n                    else\n\
    \                        chArr[i] = Character.toUpperCase(chArr[i]);\n       \
    \         }\n                else {\n                    if(chArr[i] != s.charAt(i))\n\
    \                        res = res + chArr[i];\n                }\n          \
    \  }\n            return res;\n        }\n        else\n            return s;\n\
    }\n    public static void main(String[] args) {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7owho784.java:44)\n"
  stdout: ''
  timestamp: 1660011159
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        if(s.isEmpty())\
    \ return \"\";\n        if(!s.matches(\"[a-zA-Z]+\")) return s;\n        return\
    \ s.toLowerCase().chars().map(c -> Character.isUpperCase(c) ? Character.toUpperCase(c)\
    \ : Character.toLowerCase(c)).reduce((i, j) -> i + j).toString() + s.toUpperCase().chars().map(c\
    \ -> Character.isUpperCase(c) ? Character.toLowerCase(c) : Character.toUpperCase(c)).reduce((i,\
    \ j) -> i + j).toString();\n}\n    public static void main(String[] args) {\n\
    \    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\"\
    )).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"\
    #a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\"\
    )));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n    assert(solve((\"\
    #$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\")).equals((\"#CCC\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3k71i5fb.java:24)\n"
  stdout: ''
  timestamp: 1660011159
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        StringBuilder\
    \ sb = new StringBuilder();\n        char[] ca = s.toCharArray();\n        for(int\
    \ i = 0; i < ca.length; i++) {\n            char c = ca[i];\n            if (Character.isLetter(c))\
    \ {\n                if (Character.isLowerCase(c)) {\n                    sb.append(Character.toUpperCase(c));\n\
    \                } else {\n                    sb.append(Character.toLowerCase(c));\n\
    \                }\n            } else {\n                sb.append(c);\n    \
    \        }\n        }\n        return sb.toString();\n}\n    public static void\
    \ main(String[] args) {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n \
    \   assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"\
    AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"\
    #AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"\
    2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"\
    #ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptho8mw08.java:37)\n"
  stdout: ''
  timestamp: 1660011159
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        if(s.isEmpty())\
    \ {\n            return \"\";\n        }\n        char[] arr = s.toCharArray();\n\
    \        for(int i = 0; i < arr.length; i++) {\n            if(Character.isLetter(arr[i]))\
    \ {\n                if(Character.isLowerCase(arr[i])) {\n                   \
    \ arr[i] = Character.toUpperCase(arr[i]);\n                } else if(Character.isUpperCase(arr[i]))\
    \ {\n                    arr[i] = Character.toLowerCase(arr[i]);\n           \
    \     }\n            }\n        }\n        return new String(arr);\n}\n    public\
    \ static void main(String[] args) {\n    assert(solve((\"AsDf\")).equals((\"aSdF\"\
    )));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpku__pp5w.java:36)\n"
  stdout: ''
  timestamp: 1660011159
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        if(s.length()\
    \ == 0)\n            return \"\";\n        StringBuilder builder = new StringBuilder();\n\
    \        for(char c : s.toCharArray()){\n            if(c>='a' && c<='z'){\n \
    \               builder.append((char) (c - 32));\n            }else{\n       \
    \         builder.append(c);\n            }\n        }\n        return builder.toString();\n\
    }\n    public static void main(String[] args) {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpw0odr_a3.java:32)\n"
  stdout: ''
  timestamp: 1660011159
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        String\
    \ result = s;\n        for (int i = 0; i <= s.length(); i++) {\n            char\
    \ c = s.charAt(i);\n            if (isLetter(c)) {\n                result = s.replace(c,\
    \ c+\"\").replaceAll(\"[^a-zA-Z]\", \"\");\n            }\n        }\n       \
    \ \n        return result;\n}\n    public static void main(String[] args) {\n\
    \    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\"\
    )).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"\
    #a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\"\
    )));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n    assert(solve((\"\
    #$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\")).equals((\"#CCC\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5n5ma9ps.java:22: error: cannot find symbol\n            if (isLetter(c))\
    \ {\n                ^\n  symbol:   method isLetter(char)\n  location: class Problem\n\
    /tmp/tmp5n5ma9ps.java:23: error: no suitable method found for replace(char,String)\n\
    \                result = s.replace(c, c+\"\").replaceAll(\"[^a-zA-Z]\", \"\"\
    );\n                          ^\n    method String.replace(char,char) is not applicable\n\
    \      (argument mismatch; String cannot be converted to char)\n    method String.replace(CharSequence,CharSequence)\
    \ is not applicable\n      (argument mismatch; char cannot be converted to CharSequence)\n\
    2 errors\n"
  stdout: ''
  timestamp: 1660011159
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        char[]\
    \ arr = s.toCharArray();\n        if (arr.length == 0) return s;\n        Arrays.sort(arr);\n\
    \        StringBuilder sb = new StringBuilder();\n        for (char c : arr) {\n\
    \            if (Character.isLetter(c)) {\n                switch (c) {\n    \
    \                case 'a': sb.append('A'); break;\n                    case 'b':\
    \ sb.append('B'); break;\n                    case 'c': sb.append('C'); break;\n\
    \                    case 'd': sb.append('D'); break;\n                    case\
    \ 'e': sb.append('E'); break;\n                    case 'f': sb.append('F'); break;\n\
    \                    case 'g': sb.append('G'); break;\n                    case\
    \ 'h': sb.append('H'); break;\n                    case 'i': sb.append('I'); break;\n\
    \                    case 'j': sb.append('J'); break;\n                    case\
    \ 'k': sb.append('K'); break;\n                    case 'l': sb.append('L'); break;\n\
    \                    case 'm': sb.append('M'); break;\n                    case\
    \ 'n': sb.append('N'); break;\n                    case 'o': sb.append('O'); break;\n\
    \                    case 'p': sb.append('P'); break;\n                    case\
    \ 'q': sb.append('Q'); break;\n                    case 'r': sb.append('R'); break;\n\
    \                    case 's': sb.append('S'); break;\n                    case\
    \ 't': sb.append('T'); break;\n                    case 'u': sb.append('U'); break;\n\
    \                    case 'v': sb.append('V'); break;\n                    case\
    \ 'w': sb.append('W'); break;\n                    case 'x': sb.append('X'); break;\n\
    \                    case 'y': sb.append('Y'); break;\n                    case\
    \ 'z': sb.append('Z'); break;\n                }\n            }\n            else\
    \ {\n                sb.append(c);\n            }\n        }\n        return sb.toString();\n\
    }\n    public static void main(String[] args) {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpw0c6ylz6.java:61)\n"
  stdout: ''
  timestamp: 1660011160
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        // Write\
    \ your code here\n        String[] split = s.split(\"(?<=\\\\P{L})\");\n     \
    \   for(int i=0; i<split.length; i++){\n            if(Character.isLetter(split[i].charAt(0))){\n\
    \                String temp = Character.toLowerCase(split[i].charAt(0)) + split[i].substring(1);\n\
    \                split[i] = temp;\n            }\n        }\n        String str\
    \ = String.join(\"\", split);\n        return str;\n}\n    public static void\
    \ main(String[] args) {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n \
    \   assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"\
    AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"\
    #AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"\
    2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"\
    #ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcuzb__p7.java:31)\n"
  stdout: ''
  timestamp: 1660011159
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        StringBuilder\
    \ sb = new StringBuilder();\n        for (int i = 0, len = s.length(); i < len;\
    \ i++) {\n            char c = s.charAt(i);\n            String reverseStr = \"\
    \";\n            switch(Character.toLowerCase(c)) {\n                case ' ':\n\
    \                    break;\n                case 'a':\n                    reverseStr\
    \ += Character.toUpperCase(c);\n                    break;\n                case\
    \ 'b':\n                    reverseStr += Character.toUpperCase(c);\n        \
    \            break;\n                case 'c':\n                    reverseStr\
    \ += Character.toUpperCase(c);\n                    break;\n                case\
    \ 'd':\n                    reverseStr += Character.toUpperCase(c);\n        \
    \            break;\n                case 'e':\n                    reverseStr\
    \ += Character.toUpperCase(c);\n                    break;\n                case\
    \ 'f':\n                    reverseStr += Character.toUpperCase(c);\n        \
    \            break;\n                case 'g':\n                    reverseStr\
    \ += Character.toUpperCase(c);\n                    break;\n                case\
    \ 'h':\n                    reverseStr += Character.toUpperCase(c);\n        \
    \            break;\n                case 'i':\n                    reverseStr\
    \ += Character.toUpperCase(c);\n                    break;\n                case\
    \ 'j':\n                    reverseStr += Character.toUpperCase(c);\n        \
    \            break;\n                case 'k':\n                    reverseStr\
    \ += Character.toUpperCase(c);\n                    break;\n                case\
    \ 'l':\n                    reverseStr += Character.toUpperCase(c);\n        \
    \            break;\n                case 'm':\n                    reverseStr\
    \ += Character.toUpperCase(c);\n                    break;\n                case\
    \ 'n':\n                    reverseStr += Character.toUpperCase(c);\n        \
    \            break;\n                case 'o':\n                    reverseStr\
    \ += Character.toUpperCase(c);\n                    break;\n                case\
    \ 'p':\n                    reverseStr += Character.toUpperCase(c);\n        \
    \            break;\n                case 'q':\n                    reverseStr\
    \ += Character.toUpperCase(c);\n                    break;\n                case\
    \ 'r':\n                    reverseStr += Character.toUpperCase(c);\n        \
    \            break;\n                case 's':\n                    reverseStr\
    \ += Character.toUpperCase(c);\n                    break;\n                case\
    \ 't':\n                    reverseStr += Character.toUpperCase(c);\n        \
    \            break;\n                case 'u':\n                    reverseStr\
    \ += Character.toUpperCase(c);\n                    break;\n                case\
    \ 'v':\n                    reverseStr += Character.toUpperCase(c);\n        \
    \            break;\n                case 'w':\n                    reverseStr\
    \ += Character.toUpperCase(c);\n                    break;\n                case\
    \ 'x':\n                    reverseStr += Character.toUpperCase(c);\n        \
    \            break;\n                case 'y':\n                    reverseStr\
    \ += Character.toUpperCase(c);\n                    break;\n                case\
    \ 'z':\n                    reverseStr += Character.toUpperCase(c);\n        \
    \            break;\n                default:\n                    reverseStr\
    \ += c;\n                    break;\n            }\n            sb.append(reverseStr);\n\
    \        }\n        return sb.toString();\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpl0dje4p_.java:113)\n"
  stdout: ''
  timestamp: 1660011160
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        System.out.println(s);\n\
    \        StringBuilder result = new StringBuilder();\n        for(int i=0;i<s.length();i++)\
    \ {\n            String str = s.substring(0,i);\n            if(str.matches(\"\
    [a-zA-Z]\")) {\n                char letter = str.charAt(0);\n               \
    \ str = Character.toUpperCase(letter) + str.substring(1);\n                str\
    \ = Character.toLowerCase(letter) + str.substring(1);\n            }\n       \
    \     result.append(str);\n        }\n        System.out.println(result);\n  \
    \      return result.toString();\n}\n    public static void main(String[] args)\
    \ {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\"\
    )).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"\
    #a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\"\
    )));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n    assert(solve((\"\
    #$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\")).equals((\"#CCC\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpg1_cbz0q.java:34)\n"
  stdout: 'AsDf

    aAsAsD

    '
  timestamp: 1660011160
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        \n   \
    \     char[] chars = s.toCharArray();\n        Arrays.sort(chars);\n        StringBuilder\
    \ builder = new StringBuilder();\n        for (int i = 0; i<chars.length; i++){\n\
    \            if (Character.isLetter(chars[i])) {\n                builder.append(new\
    \ StringBuilder(chars[i]).reverse());\n            } else {\n                builder.append(chars[i]);\n\
    \            }\n        }\n        return builder.toString();\n}\n    public static\
    \ void main(String[] args) {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n\
    \    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"\
    AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"\
    #AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"\
    2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"\
    #ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprbknqbow.java:33)\n"
  stdout: ''
  timestamp: 1660011160
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        final\
    \ int length = s.length();\n        final char alpha = 'a';\n        final char\
    \ alphaUpperCase = Character.toUpperCase(alpha);\n        final char alphaLowerCase\
    \ = Character.toLowerCase(alpha);\n        final StringBuilder result = new StringBuilder(length);\n\
    \        for (final char c : s.toCharArray()) {\n            if (alpha <= c &&\
    \ c <= alphaUpperCase) {\n                result.append(Character.toUpperCase(c));\n\
    \            } else if (alpha <= c && c <= alphaLowerCase) {\n               \
    \ result.append(Character.toLowerCase(c));\n            } else {\n           \
    \     result.append(c);\n            }\n        }\n        return result.toString();\n\
    }\n    public static void main(String[] args) {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxukilz49.java:36)\n"
  stdout: ''
  timestamp: 1660011160
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        if(s==null\
    \ || s.length()==0)\n            return \"#\";\n        \n        for(int i=s.length()-1;i>=0;i--)\n\
    \        {\n            char c = s.charAt(i);\n            if(c>='A'&&c<='Z')\n\
    \            {\n                int index = s.getCharAt(i);\n                char\
    \ x = s.charAt(s.length()-i-1);\n                s = s.replaceFirst(x, Character.toString((char)\
    \ (index+(x-'A'))%26));\n            }\n            else if(c>='a'&&c<='z')\n\
    \            {\n                int index = s.getCharAt(i);\n                char\
    \ x = s.charAt(s.length()-i-1);\n                s = s.replaceFirst(x, Character.toString((char)\
    \ (index+(x-'a')+26)));\n            }\n        }\n        return s;\n}\n    public\
    \ static void main(String[] args) {\n    assert(solve((\"AsDf\")).equals((\"aSdF\"\
    )));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpod8k6616.java:27: error: cannot find symbol\n                int\
    \ index = s.getCharAt(i);\n                             ^\n  symbol:   method\
    \ getCharAt(int)\n  location: variable s of type String\n/tmp/tmpod8k6616.java:29:\
    \ error: incompatible types: char cannot be converted to String\n            \
    \    s = s.replaceFirst(x, Character.toString((char) (index+(x-'A'))%26));\n \
    \                                  ^\n/tmp/tmpod8k6616.java:33: error: cannot\
    \ find symbol\n                int index = s.getCharAt(i);\n                 \
    \            ^\n  symbol:   method getCharAt(int)\n  location: variable s of type\
    \ String\n/tmp/tmpod8k6616.java:35: error: incompatible types: char cannot be\
    \ converted to String\n                s = s.replaceFirst(x, Character.toString((char)\
    \ (index+(x-'a')+26)));\n                                   ^\nNote: Some messages\
    \ have been simplified; recompile with -Xdiags:verbose to get full output\n4 errors\n"
  stdout: ''
  timestamp: 1660011160
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        boolean\
    \ letterFlag = false;\n        boolean numberFlag = false;\n        boolean specialFlag\
    \ = false;\n        boolean spaceFlag = false;\n        for (int i = 0; i < s.length();\
    \ i++) {\n            char c = s.charAt(i);\n            if (Character.isLetter(c))\
    \ {\n                letterFlag = true;\n                specialFlag = false;\n\
    \                spaceFlag = false;\n            } else if (Character.isSpaceChar(c))\
    \ {\n                spaceFlag = true;\n                specialFlag = false;\n\
    \                numberFlag = false;\n            } else if (Character.isDigit(c))\
    \ {\n                numberFlag = true;\n                specialFlag = false;\n\
    \                spaceFlag = false;\n            } else if (Character.isAlphabetic(c))\
    \ {\n                letterFlag = true;\n                specialFlag = false;\n\
    \                spaceFlag = false;\n            } else {\n                specialFlag\
    \ = true;\n                numberFlag = false;\n                spaceFlag = false;\n\
    \            }\n        }\n        if (letterFlag) {\n            return s.toLowerCase().replaceAll(\"\
    ([a-zA-Z])\", \"$1 $2\");\n        } else if (numberFlag) {\n            return\
    \ s.toLowerCase().replaceAll(\"([0-9])\", \"$1 $2\");\n        } else if (specialFlag)\
    \ {\n            return s.toLowerCase().replaceAll(\"([!@#$%^&*])\", \"$1 $2\"\
    );\n        } else if (spaceFlag) {\n            return s.toLowerCase().replaceAll(\"\
    ([\\\\s])\", \"$1 $2\");\n        } else {\n            return s.toLowerCase().replaceAll(\"\
    ([A-Z])\", \"$1 $2\");\n        }\n}\n    public static void main(String[] args)\
    \ {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\"\
    )).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"\
    #a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\"\
    )));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n    assert(solve((\"\
    #$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\")).equals((\"#CCC\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: No group\
    \ 2\n\tat java.base/java.util.regex.Matcher.start(Matcher.java:482)\n\tat java.base/java.util.regex.Matcher.appendExpandedReplacement(Matcher.java:1090)\n\
    \tat java.base/java.util.regex.Matcher.appendReplacement(Matcher.java:997)\n\t\
    at java.base/java.util.regex.Matcher.replaceAll(Matcher.java:1181)\n\tat java.base/java.lang.String.replaceAll(String.java:2942)\n\
    \tat Problem.solve(tmp0ifkoqty.java:48)\n\tat Problem.main(tmp0ifkoqty.java:60)\n"
  stdout: ''
  timestamp: 1660011160
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        // write\
    \ your code here\n        String result = \"\";\n        if (s.matches(\"[a-zA-Z]+\"\
    )) {\n            char[] chars = s.toCharArray();\n            for (int i = 0;\
    \ i < chars.length; i++) {\n                if (Character.isLetter(chars[i]))\
    \ {\n                    String letter = String.valueOf(Character.toUpperCase(chars[i]));\n\
    \                    chars[i] = letter;\n                    letter = String.valueOf(Character.toLowerCase(letter));\n\
    \                    chars[i] = letter;\n                }\n            }\n  \
    \          result = new String(chars);\n        }\n        return result.isEmpty()\
    \ ? s : result;\n}\n    public static void main(String[] args) {\n    assert(solve((\"\
    AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n\
    \    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptly9yi7n.java:26: error: incompatible types: String cannot be converted\
    \ to char\n                    chars[i] = letter;\n                          \
    \     ^\n/tmp/tmptly9yi7n.java:27: error: no suitable method found for toLowerCase(String)\n\
    \                    letter = String.valueOf(Character.toLowerCase(letter));\n\
    \                                                     ^\n    method Character.toLowerCase(char)\
    \ is not applicable\n      (argument mismatch; String cannot be converted to char)\n\
    \    method Character.toLowerCase(int) is not applicable\n      (argument mismatch;\
    \ String cannot be converted to int)\n/tmp/tmptly9yi7n.java:28: error: incompatible\
    \ types: String cannot be converted to char\n                    chars[i] = letter;\n\
    \                               ^\n3 errors\n"
  stdout: ''
  timestamp: 1660011160
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        s = s.replaceAll(\"\
    [^A-Za-z]\", \"\");\n        return s.isEmpty() ? s : s.toLowerCase().chars()\n\
    \                .mapToObj(i -> (char) i)\n                .collect(Collectors.joining());\n\
    }\n    public static void main(String[] args) {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp457s1qj8.java:22: error: no suitable method found for collect(Collector<CharSequence,CAP#1,String>)\n\
    \                .collect(Collectors.joining());\n                ^\n    method\
    \ Stream.<R#1>collect(Supplier<R#1>,BiConsumer<R#1,? super Character>,BiConsumer<R#1,R#1>)\
    \ is not applicable\n      (cannot infer type-variable(s) R#1\n        (actual\
    \ and formal argument lists differ in length))\n    method Stream.<R#2,A>collect(Collector<?\
    \ super Character,A,R#2>) is not applicable\n      (cannot infer type-variable(s)\
    \ R#2,A\n        (argument mismatch; Collector<CharSequence,CAP#2,String> cannot\
    \ be converted to Collector<? super Character,A,R#2>))\n  where R#1,T,R#2,A are\
    \ type-variables:\n    R#1 extends Object declared in method <R#1>collect(Supplier<R#1>,BiConsumer<R#1,?\
    \ super T>,BiConsumer<R#1,R#1>)\n    T extends Object declared in interface Stream\n\
    \    R#2 extends Object declared in method <R#2,A>collect(Collector<? super T,A,R#2>)\n\
    \    A extends Object declared in method <R#2,A>collect(Collector<? super T,A,R#2>)\n\
    \  where CAP#1,CAP#2 are fresh type-variables:\n    CAP#1 extends Object from\
    \ capture of ?\n    CAP#2 extends Object from capture of ?\n1 error\n"
  stdout: ''
  timestamp: 1660011160
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        char ch[]\
    \ = s.toCharArray();\n        String result = \"\";\n        int l = s.length();\n\
    \        for(int i = 0; i < l; i++) {\n            char c = ch[i];\n         \
    \   if(Character.isLetter(c)) {\n                ch[i] = Character.toUpperCase(c);\n\
    \            } else if(!Character.isLetter(c)) {\n                ch[i] = Character.toLowerCase(c);\n\
    \            }\n            result += ch[i];\n        }\n        return result;\n\
    }\n    public static void main(String[] args) {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpt4851t6j.java:34)\n"
  stdout: ''
  timestamp: 1660011160
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        String\
    \ result = \"\";\n        for(int i = 0; i < s.length(); i++) {\n            if(Character.isLetter(s.charAt(i)))\
    \ {\n                result = new StringBuffer(s).reverse().toString();\n    \
    \        }\n            else {\n                result = s.substring(0,i) + s.substring(i,s.length());\n\
    \            }\n        }\n        return result;\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzbowzea_.java:31)\n"
  stdout: ''
  timestamp: 1660011160
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        if (s.isEmpty())\
    \ {\n            return \"\";\n        }\n        char[] chars = s.toCharArray();\n\
    \        List<String> result = new ArrayList<String>();\n        for (char c :\
    \ chars) {\n            if (Character.isLetter(c)) {\n                if (Character.isUpperCase(c))\
    \ {\n                    c = Character.toUpperCase(c);\n                } else\
    \ {\n                    c = Character.toLowerCase(c);\n                }\n  \
    \          } else {\n                c = Character.toLowerCase(c);\n         \
    \   }\n            char[] newChars = {c};\n            result.add(new String(newChars));\n\
    \        }\n        return new String(result.toArray());\n}\n    public static\
    \ void main(String[] args) {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n\
    \    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"\
    AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"\
    #AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"\
    2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"\
    #ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpde1l3912.java:37: error: no suitable constructor found for String(Object[])\n\
    \        return new String(result.toArray());\n               ^\n    constructor\
    \ String.String(String) is not applicable\n      (argument mismatch; Object[]\
    \ cannot be converted to String)\n    constructor String.String(char[]) is not\
    \ applicable\n      (argument mismatch; Object[] cannot be converted to char[])\n\
    \    constructor String.String(byte[]) is not applicable\n      (argument mismatch;\
    \ Object[] cannot be converted to byte[])\n    constructor String.String(StringBuffer)\
    \ is not applicable\n      (argument mismatch; Object[] cannot be converted to\
    \ StringBuffer)\n    constructor String.String(StringBuilder) is not applicable\n\
    \      (argument mismatch; Object[] cannot be converted to StringBuilder)\nNote:\
    \ Some messages have been simplified; recompile with -Xdiags:verbose to get full\
    \ output\n1 error\n"
  stdout: ''
  timestamp: 1660011160
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        return\
    \ s.chars()\n                .mapToObj(i -> ((char)i).charValue())\n         \
    \       .map(s -> s.toUpperCase(Locale.ROOT))\n                .collect(Collectors.joining(\"\
    \"));\n}\n    public static void main(String[] args) {\n    assert(solve((\"AsDf\"\
    )).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n \
    \   assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2k3e41i7.java:20: error: char cannot be dereferenced\n        \
    \        .mapToObj(i -> ((char)i).charValue())\n                             \
    \           ^\n/tmp/tmp2k3e41i7.java:21: error: variable s is already defined\
    \ in method solve(String)\n                .map(s -> s.toUpperCase(Locale.ROOT))\n\
    \                     ^\n/tmp/tmp2k3e41i7.java:21: error: cannot find symbol\n\
    \                .map(s -> s.toUpperCase(Locale.ROOT))\n                     \
    \      ^\n  symbol:   method toUpperCase(Locale)\n  location: variable s of type\
    \ Object\n/tmp/tmp2k3e41i7.java:22: error: no suitable method found for collect(Collector<CharSequence,CAP#1,String>)\n\
    \                .collect(Collectors.joining(\"\"));\n                ^\n    method\
    \ Stream.<R#1>collect(Supplier<R#1>,BiConsumer<R#1,? super Object>,BiConsumer<R#1,R#1>)\
    \ is not applicable\n      (cannot infer type-variable(s) R#1\n        (actual\
    \ and formal argument lists differ in length))\n    method Stream.<R#2,A>collect(Collector<?\
    \ super Object,A,R#2>) is not applicable\n      (cannot infer type-variable(s)\
    \ R#2,A\n        (argument mismatch; Collector<CharSequence,CAP#2,String> cannot\
    \ be converted to Collector<? super Object,A,R#2>))\n  where R#1,T,R#2,A are type-variables:\n\
    \    R#1 extends Object declared in method <R#1>collect(Supplier<R#1>,BiConsumer<R#1,?\
    \ super T>,BiConsumer<R#1,R#1>)\n    T extends Object declared in interface Stream\n\
    \    R#2 extends Object declared in method <R#2,A>collect(Collector<? super T,A,R#2>)\n\
    \    A extends Object declared in method <R#2,A>collect(Collector<? super T,A,R#2>)\n\
    \  where CAP#1,CAP#2 are fresh type-variables:\n    CAP#1 extends Object from\
    \ capture of ?\n    CAP#2 extends Object from capture of ?\n4 errors\n"
  stdout: ''
  timestamp: 1660011160
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        HashSet<Character>\
    \ lettersSet = new HashSet<>();\n        char[] chars = s.toCharArray();\n   \
    \     for (int i = 0; i < chars.length; i++) {\n            char c = chars[i];\n\
    \            if (Character.isLetter(c)) {\n                lettersSet.add(c);\n\
    \            } else {\n                char newChar = Character.toUpperCase(c);\n\
    \                lettersSet.add(newChar);\n            }\n        }\n        char[]\
    \ res = new char[chars.length];\n        int i = 0;\n        for (Character c\
    \ : lettersSet) {\n            if (i < chars.length) res[i++] = c;\n        }\n\
    \        return new String(res);\n}\n    public static void main(String[] args)\
    \ {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\"\
    )).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"\
    #a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\"\
    )));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n    assert(solve((\"\
    #$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\")).equals((\"#CCC\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpor4jd8ck.java:38)\n"
  stdout: ''
  timestamp: 1660011160
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        String\
    \ result = \"\";\n        if (s == null || s.equals(\"\")) {\n            return\
    \ s;\n        }\n        for (int i = 0; i < s.length(); i++) {\n            char\
    \ c = s.charAt(i);\n            if (Character.isLetter(c)) {\n               \
    \ result += Character.toUpperCase(c);\n            } else {\n                result\
    \ += Character.toLowerCase(c);\n            }\n        }\n        return result;\n\
    }\n    public static void main(String[] args) {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppzms05lk.java:34)\n"
  stdout: ''
  timestamp: 1660011161
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        // Write\
    \ your code here\n        char[] ch = s.toCharArray();\n        for(int i=0;i<ch.length;i++)\n\
    \        {\n            if(ch[i]>=65 && ch[i]<=90)\n            {\n          \
    \      ch[i]=ch[i]+32;\n            }\n            else if(ch[i]>=97 && ch[i]<=122)\n\
    \            {\n                ch[i]=ch[i]-32;\n            }\n        }\n  \
    \      String r = new String(ch);\n        return r;\n}\n    public static void\
    \ main(String[] args) {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n \
    \   assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"\
    AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"\
    #AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"\
    2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"\
    #ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpq1lsp78d.java:25: error: incompatible types: possible lossy conversion\
    \ from int to char\n                ch[i]=ch[i]+32;\n                        \
    \   ^\n/tmp/tmpq1lsp78d.java:29: error: incompatible types: possible lossy conversion\
    \ from int to char\n                ch[i]=ch[i]-32;\n                        \
    \   ^\n2 errors\n"
  stdout: ''
  timestamp: 1660011160
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        String\
    \ result = \"\";\n        for (int i = 0; i < s.length(); i++) {\n           \
    \ char c = s.charAt(i);\n            int n = Character.getNumericValue(c);\n \
    \           if (Character.isLetter(c))\n                result += (n >= 'a' &&\
    \ n <= 'z') ? Character.toUpperCase(c) : Character.toLowerCase(c);\n         \
    \   else\n                result += c;\n        }\n        return result;\n}\n\
    \    public static void main(String[] args) {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpz4kbh2ey.java:31)\n"
  stdout: ''
  timestamp: 1660011161
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        // initialize\
    \ variables\n        String res = \"#\";\n        ArrayList<Character> charsList\
    \ = new ArrayList<>();\n\n        // add chars from string s to charsList list\n\
    \        for(char c : s.toCharArray()) {\n            charsList.add(c);\n    \
    \    }\n\n        // check if string s contains any letters\n        for(char\
    \ c : charsList) {\n            if(c == '#' || c == '@' || c == '$' || c == '%'\
    \ || c == '^' || c == '&' || c == '_' || c == '-' || c == '>' || c == '<' || c\
    \ == '/' || c == '\\\\' || c == '`' || c == '|' || c == '`') {\n             \
    \   // if any letter is found, return res with letter inversed and other letters\
    \ unchanged\n                return res + s.replace(c,Character.toString((char)\
    \ Integer.valueOf(c) - 32));\n            }\n            // else if string s has\
    \ no letters, return res with all letters unchanged\n            else {\n    \
    \            return res + c;\n            }\n        }\n\n        return res;\n\
    }\n    public static void main(String[] args) {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpq3g3dc5u.java:32: error: incompatible types: Integer cannot be\
    \ converted to char\n                return res + s.replace(c,Character.toString((char)\
    \ Integer.valueOf(c) - 32));\n                                               \
    \                                   ^\n1 error\n"
  stdout: ''
  timestamp: 1660011161
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        StringBuilder\
    \ sb = new StringBuilder(s);\n        if (s.isEmpty())\n            return s;\n\
    \        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n\
    \            if (Character.isLetter(c)) {\n                sb.setCharAt(i, Character.toUpperCase(c));\n\
    \                sb.setCharAt(i + 1, Character.toLowerCase(c));\n            }\
    \ else {\n                sb.setCharAt(i, c);\n            }\n        }\n    \
    \    return sb.toString();\n}\n    public static void main(String[] args) {\n\
    \    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\"\
    )).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"\
    #a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\"\
    )));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n    assert(solve((\"\
    #$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\")).equals((\"#CCC\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StringIndexOutOfBoundsException:\
    \ index 4, length 4\n\tat java.base/java.lang.String.checkIndex(String.java:4563)\n\
    \tat java.base/java.lang.AbstractStringBuilder.setCharAt(AbstractStringBuilder.java:533)\n\
    \tat java.base/java.lang.StringBuilder.setCharAt(StringBuilder.java:91)\n\tat\
    \ Problem.solve(tmpi0evqtzr.java:26)\n\tat Problem.main(tmpi0evqtzr.java:34)\n"
  stdout: ''
  timestamp: 1660011161
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        s = s.replaceAll(\"\
    [^a-zA-Z]\", \"\");\n        s = s.toLowerCase();\n        String reverse = \"\
    \";\n        for (int i = 0; i < s.length(); i++) {\n            if (Character.isLetter(s.charAt(i)))\
    \ {\n                reverse += Character.toUpperCase(s.charAt(i));\n        \
    \    }\n            else {\n                reverse += s.charAt(i);\n        \
    \    }\n        }\n        return reverse;\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_wgwm7mz.java:33)\n"
  stdout: ''
  timestamp: 1660011161
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        return\
    \ s.replaceAll(\"[a-z]\", \"$0:$0$0\");\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpx5ay0q8i.java:22)\n"
  stdout: ''
  timestamp: 1660011161
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        char[]\
    \ chars = s.toCharArray();\n        int length = chars.length;\n        for (int\
    \ i = 0; i < length; i++) {\n            char c = chars[i];\n            if (Character.isLetter(c))\
    \ {\n                chars[i] = Character.toUpperCase(c);\n            } else\
    \ {\n                chars[i] = Character.toLowerCase(c);\n            }\n   \
    \     }\n        return new String(chars);\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmps2uwjllx.java:32)\n"
  stdout: ''
  timestamp: 1660011161
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        if(s.isEmpty()){\n\
    \            return s;\n        }\n        StringBuilder stringBuilder = new StringBuilder(s);\n\
    \        for(int i=0;i<s.length();i++){\n            char currentChar = s.charAt(i);\n\
    \            if(Character.isLetter(currentChar)){\n                if(i == 0){\n\
    \                    stringBuilder.setCharAt(i,Character.toUpperCase(currentChar));\n\
    \                }else if(i == s.length()-1){\n                    stringBuilder.setCharAt(i,Character.toLowerCase(currentChar));\n\
    \                }else{\n                    stringBuilder.setCharAt(i,Character.toLowerCase(currentChar));\n\
    \                    stringBuilder.setCharAt(i-1,Character.toUpperCase(s.charAt(i-1)));\n\
    \                }\n            }else{\n                if(i == 0){\n        \
    \            stringBuilder.setCharAt(i,Character.toLowerCase(currentChar));\n\
    \                }else if(i == s.length()-1){\n                    stringBuilder.setCharAt(i,Character.toUpperCase(currentChar));\n\
    \                }else{\n                    stringBuilder.setCharAt(i,Character.toLowerCase(currentChar));\n\
    \                    stringBuilder.setCharAt(i-1,Character.toUpperCase(s.charAt(i-1)));\n\
    \                }\n            }\n        }\n        return stringBuilder.toString();\n\
    }\n    public static void main(String[] args) {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpa6yoaebp.java:48)\n"
  stdout: ''
  timestamp: 1660011161
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        if (s.equals(\"\
    #\"))\n            return \"#\";\n        char[] chars = s.toCharArray();\n  \
    \      Arrays.sort(chars);\n        StringBuilder builder = new StringBuilder();\n\
    \        for (char c : chars)\n            if (Character.isLetter(c))\n      \
    \          builder.append(Character.toUpperCase(c));\n            else\n     \
    \           builder.append(c);\n        return builder.toString();\n}\n    public\
    \ static void main(String[] args) {\n    assert(solve((\"AsDf\")).equals((\"aSdF\"\
    )));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpt9g7fqpx.java:32)\n"
  stdout: ''
  timestamp: 1660011161
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        Set<Character>\
    \ sChars = s.chars().mapToObj(c -> (char) c).collect(Collectors.toSet());\n  \
    \      if(sChars.isEmpty())\n        {\n            return s;\n        }\n   \
    \     StringBuilder b = new StringBuilder(s);\n        for(char c : sChars)\n\
    \        {\n            char temp = b.charAt(b.length()-1);\n            b.setCharAt(b.length()-1,\
    \ (char)((((int)c) ^ (int)temp)));\n        }\n        return b.toString();\n\
    }\n    public static void main(String[] args) {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpb7oxgq31.java:33)\n"
  stdout: ''
  timestamp: 1660011161
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        for(int\
    \ i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n         \
    \   if(Character.isLetter(c)) {\n                String swap = s.substring(0,i)\
    \ + String.valueOf((char)(((int)c) - 32) + s.substring(i+1));\n              \
    \  swap = swap.toLowerCase();\n                swap = swap.toUpperCase();\n  \
    \              s = s.replaceAll(c,swap);\n            }\n        }\n        return\
    \ s.toLowerCase();\n}\n    public static void main(String[] args) {\n    assert(solve((\"\
    AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n\
    \    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8o5wt59r.java:25: error: incompatible types: char cannot be converted\
    \ to String\n                s = s.replaceAll(c,swap);\n                     \
    \            ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660011161
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        String\
    \ result = \"\";\n        char[] chars = s.toCharArray();\n        for(char c\
    \ : chars){\n            if(c=='A' || c=='a'){\n                result +=Character.toUpperCase(c);\n\
    \            }else{\n                result += Character.toLowerCase(c);\n   \
    \         }\n        }\n        return result.toString();\n}\n    public static\
    \ void main(String[] args) {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n\
    \    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"\
    AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"\
    #AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"\
    2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"\
    #ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpebxh6say.java:31)\n"
  stdout: ''
  timestamp: 1660011161
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        Map<Character,\
    \ Integer> charCount = new HashMap<>();\n        for(int i = 0; i < s.length();\
    \ i++) {\n            char ch = s.charAt(i);\n            if(charCount.containsKey(ch))\
    \ {\n                charCount.put(ch, charCount.get(ch) + 1);\n            }\
    \ else {\n                charCount.put(ch, 1);\n            }\n        }\n  \
    \      List<Character> chars = new ArrayList<>(charCount.keySet());\n        Collections.sort(chars);\n\
    \        StringBuilder result = new StringBuilder();\n        for(char ch : chars)\
    \ {\n            int count = charCount.get(ch);\n            if(count == 0) {\n\
    \                result.append(\"*\");\n            } else {\n               \
    \ result.append(\"(\").append(count).append(\")\");\n            }\n        }\n\
    \        return result.toString();\n}\n    public static void main(String[] args)\
    \ {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\"\
    )).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"\
    #a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\"\
    )));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n    assert(solve((\"\
    #$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\")).equals((\"#CCC\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpubfaz259.java:42)\n"
  stdout: ''
  timestamp: 1660011161
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        char[]\
    \ chars = s.toCharArray();\n        Arrays.sort(chars);\n        StringBuilder\
    \ sb = new StringBuilder();\n        for (char c : chars) {\n            Character\
    \ cUpper = Character.toUpperCase(c);\n            if (Character.isLetter(c)) {\n\
    \                sb.append(Character.toLowerCase(c));\n            } else {\n\
    \                sb.append(cUpper);\n            }\n        }\n        return\
    \ sb.toString();\n}\n    public static void main(String[] args) {\n    assert(solve((\"\
    AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n\
    \    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphbuimjxw.java:33)\n"
  stdout: ''
  timestamp: 1660011161
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        Stack<Character>\
    \ stack = new Stack<>();\n        for (char c : s.toCharArray()) {\n         \
    \   if (Character.isLetter(c)) {\n                if (stack.peek() == 'Z') {\n\
    \                    stack.push((char) (c - 'A'));\n                } else {\n\
    \                    stack.push((char) (c + 1));\n                }\n        \
    \    } else {\n                stack.push(c);\n            }\n        }\n    \
    \    return stack.pop().toString();\n}\n    public static void main(String[] args)\
    \ {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\"\
    )).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"\
    #a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\"\
    )));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n    assert(solve((\"\
    #$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\")).equals((\"#CCC\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.util.EmptyStackException\n\tat java.base/java.util.Stack.peek(Stack.java:101)\n\
    \tat Problem.solve(tmpkxu9k5ur.java:22)\n\tat Problem.main(tmpkxu9k5ur.java:34)\n"
  stdout: ''
  timestamp: 1660011161
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        String\
    \ result = \"\";\n        char[] arr = s.toCharArray();\n        for(char c :\
    \ arr){\n            if(Character.isLetter(c)){\n                String str =\
    \ String.valueOf((char)(c).toLowerCase());\n                result += str + String.valueOf((char)(c).toUpperCase());\n\
    \            }\n        }\n        \n        if(result.isEmpty()){\n         \
    \   result = s.toUpperCase();\n        }\n        return result;\n}\n    public\
    \ static void main(String[] args) {\n    assert(solve((\"AsDf\")).equals((\"aSdF\"\
    )));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmrhtlvqe.java:23: error: char cannot be dereferenced\n        \
    \        String str = String.valueOf((char)(c).toLowerCase());\n             \
    \                                        ^\n/tmp/tmpmrhtlvqe.java:24: error: char\
    \ cannot be dereferenced\n                result += str + String.valueOf((char)(c).toUpperCase());\n\
    \                                                        ^\n2 errors\n"
  stdout: ''
  timestamp: 1660011161
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        if(s ==\
    \ null || s.length() == 0) {\n            return \"\";\n        }\n        StringBuilder\
    \ result = new StringBuilder(s.length());\n        for(int i = 0; i < s.length();\
    \ i++) {\n            if(Character.isLetter(s.charAt(i))) {\n                Character.toUpperCase(s.charAt(i));\n\
    \                Character.toLowerCase(s.charAt(i));\n            }\n        \
    \    else {\n                s = s.substring(i);\n                break;\n   \
    \         }\n        }\n        result.append(s);\n        return result.toString();\n\
    }\n    public static void main(String[] args) {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpaq3tqgry.java:37)\n"
  stdout: ''
  timestamp: 1660011161
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        StringBuilder\
    \ result = new StringBuilder();\n        for(int i = 0; i < s.length(); i++) {\n\
    \            char c = s.charAt(i);\n            if(Character.isLetter(c)) {\n\
    \                result.append(Character.toUpperCase(c));\n            } else\
    \ {\n                result.append(c);\n            }\n        }\n        return\
    \ s.equals(\"\") ? result.toString() : result.toString().toLowerCase().replaceAll(\"\
    \ \", \"\");\n}\n    public static void main(String[] args) {\n    assert(solve((\"\
    AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n\
    \    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgz_k3vg9.java:31)\n"
  stdout: ''
  timestamp: 1660011162
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        // Write\
    \ your code here\n        //Solution 1 \n        Set<Character> letters = new\
    \ HashSet<>();\n        for (int i = 0; i < s.length(); i++) {\n            char\
    \ letter = s.charAt(i);\n            if (Character.isLetter(letter)) {\n     \
    \           letters.add(letter);\n            } else {\n                letters.remove(letter);\n\
    \            }\n        }\n        StringBuilder resulted = new StringBuilder(s.length());\n\
    \        if (letters.isEmpty()) {\n            resulted.append(s);\n        }\
    \ else {\n            resulted.append(s.toLowerCase());\n            for (Character\
    \ letter : letters) {\n                resulted.append(Character.toUpperCase(letter));\n\
    \            }\n            resulted.append(s.toUpperCase());\n        }\n   \
    \     return resulted.toString();\n        //Solution 2\n        //if (letters.isEmpty())\
    \ {\n        //    return s;\n        //} else {\n        //    StringBuilder\
    \ resulted = new StringBuilder(s.length());\n        //    for (Character letter\
    \ : letters) {\n        //        resulted.append(Character.toUpperCase(letter));\n\
    \        //    }\n        //    resulted.append(s.toUpperCase());\n        //\
    \    resulted.append(s.toLowerCase());\n        //    return resulted.toString();\n\
    \        //}\n}\n    public static void main(String[] args) {\n    assert(solve((\"\
    AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n\
    \    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvaevtu7x.java:55)\n"
  stdout: ''
  timestamp: 1660011162
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        List<Character>\
    \ charList = Arrays.asList(s.toCharArray());\n        StringBuilder result = new\
    \ StringBuilder();\n        for (Character c : charList) {\n            if (Character.isLetter(c))\
    \ {\n                switch (c) {\n                    case '.':\n           \
    \             result.append(c.toUpperCase());\n                        break;\n\
    \                    case '@':\n                        result.append(c.toLowerCase());\n\
    \                        break;\n                    case '#':\n             \
    \           result.append((char) (97 + Integer.parseInt(s.substring(1, s.length()\
    \ - 1))));\n                        break;\n                    case '$':\n  \
    \                      result.append((char) (91 + Integer.parseInt(s.substring(1,\
    \ s.length() - 1))));\n                        break;\n                    case\
    \ '%':\n                        result.append((char) (93 + Integer.parseInt(s.substring(1,\
    \ s.length() - 1))));\n                        break;\n                    case\
    \ '^':\n                        result.append((char) (127 + Integer.parseInt(s.substring(1,\
    \ s.length() - 1))));\n                        break;\n                }\n   \
    \         } else {\n                result.append(c);\n            }\n       \
    \ }\n        return result.toString();\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpeu01r37s.java:19: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        List<Character> charList = Arrays.asList(s.toCharArray());\n\
    \                                                ^\n    equality constraints:\
    \ Character\n    lower bounds: char[]\n  where T is a type-variable:\n    T extends\
    \ Object declared in method <T>asList(T...)\n/tmp/tmpeu01r37s.java:25: error:\
    \ no suitable method found for toUpperCase(no arguments)\n                   \
    \     result.append(c.toUpperCase());\n                                      \
    \ ^\n    method Character.toUpperCase(char) is not applicable\n      (actual and\
    \ formal argument lists differ in length)\n    method Character.toUpperCase(int)\
    \ is not applicable\n      (actual and formal argument lists differ in length)\n\
    /tmp/tmpeu01r37s.java:28: error: no suitable method found for toLowerCase(no arguments)\n\
    \                        result.append(c.toLowerCase());\n                   \
    \                    ^\n    method Character.toLowerCase(char) is not applicable\n\
    \      (actual and formal argument lists differ in length)\n    method Character.toLowerCase(int)\
    \ is not applicable\n      (actual and formal argument lists differ in length)\n\
    3 errors\n"
  stdout: ''
  timestamp: 1660011162
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        if (s.isEmpty())\
    \ {\n            return s;\n        }\n        StringBuilder sb = new StringBuilder(s);\n\
    \        Iterator<Character> it = sb.iterator();\n        if (it.hasNext()) {\n\
    \            char c = it.next();\n            it.remove();\n            while\
    \ (it.hasNext()) {\n                char tmp = it.next();\n                if\
    \ (Character.isLetter(tmp)) {\n                    int tmpUp = Character.getUpperCase(tmp);\n\
    \                    int tmpLow = Character.getLowerCase(tmp);\n             \
    \       int tmp1 = tmpUp;\n                    int tmp2 = tmpLow;\n          \
    \          if (tmp1 == tmpUp) {\n                        tmp1 = tmpUp;\n     \
    \                   tmp2 = tmpLow;\n                    }\n                  \
    \  sb.setCharAt(tmp1, c);\n                    sb.setCharAt(tmp2, tmp);\n    \
    \                c = tmp;\n                    it.remove();\n                }\n\
    \            }\n        }\n        return sb.toString();\n}\n    public static\
    \ void main(String[] args) {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n\
    \    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"\
    AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"\
    #AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"\
    2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"\
    #ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkwsg65wy.java:23: error: cannot find symbol\n        Iterator<Character>\
    \ it = sb.iterator();\n                                   ^\n  symbol:   method\
    \ iterator()\n  location: variable sb of type StringBuilder\n/tmp/tmpkwsg65wy.java:30:\
    \ error: cannot find symbol\n                    int tmpUp = Character.getUpperCase(tmp);\n\
    \                                         ^\n  symbol:   method getUpperCase(char)\n\
    \  location: class Character\n/tmp/tmpkwsg65wy.java:31: error: cannot find symbol\n\
    \                    int tmpLow = Character.getLowerCase(tmp);\n             \
    \                             ^\n  symbol:   method getLowerCase(char)\n  location:\
    \ class Character\n3 errors\n"
  stdout: ''
  timestamp: 1660011162
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        StringBuilder\
    \ res = new StringBuilder();\n        StringBuilder sb = new StringBuilder();\n\
    \        char[] arr = s.toCharArray();\n        for (int i = 0; i < arr.length;\
    \ i++) {\n            char ch = arr[i];\n            if (Character.isLetter(ch))\
    \ {\n                sb = new StringBuilder(arr);\n                sb[i] = Character.toLowerCase(ch);\n\
    \                res.append(sb.toString());\n            } else {\n          \
    \      res.append(ch);\n            }\n        }\n        if (res.length() > 0)\n\
    \            res.append(arr);\n        return res.toString();\n}\n    public static\
    \ void main(String[] args) {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n\
    \    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"\
    AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"\
    #AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"\
    2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"\
    #ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpiutbw7tb.java:25: error: no suitable constructor found for StringBuilder(char[])\n\
    \                sb = new StringBuilder(arr);\n                     ^\n    constructor\
    \ StringBuilder.StringBuilder(int) is not applicable\n      (argument mismatch;\
    \ char[] cannot be converted to int)\n    constructor StringBuilder.StringBuilder(String)\
    \ is not applicable\n      (argument mismatch; char[] cannot be converted to String)\n\
    \    constructor StringBuilder.StringBuilder(CharSequence) is not applicable\n\
    \      (argument mismatch; char[] cannot be converted to CharSequence)\n/tmp/tmpiutbw7tb.java:26:\
    \ error: array required, but StringBuilder found\n                sb[i] = Character.toLowerCase(ch);\n\
    \                  ^\nNote: Some messages have been simplified; recompile with\
    \ -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1660011162
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        Map<Character,\
    \ Character> map = new HashMap<>();\n        for (int i = 0; i < s.length(); i++)\
    \ {\n            char c = s.charAt(i);\n            map.put(c, new Character(c));\n\
    \        }\n        String result = \"\";\n        for (Map.Entry<Character, Character>\
    \ entry : map.entrySet()) {\n            if (entry.getValue().equals(entry.getKey()))\
    \ continue;\n            result += entry.getValue().toString().toLowerCase()+entry.getKey().toString().toUpperCase();\n\
    \        }\n        return result;\n}\n    public static void main(String[] args)\
    \ {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\"\
    )).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"\
    #a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\"\
    )));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n    assert(solve((\"\
    #$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\")).equals((\"#CCC\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsjr3gm92.java:32)\n"
  stdout: ''
  timestamp: 1660011162
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        StringBuilder\
    \ result = new StringBuilder(s.length());\n        for(int i = 0; i < s.length();\
    \ i++) {\n            char c = s.charAt(i);\n            if(c == '-') result.append(\"\
    -\");\n            else if (Character.isLetter(c)) {\n                result.append(Character.toUpperCase(c));\n\
    \            } else {\n                result.append(c);\n            }\n    \
    \    }\n        return result.toString();\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqehjfdn1.java:32)\n"
  stdout: ''
  timestamp: 1660011162
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        List<Character>\
    \ charList = Arrays.stream(s.split(\"\")).map(c -> Character.toUpperCase(c.charAt(0))).collect(Collectors.toList());\n\
    \        List<String> res = new ArrayList<>();\n        for(int i = 0; i < charList.size();\
    \ i++) {\n            if(charList.get(i).equals(\"\")) {\n                res.add(\"\
    \");\n            } else {\n                res.add(charList.get(i).toString()\
    \ + charList.get(i).substring(1).toLowerCase());\n            }\n        }\n \
    \       return res.stream().map(s -> s.equals(\"\") ? \"\" : s.substring(0, 1)).collect(Collectors.joining());\n\
    }\n    public static void main(String[] args) {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpum96e0zd.java:25: error: cannot find symbol\n                res.add(charList.get(i).toString()\
    \ + charList.get(i).substring(1).toLowerCase());\n                           \
    \                                         ^\n  symbol:   method substring(int)\n\
    \  location: class Character\n/tmp/tmpum96e0zd.java:28: error: variable s is already\
    \ defined in method solve(String)\n        return res.stream().map(s -> s.equals(\"\
    \") ? \"\" : s.substring(0, 1)).collect(Collectors.joining());\n             \
    \                   ^\n2 errors\n"
  stdout: ''
  timestamp: 1660011162
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        return\
    \ s.chars()\n                 .map(i -> i % 2 == 0 ? (char) Character.toUpperCase((char)\
    \ i) : Character.toLowerCase((char) i))\n                 .collect(Collectors.joining());\n\
    }\n    public static void main(String[] args) {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmple6gq8wq.java:21: error: method collect in interface IntStream\
    \ cannot be applied to given types;\n                 .collect(Collectors.joining());\n\
    \                 ^\n  required: Supplier<R>,ObjIntConsumer<R>,BiConsumer<R,R>\n\
    \  found:    Collector<CharSequence,CAP#1,String>\n  reason: cannot infer type-variable(s)\
    \ R\n    (actual and formal argument lists differ in length)\n  where R is a type-variable:\n\
    \    R extends Object declared in method <R>collect(Supplier<R>,ObjIntConsumer<R>,BiConsumer<R,R>)\n\
    \  where CAP#1 is a fresh type-variable:\n    CAP#1 extends Object from capture\
    \ of ?\n/tmp/tmple6gq8wq.java:21: error: incompatible types: cannot infer type-variable(s)\
    \ R\n                 .collect(Collectors.joining());\n                      \
    \   ^\n    (argument mismatch; Collector<CharSequence,CAP#1,String> cannot be\
    \ converted to Supplier<R>)\n  where R is a type-variable:\n    R extends Object\
    \ declared in method <R>collect(Supplier<R>,ObjIntConsumer<R>,BiConsumer<R,R>)\n\
    \  where CAP#1 is a fresh type-variable:\n    CAP#1 extends Object from capture\
    \ of ?\n2 errors\n"
  stdout: ''
  timestamp: 1660011162
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        s = s.replaceAll(\"\
    [^A-Za-z]\", \"\");\n        StringBuilder sb = new StringBuilder();\n       \
    \ for(int i = 0; i < s.length(); i++) {\n            if(s.charAt(i) >= 'A' &&\
    \ s.charAt(i) <= 'Z') {\n                sb.append(s.charAt(i) - 'A' + 'a');\n\
    \            } else {\n                sb.append(s.charAt(i));\n            }\n\
    \        }\n        return sb.toString();\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5kfubkoy.java:31)\n"
  stdout: ''
  timestamp: 1660011162
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        if(s.length()\
    \ == 0){\n            return s;\n        }\n        \n        if(Character.isLetter(s.charAt(0))){\n\
    \            return new StringBuilder(s).reverse().toString();\n        }else{\n\
    \            return s;\n        }\n        \n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpa0x6sasf.java:31)\n"
  stdout: ''
  timestamp: 1660011162
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        if (s.length()\
    \ == 0) {\n            return s;\n        }\n        char[] arr = s.toCharArray();\n\
    \        Arrays.sort(arr);\n        if (Character.isLetter(arr[0])) {\n      \
    \      return new StringBuilder()\n                .append(Character.toUpperCase(arr[0]))\n\
    \                .append(reverse(arr, 1))\n                .toString();\n    \
    \    } else {\n            return new StringBuilder()\n                .append(arr[0])\n\
    \                .append(reverse(arr, 1))\n                .toString();\n    \
    \    }\n}\n    public static void main(String[] args) {\n    assert(solve((\"\
    AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n\
    \    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmph5jeqb53.java:27: error: cannot find symbol\n                .append(reverse(arr,\
    \ 1))\n                        ^\n  symbol:   method reverse(char[],int)\n  location:\
    \ class Problem\n/tmp/tmph5jeqb53.java:32: error: cannot find symbol\n       \
    \         .append(reverse(arr, 1))\n                        ^\n  symbol:   method\
    \ reverse(char[],int)\n  location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660011162
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        String\
    \ result = \"\";\n        char[] charArray = s.toCharArray();\n        for(int\
    \ i = 0; i < charArray.length; i++) {\n            char letter = charArray[i];\n\
    \            if (Character.isLetter(letter)) {\n                char upperCaseLetter\
    \ = Character.toUpperCase(letter);\n                char lowerCaseLetter = Character.toLowerCase(letter);\n\
    \                if (Character.isLetter(upperCaseLetter)) {\n                \
    \    result = upperCaseLetter + result;\n                } else {\n          \
    \          result = lowerCaseLetter + result;\n                }\n           \
    \ } else {\n                result = letter + result;\n            }\n       \
    \ }\n        return result;\n}\n    public static void main(String[] args) {\n\
    \    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\"\
    )).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"\
    #a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\"\
    )));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n    assert(solve((\"\
    #$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\")).equals((\"#CCC\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyauo14_1.java:38)\n"
  stdout: ''
  timestamp: 1660011162
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        if (s.contains(\"\
    @\") && s.contains(\"@\")) {\n            String newString = \"\";\n         \
    \   String temp1 = s.replace(\"@\", \"\");\n            String temp2 = temp1.replace(\"\
    @\", \"\");\n            String temp3 = temp2.replace(\"@\", \"\");\n        \
    \    String temp4 = temp3.replace(\"@\", \"\");\n            String temp5 = temp4.replace(\"\
    @\", \"\");\n            String temp6 = temp5.replace(\"@\", \"\");\n        \
    \    String temp7 = temp6.replace(\"@\", \"\");\n            String temp8 = temp7.replace(\"\
    @\", \"\");\n            String temp9 = temp8.replace(\"@\", \"\");\n        \
    \    String temp10 = temp9.replace(\"@\", \"\");\n            String temp11 =\
    \ temp10.replace(\"@\", \"\");\n            String temp12 = temp11.replace(\"\
    @\", \"\");\n            String temp13 = temp12.replace(\"@\", \"\");\n      \
    \      String temp14 = temp13.replace(\"@\", \"\");\n            String temp15\
    \ = temp14.replace(\"@\", \"\");\n            String temp16 = temp15.replace(\"\
    @\", \"\");\n            String temp17 = temp16.replace(\"@\", \"\");\n      \
    \      String temp18 = temp17.replace(\"@\", \"\");\n            String temp19\
    \ = temp18.replace(\"@\", \"\");\n            String temp20 = temp19.replace(\"\
    @\", \"\");\n            String temp21 = temp20.replace(\"@\", \"\");\n      \
    \      String temp22 = temp21.replace(\"@\", \"\");\n            String temp23\
    \ = temp22.replace(\"@\", \"\");\n            String temp24 = temp23.replace(\"\
    @\", \"\");\n            String temp25 = temp24.replace(\"@\", \"\");\n      \
    \      String temp26 = temp25.replace(\"@\", \"\");\n            String temp27\
    \ = temp26.replace(\"@\", \"\");\n            String temp28 = temp27.replace(\"\
    @\", \"\");\n            String temp29 = temp28.replace(\"@\", \"\");\n      \
    \      String temp30 = temp29.replace(\"@\", \"\");\n            String temp31\
    \ = temp30.replace(\"@\", \"\");\n            String temp32 = temp31.replace(\"\
    @\", \"\");\n            String temp33 = temp32.replace(\"@\", \"\");\n      \
    \      String temp34 = temp33.replace(\"@\", \"\");\n            String temp35\
    \ = temp34.replace(\"@\", \"\");\n            String temp36 = temp35.replace(\"\
    @\", \"\");\n            String temp37 = temp36.replace(\"@\", \"\");\n      \
    \      String temp38 = temp37.replace(\"@\", \"\");\n            String temp39\
    \ = temp38.replace(\"@\", \"\");\n            String temp40 = temp39.replace(\"\
    @\", \"\");\n            String temp41 = temp40.replace(\"@\", \"\");\n      \
    \      String temp42 = temp41.replace(\"@\", \"\");\n            \n}\n    public\
    \ static void main(String[] args) {\n    assert(solve((\"AsDf\")).equals((\"aSdF\"\
    )));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkbv84t0s.java:65: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n1 error\n"
  stdout: ''
  timestamp: 1660011162
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        List<String>\
    \ result = new ArrayList<>();\n        int len = s.length();\n        for(int\
    \ i = 0 ; i < len ; ++i){\n            if(Character.isLetter(s.charAt(i))){\n\
    \                result.add(Character.toUpperCase(s.charAt(i)));\n           \
    \ }\n            else{\n                result.add(s.charAt(i));\n           \
    \ }\n        }\n        \n        StringBuilder sb = new StringBuilder();\n  \
    \      for(int i = 0 ; i < len ; ++i){\n            String curr = result.get(i);\n\
    \            if(result.isEmpty()){\n                result.add(curr);\n      \
    \      }\n            else{\n                if(i == 0){\n                   \
    \ sb.append(curr);\n                }\n                else{\n               \
    \     int len2 = curr.length();\n                    int index1 = result.indexOf(curr);\n\
    \                    if(index1 < 0){\n                        result.add(curr);\n\
    \                    }\n                    else{\n                        if(index1\
    \ < len2){\n                            sb.append(curr);\n                   \
    \         result.add(index1, len2);\n                        }\n             \
    \           else{\n                            result.add(index1);\n         \
    \                   sb.append(curr);\n                        }\n            \
    \        }\n                }\n            }\n        }\n        return sb.toString();\n\
    }\n    public static void main(String[] args) {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7vg4mr0y.java:23: error: incompatible types: char cannot be converted\
    \ to String\n                result.add(Character.toUpperCase(s.charAt(i)));\n\
    \                                                ^\n/tmp/tmp7vg4mr0y.java:26:\
    \ error: incompatible types: char cannot be converted to String\n            \
    \    result.add(s.charAt(i));\n                                   ^\n/tmp/tmp7vg4mr0y.java:49:\
    \ error: incompatible types: int cannot be converted to String\n             \
    \               result.add(index1, len2);\n                                  \
    \             ^\n/tmp/tmp7vg4mr0y.java:52: error: incompatible types: int cannot\
    \ be converted to String\n                            result.add(index1);\n  \
    \                                     ^\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n4 errors\n"
  stdout: ''
  timestamp: 1660011162
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        \n   \
    \     //Your code goes here\n        String[] arr = s.split(\"\");\n        \n\
    \        \n        \n        return \"\";\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfa4splhy.java:28)\n"
  stdout: ''
  timestamp: 1660011162
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        //Solution\
    \ Code Here\n        boolean isDigit = false;\n        boolean isLower = false;\n\
    \        for (int i=0; i<s.length(); i++) {\n            isDigit = isDigit ||\
    \ (s.charAt(i)>='0' && s.charAt(i)<='9');\n            isLower = isLower || (s.charAt(i)>='A'\
    \ && s.charAt(i)<='Z');\n        }\n        if(isDigit && isLower) {\n       \
    \     String s1=s.substring(0,1).toUpperCase()+s.substring(1).toLowerCase();\n\
    \            String s2=s.substring(0,1).toLowerCase()+s.substring(1).toUpperCase();\n\
    \            return s1.equals(s2) ? s1 : \"Not Available\";\n        }\n     \
    \   else return s;\n}\n    public static void main(String[] args) {\n    assert(solve((\"\
    AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n\
    \    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4fezw6jj.java:34)\n"
  stdout: ''
  timestamp: 1660011162
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        StringBuilder\
    \ string = new StringBuilder();\n        for(char c : s.toCharArray()){\n    \
    \        if(Character.isLetter(c)){\n                string.append(Character.toUpperCase(c));\n\
    \            }else {\n                string.append(c);\n            }\n     \
    \   }\n        return string.reverse().toString();\n}\n    public static void\
    \ main(String[] args) {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n \
    \   assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"\
    AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"\
    #AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"\
    2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"\
    #ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzxx2ly4c.java:30)\n"
  stdout: ''
  timestamp: 1660011163
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        String\
    \ result = \"\";\n        for(int i = 0; i <s.length(); i++) {\n            int\
    \ lower = s.toLowerCase().codePointAt(i);\n            int upper = s.toUpperCase().codePointAt(i);\n\
    \            if(Character.isLetter(lower) || Character.isLetter(upper)) {\n  \
    \              result += (Character.isLetter(lower) ? lower : upper) + \"\";\n\
    \            } else {\n                result += s.charAt(i);\n            }\n\
    \        }\n        return result.replaceAll(\"^..\", \"\");\n}\n    public static\
    \ void main(String[] args) {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n\
    \    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"\
    AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"\
    #AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"\
    2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"\
    #ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8v4hi8gy.java:32)\n"
  stdout: ''
  timestamp: 1660011163
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        char []\
    \ c = s.toCharArray();\n        for (int i = 0; i < s.length(); i++) {\n     \
    \       if (Character.isLetter(c[i])) {\n                boolean upper = true;\n\
    \                if (Character.isUpperCase(c[i]))\n                    upper =\
    \ false;\n                char [] uc = Character.toUpperCase(c[i]);\n        \
    \        c = Arrays.copyOf(uc, uc.length);\n                if (upper)\n     \
    \               Arrays.parallelSetAll(c + 1, (index, value) -> value == c[index]\
    \ ? value : Character.toLowerCase(value));\n                else\n           \
    \         Arrays.parallelSetAll(c + 1, (index, value) -> value == c[index] ? value\
    \ : Character.toUpperCase(value));\n            }\n        }\n        return new\
    \ String(c);\n}\n    public static void main(String[] args) {\n    assert(solve((\"\
    AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n\
    \    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqaehnj24.java:25: error: incompatible types: char cannot be converted\
    \ to char[]\n                char [] uc = Character.toUpperCase(c[i]);\n     \
    \                                             ^\n/tmp/tmpqaehnj24.java:28: error:\
    \ bad operand types for binary operator '+'\n                    Arrays.parallelSetAll(c\
    \ + 1, (index, value) -> value == c[index] ? value : Character.toLowerCase(value));\n\
    \                                            ^\n  first type:  char[]\n  second\
    \ type: int\n/tmp/tmpqaehnj24.java:30: error: bad operand types for binary operator\
    \ '+'\n                    Arrays.parallelSetAll(c + 1, (index, value) -> value\
    \ == c[index] ? value : Character.toUpperCase(value));\n                     \
    \                       ^\n  first type:  char[]\n  second type: int\n3 errors\n"
  stdout: ''
  timestamp: 1660011162
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        char chars[]\
    \ = s.toCharArray();\n        char resultChars[] = new char[s.length()];\n   \
    \     char[] lowerChars = chars.clone();\n        Arrays.sort(lowerChars);\n \
    \       for (int i = 0; i < lowerChars.length; i++) {\n            if (chars[i]\
    \ == 'a') {\n                chars[i] = 'A';\n            } else if (chars[i]\
    \ == 'b') {\n                chars[i] = 'B';\n            } else if (chars[i]\
    \ == 'c') {\n                chars[i] = 'C';\n            } else if (chars[i]\
    \ == 'd') {\n                chars[i] = 'D';\n            } else if (chars[i]\
    \ == 'e') {\n                chars[i] = 'E';\n            } else if (chars[i]\
    \ == 'f') {\n                chars[i] = 'F';\n            } else if (chars[i]\
    \ == 'g') {\n                chars[i] = 'G';\n            } else if (chars[i]\
    \ == 'h') {\n                chars[i] = 'H';\n            } else if (chars[i]\
    \ == 'i') {\n                chars[i] = 'I';\n            } else if (chars[i]\
    \ == 'j') {\n                chars[i] = 'J';\n            } else if (chars[i]\
    \ == 'k') {\n                chars[i] = 'K';\n            } else if (chars[i]\
    \ == 'l') {\n                chars[i] = 'L';\n            } else if (chars[i]\
    \ == 'm') {\n                chars[i] = 'M';\n            } else if (chars[i]\
    \ == 'n') {\n                chars[i] = 'N';\n            } else if (chars[i]\
    \ == 'o') {\n                chars[i] = 'O';\n            } else if (chars[i]\
    \ == 'p') {\n                chars[i] = 'P';\n            } else if (chars[i]\
    \ == 'q') {\n                chars[i] = 'Q';\n            } else if (chars[i]\
    \ == 'r') {\n                chars[i] = 'R';\n            } else if (chars[i]\
    \ == 's') {\n                chars[i] = 'S';\n            } else if (chars[i]\
    \ == 't') {\n                chars[i] = 'T';\n            } else if (chars[i]\
    \ == 'u') {\n                chars[i] = 'U';\n            } else if (chars[i]\
    \ == 'v') {\n                chars[i] = 'V';\n            } else if (chars[i]\
    \ == 'w') {\n                chars[i] = 'W';\n            } else if (chars[i]\
    \ == 'x') {\n                chars[i] = 'X';\n            } else if (chars[i]\
    \ == 'y') {\n                chars[i] = 'Y';\n            } else if (chars[i]\
    \ == 'z') {\n                chars[i] = 'Z';\n            }\n        }\n     \
    \   char resultCharsReversed[] = Arrays.copyOfRange(lowerChars, 0, lowerChars.length);\n\
    \        Arrays.sort(resultCharsReversed);\n        for (int i = 0; i < resultCharsReversed.length;\
    \ i++) {\n            if (resultCharsReversed[i] == 'A') {\n                resultCharsReversed[i]\
    \ = 'a';\n            } else if (resultCharsReversed[i] == 'B') {\n          \
    \      resultCharsReversed[i] = 'b';\n            } else if (resultCharsReversed[i]\
    \ == 'C') {\n                resultChar\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpe9_7f9ia.java:86: error: not a statement\n                resultChar\n\
    \                ^\n/tmp/tmpe9_7f9ia.java:86: error: ';' expected\n          \
    \      resultChar\n                          ^\n/tmp/tmpe9_7f9ia.java:88: error:\
    \ illegal start of expression\n    public static void main(String[] args) {\n\
    \    ^\n3 errors\n"
  stdout: ''
  timestamp: 1660011162
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        StringBuilder\
    \ sb = new StringBuilder(s.length());\n        for(int i = 0; i < s.length();\
    \ i++) {\n            if(Character.isLetter(s.charAt(i))) {\n                char\
    \ c = s.charAt(i);\n                char upper = Character.toUpperCase(c);\n \
    \               char lower = Character.toLowerCase(c);\n                sb.append(String.valueOf(upper));\n\
    \                sb.append(String.valueOf(lower));\n            } else {\n   \
    \             sb.append(String.valueOf(s.charAt(i)));\n            }\n       \
    \ }\n        return sb.toString();\n}\n    public static void main(String[] args)\
    \ {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\"\
    )).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"\
    #a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\"\
    )));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n    assert(solve((\"\
    #$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\")).equals((\"#CCC\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmuoqffwl.java:34)\n"
  stdout: ''
  timestamp: 1660011163
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        final\
    \ char[] arr = s.toCharArray();\n        List<Character> arrChars = new ArrayList<Character>();\n\
    \        Arrays.stream(arr).forEach(c -> {\n            arrChars.add(c);\n   \
    \     });\n        arrChars.sort((a, b) -> {\n            boolean isAcase = isLetter(a);\n\
    \            boolean isBcase = isLetter(b);\n            return isAcase && !isBcase\
    \ ? -1\n                    : isBcase && !isAcase ? 1\n                    : a.compareTo(b);\n\
    \        });\n        return String.valueOf(arrChars.toArray(new Character[0]));\n\
    }\n    public static void main(String[] args) {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpem9w_3oz.java:21: error: no suitable method found for stream(char[])\n\
    \        Arrays.stream(arr).forEach(c -> {\n              ^\n    method Arrays.<T#1>stream(T#1[])\
    \ is not applicable\n      (inference variable T#1 has incompatible bounds\n \
    \       equality constraints: char\n        lower bounds: Object)\n    method\
    \ Arrays.<T#2>stream(T#2[],int,int) is not applicable\n      (cannot infer type-variable(s)\
    \ T#2\n        (actual and formal argument lists differ in length))\n    method\
    \ Arrays.stream(int[]) is not applicable\n      (argument mismatch; char[] cannot\
    \ be converted to int[])\n    method Arrays.stream(long[]) is not applicable\n\
    \      (argument mismatch; char[] cannot be converted to long[])\n    method Arrays.stream(double[])\
    \ is not applicable\n      (argument mismatch; char[] cannot be converted to double[])\n\
    \  where T#1,T#2 are type-variables:\n    T#1 extends Object declared in method\
    \ <T#1>stream(T#1[])\n    T#2 extends Object declared in method <T#2>stream(T#2[],int,int)\n\
    /tmp/tmpem9w_3oz.java:25: error: cannot find symbol\n            boolean isAcase\
    \ = isLetter(a);\n                              ^\n  symbol:   method isLetter(Character)\n\
    \  location: class Problem\n/tmp/tmpem9w_3oz.java:26: error: cannot find symbol\n\
    \            boolean isBcase = isLetter(b);\n                              ^\n\
    \  symbol:   method isLetter(Character)\n  location: class Problem\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    3 errors\n"
  stdout: ''
  timestamp: 1660011163
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        boolean\
    \ letters = true;\n        String reverse = \"\";\n        \n        for(int i\
    \ = 0; i < s.length(); i++) {\n            char ch = s.charAt(i);\n          \
    \  String capitalLetter = \"\";\n            if((ch >= 'a' && ch <= 'z') || (ch\
    \ >= 'A' && ch <= 'Z')) {\n                capitalLetter = Character.toString(ch);\n\
    \            } else if(Character.isLetter(ch)) {\n                letters = true;\n\
    \            }\n            \n            if(letters == true) {\n            \
    \    reverse = reverse + capitalLetter;\n            } else {\n              \
    \  reverse = reverse + ch;\n            }\n            letters = false;\n    \
    \    }\n        return reverse;\n}\n    public static void main(String[] args)\
    \ {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\"\
    )).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"\
    #a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\"\
    )));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n    assert(solve((\"\
    #$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\")).equals((\"#CCC\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpq98qvjh_.java:41)\n"
  stdout: ''
  timestamp: 1660011163
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        String\
    \ reverse = \"\";\n        for(int i = 0; i < s.length(); i++) {\n           \
    \ if(Character.isLetter(s.charAt(i))) {\n                reverse += Character.toLowerCase(s.charAt(i));\n\
    \            }\n            else {\n                reverse += s.charAt(i);\n\
    \            }\n        }\n        return reverse;\n}\n    public static void\
    \ main(String[] args) {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n \
    \   assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"\
    AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"\
    #AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"\
    2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"\
    #ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpw15w5crg.java:31)\n"
  stdout: ''
  timestamp: 1660011163
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        String[]\
    \ chars = s.split(\"\");\n        for(String str : chars){\n            if(!Character.isLetterOrDigit(str.charAt(0))){\n\
    \                char[] reverse = new char[str.length()];\n                for(int\
    \ i = 0; i < str.length(); i++){\n                    reverse[str.length()-1-i]\
    \ = str.charAt(i);\n                }\n                String reverseStr = new\
    \ String(reverse);\n                s = s.replace(str, reverseStr);\n        \
    \    }\n        }\n        return s;\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp72fz4hs4.java:33)\n"
  stdout: ''
  timestamp: 1660011163
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        if (s.length()\
    \ == 0) {\n            throw new IllegalArgumentException(\"Empty string.\");\n\
    \        }\n        char[] array = s.toCharArray();\n        for (char c : array)\
    \ {\n            if (Character.isLetter(c)) {\n                switch (Character.toLowerCase(c))\
    \ {\n                    case 'a':\n                    case 'e':\n          \
    \          case 'i':\n                    case 'o':\n                    case\
    \ 'u':\n                    case 'x':\n                    case 'y':\n       \
    \             case 'z':\n                        c = Character.toUpperCase(c);\n\
    \                        break;\n                    case 'b':\n             \
    \       case 'c':\n                    case 'd':\n                    case 'f':\n\
    \                    case 'g':\n                    case 'h':\n              \
    \      case 'j':\n                    case 'k':\n                    case 'l':\n\
    \                    case 'm':\n                    case 'n':\n              \
    \      case 'p':\n                    case 'q':\n                    case 'r':\n\
    \                    case 's':\n                    case 't':\n              \
    \      case 'v':\n                    case 'w':\n                    case 'x':\n\
    \                    case 'z':\n                        c = Character.toLowerCase(c);\n\
    \                        break;\n                    default:\n              \
    \          c = Character.toLowerCase(c);\n                        break;\n   \
    \             }\n            }\n        }\n        return new String(array);\n\
    }\n    public static void main(String[] args) {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz_p125yy.java:54: error: duplicate case label\n               \
    \     case 'x':\n                    ^\n/tmp/tmpz_p125yy.java:55: error: duplicate\
    \ case label\n                    case 'z':\n                    ^\n2 errors\n"
  stdout: ''
  timestamp: 1660011163
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        String\
    \ result = \"\";\n        String s = \"\";\n        for (int i = 0; i < s.length();\
    \ i++) {\n            char c = s.charAt(i);\n            int charCode = s.charAt(i).toLowerCase().codePointAt(0);\n\
    \            if (isUpperOrLower(charCode)) {\n                s = String.valueOf((char)\
    \ ((int) charCode - 65));\n                result += s;\n            }\n     \
    \       else {\n                s = String.valueOf((char) ((int) charCode - 97));\n\
    \                result += s;\n            }\n        }\n        \n        return\
    \ result;\n}\n    public static void main(String[] args) {\n    assert(solve((\"\
    AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n\
    \    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmfk3frsy.java:20: error: variable s is already defined in method\
    \ solve(String)\n        String s = \"\";\n               ^\n/tmp/tmpmfk3frsy.java:23:\
    \ error: char cannot be dereferenced\n            int charCode = s.charAt(i).toLowerCase().codePointAt(0);\n\
    \                                      ^\n/tmp/tmpmfk3frsy.java:24: error: cannot\
    \ find symbol\n            if (isUpperOrLower(charCode)) {\n                ^\n\
    \  symbol:   method isUpperOrLower(int)\n  location: class Problem\n3 errors\n"
  stdout: ''
  timestamp: 1660011163
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        // Write\
    \ your Java solution here\n        ArrayList<String> al = new ArrayList<String>();\n\
    \        boolean flag = false;\n        for(String str: s.split(\"\\\\s+\"))\n\
    \        {\n            if(str.matches(\"[a-zA-Z]+\"))\n            {\n      \
    \          al.add(str);\n                flag = true;\n            }\n       \
    \     else\n            {\n                flag = false;\n            }\n    \
    \    }\n        if(!flag)\n        {\n            al = new ArrayList<String>();\n\
    \        }\n        StringBuilder sb = new StringBuilder();\n        for(String\
    \ str: al)\n        {\n            if(str.length()>1)\n            {\n       \
    \         str = str.toLowerCase();\n                str = str.replaceAll(\"[a-z]\"\
    ,\"\").replaceAll(\"[A-Z]\",\"\");\n                str = str.substring(0, 1)\
    \ + str.substring(1).toLowerCase();\n                sb.append(str);\n       \
    \     }\n        }\n        return sb.toString();\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StringIndexOutOfBoundsException:\
    \ begin 0, end 1, length 0\n\tat java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\
    \tat java.base/java.lang.String.substring(String.java:2707)\n\tat Problem.solve(tmp14b73xce.java:45)\n\
    \tat Problem.main(tmp14b73xce.java:52)\n"
  stdout: ''
  timestamp: 1660011163
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        // Your\
    \ code here\n        \n}\n    public static void main(String[] args) {\n    assert(solve((\"\
    AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n\
    \    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmpnmxi4il2.java:21: error: missing return statement

    }

    ^

    1 error

    '
  stdout: ''
  timestamp: 1660011163
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        if (s\
    \ == null) return null;\n        if (s.isEmpty()) return s;\n        // Create\
    \ map from character code to char\n        Map<Character, Character> map = new\
    \ HashMap<>();\n        for (char c : s.toCharArray())\n            map.put((char)\
    \ c, c);\n        // Use streams to get all character codes of chars \n      \
    \  // and then transform them into char values.\n        List<Character> chars\
    \ = s.codePoints().collect(Collectors.toList());\n        // Iterate through all\
    \ codepoints\n        for (char c : chars) {\n            // Get actual char from\
    \ map\n            char actual = map.get(c);\n            // Get char code of\
    \ actual char\n            int code = actual.codePointAt(0);\n            // If\
    \ actual char is a letter, \n            // change it to upper case\n        \
    \    if (Character.isLetter(actual)) {\n                // Convert char to upper\
    \ case\n                actual = (char) Character.toUpperCase(actual);\n     \
    \       }\n            // Otherwise keep it\n            else {\n            \
    \    // Convert char to lower case\n                actual = (char) Character.toLowerCase(actual);\n\
    \            }\n            // Replace char code with new one\n            map.put(c,\
    \ actual);\n        }\n        // Transform map into String\n        return map.values().stream()\n\
    \            .map(String::valueOf)\n            .reduce(\"\", String::concat)\n\
    \            .orElse(s);\n}\n    public static void main(String[] args) {\n  \
    \  assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"\
    4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"\
    #a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\"\
    )));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n    assert(solve((\"\
    #$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\")).equals((\"#CCC\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfafn4ou2.java:27: error: method collect in interface IntStream\
    \ cannot be applied to given types;\n        List<Character> chars = s.codePoints().collect(Collectors.toList());\n\
    \                                              ^\n  required: Supplier<R>,ObjIntConsumer<R>,BiConsumer<R,R>\n\
    \  found:    Collector<Object,CAP#1,List<Object>>\n  reason: cannot infer type-variable(s)\
    \ R\n    (actual and formal argument lists differ in length)\n  where R is a type-variable:\n\
    \    R extends Object declared in method <R>collect(Supplier<R>,ObjIntConsumer<R>,BiConsumer<R,R>)\n\
    \  where CAP#1 is a fresh type-variable:\n    CAP#1 extends Object from capture\
    \ of ?\n/tmp/tmpfafn4ou2.java:27: error: incompatible types: cannot infer type-variable(s)\
    \ R\n        List<Character> chars = s.codePoints().collect(Collectors.toList());\n\
    \                                                      ^\n    (argument mismatch;\
    \ no instance(s) of type variable(s) CAP#1,T exist so that Collector<T,?,List<T>>\
    \ conforms to Supplier<R>)\n  where R,T are type-variables:\n    R extends Object\
    \ declared in method <R>collect(Supplier<R>,ObjIntConsumer<R>,BiConsumer<R,R>)\n\
    \    T extends Object declared in method <T>toList()\n  where CAP#1 is a fresh\
    \ type-variable:\n    CAP#1 extends Object from capture of ?\n/tmp/tmpfafn4ou2.java:33:\
    \ error: char cannot be dereferenced\n            int code = actual.codePointAt(0);\n\
    \                             ^\n/tmp/tmpfafn4ou2.java:52: error: cannot find\
    \ symbol\n            .orElse(s);\n            ^\n  symbol:   method orElse(String)\n\
    \  location: class String\n4 errors\n"
  stdout: ''
  timestamp: 1660011163
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        String[]\
    \ a = s.split(\"\");\n        StringBuilder builder = new StringBuilder();\n \
    \       for (String t : a) {\n            if (Character.isLetter(t)) {\n     \
    \           if (builder.length() > 0) {\n                    builder.append('\
    \ ');\n                }\n                builder.append(Character.toUpperCase(t));\n\
    \            } else {\n                if (builder.length() > 0) {\n         \
    \           builder.append(' ');\n                }\n                builder.append(t);\n\
    \            }\n        }\n        return builder.toString();\n}\n    public static\
    \ void main(String[] args) {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n\
    \    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"\
    AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"\
    #AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"\
    2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"\
    #ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpk89d8m11.java:22: error: no suitable method found for isLetter(String)\n\
    \            if (Character.isLetter(t)) {\n                         ^\n    method\
    \ Character.isLetter(char) is not applicable\n      (argument mismatch; String\
    \ cannot be converted to char)\n    method Character.isLetter(int) is not applicable\n\
    \      (argument mismatch; String cannot be converted to int)\n/tmp/tmpk89d8m11.java:26:\
    \ error: no suitable method found for toUpperCase(String)\n                builder.append(Character.toUpperCase(t));\n\
    \                                        ^\n    method Character.toUpperCase(char)\
    \ is not applicable\n      (argument mismatch; String cannot be converted to char)\n\
    \    method Character.toUpperCase(int) is not applicable\n      (argument mismatch;\
    \ String cannot be converted to int)\n2 errors\n"
  stdout: ''
  timestamp: 1660011163
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        Set<Character>\
    \ set = new HashSet<>();\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n\
    \            if (Character.isLetter(c)) {\n                c = Character.toLowerCase(c);\n\
    \                set.add(c);\n            }\n            else if (set.contains(c))\
    \ {\n                c = Character.toUpperCase(c);\n            }\n          \
    \  result.append(c);\n        }\n        return result.toString();\n}\n    public\
    \ static void main(String[] args) {\n    assert(solve((\"AsDf\")).equals((\"aSdF\"\
    )));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd9rumpuh.java:35)\n"
  stdout: ''
  timestamp: 1660011163
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        return\
    \ s.replaceAll(\"(?i)[a-z]\", \"\\u$0\") + s.replaceAll(\"(?i)[A-Z]\", \"\\u$0\"\
    );\n}\n    public static void main(String[] args) {\n    assert(solve((\"AsDf\"\
    )).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n \
    \   assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp304zl8yk.java:19: error: illegal unicode escape\n        return\
    \ s.replaceAll(\"(?i)[a-z]\", \"\\u$0\") + s.replaceAll(\"(?i)[A-Z]\", \"\\u$0\"\
    );\n                                            ^\n/tmp/tmp304zl8yk.java:19: error:\
    \ illegal unicode escape\n        return s.replaceAll(\"(?i)[a-z]\", \"\\u$0\"\
    ) + s.replaceAll(\"(?i)[A-Z]\", \"\\u$0\");\n                                \
    \                                                ^\n2 errors\n"
  stdout: ''
  timestamp: 1660011163
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        int len\
    \ = s.length();\n        if (len == 0) {\n            return s;\n        }\n \
    \       // char c = s.charAt(0); // first char\n        // String upper = Character.toUpperCase(c);\
    \ // upper char\n        // String lower = Character.toLowerCase(c); // lower\
    \ char\n        char c = s.charAt(0); // first char\n        // String upper =\
    \ Character.toUpperCase(c); // upper char\n        // String lower = Character.toLowerCase(c);\
    \ // lower char\n        char upper = Character.toUpperCase(c); // upper char\n\
    \        char lower = Character.toLowerCase(c); // lower char\n        // String\
    \ upper = s.charAt(0).toUpperCase(); // upper char\n        // String lower =\
    \ s.charAt(0).toLowerCase(); // lower char\n        \n        char[] arr = s.toCharArray();\n\
    \        \n        // String upper = s.charAt(0).toUpperCase();\n        // String\
    \ lower = s.charAt(0).toLowerCase();\n        \n        int upperCount = 0, lowerCount\
    \ = 0;\n        for (int i = 0; i < len; i++){\n            char ch = arr[i];\n\
    \            \n            if (Character.isLetter(ch)) {\n                \n \
    \               if (upperCount > 0) {\n                    upperCount--;\n   \
    \             } else if (lowerCount > 0) {\n                    lowerCount--;\n\
    \                } else {\n                    upperCount++;\n               \
    \     lowerCount++;\n                }\n                \n                if (upperCount\
    \ == 0) {\n                    upper = Character.toUpperCase(ch);\n          \
    \      } else if (lowerCount == 0) {\n                    lower = Character.toLowerCase(ch);\n\
    \                }\n            }\n        }\n        \n        StringBuilder\
    \ sb = new StringBuilder();\n        for (int i = 0; i < len; i++){\n        \
    \    char ch = arr[i];\n            \n            if (Character.isLetter(ch))\
    \ {\n                \n                if (upperCount > 0) {\n               \
    \     upperCount--;\n                } else if (lowerCount > 0) {\n          \
    \          lowerCount--;\n                } else {\n                    upperCount++;\n\
    \                    lowerCount++;\n                }\n                \n    \
    \            if (upperCount == 0) {\n                    upper = Character.toUpperCase(ch);\n\
    \                } else if (lowerCount == 0) {\n                    lower = Character.toLowerCase(ch);\n\
    \                }\n                \n                sb.append(upper);\n    \
    \            upper = lower;\n                lower = upper;\n            }\n \
    \       }\n        return sb.toString();\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphljuynrl.java:91)\n"
  stdout: ''
  timestamp: 1660011163
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        if (s\
    \ == null || s.length() == 0)\n            return s;\n        HashMap<Character,\
    \ Character> map = new HashMap<>();\n        for(char c : s.toCharArray()){\n\
    \            map.put(c, map.getOrDefault(c, c).caseCompareTo(Character.toUpperCase(c)));\n\
    \        }\n        String result = s.replaceAll(\"[a-z]\", c -> map.get(c));\n\
    \        \n        while(!map.isEmpty()){\n            int i = map.keySet().iterator().nextInt()\
    \ - 1;\n            map.remove(map.keySet().iterator().next());\n            result\
    \ = result.replace(map.keySet().iterator().next(), map.get(map.keySet().iterator().next()));\n\
    \        }\n        return result;\n}\n    public static void main(String[] args)\
    \ {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\"\
    )).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"\
    #a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\"\
    )));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n    assert(solve((\"\
    #$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\")).equals((\"#CCC\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplguotxuj.java:23: error: cannot find symbol\n            map.put(c,\
    \ map.getOrDefault(c, c).caseCompareTo(Character.toUpperCase(c)));\n         \
    \                                    ^\n  symbol:   method caseCompareTo(char)\n\
    \  location: class Character\n/tmp/tmplguotxuj.java:25: error: incompatible types:\
    \ String is not a functional interface\n        String result = s.replaceAll(\"\
    [a-z]\", c -> map.get(c));\n                         ^\n/tmp/tmplguotxuj.java:28:\
    \ error: cannot find symbol\n            int i = map.keySet().iterator().nextInt()\
    \ - 1;\n                                           ^\n  symbol:   method nextInt()\n\
    \  location: interface Iterator<Character>\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n3 errors\n"
  stdout: ''
  timestamp: 1660011163
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        return\
    \ \"\";\n}\n    public static void main(String[] args) {\n    assert(solve((\"\
    AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n\
    \    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpp3xadpsz.java:22)\n"
  stdout: ''
  timestamp: 1660011021
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        // Your\
    \ code goes here\n        Set<String> set=new HashSet<String>();\n        for\
    \ (char c: s.toCharArray()) {\n            int index=0;\n            int len=s.length();\n\
    \            char first=s.charAt(0);\n            if(Character.isLetter(first))\n\
    \            {\n                c=Character.toUpperCase(c);\n                len=len-1;\n\
    \            }\n            while (index<len){\n                if (Character.isLetter(c))\n\
    \                {\n                    set.add(s.substring(index,len+1));\n \
    \                   c=Character.toLowerCase(c);\n                    len=len-1;\n\
    \                }\n                else{\n                    c=s.charAt(index++);\n\
    \                    len=len-1;\n                }\n            }\n        }\n\
    \        StringBuffer sb=new StringBuffer();\n        for (String str: set){\n\
    \            sb=sb.append(str).reverse().toString()+\"\\n\";\n        }\n    \
    \    return sb.toString();\n}\n    public static void main(String[] args) {\n\
    \    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\"\
    )).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"\
    #a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\"\
    )));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n    assert(solve((\"\
    #$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\")).equals((\"#CCC\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpk9bavrjd.java:45: error: incompatible types: String cannot be converted\
    \ to StringBuffer\n            sb=sb.append(str).reverse().toString()+\"\\n\"\
    ;\n                                                  ^\n1 error\n"
  stdout: ''
  timestamp: 1660011163
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        String\
    \ str = new String(s);\n        for (int i = 0; i < s.length(); i++) {\n     \
    \       if (str.charAt(i) >= 'a' && str.charAt(i) <= 'z') {\n                char\
    \ c = str.charAt(i);\n                str = str.replaceFirst(String.valueOf(c),\
    \ String.valueOf((char) (c - ((int) c % 32))));\n            } else if (str.charAt(i)\
    \ >= 'A' && str.charAt(i) <= 'Z') {\n                char c = str.charAt(i);\n\
    \                str = str.replaceFirst(String.valueOf(c), String.valueOf((char)\
    \ (c + 32 - ((int) c % 32))));\n            } else {\n                str = str.replaceFirst(str.charAt(i),\
    \ String.valueOf(str.charAt(i)));\n            }\n        }\n        return str;\n\
    }\n    public static void main(String[] args) {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6idamca5.java:28: error: incompatible types: char cannot be converted\
    \ to String\n                str = str.replaceFirst(str.charAt(i), String.valueOf(str.charAt(i)));\n\
    \                                                 ^\nNote: Some messages have\
    \ been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660011163
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        Stack<Character>\
    \ stack = new Stack<>();\n        for(int i = 0; i < s.length(); i++) {\n    \
    \        char c = s.charAt(i);\n            if(c == '#') {\n                if(!stack.isEmpty())\
    \ {\n                    char c2 = stack.pop();\n                    if(c2 ==\
    \ '@') {\n                        if(!stack.isEmpty()) {\n                   \
    \         char d = stack.pop();\n                            if(c2 == '#') {\n\
    \                                stack.push(d + '@');\n                      \
    \      } else {\n                                stack.push(d + '#');\n      \
    \                      }\n                        } else {\n                 \
    \           stack.push('@');\n                        }\n                    }\
    \ else {\n                        stack.push('#');\n                    }\n  \
    \              } else {\n                    stack.push('#');\n              \
    \  }\n            } else {\n                stack.push(c);\n            }\n  \
    \      }\n\n        StringBuilder sb = new StringBuilder();\n        while(!stack.isEmpty())\
    \ {\n            char c = stack.pop();\n            sb.append(c);\n        }\n\
    \n        return sb.toString();\n}\n    public static void main(String[] args)\
    \ {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\"\
    )).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"\
    #a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\"\
    )));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n    assert(solve((\"\
    #$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\")).equals((\"#CCC\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgyb06wt8.java:29: error: incompatible types: int cannot be converted\
    \ to Character\n                                stack.push(d + '@');\n       \
    \                                      ^\n/tmp/tmpgyb06wt8.java:31: error: incompatible\
    \ types: int cannot be converted to Character\n                              \
    \  stack.push(d + '#');\n                                             ^\nNote:\
    \ Some messages have been simplified; recompile with -Xdiags:verbose to get full\
    \ output\n2 errors\n"
  stdout: ''
  timestamp: 1660011164
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        boolean\
    \ lower = true;\n        for(int i = 0; i < s.length(); i++){\n            if(lower\
    \ = s.charAt(i) >= 'a' && s.charAt(i) <= 'z'){\n                s = s.replaceFirst(String.valueOf(s.charAt(i)),\n\
    \                        s.substring(0,i)+String.valueOf(s.charAt(i))+s.substring(i+1));\n\
    \                lower = false;\n            }\n        }\n        return s;\n\
    }\n    public static void main(String[] args) {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660011169
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        if (s.isEmpty())\
    \ {\n            return s;\n        }\n        char[] arr = s.toCharArray();\n\
    \        for (int i = 0; i < arr.length; i++) {\n            if (Character.isLetter(arr[i]))\
    \ {\n                char temp = arr[i];\n                arr[i] = Character.toUpperCase(arr[i]);\n\
    \                arr[i] = temp;\n            }\n        }\n        return String.valueOf(arr);\n\
    }\n    public static void main(String[] args) {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqv5ch4u1.java:33)\n"
  stdout: ''
  timestamp: 1660011164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        StringBuilder\
    \ sb = new StringBuilder();\n        for(int i = 0; i < s.length(); i++) {\n \
    \           char c = s.charAt(i);\n            if(Character.isLetter(c)) {\n \
    \               if(Character.isUpperCase(c)) {\n                    sb.append(Character.toLowerCase(c));\n\
    \                } else {\n                    sb.append(Character.toUpperCase(c));\n\
    \                }\n            } else {\n                sb.append(c);\n    \
    \        }\n        }\n        return sb.toString();\n}\n    public static void\
    \ main(String[] args) {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n \
    \   assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"\
    AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"\
    #AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"\
    2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"\
    #ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3t2zcinp.java:36)\n"
  stdout: ''
  timestamp: 1660011164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        String[]\
    \ arr1 = s.split(\"\");\n        StringBuilder sb = new StringBuilder();\n   \
    \     for (int i = 0; i < arr1.length; i++) {\n            if (arr1[i].matches(\"\
    [a-zA-Z]+\")) {\n                String temp = new StringBuilder().append(Character.toLowerCase(arr1[i])).reverse().toString();\n\
    \                sb.append(Character.toLowerCase(arr1[i])).append(temp);\n   \
    \         } else {\n                sb.append(arr1[i]);\n            }\n     \
    \   }\n        return sb.toString();\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvu64bqx0.java:23: error: no suitable method found for toLowerCase(String)\n\
    \                String temp = new StringBuilder().append(Character.toLowerCase(arr1[i])).reverse().toString();\n\
    \                                                                  ^\n    method\
    \ Character.toLowerCase(char) is not applicable\n      (argument mismatch; String\
    \ cannot be converted to char)\n    method Character.toLowerCase(int) is not applicable\n\
    \      (argument mismatch; String cannot be converted to int)\n/tmp/tmpvu64bqx0.java:24:\
    \ error: no suitable method found for toLowerCase(String)\n                sb.append(Character.toLowerCase(arr1[i])).append(temp);\n\
    \                                   ^\n    method Character.toLowerCase(char)\
    \ is not applicable\n      (argument mismatch; String cannot be converted to char)\n\
    \    method Character.toLowerCase(int) is not applicable\n      (argument mismatch;\
    \ String cannot be converted to int)\n2 errors\n"
  stdout: ''
  timestamp: 1660011164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        \n   \
    \     //Write your code here\n        \n        String answer = null;\n      \
    \  for (char c : s.toCharArray()) {\n            if (Character.isLetter(c)) {\n\
    \                answer = Character.toUpperCase(c);\n            } else {\n  \
    \              answer = Character.toLowerCase(c);\n            }\n        }\n\
    \        answer = reverse(answer);\n        return answer;\n}\n    public static\
    \ void main(String[] args) {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n\
    \    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"\
    AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"\
    #AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"\
    2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"\
    #ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpaedxejxm.java:25: error: incompatible types: char cannot be converted\
    \ to String\n                answer = Character.toUpperCase(c);\n            \
    \                                  ^\n/tmp/tmpaedxejxm.java:27: error: incompatible\
    \ types: char cannot be converted to String\n                answer = Character.toLowerCase(c);\n\
    \                                              ^\n/tmp/tmpaedxejxm.java:30: error:\
    \ cannot find symbol\n        answer = reverse(answer);\n                 ^\n\
    \  symbol:   method reverse(String)\n  location: class Problem\n3 errors\n"
  stdout: ''
  timestamp: 1660011164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        String[]\
    \ chars = s.split(\"(?!^)\");\n        String result = \"\";\n        for (String\
    \ c: chars) {\n            if (Character.isLetter(c)) {\n                result\
    \ = c.toUpperCase() + result;\n            } else {\n                result =\
    \ c + result;\n            }\n        }\n        return result;\n}\n    public\
    \ static void main(String[] args) {\n    assert(solve((\"AsDf\")).equals((\"aSdF\"\
    )));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpowtjc5k4.java:22: error: no suitable method found for isLetter(String)\n\
    \            if (Character.isLetter(c)) {\n                         ^\n    method\
    \ Character.isLetter(char) is not applicable\n      (argument mismatch; String\
    \ cannot be converted to char)\n    method Character.isLetter(int) is not applicable\n\
    \      (argument mismatch; String cannot be converted to int)\n1 error\n"
  stdout: ''
  timestamp: 1660011164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        return\
    \ solve(s, new TreeMap<>());\n}\n    public static void main(String[] args) {\n\
    \    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\"\
    )).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"\
    #a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\"\
    )));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n    assert(solve((\"\
    #$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\")).equals((\"#CCC\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbc85qdh_.java:19: error: method solve in class Problem cannot be\
    \ applied to given types;\n        return solve(s, new TreeMap<>());\n       \
    \        ^\n  required: String\n  found:    String,TreeMap<Object,Object>\n  reason:\
    \ actual and formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        if(s.isEmpty())\
    \ {\n            return s;\n        }\n        char[] chars = s.toCharArray();\n\
    \        char char1 = Character.toLowerCase(chars[0]);\n        char char2 = Character.toUpperCase(char1);\n\
    \        String result = \"\";\n        for(int i = 1; i < chars.length; i = i\
    \ + 2) {\n            if(chars[i] == char1) {\n                result += char2;\n\
    \            } else if(chars[i] == char2) {\n                result += char1;\n\
    \            } else {\n                result += chars[i];\n            }\n  \
    \      }\n        return result;\n}\n    public static void main(String[] args)\
    \ {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\"\
    )).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"\
    #a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\"\
    )));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n    assert(solve((\"\
    #$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\")).equals((\"#CCC\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmparkouamj.java:38)\n"
  stdout: ''
  timestamp: 1660011164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        if(s ==\
    \ null) {\n            return null;\n        }\n        if(s.isEmpty()) {\n  \
    \          return \"\";\n        }\n        Map<Character, String> map = new HashMap<>();\n\
    \        for(int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n\
    \            if(c == '#') {\n                String temp = map.get(s.charAt(i+1));\n\
    \                if(temp != null) {\n                    String key = Character.toString(s.charAt(i+1));\n\
    \                    map.put(key, temp);\n                }\n            }\n \
    \           map.put(c, Character.toString(c));\n        }\n        return map.values().stream().collect(Collectors.joining(\"\
    \"));\n}\n    public static void main(String[] args) {\n    assert(solve((\"AsDf\"\
    )).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n \
    \   assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsyndrope.java:32: error: incompatible types: String cannot be converted\
    \ to Character\n                    map.put(key, temp);\n                    \
    \        ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660011164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        // Write\
    \ your code here\n        String result = \"\";\n        for(int i=0;i<s.length();i++){\n\
    \            char c = s.charAt(i);\n            if(c>=65&&c<=90){\n          \
    \      c = String.valueOf((int)(c+32));\n            }\n            result +=\
    \ c;\n        }\n        return result;\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj5bprumk.java:24: error: incompatible types: String cannot be converted\
    \ to char\n                c = String.valueOf((int)(c+32));\n                \
    \                  ^\n1 error\n"
  stdout: ''
  timestamp: 1660011164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        StringBuilder\
    \ sb = new StringBuilder(s);\n        char[] arr = s.toCharArray();\n        if\
    \ (arr == null || arr.length == 0) return null;\n        Arrays.sort(arr);\n \
    \       for (int i = 0; i < arr.length; i++) {\n            char c = arr[i];\n\
    \            if (Character.isLetter(c)) {\n                if (Character.isUpperCase(c))\
    \ {\n                    sb.setCharAt(i, Character.toLowerCase(c));\n        \
    \        } else {\n                    sb.setCharAt(i, Character.toUpperCase(c));\n\
    \                }\n            } else {\n                sb.setCharAt(i, c);\n\
    \            }\n        }\n        return sb.toString();\n}\n    public static\
    \ void main(String[] args) {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n\
    \    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"\
    AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"\
    #AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"\
    2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"\
    #ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqykvjrcl.java:38)\n"
  stdout: ''
  timestamp: 1660011164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        // code\
    \ here\n        s = s.replaceAll(\"[A-z]\",\"\").replaceAll(\"[^a-zA-Z]\",\"\"\
    );\n        if(s.isEmpty())\n            return s;\n        char[] ch = new char[s.length()];\n\
    \        for(int i = 0;i<ch.length;i++)\n            ch[i] = s.charAt(i);\n  \
    \      StringBuilder sb = new StringBuilder();\n        for(int i=0;i<ch.length;i++)\
    \ {\n            if(ch[i]>='a' && ch[i]<='z'){\n                ch[i] = (char)ch[i]-'a'\
    \ + 'A';\n            }\n            sb.append(ch[i]);\n        }\n        return\
    \ sb.toString();\n}\n    public static void main(String[] args) {\n    assert(solve((\"\
    AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n\
    \    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxu0msju7.java:29: error: incompatible types: possible lossy conversion\
    \ from int to char\n                ch[i] = (char)ch[i]-'a' + 'A';\n         \
    \                               ^\n1 error\n"
  stdout: ''
  timestamp: 1660011164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        if (s.length()\
    \ == 0) {\n            return \"\";\n        }\n        char[] ca = s.toCharArray();\n\
    \        Arrays.sort(ca, (a, b) -> a.compareTo(b));\n        if (Character.toUpperCase(ca[0])\
    \ == ca[0]) {\n            ca[0] = Character.toUpperCase(ca[0]);\n        }\n\
    \        return String.valueOf(ca);\n}\n    public static void main(String[] args)\
    \ {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\"\
    )).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"\
    #a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\"\
    )));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n    assert(solve((\"\
    #$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\")).equals((\"#CCC\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdnj74601.java:23: error: no suitable method found for sort(char[],(a,b)->a.c[...]To(b))\n\
    \        Arrays.sort(ca, (a, b) -> a.compareTo(b));\n              ^\n    method\
    \ Arrays.<T#1>sort(T#1[],Comparator<? super T#1>) is not applicable\n      (inference\
    \ variable T#1 has incompatible bounds\n        equality constraints: char\n \
    \       lower bounds: Object)\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660011164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        // Write\
    \ your code here\n        \n        return \"\";\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph3ey0k4z.java:24)\n"
  stdout: ''
  timestamp: 1660011164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        if (s\
    \ == null || s.isEmpty()) {\n            return s;\n        }\n\n        // convert\
    \ all chars to lower case\n        char[] chars = s.toCharArray();\n        Arrays.sort(chars);\n\
    \        StringBuilder sb = new StringBuilder();\n        for (char c : chars)\
    \ {\n            String str = String.valueOf(c);\n            if (isLetter(c))\
    \ {\n                // convert char to uppercase if its an upper case\n     \
    \           String upperCase = new StringBuilder(str).reverse().toString();\n\
    \                sb.append(upperCase);\n            } else {\n               \
    \ // otherwise keep it as it\n                sb.append(str);\n            }\n\
    \        }\n\n        // remove all empty chars\n        while (sb.length() >\
    \ 0 && sb.charAt(0) == ' ') {\n            sb.deleteCharAt(0);\n        }\n  \
    \      return sb.toString();\n}\n    public static void main(String[] args) {\n\
    \    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\"\
    )).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"\
    #a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\"\
    )));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n    assert(solve((\"\
    #$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\")).equals((\"#CCC\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnpyjjvt0.java:29: error: cannot find symbol\n            if (isLetter(c))\
    \ {\n                ^\n  symbol:   method isLetter(char)\n  location: class Problem\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        char[]\
    \ chars = s.toCharArray();\n        char[] reversedChars = new char[chars.length];\n\
    \        // String result = \"\";\n        for (int i = 0; i < chars.length; i++)\
    \ {\n            if (Character.isLetter(chars[i])) {\n                chars[i]\
    \ = Character.toUpperCase(chars[i]);\n                reversedChars[chars.length\
    \ - (i + 1)] = Character.toLowerCase(chars[i]);\n            } else {\n      \
    \          reversedChars[chars.length - (i + 1)] = chars[i];\n            }\n\
    \        }\n        String result = new String(reversedChars);\n        return\
    \ result;\n}\n    public static void main(String[] args) {\n    assert(solve((\"\
    AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n\
    \    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsnmw38o3.java:34)\n"
  stdout: ''
  timestamp: 1660011165
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        String\
    \ result = \"\";\n        StringBuilder stringBuilder = new StringBuilder();\n\
    \        char[] letters = s.toCharArray();\n        boolean isFirst = true;\n\
    \        for (int i = 0; i < letters.length; ++i) {\n            if (isFirst)\
    \ {\n                stringBuilder.append(letters[i]);\n                isFirst\
    \ = false;\n            } else {\n                boolean letterFound = false;\n\
    \                for (int j = 0; j < letters.length; ++j) {\n                \
    \    if (i == j) {\n                        letterFound = true;\n            \
    \            break;\n                    }\n                    if (!letterFound\
    \ && letters[j] == letters[i]) {\n                        stringBuilder.append(letters[j]);\n\
    \                        letterFound = true;\n                        break;\n\
    \                    }\n                }\n            }\n        }\n        result\
    \ = stringBuilder.toString();\n        return result;\n}\n    public static void\
    \ main(String[] args) {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n \
    \   assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"\
    AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"\
    #AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"\
    2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"\
    #ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy6otj486.java:46)\n"
  stdout: ''
  timestamp: 1660011165
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        String[]\
    \ strArr = s.split(\"\");\n        strArr = strArr.stream().map( s -> {\n    \
    \        if( s.matches(\"[a-zA-Z]+\") ){\n                return Character.toLowerCase(s.charAt(0));\n\
    \            }else if( s.matches(\"[0-9]+\") ){\n                return Character.toUpperCase(s.charAt(0));\n\
    \            }else{\n                return s;\n            }\n        }).collect(Collectors.toList()).stream().collect(Collectors.toList());\n\
    \        String result = \"\";\n        for( String str: strArr ){\n         \
    \   result += str;\n        }\n        result = result.replaceAll(\"[a-zA-Z]+\"\
    , \"*\");\n        return result;\n}\n    public static void main(String[] args)\
    \ {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\"\
    )).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"\
    #a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\"\
    )));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n    assert(solve((\"\
    #$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\")).equals((\"#CCC\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjb6bn8ab.java:20: error: cannot find symbol\n        strArr = strArr.stream().map(\
    \ s -> {\n                       ^\n  symbol:   method stream()\n  location: variable\
    \ strArr of type String[]\n/tmp/tmpjb6bn8ab.java:20: error: variable s is already\
    \ defined in method solve(String)\n        strArr = strArr.stream().map( s ->\
    \ {\n                                      ^\n2 errors\n"
  stdout: ''
  timestamp: 1660011165
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n       if(s.length()\
    \ == 0) {\n          return s;\n       }\n       if(s.matches(\"[a-zA-Z]+\"))\
    \ {\n          return s.toLowerCase().replaceAll(\"[a-zA-Z]\", m -> Character.toUpperCase(m.charAt(0))\
    \ + m.group());\n       }\n       return s.toLowerCase().replaceAll(\"[a-zA-Z]+\"\
    , m -> m.group());\n}\n    public static void main(String[] args) {\n    assert(solve((\"\
    AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n\
    \    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0t_ywm5d.java:23: error: incompatible types: String is not a functional\
    \ interface\n          return s.toLowerCase().replaceAll(\"[a-zA-Z]\", m -> Character.toUpperCase(m.charAt(0))\
    \ + m.group());\n                                ^\n/tmp/tmp0t_ywm5d.java:25:\
    \ error: incompatible types: String is not a functional interface\n       return\
    \ s.toLowerCase().replaceAll(\"[a-zA-Z]+\", m -> m.group());\n               \
    \              ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1660011164
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        String\
    \ result = \"\";\n        for( int i = 0; i < s.length(); i++ ) {\n          \
    \  if( s.charAt( i ) >  122 && s.charAt( i ) <  91 ) {\n                result\
    \ += s.substring( i, i + 1 ) + s.substring( i + 1, i + 2 );\n                i\
    \ += 2;\n            }\n            if( s.charAt( i ) >  61 && s.charAt( i ) <\
    \  96 ) {\n                result += s.substring( i, i + 1 ) + s.substring( i\
    \ + 1, i + 2 );\n                i += 2;\n            }\n            result +=\
    \ s.charAt( i );\n        }\n        return result;\n}\n    public static void\
    \ main(String[] args) {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n \
    \   assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"\
    AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"\
    #AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"\
    2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"\
    #ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpypu4wr3_.java:34)\n"
  stdout: ''
  timestamp: 1660011165
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        char[]\
    \ cs = s.toCharArray();\n        Arrays.stream(cs).map(c -> {\n            if(c>='a'\
    \ && c<='z'){\n                c = ((c-'a')+26);\n            }else if(c>='A'\
    \ && c<='Z'){\n                c = ((c-'A')+26);\n            }\n            return\
    \ c;\n        }).forEach(c -> {\n            c = (char)c;\n            if(c>='a'\
    \ && c<='z'){\n                c = ((c-'a')+26);\n            }else if(c>='A'\
    \ && c<='Z'){\n                c = ((c-'A')+26);\n            }\n        });\n\
    \        return new String(cs);\n}\n    public static void main(String[] args)\
    \ {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\"\
    )).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"\
    #a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\"\
    )));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n    assert(solve((\"\
    #$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\")).equals((\"#CCC\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzdzgr4xq.java:20: error: no suitable method found for stream(char[])\n\
    \        Arrays.stream(cs).map(c -> {\n              ^\n    method Arrays.<T#1>stream(T#1[])\
    \ is not applicable\n      (inference variable T#1 has incompatible bounds\n \
    \       equality constraints: char\n        lower bounds: Object)\n    method\
    \ Arrays.<T#2>stream(T#2[],int,int) is not applicable\n      (cannot infer type-variable(s)\
    \ T#2\n        (actual and formal argument lists differ in length))\n    method\
    \ Arrays.stream(int[]) is not applicable\n      (argument mismatch; char[] cannot\
    \ be converted to int[])\n    method Arrays.stream(long[]) is not applicable\n\
    \      (argument mismatch; char[] cannot be converted to long[])\n    method Arrays.stream(double[])\
    \ is not applicable\n      (argument mismatch; char[] cannot be converted to double[])\n\
    \  where T#1,T#2 are type-variables:\n    T#1 extends Object declared in method\
    \ <T#1>stream(T#1[])\n    T#2 extends Object declared in method <T#2>stream(T#2[],int,int)\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1660011165
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        char[]\
    \ ch = new char[s.length()];\n        for (int i = 0; i < s.length(); i++) {\n\
    \            ch[i] = s.charAt(i);\n        }\n        Arrays.sort(ch);\n     \
    \   String res = \"\";\n        for (int i = 0; i < ch.length; i++) {\n      \
    \      if (Character.isLetter(ch[i])) {\n                String upperCase = new\
    \ StringBuilder(ch[i]).reverse().toString();\n                String lowerCase\
    \ = new StringBuilder(ch[i].toLowerCase()).reverse().toString();\n           \
    \     String mixedCase = new StringBuilder(ch[i].toUpperCase()).reverse().toString();\n\
    \                res = res + lowerCase;\n                if (upperCase.equals(mixedCase))\
    \ {\n                    res = res + upperCase;\n                }\n         \
    \   } else {\n                res = res + ch[i];\n            }\n        }\n \
    \       System.out.println(res);\n        return res;\n}\n    public static void\
    \ main(String[] args) {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n \
    \   assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"\
    AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"\
    #AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"\
    2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"\
    #ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp22x76ran.java:28: error: char cannot be dereferenced\n        \
    \        String lowerCase = new StringBuilder(ch[i].toLowerCase()).reverse().toString();\n\
    \                                                          ^\n/tmp/tmp22x76ran.java:29:\
    \ error: char cannot be dereferenced\n                String mixedCase = new StringBuilder(ch[i].toUpperCase()).reverse().toString();\n\
    \                                                          ^\n2 errors\n"
  stdout: ''
  timestamp: 1660011165
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        char c;\n\
    \        char[] arr = s.toCharArray();\n        StringBuilder sb = new StringBuilder();\n\
    \        boolean upper = false;\n        boolean isFirstLetter = true;\n     \
    \   for(int i = 0; i < arr.length; i++) {\n            if(Character.isLetter(arr[i]))\
    \ {\n                upper = !upper;\n            }\n            if(upper) {\n\
    \                c = Character.toUpperCase(arr[i]);\n            } else {\n  \
    \              c = arr[i];\n            }\n            if(isFirstLetter) {\n \
    \               sb.append(c);\n                isFirstLetter = false;\n      \
    \      } else {\n                sb.append(Character.toLowerCase(c));\n      \
    \      }\n        }\n        return sb.toString();\n}\n    public static void\
    \ main(String[] args) {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n \
    \   assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"\
    AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"\
    #AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"\
    2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"\
    #ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpj7tc11x0.java:43)\n"
  stdout: ''
  timestamp: 1660011165
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        Set<Character>\
    \ letters = new HashSet<Character>(Arrays.asList('a', 'b', 'c', 'd', 'e', 'f',\
    \ 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v',\
    \ 'w', 'x', 'y', 'z'));\n        char[] newString = new char[s.length()];\n  \
    \      int i = 0;\n        for (char c : s.toCharArray()) {\n            if (letters.contains(c))\
    \ {\n                newString[i] = (char) (letters.indexOf(c) + 32);\n      \
    \      } else {\n                newString[i] = c;\n            }\n          \
    \  ++i;\n        }\n        String newString2 = new String(newString);\n     \
    \   return newString2.replaceAll(\"[0-9]\", \"\");\n}\n    public static void\
    \ main(String[] args) {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n \
    \   assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"\
    AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"\
    #AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"\
    2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"\
    #ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp38ps__mu.java:24: error: cannot find symbol\n                newString[i]\
    \ = (char) (letters.indexOf(c) + 32);\n                                      \
    \        ^\n  symbol:   method indexOf(char)\n  location: variable letters of\
    \ type Set<Character>\n1 error\n"
  stdout: ''
  timestamp: 1660011165
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        List<String>\
    \ str = new ArrayList<>();\n        String result = \"\";\n        for (int i\
    \ = 0; i < s.length(); i++) {\n            if (s.charAt(i) > 'z') {\n        \
    \        str.add((char) (s.charAt(i) - 32));\n            } else {\n         \
    \       str.add(s.charAt(i));\n            }\n        }\n        Collections.reverse(str);\n\
    \        for (String str2 : str) {\n            result += str2;\n        }\n \
    \       return result;\n}\n    public static void main(String[] args) {\n    assert(solve((\"\
    AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n\
    \    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpe0b9d4hq.java:23: error: incompatible types: char cannot be converted\
    \ to String\n                str.add((char) (s.charAt(i) - 32));\n           \
    \             ^\n/tmp/tmpe0b9d4hq.java:25: error: incompatible types: char cannot\
    \ be converted to String\n                str.add(s.charAt(i));\n            \
    \                    ^\nNote: Some messages have been simplified; recompile with\
    \ -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1660011165
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        StringBuilder\
    \ sb = new StringBuilder();\n        for(int i = 0; i < s.length(); i++){\n  \
    \          char c = s.charAt(i);\n            if (isLetter(c)) {\n           \
    \     if (Character.toLowerCase(c) == c) {\n                    sb.append(Character.toUpperCase(c));\n\
    \                } else {\n                    sb.append(Character.toLowerCase(c));\n\
    \                }\n            } else {\n                sb.append(c);\n    \
    \        }\n        }\n        return sb.toString();\n}\n    public static void\
    \ main(String[] args) {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n \
    \   assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"\
    AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"\
    #AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"\
    2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"\
    #ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnvpkl5r_.java:22: error: cannot find symbol\n            if (isLetter(c))\
    \ {\n                ^\n  symbol:   method isLetter(char)\n  location: class Problem\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011165
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        char[]\
    \ ch = new char[s.length()];\n        for (int i = 0; i < s.length(); i++) {\n\
    \            ch[i] = s.charAt(i);\n        }\n        Map<Character, Character>\
    \ reverseMap = new HashMap<>();\n        for (char c: ch) {\n            reverseMap.put(c,\
    \ c);\n        }\n        for (char c: ch) {\n            if (Character.isLetter(c))\
    \ {\n                char lower = Character.toLowerCase(c);\n                char\
    \ upper = Character.toUpperCase(c);\n                if (reverseMap.containsKey(lower))\
    \ {\n                    reverseMap.put(upper, reverseMap.get(lower));\n     \
    \               reverseMap.remove(lower);\n                }\n               \
    \ if (reverseMap.containsKey(upper)) {\n                    reverseMap.put(lower,\
    \ reverseMap.get(upper));\n                    reverseMap.remove(upper);\n   \
    \             }\n            }\n        }\n        StringBuilder sb = new StringBuilder();\n\
    \        for (Map.Entry<Character, Character> e: reverseMap.entrySet()) {\n  \
    \          sb.append(e.getValue());\n            sb.append(e.getKey());\n    \
    \    }\n        return sb.toString();\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpa05kfqg0.java:49)\n"
  stdout: ''
  timestamp: 1660011165
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        StringBuilder\
    \ reversedString = new StringBuilder();\n        for (int i = 0; i < s.length();\
    \ i++) {\n            char character = s.charAt(i);\n            int upperCaseOrLowerCase\
    \ = (int) Character.toUpperCase(character);\n            if (upperCaseOrLowerCase\
    \ == Character.toLowerCase(character)) {\n                reversedString.append(upperCaseOrLowerCase);\n\
    \            } else {\n                reversedString.append(character);\n   \
    \         }\n        }\n        return reversedString.toString();\n}\n    public\
    \ static void main(String[] args) {\n    assert(solve((\"AsDf\")).equals((\"aSdF\"\
    )));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpifjx2zam.java:32)\n"
  stdout: ''
  timestamp: 1660011165
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        if(s.length()\
    \ > 0) {\n            char[] chars = s.toCharArray();\n            Arrays.stream(chars).filter(x\
    \ -> x == ' ').forEach(x -> {\n                char[] arr = new char[chars.length];\n\
    \                for(int i = 0; i < chars.length; i++) {\n                   \
    \ arr[i] = chars[i].toUpperCase();\n                    if(i != chars.length -\
    \ 1) {\n                        arr[i+1] = chars[i].toLowerCase();\n         \
    \           }\n                }\n                s = new String(arr);\n     \
    \       });\n            s = new String(Arrays.copyOfRange(s.toCharArray(), 0,\
    \ s.length()));\n        }\n        return s;\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6zj7lfjn.java:21: error: no suitable method found for stream(char[])\n\
    \            Arrays.stream(chars).filter(x -> x == ' ').forEach(x -> {\n     \
    \             ^\n    method Arrays.<T#1>stream(T#1[]) is not applicable\n    \
    \  (inference variable T#1 has incompatible bounds\n        equality constraints:\
    \ char\n        lower bounds: Object)\n    method Arrays.<T#2>stream(T#2[],int,int)\
    \ is not applicable\n      (cannot infer type-variable(s) T#2\n        (actual\
    \ and formal argument lists differ in length))\n    method Arrays.stream(int[])\
    \ is not applicable\n      (argument mismatch; char[] cannot be converted to int[])\n\
    \    method Arrays.stream(long[]) is not applicable\n      (argument mismatch;\
    \ char[] cannot be converted to long[])\n    method Arrays.stream(double[]) is\
    \ not applicable\n      (argument mismatch; char[] cannot be converted to double[])\n\
    \  where T#1,T#2 are type-variables:\n    T#1 extends Object declared in method\
    \ <T#1>stream(T#1[])\n    T#2 extends Object declared in method <T#2>stream(T#2[],int,int)\n\
    /tmp/tmp6zj7lfjn.java:24: error: char cannot be dereferenced\n               \
    \     arr[i] = chars[i].toUpperCase();\n                                     ^\n\
    /tmp/tmp6zj7lfjn.java:26: error: char cannot be dereferenced\n               \
    \         arr[i+1] = chars[i].toLowerCase();\n                               \
    \            ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n3 errors\n"
  stdout: ''
  timestamp: 1660011165
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        if (s.isEmpty())\
    \ {\n            return \"\";\n        }\n        int len = s.length();\n    \
    \    char[] ch = s.toCharArray();\n        for (int i = 0; i < len; i++) {\n \
    \           if (Character.isLetter(ch[i])) {\n                String result =\
    \ \"\";\n                for (int j = i; j < len; j++) {\n                   \
    \ char t = ch[j];\n                    if (Character.isLowerCase(t)) {\n     \
    \                   result += Character.toUpperCase(t);\n                    }\
    \ else {\n                        result += t;\n                    }\n      \
    \          }\n                ch[i] = result;\n            } else {\n        \
    \        String result = \"\";\n                for (int j = i; j < len; j++)\
    \ {\n                    char t = ch[j];\n                    result += t;\n \
    \               }\n                ch[i] = result;\n            }\n        }\n\
    \        StringBuilder builder = new StringBuilder();\n        for (int i = 0;\
    \ i < len; i++) {\n            builder.append(ch[i]);\n        }\n        return\
    \ builder.toString();\n}\n    public static void main(String[] args) {\n    assert(solve((\"\
    AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n\
    \    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8m3ky054.java:35: error: incompatible types: String cannot be converted\
    \ to char\n                ch[i] = result;\n                        ^\n/tmp/tmp8m3ky054.java:42:\
    \ error: incompatible types: String cannot be converted to char\n            \
    \    ch[i] = result;\n                        ^\n2 errors\n"
  stdout: ''
  timestamp: 1660011165
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        char arr[]\
    \ = s.toCharArray();\n        String str = \"\";\n\n        for(int i=0; i<arr.length;\
    \ i++) {\n            if(Character.isLetter(arr[i])) {\n                int len\
    \ = Character.toUpperCase(arr[i]) - Character.toLowerCase(arr[i]);\n         \
    \       str = str.substring(0, i) + String.valueOf(len) + str.substring(i+1);\n\
    \            } else {\n                str = str.substring(0, i) + arr[i] + str.substring(i+1);\n\
    \            }\n        }\n        return str;\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StringIndexOutOfBoundsException:\
    \ begin 1, end 0, length 0\n\tat java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\
    \tat java.base/java.lang.String.substring(String.java:2707)\n\tat java.base/java.lang.String.substring(String.java:2680)\n\
    \tat Problem.solve(tmps8ouk0wm.java:25)\n\tat Problem.main(tmps8ouk0wm.java:33)\n"
  stdout: ''
  timestamp: 1660011165
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        String[]\
    \ arr = s.split(\"\");\n        int len = arr.length;\n        Arrays.fill(arr,\
    \ Character.toLowerCase(arr[0]));\n        Arrays.fill(arr, Character.toUpperCase(arr[0]));\n\
    \        return len == 0 ? s : arr.reverse().toString();\n}\n    public static\
    \ void main(String[] args) {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n\
    \    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"\
    AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"\
    #AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"\
    2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"\
    #ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpd8r79jlj.java:21: error: no suitable method found for toLowerCase(String)\n\
    \        Arrays.fill(arr, Character.toLowerCase(arr[0]));\n                  \
    \                ^\n    method Character.toLowerCase(char) is not applicable\n\
    \      (argument mismatch; String cannot be converted to char)\n    method Character.toLowerCase(int)\
    \ is not applicable\n      (argument mismatch; String cannot be converted to int)\n\
    /tmp/tmpd8r79jlj.java:22: error: no suitable method found for toUpperCase(String)\n\
    \        Arrays.fill(arr, Character.toUpperCase(arr[0]));\n                  \
    \                ^\n    method Character.toUpperCase(char) is not applicable\n\
    \      (argument mismatch; String cannot be converted to char)\n    method Character.toUpperCase(int)\
    \ is not applicable\n      (argument mismatch; String cannot be converted to int)\n\
    /tmp/tmpd8r79jlj.java:23: error: cannot find symbol\n        return len == 0 ?\
    \ s : arr.reverse().toString();\n                                 ^\n  symbol:\
    \   method reverse()\n  location: variable arr of type String[]\n3 errors\n"
  stdout: ''
  timestamp: 1660011165
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        if (s.isEmpty())\
    \ return \"\";\n\n        HashMap<Character, Character> map = new HashMap<>();\n\
    \        map.put('a','A');\n        map.put('b','B');\n        map.put('c','C');\n\
    \        map.put('d','D');\n        map.put('e','E');\n        map.put('f','F');\n\
    \        map.put('g','G');\n        map.put('h','H');\n        map.put('i','I');\n\
    \        map.put('j','J');\n        map.put('k','K');\n        map.put('l','L');\n\
    \        map.put('m','M');\n        map.put('n','N');\n        map.put('o','O');\n\
    \        map.put('p','P');\n        map.put('q','Q');\n        map.put('r','R');\n\
    \        map.put('s','S');\n        map.put('t','T');\n        map.put('u','U');\n\
    \        map.put('v','V');\n        map.put('w','W');\n        map.put('x','X');\n\
    \        map.put('y','Y');\n        map.put('z','Z');\n        map.put('.','.');\n\
    \        map.put(',',',');\n        map.put('?','?');\n\n        char[] chars\
    \ = s.toCharArray();\n        for (int i = 0; i < chars.length; ++i) {\n     \
    \       if (map.containsKey(chars[i])) {\n                chars[i] = map.get(chars[i]);\n\
    \            }\n        }\n        return String.valueOf(chars);\n}\n    public\
    \ static void main(String[] args) {\n    assert(solve((\"AsDf\")).equals((\"aSdF\"\
    )));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp655hh6oh.java:61)\n"
  stdout: ''
  timestamp: 1660011166
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        ArrayList<Character>\
    \ list = new ArrayList<>();\n        for(int i = 0 ; i < s.length() ; i++){\n\
    \            if(s.charAt(i) >= 'a' && s.charAt(i) <= 'z'){\n                list.add(s.charAt(i));\n\
    \            }\n        }\n        if(list.size() == 0){\n            return s;\n\
    \        }\n        StringBuilder sb = new StringBuilder(s);\n        char []\
    \ chars = new char[s.length()];\n        int count = 0;\n        for(int i = 0\
    \ ; i < s.length() ; i++){\n            if(s.charAt(i) >= 'a' && s.charAt(i) <=\
    \ 'z'){\n                chars[count] = s.charAt(i);\n                count++;\n\
    \            }\n        }\n        for(int j = 0 ; j < count ; j++){\n       \
    \     Character curr = chars[j];\n            if(curr == 'A'){\n             \
    \   char temp = sb.get(j+1);\n                sb.delete(j+1, j+2);\n         \
    \       sb.insert(j+1, temp);\n            }else if(curr == 'a'){\n          \
    \      char temp = sb.get(j+1);\n                sb.delete(j+1, j+2);\n      \
    \          sb.insert(j+1, temp);\n            }else if(curr == 'B'){\n       \
    \         char temp = sb.get(j+1);\n                sb.delete(j+1, j+2);\n   \
    \             sb.insert(j+1, temp);\n            }else if(curr == 'b'){\n    \
    \            char temp = sb.get(j+1);\n                sb.delete(j+1, j+2);\n\
    \                sb.insert(j+1, temp);\n            }else if(curr == 'C'){\n \
    \               char temp = sb.get(j+1);\n                sb.delete(j+1, j+2);\n\
    \                sb.insert(j+1, temp);\n            }else if(curr == 'c'){\n \
    \               char temp = sb.get(j+1);\n                sb.delete(j+1, j+2);\n\
    \                sb.insert(j+1, temp);\n            }else if(curr == 'D'){\n \
    \               char temp = sb.get(j+1);\n                sb.delete(j+1, j+2);\n\
    \                sb.insert(j+1, temp);\n            }else if(curr == 'd'){\n \
    \               char temp = sb.get(j+1);\n                sb.delete(j+1, j+2);\n\
    \                sb.insert(j+1, temp);\n            }else if(curr == 'E'){\n \
    \               char temp = sb.get(j+1);\n                sb.delete(j+1, j+2);\n\
    \                sb.insert(j+1, temp);\n            }else if(curr == 'e'){\n \
    \               char temp = sb.get(j+1);\n                sb.delete(j+1, j+2);\n\
    \                sb.insert(j+1, temp);\n            }else if(curr == 'F'){\n \
    \               char temp = sb.get(j+\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp640r45t0.java:81: error: illegal start of expression\n}\n^\n/tmp/tmp640r45t0.java:82:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n    ^\n2 errors\n"
  stdout: ''
  timestamp: 1660011165
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        // Write\
    \ your code here\n        StringBuilder builder = new StringBuilder();\n     \
    \   for(char c : s.toCharArray()) {\n            if(Character.isLetter(c)) {\n\
    \                builder.append(Character.toUpperCase(c));\n            } \n \
    \           else {\n                builder.append(c);\n            }\n      \
    \  }\n        return builder.toString();\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_bd964up.java:32)\n"
  stdout: ''
  timestamp: 1660011166
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        \n   \
    \     if(s.isEmpty()) {\n            return \"\";\n        }\n        \n     \
    \   Map<Character, Boolean> map = new HashMap<>();\n        for(int i = 0; i <\
    \ s.length(); i++) {\n            if(!map.containsKey(s.charAt(i))) {\n      \
    \          map.put(s.charAt(i), true);\n            } else {\n               \
    \ map.put(s.charAt(i), !map.get(s.charAt(i))); \n            }\n        }\n  \
    \      \n        StringBuilder builder = new StringBuilder();\n        for(Map.Entry<Character,\
    \ Boolean> entry : map.entrySet()) {\n            if(entry.getValue()) {\n   \
    \             builder.append(entry.getKey());\n            }\n        }\n    \
    \    return builder.toString();\n}\n    public static void main(String[] args)\
    \ {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\"\
    )).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"\
    #a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\"\
    )));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n    assert(solve((\"\
    #$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\")).equals((\"#CCC\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp01tp01xt.java:42)\n"
  stdout: ''
  timestamp: 1660011166
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        StringBuilder\
    \ builder = new StringBuilder();\n        Set<Character> set = new HashSet<Character>();\n\
    \        StringBuilder revStr = new StringBuilder();\n        for(int i = 0; i\
    \ < s.length(); i++) {\n            char c = s.charAt(i);\n            if(c ==\
    \ Character.toUpperCase(c)) {\n                c = Character.toLowerCase(c);\n\
    \            } else {\n                c = Character.toUpperCase(c);\n       \
    \     }\n            set.add(s);\n            if(set.contains(c)) {\n        \
    \        revStr.append(c);\n            }\n            builder.append(c);\n  \
    \      }\n        if(!revStr.equals(builder)) {\n            builder.append(revStr.reverse());\n\
    \        }\n        return builder.toString();\n}\n    public static void main(String[]\
    \ args) {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"\
    1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n\
    \    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\"\
    )).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n\
    \    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\"\
    )).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuq7mmouu.java:29: error: incompatible types: String cannot be converted\
    \ to Character\n            set.add(s);\n                    ^\nNote: Some messages\
    \ have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660011166
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        // Write\
    \ your code here\n        String res = \"\";\n        for (Character c : s.toCharArray()){\n\
    \            if (Character.isLetter(c)) {\n                String toUpper = Character.toUpperCase(c);\n\
    \                String toLower = Character.toLowerCase(c);\n                String\
    \ temp = toUpper + toLower;\n                res = temp;\n            } else {\n\
    \                res = String.valueOf(c);\n            }\n        }\n        return\
    \ res;\n}\n    public static void main(String[] args) {\n    assert(solve((\"\
    AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n\
    \    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptrtta_7g.java:23: error: incompatible types: char cannot be converted\
    \ to String\n                String toUpper = Character.toUpperCase(c);\n    \
    \                                                  ^\n/tmp/tmptrtta_7g.java:24:\
    \ error: incompatible types: char cannot be converted to String\n            \
    \    String toLower = Character.toLowerCase(c);\n                            \
    \                          ^\n2 errors\n"
  stdout: ''
  timestamp: 1660011166
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        String\
    \ out = \"\";\n        for (int i = 0; i < s.length(); i++) {\n            char\
    \ c = s.charAt(i);\n            if (Character.isLetter(c))\n                out\
    \ += Character.toUpperCase(c);\n            else\n                out += c;\n\
    \        }\n        return out;\n}\n    public static void main(String[] args)\
    \ {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n    assert(solve((\"1234\"\
    )).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"\
    #a@C\")).equals((\"#A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\"\
    )));\n    assert(solve((\"#6@2\")).equals((\"2@6#\")));\n    assert(solve((\"\
    #$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"#ccc\")).equals((\"#CCC\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_o44e0f5.java:30)\n"
  stdout: ''
  timestamp: 1660011166
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        char[]\
    \ chars = s.toCharArray();\n        char[] charsReverse = new char[chars.length];\n\
    \        for (char c : chars) {\n            if (Character.isLetter(c)) {\n  \
    \              charsReverse[chars.length - 1 - chars.indexOf(c)] = c;\n      \
    \      } else {\n                charsReverse[chars.length - 1 - i] = c;\n   \
    \         }\n        }\n        return new String(charsReverse);\n}\n    public\
    \ static void main(String[] args) {\n    assert(solve((\"AsDf\")).equals((\"aSdF\"\
    )));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpeocrx3gk.java:23: error: cannot find symbol\n                charsReverse[chars.length\
    \ - 1 - chars.indexOf(c)] = c;\n                                             \
    \        ^\n  symbol:   method indexOf(char)\n  location: variable chars of type\
    \ char[]\n/tmp/tmpeocrx3gk.java:25: error: cannot find symbol\n              \
    \  charsReverse[chars.length - 1 - i] = c;\n                                 \
    \               ^\n  symbol:   variable i\n  location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660011166
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        // Write\
    \ your code here\n        \n        if(s.contains(\"a\")){\n            \n   \
    \     }else if(s.contains(\"b\")){\n            \n        }else if(s.contains(\"\
    c\")){\n            \n        }else if(s.contains(\"d\")){\n            \n   \
    \     }else if(s.contains(\"e\")){\n            \n        }else if(s.contains(\"\
    f\")){\n            \n        }else if(s.contains(\"g\")){\n            \n   \
    \     }else if(s.contains(\"h\")){\n            \n        }else if(s.contains(\"\
    i\")){\n            \n        }else if(s.contains(\"j\")){\n            \n   \
    \     }else if(s.contains(\"k\")){\n            \n        }else if(s.contains(\"\
    l\")){\n            \n        }else if(s.contains(\"m\")){\n            \n   \
    \     }else if(s.contains(\"n\")){\n            \n        }else if(s.contains(\"\
    o\")){\n            \n        }else if(s.contains(\"p\")){\n            \n   \
    \     }else if(s.contains(\"q\")){\n            \n        }else if(s.contains(\"\
    r\")){\n            \n        }else if(s.contains(\"s\")){\n            \n   \
    \     }else if(s.contains(\"t\")){\n            \n        }else if(s.contains(\"\
    u\")){\n            \n        }else if(s.contains(\"v\")){\n            \n   \
    \     }else if(s.contains(\"w\")){\n            \n        }else if(s.contains(\"\
    x\")){\n            \n        }else if(s.contains(\"y\")){\n            \n   \
    \     }else if(s.contains(\"z\")){\n            \n        }\n        return \"\
    \";\n}\n    public static void main(String[] args) {\n    assert(solve((\"AsDf\"\
    )).equals((\"aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n \
    \   assert(solve((\"ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"\
    #A@c\")));\n    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3zuja_ka.java:77)\n"
  stdout: ''
  timestamp: 1660011166
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        try{\n\
    \            s=s.toLowerCase(); \n            return s.replaceAll(\"(?!^[a-z])(?=[A-Z])|(?<=[a-z])(?![A-Z])\"\
    , \"$0\");\n        }catch(Exception e){\n            return s;\n        }\n}\n\
    \    public static void main(String[] args) {\n    assert(solve((\"AsDf\")).equals((\"\
    aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
    ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n\
    \    assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
    #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\"\
    )));\n    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6o70zvuk.java:27)\n"
  stdout: ''
  timestamp: 1660011166
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a string s.\n    // if s[i] is a letter,\
    \ reverse its case from lower to upper or vise versa, \n    // otherwise keep\
    \ it as it is.\n    // If the string contains no letters, reverse the string.\n\
    \    // The function should return the resulted string.\n    // Examples\n   \
    \ // solve(\"1234\") = \"4321\"\n    // solve(\"ab\") = \"AB\"\n    // solve(\"\
    #a@C\") = \"#A@c\"\n    public static String solve(String s) {\n        \n   \
    \     s = s.toUpperCase();\n        \n        if (s.contains(\"#\")) s = s.replace(\"\
    #\", \"\");\n        if (s.contains(\"@\")) s = s.replace(\"@\", \"\");\n    \
    \    if (s.contains(\":\")) s = s.replace(\":\", \"\");\n        \n        char[]\
    \ ch = s.toCharArray();\n        \n        for (int i = 0; i < ch.length; i++)\
    \ {\n            \n            if (Character.isLetter(ch[i]))\n              \
    \  ch[i] = Character.toUpperCase(ch[i]);\n            else\n                ch[i]\
    \ = Character.toLowerCase(ch[i]);\n            \n        }\n        \n       \
    \ StringBuilder sb = new StringBuilder();\n        \n        for (int i = 0; i\
    \ < ch.length; i++) {\n            \n            sb.append(ch[i]);\n         \
    \   \n        }\n        \n        return sb.toString();\n}\n    public static\
    \ void main(String[] args) {\n    assert(solve((\"AsDf\")).equals((\"aSdF\")));\n\
    \    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"ab\")).equals((\"\
    AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n    assert(solve((\"\
    #AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"#6@2\")).equals((\"\
    2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n    assert(solve((\"\
    #ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpej9_thb5.java:48)\n"
  stdout: ''
  timestamp: 1660011166
