name: HumanEval_100_make_a_pile
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Given a positive integer n, you have to make a pile of n\
  \ levels of stones.\n    // The first level has n stones.\n    // The number of\
  \ stones in the next level is:\n    // - the next odd number if n is odd.\n    //\
  \ - the next even number if n is even.\n    // Return the number of stones in each\
  \ level in a list, where element at index\n    // i represents the number of stones\
  \ in the level (i+1).\n    // Examples:\n    // >>> make_a_pile(3)\n    // [3, 5,\
  \ 7]\n    public static ArrayList<Integer> makeAPile(int n) {\n"
tests: "return new ArrayList<Integer>(Arrays.asList());\n    }\n    public static\
  \ void main(String[] args) {\n    assert(makeAPile((3)).equals((new ArrayList<Integer>(Arrays.asList((int)3,\
  \ (int)5, (int)7)))));\n    assert(makeAPile((4)).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
  \ (int)6, (int)8, (int)10)))));\n    assert(makeAPile((5)).equals((new ArrayList<Integer>(Arrays.asList((int)5,\
  \ (int)7, (int)9, (int)11, (int)13)))));\n    assert(makeAPile((6)).equals((new\
  \ ArrayList<Integer>(Arrays.asList((int)6, (int)8, (int)10, (int)12, (int)14, (int)16)))));\n\
  \    assert(makeAPile((8)).equals((new ArrayList<Integer>(Arrays.asList((int)8,\
  \ (int)10, (int)12, (int)14, (int)16, (int)18, (int)20, (int)22)))));\n    }\n\n\
  }\n"
completions: []
stop_tokens:
- "    }\n    //"
- "    }\n    p"
- "    }\n}"
- "\n    }\n"
