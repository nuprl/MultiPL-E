language: java
name: HumanEval_56_correct_bracketing
results:
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        boolean correct = false;\n        StringBuilder sb = new\
    \ StringBuilder(brackets);\n        for (int i = 1; i < brackets.length(); i++)\
    \ {\n            if (brackets.charAt(i) == '<') {\n                if (brackets.charAt(i\
    \ - 1) == '<') {\n                    sb.deleteCharAt(i--);\n                }\n\
    \                else {\n                    sb.deleteCharAt(i);\n           \
    \     }\n            }\n        }\n        String str = sb.toString();\n     \
    \   str = str.substring(1);\n        if (str.length() > 0) {\n            correct\
    \ = str.equals(brackets);\n        }\n        return correct;\n}\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1yp5ky6c.java:40)\n"
  stdout: ''
  timestamp: 1660011763
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        int openingBrackets = 0;\n        int closingBrackets =\
    \ 0;\n        for (int i = 0; i < brackets.length(); i++) {\n            char\
    \ c = brackets.charAt(i);\n            if (c == '<') {\n                openingBrackets++;\n\
    \            } else if (c == '>') {\n                closingBrackets++;\n    \
    \        }\n        }\n        return openingBrackets == closingBrackets;\n}\n\
    \    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppztlj142.java:38)\n"
  stdout: ''
  timestamp: 1660011763
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        return brackets.split(\"<\").length == brackets.split(\"\
    >\").length;\n}\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpq0294f21.java:23)\n"
  stdout: ''
  timestamp: 1660011763
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        return brackets.replaceAll(\"(?s)<[^<>]*>\", \"\").length()\
    \ == brackets.length();\n}\n    public static void main(String[] args) {\n   \
    \ assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfyjrdolf.java:23)\n"
  stdout: ''
  timestamp: 1660011763
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        if (brackets.contains(\"<\") || brackets.contains(\">\"\
    )) {\n            Set<String> seen = new HashSet<>();\n            String s =\
    \ brackets;\n            StringBuilder builder = new StringBuilder();\n      \
    \      int left = 0;\n            int right = 0;\n            while (left < s.length()\
    \ && right < s.length) {\n                int open = s.indexOf(\"<\", left);\n\
    \                int close = s.indexOf(\">\", right);\n                if (open\
    \ != -1 && close != -1) {\n                    if (close == open + 1) {\n    \
    \                    builder.append(s.substring(left, open));\n              \
    \          builder.append(s.substring(open + 1, close));\n                   \
    \     left.set(open + 1);\n                        right.set(close + 1);\n   \
    \                     left += 1;\n                        right += 1;\n      \
    \              } else if (close < open) {\n                        builder.append(s.substring(left,\
    \ open));\n                        builder.append(s.substring(open + 1, close));\n\
    \                        left.set(open + 1);\n                        right +=\
    \ 1;\n                    } else {\n                        builder.append(s.substring(left,\
    \ open));\n                        builder.append(s.substring(open + 1, close));\n\
    \                        left.set(open + 1);\n                        right.set(close\
    \ + 1);\n                    }\n                } else if (close < left) {\n \
    \                   builder.append(s.substring(left, close));\n              \
    \      left.set(close + 1);\n                    right += 1;\n               \
    \ } else {\n                    builder.append(s.substring(left, close));\n  \
    \                  left.set(close + 1);\n                    right.set(close +\
    \ 1);\n                }\n            }\n            if (left != s.length()) {\n\
    \                builder.append(s.substring(left));\n                builder.append(s.substring(left\
    \ + 1, s.length()));\n            }\n            return builder.toString().equals(brackets);\n\
    \        } else {\n            return false;\n        }\n}\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp75s2ze_c.java:26: error: cannot find symbol\n            while\
    \ (left < s.length() && right < s.length) {\n                                \
    \                 ^\n  symbol:   variable length\n  location: variable s of type\
    \ String\n/tmp/tmp75s2ze_c.java:33: error: int cannot be dereferenced\n      \
    \                  left.set(open + 1);\n                            ^\n/tmp/tmp75s2ze_c.java:34:\
    \ error: int cannot be dereferenced\n                        right.set(close +\
    \ 1);\n                             ^\n/tmp/tmp75s2ze_c.java:40: error: int cannot\
    \ be dereferenced\n                        left.set(open + 1);\n             \
    \               ^\n/tmp/tmp75s2ze_c.java:45: error: int cannot be dereferenced\n\
    \                        left.set(open + 1);\n                            ^\n\
    /tmp/tmp75s2ze_c.java:46: error: int cannot be dereferenced\n                \
    \        right.set(close + 1);\n                             ^\n/tmp/tmp75s2ze_c.java:50:\
    \ error: int cannot be dereferenced\n                    left.set(close + 1);\n\
    \                        ^\n/tmp/tmp75s2ze_c.java:54: error: int cannot be dereferenced\n\
    \                    left.set(close + 1);\n                        ^\n/tmp/tmp75s2ze_c.java:55:\
    \ error: int cannot be dereferenced\n                    right.set(close + 1);\n\
    \                         ^\n9 errors\n"
  stdout: ''
  timestamp: 1660011763
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        List<Character> openingBrackets = Arrays.asList('>', '<',\
    \ '(');\n        List<Character> closingBrackets = Arrays.asList('>', '>', '(');\n\
    \n        // return true if every opening bracket has a corresponding closing\
    \ bracket.\n        Set<Character> openingBracketSet = new HashSet<>();\n    \
    \    openingBracketSet.retainAll(openingBrackets);\n        if (openingBracketSet.size()\
    \ != openingBrackets.size())\n            return false;\n\n        // return true\
    \ if every closing bracket has a corresponding opening bracket.\n        Set<Character>\
    \ closingBracketSet = new HashSet<>();\n        closingBracketSet.retainAll(closingBrackets);\n\
    \        if (closingBracketSet.size() != closingBrackets.size())\n           \
    \ return false;\n\n        // return true if every opening bracket has a corresponding\
    \ closing bracket.\n        return brackets.chars().allMatch(c -> openingBracketSet.contains(c)\
    \ && closingBracketSet.contains(c));\n}\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpj64bjz52.java:39)\n"
  stdout: ''
  timestamp: 1660011763
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        String[] splitStrings = brackets.split(\"<\");\n      \
    \  return splitStrings.stream().allMatch(s -> s.equalsIgnoreCase(\"</\" + s +\
    \ \">\"));\n}\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp939cguy0.java:21: error: cannot find symbol\n        return splitStrings.stream().allMatch(s\
    \ -> s.equalsIgnoreCase(\"</\" + s + \">\"));\n                           ^\n\
    \  symbol:   method stream()\n  location: variable splitStrings of type String[]\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011762
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        boolean correct = false;\n        ArrayList openingBrackets\
    \ = new ArrayList();\n        ArrayList closingBrackets = new ArrayList();\n \
    \       int openingBracketsCount = 0;\n        int closingBracketsCount = 0;\n\
    \        int position = 0;\n        while(position < brackets.length()) {\n  \
    \          if(brackets.charAt(position) == '<') {\n                openingBrackets.add(brackets.charAt(position));\n\
    \                openingBracketsCount += 1;\n            } else {\n          \
    \      if(openingBracketsCount == 0) {\n                    correct = false;\n\
    \                    break;\n                } else {\n                    if(openingBrackets.contains(\"\
    <\")) {\n                        closingBrackets.add(brackets.charAt(position));\n\
    \                        closingBracketsCount += 1;\n                    } else\
    \ {\n                        correct = true;\n                        break;\n\
    \                    }\n                }\n            }\n            position\
    \ += 1;\n        }\n        if(openingBracketsCount != closingBracketsCount) {\n\
    \            correct = false;\n        }\n        return correct;\n}\n    public\
    \ static void main(String[] args) {\n    assert(correctBracketing((\"<>\")) ==\
    \ (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpp32yb4uz.java:52)\n"
  stdout: ''
  timestamp: 1660011763
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        List<String> list = Arrays.asList(brackets.split(\"<\"\
    ));\n        List<String> list2 = Arrays.asList(brackets.split(\">\"));\n    \
    \    list.retainAll(list2);\n        return list.isEmpty();\n}\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.UnsupportedOperationException: remove\n\
    \tat java.base/java.util.Iterator.remove(Iterator.java:102)\n\tat java.base/java.util.AbstractCollection.retainAll(AbstractCollection.java:404)\n\
    \tat Problem.correctBracketing(tmplffcymsn.java:22)\n\tat Problem.main(tmplffcymsn.java:26)\n"
  stdout: ''
  timestamp: 1660011763
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        return brackets.replaceAll(\"\\\\<\", \"\").replaceAll(\"\
    \\\\>\", \"\").replaceAll(\"\\\\{\", \"\").replaceAll(\"\\\\}\", \"\").replaceAll(\"\
    \\\\[\", \"\").replaceAll(\"\\\\]\", \"\").replaceAll(\"\\\\(\", \"\").replaceAll(\"\
    \\\\)\", \"\").replaceAll(\"\\\\,\", \"\").replaceAll(\"\\\\*\", \"\").replaceAll(\"\
    \\\\/\", \"\").replaceAll(\"\\\\%\", \"\").replaceAll(\"\\\\!\", \"\").replaceAll(\"\
    \\\\:\", \"\").replaceAll(\"\\\\;\", \"\").replaceAll(\"\\\\?\", \"\").replaceAll(\"\
    \\\\!\", \"\").replaceAll(\"\\\\.\", \"\").replaceAll(\"\\\\_\", \"\").replaceAll(\"\
    \\\\=\", \"\").replaceAll(\"\\\\!\", \"!\").equals(\"!\");\n}\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnz2s2_6i.java:23)\n"
  stdout: ''
  timestamp: 1660011763
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        // Write your code here.\n        Set<Character> openings\
    \ = new HashSet<Character>();\n        Set<Character> closings = new HashSet<Character>();\n\
    \        for(char c : brackets.toCharArray()){\n            switch(c){\n     \
    \           case '<':\n                    openings.add(c);\n                \
    \    break;\n                case '>':\n                    closings.add(c);\n\
    \                    break;\n                default:\n                    break;\n\
    \            }\n        }\n\n        return openings.size() == closings.size();\n\
    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyjhi2ogg.java:43)\n"
  stdout: ''
  timestamp: 1660011763
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        int openBrackets = 0;\n        for (int i = 0; i < brackets.length();\
    \ i++) {\n            if (brackets.charAt(i) == '<') {\n                openBrackets++;\n\
    \            }\n        }\n        for (int i = 0; i < brackets.length(); i++)\
    \ {\n            if (brackets.charAt(i) == '>') {\n                openBrackets--;\n\
    \            }\n        }\n        return openBrackets == 0;\n}\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqavrk5v7.java:39)\n"
  stdout: ''
  timestamp: 1660011763
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        StringTokenizer st = new StringTokenizer(brackets, \"<>\"\
    );\n        while (st.hasMoreTokens()) {\n            String s = st.nextToken();\n\
    \            StringBuilder sb = new StringBuilder();\n            int opening\
    \ = 0;\n            boolean found = false;\n            for (int i = 0; i < s.length();\
    \ i++) {\n                char ch = s.charAt(i);\n                if (ch == '<')\
    \ {\n                    sb.append(\"(\");\n                    opening++;\n \
    \               } else if (ch == '>') {\n                    sb.append(\")\");\n\
    \                    opening--;\n                }\n            }\n          \
    \  if (opening != 0) {\n                found = true;\n            }\n       \
    \ }\n        return !found;\n}\n    public static void main(String[] args) {\n\
    \    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp26ip_1lv.java:40: error: cannot find symbol\n        return !found;\n\
    \                ^\n  symbol:   variable found\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011763
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        String[] opening = brackets.split(\"<\");\n        String[]\
    \ closing = brackets.split(\">\");\n        List<String> openingList = new ArrayList<>(Arrays.asList(opening));\n\
    \        List<String> closingList = new ArrayList<>(Arrays.asList(closing));\n\
    \        boolean result = true;\n        for (String openingBracket : openingList)\
    \ {\n            if (openingList.indexOf(openingBracket) == closingList.indexOf(openingBracket))\
    \ {\n                result = false;\n            }\n        }\n        return\
    \ result;\n}\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpn4k0ysb9.java:37)\n"
  stdout: ''
  timestamp: 1660011763
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        char[] bracketsArray = brackets.toCharArray();\n      \
    \  Arrays.sort(bracketsArray);\n        boolean allBracketsClosed =\n        \
    \        Arrays.stream(bracketsArray)\n                        .allMatch(c ->\
    \ c == '>' || c == '<');\n\n        Arrays.sort(bracketsArray, (c1, c2) -> c1.compareTo(c2));\n\
    \        return allBracketsClosed;\n}\n    public static void main(String[] args)\
    \ {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpab6nxmxj.java:23: error: no suitable method found for stream(char[])\n\
    \                Arrays.stream(bracketsArray)\n                      ^\n    method\
    \ Arrays.<T#1>stream(T#1[]) is not applicable\n      (inference variable T#1 has\
    \ incompatible bounds\n        equality constraints: char\n        lower bounds:\
    \ Object)\n    method Arrays.<T#2>stream(T#2[],int,int) is not applicable\n  \
    \    (cannot infer type-variable(s) T#2\n        (actual and formal argument lists\
    \ differ in length))\n    method Arrays.stream(int[]) is not applicable\n    \
    \  (argument mismatch; char[] cannot be converted to int[])\n    method Arrays.stream(long[])\
    \ is not applicable\n      (argument mismatch; char[] cannot be converted to long[])\n\
    \    method Arrays.stream(double[]) is not applicable\n      (argument mismatch;\
    \ char[] cannot be converted to double[])\n  where T#1,T#2 are type-variables:\n\
    \    T#1 extends Object declared in method <T#1>stream(T#1[])\n    T#2 extends\
    \ Object declared in method <T#2>stream(T#2[],int,int)\n/tmp/tmpab6nxmxj.java:26:\
    \ error: no suitable method found for sort(char[],(c1,c2)->c[...]o(c2))\n    \
    \    Arrays.sort(bracketsArray, (c1, c2) -> c1.compareTo(c2));\n             \
    \ ^\n    method Arrays.<T#1>sort(T#1[],Comparator<? super T#1>) is not applicable\n\
    \      (inference variable T#1 has incompatible bounds\n        equality constraints:\
    \ char\n        lower bounds: Object)\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1660011763
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        // create a pair for every pair of opening brackets.\n\
    \        List<Pair<String, String>> openingBracketsPair =\n            brackets.chars().mapToObj(c\
    \ -> new Pair<String, String>(\"\", \"\" + c))\n                .collect(Collectors.toList());\n\
    \        // create a pair for every pair of closing brackets.\n        List<Pair<String,\
    \ String>> closingBracketsPair =\n            brackets.chars().mapToObj(c -> new\
    \ Pair<String, String>(\"\", \"\" + c))\n                .collect(Collectors.toList());\n\
    \        // create a stack of opening brackets, popping them off the stack until\
    \ there is nothing left.\n        Stack<String> openingBrackets = new Stack<String>();\n\
    \        while(openingBracketsPair.isEmpty() == false) {\n            String current\
    \ = openingBracketsPair.stream().map(Pair::getValue).collect(Collectors.joining());\n\
    \            if(openingBrackets.isEmpty() == true) {\n                if(openingBrackets.peek().equals(current)\
    \ == false) {\n                    return false;\n                }\n        \
    \        openingBrackets.pop();\n            }\n            else if(openingBrackets.peek().equals(current)\
    \ == false) {\n                return false;\n            }\n            else\
    \ if(openingBrackets.peek().equals(current) == true) {\n                openingBrackets.pop();\n\
    \            }\n            else {\n                throw new AssertionError();\n\
    \            }\n        }\n        // create a stack of closing brackets, popping\
    \ them off the stack until there is nothing left.\n        Stack<String> closingBrackets\
    \ = new Stack<String>();\n        while(closingBracketsPair.isEmpty() == false)\
    \ {\n            String current = closingBracketsPair.stream().map(Pair::getValue).collect(Collectors.joining());\n\
    \            if(closingBrackets.isEmpty() == true) {\n                if(closingBrackets.peek().equals(current)\
    \ == false) {\n                    return false;\n                }\n        \
    \        closingBrackets.pop();\n            }\n            else if(closingBrackets.peek().equals(current)\
    \ == false) {\n                return false;\n            }\n            else\
    \ if(closingBrackets.peek().equals(current) == true) {\n                closingBrackets.pop();\n\
    \            }\n            else {\n                throw new AssertionError();\n\
    \            }\n        }\n        // return True if every opening bracket has\
    \ a corresponding closing bracket.\n        return !openingBrackets.isEmpty()\
    \ && !closingBrackets.isEmpty();\n}\n    public static void main(String[] args)\
    \ {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb5ctxrip.java:31: error: incompatible types: unexpected instance\
    \ method getValue(int) found in unbound lookup\n            String current = openingBracketsPair.stream().map(Pair::getValue).collect(Collectors.joining());\n\
    \                                                              ^\n/tmp/tmpb5ctxrip.java:51:\
    \ error: incompatible types: unexpected instance method getValue(int) found in\
    \ unbound lookup\n            String current = closingBracketsPair.stream().map(Pair::getValue).collect(Collectors.joining());\n\
    \                                                              ^\nNote: Some messages\
    \ have been simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1660011763
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        List<String> list = Arrays.asList(brackets.split(\"<\"\
    ));\n        List<String> reversedList = list.stream().map(String::reverse).collect(Collectors.toList());\n\
    \        boolean allOpen = list.stream().allMatch(s -> s.equals(\"<\"));\n   \
    \     boolean allClosed = reversedList.stream().allMatch(s -> s.equals(\">\"));\n\
    \        return allOpen && allClosed;\n}\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcsoje1wc.java:21: error: invalid method reference\n        List<String>\
    \ reversedList = list.stream().map(String::reverse).collect(Collectors.toList());\n\
    \                                                      ^\n  cannot find symbol\n\
    \    symbol:   method reverse()\n    location: class String\n1 error\n"
  stdout: ''
  timestamp: 1660011763
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        if (brackets == null)\n            return false;\n    \
    \    int bracketIndex = brackets.length() - 1;\n        for (int i = 0; i < brackets.length();\
    \ ++i) {\n            if (brackets.charAt(i) == '<') {\n                if (bracketIndex\
    \ == 0 || bracketIndex == i) {\n                    --bracketIndex;\n        \
    \        }\n                if (brackets.charAt(i) == '>')\n                 \
    \   return false;\n            }\n        }\n        return true;\n}\n    public\
    \ static void main(String[] args) {\n    assert(correctBracketing((\"<>\")) ==\
    \ (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7ls1i16w.java:39)\n"
  stdout: ''
  timestamp: 1660011763
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        int count = 0;\n        for (int i = 0; i < brackets.length();\
    \ i++) {\n            if (brackets.charAt(i) == '<') {\n                count++;\n\
    \            } else {\n                count--;\n            }\n            if\
    \ (count < 0) {\n                return false;\n            }\n        }\n   \
    \     return true;\n}\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfvlh951r.java:40)\n"
  stdout: ''
  timestamp: 1660011763
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        String s = \"<\";\n        String p = \"<\";\n        int\
    \ count = 0;\n        for (int i = 0; i < brackets.length(); ++i) {\n        \
    \    char ch = brackets.charAt(i);\n            if (ch == '>') ++count;\n    \
    \        if (ch == '<') --count;\n            if (count < 0) return false;\n \
    \           s = s.concat(ch);\n            p = p.concat(ch);\n        }\n    \
    \    return s.equals(p);\n}\n    public static void main(String[] args) {\n  \
    \  assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphdx82mtl.java:28: error: incompatible types: char cannot be converted\
    \ to String\n            s = s.concat(ch);\n                         ^\n/tmp/tmphdx82mtl.java:29:\
    \ error: incompatible types: char cannot be converted to String\n            p\
    \ = p.concat(ch);\n                         ^\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1660011762
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        // TODO: write code here\n        Stack<Character> opening\
    \ = new Stack<>();\n        Stack<Character> closing = new Stack<>();\n      \
    \  for (int i = 0; i < brackets.length(); i++) {\n            char bracket = brackets.charAt(i);\n\
    \            if (bracket == '<') {\n                opening.push(bracket);\n \
    \           } else if (bracket == '>') {\n                closing.push(bracket);\n\
    \            } else {\n                if (opening.isEmpty() || closing.isEmpty())\
    \ {\n                    return false;\n                }\n                if\
    \ (opening.peek() == '<') {\n                    if (closing.peek() == '>') {\n\
    \                        if (opening.peek() != closing.peek()) {\n           \
    \                 opening.pop();\n                            closing.pop();\n\
    \                            if (!opening.isEmpty() && !closing.isEmpty()) {\n\
    \                                return false;\n                            }\n\
    \                        }\n                    } else {\n                   \
    \     opening.pop();\n                    }\n                } else {\n      \
    \              if (closing.peek() == '<') {\n                        closing.pop();\n\
    \                    } else {\n                        return false;\n       \
    \             }\n                }\n            }\n        }\n        return !opening.isEmpty()\
    \ && !closing.isEmpty();\n}\n    public static void main(String[] args) {\n  \
    \  assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpoxtegb8d.java:61)\n"
  stdout: ''
  timestamp: 1660011763
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        return brackets.chars().allMatch(x -> {\n            int\
    \ i = brackets.indexOf(x);\n            if (i == -1 || x + 1 != brackets.charAt(i\
    \ + 1)) {\n                return false;\n            }\n            return true;\n\
    \        });\n}\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpi341e07j.java:29)\n"
  stdout: ''
  timestamp: 1660011763
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        // TODO: implement this method\n}\n    public static void\
    \ main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: '/tmp/tmp1j2w0q_t.java:21: error: missing return statement

    }

    ^

    1 error

    '
  stdout: ''
  timestamp: 1660011763
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        List<String> tokenList = new ArrayList<>();\n        Matcher\
    \ matcher = Pattern.compile(\"(<.*>)\").matcher(brackets);\n        while (matcher.find())\
    \ {\n            tokenList.add(matcher.group());\n        }\n        return tokenList.stream().allMatch(s\
    \ -> s.charAt(0) == '<' && s.charAt(s.length() - 1) == '>');\n}\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmruomoxr.java:21: error: cannot find symbol\n        Matcher matcher\
    \ = Pattern.compile(\"(<.*>)\").matcher(brackets);\n        ^\n  symbol:   class\
    \ Matcher\n  location: class Problem\n/tmp/tmpmruomoxr.java:21: error: cannot\
    \ find symbol\n        Matcher matcher = Pattern.compile(\"(<.*>)\").matcher(brackets);\n\
    \                          ^\n  symbol:   variable Pattern\n  location: class\
    \ Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660011765
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        if (brackets == null || brackets.isEmpty()) {\n       \
    \     return true;\n        }\n        for (int i = 0; i < brackets.length();\
    \ i++) {\n            if (brackets.charAt(i) != '>') {\n                continue;\n\
    \            }\n            int j = i + 1;\n            while (j < brackets.length()\
    \ && brackets.charAt(j) != '>') {\n                j++;\n            }\n     \
    \       if (j == brackets.length()) {\n                return true;\n        \
    \    }\n            if (brackets.charAt(i) == '>' && brackets.charAt(j) != '>')\
    \ {\n                return false;\n            }\n        }\n        return false;\n\
    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_m3ah5uy.java:45)\n"
  stdout: ''
  timestamp: 1660011765
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        // write your code here\n        List<String> list = Arrays.asList(brackets.split(\"\
    [<>]\"));\n        boolean correct = true;\n        for (String elem : list) {\n\
    \            if (elem.length() <= 1) continue;\n            boolean openBracketFound\
    \ = false;\n            boolean closeBracketFound = false;\n            for (int\
    \ i = 0; i <= elem.length(); ++i) {\n                if (elem.charAt(i) == '<')\
    \ {\n                    openBracketFound = true;\n                } else if (elem.charAt(i)\
    \ == '>') {\n                    closeBracketFound = true;\n                }\n\
    \            }\n            if (!openBracketFound || !closeBracketFound) {\n \
    \               correct = false;\n            }\n        }\n        return correct;\n\
    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpebhf5nuw.java:45)\n"
  stdout: ''
  timestamp: 1660011765
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        int numOpeningBrackets = brackets.length();\n        boolean\
    \ result = false;\n        for (int i = 0; i < numOpeningBrackets; i++) {\n  \
    \          String openingBracket = brackets.substring(i, i + 1);\n           \
    \ if (i < numOpeningBrackets - 1) {\n                String closingBracket = brackets.substring(i\
    \ + 1, i + 2);\n                if (openingBracket == closingBracket) {\n    \
    \                result = true;\n                }\n            }\n        }\n\
    \        return result;\n}\n    public static void main(String[] args) {\n   \
    \ assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5p4k2nyh.java:34)\n"
  stdout: ''
  timestamp: 1660011765
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack<Character> bracketStack = new Stack<Character>();\n\
    \        for (char c : brackets.toCharArray()) {\n            if (c == '<') {\n\
    \                bracketStack.push('>');\n            } else if (c == '>') {\n\
    \                bracketStack.push('<');\n            } else if (c == '<=') {\n\
    \                bracketStack.push('>=');\n            } else if (c == '>=') {\n\
    \                bracketStack.push('<=');\n            } else if (c == '<>') {\n\
    \                bracketStack.push('!=');\n            } else if (c == '!=') {\n\
    \                bracketStack.push('<>');\n            }\n        }\n        return\
    \ bracketStack.empty();\n}\n    public static void main(String[] args) {\n   \
    \ assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyu82dh8t.java:26: error: unclosed character literal\n         \
    \   } else if (c == '<=') {\n                            ^\n/tmp/tmpyu82dh8t.java:26:\
    \ error: unclosed character literal\n            } else if (c == '<=') {\n   \
    \                            ^\n/tmp/tmpyu82dh8t.java:27: error: unclosed character\
    \ literal\n                bracketStack.push('>=');\n                        \
    \          ^\n/tmp/tmpyu82dh8t.java:27: error: unclosed character literal\n  \
    \              bracketStack.push('>=');\n                                    \
    \ ^\n/tmp/tmpyu82dh8t.java:28: error: unclosed character literal\n           \
    \ } else if (c == '>=') {\n                            ^\n/tmp/tmpyu82dh8t.java:28:\
    \ error: 'else' without 'if'\n            } else if (c == '>=') {\n          \
    \    ^\n/tmp/tmpyu82dh8t.java:28: error: unclosed character literal\n        \
    \    } else if (c == '>=') {\n                               ^\n/tmp/tmpyu82dh8t.java:29:\
    \ error: unclosed character literal\n                bracketStack.push('<=');\n\
    \                                  ^\n/tmp/tmpyu82dh8t.java:29: error: unclosed\
    \ character literal\n                bracketStack.push('<=');\n              \
    \                       ^\n/tmp/tmpyu82dh8t.java:30: error: unclosed character\
    \ literal\n            } else if (c == '<>') {\n                            ^\n\
    /tmp/tmpyu82dh8t.java:30: error: 'else' without 'if'\n            } else if (c\
    \ == '<>') {\n              ^\n/tmp/tmpyu82dh8t.java:30: error: unclosed character\
    \ literal\n            } else if (c == '<>') {\n                             \
    \  ^\n/tmp/tmpyu82dh8t.java:31: error: unclosed character literal\n          \
    \      bracketStack.push('!=');\n                                  ^\n/tmp/tmpyu82dh8t.java:31:\
    \ error: unclosed character literal\n                bracketStack.push('!=');\n\
    \                                     ^\n/tmp/tmpyu82dh8t.java:32: error: unclosed\
    \ character literal\n            } else if (c == '!=') {\n                   \
    \         ^\n/tmp/tmpyu82dh8t.java:32: error: 'else' without 'if'\n          \
    \  } else if (c == '!=') {\n              ^\n/tmp/tmpyu8"
  stdout: ''
  timestamp: 1660011764
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        ArrayList<String> openBrackets = new ArrayList<>();\n \
    \       ArrayList<String> closeBrackets = new ArrayList<>();\n        for (char\
    \ character : brackets.toCharArray()) {\n            if (character == '<') {\n\
    \                openBrackets.add(character);\n            } else if (character\
    \ == '>') {\n                closeBrackets.add(character);\n            }\n  \
    \      }\n        // return True if every opening bracket has a corresponding\
    \ closing bracket.\n        return openBrackets.size() == closeBrackets.size();\n\
    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppc9brgw3.java:24: error: incompatible types: char cannot be converted\
    \ to String\n                openBrackets.add(character);\n                  \
    \               ^\n/tmp/tmppc9brgw3.java:26: error: incompatible types: char cannot\
    \ be converted to String\n                closeBrackets.add(character);\n    \
    \                              ^\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1660011765
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        boolean result = true;\n        for (int i = 0; i < brackets.length();\
    \ i++) {\n            if (brackets.charAt(i) == '>') {\n                if (!brackets.substring(i\
    \ + 1, i + 2).equals(\"<\")) {\n                    result = false;\n        \
    \        }\n            }\n            else if (brackets.charAt(i) == '<') {\n\
    \                if (!brackets.substring(i + 1, i + 2).equals(\">\")) {\n    \
    \                result = false;\n                }\n            }\n        }\n\
    \        return result;\n}\n    public static void main(String[] args) {\n   \
    \ assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StringIndexOutOfBoundsException:\
    \ begin 2, end 3, length 2\n\tat java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\
    \tat java.base/java.lang.String.substring(String.java:2707)\n\tat Problem.correctBracketing(tmpmosls6oq.java:23)\n\
    \tat Problem.main(tmpmosls6oq.java:36)\n"
  stdout: ''
  timestamp: 1660011765
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        boolean result = false;\n        for(int i = 0; i < brackets.length();\
    \ i++) {\n            char c = brackets.charAt(i);\n            if(c == '<') {\n\
    \                for(int j = i + 1; j < brackets.length(); j++) {\n          \
    \          char d = brackets.charAt(j);\n                    if(brackets.charAt(j)\
    \ == '>') {\n                        if(Character.isLetter(c)) {\n           \
    \                 result = true;\n                        }\n                \
    \        break;\n                    }\n                }\n            }\n   \
    \     }\n        return result;\n}\n    public static void main(String[] args)\
    \ {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptxw4d5mw.java:38)\n"
  stdout: ''
  timestamp: 1660011765
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        for(int i = 0; i < brackets.length(); i++)\n        {\n\
    \            if(brackets.charAt(i) != brackets.charAt(i + 1))\n            {\n\
    \                return false;\n            }\n        }\n        return true;\n\
    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmple1u73h_.java:30)\n"
  stdout: ''
  timestamp: 1660011765
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        char[] c = brackets.toCharArray();\n        Arrays.fill(c,\
    \ ' ');\n        StringBuilder sb = new StringBuilder();\n        boolean matchFound\
    \ = false;\n        for(int i = 0; i < c.length; i++) {\n            char a =\
    \ c[i];\n            if (a != '<') {\n                if (matchFound) {\n    \
    \                return false;\n                }\n                sb.append(a);\n\
    \            } else {\n                boolean match = false;\n              \
    \  for (int j = i + 1; j < c.length; j++) {\n                    char b = c[j];\n\
    \                    if (b == '>') {\n                        match = true;\n\
    \                        break;\n                    }\n                }\n  \
    \              if (match) {\n                    sb.append(a);\n             \
    \   }\n            }\n        }\n        return sb.toString().equals(brackets);\n\
    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmrp548w8.java:48)\n"
  stdout: ''
  timestamp: 1660011765
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        return brackets.replaceAll(\"<|>\", \"\")\n           \
    \ .matches(\"(\\\\<\\\\<)(?=\\\\s)|(\\\\>\\\\>)(?=\\\\s)|\\\\<\\\\>|\\\\>\\\\\
    >\")\n            .replaceAll(\"\\\\s\", \"\").length() == brackets.length();\n\
    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv6u5d6d0.java:22: error: boolean cannot be dereferenced\n     \
    \       .replaceAll(\"\\\\s\", \"\").length() == brackets.length();\n        \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1660011765
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        String open = \"<\";\n        String close = \">\";\n \
    \       if (brackets.contains(open) && brackets.contains(close)) {\n         \
    \   return true;\n        }\n        return false;\n}\n    public static void\
    \ main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpczy_qbks.java:32)\n"
  stdout: ''
  timestamp: 1660011765
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        return brackets.replaceAll(\"(<)+\", \"$2\").replaceAll(\"\
    (>)+\", \"$1\").equals(\"<>\");\n}\n    public static void main(String[] args)\
    \ {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: No group\
    \ 2\n\tat java.base/java.util.regex.Matcher.start(Matcher.java:482)\n\tat java.base/java.util.regex.Matcher.appendExpandedReplacement(Matcher.java:1090)\n\
    \tat java.base/java.util.regex.Matcher.appendReplacement(Matcher.java:997)\n\t\
    at java.base/java.util.regex.Matcher.replaceAll(Matcher.java:1181)\n\tat java.base/java.lang.String.replaceAll(String.java:2942)\n\
    \tat Problem.correctBracketing(tmphm6rprmw.java:20)\n\tat Problem.main(tmphm6rprmw.java:23)\n"
  stdout: ''
  timestamp: 1660011765
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        ArrayList<Integer> opening_brackets = Arrays.stream(brackets.split(\"\
    <\"))\n            .map(String::length)\n            .filter(i -> i >= 1)\n  \
    \          .boxed()\n            .collect(toCollection(() -> new ArrayList<Integer>()));\n\
    \        ArrayList<Integer> closing_brackets = Arrays.stream(brackets.split(\"\
    >\"))\n            .map(String::length)\n            .filter(i -> i >= 1)\n  \
    \          .boxed()\n            .collect(toCollection(() -> new ArrayList<Integer>()));\n\
    \        opening_brackets.forEach((i) -> {\n            int j;\n            for\
    \ (j = opening_brackets.size()-1; j>=0; j--) {\n                if (i == opening_brackets.get(j))\
    \ {\n                    opening_brackets.remove(j);\n                    break;\n\
    \                }\n            }\n        });\n        closing_brackets.forEach((i)\
    \ -> {\n            int j;\n            for (j = closing_brackets.size()-1; j>=0;\
    \ j--) {\n                if (i == closing_brackets.get(j)) {\n              \
    \      closing_brackets.remove(j);\n                    break;\n             \
    \   }\n            }\n        });\n        return opening_brackets.size() == 0\
    \ && closing_brackets.size() == 0;\n}\n    public static void main(String[] args)\
    \ {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvznollp6.java:23: error: cannot find symbol\n            .boxed()\n\
    \            ^\n  symbol:   method boxed()\n  location: interface Stream<Integer>\n\
    /tmp/tmpvznollp6.java:24: error: cannot find symbol\n            .collect(toCollection(()\
    \ -> new ArrayList<Integer>()));\n                     ^\n  symbol:   method toCollection(()->new\
    \ Ar[...]er>())\n  location: class Problem\n/tmp/tmpvznollp6.java:28: error: cannot\
    \ find symbol\n            .boxed()\n            ^\n  symbol:   method boxed()\n\
    \  location: interface Stream<Integer>\n/tmp/tmpvznollp6.java:29: error: cannot\
    \ find symbol\n            .collect(toCollection(() -> new ArrayList<Integer>()));\n\
    \                     ^\n  symbol:   method toCollection(()->new Ar[...]er>())\n\
    \  location: class Problem\n4 errors\n"
  stdout: ''
  timestamp: 1660011765
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        boolean result = false;\n        int openCount = 0;\n \
    \       int closeCount = 0;\n        for (int i = 0; i < brackets.length(); i++)\
    \ {\n            char c = brackets.charAt(i);\n            switch (c) {\n    \
    \            case '>':\n                    closeCount++;\n                  \
    \  break;\n                case '<':\n                    openCount++;\n     \
    \               break;\n                default:\n                    // Do nothing\n\
    \            }\n        }\n        if (openCount != closeCount) {\n          \
    \  result = false;\n        } else {\n            result = openCount == brackets.length()\
    \ - 1;\n        }\n        return result;\n}\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvxjx7p2h.java:45)\n"
  stdout: ''
  timestamp: 1660011765
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        if (brackets.length() == 0) {\n            return false;\n\
    \        }\n        for (int i = 0; i < brackets.length(); i++) {\n          \
    \  if (brackets.charAt(i) != brackets.charAt(i + 1)) {\n                return\
    \ false;\n            }\n        }\n        return true;\n}\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpty4p6x61.java:31)\n"
  stdout: ''
  timestamp: 1660011765
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        // The stack is used to track if each opening bracket has\
    \ been closed,\n        // and if so whether the corresponding closing bracket\
    \ is still open.\n        Stack<Character> openings = new Stack<Character>();\n\
    \n        // The array is used to hold the number of open brackets.\n        int\
    \ openCount = 0;\n\n        for (int i = 0; i < brackets.length(); i++) {\n  \
    \          // Push a new opening bracket onto the stack.\n            if (brackets.charAt(i)\
    \ == '<') {\n                openings.push(brackets.charAt(i));\n\n          \
    \      // Increment the number of open brackets.\n                openCount++;\n\
    \n                // If the stack is empty or if we are at a closing bracket,\n\
    \                // return false.\n                if (openCount > 0 || openings.isEmpty())\
    \ {\n                    return false;\n                }\n            }\n\n \
    \           // If the next opening bracket is another closing bracket,\n     \
    \       // decrement the number of open brackets.\n            else if (brackets.charAt(i)\
    \ == '>') {\n                openCount--;\n\n                // If we are at zero\
    \ open brackets, return false.\n                if (openCount == 0) {\n      \
    \              return false;\n                }\n            }\n        }\n\n\
    \        // If we have not returned yet, return true.\n        return true;\n\
    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcjusqnl8.java:58)\n"
  stdout: ''
  timestamp: 1660011765
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        List<String> openings = Arrays.stream(brackets.split(\"\
    \")).collect(Collectors.toList());\n        for (int i = 0; i < openings.size();\
    \ i++)\n            if (openings.get(i) != \">\" && openings.get(i) != \"<\")\n\
    \                return false;\n        return true;\n}\n    public static void\
    \ main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvns7luhk.java:27)\n"
  stdout: ''
  timestamp: 1660011765
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack<Character> bracketStack = new Stack<Character>();\n\
    \n        for(char c : brackets.toCharArray()) {\n            if(brackets.charAt(c)\
    \ == '<') {\n                bracketStack.push(c);\n            }\n          \
    \  if(brackets.charAt(c) == '>') {\n                if(bracketStack.isEmpty())\
    \ {\n                    return false;\n                }\n                else\
    \ {\n                    char curr = bracketStack.pop();\n                   \
    \ if(curr != c) {\n                        return false;\n                   \
    \ }\n                }\n            }\n        }\n\n        return bracketStack.isEmpty();\n\
    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StringIndexOutOfBoundsException:\
    \ String index out of range: 60\n\tat java.base/java.lang.StringLatin1.charAt(StringLatin1.java:48)\n\
    \tat java.base/java.lang.String.charAt(String.java:1515)\n\tat Problem.correctBracketing(tmp7k5_p712.java:23)\n\
    \tat Problem.main(tmp7k5_p712.java:42)\n"
  stdout: ''
  timestamp: 1660011765
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        // TODO implement this function\n        return false;\n\
    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvmdxn25t.java:24)\n"
  stdout: ''
  timestamp: 1660011765
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        String[] pairs = brackets.split(\"\\\\D+\");\n        for\
    \ (String pair : pairs) {\n            char c = pair.charAt(0);\n            String\
    \ r = pair.substring(1);\n            String open = \"\\\\\" + c;\n          \
    \  String close = open.replaceAll(\"[^\" + open + \"]\", \"\");\n            String\
    \ test = open + close;\n            if (close.equals(open)) {\n              \
    \  continue;\n            }\n            if (close.equals(\">\") && !(test.equals(close)))\
    \ {\n                return false;\n            }\n            if (close.equals(\"\
    <\") && !(test.equals(open))) {\n                return false;\n            }\n\
    \        }\n        return true;\n}\n    public static void main(String[] args)\
    \ {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbzizus3u.java:44)\n"
  stdout: ''
  timestamp: 1660011765
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        return brackets.replaceAll(\"(<\\\\|>)\", \"\").equals(brackets);\n\
    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpudq7w4ak.java:27)\n"
  stdout: ''
  timestamp: 1660011765
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        String left = brackets.substring(0, brackets.indexOf(\"\
    <\"));\n        String right = brackets.substring(brackets.indexOf(\"<\"), brackets.indexOf(\"\
    >\") + 1);\n        String close = brackets.substring(brackets.indexOf(\">\")\
    \ + 1, brackets.indexOf(\"<\"));\n        if (left == right) return true;\n  \
    \      if (\"<>\".equals(close)) return true;\n        if (\"<\".equals(left)\
    \ && \">\".equals(right)) return true;\n        return false;\n}\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StringIndexOutOfBoundsException:\
    \ begin 2, end 0, length 2\n\tat java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\
    \tat java.base/java.lang.String.substring(String.java:2707)\n\tat Problem.correctBracketing(tmpoah_1ep6.java:22)\n\
    \tat Problem.main(tmpoah_1ep6.java:29)\n"
  stdout: ''
  timestamp: 1660011765
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Set<Character> openingBrackets = new HashSet<>();\n   \
    \     Set<Character> closingBrackets = new HashSet<>();\n        for (int i =\
    \ 0; i < brackets.length(); i++) {\n            char bracket = brackets.charAt(i);\n\
    \            if (brackets.charAt(i) == '<') {\n                openingBrackets.add(bracket);\n\
    \            } else if (brackets.charAt(i) == '>') {\n                closingBrackets.add(bracket);\n\
    \            }\n        }\n        if (openingBrackets.size() != closingBrackets.size())\
    \ {\n            return false;\n        }\n        for (char bracket : openingBrackets)\
    \ {\n            if (!closingBrackets.contains(bracket)) {\n                return\
    \ false;\n            }\n        }\n        return true;\n}\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplyilmxrl.java:41)\n"
  stdout: ''
  timestamp: 1660011767
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        StringBuilder correctBrackets = new StringBuilder();\n\
    \        int i = 0;\n        while (i < brackets.length()) {\n            int\
    \ j = brackets.indexOf(\"<\", i);\n            if (j < 0) {\n                correctBrackets.append(brackets.charAt(i));\n\
    \                i = brackets.length();\n            } else {\n              \
    \  int k = brackets.indexOf(\">\", j + 1);\n                if (k < 0) {\n   \
    \                 correctBrackets.append(brackets.charAt(i));\n              \
    \      i = brackets.length();\n                } else {\n                    correctBrackets.append(brackets.substring(i,\
    \ j + 1));\n                    i = k - 1;\n                }\n            }\n\
    \        }\n        return correctBrackets.equals(brackets);\n}\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660011772
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        // return true if brackets are correct\n        List<Integer>\
    \ open = new ArrayList<>();\n        List<Integer> close = new ArrayList<>();\n\
    \n        int i = 0;\n        while (brackets.charAt(i) != '>') {\n          \
    \  i++;\n        }\n        open.add(brackets.charAt(i));\n        i = i + 1;\n\
    \n        while (brackets.charAt(i) != '<') {\n            i++;\n        }\n \
    \       close.add(brackets.charAt(i));\n        i = i + 1;\n\n        for (int\
    \ j = 0; j < open.size() - 1; j++) {\n            if (close.get(j - 1) != open.get(j))\
    \ {\n                return false;\n            }\n        }\n\n        return\
    \ true;\n}\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpm1v3llxs.java:28: error: incompatible types: char cannot be converted\
    \ to Integer\n        open.add(brackets.charAt(i));\n                        \
    \        ^\n/tmp/tmpm1v3llxs.java:34: error: incompatible types: char cannot be\
    \ converted to Integer\n        close.add(brackets.charAt(i));\n             \
    \                    ^\nNote: Some messages have been simplified; recompile with\
    \ -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1660011767
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Set<Character> openingBrackets = new HashSet<>();\n   \
    \     Set<Character> closingBrackets = new HashSet<>();\n        for (char c :\
    \ brackets.toCharArray()) {\n            switch (c) {\n            case '<': openingBrackets.add('>');\
    \ break;\n            case '>': closingBrackets.add('<'); break;\n           \
    \ default:\n                throw new IllegalArgumentException(String.format(\"\
    Invalid opening or closing bracket: %c\", c));\n            }\n        }\n   \
    \     return openingBrackets.containsAll(closingBrackets);\n}\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpb24gvy6i.java:33)\n"
  stdout: ''
  timestamp: 1660011767
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack open = new Stack();\n        Stack close = new Stack();\n\
    \        int openBrackets = 0;\n        int closeBrackets = 0;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            switch (c) {\n            case '<':\n                openBrackets++;\n\
    \                break;\n            case '>':\n                closeBrackets++;\n\
    \                break;\n            default:\n                break;\n      \
    \      }\n            open.add(c);\n            close.add(c);\n        }\n   \
    \     if (openBrackets != closeBrackets)\n            return false;\n        else\n\
    \            return open.isEmpty() && close.isEmpty();\n}\n    public static void\
    \ main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfd8v94t_.java:45)\n"
  stdout: ''
  timestamp: 1660011767
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        List<String> openings = new LinkedList<String>();\n   \
    \     List<String> closings = new LinkedList<String>();\n        String[] parts\
    \ = brackets.split(\"<\");\n        for (String part : parts) {\n            openings.add(part);\n\
    \        }\n        Arrays.stream(parts).forEach(part -> {\n            closings.add(part);\n\
    \        });\n        if (openings.size() != closings.size()) {\n            return\
    \ false;\n        }\n        List<String> remaining = openings;\n        List<String>\
    \ closed = closings;\n        while (remaining.size() != closed.size()) {\n  \
    \          String opening = remaining.remove();\n            String closing =\
    \ closed.remove();\n            if (remaining == closed) {\n                return\
    \ false;\n            }\n            if (!opening.equals(closing)) {\n       \
    \         return false;\n            }\n        }\n        return true;\n}\n \
    \   public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpp0uy46wi.java:35: error: no suitable method found for remove(no\
    \ arguments)\n            String opening = remaining.remove();\n             \
    \                         ^\n    method List.remove(Object) is not applicable\n\
    \      (actual and formal argument lists differ in length)\n    method List.remove(int)\
    \ is not applicable\n      (actual and formal argument lists differ in length)\n\
    /tmp/tmpp0uy46wi.java:36: error: no suitable method found for remove(no arguments)\n\
    \            String closing = closed.remove();\n                             \
    \      ^\n    method List.remove(Object) is not applicable\n      (actual and\
    \ formal argument lists differ in length)\n    method List.remove(int) is not\
    \ applicable\n      (actual and formal argument lists differ in length)\n2 errors\n"
  stdout: ''
  timestamp: 1660011767
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        boolean closed = false;\n        for (String bracket :\
    \ brackets.split(\"(?<=<)\").collect(Collectors.toList())) {\n            if (closed.contains(bracket))\
    \ {\n                return false;\n            }\n            closed = closed.add(bracket);\n\
    \        }\n        return true;\n}\n    public static void main(String[] args)\
    \ {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa7w0eesl.java:21: error: cannot find symbol\n        for (String\
    \ bracket : brackets.split(\"(?<=<)\").collect(Collectors.toList())) {\n     \
    \                                                 ^\n  symbol:   method collect(Collector<Object,CAP#1,List<Object>>)\n\
    \  location: class String[]\n  where CAP#1 is a fresh type-variable:\n    CAP#1\
    \ extends Object from capture of ?\n/tmp/tmpa7w0eesl.java:22: error: boolean cannot\
    \ be dereferenced\n            if (closed.contains(bracket)) {\n             \
    \         ^\n/tmp/tmpa7w0eesl.java:25: error: boolean cannot be dereferenced\n\
    \            closed = closed.add(bracket);\n                           ^\n3 errors\n"
  stdout: ''
  timestamp: 1660011767
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        boolean result = true;\n        for (int i=0; i<brackets.length();\
    \ i++) {\n            if (brackets.charAt(i) == '<') {\n                if (brackets.charAt(i+1)\
    \ == '<') {\n                    if (brackets.charAt(i+2) == '<') {\n        \
    \                if (brackets.charAt(i+3) == '<') {\n                        \
    \    result = false;\n                        }\n                    }\n     \
    \           }\n            }\n        }\n        return result;\n}\n    public\
    \ static void main(String[] args) {\n    assert(correctBracketing((\"<>\")) ==\
    \ (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpi332mc_r.java:39)\n"
  stdout: ''
  timestamp: 1660011767
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        // check each char to see if it is the start of a closing\
    \ bracket.\n        int len = brackets.length();\n        for (int i = 0; i <\
    \ len; i++) {\n            if (brackets.charAt(i) == '>') {\n                //\
    \ If the current character is a greater sign then check to see if the previous\n\
    \                // character is a closing bracket.\n                if (i > 0\
    \ && brackets.charAt(i - 1) == '>') {\n                    return true;\n    \
    \            }\n            }\n        }\n        // If we get here, it means\
    \ the bracketing was incorrect.\n        return false;\n}\n    public static void\
    \ main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6l5nphrg.java:35)\n"
  stdout: ''
  timestamp: 1660011767
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        // If brackets is null, return False.\n        if (brackets\
    \ == null) {\n            return false;\n        }\n\n        // If brackets.length\
    \ is 0, return False.\n        if (brackets.length() == 0) {\n            return\
    \ false;\n        }\n\n        // Create a stack called bracketsStack.\n     \
    \   Stack<Character> bracketsStack = new Stack<>();\n\n        // Use a while\
    \ loop to step through brackets.\n        int index = 0;\n        while (index\
    \ < brackets.length()) {\n            // If the current character is the opening\
    \ bracket character.\n            if (brackets.charAt(index) == '<') {\n     \
    \           // Push the opening bracket character onto the bracketsStack.\n  \
    \              bracketsStack.push(brackets.charAt(index));\n            } else\
    \ if (brackets.charAt(index) == '>') {\n                // If the top of the bracketsStack\
    \ is a closing bracket character.\n                if (bracketsStack.isEmpty()\
    \ ||\n                        (bracketsStack.peek() == '<' &&\n              \
    \          brackets.charAt(index + 1) == '>')) {\n                    // If the\
    \ top of the bracketsStack is also a closing bracket\n                    // character.\n\
    \                    if (bracketsStack.isEmpty()) {\n                        //\
    \ Return True.\n                        return true;\n                    } else\
    \ if (bracketsStack.peek() == '>' &&\n                        brackets.charAt(index\
    \ + 2) == '<') {\n                        // Pop the top two brackets\n      \
    \                  // characters from the bracketsStack.\n                   \
    \     bracketsStack.pop();\n                        bracketsStack.pop();\n   \
    \                     // Return True.\n                        return true;\n\
    \                    }\n                }\n            }\n\n            // Increment\
    \ the index.\n            index++;\n        }\n\n        // Return False.\n  \
    \      return false;\n}\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StringIndexOutOfBoundsException:\
    \ String index out of range: 2\n\tat java.base/java.lang.StringLatin1.charAt(StringLatin1.java:48)\n\
    \tat java.base/java.lang.String.charAt(String.java:1515)\n\tat Problem.correctBracketing(tmpl0qb93q9.java:44)\n\
    \tat Problem.main(tmpl0qb93q9.java:70)\n"
  stdout: ''
  timestamp: 1660011767
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        if (brackets.isEmpty()) return true;\n        char[] chars\
    \ = brackets.toCharArray();\n        int n = chars.length;\n        if (n==0)\
    \ return true;\n        if (n==1) return false;\n        Stack<Character> stack\
    \ = new Stack<Character>();\n        for (int i=0; i<n; ++i) {\n            char\
    \ c = chars[i];\n            if (c=='<') {\n                stack.push(c);\n \
    \           } else if (c=='>') {\n                if (stack.peek()=='<') {\n \
    \                   stack.pop();\n                } else {\n                 \
    \   return false;\n                }\n            }\n        }\n        return\
    \ !stack.isEmpty();\n}\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6ophvd3q.java:41)\n"
  stdout: ''
  timestamp: 1660011767
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        // Return True if the brackets are valid and False otherwise.\n\
    \        // >>> correctBracketing(\"[]<>\")\n        // False\n        // >>>\
    \ correctBracketing(\"{}<>\")\n        // False\n        // >>> correctBracketing(\"\
    <>{}[]\")\n        // False\n        // >>> correctBracketing(\"<<>>\")\n    \
    \    // True\n        // >>> correctBracketing(\"<\")\n        // True\n     \
    \   // >>> correctBracketing(\">><<<\")\n        // False\n        // >>> correctBracketing(\"\
    <><><>\")\n        // False\n        boolean result = brackets.matches(\"^\\\\\
    [.*\\\\]|\\\\{.*\\\\}|<.*>|(<.*>)+$\");\n        System.out.println(result ? \"\
    True\" : \"False\");\n        return result;\n}\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpee4cxi3o.java:44)\n"
  stdout: 'True

    True

    True

    True

    True

    '
  timestamp: 1660011767
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        int bracketCount = 0;\n        brackets = brackets.replaceAll(\"\
    [<>]\", \"\");\n        int openCount = 0, closedCount = 0;\n        for (int\
    \ i = 0; i < brackets.length(); ++i) {\n            char bracket = brackets.charAt(i);\n\
    \            boolean open = bracket == '<';\n            if (open) ++openCount;\n\
    \            else --closedCount;\n            if (openCount == 0 && closedCount\
    \ == 0) {\n                return true;\n            }\n            else if (openCount\
    \ > 0 && closedCount == 0) {\n                return false;\n            }\n \
    \       }\n        // No open or close brackets found.\n        if (openCount\
    \ <= 0 && closedCount <= 0) {\n            return false;\n        }\n        //\
    \ Open and close brackets found, but only one is correct.\n        if (openCount\
    \ > 1 && closedCount > 0) {\n            return false;\n        }\n        //\
    \ Open and close brackets found, but both are correct.\n        return true;\n\
    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo4ie02y8.java:47)\n"
  stdout: ''
  timestamp: 1660011767
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        boolean isOk = brackets.indexOf('<') != -1 && brackets.indexOf('>')\
    \ != -1;\n        for (int i = 0; i < brackets.length(); i++) {\n            if\
    \ (brackets.charAt(i) == '<') {\n                if (!isOk) return false;\n  \
    \              isOk = brackets.indexOf('>', i) != -1;\n            }\n       \
    \     if (brackets.charAt(i) == '>') {\n                if (!isOk) return false;\n\
    \                isOk = brackets.indexOf('<', i) != -1;\n            }\n     \
    \   }\n        return isOk;\n}\n    public static void main(String[] args) {\n\
    \    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzxzc8u0p.java:34)\n"
  stdout: ''
  timestamp: 1660011767
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        List<String> openingBrackets = new ArrayList<>();\n   \
    \     List<String> closingBrackets = new ArrayList<>();\n        String[] openingBracketPairs\
    \ = brackets.split(\">>\");\n        for (String openingBracketPair : openingBracketPairs)\
    \ {\n            String[] openingBrackets = openingBracketPair.split(\"<\");\n\
    \            closingBrackets.addAll(Arrays.asList(openingBrackets));\n       \
    \     openingBrackets.addAll(Arrays.asList(openingBrackets));\n        }\n   \
    \     return openingBrackets.isEmpty() && closingBrackets.isEmpty();\n}\n    public\
    \ static void main(String[] args) {\n    assert(correctBracketing((\"<>\")) ==\
    \ (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp00dyzcg_.java:24: error: variable openingBrackets is already defined\
    \ in method correctBracketing(String)\n            String[] openingBrackets =\
    \ openingBracketPair.split(\"<\");\n                     ^\n/tmp/tmp00dyzcg_.java:26:\
    \ error: cannot find symbol\n            openingBrackets.addAll(Arrays.asList(openingBrackets));\n\
    \                           ^\n  symbol:   method addAll(List<String>)\n  location:\
    \ variable openingBrackets of type String[]\n2 errors\n"
  stdout: ''
  timestamp: 1660011767
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        \n        StringBuffer buffer = new StringBuffer();\n \
    \       \n        //for each opening bracket\n        int i = brackets.indexOf(\"\
    <\");\n        \n        while(i!=-1){\n            //if the closing bracket exists,\
    \ then we have found the first opening bracket\n            //which is not the\
    \ closing bracket\n            if(brackets.indexOf(\"</\",i)!=-1){\n         \
    \       return false;\n            }\n            //if the closing bracket does\
    \ not exist, then we have found the closing bracket\n            //which is not\
    \ the opening bracket\n            if(brackets.indexOf(\"</\",i+1)!=-1){\n   \
    \             return false;\n            }\n            //if the opening bracket\
    \ does not exist, then we have found the first closing bracket\n            //which\
    \ is not the opening bracket\n            if(brackets.indexOf(\"<\",i+1)!=-1){\n\
    \                return false;\n            }\n            \n            //if\
    \ the closing bracket is the next character\n            if(brackets.indexOf(\"\
    </\",i+1)!=-1){\n                //then we need to add an opening bracket\n  \
    \              buffer.append(\"<\");\n                i++;\n            }\n  \
    \          //if the closing bracket is not the next character\n            if(brackets.indexOf(\"\
    </\",i)!=-1){\n                //then we need to add a closing bracket\n     \
    \           buffer.append(\"</\");\n                i++;\n            }\n    \
    \        \n            //if the opening bracket is the next character\n      \
    \      if(brackets.indexOf(\"<\",i+1)!=-1){\n                //then we need to\
    \ add a closing bracket\n                buffer.append(\"<\");\n             \
    \   i++;\n            }\n            //if the opening bracket is not the next\
    \ character\n            if(brackets.indexOf(\"<\",i)!=-1){\n                //then\
    \ we need to add an opening bracket\n                buffer.append(\"<\");\n \
    \               i++;\n            }\n            \n        }\n        \n     \
    \   //if all the closing brackets are found, then the bracketing is correct\n\
    \        //and we can return true\n        boolean bracketingIsCorrect = true;\n\
    \        for(int j=brackets.indexOf(\"</\")+1;j<brackets.length();j++){\n    \
    \        if(brackets.charAt(j)!='>'){\n                bracketingIsCorrect = false;\n\
    \            }\n        }\n        \n        return bracketingIsCorrect;\n}\n\
    \    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660011772
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        return brackets.replaceAll(\"[^<]\", \"\").matches(\"\\\
    \\<.*\\\\>.*\\\\<.*\\\\>\");\n}\n    public static void main(String[] args) {\n\
    \    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo9kyzo_o.java:23)\n"
  stdout: ''
  timestamp: 1660011767
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        ArrayList<String> bracketList = new ArrayList<String>();\n\
    \        bracketList.add(\"<\");\n        bracketList.add(\"<<\");\n        bracketList.add(\"\
    <>\");\n        bracketList.add(\">>\");\n        bracketList.add(\"<>\");\n \
    \       bracketList.add(\"<><<\");\n        bracketList.add(\"<><<>\");\n    \
    \    bracketList.add(\"<><>\");\n        bracketList.add(\"<><><<\");\n      \
    \  bracketList.add(\"<><><<>\");\n        bracketList.add(\"<<<\");\n        bracketList.add(\"\
    <<<>>\");\n        bracketList.add(\"<><><>\");\n        bracketList.add(\"<><><><<\"\
    );\n        bracketList.add(\"<><><><<>\");\n        bracketList.add(\"<<<><>\"\
    );\n        bracketList.add(\"<<<><><<\");\n        bracketList.add(\"<<<><><<>\"\
    );\n        bracketList.add(\"<>><\");\n        bracketList.add(\"<>><>>\");\n\
    \        bracketList.add(\"<><><><>\");\n        bracketList.add(\"<><><><><<\"\
    );\n        bracketList.add(\"<><><><><<>\");\n        bracketList.add(\"<<<><><>\"\
    );\n        bracketList.add(\"<<<><><><<\");\n        bracketList.add(\"<<<><><><<>\"\
    );\n        bracketList.add(\"<><><><><>\");\n        bracketList.add(\"<><><><><><<\"\
    );\n        bracketList.add(\"<><><><><><<>\");\n        bracketList.add(\"<<<><><><>\"\
    );\n        bracketList.add(\"<<<><><><><<\");\n        bracketList.add(\"<<<><><><><<>\"\
    );\n        bracketList.add(\"<>><><><><>\");\n        bracketList.add(\"<>><><><><><<\"\
    );\n        bracketList.add(\"<>><><><><><<>\");\n        bracketList.add(\"<><><><><><>\"\
    );\n        bracketList.add(\"<><><><><><><<\");\n        bracketList.add(\"<><><><><><><<>\"\
    );\n        bracketList.add(\"<<<><><><><>\");\n        bracketList.add(\"<<<><><><><><<\"\
    );\n        bracketList.add(\"<<<><><><><><<>\");\n        bracketList.add(\"\
    <><><><><><><>\");\n        bracketList.add(\"<><><><\n}\n    public static void\
    \ main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz3m6ipzf.java:63: error: unclosed string literal\n        bracketList.add(\"\
    <><><><\n                        ^\n1 error\n"
  stdout: ''
  timestamp: 1660011767
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        // The first loop iterates over all characters in the brackets\
    \ string.\n        // The first iteration checks the first character in the brackets\
    \ string.\n        // If it is a \"<\" then we know we found an opening bracket.\n\
    \        // We can only check the next character if it is \">\" since that\n \
    \       // means an opening bracket has been found but no closing bracket.\n \
    \       for (int i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i)\
    \ == '<') {\n                char nextChar = brackets.charAt(i+1);\n         \
    \       if (nextChar == '>') {\n                    return true;\n           \
    \     }\n            }\n        }\n        // If we get here then we did not find\
    \ an opening bracket and \n        // we know not every opening bracket has a\
    \ corresponding closing bracket.\n        // We can only check characters until\
    \ we reach a \">\" character.\n        for (int i = 0; i < brackets.length();\
    \ i++) {\n            if (brackets.charAt(i) == '>') {\n                return\
    \ false;\n            }\n        }\n        // If we get here then every opening\
    \ bracket has a corresponding closing bracket.\n        // We do not have any\
    \ more brackets to check, so we will return false.\n        return false;\n}\n\
    \    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfegnlqbn.java:50)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        return (brackets.replaceAll(\"<|>\", \"<\").split(\"<\"\
    )\n            .map(s -> s.replace(\"<\", \"<*>\"))\n            .collect(Collectors.toList())\n\
    \            .equals(Arrays.asList(\"<*>\", \"<*>\", \"<*>\", \"<*>\"))\n    \
    \        || brackets.replaceAll(\"<|>\", \"<\").split(\"<\")\n            .map(s\
    \ -> s.replaceAll(\">\", \">*\"))\n            .collect(Collectors.toList())\n\
    \            .equals(Arrays.asList(\"<*>\", \"<*>\", \"<*>\", \"<*>\")));\n}\n\
    \    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmzrlwve6.java:21: error: cannot find symbol\n            .map(s\
    \ -> s.replace(\"<\", \"<*>\"))\n            ^\n  symbol:   method map((s)->s.rep[...]<*>\"\
    ))\n  location: class String[]\n/tmp/tmpmzrlwve6.java:25: error: cannot find symbol\n\
    \            .map(s -> s.replaceAll(\">\", \">*\"))\n            ^\n  symbol:\
    \   method map((s)->s.rep[...]\">*\"))\n  location: class String[]\n2 errors\n"
  stdout: ''
  timestamp: 1660011767
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Map<Character, Integer> bracketMap = new HashMap<>();\n\
    \n        for (int i = 0; i < brackets.length(); ++i) {\n            char bracket\
    \ = brackets.charAt(i);\n            if (bracketMap.containsKey(bracket)) {\n\
    \                bracketMap.put(bracket, bracketMap.get(bracket) + 1);\n     \
    \       } else {\n                bracketMap.put(bracket, 1);\n            }\n\
    \        }\n\n        List<Character> keys = new ArrayList<>(bracketMap.keySet());\n\
    \        Collections.sort(keys);\n\n        boolean result = true;\n        for\
    \ (Character key : keys) {\n            Integer value = bracketMap.get(key);\n\
    \            if (value >= 2) {\n                result = false;\n            \
    \    break;\n            }\n        }\n        return result;\n}\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3709ikzt.java:46)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        boolean correct = false;\n        int len = brackets.length();\n\
    \        for (int i = 0; i < len; i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                int j = i + 1;\n                while (j < len && brackets.charAt(j)\
    \ == '>') {\n                    j++;\n                }\n                if (j\
    \ == len) {\n                    correct = true;\n                }\n        \
    \    }\n        }\n        return correct;\n}\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2cymtcu7.java:40)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        if (brackets == null) {\n            return false;\n  \
    \      }\n        String[] arr = brackets.split(\"<\");\n        return Arrays.stream(arr).allMatch(s\
    \ -> s.equals(\"<\") || s.equals(\">\"));\n}\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkfnfr_3b.java:27)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        int openingBrackets = brackets.split(\"<\").length; //\
    \ count the number of opening brackets.\n        int closingBrackets = brackets.split(\"\
    >\").length; // count the number of closing brackets.\n        return openingBrackets\
    \ == closingBrackets;\n}\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfleaadm1.java:25)\n"
  stdout: ''
  timestamp: 1660011769
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        int open = brackets.indexOf('(');\n        int close =\
    \ brackets.indexOf(')');\n        if (open < 0 || close < 0) {\n            return\
    \ false;\n        }\n        for (int i = open + 1; i < close - 1; i++) {\n  \
    \          if (brackets.charAt(i) != brackets.charAt(i + 1)) {\n             \
    \   return false;\n            }\n        }\n        return true;\n}\n    public\
    \ static void main(String[] args) {\n    assert(correctBracketing((\"<>\")) ==\
    \ (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxngzvwch.java:33)\n"
  stdout: ''
  timestamp: 1660011769
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        String[] openBrackets = brackets.replaceAll(\"<|>\", \"\
    \").split(\"\\\\|\");\n        int i = 0;\n        for (i; i < openBrackets.length;\
    \ i++) {\n            if (openBrackets[i].equals(\"<\")) {\n                i++;\n\
    \                continue;\n            }\n            if (openBrackets[i].equals(\"\
    >\")) {\n                i++;\n                continue;\n            }\n    \
    \        if (openBrackets[i].equals(\"(\")) {\n                if (brackets.charAt(i\
    \ + 1) != '(') {\n                    return false;\n                }\n     \
    \           i++;\n                continue;\n            }\n            if (openBrackets[i].equals(\"\
    )\")) {\n                if (brackets.charAt(i + 1) != ')') {\n              \
    \      return false;\n                }\n                i++;\n              \
    \  continue;\n            }\n            return false;\n        }\n        return\
    \ true;\n}\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdu5p8vfp.java:22: error: not a statement\n        for (i; i < openBrackets.length;\
    \ i++) {\n             ^\n1 error\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        if (brackets.length() == 0)\n            return true;\n\
    \        return brackets.chars().allMatch(i -> brackets.charAt(i) == '<');\n}\n\
    \    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StringIndexOutOfBoundsException:\
    \ String index out of range: 60\n\tat java.base/java.lang.StringLatin1.charAt(StringLatin1.java:48)\n\
    \tat java.base/java.lang.String.charAt(String.java:1515)\n\tat Problem.lambda$correctBracketing$0(tmp_tjmnzjg.java:22)\n\
    \tat java.base/java.util.stream.MatchOps$2MatchSink.accept(MatchOps.java:119)\n\
    \tat java.base/java.lang.StringLatin1$CharsSpliterator.tryAdvance(StringLatin1.java:833)\n\
    \tat java.base/java.util.stream.IntPipeline.forEachWithCancel(IntPipeline.java:163)\n\
    \tat java.base/java.util.stream.AbstractPipeline.copyIntoWithCancel(AbstractPipeline.java:527)\n\
    \tat java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:513)\n\
    \tat java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)\n\
    \tat java.base/java.util.stream.MatchOps$MatchOp.evaluateSequential(MatchOps.java:230)\n\
    \tat java.base/java.util.stream.MatchOps$MatchOp.evaluateSequential(MatchOps.java:196)\n\
    \tat java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)\n\
    \tat java.base/java.util.stream.IntPipeline.allMatch(IntPipeline.java:542)\n\t\
    at Problem.correctBracketing(tmp_tjmnzjg.java:22)\n\tat Problem.main(tmp_tjmnzjg.java:25)\n"
  stdout: ''
  timestamp: 1660011769
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        ArrayList<String> bracketsList = new ArrayList<>();\n \
    \       bracketsList.addAll(brackets.split(\"<>\"));\n        Arrays.sort(bracketsList);\n\
    \        int numberOfOpen = 0;\n        int numberOfClose = 0;\n        boolean\
    \ found = false;\n        for (String bracket : bracketsList) {\n            if\
    \ (bracket.equals(\"<\")) {\n                numberOfOpen++;\n            } else\
    \ {\n                numberOfClose++;\n                if (bracket.equals(\">\"\
    )) {\n                    if (numberOfClose == numberOfOpen) {\n             \
    \           found = true;\n                        break;\n                  \
    \  } else {\n                        numberOfClose--;\n                    }\n\
    \                }\n            }\n        }\n        return found;\n}\n    public\
    \ static void main(String[] args) {\n    assert(correctBracketing((\"<>\")) ==\
    \ (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3ikr4whu.java:21: error: incompatible types: String[] cannot be\
    \ converted to Collection<? extends String>\n        bracketsList.addAll(brackets.split(\"\
    <>\"));\n                                          ^\n/tmp/tmp3ikr4whu.java:22:\
    \ error: no suitable method found for sort(ArrayList<String>)\n        Arrays.sort(bracketsList);\n\
    \              ^\n    method Arrays.sort(int[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<String> cannot be converted to int[])\n    method Arrays.sort(long[])\
    \ is not applicable\n      (argument mismatch; ArrayList<String> cannot be converted\
    \ to long[])\n    method Arrays.sort(short[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<String> cannot be converted to short[])\n    method Arrays.sort(char[])\
    \ is not applicable\n      (argument mismatch; ArrayList<String> cannot be converted\
    \ to char[])\n    method Arrays.sort(byte[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<String> cannot be converted to byte[])\n    method Arrays.sort(float[])\
    \ is not applicable\n      (argument mismatch; ArrayList<String> cannot be converted\
    \ to float[])\n    method Arrays.sort(double[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<String> cannot be converted to double[])\n    method Arrays.sort(Object[])\
    \ is not applicable\n      (argument mismatch; ArrayList<String> cannot be converted\
    \ to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<? super T#1>) is\
    \ not applicable\n      (cannot infer type-variable(s) T#1\n        (actual and\
    \ formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1660011769
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        if (brackets == null || brackets.isEmpty()) {\n       \
    \     return false;\n        }\n        Stack<Character> bracketStack = new Stack<>();\n\
    \        for (int i = 0; i < brackets.length(); i++) {\n            char bracket\
    \ = brackets.charAt(i);\n            if (bracket == '<') {\n                bracketStack.push(bracket);\n\
    \            }\n            else if (bracket == '>') {\n                if (bracketStack.isEmpty())\
    \ {\n                    return false;\n                }\n                char\
    \ firstOpenBracket = bracketStack.peek();\n                if (bracketStack.pop()\
    \ != firstOpenBracket) {\n                    return false;\n                }\n\
    \            }\n        }\n        return bracketStack.isEmpty();\n}\n    public\
    \ static void main(String[] args) {\n    assert(correctBracketing((\"<>\")) ==\
    \ (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011769
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        return (brackets.replaceAll(\"[<>]\", \"<>\").equals(\"\
    <>\")); // Replace brackets with nothing.\n}\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjyj_dg0h.java:23)\n"
  stdout: ''
  timestamp: 1660011769
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        String newBrackets = brackets.replace(\"<\", \"{\").replace(\"\
    >\", \"}\");\n        int length = newBrackets.length();\n        for (int index\
    \ = 0; index < length; index++) {\n            char c = newBrackets.charAt(index);\n\
    \            if (c == '{' || c == '[' || c == '(') {\n                continue;\n\
    \            }\n            if (c == '}' || c == ']' || c == ')') {\n        \
    \        return false;\n            }\n        }\n        return true;\n}\n  \
    \  public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy1a0gddf.java:34)\n"
  stdout: ''
  timestamp: 1660011769
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        if (brackets.isEmpty()) {\n            return true;\n \
    \       }\n        Stack<Character> stack = new Stack<Character>();\n        char\
    \ lastOpening = 0;\n        for (int i = 0; brackets.charAt(i) != '\\0'; i++)\
    \ {\n            char c = brackets.charAt(i);\n            if (c == '<') {\n \
    \               if (lastOpening == '>') {\n                    stack.push(c);\n\
    \                } else {\n                    return false;\n               \
    \ }\n            } else if (c == '>') {\n                if (!stack.isEmpty()\
    \ &&\n                    stack.peek() == '<') {\n                    stack.pop();\n\
    \                }\n            } else {\n                stack.push(c);\n   \
    \             lastOpening = c;\n            }\n        }\n        return !stack.isEmpty();\n\
    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpv5yna0wb.java:46)\n"
  stdout: ''
  timestamp: 1660011769
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        int len = brackets.length();\n        if (len == 0) return\
    \ false;\n        int lastPos = 0;\n        for (int i = 0; i < len; i++) {\n\
    \            char c = brackets.charAt(i);\n            if (c == '<') return false;\n\
    \            if (c == '>') {\n                if (lastPos == 0) return false;\n\
    \                if (i == len - 1) return false;\n                if (lastPos\
    \ == len - 1) return false;\n                char prev = brackets.charAt(lastPos\
    \ - 1);\n                if (prev == '<') return false;\n            }\n     \
    \       lastPos = i + 1;\n        }\n        if (lastPos == 0) return false;\n\
    \        return true;\n}\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkysrsif9.java:39)\n"
  stdout: ''
  timestamp: 1660011769
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        StringTokenizer st = new StringTokenizer(brackets, \">\"\
    );\n        while (st.hasMoreTokens()) {\n            String bracket = st.nextToken();\n\
    \            StringTokenizer st2 = new StringTokenizer(brackets, \">\");\n   \
    \         int count = 0;\n            while (st2.hasMoreTokens()) {\n        \
    \        String bracket2 = st2.nextToken();\n                if (bracket != bracket2)\
    \ {\n                    return false;\n                }\n                count++;\n\
    \            }\n            if (count > 2) {\n                return false;\n\
    \            }\n        }\n        return true;\n}\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5ywh4dvu.java:39)\n"
  stdout: ''
  timestamp: 1660011769
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        boolean isCorrect = true;\n        StringBuilder sb = new\
    \ StringBuilder(brackets);\n        for(int i = 0; i < brackets.length(); i++)\
    \ {\n            if(sb.charAt(i) != '>') {\n                isCorrect = false;\n\
    \                break;\n            }\n            else {\n                sb.deleteCharAt(i);\n\
    \                sb.insert(i, \"<\");\n            }\n        }\n        return\
    \ sb.toString().equals(\"<>>\");\n}\n    public static void main(String[] args)\
    \ {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfrg1jehj.java:35)\n"
  stdout: ''
  timestamp: 1660011769
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        return brackets.chars().allMatch(c -> c == '<' || c ==\
    \ '>');\n}\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp969nfc8c.java:27)\n"
  stdout: ''
  timestamp: 1660011769
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        // your code here\n        List<String> opens = new ArrayList<>();\n\
    \        List<String> closes = new ArrayList<>();\n        for(String s : brackets.split(\"\
    <\")){\n            opens.add(s);\n        }\n        for(String s : brackets.split(\"\
    >\")){\n            closes.add(s);\n        }\n        return opens.stream().allMatch(opens::contains)\
    \ && closes.stream().allMatch(closes::contains);\n}\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbiozo_x1.java:36)\n"
  stdout: ''
  timestamp: 1660011770
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        int open = 0;\n        int close = 0;\n        for(int\
    \ i = 0; i != brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                open++;\n            } else if (brackets.charAt(i) ==\
    \ '>') {\n                close++;\n            }\n        }\n        return open\
    \ >= close;\n}\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxyperm9s.java:37)\n"
  stdout: ''
  timestamp: 1660011769
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack<Character> stack = new Stack<>();\n        for(int\
    \ i = 0; i < brackets.length(); ++i) {\n            char bracket = brackets.charAt(i);\n\
    \            if(bracket == '<') {\n                stack.push(bracket);\n    \
    \        }\n            else if(bracket == '>') {\n                if(stack.isEmpty())\
    \ {\n                    return false;\n                }\n                else\
    \ {\n                    char peek = stack.peek();\n                    if(peek\
    \ == bracket) {\n                        stack.pop();\n                    }\n\
    \                    else {\n                        return false;\n         \
    \           }\n                }\n            }\n        }\n        return stack.isEmpty();\n\
    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7b7cfznc.java:44)\n"
  stdout: ''
  timestamp: 1660011770
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        if (brackets.length() != 2 || brackets.charAt(0) == '<'\
    \ || brackets.charAt(1) == '>') {\n            return false;\n        }\n    \
    \    Set<String> openBrackets = new HashSet<>();\n        Set<String> closedBrackets\
    \ = new HashSet<>();\n        for (char c : brackets.toCharArray()) {\n      \
    \      if (c == '<') {\n                if (!openBrackets.isEmpty()) {\n     \
    \               return false;\n                }\n                openBrackets.add(brackets);\n\
    \            } else if (c == '>') {\n                if (!closedBrackets.isEmpty())\
    \ {\n                    return false;\n                }\n                closedBrackets.add(brackets);\n\
    \            }\n        }\n        return !openBrackets.isEmpty() && !closedBrackets.isEmpty();\n\
    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpuhs8kx_b.java:41)\n"
  stdout: ''
  timestamp: 1660011770
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        String opening = brackets.replaceAll(\"[^<>]+\", \"\");\n\
    \        String closing = brackets.replaceAll(\"(<[^<>]*>[^<>]+)\", \"$1\");\n\
    \        return correctBracketing(opening, closing);\n}\n    public static void\
    \ main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmtmtjhpl.java:22: error: method correctBracketing in class Problem\
    \ cannot be applied to given types;\n        return correctBracketing(opening,\
    \ closing);\n               ^\n  required: String\n  found:    String,String\n\
    \  reason: actual and formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011769
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        // This assumes that brackets is valid, which should be\
    \ true if and only if\n        // the brackets are balanced.\n        Stack<Character>\
    \ bracketStack = new Stack<>();\n        boolean result = true;\n        for (char\
    \ bracket : brackets.toCharArray()) {\n            if (bracket == '<') {\n   \
    \             bracketStack.push('>');\n            } else if (bracket == '>')\
    \ {\n                if (!bracketStack.isEmpty() && !bracketStack.peek().equals('<'))\
    \ {\n                    result = false;\n                    break;\n       \
    \         }\n                bracketStack.pop();\n            } else if (bracket.equals('>')\
    \ && bracketStack.isEmpty()) {\n                result = false;\n            \
    \    break;\n            } else {\n                if (!bracketStack.isEmpty()\
    \ && !bracketStack.peek().equals('<')) {\n                    result = false;\n\
    \                    break;\n                }\n                bracketStack.push(bracket);\n\
    \            }\n        }\n        return result;\n}\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp46dk07ba.java:33: error: char cannot be dereferenced\n        \
    \    } else if (bracket.equals('>') && bracketStack.isEmpty()) {\n           \
    \                   ^\n1 error\n"
  stdout: ''
  timestamp: 1660011770
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        ArrayList<Character> opened = new ArrayList<>();\n    \
    \    ArrayList<Character> closed = new ArrayList<>();\n        brackets.replaceAll(\"\
    [<>]\", \"\");\n        String[] split = brackets.split(\"\");\n        for (String\
    \ s: split) {\n            opened.add(s.charAt(0));\n            closed.add(s.charAt(s.length()-1));\n\
    \        }\n        int open = 0;\n        for(int i=0;i<opened.size();i++) {\n\
    \            if(opened.contains(opened.size()-1)) {\n                open++;\n\
    \            }\n        }\n        for(int i=opened.size()-1;i>0;i--) {\n    \
    \        if(opened.contains(i-1)) {\n                open++;\n            }\n\
    \        }\n        return open == closed.size();\n}\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptsok9mj_.java:42)\n"
  stdout: ''
  timestamp: 1660011770
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Map<Character, Boolean> pairs = new HashMap<Character,\
    \ Boolean>();\n        \n        for (char c : brackets.toCharArray()) {\n   \
    \         if (c != '<' && c != '>') {\n                continue;\n           \
    \ }\n            \n            Boolean existing = pairs.get(c);\n            if\
    \ (existing == null) {\n                pairs.put(c, true);\n            } else\
    \ {\n                if (c != '<') {\n                    pairs.put(c, existing);\n\
    \                } else {\n                    pairs.put(c, !existing);\n    \
    \            }\n            }\n        }\n        \n        for (Map.Entry<Character,\
    \ Boolean> entry : pairs.entrySet()) {\n            String value = String.valueOf(entry.getValue());\n\
    \            int l = value.length();\n            if (l < 2) {\n             \
    \   continue;\n            }\n            \n            boolean found = false;\n\
    \            for (int i = l - 1; i >= 0; i--) {\n                if (value.charAt(i)\
    \ == '<') {\n                    found = true;\n                    break;\n \
    \               }\n            }\n            \n            if (!found) {\n  \
    \              return false;\n            }\n        }\n        \n        return\
    \ true;\n}\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprhixpiae.java:62)\n"
  stdout: ''
  timestamp: 1660011770
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        int[] leftPos = new int[brackets.length()];\n        int[]\
    \ rightPos = new int[brackets.length()];\n        for(int i = 0; i < brackets.length();\
    \ i++) {\n            leftPos[i] = i;\n            rightPos[i] = i;\n        }\n\
    \        for(int i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '<')\n                leftPos[i] += 1;\n            else\
    \ if(c == '>')\n                rightPos[i] -= 1;\n        }\n        for(int\
    \ i = 0; i < leftPos.length; i++)\n            if(leftPos[i] != rightPos[i])\n\
    \                return false;\n        return true;\n}\n    public static void\
    \ main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpp6m2lc5z.java:39)\n"
  stdout: ''
  timestamp: 1660011770
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        int[] map = new int[brackets.length()];\n        for (int\
    \ i = 0; i < (brackets.length()); i++) {\n            map[i] = brackets.charAt(i)\
    \ == '<' ? 1 : 0;\n        }\n        int sum = 0;\n        for (int i = 0; i\
    \ < (brackets.length()); i++) {\n            sum += map[i];\n        }\n     \
    \   if (sum != brackets.length()) {\n            return false;\n        }\n  \
    \      int cur = 0;\n        for (int i = 0; i < (brackets.length()); i++) {\n\
    \            if (brackets.charAt(i) == '<') {\n                if (cur < i) {\n\
    \                    return false;\n                }\n                cur = i;\n\
    \            }\n            if (brackets.charAt(i) == '>') {\n               \
    \ if (cur == i) {\n                    return false;\n                }\n    \
    \            cur++;\n            }\n        }\n        return true;\n}\n    public\
    \ static void main(String[] args) {\n    assert(correctBracketing((\"<>\")) ==\
    \ (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphqkqqdny.java:49)\n"
  stdout: ''
  timestamp: 1660011771
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack<Character> stack = new Stack<>();\n        \n   \
    \     for(int i = 0; i < brackets.length(); i++)\n        {\n            char\
    \ c = brackets.charAt(i);\n            \n            // check if it's an opening\
    \ bracket\n            if(Character.isDigit(c))\n            {\n             \
    \   // handle nested brackets\n                while(Character.isDigit(brackets.charAt(i+1)))\n\
    \                {\n                    i++;\n                }\n            \
    \    stack.pop();\n            } else\n            {\n                // handle\
    \ nested brackets\n                if(brackets.charAt(i+1) != '<')\n         \
    \       {\n                    while(!stack.empty())\n                    {\n\
    \                        char top = stack.pop();\n                        if(top\
    \ == '<')\n                        {\n                            break;\n   \
    \                     }\n                        else if(!stack.empty() && top\
    \ != '>')\n                        {\n                            break;\n   \
    \                     }\n                    }\n                }\n          \
    \      stack.push(c);\n            }\n        }\n        \n        return stack.empty();\n\
    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StringIndexOutOfBoundsException:\
    \ String index out of range: 2\n\tat java.base/java.lang.StringLatin1.charAt(StringLatin1.java:48)\n\
    \tat java.base/java.lang.String.charAt(String.java:1515)\n\tat Problem.correctBracketing(tmpzk4euchb.java:38)\n\
    \tat Problem.main(tmpzk4euchb.java:60)\n"
  stdout: ''
  timestamp: 1660011771
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        List<String> list = Arrays.asList(brackets.split(\"<\"\
    ));\n        List<String> list2 = Arrays.asList(brackets.split(\">\"));\n    \
    \    list.forEach(c -> list2.remove(c));\n        return list2.isEmpty();\n}\n\
    \    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp21s4fg0f.java:26)\n"
  stdout: ''
  timestamp: 1660011772
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        String[] open = brackets.split(\"\\\\<\");\n        String[]\
    \ close = brackets.split(\"\\\\>\");\n        \n        Map<String, Boolean> openMap\
    \ = new HashMap<>();\n        for (String s: open) {\n            openMap.put(s,\
    \ true);\n        }\n        \n        Map<String, Boolean> closeMap = new HashMap<>();\n\
    \        for (String s: close) {\n            closeMap.put(s, true);\n       \
    \ }\n        \n        boolean allOpen = true;\n        for (String s: open) {\n\
    \            if (!openMap.containsKey(s)) {\n                allOpen = false;\n\
    \                break;\n            }\n        }\n        \n        boolean allClose\
    \ = true;\n        for (String s: close) {\n            if (!closeMap.containsKey(s))\
    \ {\n                allClose = false;\n                break;\n            }\n\
    \        }\n        return allOpen && allClose;\n}\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpaq4mfirp.java:55)\n"
  stdout: ''
  timestamp: 1660011772
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        int bracketSize = brackets.length();\n        \n      \
    \  if(bracketSize == 0) return false;\n        \n        char[] openingBrackets\
    \ = brackets.toCharArray();\n        \n        boolean allClosed = true;\n   \
    \     for(int i=0; i<openingBrackets.length; i++) {\n            if(openingBrackets[i]\
    \ == '<') {\n                if(!(i==0 && openingBrackets[i-1] == '>')) return\
    \ false;\n                if(!(i==0 && openingBrackets[i+1] == '<')) return false;\n\
    \                if(!(i==1 && openingBrackets[i-1] == '>')) return false;\n  \
    \              if(!(i==1 && openingBrackets[i+1] == '<')) return false;\n    \
    \            if(!(i==2 && openingBrackets[i-1] == '>')) return false;\n      \
    \          if(!(i==2 && openingBrackets[i+1] == '<')) return false;\n        \
    \        if(!(i==3 && openingBrackets[i-1] == '>')) return false;\n          \
    \      if(!(i==3 && openingBrackets[i+1] == '<')) return false;\n            \
    \    if(!(i==4 && openingBrackets[i-1] == '>')) return false;\n              \
    \  if(!(i==4 && openingBrackets[i+1] == '<')) return false;\n                allClosed\
    \ = false;\n                break;\n            }\n        }\n        \n     \
    \   return allClosed;\n}\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.ArrayIndexOutOfBoundsException:\
    \ Index -1 out of bounds for length 2\n\tat Problem.correctBracketing(tmpre1qzq5w.java:29)\n\
    \tat Problem.main(tmpre1qzq5w.java:47)\n"
  stdout: ''
  timestamp: 1660011771
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        return brackets.replaceAll(\"\\\\<\", \">\").replaceAll(\"\
    \\\\>\", \"<\").equals(brackets);\n}\n    public static void main(String[] args)\
    \ {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzvt315ee.java:23)\n"
  stdout: ''
  timestamp: 1660011772
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        List<String> openBrackets = new ArrayList<>();\n      \
    \  List<String> closeBrackets = new ArrayList<>();\n        for (char c : brackets.toCharArray())\
    \ {\n            boolean isOpen = Character.isLetter(c);\n            if (isOpen)\
    \ openBrackets.add(c);\n            else closeBrackets.add(c);\n        }\n\n\
    \        // if any opening bracket is missing, the string is incorrect\n     \
    \   for (String open : openBrackets) {\n            boolean hasClose = false;\n\
    \            for (String close : closeBrackets) {\n                if (open.equals(close))\
    \ {\n                    hasClose = true;\n                    break;\n      \
    \          }\n            }\n            if (!hasClose) {\n                return\
    \ false;\n            }\n        }\n\n        // if any closing bracket is missing,\
    \ the string is incorrect\n        for (String close : closeBrackets) {\n    \
    \        boolean hasOpen = false;\n            for (String open : openBrackets)\
    \ {\n                if (open.equals(close)) {\n                    hasOpen =\
    \ true;\n                    break;\n                }\n            }\n      \
    \      if (!hasOpen) {\n                return false;\n            }\n       \
    \ }\n\n        return true;\n}\n    public static void main(String[] args) {\n\
    \    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzc8v6qar.java:24: error: incompatible types: char cannot be converted\
    \ to String\n            if (isOpen) openBrackets.add(c);\n                  \
    \                       ^\n/tmp/tmpzc8v6qar.java:25: error: incompatible types:\
    \ char cannot be converted to String\n            else closeBrackets.add(c);\n\
    \                                   ^\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1660011771
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        List<String> openingBrackets = new ArrayList<String>();\n\
    \        List<String> closingBrackets = new ArrayList<String>();\n        for\
    \ (char c : brackets.toCharArray()) {\n            if (c == '<') {\n         \
    \       openingBrackets.add('<');\n            } else if (c == '>') {\n      \
    \          closingBrackets.add('>');\n            } else {\n                return\
    \ false;\n            }\n        }\n        return openingBrackets.equals(closingBrackets);\n\
    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpenzqck2_.java:24: error: incompatible types: char cannot be converted\
    \ to String\n                openingBrackets.add('<');\n                     \
    \               ^\n/tmp/tmpenzqck2_.java:26: error: incompatible types: char cannot\
    \ be converted to String\n                closingBrackets.add('>');\n        \
    \                            ^\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1660011771
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        if (brackets.length() < 2) return false;\n        boolean\
    \ hasNextBracket = false;\n        char[] currentBrackets = brackets.toCharArray();\n\
    \        char[] nextBrackets = new char[currentBrackets.length];\n        int\
    \ index = 0;\n        for (char c : currentBrackets) {\n            hasNextBracket\
    \ = true;\n            nextBrackets[index++] = c;\n            hasNextBracket\
    \ = hasNextBracket && hasNextBracket(nextBrackets, index - 1);\n        }\n  \
    \      return hasNextBracket;\n}\n    public static void main(String[] args) {\n\
    \    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp58ow_hlh.java:28: error: cannot find symbol\n            hasNextBracket\
    \ = hasNextBracket && hasNextBracket(nextBrackets, index - 1);\n             \
    \                                  ^\n  symbol:   method hasNextBracket(char[],int)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011771
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        List<String> bracketList = Arrays.asList(brackets.split(\"\
    \"));\n        List<String> leftBrackets = Arrays.asList(\"(\", \"[\", \"{\");\n\
    \        List<String> rightBrackets = Arrays.asList(\" )\", \"]\", \"}\");\n \
    \       return bracketList.stream()\n                .flatMap(s -> s.equals(\"\
    \") ? Stream.of(bracketList) : Stream.of(s.charAt(0), s.charAt(1)))\n        \
    \        .filter(s -> bracketList.stream()\n                        .noneMatch(x\
    \ -> x == s)) {\n                () -> new HashSet<>(leftBrackets),\n        \
    \        () -> new HashSet<>(rightBrackets));\n}\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqzvh13d5.java:26: error: ';' expected\n                       \
    \ .noneMatch(x -> x == s)) {\n                                               \
    \ ^\n/tmp/tmpqzvh13d5.java:27: error: not a statement\n                () -> new\
    \ HashSet<>(leftBrackets),\n                ^\n/tmp/tmpqzvh13d5.java:27: error:\
    \ ';' expected\n                () -> new HashSet<>(leftBrackets),\n         \
    \                                        ^\n/tmp/tmpqzvh13d5.java:28: error: ';'\
    \ expected\n                () -> new HashSet<>(rightBrackets));\n           \
    \                                       ^\n/tmp/tmpqzvh13d5.java:30: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n    ^\n5\
    \ errors\n"
  stdout: ''
  timestamp: 1660011770
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        int bracket = brackets.charAt(0);\n        if (bracket\
    \ == '<') {\n            return brackets.endsWith(\">\");\n        }\n       \
    \ if (bracket == '>') {\n            return brackets.startsWith(\"<\");\n    \
    \    }\n        return false;\n}\n    public static void main(String[] args) {\n\
    \    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpuqqqb2nt.java:34)\n"
  stdout: ''
  timestamp: 1660011772
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        int opening = 0;\n        for (int i = 0; i < brackets.length();\
    \ i++) {\n            if (brackets.charAt(i) == '>') {\n                opening++;\n\
    \            }\n            if (brackets.charAt(i) == '<') {\n               \
    \ opening--;\n            }\n            if (opening < 0) {\n                return\
    \ false;\n            }\n        }\n        return opening == 0;\n}\n    public\
    \ static void main(String[] args) {\n    assert(correctBracketing((\"<>\")) ==\
    \ (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmps56ctd.java:35)\n"
  stdout: ''
  timestamp: 1660011772
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        ArrayList<String> bracketsList = new ArrayList<String>();\n\
    \        bracketsList.add(\"<<><>>\");\n        bracketsList.add(\"<>\");\n  \
    \      bracketsList.add(\"<\");\n        bracketsList.add(\"<<\");\n        bracketsList.add(\"\
    <<><>\");\n        bracketsList.add(\"<>\");\n        bracketsList.add(\"<<>\"\
    );\n        bracketsList.add(\"<><>\");\n        bracketsList.add(\"<>\");\n \
    \       bracketsList.add(\"<>\");\n        bracketsList.add(\"<>\");\n       \
    \ bracketsList.add(\"<>\");\n        bracketsList.add(\"<<><>>\");\n        bracketsList.add(\"\
    <>\");\n        bracketsList.add(\"<>\");\n        bracketsList.add(\"<<<>>\"\
    );\n        bracketsList.add(\"<>\");\n        bracketsList.add(\"<<<\");\n  \
    \      bracketsList.add(\"<<<\");\n        bracketsList.add(\"<>>\");\n      \
    \  bracketsList.add(\"<\");\n        bracketsList.add(\"<<<\");\n        bracketsList.add(\"\
    <>>\");\n        bracketsList.add(\"<>\");\n        bracketsList.add(\"<<<>>\"\
    );\n        bracketsList.add(\"<>\");\n        bracketsList.add(\"<>\");\n   \
    \     bracketsList.add(\"<<<>>\");\n        bracketsList.add(\"<>\");\n      \
    \  bracketsList.add(\"<>\");\n        bracketsList.add(\"<><>\");\n        bracketsList.add(\"\
    <>\");\n        bracketsList.add(\"<<<><><>\");\n        bracketsList.add(\"<>\"\
    );\n        bracketsList.add(\"<>\");\n        bracketsList.add(\"<<<><><>\");\n\
    \        bracketsList.add(\"<>\");\n        bracketsList.add(\"<<<><><>\");\n\
    \        bracketsList.add(\"<>\");\n        bracketsList.add(\"<<<><><>\");\n\
    \        bracketsList.add(\"<>\");\n        bracketsList.add(\"<>\");\n      \
    \  bracketsList.add(\"<<<><><>\");\n        bracketsList.add(\"<>\");\n      \
    \  bracketsList.add(\"<>\");\n        bracketsList.add(\"<>\");\n        bracketsList.add(\"\
    <<<><><>\");\n        bracketsList.add(\"<>\");\n        bracketsList.add(\"<>\"\
    );\n        bracketsList.add(\"<<<><><>\");\n        bracketsList.add(\"<>\");\n\
    \        bracketsList.add(\"<>\");\n        bracketsList.add(\"<<<><><>\");\n\
    \        bracketsList.add(\"<>\");\n        bracketsList.add(\"<>\");\n      \
    \  bracketsList.add(\"<<<><><>\");\n        bracket\n}\n    public static void\
    \ main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpi99f3vti.java:77: error: not a statement\n        bracket\n   \
    \     ^\n/tmp/tmpi99f3vti.java:77: error: ';' expected\n        bracket\n    \
    \           ^\n2 errors\n"
  stdout: ''
  timestamp: 1660011771
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        return brackets.replace(\"<\", \"\").replace(\"<\", \"\"\
    ).replace(\">\", \"\").replace(\">\", \"\")\n                .equals(brackets.replace(\"\
    <\", \"\").replace(\"<\", \"\").replace(\">\", \"\").replace(\">\", \"\"));\n\
    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmje697la.java:28)\n"
  stdout: ''
  timestamp: 1660011772
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        if (brackets == null || brackets.length() == 0) return\
    \ true;\n        StringBuilder sb = new StringBuilder();\n        for (int i =\
    \ 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) == '<')\
    \ sb.append(\"<\");\n            if (brackets.charAt(i) == '>') sb.append(\">\"\
    );\n        }\n        return sb.length() == brackets.length();\n}\n    public\
    \ static void main(String[] args) {\n    assert(correctBracketing((\"<>\")) ==\
    \ (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwq6eesuv.java:33)\n"
  stdout: ''
  timestamp: 1660011772
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        if (brackets.length() == 0) return true;\n        String[]\
    \ arr = brackets.split(\"<>\");\n        Arrays.sort(arr);\n        return arr.length\
    \ == 2;\n}\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8jq8ut76.java:26)\n"
  stdout: ''
  timestamp: 1660011772
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        boolean valid = false;\n        for (int i = 0; i < brackets.length();\
    \ i++) {\n            String openingBracket = brackets.substring(i, i+1);\n  \
    \          if (openingBracket.equals(\"<\") && brackets.substring(i+1, i+3).equals(\"\
    >\")) {\n                valid = true;\n                break;\n            }\n\
    \        }\n        return valid;\n}\n    public static void main(String[] args)\
    \ {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StringIndexOutOfBoundsException:\
    \ begin 1, end 3, length 2\n\tat java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\
    \tat java.base/java.lang.String.substring(String.java:2707)\n\tat Problem.correctBracketing(tmp33fdbksq.java:23)\n\
    \tat Problem.main(tmp33fdbksq.java:31)\n"
  stdout: ''
  timestamp: 1660011772
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        return brackets.codePoints().all(b -> {\n            int\
    \ c = b.codePointAt(0);\n            return (c >= 65 && c <= 90) || (c >= 97 &&\
    \ c <= 122);\n        });\n}\n    public static void main(String[] args) {\n \
    \   assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7j081l2g.java:20: error: cannot find symbol\n        return brackets.codePoints().all(b\
    \ -> {\n                                    ^\n  symbol:   method all((b)->{ int[...]2);\
    \ })\n  location: interface IntStream\n1 error\n"
  stdout: ''
  timestamp: 1660011772
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        boolean result = false;\n        List<String> openings\
    \ = new ArrayList<>();\n        List<String> closings = new ArrayList<>();\n \
    \       for (int i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i)\
    \ == '<') {\n                openings.add(brackets.substring(0, i));\n       \
    \         closings.add(brackets.substring(i + 1, i + 2));\n            }\n   \
    \     }\n        if (openings.size() != closings.size()) {\n            return\
    \ false;\n        }\n        for (String opening : openings) {\n            for\
    \ (String closing : closings) {\n                if (opening.equals(closing))\
    \ {\n                    result = true;\n                    break;\n        \
    \        }\n            }\n        }\n        return result;\n}\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpolwaah_e.java:43)\n"
  stdout: ''
  timestamp: 1660011773
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        boolean openingBracketFound = false;\n        boolean closingBracketFound\
    \ = false;\n        for(int i = 0; i < brackets.length(); i++) {\n           \
    \ if(brackets.charAt(i) == '>') {\n                if((brackets.charAt(i+1) !=\
    \ '<') || (brackets.charAt(i) != '<')) {\n                    return false;\n\
    \                }\n                openingBracketFound = true;\n            \
    \    closingBracketFound = true;\n            } else if(brackets.charAt(i) ==\
    \ '<') {\n                if((brackets.charAt(i-1) != '>') || (brackets.charAt(i)\
    \ != '>')) {\n                    return false;\n                }\n         \
    \       openingBracketFound = true;\n                closingBracketFound = true;\n\
    \            } else if(brackets.charAt(i) == '<' && brackets.charAt(i+1) == '<')\
    \ {\n                if((brackets.charAt(i-2) != '>') || (brackets.charAt(i) !=\
    \ '>')) {\n                    return false;\n                }\n            \
    \    openingBracketFound = true;\n                closingBracketFound = true;\n\
    \            } else if(brackets.charAt(i) == '>' && brackets.charAt(i+1) == '<')\
    \ {\n                if((brackets.charAt(i-2) != '>') || (brackets.charAt(i) !=\
    \ '>')) {\n                    return false;\n                }\n            \
    \    openingBracketFound = true;\n                closingBracketFound = true;\n\
    \            } else if(brackets.charAt(i) == '>' && brackets.charAt(i+1) == '<'\
    \ && brackets.charAt(i+2) == '<') {\n                if((brackets.charAt(i-3)\
    \ != '>') || (brackets.charAt(i) != '>')) {\n                    return false;\n\
    \                }\n                openingBracketFound = true;\n            \
    \    closingBracketFound = true;\n            } else if(brackets.charAt(i) ==\
    \ '>' && brackets.charAt(i+1) == '<' && brackets.charAt(i+2) == '<' && brackets.charAt(i+3)\
    \ == '<') {\n                if((brackets.charAt(i-4) != '>') || (brackets.charAt(i)\
    \ != '>')) {\n                    return false;\n                }\n         \
    \       openingBracketFound = true;\n                closingBracketFound = true;\n\
    \            } else if(brackets.charAt(i) == '>' && brackets.charAt(i+1) == '<'\
    \ && brackets.charAt(i+2) == '<' && brackets.charAt(i+3) == '<' && brackets.charAt(i+4)\
    \ == '<') {\n                if((brackets.charAt(i-5) != '>') || (brackets.charAt(i)\
    \ != '>')) {\n                    return false;\n                }\n         \
    \       openingBracketFound = true;\n                closingBracketFound = true;\n\
    \            } else if(brackets.charAt(i) == '>' && brackets.charAt(i+1) == '<'\
    \ && brackets.charAt(i+2) == '<' && \n}\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb5of3sal.java:66: error: illegal start of expression\n}\n^\n/tmp/tmpb5of3sal.java:67:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n    ^\n2 errors\n"
  stdout: ''
  timestamp: 1660011772
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        List<String> valid = new ArrayList<>();\n        int count\
    \ = 0;\n        for (int i = 0; i < brackets.length(); i++) {\n            if\
    \ (brackets.charAt(i) == '<') {\n                valid.add(brackets.substring(count\
    \ + 1, i));\n            }\n            if (brackets.charAt(i) == '>') {\n   \
    \             valid.add(brackets.substring(count, i + 1));\n            }\n  \
    \          count = i;\n        }\n        return valid.isEmpty();\n}\n    public\
    \ static void main(String[] args) {\n    assert(correctBracketing((\"<>\")) ==\
    \ (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StringIndexOutOfBoundsException:\
    \ begin 1, end 0, length 2\n\tat java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\
    \tat java.base/java.lang.String.substring(String.java:2707)\n\tat Problem.correctBracketing(tmpmg45qumi.java:24)\n\
    \tat Problem.main(tmpmg45qumi.java:34)\n"
  stdout: ''
  timestamp: 1660011773
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        return brackets.chars().map(e -> e == '<').count() * 2\
    \ < brackets.length();\n}\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgv_dg_j0.java:20: error: incompatible types: bad return type in\
    \ lambda expression\n        return brackets.chars().map(e -> e == '<').count()\
    \ * 2 < brackets.length();\n                                           ^\n   \
    \ boolean cannot be converted to int\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660011773
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Set<Character> open = new HashSet<>();\n        Set<Character>\
    \ close = new HashSet<>();\n\n        List<Character> chars = brackets.chars().mapToObj(b\
    \ -> b + \"\").collect(Collectors.toList());\n\n        for (int i = 1; i < chars.size();\
    \ i++) {\n            if (chars.get(i - 1) == chars.get(i)) {\n              \
    \  open.add(chars.get(i - 1));\n            }\n            if (chars.get(i - 1)\
    \ == '>') {\n                open.add(chars.get(i - 1));\n                close.add(chars.get(i\
    \ + 1));\n            }\n            if (chars.get(i + 1) == '>') {\n        \
    \        open.add(chars.get(i + 1));\n                close.add(chars.get(i -\
    \ 1));\n            }\n            if (chars.get(i - 1) == '>' && chars.get(i\
    \ + 1) == '>') {\n                open.add(chars.get(i - 1));\n              \
    \  close.add(chars.get(i + 1));\n            }\n        }\n\n        return open.equals(close);\n\
    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv4v28hg6.java:23: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        List<Character> chars = brackets.chars().mapToObj(b\
    \ -> b + \"\").collect(Collectors.toList());\n                               \
    \                                               ^\n    equality constraints: Character\n\
    \    lower bounds: String\n  where T is a type-variable:\n    T extends Object\
    \ declared in method <T>toList()\n1 error\n"
  stdout: ''
  timestamp: 1660011773
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        return brackets.replace(\"<\", \"\").replace(\"<\", \"\"\
    ).replace(\">\", \"\").replace(\">\", \"\").replaceAll(\"<\", \"\").replaceAll(\"\
    >\", \"\").replaceAll(\"\\\\<\", \"\").replaceAll(\"\\\\>\", \"\").replaceAll(\"\
    \\\\<\\\\<\", \"\").replaceAll(\"\\\\>\\\\>\", \"\").isEmpty();\n}\n    public\
    \ static void main(String[] args) {\n    assert(correctBracketing((\"<>\")) ==\
    \ (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpa9dppphr.java:27)\n"
  stdout: ''
  timestamp: 1660011774
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        // Use an ordered list to keep the correct order\n    \
    \    List<String> bracketList = new ArrayList<>();\n        for (String bracket\
    \ : brackets.split(\"<>\")) {\n            bracketList.add(bracket);\n       \
    \ }\n\n        String lastBracket = null;\n        // Keep track of all the brackets\
    \ that have been encountered\n        Set<String> bracketsSeen = new HashSet<>();\n\
    \        for (String bracket : bracketList) {\n            // If it's a new bracket,\
    \ remember it.\n            if (lastBracket == null) {\n                lastBracket\
    \ = bracket;\n            }\n            // If it's a matching bracket, remove\
    \ it from the list of seen brackets\n            if (lastBracket.equals(bracket))\
    \ {\n                bracketsSeen.remove(bracket);\n            }\n          \
    \  // If it's a new bracket, remember it\n            if (bracketsSeen.contains(bracket))\
    \ {\n                return false;\n            }\n            // If it's a new\
    \ bracket, remember it\n            lastBracket = bracket;\n        }\n      \
    \  // Make sure we return true if there are any brackets left\n        return\
    \ bracketsSeen.size() != 0;\n}\n    public static void main(String[] args) {\n\
    \    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwja_htzm.java:49)\n"
  stdout: ''
  timestamp: 1660011774
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Set<Character> bracketSet = new HashSet<>(brackets.length());\n\
    \        for (int i = 0; i < brackets.length(); i++) {\n            char bracket\
    \ = brackets.charAt(i);\n            if (bracketSet != null) {\n             \
    \   bracketSet.add(bracket);\n            }\n        }\n        boolean result\
    \ = bracketSet.equals(new HashSet<>());\n        return result;\n}\n    public\
    \ static void main(String[] args) {\n    assert(correctBracketing((\"<>\")) ==\
    \ (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpx_9hyf7e.java:31)\n"
  stdout: ''
  timestamp: 1660011774
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        String[] opens = brackets.split(\"<\");\n        String[]\
    \ closes = brackets.split(\">\");\n        if (opens.length != closes.length)\n\
    \            return false;\n\n        Set<String> openSet = new HashSet<>();\n\
    \        Set<String> closeSet = new HashSet<>();\n        for(int i = 0; i < opens.length;\
    \ ++i) {\n            openSet.add(opens[i]);\n            closeSet.add(closes[i]);\n\
    \        }\n\n        return openSet.equals(closeSet);\n}\n    public static void\
    \ main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxce00o8_.java:35)\n"
  stdout: ''
  timestamp: 1660011774
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack<Integer> stack = new Stack<>();\n        List<Integer>\
    \ openBrackets = Arrays.asList(\"<\", \">\", \"<=\", \">=\", \"==\", \"!=\");\n\
    \        boolean result = false;\n\n        for(int i=0; i<brackets.length();\
    \ i++) {\n            char c = brackets.charAt(i);\n\n            if (openBrackets.contains(c))\
    \ {\n                stack.push(i);\n            }\n        }\n\n        while(!stack.isEmpty())\
    \ {\n            int index = stack.pop();\n\n            if (c == '>') {\n   \
    \             if (openBrackets.contains(brackets.charAt(index - 1))) {\n     \
    \               stack.push(index - 1);\n                }\n            }\n\n \
    \           else if (c == '>=') {\n                if (openBrackets.contains(brackets.charAt(index\
    \ - 2))) {\n                    stack.push(index - 2);\n                }\n  \
    \          }\n\n            else if (c == '<') {\n                if (openBrackets.contains(brackets.charAt(index\
    \ + 1))) {\n                    stack.push(index + 1);\n                }\n  \
    \          }\n\n            else if (c == '<=') {\n                if (openBrackets.contains(brackets.charAt(index\
    \ + 2))) {\n                    stack.push(index + 2);\n                }\n  \
    \          }\n\n            else if (c == '==') {\n                if (openBrackets.contains(brackets.charAt(index\
    \ + 3))) {\n                    stack.push(index + 3);\n                }\n  \
    \          }\n\n            else if (c == '!=') {\n                if (openBrackets.contains(brackets.charAt(index\
    \ + 4))) {\n                    stack.push(index + 4);\n                }\n  \
    \          }\n\n            else {\n                result = true;\n         \
    \   }\n        }\n\n        return result;\n}\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4_qp0fuy.java:41: error: unclosed character literal\n         \
    \   else if (c == '>=') {\n                          ^\n/tmp/tmp4_qp0fuy.java:41:\
    \ error: unclosed character literal\n            else if (c == '>=') {\n     \
    \                        ^\n/tmp/tmp4_qp0fuy.java:53: error: unclosed character\
    \ literal\n            else if (c == '<=') {\n                          ^\n/tmp/tmp4_qp0fuy.java:47:\
    \ error: 'else' without 'if'\n            else if (c == '<') {\n            ^\n\
    /tmp/tmp4_qp0fuy.java:53: error: unclosed character literal\n            else\
    \ if (c == '<=') {\n                             ^\n/tmp/tmp4_qp0fuy.java:59:\
    \ error: unclosed character literal\n            else if (c == '==') {\n     \
    \                     ^\n/tmp/tmp4_qp0fuy.java:59: error: 'else' without 'if'\n\
    \            else if (c == '==') {\n            ^\n/tmp/tmp4_qp0fuy.java:59: error:\
    \ unclosed character literal\n            else if (c == '==') {\n            \
    \                 ^\n/tmp/tmp4_qp0fuy.java:65: error: unclosed character literal\n\
    \            else if (c == '!=') {\n                          ^\n/tmp/tmp4_qp0fuy.java:65:\
    \ error: 'else' without 'if'\n            else if (c == '!=') {\n            ^\n\
    /tmp/tmp4_qp0fuy.java:65: error: unclosed character literal\n            else\
    \ if (c == '!=') {\n                             ^\n/tmp/tmp4_qp0fuy.java:71:\
    \ error: 'else' without 'if'\n            else {\n            ^\n12 errors\n"
  stdout: ''
  timestamp: 1660011773
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        // TODO Auto-generated method stub\n        Stack<Character>\
    \ stack = new Stack<Character>();\n        for(int i = 0; i < brackets.length();\
    \ i++) {\n            char bracket = brackets.charAt(i);\n            if(stack.empty())\
    \ {\n                if(bracket == '<') stack.push('<');\n                else\
    \ if(bracket == '>') stack.push('>');\n                else if(bracket == '(')\
    \ stack.push('(');\n                else if(char.IsLetter(bracket)) stack.push(Character.toString(bracket));\n\
    \            }\n            else if(bracket == stack.peek()) {\n             \
    \   stack.pop();\n            } else {\n                return false;\n      \
    \      }\n        }\n        return stack.empty();\n}\n    public static void\
    \ main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpq7q44tfz.java:28: error: class expected\n                else if(char.IsLetter(bracket))\
    \ stack.push(Character.toString(bracket));\n                             ^\n/tmp/tmpq7q44tfz.java:28:\
    \ error: ')' expected\n                else if(char.IsLetter(bracket)) stack.push(Character.toString(bracket));\n\
    \                                     ^\n/tmp/tmpq7q44tfz.java:28: error: ';'\
    \ expected\n                else if(char.IsLetter(bracket)) stack.push(Character.toString(bracket));\n\
    \                                              ^\n3 errors\n"
  stdout: ''
  timestamp: 1660011773
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        // Create a stack\n        Stack<Character> stack = new\
    \ Stack<>();\n        // We will use characters from brackets as delimiters\n\
    \        Stack<Character> delimiterStack = new Stack<>();\n        // Create a\
    \ stack that will be filled up with the closing delimiters\n        Stack<Character>\
    \ closeStack = new Stack<>();\n        // Our boolean value\n        boolean allBrackets\
    \ = true;\n        // Split the string into its respective characters\n      \
    \  String[] strArr = brackets.split(\"(?<=\\\\W)(?=\\\\W)\");\n        // For\
    \ each character in the string\n        for (String str : strArr) {\n        \
    \    // If we see a delimiter, push the delimiter onto the stack\n           \
    \ if (str.equals(\"<\"))\n                delimiterStack.push(str.charAt(0));\n\
    \            if (str.equals(\">\"))\n                delimiterStack.push(str.charAt(0));\n\
    \            // If we see a closing delimiter, pop the delimiter off the stack\n\
    \            else if (str.equals(\">>\")) {\n                while (delimiterStack.peek()\
    \ != '>')\n                    delimiterStack.pop();\n                delimiterStack.pop();\n\
    \            }\n            else if (str.equals(\"<<\")) {\n                while\
    \ (delimiterStack.peek() != \"<\")\n                    delimiterStack.pop();\n\
    \                delimiterStack.pop();\n            }\n            // If we see\
    \ a closing delimiter, pop the delimiter off the stack\n            else if (str.equals(\"\
    <->\")) {\n                while (delimiterStack.peek() != \"<\")\n          \
    \          delimiterStack.pop();\n                delimiterStack.pop();\n    \
    \        }\n            else if (str.equals(\"<->>\")) {\n                while\
    \ (delimiterStack.peek() != \"<\")\n                    delimiterStack.pop();\n\
    \                while (delimiterStack.peek() != \"->\")\n                   \
    \ delimiterStack.pop();\n                delimiterStack.pop();\n            }\n\
    \            // If we see anything else, we need to add it onto the stack\n  \
    \          else {\n                stack.push(str.charAt(0));\n            }\n\
    \        }\n        // While the stack is not empty, if the stack contains an\
    \ opening bracket (>),\n        // then we are done since there are no more brackets\
    \ to check.\n        // Otherwise, pop one character off the stack\n        while\
    \ (!stack.isEmpty()) {\n            char ch = stack.peek();\n            if (ch\
    \ == '>')\n                break;\n            else if (ch == '<') {\n       \
    \         stack.pop();\n                delimiterStack.push(ch);\n           \
    \ }\n            else {\n                stack.push(ch);\n                delimiterStack.push(ch);\n\
    \            }\n        }\n        // Pop the delimiters from the stack\n    \
    \    delimiterStack.pop();\n        // While the delimiters are still on the stack\n\
    \        while (!delimiterStack.isEmpty()) {\n            // If the delimiters\
    \ are '>' or '<', pop the delimiters off the stack\n            if (delimiterStack.peek\n\
    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcb3_6fbj.java:87: error: ')' expected\n            if (delimiterStack.peek\n\
    \                                   ^\n/tmp/tmpcb3_6fbj.java:88: error: illegal\
    \ start of statement\n}\n^\n/tmp/tmpcb3_6fbj.java:89: error: illegal start of\
    \ expression\n    public static void main(String[] args) {\n    ^\n3 errors\n"
  stdout: ''
  timestamp: 1660011773
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        char[] chars = brackets.toCharArray();\n        for (int\
    \ i = 0; i < chars.length; i++) {\n            if (chars[i] == '<') {\n      \
    \          // if this is a left opening bracket\n                if (i+1 < chars.length\
    \ && chars[i+1] == '>') {\n                    // if this is an exact right closing\
    \ bracket\n                    if (i+2 < chars.length && chars[i+2] == '>') {\n\
    \                        // if this is the only opening bracket at the end\n \
    \                       if (i+3 < chars.length && chars[i+3] == '<') {\n     \
    \                       return true;\n                        }\n            \
    \        }\n                }\n            }\n        }\n        return false;\n\
    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpukk8lip_.java:38)\n"
  stdout: ''
  timestamp: 1660011774
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        return brackets.replaceAll(\"</?[^>]*>\", \"\").equals(\"\
    <\");\n}\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpezy0e64z.java:23)\n"
  stdout: ''
  timestamp: 1660011774
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        if (brackets == null || brackets.length() != 2) {\n   \
    \         return false;\n        }\n        char[] opens = brackets.toCharArray();\n\
    \        for (int i = 0; i < opens.length; ++i) {\n            if (opens[i] ==\
    \ '<') {\n                if (i + 1 == opens.length || opens[i + 1] != '>') {\n\
    \                    return false;\n                }\n            } else if (opens[i]\
    \ == '>') {\n                if (i == 0 || opens[i - 1] != '>') {\n          \
    \          return false;\n                }\n            } else {\n          \
    \      return false;\n            }\n        }\n        return true;\n}\n    public\
    \ static void main(String[] args) {\n    assert(correctBracketing((\"<>\")) ==\
    \ (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpazvq9ot0.java:40)\n"
  stdout: ''
  timestamp: 1660011774
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        List<Character> openingBrackets = new ArrayList<>();\n\
    \        for (char c : brackets.toCharArray()) {\n            if (c == '<') openingBrackets.add(c);\n\
    \            if (c == '>') openingBrackets.add(c);\n        }\n        return\
    \ openingBrackets.stream().allMatch(openingBracket -> closingBrackets.contains(openingBracket));\n\
    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2ra9qk26.java:25: error: cannot find symbol\n        return openingBrackets.stream().allMatch(openingBracket\
    \ -> closingBrackets.contains(openingBracket));\n                            \
    \                                       ^\n  symbol:   variable closingBrackets\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011774
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        List<String> openBrackets = getOpenBrackets(brackets);\n\
    \        List<String> closeBrackets = getCloseBrackets(brackets);\n        if\
    \ (openBrackets.size() == closeBrackets.size())\n            return true;\n  \
    \      return false;\n}\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkelrn9oc.java:20: error: cannot find symbol\n        List<String>\
    \ openBrackets = getOpenBrackets(brackets);\n                                \
    \    ^\n  symbol:   method getOpenBrackets(String)\n  location: class Problem\n\
    /tmp/tmpkelrn9oc.java:21: error: cannot find symbol\n        List<String> closeBrackets\
    \ = getCloseBrackets(brackets);\n                                     ^\n  symbol:\
    \   method getCloseBrackets(String)\n  location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660011774
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        if (brackets.length() == 0)\n            return false;\n\
    \        int len = brackets.length();\n        // return true if brackets is correctly\
    \ balanced\n        // otherwise, return false.\n        // if brackets is empty,\
    \ return false\n        if (len == 0)\n            return false;\n        int\
    \ openBrackets = 0;\n        int i;\n        for (i = 0; i < len; ++i)\n     \
    \       if (brackets.charAt(i) == '<')\n                openBrackets++;\n    \
    \        else if (brackets.charAt(i) == '>')\n                openBrackets--;\n\
    \            else\n                return false;\n        // if open brackets\
    \ are 0, return true\n        if (openBrackets == 0)\n            return true;\n\
    \        // otherwise, return false\n        else\n            return false;\n\
    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpt4bap1s4.java:50)\n"
  stdout: ''
  timestamp: 1660011774
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        return brackets.replaceAll(\"(\\\\<)|\\\\>\", \"\").isEmpty();\n\
    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphi9xccs3.java:27)\n"
  stdout: ''
  timestamp: 1660011774
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        String[] opening = brackets.split(\">\");\n        String[]\
    \ closing = brackets.split(\"<\");\n        if (opening.length != closing.length)\
    \ {\n            return false;\n        }\n        Arrays.sort(opening);\n   \
    \     Arrays.sort(closing);\n        for (int i = 0; i < opening.length; i++)\
    \ {\n            if (opening[i] != closing[i]) {\n                return false;\n\
    \            }\n        }\n        return true;\n}\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpczyn4ewe.java:35)\n"
  stdout: ''
  timestamp: 1660011774
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        if (brackets == null || brackets.length() < 2) return true;\n\
    \        boolean left = false;\n        boolean right = false;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                left = true;\n            } else if (brackets.charAt(i)\
    \ == '>') {\n                right = true;\n            }\n        }\n       \
    \ return left && right;\n}\n    public static void main(String[] args) {\n   \
    \ assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpal3ejhac.java:37)\n"
  stdout: ''
  timestamp: 1660011774
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Set<Character> opening = brackets.chars()\n           \
    \ .mapToObj(i -> (char) i)\n            .collect(Collectors.toSet());\n      \
    \  Set<Character> closing = brackets.chars()\n            .filter(i -> i != '<')\n\
    \            .collect(Collectors.toSet());\n        return Sets.symmetricDifference(opening,\
    \ closing).isEmpty();\n}\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp77geagwj.java:25: error: method collect in interface IntStream\
    \ cannot be applied to given types;\n            .collect(Collectors.toSet());\n\
    \            ^\n  required: Supplier<R>,ObjIntConsumer<R>,BiConsumer<R,R>\n  found:\
    \    Collector<Object,CAP#1,Set<Object>>\n  reason: cannot infer type-variable(s)\
    \ R\n    (actual and formal argument lists differ in length)\n  where R is a type-variable:\n\
    \    R extends Object declared in method <R>collect(Supplier<R>,ObjIntConsumer<R>,BiConsumer<R,R>)\n\
    \  where CAP#1 is a fresh type-variable:\n    CAP#1 extends Object from capture\
    \ of ?\n/tmp/tmp77geagwj.java:25: error: incompatible types: cannot infer type-variable(s)\
    \ R\n            .collect(Collectors.toSet());\n                    ^\n    (argument\
    \ mismatch; no instance(s) of type variable(s) CAP#1,T exist so that Collector<T,?,Set<T>>\
    \ conforms to Supplier<R>)\n  where R,T are type-variables:\n    R extends Object\
    \ declared in method <R>collect(Supplier<R>,ObjIntConsumer<R>,BiConsumer<R,R>)\n\
    \    T extends Object declared in method <T>toSet()\n  where CAP#1 is a fresh\
    \ type-variable:\n    CAP#1 extends Object from capture of ?\n/tmp/tmp77geagwj.java:26:\
    \ error: cannot find symbol\n        return Sets.symmetricDifference(opening,\
    \ closing).isEmpty();\n               ^\n  symbol:   variable Sets\n  location:\
    \ class Problem\n3 errors\n"
  stdout: ''
  timestamp: 1660011774
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        // \"(\" and \"{\" are special.  We have to account for\
    \ them.\n        char bracketType = brackets.charAt(0);\n        if (bracketType\
    \ == '(') {\n            return check_brackets(brackets, 1);\n        } else if\
    \ (bracketType == '{') {\n            return check_brackets(brackets, 2);\n  \
    \      } else {\n            // else assume it to be bracketType == \"<\"\n  \
    \          return check_brackets(brackets, 1);\n        }\n}\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpk1ga3cnt.java:23: error: cannot find symbol\n            return\
    \ check_brackets(brackets, 1);\n                   ^\n  symbol:   method check_brackets(String,int)\n\
    \  location: class Problem\n/tmp/tmpk1ga3cnt.java:25: error: cannot find symbol\n\
    \            return check_brackets(brackets, 2);\n                   ^\n  symbol:\
    \   method check_brackets(String,int)\n  location: class Problem\n/tmp/tmpk1ga3cnt.java:28:\
    \ error: cannot find symbol\n            return check_brackets(brackets, 1);\n\
    \                   ^\n  symbol:   method check_brackets(String,int)\n  location:\
    \ class Problem\n3 errors\n"
  stdout: ''
  timestamp: 1660011774
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        return brackets.codePoints().filter(ch -> ch != '<').allMatch(ch\
    \ -> ch == '>') ||\n            brackets.codePoints().filter(ch -> ch != '<').anyMatch(ch\
    \ -> ch == '<');\n}\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpta7tmblu.java:28)\n"
  stdout: ''
  timestamp: 1660011775
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        boolean bracketsOK = true;\n        String bracket = \"\
    \";\n        int count = 0;\n        for(int i = 0; i < brackets.length(); i++)\
    \ {\n            bracket = brackets.charAt(i);\n            if(count == 0) {\n\
    \                if(bracket == '<') {\n                    count++;\n        \
    \        }\n            }\n            if(bracket == '>') {\n                count--;\n\
    \            }\n            if(bracket == '<' && count == -1) {\n            \
    \    bracketsOK = false;\n                break;\n            }\n        }\n \
    \       return bracketsOK;\n}\n    public static void main(String[] args) {\n\
    \    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpapwe3a95.java:24: error: incompatible types: char cannot be converted\
    \ to String\n            bracket = brackets.charAt(i);\n                     \
    \                ^\n/tmp/tmpapwe3a95.java:26: error: bad operand types for binary\
    \ operator '=='\n                if(bracket == '<') {\n                      \
    \     ^\n  first type:  String\n  second type: char\n/tmp/tmpapwe3a95.java:30:\
    \ error: bad operand types for binary operator '=='\n            if(bracket ==\
    \ '>') {\n                       ^\n  first type:  String\n  second type: char\n\
    /tmp/tmpapwe3a95.java:33: error: bad operand types for binary operator '=='\n\
    \            if(bracket == '<' && count == -1) {\n                       ^\n \
    \ first type:  String\n  second type: char\n4 errors\n"
  stdout: ''
  timestamp: 1660011775
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        ArrayList<String> openings = new ArrayList<String>();\n\
    \        ArrayList<String> closings = new ArrayList<String>();\n        ArrayList<String>\
    \ bracketsList = new ArrayList<String>();\n        for (int i = 0; i < brackets.length();\
    \ i++) {\n            if ((brackets.charAt(i) == '<') || (brackets.charAt(i) ==\
    \ '>')) {\n                openings.add(brackets.substring(i, i + 1));\n     \
    \       }\n            if (brackets.charAt(i) == '>') {\n                closings.add(brackets.substring(i,\
    \ i + 1));\n            }\n            bracketsList.add(brackets.substring(i,\
    \ i + 1));\n        }\n        for (int i = 0; i < openings.size(); i++) {\n \
    \           for (int j = i; j < openings.size() && (openings.get(i) == openings.get(j));\
    \ j++) {\n                openings.remove(j);\n                closings.remove(j);\n\
    \                bracketsList.remove(j);\n            }\n        }\n        Collections.reverse(openings);\n\
    \        Collections.reverse(closings);\n        Collections.reverse(bracketsList);\n\
    \        if (openings.isEmpty() && closings.isEmpty() && bracketsList.isEmpty())\
    \ {\n            return true;\n        }\n        return false;\n}\n    public\
    \ static void main(String[] args) {\n    assert(correctBracketing((\"<>\")) ==\
    \ (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpeu0nd0jo.java:48)\n"
  stdout: ''
  timestamp: 1660011775
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        if (brackets.length() != 0) {\n            if (brackets.charAt(0)\
    \ == '<') return (brackets.charAt(1) == '<') && (brackets.charAt(2) == '<') &&\
    \ (brackets.charAt(3) == '>');\n            if (brackets.charAt(0) == '>') return\
    \ (brackets.charAt(1) == '<') && (brackets.charAt(2) == '>') && (brackets.charAt(3)\
    \ == '>');\n            if (brackets.charAt(0) == '<') return (brackets.charAt(1)\
    \ == '<') && (brackets.charAt(2) == '>') && (brackets.charAt(3) == '>');\n   \
    \         if (brackets.charAt(0) == '<') return (brackets.charAt(1) == '<') &&\
    \ (brackets.charAt(2) == '>') && (brackets.charAt(3) == '<');\n            if\
    \ (brackets.charAt(0) == '<') return (brackets.charAt(1) == '<') && (brackets.charAt(2)\
    \ == '<') && (brackets.charAt(3) == '<');\n            if (brackets.charAt(0)\
    \ == '>') return (brackets.charAt(1) == '<') && (brackets.charAt(2) == '>') &&\
    \ (brackets.charAt(3) == '>');\n            if (brackets.charAt(0) == '>') return\
    \ (brackets.charAt(1) == '<') && (brackets.charAt(2) == '<') && (brackets.charAt(3)\
    \ == '<');\n            if (brackets.charAt(0) == '>') return (brackets.charAt(1)\
    \ == '<') && (brackets.charAt(2) == '>') && (brackets.charAt(3) == '<');\n   \
    \         if (brackets.charAt(0) == '>') return (brackets.charAt(1) == '<') &&\
    \ (brackets.charAt(2) == '<') && (brackets.charAt(3) == '>');\n        }\n   \
    \     return false;\n}\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmps48y71pg.java:34)\n"
  stdout: ''
  timestamp: 1660011775
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        return brackets.replaceAll(\"(\\\\<)|\\\\>\", \"\").equals(brackets);\n\
    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_80mu6p0.java:23)\n"
  stdout: ''
  timestamp: 1660011775
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack<Character> stack = new Stack<>();\n        for (char\
    \ ch : brackets.toCharArray()) {\n            if (ch == '<') {\n             \
    \   stack.push('<');\n            } else if (ch == '>') {\n                String\
    \ opening = stack.pop();\n                String closing = ch;\n             \
    \   stack.push(closing);\n            } else {\n                stack.push(ch);\n\
    \            }\n        }\n        return stack.isEmpty();\n}\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5vahs8wy.java:25: error: incompatible types: Character cannot be\
    \ converted to String\n                String opening = stack.pop();\n       \
    \                                   ^\n/tmp/tmp5vahs8wy.java:26: error: incompatible\
    \ types: char cannot be converted to String\n                String closing =\
    \ ch;\n                                 ^\n/tmp/tmp5vahs8wy.java:27: error: incompatible\
    \ types: String cannot be converted to Character\n                stack.push(closing);\n\
    \                           ^\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n3 errors\n"
  stdout: ''
  timestamp: 1660011775
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        String[] parts = brackets.split(\"<>\");\n        for(int\
    \ i = 0; i < parts.length - 1; i++) {\n            if (!parts[i].equals(parts[i\
    \ + 1])) {\n                return false;\n            }\n        }\n        return\
    \ true;\n}\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprp2f_rsq.java:30)\n"
  stdout: ''
  timestamp: 1660011775
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        int count = 0;\n        for (int i = 0; i < brackets.length();\
    \ i++) {\n            if (brackets.charAt(i) == '<') {\n                count++;\n\
    \            } else if (brackets.charAt(i) == '>') {\n                count--;\n\
    \            }\n        }\n        return count == 0;\n}\n    public static void\
    \ main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpw6m6r294.java:36)\n"
  stdout: ''
  timestamp: 1660011776
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        String[] openings = brackets.split(\"[<>]\");\n       \
    \ for (String opening : openings) {\n            if (opening.charAt(0) != '<')\
    \ {\n                return false;\n            }\n            opening = opening.substring(1);\n\
    \            if (opening.length() != 1) {\n                return false;\n   \
    \         }\n            int len = opening.length();\n            String closing\
    \ = opening.substring(0, len);\n            int opening_len = opening.length();\n\
    \            if (len != opening_len) {\n                return false;\n      \
    \      }\n            if (closing.charAt(0) != '>') {\n                return\
    \ false;\n            }\n            closing = closing.substring(1);\n       \
    \     if (closing.length() != 1) {\n                return false;\n          \
    \  }\n            int closing_len = closing.length();\n            int open_len\
    \ = opening.length();\n            if (len != closing_len || open_len != closing_len)\
    \ {\n                return false;\n            }\n            String opening2\
    \ = opening + opening;\n            String closing2 = closing + closing;\n   \
    \         if (opening2.equals(\"<\" + opening) &&\n                    closing2.equals(\"\
    >\" + closing)) {\n                return true;\n            }\n        }\n  \
    \      return false;\n}\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzhapoqe9.java:57)\n"
  stdout: ''
  timestamp: 1660011776
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        List<String> openings = new ArrayList<>();\n        List<String>\
    \ closings = new ArrayList<>();\n\n        // We split the brackets string on\
    \ \"<<\", which splits on each opening\n        // and closing bracket.\n    \
    \    for (String b : brackets.split(\"<<\")) {\n            // We first add an\
    \ opening bracket to the openings list.\n            if (!b.isEmpty()) {\n   \
    \             openings.add(b);\n            }\n\n            // We then add a\
    \ closing bracket to the closing list.\n            if (!b.isEmpty()) {\n    \
    \            closings.add(b);\n            }\n        }\n\n        // We then\
    \ want to iterate through the opening brackets and see if we\n        // have\
    \ a matching closing bracket. As soon as we find a matching\n        // opening\
    \ bracket we will return True.\n        for (String b : openings) {\n        \
    \    boolean matched = false;\n            for (String c : closings) {\n     \
    \           if (b.equals(c)) {\n                    matched = true;\n        \
    \            break;\n                }\n            }\n\n            if (!matches)\
    \ {\n                return false;\n            }\n        }\n\n        // If\
    \ we get here then we have found a matching closing bracket for\n        // every\
    \ opening bracket. This means that all the openings have\n        // corresponding\
    \ closing brackets.\n        return true;\n}\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpukwo955o.java:49: error: cannot find symbol\n            if (!matches)\
    \ {\n                 ^\n  symbol:   variable matches\n  location: class Problem\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011776
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        if (brackets == null) return false;\n        List<Integer>\
    \ stack = new ArrayList<Integer>();\n        StringBuilder output = new StringBuilder();\n\
    \        for (int i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i)\
    \ == '<') {\n                if (stack.size() > 0) {\n                    if (stack.size()\
    \ == 1 && stack.contains(i)) {\n                        output.append(brackets.charAt(i));\n\
    \                        stack.remove(i);\n                    } else {\n    \
    \                    output.append(brackets.charAt(i));\n                    }\n\
    \                } else {\n                    stack.add(i);\n               \
    \ }\n            } else if (brackets.charAt(i) == '>') {\n                if (stack.size()\
    \ > 0) {\n                    if (stack.size() == 0 && stack.contains(i)) {\n\
    \                        output.append(brackets.charAt(i));\n                \
    \        stack.remove(i);\n                    } else {\n                    \
    \    output.append(brackets.charAt(i));\n                    }\n             \
    \   } else {\n                    return false;\n                }\n         \
    \   }\n        }\n        return output.toString().equalsIgnoreCase(brackets);\n\
    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4zr58fee.java:51)\n"
  stdout: ''
  timestamp: 1660011776
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        if (brackets.length() == 0)\n            return true;\n\
    \        if (brackets.length() == 1)\n            return false;\n        boolean\
    \ first = true;\n        char lastChar = brackets.charAt(0);\n        boolean\
    \ lastCharIsOpen = true;\n        for (int i = 1; i < brackets.length(); i++)\
    \ {\n            if (brackets.charAt(i) != lastChar)\n                return false;\n\
    \            lastCharIsOpen = lastCharIsOpen && brackets.charAt(i) == '<';\n \
    \           lastChar = brackets.charAt(i);\n        }\n        if (lastCharIsOpen\
    \ && lastChar == '>')\n            return true;\n        return false;\n}\n  \
    \  public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpu8yzy_of.java:38)\n"
  stdout: ''
  timestamp: 1660011776
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        if (brackets.length() != 5) return false;\n        char\
    \ opening = brackets.charAt(0);\n        char closing = brackets.charAt(brackets.length()\
    \ - 1);\n        return opening == '<' && closing == '>';\n}\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpu5fiim7c.java:26)\n"
  stdout: ''
  timestamp: 1660011776
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        StringBuilder sb = new StringBuilder();\n        StringTokenizer\
    \ st = new StringTokenizer(brackets, \"<>\");\n        while (st.hasMoreTokens())\
    \ {\n            String brack = st.nextToken();\n            if (sb.length() >\
    \ 0) {\n                sb.append(\"<\");\n            }\n            sb.append(brack);\n\
    \        }\n        if (sb.length() > 0) {\n            sb.append(\">\");\n  \
    \      }\n        return brackets.equals(sb.toString());\n}\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpu36yqjec.java:35)\n"
  stdout: ''
  timestamp: 1660011776
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        if(brackets.length() != 3 || brackets.contains(\"<\") ||\
    \ brackets.contains(\"<\")) {\n            return false;\n        }\n        Stack<Character>\
    \ stack = new Stack<Character>();\n        for(int i=0; i<brackets.length(); ++i)\
    \ {\n            char c = brackets.charAt(i);\n            if(c == '>') {\n  \
    \              if(i+1 < brackets.length()) {\n                    stack.push(brackets.charAt(i+1));\n\
    \                }\n                else if(!stack.isEmpty()) {\n            \
    \        char last = stack.pop();\n                    if(last != '<') {\n   \
    \                     return false;\n                    }\n                }\n\
    \            }\n            else if(c == '<') {\n                if(!stack.isEmpty())\
    \ {\n                    char last = stack.pop();\n                    if(last\
    \ != '<') {\n                        return false;\n                    }\n  \
    \              }\n                stack.push(c);\n            }\n        }\n \
    \       return !stack.isEmpty();\n}\n    public static void main(String[] args)\
    \ {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsyyc_wpn.java:50)\n"
  stdout: ''
  timestamp: 1660011776
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        char[] bracket = brackets.toCharArray();\n        Arrays.sort(bracket);\n\
    \        // iterate through the array until you find the first mismatch\n    \
    \    // or you reach the end of the array\n        boolean foundMismatch = false;\n\
    \        for (int i = 0; i < bracket.length; i++) {\n            if (bracket[i]\
    \ != bracket[bracket.length - 1]) {\n                foundMismatch = true;\n \
    \               for (int j = i + 1; j < bracket.length - 1; j++) {\n         \
    \           bracket[i] = bracket[j];\n                }\n            }\n     \
    \   }\n        return !foundMismatch;\n}\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnsluzq1r.java:36)\n"
  stdout: ''
  timestamp: 1660011776
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        List<String> openingBrackets = Arrays.stream(brackets.split(\"\
    <\"))\n                .map(String::trim)\n                .filter(x -> !x.isEmpty())\n\
    \                .collect(Collectors.toList());\n        List<String> closingBrackets\
    \ = Arrays.stream(brackets.split(\">\"))\n                .map(String::trim)\n\
    \                .filter(x -> !x.isEmpty())\n                .collect(Collectors.toList());\n\
    \        List<String> openingBracketsPlusClosingBrackets = openingBrackets.stream()\n\
    \                .map(x -> x + \"<\" + closingBrackets.get(0) + \">\")\n     \
    \           .collect(Collectors.toList());\n        List<String> allOpeningBrackets\
    \ = openingBrackets.stream()\n                .map(x -> x + \"<\" + closingBrackets.get(0)\
    \ + \">\")\n                .collect(Collectors.toList());\n        return openingBracketsPlusClosingBrackets.equals(allOpeningBrackets);\n\
    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpw6s30zf3.java:41)\n"
  stdout: ''
  timestamp: 1660011777
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        if (brackets.length() < 1) return false;\n        List<String>\
    \ stack = new ArrayList<>();\n        for (int i = 0; i < brackets.length(); i++)\
    \ {\n            String token = brackets.substring(i, i+1);\n            if (!stack.contains(token))\
    \ {\n                stack.add(token);\n            } else if (stack.contains(token))\
    \ {\n                return false;\n            }\n        }\n        return stack.isEmpty();\n\
    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjt6obpir.java:33)\n"
  stdout: ''
  timestamp: 1660011776
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack<Character> stack = new Stack<>();\n        stack.push(brackets.charAt(0));\n\
    \        for(int i=1; i<brackets.length(); i++) {\n            if(stack.peek()\
    \ == '<') {\n                if(brackets.charAt(i) != '>')\n                 \
    \   return false;\n                else\n                    stack.pop();\n  \
    \          }\n            else {\n                if(brackets.charAt(i) != '<')\n\
    \                    return false;\n                else\n                   \
    \ stack.push(brackets.charAt(i));\n            }\n        }\n        return stack.isEmpty();\n\
    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpt0vn6pgy.java:40)\n"
  stdout: ''
  timestamp: 1660011777
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        return brackets.codePoints().filter(i -> i == '<').count()\
    \ == brackets.codePoints().filter(i -> i == '>').count();\n}\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptefi6k8d.java:28)\n"
  stdout: ''
  timestamp: 1660011776
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        int openingBrackets = 0;\n        for (int i = 0; i < brackets.length();\
    \ i++) {\n            if (brackets.charAt(i) == '<') {\n                openingBrackets++;\n\
    \            }\n            else if (brackets.charAt(i) == '>') {\n          \
    \      openingBrackets--;\n            }\n        }\n        return openingBrackets\
    \ == 0;\n}\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpj68vdchp.java:37)\n"
  stdout: ''
  timestamp: 1660011777
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        char[] charArray = brackets.toCharArray();\n        List<Character>\
    \ openingBrackets = new ArrayList<>();\n        List<Character> closingBrackets\
    \ = new ArrayList<>();\n        boolean ans = false;\n        for (char c : charArray)\
    \ {\n            if (c == '<') {\n                openingBrackets.add(c);\n  \
    \          } else if (c == '>') {\n                closingBrackets.add(c);\n \
    \           }\n        }\n        if (openingBrackets.size() == closingBrackets.size()\
    \ &&\n                openingBrackets.containsAll(closingBrackets)) {\n      \
    \      ans = true;\n        }\n        return ans;\n}\n    public static void\
    \ main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpx_ot72b9.java:38)\n"
  stdout: ''
  timestamp: 1660011777
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack<Character> stack = new Stack<>();\n        int openingBrackets\
    \ = 0;\n        char lastOpeningBracket = ' ';\n\n        char[] chars = brackets.toCharArray();\n\
    \        for (int i = 0; i < chars.length; i++) {\n            char ch = chars[i];\n\
    \n            if (ch == lastOpeningBracket) {\n                openingBrackets--;\n\
    \            }\n            if (ch == '<') {\n                stack.push(ch);\n\
    \                openingBrackets++;\n            }\n            if (ch == '>')\
    \ {\n                lastOpeningBracket = stack.pop();\n                openingBrackets--;\n\
    \            }\n            if (openingBrackets < 0) {\n                return\
    \ false;\n            }\n        }\n        return openingBrackets == 0;\n}\n\
    \    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9gzh0dpr.java:47)\n"
  stdout: ''
  timestamp: 1660011777
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        return brackets.replaceAll(\"\\\\s\", \"\").equals(\"<\"\
    )\n                && brackets.replaceAll(\"\\\\s\", \"\").equals(\"<<\")\n  \
    \              && brackets.replaceAll(\"\\\\s\", \"\").equals(\"<><\")\n     \
    \           && brackets.replaceAll(\"\\\\s\", \"\").equals(\"<>\")\n         \
    \       && brackets.replaceAll(\"\\\\s\", \"\").equals(\"<>\")\n             \
    \   && brackets.replaceAll(\"\\\\s\", \"\").equals(\"<<<>\")\n               \
    \ && brackets.replaceAll(\"\\\\s\", \"\").equals(\"<<<\")\n                &&\
    \ brackets.replaceAll(\"\\\\s\", \"\").equals(\"<<<>\")\n                && brackets.replaceAll(\"\
    \\\\s\", \"\").equals(\"<><<\")\n                && brackets.replaceAll(\"\\\\\
    s\", \"\").equals(\"<<><>\")\n                && brackets.replaceAll(\"\\\\s\"\
    , \"\").equals(\"<><<<>\")\n                && brackets.replaceAll(\"\\\\s\",\
    \ \"\").equals(\"<<><><>\")\n                && brackets.replaceAll(\"\\\\s\"\
    , \"\").equals(\"<<><><>\")\n                && brackets.replaceAll(\"\\\\s\"\
    , \"\").equals(\"<<><><><>\")\n                && brackets.replaceAll(\"\\\\s\"\
    , \"\").equals(\"<<><><><><>\")\n                && brackets.replaceAll(\"\\\\\
    s\", \"\").equals(\"<<<><><><><>\")\n                && brackets.replaceAll(\"\
    \\\\s\", \"\").equals(\"<<<><><><><><>\")\n                && brackets.replaceAll(\"\
    \\\\s\", \"\").equals(\"<<<><><><><><><>\")\n                && brackets.replaceAll(\"\
    \\\\s\", \"\").equals(\"<<<><><><><><><><>\")\n                && brackets.replaceAll(\"\
    \\\\s\", \"\").equals(\"<<<><><><><><><><><>\")\n                && brackets.replaceAll(\"\
    \\\\s\", \"\").equals(\"<<<><><><><><><><><>\")\n                && brackets.replaceAll(\"\
    \\\\s\", \"\").equals(\"<<<><><><><><><><><><>\")\n                && brackets.replaceAll(\"\
    \\\\s\", \"\").equals(\"<<<><><><><><><><><><>\")\n                && brackets.replaceAll(\"\
    \\\\s\", \"\").equals(\"<<<><><><><><><><><><><><>\")\n                && brackets.replaceAll(\"\
    \\\\s\", \"\").equals(\"<<<><><><><><><><><><><><><><><>\")\n                &&\
    \ bracket\n}\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpp904d0gg.java:45: error: ';' expected\n                && bracket\n\
    \                          ^\n1 error\n"
  stdout: ''
  timestamp: 1660011776
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        String[] parts = brackets.split(\">>\");\n        boolean[]\
    \ opened = {false, false, false};\n        for (int i = 0; i < parts.length; i++)\
    \ {\n            opened[i] = opened[i] || parts[i].equals(\"<\");\n        }\n\
    \        for (int i = 0; i < parts.length; i++) {\n            if (opened[parts[i].charAt(0)-1]\
    \ == true) {\n                opened[parts[i].charAt(0)-1] = false;\n        \
    \    } else {\n                return false;\n            }\n        }\n     \
    \   return true;\n}\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.ArrayIndexOutOfBoundsException:\
    \ Index 59 out of bounds for length 3\n\tat Problem.correctBracketing(tmplnognet_.java:26)\n\
    \tat Problem.main(tmplnognet_.java:35)\n"
  stdout: ''
  timestamp: 1660011777
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        if (brackets.length() == 0)\n            return true;\n\
    \        Stack<Character> stack = new Stack<>();\n        int idx = 0;\n     \
    \   while (idx < brackets.length()) {\n            char c = brackets.charAt(idx);\n\
    \            if (c == '<') {\n                stack.push(c);\n            } else\
    \ if (c == '>') {\n                char popped = stack.pop();\n              \
    \  if (!stack.empty() && (c == popped || c == '>'))\n                    return\
    \ false;\n            }\n            idx++;\n        }\n        return !stack.empty();\n\
    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppt46opap.java:38)\n"
  stdout: ''
  timestamp: 1660011777
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        List<String> opening = new ArrayList<String>();\n     \
    \   List<String> closing = new ArrayList<String>();\n\n        // Parse brackets\
    \ into opening bracket and closing bracket.\n        for (int i = 0; i < brackets.length()\
    \ - 1; i++) {\n            char c = brackets.charAt(i);\n            if (c ==\
    \ '<') {\n                opening.add('<');\n            }\n            if (c\
    \ == '>') {\n                closing.add('>');\n            }\n        }\n\n \
    \       // Check that all brackets are paired.\n        if (opening.size() !=\
    \ closing.size()) {\n            return false;\n        }\n\n        // Check\
    \ that all opening brackets are paired.\n        for (int i = 0; i < opening.size();\
    \ i++) {\n            if (!closing.contains(opening.get(i))) {\n             \
    \   return false;\n            }\n        }\n\n        // Check that all closing\
    \ brackets are paired.\n        for (int i = 0; i < closing.size(); i++) {\n \
    \           if (!opening.contains(closing.get(i))) {\n                return false;\n\
    \            }\n        }\n\n        return true;\n}\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxumdu696.java:27: error: incompatible types: char cannot be converted\
    \ to String\n                opening.add('<');\n                            ^\n\
    /tmp/tmpxumdu696.java:30: error: incompatible types: char cannot be converted\
    \ to String\n                closing.add('>');\n                            ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n2 errors\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        List<String> bracketList = getAllOpeningAndClosingBrackets(brackets);\n\
    \        boolean correct = false;\n        for (String b : bracketList) {\n  \
    \          String c = getClosingBracket(b);\n            if (!brackets.contains(c))\
    \ {\n                correct = false;\n                break;\n            } else\
    \ {\n                correct = true;\n            }\n        }\n        return\
    \ correct;\n}\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpptz8sefd.java:20: error: cannot find symbol\n        List<String>\
    \ bracketList = getAllOpeningAndClosingBrackets(brackets);\n                 \
    \                  ^\n  symbol:   method getAllOpeningAndClosingBrackets(String)\n\
    \  location: class Problem\n/tmp/tmpptz8sefd.java:23: error: cannot find symbol\n\
    \            String c = getClosingBracket(b);\n                       ^\n  symbol:\
    \   method getClosingBracket(String)\n  location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660011777
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        ArrayList opens = new ArrayList();\n        ArrayList closes\
    \ = new ArrayList();\n\n        int idx = 0;\n        while (idx < brackets.length())\
    \ {\n            if (brackets.charAt(idx) == '<') {\n                if (opens.isEmpty())\
    \ {\n                    return false;\n                }\n                opens.remove(opens.size()\
    \ - 1);\n                closes.add(idx);\n            } else if (brackets.charAt(idx)\
    \ == '>') {\n                if (!opens.isEmpty()) {\n                    return\
    \ false;\n                }\n                opens.add(idx);\n            } else\
    \ if (brackets.charAt(idx) == '<') {\n                return false;\n        \
    \    }\n            idx++;\n        }\n\n        return !opens.isEmpty();\n}\n\
    \    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkk7skjfv.java:45)\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        int open = 0;\n        int close = 0;\n        for (int\
    \ i = 0; i < brackets.length(); ++i) {\n            char c = brackets.charAt(i);\n\
    \            switch (c) {\n                case '>':\n                    if (close\
    \ == 0) return false;\n                    close--;\n                    break;\n\
    \                case '<':\n                    if (open == 0) return false;\n\
    \                    open--;\n                    break;\n                case\
    \ '<=':\n                    if (open > close) return true;\n                \
    \    open--;\n                    break;\n                case '>=':\n       \
    \             if (open > close) return true;\n                    close++;\n \
    \                   break;\n                case '=':\n                    if\
    \ (open > close) return true;\n                    open++;\n                 \
    \   break;\n                case '>':\n                    if (open > close) return\
    \ true;\n                    open++;\n                    break;\n           \
    \     case '<':\n                    if (open > close) return true;\n        \
    \            close++;\n                    break;\n            }\n        }\n\
    \        return false;\n}\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpq4mperx6.java:33: error: unclosed character literal\n         \
    \       case '<=':\n                     ^\n/tmp/tmpq4mperx6.java:33: error: unclosed\
    \ character literal\n                case '<=':\n                        ^\n/tmp/tmpq4mperx6.java:34:\
    \ error: : or -> expected\n                    if (open > close) return true;\n\
    \                                     ^\n/tmp/tmpq4mperx6.java:37: error: unclosed\
    \ character literal\n                case '>=':\n                     ^\n/tmp/tmpq4mperx6.java:37:\
    \ error: unclosed character literal\n                case '>=':\n            \
    \            ^\n/tmp/tmpq4mperx6.java:38: error: : or -> expected\n          \
    \          if (open > close) return true;\n                                  \
    \   ^\n6 errors\n"
  stdout: ''
  timestamp: 1660011777
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        int count = 0;\n        for (int i = 0; i < brackets.length();\
    \ i++) {\n            char bracket = brackets.charAt(i);\n            switch (bracket)\
    \ {\n                case '<':\n                    count++;\n               \
    \     break;\n                case '>':\n                    count--;\n      \
    \              break;\n                case '<':\n                case '<':\n\
    \                case '>':\n                case '>':\n                case '<':\n\
    \                case '<':\n                    count++;\n                   \
    \ break;\n            }\n        }\n        return count <= 0;\n}\n    public\
    \ static void main(String[] args) {\n    assert(correctBracketing((\"<>\")) ==\
    \ (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_w7i4w7s.java:30: error: duplicate case label\n               \
    \ case '<':\n                ^\n/tmp/tmp_w7i4w7s.java:31: error: duplicate case\
    \ label\n                case '<':\n                ^\n/tmp/tmp_w7i4w7s.java:32:\
    \ error: duplicate case label\n                case '>':\n                ^\n\
    /tmp/tmp_w7i4w7s.java:33: error: duplicate case label\n                case '>':\n\
    \                ^\n/tmp/tmp_w7i4w7s.java:34: error: duplicate case label\n  \
    \              case '<':\n                ^\n/tmp/tmp_w7i4w7s.java:35: error:\
    \ duplicate case label\n                case '<':\n                ^\n6 errors\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack<Character> bracketStack = new Stack<>();\n      \
    \  for (int i = 0; i < brackets.length(); ++i) {\n            char c = brackets.charAt(i);\n\
    \            if (c == '<') {\n                bracketStack.push(c);\n        \
    \    } else if (c == '>') {\n                if (bracketStack.isEmpty()) {\n \
    \                   return false;\n                } else {\n                \
    \    char top = bracketStack.pop();\n                    if (top != c) {\n   \
    \                     return false;\n                    }\n                }\n\
    \            }\n        }\n        return bracketStack.isEmpty();\n}\n    public\
    \ static void main(String[] args) {\n    assert(correctBracketing((\"<>\")) ==\
    \ (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp22ds61z5.java:39)\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        return brackets.chars().allMatch(c -> {\n            switch\
    \ (c) {\n            case '<': return false;\n            case '>': return true;\n\
    \            default: return false;\n            }\n        });\n}\n    public\
    \ static void main(String[] args) {\n    assert(correctBracketing((\"<>\")) ==\
    \ (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkvpgpusi.java:29)\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        char char1, char2;\n        List<String> list = new ArrayList<>();\n\
    \        for (int i = 0; i < brackets.length(); i++) {\n            char1 = brackets.charAt(i);\n\
    \            char2 = brackets.charAt(i + 1);\n            if (char1 == '<') {\n\
    \                if (char2 == '>') list.add(\"\");\n                else list.add(char2\
    \ + \">\");\n            }\n        }\n        if (list.size() != brackets.length()\
    \ - 1) {\n            return false;\n        }\n        return list.stream().allMatch(s\
    \ -> s.equals(\"<\"));\n}\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StringIndexOutOfBoundsException:\
    \ String index out of range: 2\n\tat java.base/java.lang.StringLatin1.charAt(StringLatin1.java:48)\n\
    \tat java.base/java.lang.String.charAt(String.java:1515)\n\tat Problem.correctBracketing(tmpjvq4w8ci.java:24)\n\
    \tat Problem.main(tmpjvq4w8ci.java:36)\n"
  stdout: ''
  timestamp: 1660011779
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        StringBuilder sb = new StringBuilder(brackets);\n     \
    \   LinkedList<String> stack = new LinkedList<String>();\n        for (int i =\
    \ 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if (c == '<') {\n                sb.setCharAt(i, '>');\n        \
    \        stack.addLast(brackets.substring(i + 1, i + 2));\n            }\n   \
    \         if (c == '>') {\n                if (stack.isEmpty()) {\n          \
    \          return false;\n                }\n                String lastString\
    \ = stack.getLast();\n                if (lastString.equals(\"<\")) {\n      \
    \              stack.removeLast();\n                    sb.setCharAt(i, '<');\n\
    \                } else {\n                    stack.removeLast();\n         \
    \           sb.setCharAt(i, '>');\n                }\n            }\n        }\n\
    \        return stack.size() == 0;\n}\n    public static void main(String[] args)\
    \ {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StringIndexOutOfBoundsException:\
    \ begin 1, end 2, length 1\n\tat java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\
    \tat java.base/java.lang.String.substring(String.java:2707)\n\tat Problem.correctBracketing(tmpfw6kt0u4.java:26)\n\
    \tat Problem.main(tmpfw6kt0u4.java:51)\n"
  stdout: ''
  timestamp: 1660011779
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        // convert the string to an array of Strings (the brackets)\n\
    \        String[] bracketArray = brackets.split(\"<>\");\n        // count the\
    \ number of opening brackets\n        int openBrackets = 0;\n        // count\
    \ the number of closing brackets\n        int closeBrackets = 0;\n        // go\
    \ through each bracket in the array\n        for (String bracket : bracketArray)\
    \ {\n            if (bracket.equals(\"<\"))\n                openBrackets++;\n\
    \            if (bracket.equals(\">\"))\n                closeBrackets++;\n  \
    \      }\n        // return True if it makes all the opening brackets have a corresponding\
    \ closing bracket\n        return openBrackets == closeBrackets;\n}\n    public\
    \ static void main(String[] args) {\n    assert(correctBracketing((\"<>\")) ==\
    \ (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_02_shfs.java:41)\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        if (brackets.contains(\"<\"))\n            brackets = brackets.replaceAll(\"\
    <(?!\\\\>)\", \"\\\\<\");\n        if (brackets.contains(\">\"))\n           \
    \ brackets = brackets.replaceAll(\">(?!\\\\<)\", \"\\\\>\");\n        return brackets.matches(\"\
    ^[^\\\\<]+\\\\>+[^\\\\<]+$\");\n}\n    public static void main(String[] args)\
    \ {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp13axqha4.java:27)\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        // Check length. Make sure brackets are in pair.\n    \
    \    int n = brackets.length();\n        if (n % 2 == 1) return false;\n\n   \
    \     // Start with brackets length even.\n        int even = 0;\n        // Start\
    \ with brackets length odd.\n        int odd = 0;\n        // Go through brackets\
    \ counting opening and closing brackets.\n        for (int i = 0; i < n; i++)\
    \ {\n            // Are we at opening bracket?\n            if (brackets.charAt(i)\
    \ == '<') even++;\n            // Are we at closing bracket?\n            else\
    \ if (brackets.charAt(i) == '>') odd++;\n        }\n        // Are all brackets\
    \ open?\n        return (even % 2 == 0);\n}\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpuj4shlfo.java:39)\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Set<String> openings = new HashSet<String>();\n       \
    \ Set<String> closings = new HashSet<String>();\n        for (char c: brackets.toCharArray())\
    \ {\n            if (c == '<') {\n                openings.add(\"<\");\n     \
    \       } else if (c == '>') {\n                closings.add(\">\");\n       \
    \     }\n        }\n        return openings.equals(closings);\n}\n    public static\
    \ void main(String[] args) {\n    assert(correctBracketing((\"<>\")) == (true));\n\
    \    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpskn75nu5.java:32)\n"
  stdout: ''
  timestamp: 1660011779
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        return brackets.replaceAll(\"[<>]\", \"\").equals(\"<>\"\
    );\n}\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpx2zorp00.java:23)\n"
  stdout: ''
  timestamp: 1660011779
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        String s = brackets.replace(\"<\", \"\").replace(\"<\"\
    , \"\").replace(\">\", \"\").replace(\"<\", \"\");\n        boolean correct =\
    \ (s.equals(\"<>\"));\n        return correct;\n}\n    public static void main(String[]\
    \ args) {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdaveoj_m.java:25)\n"
  stdout: ''
  timestamp: 1660011779
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack<Integer> stack = new Stack<>();\n        for (char\
    \ ch : brackets.toCharArray()) {\n            stack.push(ch);\n        }\n   \
    \     int lastChar = -1;\n        boolean result = false;\n        while (stack.size()\
    \ > 0) {\n            char c = stack.peek();\n            if (lastChar == c) {\n\
    \                stack.pop();\n            } else {\n                if (lastChar\
    \ == -1) {\n                    lastChar = c;\n                } else if (lastChar\
    \ == c) {\n                    result = true;\n                    stack.pop();\n\
    \                    stack.push(-1);\n                }\n            }\n     \
    \   }\n        return result;\n}\n    public static void main(String[] args) {\n\
    \    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgn4go1ut.java:22: error: incompatible types: char cannot be converted\
    \ to Integer\n            stack.push(ch);\n                       ^\n/tmp/tmpgn4go1ut.java:27:\
    \ error: incompatible types: Integer cannot be converted to char\n           \
    \ char c = stack.peek();\n                               ^\nNote: Some messages\
    \ have been simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1660011779
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        // We need to use a stack to keep track of which brackets\
    \ are open,\n        // because we don't want to count an opening bracket as part\
    \ of the \n        // overall number of open brackets.\n        // We use a LinkedHashSet\
    \ to keep track of the brackets in order\n        // and because LinkedHashSet\
    \ preserves the order. This is a bit confusing\n        // for me, but it's what\
    \ we use.\n        Stack<Character> stack = new LinkedHashSet<>();\n\n       \
    \ // Loop through the bracket characters and add them to the\n        // stack\n\
    \        for (int i = 0; i < brackets.length(); ++i) {\n            char c = brackets.charAt(i);\n\
    \            if(c == '>') {\n                // We only need to add a closing\
    \ bracket to the stack\n                // when we see an opening bracket\n  \
    \              stack.push(c);\n            } else if(c == '<') {\n           \
    \     // We only need to remove an opening bracket from the stack\n          \
    \      // when we see a closing bracket\n                char top = stack.pop();\n\
    \                if(top != '>') {\n                    // There was a problem\
    \ with the brackets\n                    return false;\n                }\n  \
    \          }\n        }\n        // If we get here, the brackets seem to have\
    \ matched\n        return true;\n}\n    public static void main(String[] args)\
    \ {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_xdfbcyt.java:26: error: incompatible types: cannot infer type\
    \ arguments for LinkedHashSet<>\n        Stack<Character> stack = new LinkedHashSet<>();\n\
    \                                                  ^\n    reason: no instance(s)\
    \ of type variable(s) E exist so that LinkedHashSet<E> conforms to Stack<Character>\n\
    \  where E is a type-variable:\n    E extends Object declared in class LinkedHashSet\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011779
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        if (brackets.charAt(0) != '<' || brackets.charAt(brackets.length()\
    \ - 1) != '>')\n            return false;\n\n        // Iterate over the brackets,\
    \ keeping track of whether we've reached the last \n        // opening bracket\
    \ or the first closing bracket.\n        boolean first = false;\n        boolean\
    \ last = false;\n        for (int i = 0; i < brackets.length() - 1; i++) {\n \
    \           char c = brackets.charAt(i);\n            if (c == '<') {\n      \
    \          if (!first)\n                    return false;\n\n                first\
    \ = false;\n            }\n            if (c == '>') {\n                if (!last)\n\
    \                    return false;\n\n                last = false;\n        \
    \    }\n            else\n                last = true;\n        }\n\n        return\
    \ first;\n}\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6q17lnhs.java:48)\n"
  stdout: ''
  timestamp: 1660011779
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        // Write your code here.\n        int startIndex = 0;\n\
    \        int endIndex = brackets.length();\n        int index = 0;\n        while\
    \ (startIndex < endIndex) {\n            if (brackets.charAt(startIndex) == '<')\
    \ {\n                while (index != startIndex) {\n                    if (brackets.charAt(index)\
    \ != '>') {\n                        break;\n                    }\n         \
    \           index++;\n                }\n                if (index == startIndex)\
    \ {\n                    return false;\n                } else {\n           \
    \         index++;\n                }\n            } else {\n                while\
    \ (index != endIndex) {\n                    if (brackets.charAt(index) != '<')\
    \ {\n                        break;\n                    }\n                 \
    \   index++;\n                }\n                if (index == endIndex) {\n  \
    \                  return false;\n                } else {\n                 \
    \   index++;\n                }\n            }\n            startIndex++;\n  \
    \      }\n        return true;\n}\n    public static void main(String[] args)\
    \ {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpz4xmlsaj.java:55)\n"
  stdout: ''
  timestamp: 1660011779
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        return (brackets.length()<2 || brackets.charAt(0) != '<'\
    \ \n                || brackets.charAt(1) != '>' || brackets.charAt(0) == '>');\n\
    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0x9u__1l.java:24)\n"
  stdout: ''
  timestamp: 1660011779
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        if(brackets.trim().length()==0) return true;\n        //\
    \ Split brackets into list\n        List<String> bracketList = Arrays.asList(brackets.trim().split(\"\
    <>\"));\n\n        // loop through opening brackets\n        for(int i=0; i<bracketList.size();\
    \ i++) {\n            if(bracketList.get(i).isEmpty()) continue;\n\n         \
    \   String currentBracket = bracketList.get(i);\n            // loop through closing\
    \ brackets\n            for(int j=i; j<bracketList.size(); j++) {\n          \
    \      String closingBracket = bracketList.get(j);\n\n                boolean\
    \ opening = currentBracket.startsWith(\"<\");\n                boolean closing\
    \ = currentBracket.startsWith(\">\");\n\n                boolean openInside =\
    \ currentBracket.startsWith(\"<>\");\n                boolean closeInside = currentBracket.startsWith(\"\
    >>\");\n\n                // if both brackets are open, or both brackets are closed,\
    \ return false\n                if((opening && closing) || (!opening && !closing))\
    \ {\n                    return false;\n                }\n                //\
    \ if closing bracket is missing opening, return false\n                else if(!opening\
    \ && currentBracket.equals(closingBracket)) {\n                    return false;\n\
    \                }\n                // if opening bracket is missing closing,\
    \ return false\n                else if(!closing && currentBracket.equals(openBracket))\
    \ {\n                    return false;\n                }\n            }\n   \
    \     }\n        // all brackets were correctly closed, return true\n        return\
    \ true;\n}\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3w1lu_re.java:48: error: cannot find symbol\n                else\
    \ if(!closing && currentBracket.equals(openBracket)) {\n                     \
    \                                     ^\n  symbol:   variable openBracket\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011779
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        return brackets.split(\">\").length == brackets.split(\"\
    <\").length;\n}\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjruvis3l.java:23)\n"
  stdout: ''
  timestamp: 1660011779
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        boolean correct = true;\n        if (brackets.length()\
    \ < 2) return false;\n        char[] chars = brackets.toCharArray();\n       \
    \ int i = 0;\n        for (char c : chars) {\n            if (c == '<') i++;\n\
    \            if (c == '>') i--;\n            if (i < 0) return false;\n      \
    \  }\n        return i == 0;\n}\n    public static void main(String[] args) {\n\
    \    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011780
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        String[] arrayOfBrackets = brackets.split(\"[<>]\");\n\
    \        Collection<String> openingBrackets = new HashSet<>();\n        Collection<String>\
    \ closingBrackets = new HashSet<>();\n        for (String bracket : arrayOfBrackets)\
    \ {\n            if (bracket.equals(\"<\")) {\n                openingBrackets.add(\"\
    <\");\n            } else if (bracket.equals(\">\")) {\n                closingBrackets.add(\"\
    >\");\n            }\n        }\n        return openingBrackets.size() == closingBrackets.size();\n\
    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0qoqhuj4.java:37)\n"
  stdout: ''
  timestamp: 1660011780
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        return brackets.replaceAll(\"<|>\", \"\").replaceAll(\"\
    <<\", \"\").replaceAll(\">>\", \"\").replaceAll(\">>>\", \"\").equals(brackets);\n\
    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8aqrhiiq.java:23)\n"
  stdout: ''
  timestamp: 1660011780
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        return brackets.replaceAll(\"\\\\<\", \">>\").equals(\"\
    <<>>\");\n}\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpq681ilai.java:23)\n"
  stdout: ''
  timestamp: 1660011780
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        String[] openings = brackets.split(\"\\\\<\");\n      \
    \  String[] closings = brackets.split(\"\\\\>\");\n        if (openings.length\
    \ != closings.length) return true;\n        int counter = 0;\n        for (String\
    \ open : openings) {\n            if (counter++ != open.length()) {\n        \
    \        return false;\n            }\n        }\n        return true;\n}\n  \
    \  public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkmu948yw.java:36)\n"
  stdout: ''
  timestamp: 1660011780
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack<String> stack = new Stack<>();\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if (c == '<') {\n                stack.push(brackets.substring(0,\
    \ i));\n            } else if (c == '>') {\n                if (stack.isEmpty())\
    \ {\n                    return false;\n                }\n                String\
    \ closeBracket = stack.pop();\n                if (closeBracket.charAt(0) == c)\
    \ {\n                    continue;\n                }\n                boolean\
    \ found = false;\n                for (int j = 1; j < openBrackets.length(); j++)\
    \ {\n                    if (closeBracket.charAt(j) == openBrackets.charAt(j))\
    \ {\n                        found = true;\n                        break;\n \
    \                   }\n                }\n                if (!found) {\n    \
    \                return false;\n                }\n            }\n        }\n\
    \        if (!stack.isEmpty()) {\n            return false;\n        }\n     \
    \   return true;\n}\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsx4yddcw.java:34: error: cannot find symbol\n                for\
    \ (int j = 1; j < openBrackets.length(); j++) {\n                            \
    \        ^\n  symbol:   variable openBrackets\n  location: class Problem\n/tmp/tmpsx4yddcw.java:35:\
    \ error: cannot find symbol\n                    if (closeBracket.charAt(j) ==\
    \ openBrackets.charAt(j)) {\n                                                \
    \  ^\n  symbol:   variable openBrackets\n  location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660011780
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        if(brackets.contains(\"<\"))\n            return brackets.contains(\"\
    </>\");\n        else if(brackets.contains(\"</\"))\n            return brackets.contains(\"\
    <\");\n        else if(brackets.contains(\"<=\"))\n            return brackets.contains(\"\
    <=/>\");\n        else if(brackets.contains(\">=\"))\n            return brackets.contains(\"\
    >=/>\");\n        else if(brackets.contains(\">\"))\n            return brackets.contains(\"\
    </>\");\n        else if(brackets.contains(\"/>\"))\n            return brackets.contains(\"\
    <=\");\n        else if(brackets.contains(\"<\"))\n            return brackets.contains(\"\
    </>\");\n        else return false;\n}\n    public static void main(String[] args)\
    \ {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7m2c217s.java:37)\n"
  stdout: ''
  timestamp: 1660011780
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n      int len = brackets.length();\n      int i;\n      boolean\
    \ hasCorrectBracketing = false;\n      for (i = 0; i < len; ++i) {\n         \
    \ if (brackets.charAt(i) == '<')\n              hasCorrectBracketing |= checkBracketing(brackets,\
    \ i);\n          else if (brackets.charAt(i) == '>')\n              hasCorrectBracketing\
    \ &= !checkBracketing(brackets, i);\n      }\n      return hasCorrectBracketing;\n\
    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1ifb5if9.java:25: error: cannot find symbol\n              hasCorrectBracketing\
    \ |= checkBracketing(brackets, i);\n                                      ^\n\
    \  symbol:   method checkBracketing(String,int)\n  location: class Problem\n/tmp/tmp1ifb5if9.java:27:\
    \ error: cannot find symbol\n              hasCorrectBracketing &= !checkBracketing(brackets,\
    \ i);\n                                       ^\n  symbol:   method checkBracketing(String,int)\n\
    \  location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660011780
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        // Initialize a stack of brackets to check\n        Stack\
    \ stack = new Stack();\n        for (int i = 0; i < brackets.length(); ++i) {\n\
    \            // Push a \"<\" into stack\n            stack.push(brackets.charAt(i)\
    \ == '<');\n        }\n        // Initialize a counter to keep track of how many\
    \ \"<\" are opened.\n        int counter = 0;\n        // Loop through stack\n\
    \        while (stack.peek() != null) {\n            // Pop a \"<\" if it is opened\n\
    \            boolean pop = stack.pop();\n            // If it is opened, increase\
    \ the counter by one\n            if (pop) {\n                counter++;\n   \
    \         }\n            // If counter equals the number of opening brackets\n\
    \            if (counter == brackets.length()) {\n                // Return True\n\
    \                return true;\n            }\n            // If counter equals\
    \ the number of closing brackets\n            else if (counter == brackets.length()\
    \ - 1) {\n                // Return False\n                return false;\n   \
    \         }\n        }\n        // Return False\n        return false;\n}\n  \
    \  public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5xe3bd8h.java:31: error: incompatible types: Object cannot be converted\
    \ to boolean\n            boolean pop = stack.pop();\n                       \
    \            ^\nNote: /tmp/tmp5xe3bd8h.java uses unchecked or unsafe operations.\n\
    Note: Recompile with -Xlint:unchecked for details.\n1 error\n"
  stdout: ''
  timestamp: 1660011780
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        if ((brackets == null) || (brackets.equals(\"\"))) {\n\
    \            return false;\n        }\n\n        // Keep track of whether a bracket\
    \ is paired or not.\n        boolean[] openBrackets = new boolean[brackets.length()];\n\
    \        for (int i = 0; i < brackets.length(); i++) {\n            char ch =\
    \ brackets.charAt(i);\n            if ((ch == '<') && (openBrackets[i] == true))\
    \ {\n                return false;\n            }\n            if ((ch == '>')\
    \ && (openBrackets[i] == false)) {\n                return false;\n          \
    \  }\n            openBrackets[i] = ch == '<';\n        }\n        return true;\n\
    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxd6hnrow.java:39)\n"
  stdout: ''
  timestamp: 1660011780
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        List<Character> openingBrackets = brackets.split(\"<\"\
    );\n        List<Character> closingBrackets = brackets.split(\">\");\n       \
    \ for (Character opening : openingBrackets) {\n            if (closingBrackets.indexOf(opening)\
    \ == -1) {\n                return false;\n            }\n        }\n        return\
    \ true;\n}\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6q12jbvc.java:20: error: incompatible types: String[] cannot be\
    \ converted to List<Character>\n        List<Character> openingBrackets = brackets.split(\"\
    <\");\n                                                        ^\n/tmp/tmp6q12jbvc.java:21:\
    \ error: incompatible types: String[] cannot be converted to List<Character>\n\
    \        List<Character> closingBrackets = brackets.split(\">\");\n          \
    \                                              ^\n2 errors\n"
  stdout: ''
  timestamp: 1660011780
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        if (brackets.length() < 3) return false;\n        for (int\
    \ i = 0; i < brackets.length(); i++) {\n            if (brackets.charAt(i) !=\
    \ brackets.charAt(i + 1)) return false;\n        }\n        return true;\n}\n\
    \    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9cieu1id.java:27)\n"
  stdout: ''
  timestamp: 1660011780
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Set<Character> opening = new HashSet<Character>();\n  \
    \      Set<Character> closing = new HashSet<Character>();\n        for (int i\
    \ = 0; i < brackets.length(); i++) {\n            char c = brackets.charAt(i);\n\
    \            if (c == '>') {\n                if (opening.contains(c)) {\n   \
    \                 opening.remove(c);\n                } else {\n             \
    \       return false;\n                }\n            } else {\n             \
    \   opening.add(c);\n            }\n            if (c == '<') {\n            \
    \    if (closing.contains(c)) {\n                    closing.remove(c);\n    \
    \            } else {\n                    return false;\n                }\n\
    \            } else {\n                closing.add(c);\n            }\n      \
    \  }\n        return !opening.isEmpty() && !closing.isEmpty();\n}\n    public\
    \ static void main(String[] args) {\n    assert(correctBracketing((\"<>\")) ==\
    \ (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<><>><>\")) == (true));\n    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\"\
    )) == (true));\n    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n \
    \   assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpuxjuqie5.java:46)\n"
  stdout: ''
  timestamp: 1660011781
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        boolean ret = true;\n        for(int i=0;i<brackets.length();i++){\n\
    \            if(brackets.charAt(i) == '<') {\n                if(brackets.charAt(i+1)\
    \ != '<') {\n                    ret = false;\n                    break;\n  \
    \              }\n            }\n            if(brackets.charAt(i) == '>') {\n\
    \                if(brackets.charAt(i+1) != '>') {\n                    ret =\
    \ false;\n                    break;\n                }\n            }\n     \
    \   }\n        return ret;\n}\n    public static void main(String[] args) {\n\
    \    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwmgowmsv.java:38)\n"
  stdout: ''
  timestamp: 1660011780
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Matcher m = Pattern.compile(\"\\\\<\").matcher(brackets);\n\
    \        Matcher m2 = Pattern.compile(\"\\\\>\").matcher(brackets);\n        if\
    \ (m.find() && m2.find()) {\n            String first = m.group();\n         \
    \   String second = m2.group();\n            int firstLength = first.length();\n\
    \            int secondLength = second.length();\n            if (firstLength\
    \ != secondLength) {\n                return false;\n            }\n         \
    \   for (int i = 0; i < firstLength; i++) {\n                char firstChar =\
    \ first.charAt(i);\n                char secondChar = second.charAt(i);\n    \
    \            if (firstChar == '>' && secondChar == '<') {\n                  \
    \  continue;\n                }\n                if (firstChar == '<' && secondChar\
    \ == '>') {\n                    continue;\n                }\n              \
    \  if (firstChar == '<' && secondChar == '>') {\n                    continue;\n\
    \                }\n                return false;\n            }\n        }\n\
    \        return true;\n}\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpij3nxu_y.java:20: error: cannot find symbol\n        Matcher m\
    \ = Pattern.compile(\"\\\\<\").matcher(brackets);\n        ^\n  symbol:   class\
    \ Matcher\n  location: class Problem\n/tmp/tmpij3nxu_y.java:20: error: cannot\
    \ find symbol\n        Matcher m = Pattern.compile(\"\\\\<\").matcher(brackets);\n\
    \                    ^\n  symbol:   variable Pattern\n  location: class Problem\n\
    /tmp/tmpij3nxu_y.java:21: error: cannot find symbol\n        Matcher m2 = Pattern.compile(\"\
    \\\\>\").matcher(brackets);\n        ^\n  symbol:   class Matcher\n  location:\
    \ class Problem\n/tmp/tmpij3nxu_y.java:21: error: cannot find symbol\n       \
    \ Matcher m2 = Pattern.compile(\"\\\\>\").matcher(brackets);\n               \
    \      ^\n  symbol:   variable Pattern\n  location: class Problem\n4 errors\n"
  stdout: ''
  timestamp: 1660011780
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        List<String> openingBrackets = Arrays.asList(brackets.split(\"\
    [<>]\"));\n        List<String> closingBrackets = Arrays.asList(brackets.split(\"\
    [<>]\"));\n        Set<String> uniqueBrackets = new HashSet<>();\n        for\
    \ (String opening : openingBrackets) {\n            for (String closing : closingBrackets)\
    \ {\n                if (opening.equals(closing)) {\n                    if (uniqueBrackets.contains(opening))\
    \ {\n                        return false;\n                    }\n          \
    \          uniqueBrackets.add(opening);\n                }\n            }\n  \
    \      }\n        return true;\n}\n    public static void main(String[] args)\
    \ {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8m98ajke.java:40)\n"
  stdout: ''
  timestamp: 1660011781
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        StringTokenizer st = new StringTokenizer(brackets, \"<<><>>\"\
    );\n        while(st.hasMoreTokens()) {\n            String opening = st.nextToken();\n\
    \            String closing = st.nextToken();\n            int openingIndex =\
    \ brackets.indexOf(opening);\n            int closingIndex = brackets.indexOf(closing);\n\
    \            int nextIndex = closingIndex + opening.length();\n            if\
    \ (openingIndex < 0 || closingIndex < 0 || openingIndex >= closingIndex || nextIndex\
    \ < 0 || nextIndex > brackets.length()) {\n                return false;\n   \
    \         }\n            int closingBracketIndex = nextIndex-1;\n            while(openingIndex\
    \ < closingIndex && openingIndex < closingBracketIndex && brackets.charAt(openingIndex)\
    \ != '>') {\n                openingIndex++;\n            }\n            while(closingIndex\
    \ < openingIndex && closingIndex < openingBracketIndex && brackets.charAt(closingIndex)\
    \ != '<') {\n                closingIndex++;\n            }\n            if (openingIndex\
    \ > closingIndex) {\n                return false;\n            }\n          \
    \  openingIndex++;\n            while(closingIndex < openingIndex && closingIndex\
    \ < openingBracketIndex && brackets.charAt(closingIndex) != '>') {\n         \
    \       closingIndex++;\n            }\n            if (closingIndex > openingIndex)\
    \ {\n                return false;\n            }\n        }\n        return true;\n\
    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpiggf9jzz.java:34: error: cannot find symbol\n            while(closingIndex\
    \ < openingIndex && closingIndex < openingBracketIndex && brackets.charAt(closingIndex)\
    \ != '<') {\n                                                                ^\n\
    \  symbol:   variable openingBracketIndex\n  location: class Problem\n/tmp/tmpiggf9jzz.java:41:\
    \ error: cannot find symbol\n            while(closingIndex < openingIndex &&\
    \ closingIndex < openingBracketIndex && brackets.charAt(closingIndex) != '>')\
    \ {\n                                                                ^\n  symbol:\
    \   variable openingBracketIndex\n  location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660011780
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        // Use a Set to store opening brackets to eliminate duplicates.\n\
    \        Set<Character> openings = new HashSet<>();\n        for (char c : brackets.toCharArray())\
    \ {\n            if (openings.contains(c)) return false;\n            openings.add(c);\n\
    \        }\n        return true;\n}\n    public static void main(String[] args)\
    \ {\n    assert(correctBracketing((\"<>\")) == (true));\n    assert(correctBracketing((\"\
    <<><>>\")) == (true));\n    assert(correctBracketing((\"<><><<><>><>\")) == (true));\n\
    \    assert(correctBracketing((\"<><><<<><><>><>><<><><<>>>\")) == (true));\n\
    \    assert(correctBracketing((\"<<<><>>>>\")) == (false));\n    assert(correctBracketing((\"\
    ><<>\")) == (false));\n    assert(correctBracketing((\"<\")) == (false));\n  \
    \  assert(correctBracketing((\"<<<<\")) == (false));\n    assert(correctBracketing((\"\
    >\")) == (false));\n    assert(correctBracketing((\"<<>\")) == (false));\n   \
    \ assert(correctBracketing((\"<><><<><>><>><<>\")) == (false));\n    assert(correctBracketing((\"\
    <><><<><>><>>><>\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppigq5qbh.java:30)\n"
  stdout: ''
  timestamp: 1660011781
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        StringBuilder sb = new StringBuilder();\n        for (int\
    \ i = 0; i < brackets.length(); ++i) {\n            if (brackets.charAt(i) ==\
    \ '<') {\n                if (sb.length() > 0) {\n                    sb.append('\
    \ ');\n                }\n                sb.append('<');\n            } else\
    \ if (brackets.charAt(i) == '>') {\n                if (sb.length() > 0) {\n \
    \                   sb.append(' ');\n                }\n                sb.append('>');\n\
    \            }\n        }\n        return sb.toString().equalsIgnoreCase(brackets);\n\
    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_koysl_0.java:37)\n"
  stdout: ''
  timestamp: 1660011781
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // brackets is a string of \"<\" and \">\".\n    // return\
    \ True if every opening bracket has a corresponding closing bracket.\n    // >>>\
    \ correct_bracketing(\"<\")\n    // False\n    // >>> correct_bracketing(\"<>\"\
    )\n    // True\n    // >>> correct_bracketing(\"<<><>>\")\n    // True\n    //\
    \ >>> correct_bracketing(\"><<>\")\n    // False\n    public static boolean correctBracketing(String\
    \ brackets) {\n        Stack stack = new Stack();\n        Set<Character> chars\
    \ = new HashSet<>();\n        for (char c : brackets.toCharArray()) {\n      \
    \      if (c == '<') {\n                stack.push(c);\n            }\n      \
    \      else if (c == '>') {\n                if (stack.size() < 1) {\n       \
    \             return false;\n                }\n                char prev = stack.peek();\n\
    \                if (prev == '<') {\n                    stack.pop();\n      \
    \          } else {\n                    return false;\n                }\n  \
    \          }\n            chars.add(c);\n        }\n        return chars.isEmpty();\n\
    }\n    public static void main(String[] args) {\n    assert(correctBracketing((\"\
    <>\")) == (true));\n    assert(correctBracketing((\"<<><>>\")) == (true));\n \
    \   assert(correctBracketing((\"<><><<><>><>\")) == (true));\n    assert(correctBracketing((\"\
    <><><<<><><>><>><<><><<>>>\")) == (true));\n    assert(correctBracketing((\"<<<><>>>>\"\
    )) == (false));\n    assert(correctBracketing((\"><<>\")) == (false));\n    assert(correctBracketing((\"\
    <\")) == (false));\n    assert(correctBracketing((\"<<<<\")) == (false));\n  \
    \  assert(correctBracketing((\">\")) == (false));\n    assert(correctBracketing((\"\
    <<>\")) == (false));\n    assert(correctBracketing((\"<><><<><>><>><<>\")) ==\
    \ (false));\n    assert(correctBracketing((\"<><><<><>><>>><>\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxf8i4pl3.java:30: error: incompatible types: Object cannot be converted\
    \ to char\n                char prev = stack.peek();\n                       \
    \               ^\nNote: /tmp/tmpxf8i4pl3.java uses unchecked or unsafe operations.\n\
    Note: Recompile with -Xlint:unchecked for details.\n1 error\n"
  stdout: ''
  timestamp: 1660011781
