name: HumanEval_95_check_dict_case
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Given a dictionary, return True if all keys are strings\
  \ in lower \n    // case or all keys are strings in upper case, else return False.\n\
  \    // The function should return False is the given dictionary is empty.\n   \
  \ // Examples:\n    // check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should\
  \ return True.\n    // check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\"\
  :\"banana\"}) should return False.\n    // check_dict_case({\"a\":\"apple\", \"\
  8\":\"banana\", \"a\":\"apple\"}) should return False.\n    // check_dict_case({\"\
  Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n \
  \   // check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
  \    public static boolean checkDictCase(HashMap<String,String> dict) {\n"
tests: "return true;\n    }\n    public static void main(String[] args) {\n    assert(checkDictCase((new\
  \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"b\", \"banana\")))) == (true));\n\
  \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"p\", \"pineapple\"\
  , \"A\", \"banana\", \"B\", \"banana\")))) == (false));\n    assert(checkDictCase((new\
  \ HashMap<String,String>(Map.of(\"p\", \"pineapple\", \"5\", \"banana\", \"a\",\
  \ \"apple\")))) == (false));\n    assert(checkDictCase((new HashMap<String,String>(Map.of(\"\
  Name\", \"John\", \"Age\", \"36\", \"City\", \"Houston\")))) == (false));\n    assert(checkDictCase((new\
  \ HashMap<String,String>(Map.of(\"STATE\", \"NC\", \"ZIP\", \"12345\")))) == (true));\n\
  \    assert(checkDictCase((new HashMap<String,String>(Map.of(\"fruit\", \"Orange\"\
  , \"taste\", \"Sweet\")))) == (true));\n    assert(checkDictCase((new HashMap<String,String>()))\
  \ == (false));\n    }\n\n}\n"
completions: []
stop_tokens:
- "    }\n    //"
- "    }\n    p"
- "    }\n}"
- "\n    }\n"
