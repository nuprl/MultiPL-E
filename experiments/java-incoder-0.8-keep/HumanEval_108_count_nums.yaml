name: HumanEval_108_count_nums
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Write a function count_nums which takes an array of integers\
  \ and returns\n    // the number of elements which has a sum of digits > 0.\n  \
  \  // If a number is negative, then its first signed digit will be negative:\n \
  \   // e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n\
  \    // >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) ==\
  \ 3\n    public static int countNums(ArrayList<Integer> arr) {\n"
tests: "return 0;\n    }\n    public static void main(String[] args) {\n    assert(countNums((new\
  \ ArrayList<Integer>(Arrays.asList()))) == (0));\n    assert(countNums((new ArrayList<Integer>(Arrays.asList((int)-1,\
  \ (int)-2, (int)0)))) == (0));\n    assert(countNums((new ArrayList<Integer>(Arrays.asList((int)1,\
  \ (int)1, (int)2, (int)-2, (int)3, (int)4, (int)5)))) == (6));\n    assert(countNums((new\
  \ ArrayList<Integer>(Arrays.asList((int)1, (int)6, (int)9, (int)-6, (int)0, (int)1,\
  \ (int)5)))) == (5));\n    assert(countNums((new ArrayList<Integer>(Arrays.asList((int)1,\
  \ (int)100, (int)98, (int)-7, (int)1, (int)-1)))) == (4));\n    assert(countNums((new\
  \ ArrayList<Integer>(Arrays.asList((int)12, (int)23, (int)34, (int)-45, (int)-56,\
  \ (int)0)))) == (5));\n    assert(countNums((new ArrayList<Integer>(Arrays.asList((int)0,\
  \ (int)1)))) == (1));\n    assert(countNums((new ArrayList<Integer>(Arrays.asList((int)1))))\
  \ == (1));\n    }\n\n}\n"
completions: ["        int counter = 0;\n        for (int i = 0; i < arr.size(); i++)\
    \ {\n            if (arr.get(i) < 0)\n                arr.set(i, -arr.get(i));\n\
    \            int sum = 0;\n            for (int j = 0; j < arr.get(i); j++)\n\
    \                sum += Math.abs(arr.get(i) - j);\n            counter += (sum\
    \ > 0);\n        }\n        return counter;", "        int nums = 0;\n       \
    \ for (int num : arr) {\n            nums += count_nums(num);\n        }\n   \
    \     return nums;", "        \n        return countNums(arr, 0);", "        if(arr.isEmpty())\n\
    \            return 0;\n        int result = 0;\n        boolean first = true;\n\
    \        for(Integer i:arr){\n            if(i<0){\n                int firstDigit\
    \ = Math.abs(i);\n                if(firstDigit<0){\n                    firstDigit\
    \ = firstDigit*(-1);\n                }\n                i = firstDigit;\n   \
    \         }\n            if(first){\n                result = i;\n           \
    \     first = false;\n            }\n            else{\n                result\
    \ += i;\n            }\n        }\n        return result;", "        int n = arr.size();\n\
    \        Arrays.sort(arr);\n        int count = 0;\n        for (int i = 0; i\
    \ < n; i++) {\n            if (arr.get(i) > 0) {\n                for (int j =\
    \ 1; j < arr.get(i); j++) {\n                    if (arr.get(i) - j > 0) {\n \
    \                       count++;\n                    }\n                }\n \
    \           }\n        }\n        return count;", "        ArrayList<Integer>\
    \ res = new ArrayList<>();\n        for(int i = arr.size()-1; i >= 0; i--){\n\
    \            int sum = 0;\n            for(Integer j : arr){\n               \
    \ sum += j;\n            }\n            if(sum > 0){\n                res.add(i);\n\
    \            }\n        }\n        return res.size();", "        if (arr == null\
    \ || arr.isEmpty())\n            return 0;\n\n        int countDigit = 0;\n  \
    \      int sumOfDigit = 0;\n        int firstNegativeDigit;\n\n        arr.forEach(num\
    \ -> {\n            if (num < 0) {\n                firstNegativeDigit = num %\
    \ 10;\n                sumOfDigit += firstNegativeDigit;\n                num\
    \ = (num - firstNegativeDigit) * -1;\n            }\n            countDigit +=\
    \ num % 10;\n        });\n\n        // num >= 10 && num < 0\n        return countDigit\
    \ + (num >= 10 && num < 0) ? 1 : 0;", "        Set<Integer> set = new HashSet<Integer>();\n\
    \        for (Integer num : arr) {\n            while (num > 0) {\n          \
    \      int digit = num % 10;\n                num /= 10;\n                set.add(digit);\n\
    \            }\n        }\n        return set.size();", "        ArrayList<Integer>\
    \ digits = new ArrayList<Integer>();\n        digits.add(arr.get(0));\n      \
    \  for (int i = 1; i < arr.size(); i++) {\n            int current = arr.get(i);\n\
    \            digits.add((current + digits.get(i - 1)) % 10);\n            digits.add(current\
    \ % 10);\n        }\n        int nums = 0;\n        int curDigit = digits.get(0);\n\
    \        for (int i = 1; i < arr.size(); i++) {\n            int current = arr.get(i);\n\
    \            if (current != curDigit)\n                nums++;\n            curDigit\
    \ = current;\n        }\n        return nums;", "        int sum = 0;\n      \
    \  for(Integer i : arr){\n            sum += Math.abs(i);\n        }\n       \
    \ return sum;", "        \n        int count = 0;\n        for (Integer n : arr)\
    \ {\n            int digitSum = 0;\n            while (n > 0) {\n            \
    \    digitSum += n % 10;\n                n /= 10;\n            }\n          \
    \  if (digitSum > 0) {\n                ++count;\n            }\n        }\n \
    \       return count;", "        int count = 0;\n        for (int i : arr) {\n\
    \            count += count_nums(i);\n        }\n        return count;", "   \
    \     int count = 0;\n        for(int i : arr) {\n            if(i > 0) {\n  \
    \              if(i % 10 == 0) {\n                    count++;\n             \
    \   }\n            }\n        }\n        return count;", '        return arr.stream().filter(x
    -> x >= 0).mapToInt(x -> Integer.signum(x) * x).sum();', '        return arr.stream().filter(a
    -> a > 0).count();', "        return arr.stream().filter(x -> {\n            int\
    \ sum = 0;\n            while (x > 0) {\n                sum = sum + x % 10;\n\
    \                x = x / 10;\n            }\n            return sum > 0;\n   \
    \     }).count();", "        int count = 0;\n        for(int i : arr) {\n    \
    \        if(i<0) \n                count += (int)Math.ceil(i/Math.pow(10,i.getSignedValue()));\n\
    \            else\n                count += 1;\n        }\n        return count;",
  "        int sum = 0;\n        for(int i=0; i<arr.size(); i++){\n            sum\
    \ += arr.get(i);\n        }\n        if (sum > 0)\n            return 1;\n   \
    \     if (sum < 0)\n            return (int) Math.abs((sum - Integer.MIN_VALUE)\
    \ + 1);\n        return 0;", "        Integer sum = 0;\n        for (int num:\
    \ arr) {\n            sum += num;\n        }\n        return sum;", "        int\
    \ n = 0;\n        for(Integer i : arr) {\n            if(i.signum() > 0) {\n \
    \               n += i.intValue();\n            }\n        }\n        return n;",
  "        Set<Integer> set = new HashSet<Integer>();\n        for(int i : arr){\n\
    \            if(i == 0) set.add(0);\n            else{\n                while(i\
    \ > 0){\n                    set.add(i % 10);\n                    i /= 10;\n\
    \                }\n            }\n        }\n        return set.size();", " \
    \       \n        \n        int sum=0;\n        int n=arr.size();\n        for(int\
    \ i=0;i<n;i++){\n            sum+=arr.get(i);\n        }\n        \n        \n\
    \        return sum;", '        return arr.stream().filter(e -> e > 0).count();',
  "        if (arr.isEmpty())\n            return 0;\n\n        int n = 0;\n     \
    \   boolean negative = arr.get(0) < 0;\n        if (negative)\n            arr.set(0,\
    \ arr.get(0) - 11);\n\n        int[] sums = arr.stream().filter(x -> x >= 0).mapToInt(x\
    \ -> Math.abs(x) - x).boxed().toArray();\n        for (int i = 0; i < sums.length;\
    \ i++) {\n            n += sums[i];\n        }\n\n        if (negative)\n    \
    \        n += sums.length - n;\n        return n;", "        int counter = 0;\n\
    \        for (Integer i : arr) {\n            counter+=count_digits(i);\n    \
    \    }\n        return counter;", "        int n = 0;\n        for (Integer num:\
    \ arr) {\n            if (num < 0) {\n                n += Math.abs(num);\n  \
    \          } else {\n                n += num;\n            }\n        }\n   \
    \     return n;", "        int count = 0;\n        for (int num : arr) {\n   \
    \         boolean isNegative = (num < 0);\n            String firstSignedDigit;\n\
    \            if (isNegative) {\n                firstSignedDigit = (String.valueOf(num)).replaceFirst(\"\
    -\", \"\");\n            } else {\n                firstSignedDigit = (String.valueOf(num)).replaceFirst(\"\
    ^\", \"\");\n            }\n            int digitSum = 0;\n            for (int\
    \ d : firstSignedDigit.split(\"\")) {\n                digitSum += Integer.parseInt(d);\n\
    \            }\n            if (digitSum > 0) {\n                count += 1;\n\
    \            }\n        }\n        return count;", "        int sum = 0;\n   \
    \     int count = 0;\n        for (int i : arr) {\n            if (i < 0)\n  \
    \              sum += (-i) * Math.pow(10, arr.size());\n            else\n   \
    \             sum += i;\n            if (sum > 0)\n                count++;\n\
    \        }\n        return count;", "        if (arr.size() == 0) {\n        \
    \    return 0;\n        }\n        int count = 0;\n        int sum = 0;\n    \
    \    for (int i = 0; i < arr.size(); i++) {\n            sum += Math.abs(arr.get(i));\n\
    \            if (sum > 0) {\n                count++;\n            }\n       \
    \ }\n        return count;", "        return arr\n                .stream()\n\
    \                .filter(n -> Integer.signum(n) > 0)\n                .count();",
  "        List<Integer> res = new ArrayList<>();\n        for (Integer x : arr) {\n\
    \            int n = 0;\n            while (x >= 10) {\n                n += x\
    \ % 10;\n                x /= 10;\n            }\n            if (n > 0) res.add(x);\n\
    \        }\n        return res.size();", "        arr.stream().forEach(e -> {\n\
    \            int n = (int) Math.round(e);\n            int sum = 0;\n        \
    \    while (n > 0)\n                sum += n % 10;\n            int sign = e <\
    \ 0 ? -1 : 1;\n            int count = 0;\n            for (int i = sign; i <=\
    \ Math.abs(e); i++) {\n                if ((sum + i) % 10 == 0) count++;\n   \
    \         }\n            System.out.println(n + \" -> \" + sign + \": \" + count);\n\
    \        });\n        return 0;", "        int cnt = 0;\n        for (Integer\
    \ num : arr) {\n            cnt += countNums(getDigits(num));\n        }\n   \
    \     return cnt;", '        return arr.stream().filter(p-> p!=0).count(Comparator.naturalOrder());',
  "        if (arr.isEmpty())\n            return 0;\n        List<Integer> digits\
    \ = new ArrayList<>();\n        List<Integer> negDigits = new ArrayList<>();\n\
    \        int count = 0;\n        for (int elem : arr) {\n            int sum =\
    \ 0;\n            while (elem > 0) {\n                sum = sum * 10 + (elem %\
    \ 10);\n                elem = elem / 10;\n            }\n            if (sum\
    \ > 0) {\n                digits.add(sum);\n            } else {\n           \
    \     negDigits.add(sum);\n            }\n        }\n        Collections.sort(digits);\n\
    \        Collections.sort(negDigits);\n        for (int i = 0; i < digits.size()\
    \ && i < negDigits.size(); i++) {\n            if (digits.get(i) < negDigits.get(i))\
    \ {\n                count++;\n            }\n        }\n        return count;",
  "        int nums = 0;\n        for(int i = 0; i < arr.size(); i++){\n         \
    \   int digitSum = 0;\n            while (arr.get(i) > 0) {\n                digitSum\
    \ += arr.get(i) % 10;\n                arr.remove(i);\n                i--;\n\
    \            }\n            if (digitSum >= 0) {\n                nums++;\n  \
    \          }\n        }\n        return nums;", "        if (arr.isEmpty()) return\
    \ 0;\n        int positive = 0;\n        boolean firstTime = true;\n        Optional<Integer>\
    \ sum = arr.stream().filter(i -> {\n            if (i < 0) i = Math.abs(i);\n\
    \            int digitSum = 0;\n            for (int j = 0; j < i; j++) digitSum\
    \ += (int) Math.pow(10, j);\n            return digitSum > 0;\n        }).findAny();\n\
    \        if (sum.isPresent()) {\n            positive = sum.get();\n        }\n\
    \        int negative = 0;\n        sum = arr.stream().filter(i -> {\n       \
    \     if (i < 0) i = Math.abs(i);\n            int digitSum = 0;\n           \
    \ for (int j = 0; j < i; j++) digitSum += (int) Math.pow(10, j);\n           \
    \ return digitSum > 0;\n        }).collect(Collectors.toList());\n        if (sum.size()\
    \ == 0) {\n            return 0;\n        }\n        boolean firstTime = true;\n\
    \        for (Integer i : sum) {\n            if (firstTime) {\n             \
    \   negative += i;\n                firstTime = false;\n            } else {\n\
    \                positive += i;\n            }\n        }\n        if (negative\
    \ > 0) return negative;\n        return positive;", "        int[] arr2 = new\
    \ int[arr.size()];\n        int sum = 0;\n        for (Integer num : arr) {\n\
    \            if (num > 0) {\n                sum += num % 10;\n            } else\
    \ {\n                sum -= num % 10;\n            }\n            arr2[arr.indexOf(num)]\
    \ = sum;\n        }\n        return Arrays.stream(arr2).sum();", "        \n \
    \       List<Integer> positives = new ArrayList<>();\n        \n        for(int\
    \ i = 0; i < arr.size(); i++) {\n            if (arr.get(i) > 0) {\n         \
    \       positives.add(arr.get(i));\n            }\n        }\n        \n     \
    \   int count = 0;\n        \n        for (Integer i : positives) {\n        \
    \    int n = 0;\n            \n            if (i < 0) {\n                i = -i;\n\
    \                n = 1;\n            }\n            \n            while (n <=\
    \ 9) {\n                i += n;\n                if (i >= arr.size()) {\n    \
    \                break;\n                }\n                ++n;\n           \
    \ }\n            count += n - 1;\n        }\n        \n        return count;",
  "        int count = 0;\n        for (int i : arr)\n            if (i != 0)\n  \
    \              for (int j = 0; j < Math.abs(i - 1); j++)\n                   \
    \ count += (i >> j) & 1;\n        return count;", "        if (arr.size() > 0)\
    \ {\n            int count = 0;\n            for (int i = 0; i < arr.size(); i++)\
    \ {\n                int num = arr.get(i);\n                boolean isNegative\
    \ = false;\n                if (num < 0) {\n                    isNegative = true;\n\
    \                    num = -num;\n                }\n                while (num\
    \ > 0) {\n                    int digit = num % 10;\n                    if (digit\
    \ < 0) {\n                        isNegative = true;\n                       \
    \ digit = -digit;\n                    }\n                    num = num / 10;\n\
    \                    count += 1;\n                }\n                if (isNegative)\
    \ {\n                    count -= 1;\n                }\n            }\n     \
    \       return count;\n        }\n        return 0;", "        int sum = 0;\n\
    \        for(Integer i : arr) {\n            sum += countDigits(i);\n        }\n\
    \        return sum;", "        IntStream\n                .range(1, arr.size())\n\
    \                .filter(i -> isPositive(arr.get(i)))\n                .count()\n\
    \                ;", "        int sum = 0;\n        for(Integer num : arr) {\n\
    \            sum += num;\n        }\n        return sum;", "        // TODO: Use\
    \ Streams to make this problem concise.\n        int count = 0;\n        \n  \
    \      for(int i = 0; i < arr.size(); i++){\n            \n            int sum\
    \ = 0;\n            for(int j = 0; j < arr.get(i).length(); j++){\n          \
    \      sum += arr.get(i).charAt(j) - '0';\n                \n            }\n \
    \           \n            if(sum > 0){\n                count++;\n           \
    \ }\n        }\n        return count;", "        int count = 0;\n        int i\
    \ = 0;\n        while (i < arr.size()) {\n            int current = arr.get(i);\n\
    \            if (current < 0) {\n                current = -current;\n       \
    \         count = count + (int) Math.pow(10, arr.size() - i - 1);\n          \
    \  }\n            int digit = 1;\n            int j = 0;\n            while (current\
    \ > 0 && j < Math.log10(current + 1) + 1) {\n                current /= 10;\n\
    \                digit++;\n                j++;\n            }\n            count\
    \ += (digit > 1) ? digit : 1;\n            i++;\n        }\n        return count;",
  '        return arr.stream().filter(x -> x > 0).count();', "        int count =\
    \ 0;\n        for (Integer x : arr) {\n            count += count_nums(x);\n \
    \       }\n        return count;", "        int n = arr.size();\n        int sum\
    \ = 0;\n        int sign = 1;\n        for (int i = 0; i < arr.size(); i++) {\n\
    \            sum += arr.get(i) * sign;\n            if (sum < 0)\n           \
    \     sum += 10;\n            sign *= -1;\n            if (sum < 0)\n        \
    \        sum += 10;\n        }\n        return n;", "        int result = 0;\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) >\
    \ 0) {\n                result += arr.get(i);\n            }\n        }\n    \
    \    return result;", "        Integer sum = 0;\n        for(Integer i : arr)\
    \ {\n            sum += i;\n        }\n        return sum.intValue();", '        return
    arr.stream().filter(i -> i > 0).count();', "        ArrayList<Integer> nums =\
    \ new ArrayList<>();\n        for (Integer x : arr) {\n            if (x > 0)\
    \ nums.add(x);\n        }\n\n        return nums.stream().filter(num -> num.intValue()\
    \ > 0).count();", "        arr.sort((a, b) -> b.compareTo(a));\n        int sum\
    \ = 0;\n        for (int i : arr) {\n            if (i < 0) sum += (int) Math.pow(10,\
    \ -i);\n            else sum += i;\n        }\n        return arr.stream().filter(i\
    \ -> i > 0).count();", "        int sum = 0;\n        for (int i = 0; i < arr.size();\
    \ i++) {\n            sum += arr.get(i);\n        }\n        if (sum > 0) {\n\
    \            return 1;\n        } else {\n            return arr.size() - sum;\n\
    \        }", "        int count = 0;\n        for(int i = 0; i != arr.size();\
    \ i++){\n            int sum = 0;\n            for(int j = 1; j <= 9; j++){\n\
    \                if(arr.get(i) % 10 == j){\n                    sum += j;\n  \
    \              }\n            }\n            if(sum > 0){\n                count++;\n\
    \            }\n        }\n        return count;", "        int cnt = 0;\n   \
    \     int sum = 0;\n        for (int num : arr) {\n            sum += num;\n \
    \           if (sum > 0) {\n                cnt++;\n                sum -= num;\n\
    \            }\n        }\n        return cnt;", "        int sum = 0;\n     \
    \   for( int i: arr) {\n            if (i == -1)\n                sum += Math.abs(i);\n\
    \            else\n                sum += i;\n        }\n        return sum;",
  "        Arrays.sort(arr);\n        int size = arr.size();\n        int count =\
    \ 0;\n        \n        if (size > 0) {\n            \n            int sum = 0;\n\
    \            int mod = arr.get(size - 1);\n            if (mod < 0) {\n      \
    \          for (int i = 1; i < size; i++) {\n                    sum += Math.abs(arr.get(i));\n\
    \                    if (sum > 0) {\n                        break;\n        \
    \            }\n                }\n                for (int i = 1; i < size; i++)\
    \ {\n                    sum += Math.abs(arr.get(i));\n                    int\
    \ digit = arr.get(i) - sum;\n                    if (digit > 0) {\n          \
    \              count++;\n                    }\n                    sum -= digit;\n\
    \                }\n            } else {\n                for (int i = 0; i <\
    \ size; i++) {\n                    sum += Math.abs(arr.get(i));\n           \
    \         if (sum > 0) {\n                        break;\n                   \
    \ }\n                }\n                for (int i = 0; i < size; i++) {\n   \
    \                 sum += Math.abs(arr.get(i));\n                    int digit\
    \ = arr.get(i) - sum;\n                    if (digit > 0) {\n                \
    \        count++;\n                    }\n                    sum -= digit;\n\
    \                }\n            }\n        }\n        return count;", "      \
    \  int count = 0;\n        for (Integer n : arr) {\n            if (n > 0) {\n\
    \                for (int i = 0; i < 9; i++) {\n                    count += (n\
    \ / 10) % 10 + (n % 10 == 0);\n                    n /= 10;\n                }\n\
    \            } else {\n                for (int i = 0; i >= 9; i++) {\n      \
    \              count += (n / 10) % 10;\n                    n /= 10;\n       \
    \         }\n            }\n        }\n        return count;", "        int count\
    \ = 0;\n        for (Integer i : arr) {\n            int sum = 0;\n          \
    \  while (i != 0) {\n                sum += i % 10;\n                i /= 10;\n\
    \            }\n            if (sum > 0) {\n                count++;\n       \
    \     }\n        }\n        return count;", "        int count = 0;\n        for(int\
    \ i : arr) {\n            if(i > 0) count++;\n        }\n        return count;",
  "        int count = 0;\n        int sum = 0;\n        for (int n : arr) {\n   \
    \         sum += n;\n            while (sum >= 10) {\n                sum -= 10;\n\
    \                count++;\n            }\n        }\n        if (sum > 0) {\n\
    \            count++;\n        }\n        return count;", "        \n        //\
    \ your code\n        ", "        ArrayList<Integer> newArr = new ArrayList<Integer>();\n\
    \        ArrayList<Integer> temp = new ArrayList<Integer>();\n        int sum\
    \ = 0;\n        for(int i = 0 ; i < arr.size() ; i++) {\n            sum = sum\
    \ + arr.get(i);\n            if(sum > 0) {\n                temp.add(sum);\n \
    \               newArr.add(arr.get(i));\n            }\n        }\n        if(arr.size()\
    \ < newArr.size()) {\n            temp.removeAll(newArr);\n            newArr\
    \ = temp;\n        }\n        return newArr.size();", "        int counter = 0;\n\
    \        arr.stream().forEach(x -> {\n            int count = 0;\n           \
    \ while (x > 0) {\n                count++;\n                x /= 10;\n      \
    \      }\n            if (count > 0) counter++;\n        });\n        return counter;",
  "        int count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n      \
    \      int digitSum = 0;\n            int val = arr.get(i);\n            if (val\
    \ < 0) {\n                digitSum = -1;\n                val = Math.abs(val);\n\
    \            } else {\n                digitSum = 0;\n            }\n        \
    \    for (int j = 0; j < val / 10; j++) {\n                digitSum += val % 10\
    \ * Math.pow(10, j);\n            }\n            count += digitSum > 0 ? 1 : 0;\n\
    \        }\n        return count;", "        int count = 0;\n        for(int i=0;\
    \ i < arr.size(); i++) {\n            int n = arr.get(i);\n            if(n <\
    \ 0) n = -n;\n            for(int j = n; j < 10; j += 10) {\n                count\
    \ += 1;\n            }\n        }\n        return count;", "        HashMap<Integer,\
    \ Integer> map = new HashMap<>();\n        arr.forEach(a -> map.computeIfAbsent(a,\
    \ x -> 0));\n        int count = 0;\n        for (Integer i : arr) {\n       \
    \     count += map.get(i);\n        }\n        return count;", "        int sum\
    \ = 0;\n        for(Integer i : arr) {\n            sum += i%10;\n        }\n\
    \        if(sum > 0) {\n            return arr.size();\n        } else {\n   \
    \         int firstSign = arr.get(0)%10;\n            return arr.size() - firstSign\
    \ - 1;\n        }", "        int count = 0;\n        List<Integer> nums = new\
    \ ArrayList<>(arr.size());\n        for (int i : arr) {\n            nums.add(i);\n\
    \        }\n        Collections.sort(nums);\n        for (int i = 0; i < nums.size();\
    \ i++) {\n            int sum = 0;\n            int digit = nums.get(i) % 10;\n\
    \            while (digit != 0) {\n                sum += digit;\n           \
    \     digit = nums.get(i) / 10;\n            }\n            if (sum > 0) {\n \
    \               count++;\n            }\n        }\n        return count;", " \
    \       if (arr.isEmpty()) return 0;\n        int count = 0;\n        for (int\
    \ i : arr) {\n            if (i < 0) i = -i;\n            int digitSum = 0;\n\
    \            while (i >= 10) digitSum += i % 10;\n            if (digitSum > 0)\
    \ count++;\n        }\n        return count;", "        Collections.sort(arr);\n\
    \        int ans = 0;\n        for (int i = 1; i < arr.size(); i++) {\n      \
    \      int x = arr.get(i);\n            if (x < 0)\n                x -= Math.pow(10,\
    \ -arr.size());\n            int sum = 0;\n            while (x > 0)\n       \
    \         sum += x%10;\n            ans += (sum > 0 ? sum : -sum);\n         \
    \   x /= 10;\n        }\n        return ans;", "        int result = 0;\n    \
    \    for(int i : arr){\n            if(i <0)\n                result += Math.abs(i);\n\
    \            else result++;\n        }\n        return result;", "        // Find\
    \ all the numbers which has a sum of digits > 0.\n        // This can be done\
    \ by counting the number of negative numbers \n        // by comparing each digit\
    \ with the most significant digit of \n        // the number.\n        int count\
    \ = 0;\n        int mostSigDigit = -(arr.get(arr.size()-1) % 10);\n        for\
    \ (Integer i : arr) {\n            if (mostSigDigit < 0) {\n                if\
    \ (i < 0) {\n                    mostSigDigit = -(i % 10);\n                 \
    \   count++;\n                } else {\n                    count--;\n       \
    \             break;\n                }\n            } else {\n              \
    \  if (i >= 0) {\n                    mostSigDigit = -(i % 10);\n            \
    \        count++;\n                } else {\n                    count--;\n  \
    \                  break;\n                }\n            }\n        }\n     \
    \   return count;", "        int sum = 0;\n        for (int i : arr) {\n     \
    \       if (i != 0) {\n                sum += i;\n            }\n        }\n \
    \       return sum;", "        int sum = 0;\n        for(int i : arr) {\n    \
    \        sum += i;\n        }\n        long total = (long) Math.pow(10, arr.size());\n\
    \        int result = sum % total;\n        return result;", "        HashSet<Integer>\
    \ hashSet = new HashSet<>();\n        for (int num : arr) {\n            if (hashSet.add(num))\
    \ {\n                // If this number had the same sum before it is added, \n\
    \                // that sum is counted again and added to hashSet.\n        \
    \        hashSet.forEach(i -> hashSet.add(Integer.toString(i).length()));\n  \
    \          }\n        }\n        return hashSet.size();", "        System.out.println(\"\
    In countNums: \" + arr);\n        int count = 0;\n        for (int i : arr) {\n\
    \            count+=Math.abs(i);\n        }\n        return count;", "       \
    \ if (arr.isEmpty()) {\n            return 0;\n        }\n        if (arr.get(0)\
    \ < 0) {\n            int negative = arr.get(0) % 10;\n            int positive\
    \ = (arr.get(0) / 10) * 10;\n            int firstSignificantDigit = negative\
    \ * 10 + positive;\n            int secondSignificantDigit = firstSignificantDigit\
    \ % 10;\n            int sum = firstSignificantDigit + secondSignificantDigit;\n\
    \            int count = 0;\n            for (int i = 1; i < arr.size(); i++)\
    \ {\n                sum += arr.get(i) % 10;\n                count += ((sum >\
    \ 0) && (sum < 10));\n            }\n            return count;\n        } else\
    \ {\n            return 1;\n        }", '        IntStream.range(-arr.size() +
    1, arr.size()).filter(a->arr.get(a).intValue() > 0).count();', "        // If\
    \ there are no elements in the array\n        if (arr.isEmpty()) {\n         \
    \   return 0;\n        }\n\n        // Initialize a counter for the sum of the\
    \ digits (number of digits)\n        int sum = 0;\n\n        // Initialize a digit\
    \ counter\n        int digitCounter = 0;\n\n        // Iterate over the array\
    \ of integers\n        for (Integer integer : arr) {\n            // Add each\
    \ digit to the sum\n            sum += integer;\n\n            // If the number\
    \ has more than 0 digits\n            if (integer > 0) {\n                // Increment\
    \ the digit counter\n                digitCounter++;\n            }\n        }\n\
    \n        // If the number has a first sign digit < 0\n        if (sum < 0) {\n\
    \            // Add the negative sign to the sum\n            sum += 1;\n    \
    \    }\n\n        // Calculate the number of digits\n        int numOfDigits =\
    \ arr.size();\n\n        // Add the sign to the sum\n        sum += (numOfDigits\
    \ > 1) ? 1 : 0;\n\n        // If the array has a negative sign as the first digit\n\
    \        if (sum < 0) {\n            // Subtract that sign from the sum\n    \
    \        sum -= 1;\n        }\n\n        // Return the sum\n        return sum;",
  "        long sum = 0;\n        for (int i = 0; i < arr.size(); i++) {\n       \
    \     int n = arr.get(i);\n            sum += n;\n        }\n        if (sum <\
    \ 0)\n            sum = sum + abs((long)sum);\n        return (int) sum;", " \
    \       Integer[] digits = arr.stream().map(i -> Math.abs(i)).sorted().toArray(Integer[]::new);\n\
    \        int[] nums = new int[arr.size()];\n        for (int i = 0; i < nums.length;\
    \ i++)\n            nums[i] = 0;\n        for (int i = 0; i < digits.length; i++)\n\
    \            for (int j = 0; j < digits.length; j++)\n                if (j >\
    \ i)\n                    if (digits[i] > digits[j])\n                       \
    \ nums[i] += digits[i] - digits[j];\n        return nums[nums.length - 1];", " \
    \       // Write your code here\n        if (arr.isEmpty()) {\n            return\
    \ 0;\n        }\n\n        if (arr.size() == 1) {\n            return 1;\n   \
    \     }\n\n        boolean positive = false;\n        int[] array = new int[arr.size()];\n\
    \        array[0] = arr.get(0);\n        int sum = 0;\n        for (int i = 1;\
    \ i < arr.size(); i++) {\n            int num = arr.get(i);\n            int digits\
    \ = 0;\n            while (num >= 10) {\n                digits += 1;\n      \
    \          num = num / 10;\n            }\n            array[i] = num;\n     \
    \       if (array[i] < 0) {\n                array[i] = -array[i];\n         \
    \       negative = true;\n            }\n            if (array[i] == 0) {\n  \
    \              continue;\n            }\n            if (digits > 0) {\n     \
    \           sum += digits;\n            }\n        }\n\n        if (sum > 0) {\n\
    \            int count = 1;\n            for (int i = 0; i < arr.size(); i++)\
    \ {\n                if (array[i] < 0) {\n                    continue;\n    \
    \            }\n                if (array[i] == 0) {\n                    continue;\n\
    \                }\n                if (array[i] > sum) {\n                  \
    \  count = -1;\n                    break;\n                }\n              \
    \  sum += array[i];\n            }\n            if (count > 1) {\n           \
    \     return count;\n            }\n        }\n\n        if (sum < 0) {\n    \
    \        int count = 0;\n            for (int i = 0; i < arr.size(); i++) {\n\
    \                if (array[i] > 0) {\n                    continue;\n        \
    \        }\n                if (array[i] == 0) {\n                    continue;\n\
    \                }\n                if (array[i] < sum) {\n                  \
    \  count = -1;\n                    break;\n                }\n              \
    \  sum -= array[i];\n            }\n            if (count > 1) {\n           \
    \     return count;\n            }\n        }\n\n        return 0;", "       \
    \ Arrays.sort(arr);\n        int sum = 0;\n        for (int i = 0; i < arr.size();\
    \ ++i) {\n            sum += Math.abs(arr.get(i)) % 10;\n        }\n        return\
    \ sum > 0 ? arr.size() : 0;", "        if (arr.isEmpty()) {\n            return\
    \ 0;\n        }\n        int result = 1;\n        if (arr.get(0) < 0) {\n    \
    \        arr.set(0, arr.get(0) - 10);\n        }\n        for (int i = arr.size()\
    \ - 1; i >= 0; i--) {\n            int n = arr.get(i);\n            int sum =\
    \ 0;\n            while (n > 0) {\n                sum += n % 10;\n          \
    \      n /= 10;\n            }\n            if (sum > 0) {\n                result++;\n\
    \            }\n        }\n        return result;", "        int countNums = 0;\n\
    \        \n        for(int num: arr) {\n            int digitSum = 0;\n      \
    \      \n            while(num > 0) {\n                digitSum = digitSum + num\
    \ % 10;\n                num = num / 10;\n            }\n            \n      \
    \      if(digitSum > 0) {\n                countNums++;\n            }\n     \
    \   }\n        \n        return countNums;", "        // Write your code here.\n\
    \        return 0;", '        return (int) arr.stream().filter(x -> x >= 0).count();',
  "        arr.add(0);\n        HashMap<Integer, Integer> map = new HashMap<>();\n\
    \        for (Integer n : arr) {\n            map.put(n, map.get(n) + 1);\n  \
    \      }\n        return map.values().stream().filter(i -> i > 0).count();", " \
    \       ArrayList<Integer> arr = new ArrayList<Integer>();\n        for(int i\
    \ = 0; i < arr.size(); i++) {\n            if(arr.get(i) < 0) {\n            \
    \    arr.set(i, Math.abs(arr.get(i)));\n            }\n        }\n        int\
    \ result = 0;\n        int count = 0;\n        for(int i = 0; i < arr.size();\
    \ i++) {\n            int count = 0;\n            while(arr.get(i) >= 10) {\n\
    \                count ++;\n                arr.set(i, arr.get(i) / 10);\n   \
    \         }\n            while(count < arr.size()) {\n                result +=\
    \ arr.get(i);\n                arr.remove(i);\n                count ++;\n   \
    \             arr.remove(i);\n            }\n        }\n        return result;",
  "        int result = 0;\n        for (int i = 0; i < arr.size(); i++) {\n     \
    \       int n = Math.abs(arr.get(i));\n            result += getDigits(n);\n \
    \       }\n        return result;", "        long result = 0;\n        \n    \
    \    for (Integer num : arr) {\n            if (num < 0) \n                num\
    \ *= -1;\n            long n = 0;\n            \n            if (num < 0) {\n\
    \                for (int i = 0; i < num.length(); i++)\n                    n\
    \ += num.charAt(i) - '0';\n            } else {\n                for (int i =\
    \ 0; i < num.length(); i++)\n                    n += num.charAt(i);\n       \
    \     }\n            \n            if (n > 0 && n <= 9) {\n                result\
    \ += (n - 1);\n            }\n        }\n        \n        return (int) result;",
  "        \n        int sum = 0;\n        int count = 0;\n        int arrSize = arr.size();\n\
    \        for (int i=0; i < arrSize; i++) {\n            int num = arr.get(i);\n\
    \            int remainder = num % 10;\n            sum += remainder;\n      \
    \      \n            if (sum > 0) {\n                count++;\n            }\n\
    \        }\n        return count;", "        int count = 0;\n        for (int\
    \ i : arr)\n            count = countNums(i, count);\n        return count;",
  "        if (arr.isEmpty()) {\n            return 0;\n        }\n        int sum\
    \ = 0;\n        \n        for (Integer num: arr) {\n            sum += (int) Math.floor(Math.log10(Math.abs(num)))\
    \ * num;\n        }\n\n        return arr.stream().filter(num -> num > 0).count();",
  "        int ret = 0;\n        for (int i : arr) {\n            ret += Math.abs(i);\n\
    \        }\n        return ret;", "        int c = 0;\n        for(int n: arr){\n\
    \            if(n<0){\n                n = -n;\n            }\n            for(int\
    \ i = 0; i <= Math.log10(n); i++){\n                int s = Math.abs(n/Math.pow(10,\
    \ i)) % 10;\n                if(i == 0){\n                    c = c;\n       \
    \         }\n                c = c + s;\n            }\n        }\n        return\
    \ c;", "        // TODO\n        int count = 0;\n        for (int i = 0; i < arr.size();\
    \ i++) {\n            if (arr.get(i) > 0) {\n                for (int j = 0; j\
    \ < arr.get(i); j++) {\n                    if (i != 0) {\n                  \
    \      for (int k = i; k >= 0; k--) {\n                            if (k > 0)\
    \ {\n                                if (arr.get(k) < 0 && arr.get(k) < arr.get(k\
    \ - 1)) {\n                                    arr.set(k, arr.get(k) - arr.get(k\
    \ - 1));\n                                    arr.remove(k - 1);\n           \
    \                     }\n                            }\n                     \
    \   }\n                    }\n                }\n            }\n        }\n  \
    \      return count;", "        Integer sum = 0;\n        for (int i = 0; i <\
    \ arr.size(); i++) {\n            if (arr.get(i) > 0) {\n                sum +=\
    \ arr.get(i);\n            }\n        }\n        if (sum < 0) {\n            sum\
    \ *= -1;\n        }\n        int result = 0;\n        for (Integer i : arr) {\n\
    \            if (i > 0 && sum > 0) {\n                sum += i;\n            \
    \    result += 1;\n            }\n        }\n        return result;", "      \
    \  long sum = 0;\n        for(int x : arr) {\n            sum += x;\n        }\n\
    \        return (int) (Math.ceil(Math.log10(sum)) - arr.stream().filter(x -> x\
    \ > 0).toArray().length);", '        return arr.stream().filter(n -> n % 10 >
    0).count();', "        List<Integer> result = arr.stream().filter(i->i%10 > 0).collect(Collectors.toList());\n\
    \        return result.size();", "        ArrayList<Integer> filtered = arr.stream().filter(s\
    \ -> s > 0).collect(Collectors.toList());\n        \n        int sumOfAllDigits\
    \ = filtered.stream().mapToInt(Integer::intValue).sum();\n        int numOfZeros\
    \ = filtered.stream().filter(x -> x == 0).count();\n        return sumOfAllDigits\
    \ - numOfZeros;", "        Arrays.sort(arr);\n        int count = 0;\n       \
    \ int first = -arr.get(0);\n        int last = arr.get(arr.size()-1);\n      \
    \  int sign = -1;\n        if(first < 0)\n            sign = -1;\n        else\
    \ if(last < 0)\n            sign = 1;\n        else\n            sign = Integer.signum(last);\n\
    \        for(int i=0;i<arr.size();i++)\n        {\n            int num = arr.get(i);\n\
    \            int n1 = sign*num;\n            int n2 = num-first;\n           \
    \ if(n1 > n2)\n                count += n1-n2;\n            else\n           \
    \     count += n2-n1;\n        }\n        return count;", "        Integer ans\
    \ = 0;\n        for (int num : arr) {\n            ans += num;\n        }\n  \
    \      if (ans.sign() > 0) {\n            return arr.stream().filter(e -> e.sign()\
    \ != 0).count();\n        } else {\n            return arr.stream().filter(e ->\
    \ e.sign() == 0).count();\n        }", "        if (arr.isEmpty()) {\n       \
    \     return 0;\n        }\n        ArrayList<Integer> negatives = new ArrayList<Integer>();\n\
    \        Iterator<Integer> itr = arr.iterator();\n        while (itr.hasNext())\
    \ {\n            Integer num = itr.next();\n            int sum = 0;\n       \
    \     for (int i = 0; i < num.toString().length(); i++) {\n                sum\
    \ += Character.getNumericValue(num.toString().charAt(i));\n            }\n   \
    \         if (num < 0 && sum < 0) {\n                negatives.add(num);\n   \
    \         }\n        }\n        if (arr.size() == negatives.size()) {\n      \
    \      return arr.size();\n        }\n        return arr.size() - negatives.size();",
  "        int count = 0;\n        for( Integer i : arr) {\n            if( i > 0\
    \ ) {\n                int digit = 0;\n                while( i >= 10 ) {\n  \
    \                  i /= 10;\n                    digit++;\n                }\n\
    \                if( digit > 0 ) {\n                    count += digit;\n    \
    \            }\n            }\n        }\n        return count;", "        int\
    \ count = 0, num = 0;\n        for (int i = 0; i < arr.size(); i++) {\n      \
    \      num = Math.abs(arr.get(i));\n            if (num > 0) {\n             \
    \   count += num;\n            } else {\n                count += Math.abs(num)\
    \ - 1;\n            }\n        }\n        return count;", "        ArrayList<Integer>\
    \ digits = new ArrayList<Integer>();\n        ArrayList<Integer> nums = new ArrayList<Integer>();\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            int n = (int) Math.pow(10,\
    \ arr.size() - i - 1);\n            int sum = 0;\n            for (int j = 0;\
    \ j < arr.size(); j++) {\n                sum += arr.get(j);\n            }\n\
    \            if (sum > 0) {\n                nums.add(sum);\n            }\n \
    \       }\n        for (int i = 0; i < nums.size(); i++) {\n            if (digits.size()\
    \ > 0) {\n                int s = digits.get(0);\n                if (nums.get(i)\
    \ - s > 0) {\n                    int newNum = nums.get(i) - s;\n            \
    \        if (newNum < digits.size() &&\n                        newNum > 0) {\n\
    \                        digits.add(newNum);\n                    } else if (newNum\
    \ > 0) {\n                        digits.add(newNum - digits.size());\n      \
    \                  digits.add(0, s);\n                        nums.remove(0);\n\
    \                        continue;\n                    } else {\n           \
    \             digits.add(s - digits.size());\n                    }\n        \
    \        } else if (nums.get(i) > 0) {\n                    digits.add(0, s);\n\
    \                    nums.remove(0);\n                }\n            }\n     \
    \   }\n        return digits.size();", "        int sum = 0;\n        for (Integer\
    \ i : arr) {\n            sum += i.intValue();\n        }\n        return sum;",
  "        int ret = 0;\n        for(int i=0;i<arr.size();i++) {\n            int\
    \ digits = Math.abs(arr.get(i));\n            int sign = digits/10;\n        \
    \    ret = ret + (sign==1?1:(sign==-1?-1:0));\n        }\n        return ret;",
  "        int ans = 0;\n        for(int i = 0; i < arr.size(); i++){\n          \
    \  if(arr.get(i) > 0){\n                ans += arr.get(i); // Add every number\
    \ to the running total\n                for(int j = arr.size()-1; j > i; j--){\n\
    \                    if(arr.get(j) > 0){\n                        ans += arr.get(j);\
    \ // Add every number to the running total\n                    }\n          \
    \      }\n            }\n        }\n        return ans;", "        // write your\
    \ code\n        Map<Integer,Integer> map = new HashMap<Integer,Integer>();\n \
    \       for(Integer num : arr){\n            if (map.containsKey(num))\n     \
    \           map.put(num,map.get(num)+1);\n            else\n                map.put(num,1);\n\
    \        }\n        int count = 0;\n        for(Integer num : map.keySet()){\n\
    \            if (num >= 0 && num < 10){\n                if (map.get(num) > 0)\n\
    \                    count += map.get(num);\n            }\n            else{\n\
    \                while (num >= 0){\n                    if (num % 10 == 0 && map.get(num)\
    \ > 0){\n                        count += map.get(num);\n                    }\n\
    \                    num /= 10;\n                }\n            }\n        }\n\
    \        return count;", "        if (arr.isEmpty()) {\n            return 0;\n\
    \        }\n        int count = 0;\n        if (arr.size() == 1) {\n         \
    \   return arr.get(0);\n        }\n        int num1 = arr.get(0);\n        int\
    \ num2 = arr.get(1);\n        int sum1 = num1 + num2;\n        int sum2 = num1\
    \ + num2;\n        int sum3 = num1 + num2;\n        int sum4 = num1 + num2;\n\
    \        for (int i = 2; i < arr.size(); i++) {\n            int num2 = arr.get(i);\n\
    \            int sum2 = num2 + num1;\n            int sum3 = num2 + num1;\n  \
    \          int sum4 = num2 + num1;\n            sum1 = sum2;\n            sum2\
    \ = sum3;\n            sum3 = sum4;\n            sum4 = sum1;\n        }\n   \
    \     int sum5 = sum1 + sum2 + sum3 + sum4;\n        if (sum5 > 0) {\n       \
    \     count++;\n        }\n        return count;", "        arr.sort(null);\n\
    \        ArrayList<Integer> digits = Arrays.stream(arr).filter(x -> x > 0).boxed()\n\
    \                .collect(Collectors.toCollection(ArrayList::new));\n        int\
    \ count = 0;\n        for(int i = digits.size() - 1; i >= 0; i--) {\n        \
    \    int n = 0;\n            for(int j = digits.size() - 1; j > i; j--) {\n  \
    \              n += digits.get(j) * Math.pow(10, j - 1);\n            }\n    \
    \        if(n == 0) {\n                count++;\n            }\n            int\
    \ c = 0;\n            for(int j = 1; j > i; j--) {\n                c += digits.get(j)\
    \ * Math.pow(10, j);\n            }\n            if(c > 0 && n < 0) {\n      \
    \          count += 1;\n            }\n        }\n        return count;", "  \
    \      ArrayList<Integer> res = new ArrayList<Integer>();\n        for (int i\
    \ : arr) {\n            if (i > 0) {\n                int sign = i;\n        \
    \        while (i >= 10) {\n                    sign = i % 10;\n             \
    \       i = i / 10;\n                }\n                if (sign > 0) {\n    \
    \                res.add(i);\n                }\n            }\n        }\n  \
    \      return res.size();", "        int count = 0;\n        for (Integer i :\
    \ arr) {\n            if (i == 0) continue;\n            int digit = 0;\n    \
    \        while (i >= 10) {\n                i /= 10;\n                digit ++;\n\
    \            }\n            while (i > 0) {\n                i /= 10;\n      \
    \          digit --;\n            }\n            if (digit > 0) {\n          \
    \      count ++;\n            }\n        }\n        return count;", "        ArrayList<Integer>\
    \ digit = new ArrayList<>();\n        arr.stream().forEach(v -> {\n          \
    \  int v = Math.abs(v);\n            if (v > 0) {\n                digit.add(v);\n\
    \            }\n        });\n        int nums = 0;\n        for (int i = 0; i\
    \ < digit.size(); i++) {\n            nums += digit.get(i);\n        }\n     \
    \   return nums;", "        int sum = 0;\n        for(int i = 0; i < arr.size();\
    \ i++)\n        {\n            if(arr.get(i) > 0)\n            {\n           \
    \     sum += arr.get(i);\n            }\n        }\n        return sum;", "  \
    \      int count = 0;\n        for (int i : arr) {\n            count += Math.abs(i);\n\
    \        }\n        return count;", "        List<Integer> res = new ArrayList<>();\n\
    \        for (int i : arr) {\n            if (i < 0) {\n                res.add(-(int)\
    \ Math.pow(10, i));\n            } else {\n                res.add((int) Math.pow(10,\
    \ i));\n            }\n        }\n        return res.stream().mapToInt(i -> Math.abs(i)).filter(i\
    \ -> i > 0).count();", "        int count = 0;\n        for (int i = 0; i < arr.size();\
    \ i++) {\n            if (arr.get(i) > 0) {\n                count += 1;\n   \
    \         }\n        }\n        return count;", "        Map<Integer, Integer>\
    \ map = new HashMap<Integer, Integer>();\n        for(int i = 0; i < arr.size();\
    \ i++) {\n            int num = arr.get(i);\n            if(map.containsKey(num))\
    \ {\n                int old = map.get(num);\n                map.put(num, old\
    \ + 1);\n            } else {\n                map.put(num, 1);\n            }\n\
    \        }\n        int res = 0;\n        for(Integer num : map.values()) {\n\
    \            int sum = 0;\n            for(int i = 0; i < num; i++) {\n      \
    \          sum += arr.get(i); \n            }\n            if(sum > 0) {\n   \
    \             res++;\n            }\n        }\n        return res;", '        arr.stream().mapToInt(num
    -> num % 10).filter(i -> i > 0).count();', "        int count = 0;\n        for\
    \ (Integer i : arr) {\n            if (i != 0) {\n                int sum = 0;\n\
    \                while (i > 0) {\n                    sum += i % 10;\n       \
    \             i /= 10;\n                }\n                if (sum > 0) {\n  \
    \                  count++;\n                }\n            }\n        }\n   \
    \     return count;", "        int ret = 0;\n        arr.stream().filter(x ->\
    \ x > 0).forEach(x -> {\n            ret += (Math.abs(x) - Math.abs(x%10));\n\
    \        });\n        return ret;", "        int sum = 0;\n        for(Integer\
    \ num : arr) {\n            sum += getSignedSum(num);\n        }\n        return\
    \ sum;", "        if(arr.isEmpty())\n            return 0;\n        if(arr.get(0)\
    \ < 0)\n            arr.add(-arr.get(0));\n        for(Integer num : arr)\n  \
    \      {\n            int sum = 0;\n            while(num > 0)\n            {\n\
    \                sum = sum + num % 10;\n                num = num / 10;\n    \
    \        }\n            if(sum > 0)\n            {\n                arr.add(sum);\n\
    \            }\n        }\n        int n = arr.size();\n        for(int i=0; i\
    \ < n; i++)\n        {\n            int sum = 0;\n            for(int j=0; j <\
    \ n; j++)\n            {\n                sum = sum + arr.get(j);\n          \
    \  }\n            if(sum == 0)\n            {\n                return n + 1;\n\
    \            }\n        }\n        return n;", "        int sum = 0;\n       \
    \ for (Integer i : arr) {\n            if (i < 0) {\n                sum++;\n\
    \                i = -i;\n            }\n            sum += i;\n        }\n  \
    \      return sum;", "        List<Integer> positiveSum = new ArrayList<>();\n\
    \        List<Integer> negativeSum = new ArrayList<>();\n        for(int i : arr){\n\
    \            if(i>0){\n                positiveSum.add(i);\n            }else{\n\
    \                negativeSum.add(i);\n            }\n        }\n        return\
    \ positiveSum.stream().filter(x -> x > 0).count();", "        int count = 0;\n\
    \        for(Integer i: arr) {\n            if(i.intValue() > 0) {\n         \
    \       count += i.intValue();\n            }\n        }\n        return count;",
  "        // Write your code in Java 7\n        int count = 0;\n        List<Integer>\
    \ negatives = new ArrayList<Integer>();\n        List<Integer> positives = new\
    \ ArrayList<Integer>();\n        \n        // Check if the first element is negative\n\
    \        if (arr.get(0) < 0) {\n            negatives.add(arr.get(0));\n     \
    \       \n            // If the first element is negative, then it is\n      \
    \      // the first signed digit will be negative, e.g. -123 has signed digits\
    \ -1, 2, and 3\n            negatives.add(arr.get(0));\n        } else {\n   \
    \         negatives.clear();\n            positives.add(arr.get(0));\n       \
    \ }\n        \n        for (int i = 1; i < arr.size(); i++) {\n            int\
    \ value = arr.get(i);\n            int sum = 0;\n            \n            while\
    \ (value > 0) {\n                sum += value % 10;\n                value /=\
    \ 10;\n            }\n            \n            if (sum > 0) {\n             \
    \   positives.add(sum);\n            } else {\n                negatives.add(sum);\n\
    \            }\n        }\n        \n        // Add the number of positive and\
    \ negative numbers to the return value\n        count += positives.size();\n \
    \       count += negatives.size();\n        return count;", "        int count\
    \ = 0;\n        for (int num : arr) {\n            if (num < 0) {\n          \
    \      num = Math.abs(num);\n            }\n            count = count + (int)\
    \ Math.floor(Math.log10(num + 1));\n            if (count == 9) {\n          \
    \      break;\n            }\n        }\n        return count;", "        int\
    \ count = 0;\n        for (int n : arr) {\n            int sum = 0;\n        \
    \    for (int d : n.digits()) {\n                sum += d;\n            }\n  \
    \          if (sum > 0) {\n                count++;\n            }\n        }\n\
    \        return count;", "        long num = arr.get(0);\n        boolean negative\
    \ = num < 0;\n        if (negative) {\n            num = -num;\n        }\n  \
    \      for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) == 0)\
    \ {\n                continue;\n            }\n            num /= 10;\n      \
    \      int digit = arr.get(i) % 10;\n            if (Math.abs(digit) > 1) {\n\
    \                return 0;\n            }\n            while (Math.abs(num) >=\
    \ 1) {\n                if (num >= 10) {\n                    num /= 10;\n   \
    \                 digit += arr.get(i) % 10;\n                    i -= 1;\n   \
    \             } else {\n                    digit -= 1;\n                }\n \
    \           }\n            while (Math.abs(num) >= 10) {\n                if (num\
    \ >= 10) {\n                    num /= 10;\n                    digit += arr.get(i)\
    \ % 10;\n                    i -= 1;\n                } else {\n             \
    \       digit -= 1;\n                }\n            }\n            if (digit >\
    \ 0) {\n                return i + 1;\n            }\n        }\n        if (negative)\
    \ {\n            return 1;\n        } else {\n            return 0;\n        }",
  "        int count = 0;\n        Arrays.stream(arr).forEach(x -> {\n           \
    \ int digitSum = sum_digits(x);\n            if (digitSum > 0) {\n           \
    \     count++;\n            }\n        });\n        return count;", "        Arrays.sort(arr);\n\
    \        int cnt = 0;\n        for(int i : arr) {\n            if(i >= 0) {\n\
    \                cnt += 1;\n            }\n        }\n        return cnt;", " \
    \       int sum = 0;\n        for (int i = 0; i < arr.size(); i++)\n         \
    \   sum += arr.get(i);\n        return sum;", "        // If there are no elements,\
    \ return 0\n        if (arr.size() == 0) {\n            return 0;\n        }\n\
    \        int count = 0;\n        // Use a map to hold the count of each digit\
    \ as you find them so we can count them\n        // once we have found them\n\
    \        HashMap<Character, Integer> digitCountMap = new HashMap<>();\n      \
    \  // Go through each number in the array\n        for (Integer num : arr) {\n\
    \            int sum = num;\n            // Go through each digit in the number\n\
    \            for (int i = sum; i > 0; i--) {\n                // If the digit\
    \ is already in the map, add 1 to its count\n                if (digitCountMap.containsKey(Character.forDigit(i,\
    \ 10))) {\n                    digitCountMap.put(Character.forDigit(i, 10), digitCountMap.get(Character.forDigit(i,\
    \ 10)) + 1);\n                } else {\n                    // If the digit is\
    \ not yet in the map, add it with a count of 1\n                    digitCountMap.put(Character.forDigit(i,\
    \ 10), 1);\n                }\n            }\n            // Increment the count\
    \ of all the digits already in the map\n            count += digitCountMap.values().stream().reduce(0,\
    \ Integer::sum);\n        }\n        return count;", "        Integer num = 0;\n\
    \        for(int i=0; i< arr.size(); i++){\n            num += arr.get(i);\n \
    \           \n            if(num >= 10)\n                num = num/10;\n     \
    \       else if(num < 0)\n                num = -num;\n        }\n        return\
    \ arr.size() - num;", "        int count = 0;\n        for (int i : arr) {\n \
    \           if (i >= 0) {\n                count += (int) Math.pow(10, arr.size()\
    \ - i - 1);\n            }\n        }\n        return count;", "        \n   \
    \     int count = 0;\n        for(int i = 1; i < arr.size(); i++){\n         \
    \   int sum = 0;\n            for(int j = i-1; j >= 0; j--){\n               \
    \ sum += arr.get(j);\n            }\n            if(sum > 0){\n              \
    \  count++;\n            }\n        }\n        return count;", "        int result\
    \ = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i)\
    \ > 0) result++;\n        }\n        return result;", "        int count = 0;\n\
    \        int[] arrOfDigits = arr.stream().mapToInt(Integer::intValue).toArray();\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            count += arrOfDigits[i]\
    \ > 0 ? 1 : 0;\n        }\n        return count;", "        int count = 0;\n \
    \       for(int i = 0; i < arr.size(); i++) {\n            int j = arr.get(i);\n\
    \            if(i+1 < arr.size() && arr.get(i+1) > j) {\n                j *=\
    \ -1;\n            }\n            if(j > 0) {\n                count += j;\n \
    \           }\n        }\n        return count;", "        int[] arr = new int[arr.size()];\n\
    \        int nums = 0;\n        for (int i = 0; i < arr.size(); i++) {\n     \
    \       if (arr.get(i) >= 0) {\n                int firstDigit = arr.get(i) %\
    \ 10;\n                if (firstDigit < 0) {\n                    firstDigit *=\
    \ -1;\n                }\n                arr[i] = firstDigit;\n             \
    \   nums++;\n            } else {\n                arr[i] = -arr.get(i) / 10;\n\
    \            }\n        }\n        return nums;", "        // Write your code\
    \ here.\n        int[] sum = arr.stream().mapToInt(x -> Math.abs(x)).sum();\n\
    \        int n = sum.stream().filter(x -> x > 0).count();\n        return n;",
  "        int sum = 0;\n        for(int i : arr) {\n            sum += i;\n     \
    \   }\n        if(sum < 0) return 0;\n        ArrayList<Integer> ret = new ArrayList<>();\n\
    \        for(int i = 0; i < arr.size(); i++) {\n            int num = arr.get(i);\n\
    \            int digit = 0;\n            while(num > 0) {\n                digit\
    \ = (num % 10) + 1;\n                num = (num / 10);\n            }\n      \
    \      if(digit > 0) ret.add(digit);\n        }\n        return ret.size();",
  "        Arrays.stream(arr).filter(i -> i >= 0).filter(i -> i >= 0).count();\n \
    \       return arr.size();", "        int numOfElements = 0;\n\n        for (int\
    \ i = 0; i < arr.size(); i++) {\n            int digitSum = 0;\n            int\
    \ num = arr.get(i);\n            while (num >= 0) {\n                digitSum\
    \ += num % 10;\n                num = num / 10;\n            }\n\n           \
    \ if (digitSum >= 0)\n                numOfElements++;\n        }\n        return\
    \ numOfElements;", "        \n        // return all elements that sum up to more\
    \ than one\n        return (int) arr.stream().filter(number -> {\n           \
    \ int sum = 0;\n            for (int i = 0; i < number; i++) {\n             \
    \   sum += Math.abs((int) Math.pow(10, i)) * (int) Math.pow(10, i);\n        \
    \    }\n            return sum > 1;\n        }).count();", "        int count\
    \ = 0;\n        int n = arr.size();\n        int total = 0;\n        for (Integer\
    \ i : arr) {\n            total += i;\n        }\n        if (total < 0) {\n \
    \           int newTotal = 0;\n            int newNum;\n            int index\
    \ = arr.size() - 1;\n            for (int i = index; i >= 0; i--) {\n        \
    \        newNum = arr.get(i);\n                newTotal += newNum;\n         \
    \       if (total < newTotal) {\n                    break;\n                }\n\
    \            }\n            total -= newTotal;\n        }\n        while (total\
    \ > 9) {\n            total = 0;\n            for (int i = arr.size() - 1; i >=\
    \ 0; i--) {\n                total += arr.get(i);\n            }\n        }\n\
    \        for (int i = 0; i < n; i++) {\n            if (total > 9) {\n       \
    \         count++;\n                total -= 9;\n            }\n        }\n  \
    \      return count;", "        if (arr == null) {\n            return 0;\n  \
    \      }\n        if (arr.isEmpty()) {\n            return 0;\n        }\n   \
    \     HashMap<Integer, Integer> map = new HashMap<>();\n        int count = 0;\n\
    \        arr.stream().forEach(i -> map.put(i, (int) Math.round(i)));\n       \
    \ IntStream.range(0, map.size()).forEach(i -> {\n            if (map.get(i) >\
    \ 0) {\n                map.put(i, map.get(i) - 1);\n                count++;\n\
    \            }\n        });\n        return count;", "        int sum = 0;\n \
    \       for(int i : arr) {\n            sum += i;\n        }\n        if(sum >\
    \ 0) {\n            return arr.size();\n        }\n        sum -= Math.abs(sum);\n\
    \        return arr.stream()\n                .filter(x -> x > 0)\n          \
    \      .count();", "        if(arr.isEmpty()) return 0;\n\n        int sum = arr.get(0);\n\
    \        for(int i = 1; i < arr.size(); i++){\n            int cur_sum = sum +\
    \ arr.get(i);\n            if(cur_sum > 9){\n                sum = cur_sum % 10;\n\
    \            } else {\n                sum = 0;\n                break;\n    \
    \        }\n        }\n        return arr.size() - 1;", "        final int[] nums\
    \ = new int[arr.size()];\n        for (int i = 0; i < arr.size(); i++) {\n   \
    \         nums[i] = Math.abs(arr.get(i));\n        }\n\n        Arrays.sort(nums);\n\
    \        int sum = 0;\n        int last = 0;\n        for (int i : nums) {\n \
    \           sum += i;\n            last = Math.max(last, i);\n        }\n    \
    \    // If all the numbers have the same sum, then count is 0\n        if (sum\
    \ == 0) return 0;\n        // If all the numbers have different sums, then count\
    \ is 1\n        if (sum != 0) return 1;\n        // If the last number is different\
    \ than the first, then count is\n        // the number of distinct numbers with\
    \ a positive sum\n        return (nums[0] == nums[nums.length - 1]) ?\n      \
    \          Math.max(1, last + 1) : last;", "        int count = 0;\n        \n\
    \        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) >\
    \ 0) {\n                for (int j = arr.get(i); j > 0; j--) {\n             \
    \       count += Math.abs(j);\n                }\n                break;\n   \
    \         }\n        }\n        return count;", "        int count = 0;\n    \
    \    for (int n : arr) {\n            if (n < 0) {\n                n -= Math.signum(n);\n\
    \            }\n            count = Math.max(count, n);\n        }\n        return\
    \ count;", "        ArrayList<Integer> list = new ArrayList<Integer>();\n    \
    \    for (Integer i : arr) {\n            list.add(i);\n        }\n        int\
    \ res = 0;\n        for (int i : list) {\n            if (i < 0) {\n         \
    \       list.add(-i);\n            }\n        }\n        Collections.sort(list);\n\
    \        boolean flag = true;\n        for (int i = list.size() - 1; i > 0; i--)\
    \ {\n            if (list.get(i) % 10 != 0) {\n                flag = false;\n\
    \                break;\n            }\n        }\n        for (int i : list)\
    \ {\n            if (i >= 0) {\n                res++;\n            }\n      \
    \  }\n        return res;", "        int count = 0;\n        for (int i : arr)\
    \ {\n            int sum = 0;\n            while (i > 0) {\n                sum\
    \ += i % 10;\n                i /= 10;\n            }\n            if (sum > 0)\
    \ {\n                count++;\n            }\n        }\n        return count;",
  "        int result = 0;\n        for (Integer x : arr) {\n            if (x > 0)\
    \ {\n                result = result + count_digits(x);\n            }\n     \
    \   }\n        return result;", "        int total = 0;\n        for (int i =\
    \ 0; i < arr.size(); i++) {\n            int x = Math.abs(arr.get(i));\n     \
    \       if (x > 0) {\n                for (int j = x; j >= 0; j--) {\n       \
    \             if (x % 10 != 0) break;\n                    x = x / 10;\n     \
    \               total++;\n                }\n            } else {\n          \
    \      x = Math.abs(arr.get(i));\n                if (x < 0) {\n             \
    \       if (x % 10 >= 0) total--;\n                }\n            }\n        }\n\
    \        return total;", "        int sum = 0;\n        int count = 0;\n     \
    \   for (Integer i : arr) {\n            if (i > 0) {\n                sum +=\
    \ i;\n                if (sum >= 10) {\n                    count += 1;\n    \
    \                sum -= 10;\n                }\n            }\n        }\n   \
    \     return count;", "        Set<Integer> set = new HashSet<Integer>();\n  \
    \      for(Integer number : arr) {\n            set.add(number);\n        }\n\
    \        return set.size();", "        int res = 0;\n        for (int num : arr)\
    \ {\n            if (num > 0) {\n                for (int i = 0, j = num - 10;\
    \ i < j; i++, j--) {\n                    if (j == 0) {\n                    \
    \    res++;\n                    }\n                }\n            }\n       \
    \ }\n        return res;", "        // If no numbers are in the array, return\
    \ zero.\n        if (arr.size() == 0) {\n            return 0;\n        }\n\n\
    \        // If the first element in the array is a negative number, return the\n\
    \        // number of elements with a negative sum.\n        if (arr.size() ==\
    \ 1 && (arr.get(0) < 0)) {\n            return 1;\n        }\n\n        // Calculate\
    \ the sum of all the numbers in the array.\n        int sum = arr.get(0);\n  \
    \      for (int i = 1; i < arr.size(); i++) {\n            sum = sum + arr.get(i);\n\
    \        }\n\n        // If there are no negative numbers in the array, return\
    \ zero.\n        if (arr.size() == 1 && sum == 0) {\n            return 0;\n \
    \       }\n\n        // If the sum of the numbers in the array is negative, return\
    \ the\n        // number of elements with a negative sum.\n        if (sum < 0)\
    \ {\n            return Math.min(arr.size() - 1, Math.abs(sum));\n        }\n\n\
    \        // If the sum is positive, return the number of numbers which sum\n \
    \       // to that value.\n        return arr.size() - 1;", "        if (arr.isEmpty())\n\
    \            return 0;\n        ArrayList<Integer> l = new ArrayList<Integer>();\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            int n = arr.get(i);\n\
    \            if (n > 0)\n                l.add(n);\n            else if (n ==\
    \ 0)\n                return l.size();\n        }\n        Collections.sort(l);\n\
    \        int ans = l.size();\n        for (int i = 0; i < l.size(); i++) {\n \
    \           ans -= (l.get(i) % 10);\n            ans *= 10 - (l.get(i) % 10);\n\
    \        }\n        return ans;", "        int sum = 0;\n        if (arr == null\
    \ || arr.size() == 0)\n            return 0;\n        arr.forEach(i -> {\n   \
    \         int numDigits = Integer.toString(i).length();\n            sum += i;\n\
    \            while (sum > 9) {\n                sum -= 10;\n            }\n  \
    \      });\n        return arr.size();", "        int count = 0;\n        for(int\
    \ num: arr){\n            int sum = 0;\n            int sign = (int)num;\n   \
    \         while(num != 0) {\n                sum += (num%10)*sign;\n         \
    \       num = num/10;\n            }\n            if(!((sum > 0))){\n        \
    \        count ++;\n            }\n        }\n        return count;", "      \
    \  Arrays.sort(arr);\n        int count = 0;\n        for (int i = 1; i <= arr.size();\
    \ i++) {\n            while (arr.get(i) >= 0) {\n                count++;\n  \
    \              i -= 1;\n            }\n        }\n        return count;", "  \
    \      ArrayList<Integer> result=new ArrayList<>();\n        for(int i=0;i<arr.size();i++){\n\
    \            int num=arr.get(i);\n            int count=0;\n            while(num>0){\n\
    \                count++;\n                num-=num%10;\n            }\n     \
    \       result.add(count);\n        }\n        return result.size();", "     \
    \   Integer[] nums = arr.stream().mapToInt(i -> i).toArray();\n        int cnt\
    \ = 0;\n        for(int n: nums) {\n            cnt += countDigits(n);\n     \
    \   }\n        return cnt;", "        int sum = 0;\n        for (int i = 0; i\
    \ < arr.size(); i++) {\n            sum += arr.get(i);\n        }\n        return\
    \ sum;", "        int sum = 0;\n        if (arr.isEmpty())\n            return\
    \ 0;\n        arr.forEach(n -> {\n            if (n < 0)\n                sum\
    \ += n%10;\n            else\n                sum += n;\n        });\n       \
    \ return sum;", "        int sum = 0;\n        int count = 0;\n        Integer\
    \ first = arr.get(0);\n        if (first == null) {\n            return 0;\n \
    \       }\n        sum += first.intValue();\n        for (int i = 1; i < arr.size();\
    \ i++) {\n            Integer curr = arr.get(i);\n            if (curr == null)\
    \ {\n                continue;\n            }\n            sum += curr.intValue();\n\
    \            if (sum > 9) {\n                count++;\n            }\n       \
    \     sum -= curr.intValue();\n            if (sum < 9) {\n                sum\
    \ += 10;\n            }\n        }\n        return count;", "        int count\
    \ = 0;\n        for (int x : arr) {\n            if (x > 0)\n                count\
    \ = count + 1;\n        }\n        return count;", "        int result = 0;\n\
    \        for(int i = 0; i < arr.size(); i++) {\n            int sum = 0;\n   \
    \         int number = arr.get(i);\n            for(int j = 0; j < number.length();\
    \ j++) {\n                sum += Integer.parseInt(Character.toString(number.charAt(j)));\n\
    \            }\n            if(sum > 0) {\n                result++;\n       \
    \     }\n        }\n        return result;", "        int[] count = new int[arr.size()];\n\
    \        List<Integer> nums = new ArrayList<>();\n        for (int i = 0; i <\
    \ count.length; i++) {\n            count[i] = 0;\n        }\n        for(int\
    \ num : arr){\n            int digit = Integer.valueOf(Math.abs(num))%10;\n  \
    \          count[digit]++;\n            nums.add(num);\n        }\n        int\
    \ result = 0;\n        for (int i = 0; i < count.length; i++) {\n            result\
    \ += count[i];\n        }\n        return result;", "        int count = 0;\n\
    \        ArrayList<Integer> digits = new ArrayList<>(arr.size());\n        for\
    \ (int n : arr) {\n            digits.add(Math.abs(n));\n        }\n        Collections.sort(digits);\n\
    \        for (int i = 0; i < digits.size(); i++) {\n            if (digits.get(i)\
    \ > 0) {\n                count += digits.get(i);\n            }\n        }\n\
    \        return count;", "        return IntStream.range(0, arr.size()).filter(i\
    \ -> arr.get(i) < 0)\n                .map(i -> {\n                    int first\
    \ = arr.get(i) - 0;\n                    int rest = arr.get(i) - first - 1;\n\
    \                    return (first > 0) ? rest : -rest;\n                }).count();",
  "        int count = 0;\n        if (arr.isEmpty()) {\n            return count;\n\
    \        }\n        Stream<Integer> stream = arr.stream();\n        Integer number\
    \ = stream.findAny().get();\n        int neg = -number;\n        if (number <\
    \ 0) {\n            neg = -neg;\n            number = -number;\n        }\n  \
    \      for (int i = 0; i < arr.size(); i++) {\n            int sum = 0;\n    \
    \        for (int j = 0; j < number.length(); j++) {\n                sum += Character.getNumericValue(number.charAt(j))\
    \ - Character.getNumericValue(arr[neg - i].charAt(j));\n            }\n      \
    \      if (sum > 0) {\n                count++;\n            }\n        }\n  \
    \      return count;", "        final int len = arr.size();\n        int count\
    \ = 0;\n        // loop through all elements\n        for (int i = 0; i < len;\
    \ i++) {\n            Integer element = arr.get(i);\n            // check if the\
    \ first element is negative\n            if (element < 0) {\n                element\
    \ *= -1; // first element is a negative number\n            }\n            //\
    \ loop through all element digits\n            for (int j = 0; j < element.length();\
    \ j++) {\n                // check if the last digit is non-zero\n           \
    \     if (j == element.length() - 1 && element.charAt(j) != '0') {\n         \
    \           // if it is non-zero then increment the counter\n                \
    \    count++;\n                }\n            }\n        }\n        return count;",
  "        double num = arr.stream().map(i -> Math.abs(i)).sum();\n        double\
    \ sum = 0;\n        int count = 0;\n        for(int i = 0; i < arr.size(); i++){\n\
    \            sum += Math.abs(arr.get(i));\n            if(sum < num){\n      \
    \          count++;\n            }\n        }\n        return count;", "     \
    \   // your code here\n        if(arr == null){\n            return 0;\n     \
    \   }\n        int size = arr.size();\n        int result = 0;\n        int sum\
    \ = 0;\n        for(int i=0 ; i< size;i++){\n            sum = arr.get(i);\n \
    \           result += sum/10;\n        }\n        return result;", "        //\
    \ count the digits which are positive\n        int pos_cnt = 0;\n        for (int\
    \ n : arr)\n            while (n >= 0)\n                ++pos_cnt;\n        //\
    \ count the number of negative numbers with leading negative digits\n        int\
    \ neg_cnt = 0;\n        for (int n : arr)\n            if (n >= 0)\n         \
    \       ++neg_cnt;\n        return pos_cnt - neg_cnt;", "        int count = 0;\
    \ // count the numbers which sum is > 0\n        Iterator<Integer> iterator =\
    \ arr.iterator();\n        while (iterator.hasNext()) {\n            int next\
    \ = iterator.nextInt();\n            if (next < 0) {\n                next = next\
    \ * -1;\n            }\n            int digit = 0;\n            while (next >\
    \ 0) {\n                digit += next % 10;\n                next /= 10;\n   \
    \         }\n            if (digit > 0) {\n                count++;\n        \
    \    }\n        }\n        return count;", "        long sum = arr.reduce((acc,\
    \ n) -> acc + n);\n        return (int) (sum / Math.pow(10, arr.size()-1));",
  "        // write your code here\n        int count = 0;\n        for(int i : arr){\n\
    \            if(i.signum()<0){\n                i = -i;\n            }\n     \
    \       for(int j = 0; j<arr.size(); j++){\n                int k = 0;\n     \
    \           while(i+k<arr.size() && k<10){\n                    if(arr.get(i+k)==j)\n\
    \                        k++;\n                    k++;\n                }\n \
    \               if(k>0)\n                    count++;\n            }\n       \
    \ }\n        return count;", "        int sum = 0;\n        for(int i = 0; i<arr.size();\
    \ i++) {\n            int sum2 = arr.get(i);\n            if (sum2 > 0) {\n  \
    \              sum += sum2;\n            }\n        }\n        return sum;", " \
    \       int count = 0;\n        for (int i : arr) {\n            int n = 0;\n\
    \            while (i > 0) {\n                n = (n % 10) + 1;\n            \
    \    i /= 10;\n            }\n            if (n >= 10) {\n                count++;\n\
    \            }\n        }\n        return count;", "        int count = 0;\n \
    \       for (int a : arr) {\n            if ((a > 0)&&(a % 10 == 0)) {\n     \
    \           count++;\n            }\n        }\n        return count;", "    \
    \    ArrayList<Integer> arr = new ArrayList<>();\n        for(int i = 1; i<arr.size();\
    \ i++){\n            if((Math.abs(arr.get(i)) == arr.get(i)).compareTo((Math.abs(arr.get(i))*arr.get(i)))\
    \ >= 0){\n                arr.add(arr.get(i));\n            }\n        }\n   \
    \     return arr.size();", "        /*\n        ArrayList<Integer> arr = new ArrayList<Integer>()\
    \ {{\n            add(123);\n            add(12);\n            add(1);\n     \
    \   }};\n        */\n        // sort the numbers in descending order\n       \
    \ arr.sort(new Comparator<Integer>() {\n            public int compare(Integer\
    \ o1, Integer o2) {\n                return Integer.compare(o2, o1);\n       \
    \     }\n        });\n        // for each number in the array\n        for (int\
    \ n : arr) {\n            // if the sum of the digits is positive\n          \
    \  if (n > 0) {\n                // add 1 to the count of integers with positive\
    \ sums\n                sum += n;\n            }\n            // if the sum of\
    \ the digits is negative\n            if (n < 0) {\n                // subtract\
    \ 1 from the count of integers with negative sums\n                sum -= n;\n\
    \            }\n        }\n        return sum;", "        if(arr.isEmpty()) return\
    \ 0;\n\n        for(int i = 0; i < arr.size(); i++) {\n            if(Math.abs(arr.get(i))\
    \ == arr.size()) {\n                return Math.max(arr.get(i), 0);\n        \
    \    }\n        }\n\n        return 0;", "        int count=0;\n        for (int\
    \ i=0; i<arr.size(); i++)\n        {\n            if (arr.get(i) <= 0)\n     \
    \       {\n                count++;\n            }\n            else if (arr.get(i)\
    \ > 0 && arr.get(i) <= 9)\n            {\n                count+=1;\n        \
    \    }\n            else if (arr.get(i) > 9 && arr.get(i) <= 99)\n           \
    \ {\n                count+=2;\n            }\n            else if (arr.get(i)\
    \ > 99 && arr.get(i) <= 999)\n            {\n                count+=3;\n     \
    \       }\n            else if (arr.get(i) > 999 && arr.get(i) <= 9999)\n    \
    \        {\n                count+=4;\n            }\n            else if (arr.get(i)\
    \ > 9999 && arr.get(i) <= 99999)\n            {\n                count+=5;\n \
    \           }\n            else if (arr.get(i) > 99999 && arr.get(i) <= 999999)\n\
    \            {\n                count+=6;\n            }\n            else if\
    \ (arr.get(i) > 999999 && arr.get(i) <= 9999999)\n            {\n            \
    \    count+=7;\n            }\n            else if (arr.get(i) > 9999999 && arr.get(i)\
    \ <= 999999999)\n            {\n                count+=8;\n            }\n   \
    \         else if (arr.get(i) > 999999999 && arr.get(i) <= 99999999999)\n    \
    \        {\n                count+=9;\n            }\n            else if (arr.get(i)\
    \ > 99999999999 && arr.get(i) <= 9999999999999)\n            {\n             \
    \   count+=10;\n            }\n            else if (arr.get(i) > 9999999999999\
    \ && arr.get(i) <= 999999999999999)\n            {\n                count+=11;\n\
    \            }\n            else if (arr.get(i) > 999999999999999 && arr.get(i)\
    \ <= 9999999999999)\n            {\n                count+=12;\n            }\n\
    \            else if (arr.get(i) > 9999999999999 && arr.get(i) <= 999999999999999)\n\
    \            {\n                count+=13;\n            }\n            else if\
    \ (arr.get(i) > 999999999999999 && arr.get(i) <= 9999999999999)\n            {\n\
    \                count+=14;\n            }\n            else if (arr.get(i) >\
    \ 9999999999999 && arr.get(i) <= 999999999999999)\n            {\n           \
    \     count+=15;\n            }\n            else if (arr.get(i) > 999999999999999\
    \ && arr.get(i) <= 9999999999999)\n            {\n                count+=16;\n\
    \            }\n            else if (arr.get(i) > 9999999999999 && arr.get(i)\
    \ <= 999999999999999)\n            {\n                count+=17;\n           \
    \ }\n            else if (arr.get(i) > 999999999999999 && arr.get(i) <= 9999999999999)\n\
    \            {\n                count+=18;\n            }\n            else if\
    \ (arr.get(i) > 9999999999999 && arr", "        int count = 0;\n        for (int\
    \ num : arr) {\n            int sum = 0;\n            while (num > 0) {\n    \
    \            sum += num % 10;\n                num /= 10;\n            }\n   \
    \         if (sum > 0) {\n                count++;\n            }\n        }\n\
    \        return count;", "        List<Integer> noNegative = new ArrayList<>();\n\
    \        List<Integer> noNegativeWithSum = new ArrayList<>();\n        for (Integer\
    \ i : arr) {\n            if (i < 0) {\n                i = Math.abs(i);\n   \
    \         }\n            int digitSum = Integer.valueOf(i).intValue();\n     \
    \       if (digitSum == 0) {\n                noNegative.add(i);\n           \
    \ } else {\n                noNegativeWithSum.add(digitSum);\n            }\n\
    \        }\n        int noNegativeSum = noNegativeWithSum.stream().mapToInt(Integer::intValue).sum();\n\
    \        return noNegativeSum - noNegative.stream().filter(i1 -> noNegativeWithSum.contains(i1)).count();",
  "        int n = arr.size();\n        int sum = 0;\n        for (int i = 0; i <\
    \ n; ++i) {\n            int num = arr.get(i);\n            int absval = Math.abs(num);\n\
    \            sum += absval % 10;\n        }\n        return sum;"]
stop_tokens:
- "    }\n    //"
- "    }\n    p"
- "    }\n}"
- "\n    }\n"
