completions:
- "        String[] words = S.split(\" \");\n        int count = 0;\n        for(String\
  \ word: words) {\n            if(word.equalsIgnoreCase(\"I\")) {\n             \
  \   count++;\n            }\n        }\n        return count;"
- "        // Split the string by the sentence-delimiters.\n        String[] tokens\
  \ = S.split(\"[.?!]\");\n\n        int count = 0;\n        for (String sentence\
  \ : tokens) {\n            if (sentence.equals(\"I\"))\n                count++;\n\
  \        }\n        return count;"
- "        boolean bored = true;\n        String boredoms = \"\";\n        String[]\
  \ words = S.split(\" \");\n        for (int i = 0; i < words.length; i++) {\n  \
  \          if (words[i].equals(\"I\")) {\n                bored = false;\n     \
  \           boredoms += words[i];\n            }\n        }\n        if (bored)\
  \ {\n            return 1;\n        } else {\n            return 0;\n        }"
- "        String boredoms = Arrays.stream(\"I\")\n                .collect(Collectors.joining());\n\
  \        return S.split(boredoms).length;"
- "        String str = S;\n        str = S.toLowerCase(); // ignore the case\n  \
  \      StringTokenizer tokens = new StringTokenizer(str);\n        int counter =\
  \ 0;\n        while(tokens.hasMoreTokens()) {\n            String token = tokens.nextToken();\n\
  \            String words[] = token.split(\"[.?!]\"); // split on '.', '?' or '!'.\n\
  \            for(String word : words) {\n                if(word.equals(\"i\"))\
  \ {\n                    counter++;\n                }\n            }\n        }\n\
  \        return counter;"
- "        String [] words = S.split(\"\\\\.|\\\\?|\\\\!|\\\\,\");\n        int boredCount\
  \ = 0;\n        for(String word:words) {\n            if(word.equals(\"I\")) {\n\
  \                boredCount++;\n            }\n        }\n        return boredCount;"
- "        int bored = 0;\n        // Your code goes here\n        for (int i = 0;\
  \ i < S.length(); i++) {\n            if (S.charAt(i) == '.') {\n              \
  \  bored++;\n            }\n        }\n        return bored;"
- "        String words = \"hello\".split(\"\\\\s+\");\n        List<String> list\
  \ = Arrays.asList(words.toArray(new String[words.size()]));\n        int count =\
  \ 0;\n        for(int i = 0;i<S.length()-1;i++) {\n            String s1=S.substring(0,i);\n\
  \            String s2=S.substring(i);\n            if((s1.equals(\"I\")||s1.equals(\"\
  you\")||s1.equals(\"me\")||s1.equals(\"my\")||s1.equals(\"myself\")) &&\n      \
  \              (s2.equals(\".\") || s2.equals(\"?\"||s2.equals(\"!\")))) \n    \
  \            count ++;\n        }\n        return count;"
- "        int count = 0;\n        String split[] = S.split(\"\\\\.|\\\\?|\\\\!\"\
  );\n        for(String x : split){\n            if(\"I\".equalsIgnoreCase(x.trim())){\n\
  \                count++;\n            }\n        }\n        return count;"
- "        HashMap<String, Integer> map = new HashMap<>();\n        for (int i = 0;\
  \ i < S.length(); i++) {\n            String word = S.substring(i, i+1);\n     \
  \       map.put(word, map.getOrDefault(word, 0) + 1);\n        }\n        return\
  \ map.get(\"I\");"
- "        int boredom=0;\n        // loop through the sentences\n        for (int\
  \ i=0;i<S.length(); i++){\n            // check if the sentence begins with I\n\
  \            // the indexOf method returns the first position of I\n           \
  \ if (S.indexOf(\"I\")==0){\n                boredom++;\n            }\n       \
  \ }\n        return boredom;"
- "        return S.split(\"[?.!]+\")\n            .mapToInt(line -> line.matches(\"\
  .*I[\\\\. ]?.*\"))\n            .sum();"
- "        int count = 0, p = 0;\n        for (int i = 0; i < S.length(); i++) {\n\
  \            char ch = S.charAt(i);\n            if (ch == '.' || ch == '?' || ch\
  \ == '!')\n                p++;\n            if (p == 1 && ch != 'I')\n        \
  \        count++;\n        }\n        return count;"
- "        // TODO: Your code here\n        int bored = 0;\n        for(int i=0; i<S.length();\
  \ i++){\n            if(S.charAt(i)=='i'){\n                bored++;\n         \
  \   }\n        }\n        return bored;"
- "        String[] words = S.split(\"\\\\.|\\\\?|\\\\!\");\n        Arrays.sort(words);\n\
  \        int bored = 0;\n        for (int i = 0; i < words.length; i++) {\n    \
  \        if (words[i].equals(\"I\")) {\n                bored++;\n            }\n\
  \        }\n        return bored;"
- "        int boredoms = 0;\n        String[] wordS = S.split(\" \");\n        for\
  \ (String str : wordS)\n            if (str.equals(\"I\"))\n                boredoms\
  \ += 1;\n        return boredoms;"
- "        int boredomCount = 0;\n        String word = null;\n        boolean bored\
  \ = false;\n        for(String str : S.split(\"\\\\.\")) {\n            word = str;\n\
  \            bored = true;\n            boredomCount += isBored(word);\n       \
  \     bored = false;\n        }\n        return boredomCount;"
- "        int num = 0;\n        for(String x : S.split(\"[.?!]\")){\n           \
  \ if(x.toLowerCase().startsWith(\"i\")){\n                num++;\n            }\n\
  \        }\n        return num;"
- "        int boredoms = 0;\n        String[] tokens = S.split(\"[.?!]\");\n    \
  \    for(String token : tokens){\n            if(token.equals(\"I\"))\n        \
  \        boredoms++;\n        }\n        return boredoms;"
- "        String[] tokens = S.split(\"[.?!]\");\n        int n = tokens.length;\n\
  \        \n        Arrays.sort(tokens);\n        for (int i = 0; i < n; i++) {\n\
  \            if (tokens[i].equals(\"I\")) {\n                return i;\n       \
  \     }\n        }\n        return n;"
- "        String[] words = S.split(\" \");\n        int[] counts = new int[words.length];\n\
  \        for (int i = 0; i < words.length; ++i) {\n            if (words[i].equals(\"\
  I\")) {\n                counts[i]++;\n            }\n        }\n        return\
  \ counts.length;"
- "        int count = 0;\n        // Create a Pattern object from the string we want\
  \ to match.\n        // The Pattern object is used to create matching pattern from\
  \ String.\n        // In this case, the pattern is \".\".\n        Pattern p = Pattern.compile(\"\
  .\");\n        // Match the pattern against a string.\n        // The method matcher()\
  \ returns the Matcher object for the given string.\n        // It will match all\
  \ the input string to the pattern.\n        // The method find() returns true if\
  \ pattern is found.\n        // If pattern is found, then find the next character,\
  \ and compare the character with\n        // pattern and increment the count if\
  \ both the patterns are same.\n        // Finally, close the Matcher object to release\
  \ the memory.\n        Matcher m = p.matcher(S);\n        while (m.find()) {\n \
  \           String c = m.group();\n            count += (c).equals(\"I\") ? 1 :\
  \ 0;\n        }\n        return count;"
- "        long sum = 0;\n        for(int i = 0; i <= S.length(); i++)\n         \
  \   if(S.charAt(i) == 'I') {\n                sum++;\n            }\n        return\
  \ (int)((double)sum/S.length());"
- "        HashMap<String, Integer> map = new HashMap<>();\n        int count = 0;\n\
  \        for (String s : S.split(\"[?!.]\")) {\n            if (map.containsKey(s))\
  \ {\n                map.put(s, map.get(s) + 1);\n            } else {\n       \
  \         map.put(s, 1);\n            }\n        }\n\n        for (String s : map.keySet())\
  \ {\n            if (s.startsWith(\"I\")) {\n                count += map.get(s);\n\
  \            }\n        }\n        return count;"
- "        int[] count = new int[10];\n        String result = null;\n        for(int\
  \ i =0; i <S.length(); i++){\n            if((S.charAt(i)=='?' || S.charAt(i)=='!'\
  \ || S.charAt(i)=='.') && result.equals(null)){\n                result = S.substring(i);\n\
  \            }\n            else if((S.charAt(i)=='?' || S.charAt(i)=='!' || S.charAt(i)=='.')\
  \ && !result.equals(null)){\n                count[result.charAt(0)-'I']++;\n  \
  \              result = S.substring(i);\n            }\n        }\n        return\
  \ count['I'];"
- "        String[] parts = S.split(\"[.?!]\");\n        int bored = 0;\n        for\
  \ (int i = 0; i < parts.length; i++) {\n            if (parts[i].equals(\"I\"))\
  \ {\n                bored++;\n            }\n        }\n        return bored;"
- "        int count=0;\n        String[] lines=S.split(\"\\\\.|\\\\?|!\");\n    \
  \    for (String line: lines) {\n            if (line.equals(\"I\")) {\n       \
  \         count++;\n            }\n        }\n        return count;"
- "        int count = 0;\n        for (String word: S.split(\"[.?!]\")) {\n     \
  \       if (word.equals(\"I\"))\n                count++;\n        }\n        return\
  \ count;"
- "        int count = 0;\n        for (String s : S.split(\"\\\\.|\\\\?|\\\\!\"))\
  \ {\n            if (s.startsWith(\"I\")) {\n                count++;\n        \
  \    }\n        }\n        return count;"
- "        int count=0;\n        String[] words = S.split(\".\");\n        for (String\
  \ w:words) {\n            if (w.startsWith(\"I\")) {\n                count++;\n\
  \            }\n        }\n        return count;"
- "        int boredom_count = 0;\n        for (int i = 0; i < S.length(); i++) {\n\
  \            String word = S.substring(i, i+1);\n            if (word.equals(\"\
  I\")) {\n                boredom_count++;\n            }\n        }\n        return\
  \ boredom_count;"
- "        \n        // Your code here\n        "
- "        if (S.length() <= 1)\n            return 0;\n        if (S.charAt(0) !=\
  \ 'I')\n            return 0;\n        int count = 0;\n        boolean flag = false;\n\
  \        for(int i = 1; i < S.length(); i++){\n            if (S.charAt(i) == '?'\
  \ || S.charAt(i) == '!')\n                flag = true;\n            if (S.charAt(i)\
  \ == '.' || flag){\n                count++;\n                flag = false;\n  \
  \          }\n        }\n        return count;"
- "        int boredom = 0;\n        List<String> sentence = Arrays.asList(S.split(\"\
  [.!?]\"));\n        for (String word : sentence) {\n            if (word.startsWith(\"\
  I\")) {\n                boredom++;\n            }\n        }\n        return boredom;"
- "        int boredom = 0;\n        String[] boredom = S.split(\"\\\\?\\\\.|\\\\\
  !\\\\.|\\\\?\\\\!\");\n        for (int i = 0; i<boredom.length;i++){\n        \
  \    if (boredom[i].startsWith(\"I\")){\n                boredom++;\n          \
  \  }\n        }\n        return boredom;"
- "        int count = 0;\n        int len = S.length();\n        if (len == 0) {\n\
  \            return count;\n        }\n        char[] arr = S.toCharArray();\n \
  \       char[] bored = new char[]{'I', '!', '.', '?'};\n        int start = 0;\n\
  \        while (start < len) {\n            int end = Math.min(start + 5, len);\n\
  \            String ss = S.substring(start, end);\n            for (int i = 0; i\
  \ < bored.length; i++) {\n                if (ss.startsWith(bored[i])) {\n     \
  \               count++;\n                }\n            }\n            start =\
  \ end;\n        }\n        return count;"
- "        String[] boredoms = {\"I'm\", \"I'd\", \"I'll\", \"I've\"};\n        List<String>\
  \ sentenceList = Arrays.stream(S.split(\"[.?!]\")).collect(Collectors.toList());\n\
  \        \n        String[] sentences = sentenceList.stream().map(s -> s.toLowerCase().replaceAll(\"\
  [^a-z]\",\"\")).collect(Collectors.toList());\n        \n        int count = 0;\n\
  \        \n        for (String s : sentences) {\n            if (boredoms.stream().anyMatch(bored::startsWith))\
  \ {\n                count++;\n            }\n        }\n        return count;"
- "      String[] list = S.split(\"\\\\.|\\\\?|!\");\n      int count = 0;\n     \
  \ for (String s : list)\n        if (s.startsWith(\"I\"))\n          count++;\n\
  \      return count;"
- "        int c = 0;\n        for (String st: S.split(\"[.?!]\")) {\n           \
  \ if (st.equals(\"I\"))\n                c++;\n        }\n        return c;"
- "        String[] words = S.split(\" \");\n        int[] result = new int[words.length];\n\
  \        int count = 1;\n        for (int i = 0; i < words.length; i++)\n      \
  \      if (words[i].equals(\"I\"))\n                count++;\n        result[0]\
  \ = count;\n        \n        return Arrays.stream(result).sum();"
- "        int bored = 0;\n        if (S == null || S.length() == 0) {\n         \
  \   return bored;\n        }\n        for (String w : S.split(\"\\\\.|\\\\?|!\"\
  )) {\n            if (w.equals(\"I\")) {\n                bored++;\n           \
  \ }\n        }\n        return bored;"
- "        char[] arr = S.toCharArray();\n        int count = 0;\n        for(int\
  \ i=0; i<arr.length; i++){\n            switch(arr[i]){\n                case 'i':\n\
  \                    count++;\n                    break;\n                case\
  \ '!':\n                    count--;\n                    break;\n             \
  \   case '?':\n                    count+=2;\n                    break;\n     \
  \           case '.':\n                    count+=3;\n                    break;\n\
  \            }\n        }\n        return count;"
- "        int ans = 0;\n        if (S != null) {\n            String words[] = S.split(\"\
  [.?!]\");\n            for (String w : words) {\n                if (w.equals(\"\
  I\")) ans += 1;\n            }\n        }\n        return ans;"
- "        String p = \"[I]+\";\n        return S.matches(p);"
- "        String[] words = S.split(\".,?!\");\n        int count = 0;\n        for\
  \ (String w : words) {\n            if (w.equals(\"I\")) {\n                count++;\n\
  \            }\n        }\n        return count;"
- "        /*\n        S: string that has to be counted\n        */\n        int a\
  \ = 0;\n        String[] split = S.split(\"[.?!]\");\n        for (String s : split){\n\
  \            if (s.startsWith(\"I\")){\n                a = a + 1;\n           \
  \ }\n        }\n        return a;"
- "        int ans = 0;\n        String[] tokens = S.split(\".\");\n        for(String\
  \ word : tokens) {\n            ans += (word.equalsIgnoreCase(\"I\"));\n       \
  \ }\n        return ans;"
- "        // Write your code here\n        try{\n            Pattern pattern = Pattern.compile(\"\
  [I]{1}.*\");\n            Matcher matcher = pattern.matcher(S);\n            int\
  \ count = 0;\n            while(matcher.find()){\n                count++;\n   \
  \         }\n            return count;\n        }\n        catch (PatternSyntaxException\
  \ ex){\n            throw new RuntimeException(\"Illegal pattern\");\n        }"
- '        return S.split(".").stream().filter(s -> s.startsWith("I")).count();'
- "        int cnt=0;\n        String st=S;\n        String[] arr=st.split(\"\\\\\
  .|\\\\?|\\\\!\");\n        for (int i=0;i<arr.length;i++) {\n            if (arr[i].startsWith(\"\
  I\")) {\n                cnt++;\n            }\n        }\n        return cnt;"
- "        int boredom=0;\n        for (int i=0;i<S.length()-1;i++){\n           \
  \ if (S.substring(i,i+1).equals(\"I\")){\n                boredom++;\n         \
  \   }\n        }\n        return boredom;"
- "        // Write your code here\n        String[] words = S.split(\"\\\\.|\\\\\
  ?|\\\\!\");\n        System.out.println(Arrays.toString(words));\n        return\
  \ words[0].equals(\"I\");"
- "        int count = 0;\n        String[] splitWords = S.split(\"[.?!]\");\n   \
  \     for (String word : splitWords) {\n            if (word.equals(\"I\")) {\n\
  \                count++;\n            }\n        }\n        return count;"
- "        String[] arr = S.split(\"\\\\.|\\\\?|\\\\!\");\n        long boredom =\
  \ 0;\n        for (String s: arr) {\n            if (s.startsWith(\"I\")) {\n  \
  \              boredom++;\n            }\n        }\n        return boredom;"
- "        // Initialize variables and arrays\n        int I = 0;\n        String[]\
  \ sentences = S.split(\"[.?!]\");\n        String[] boredoms = new String[sentences.length];\n\
  \        int countI = 0;\n\n        // Iterate over each sentence\n        for (String\
  \ sentence : sentences) {\n            // Check for \"I\"\n            if (sentence.startsWith(\"\
  I\")) {\n                I++;\n            }\n\n            // Add sentences to\
  \ boredoms array\n            boredoms[countI] = sentence;\n            countI++;\n\
  \        }\n\n        // Iterate over boredoms\n        for (String boredom : boredoms)\
  \ {\n            // Check for boredom\n            if (boredom.startsWith(\"I\"\
  )) {\n                return 1;\n            }\n        }\n        return 0;"
- "        String[] split = S.split(\"[.?!]\");\n        return split.length >= 1\
  \ ? isBored(split[0]) : isBored(split);"
- "        String[] words = S.split(\" \");\n        Map<String,Integer> mymap = new\
  \ HashMap<String,Integer>();\n        for(String word : words) {\n            mymap.put(word,0);\n\
  \        }\n        for(String word : words) {\n            if(word.startsWith(\"\
  I\")) {\n                mymap.put(word,mymap.get(word)+1);\n            }\n   \
  \     }\n        return mymap.get(\"I\").intValue();"
- "        int B = 0;\n        for (String w : S.split(\"[.,!?]\"))\n            if\
  \ (w.startsWith(\"I\"))\n                B++;\n        return B;"
- "        int bored = 0;\n        S = S.toLowerCase();\n        for(String s : S.split(\"\
  [.?!]\")){\n            if(s.equals(\"i\"))\n                bored++;\n        }\n\
  \        return bored;"
- "        Scanner scanner = new Scanner(S);\n        scanner.useDelimiter(Pattern.compile(\"\
  [\\\\.\\\\?!]\"));\n        scanner.useDelimiter(\"\\n\");\n        int count =\
  \ 0;\n        while (scanner.hasNext()) {\n            String s = scanner.next();\n\
  \            if (s.startsWith(\"I\")) {\n                count++;\n            }\n\
  \        }\n        return count;"
- "        // Split S into words by .\n        String[] words = S.split(\"[.?!]\"\
  );\n        int boredom_count = 0;\n        for (String word : words) {\n      \
  \      // Check if the string starts with \"I\", and if so, count it.\n        \
  \    if (word.startsWith(\"I\")) {\n                boredom_count += 1;\n      \
  \      }\n        }\n        return boredom_count;"
- "        int count = 0;\n        if (S.startsWith(\"I\"))\n            count++;\n\
  \        return count;"
- "        int bored = 0;\n        String[] words = S.split(\"[.?!]\");\n        for\
  \ (String word : words) {\n            bored += S.startsWith(word);\n        }\n\
  \        return bored;"
- "        return S.split(\"\\\\.|\\\\?|\\\\!\")\n                .filter(w -> w.startsWith(\"\
  I\"))\n                .map(w -> w.length())\n                .collect(Collectors.summingInt(w->\
  \ w));"
- "        String[] boredoms = S.split(\"[.!?]\");\n        int count = 0;\n     \
  \   for (String boredom : boredoms) {\n            if (boredom.startsWith(\"I\"\
  ))\n                count++;\n        }\n        return count;"
- "        // Your code here\n        int bored = 0;\n        String[] splitS = S.split(\"\
  [.!?]\");\n        for (String s : splitS) {\n            if (s.equals(\"I\"))\n\
  \                bored++;\n        }\n        return bored;"
- "        int ans = 0;\n        String delim = \" .?!\";\n        String[] words\
  \ = S.split(delim);\n        for (String word : words) {\n            if (word.startsWith(\"\
  I\")) {\n                ans++;\n            }\n        }\n        return ans;"
- "        int count = 0;\n        int count = 0;\n        int count = 0;\n      \
  \  int count = 0;\n        int count = 0;\n        int count = 0;\n        int count\
  \ = 0;\n        int count = 0;\n        int count = 0;\n        int count = 0;\n\
  \        for (int i = 0; i < S.length(); i++) {\n            if (S[i].toLowerCase().startsWith(\"\
  i\")) {\n                count++;\n            }\n        }\n        return count;"
- "        String[] sentences = S.split(\"\\\\.|\\\\?|\\\\!\");\n        Arrays.sort(sentences);\n\
  \        int total = 0;\n        for(int i=0; i<sentences.length; i++) {\n     \
  \       String s = sentences[i];\n            if(s.startsWith(\"I\"))\n        \
  \        total++;\n        }\n        return total;"
- "        \n        // Declare a variable for the number of boredoms we've seen so\
  \ far.\n        int boredoms = 0, i;\n        \n        // Check whether the sentence\
  \ begins with \"I\".\n        if (S.startsWith(\"I\")) {\n            \n       \
  \     // Iterate over all the characters in the sentence.\n            for (i =\
  \ 0; i < S.length(); i++) {\n                \n                // Check if the current\
  \ character is '.'.\n                if (S.charAt(i) == '.') {\n               \
  \     \n                    // If so, check if the current word is a boredom sentence.\n\
  \                    if (S.substring(i+1, i+3) == \"boredom\") {\n             \
  \           \n                        // If so, increment the number of boredoms.\n\
  \                        boredoms++;\n                    }\n                }\n\
  \            }\n        }\n        \n        // Return the number of boredoms.\n\
  \        return boredoms;"
- "        String[] tokens = S.split(\" \");\n        return tokens.stream().filter(w\
  \ -> w.startsWith(\"I\")).count();"
- "        String boredoms = S.replaceAll(\"\\\\.\\\\.|\\\\.|\\\\?|\\\\.\", \".\"\
  )\n            .replaceAll(\"\\\\s+\", \" \").trim();\n        Map<String, Integer>\
  \ boredomMap = new HashMap<>();\n        for (String boredy : boredoms.split(\"\
  \ \")) {\n            boredomMap.computeIfAbsent(boredy, (boredy) -> 1);\n     \
  \   }\n        return boredomMap.entrySet().stream().filter(e -> e.getKey().equals(\"\
  I\"))\n            .count();"
- "        int count = 0;\n        S = S.toLowerCase();\n        for (String st :\
  \ S.split(\"[.?!]\"))\n            if (st.startsWith(\"i\")) {\n               \
  \ count++;\n            }\n        return count;"
- "        String[] split = S.split(\"\\\\.|\\\\?|!\");\n        int boredoms = 0;\n\
  \        for (String word : split) {\n            if (word.equals(\"I\")) {\n  \
  \              boredoms += 1;\n            }\n        }\n        return boredoms;"
- "        String[] arr=S.split(\"[.!?]\");\n        if(arr[0].toLowerCase().equals(\"\
  i\")){\n            return 1;\n        }\n        return 0;"
- "        String boredom = \"[?.!]\";\n        int bored = 0;\n        String[] sentences\
  \ = S.split(\"\\\\.|\\\\?|\\\\!\");\n        for (String s : sentences) {\n    \
  \        if (bored.contains(\"I\")) {\n                if (s.startsWith(\"I\"))\
  \ {\n                    bored += 1;\n                }\n            } else if (s.startsWith(\"\
  I\")) {\n                bored += 1;\n            }\n        }\n        return bored;"
- "        String boredom_str = null;\n        String[] boredoms = {\"I\", \"you\"\
  , \"he's\", \"she's\", \"it's\"};\n        int boredom = 0;\n        for (int i\
  \ = 1; i < S.length(); i++) {\n            boredom_str = S.substring(0,i);\n   \
  \         if (boredoms.contains(boredom_str)) {\n                boredom++;\n  \
  \          }\n        }\n        return boredom;"
- "        int bored = 0;\n        // Iterate through all the words\n        for(String\
  \ word : S.split(\"\\\\W+\")) {\n            // If it starts with a 'I'\n      \
  \      if(word.startsWith(\"I\")) {\n                bored++;\n            }\n \
  \       }\n        return bored;"
- "        String[] words = S.split(\"[\\.\\?!]\");\n        int boredoms = 0;\n \
  \       for (String word : words) {\n            if (word.equalsIgnoreCase(\"I\"\
  )) {\n                boredoms++;\n            }\n        }\n        return boredoms;"
- "        int count = 0;\n        // Find how many \".\" appear in the string.\n\
  \        for (int i = 0; i < S.length(); i++) {\n            if (S.charAt(i) ==\
  \ '.') {\n                count++;\n            }\n        }\n        // For each\
  \ character in the string, if it's a \".\", increment the counter.\n        for\
  \ (int i = 0; i < S.length(); i++) {\n            if (S.charAt(i) == '.') {\n  \
  \              count++;\n            }\n        }\n        // The character \".\"\
  \ appears at least twice in the string.\n        System.out.println(count);\n  \
  \      return count;"
- "        String[] tokens = S.split(\"[.?!]\");\n        int count = 0;\n       \
  \ for (String token : tokens) {\n            if (token.equals(\"I\"))\n        \
  \        count++;\n        }\n        return count;"
- "        String[] A = S.split(\"\\\\.|\\\\?|\\\\!\");\n        boolean b = false;\n\
  \        for (String w : A) {\n            if (w.equals(\"I\"))\n              \
  \  b = true;\n        }\n        return b ? A.size() : -1;"
- "        int bored = 0;\n        int start = 0;\n        for(int i = S.length()-1;\
  \ i >= 0 ; i--){\n            if(S.charAt(i) == 'I' || S.charAt(i) == '.' || S.charAt(i)\
  \ == '!' || S.charAt(i) == '?'){\n                if(S.charAt(i) == 'I'){\n    \
  \                start++;\n                }\n                bored++;\n       \
  \         if(start >= 3){\n                    break;\n                }\n     \
  \       }\n        }\n        return bored;"
- "        int count = 0;\n        String[] words = S.split(\"[.?!]\");\n        for\
  \ (int i = 0; i < words.length; i++) {\n            if (words[i].equals(\"I\"))\
  \ {\n                count++;\n            }\n        }\n        return count;"
- "        int b = 0;\n        String w = S.toLowerCase();\n        String[] spl =\
  \ w.split(\"\\\\.|\\\\?|\\\\!\");\n        for (String s : strArrToList(spl)) {\n\
  \            if (s.startsWith(\"i\")) {\n                b++;\n            }\n \
  \       }\n        return b;"
- "        Map<String,Integer> wordCounts = new HashMap<>();\n        for (String\
  \ word : S.split(\"[!?.]\"))\n            if (word.length() > 0)\n             \
  \   wordCounts.put(word, wordCounts.getOrDefault(word, 0)+1);\n        int boredom\
  \ = 0;\n        for (String word : wordCounts.keySet())\n            if (word.startsWith(\"\
  I\"))\n                boredom++;\n        return boredom;"
- "        String[] sentence = S.split(\".,!?\");\n        Stream<String> boredom\
  \ = Arrays.stream(sentence);\n        boredom.filter(x -> x.equals(\"I\")).count();\n\
  \        boredom.filter(x -> x.equals(\".\")).count();\n        boredom.filter(x\
  \ -> x.equals(\"!\")).count();\n        boredom.filter(x -> x.equals(\"?\")).count();\n\
  \        return boredom.count();"
- "        int boredomCount = 0;\n        String word = \"\";\n        String[] sentence\
  \ = S.split(\".,!?\");\n        for(String s : sentence) {\n            if(s.startsWith(\"\
  I\")) {\n                boredomCount++;\n            }\n            word = s;\n\
  \        }\n        return boredomCount;"
- "        int boredom_cnt = 0;\n        for (String t : S.split(\"[.!?]\")) { //\
  \ split into sentences and check for boredom\n            if (t.startsWith(\"I\"\
  )) {\n                boredom_cnt++;\n            }\n        }\n        return boredom_cnt;"
- "        int count = 0;\n        for (int i = 0; i < S.length(); i++) {\n      \
  \      if (S[i].equals(\"I\") && !S[i + 1].equals(\".\") && !S[i + 2].equals(\"\
  ?\") && !S[i + 3].equals(\"!\")) {\n                count++;\n            }\n  \
  \      }\n        return count;"
- "        int boredom = 0;\n        int count = 0;\n        // iterate over each\
  \ word in the string\n        for (String w : S.split(\"\\\\s\")) {\n          \
  \  // If word starts with \"I\"\n            if (w.startsWith(\"I\")) {\n      \
  \          // add one to boredom count\n                boredom++;\n           \
  \     // iterate over each character in the word and see if any are boredom\n  \
  \              // sentences contain the '.', '?' or '!' character so we need to\
  \ check\n                // this for every character in the word\n             \
  \   for (char c : w.toCharArray()) {\n                    // check to see if the\
  \ character is a '.', '?' or '!'\n                    if (c == '.' || c == '?' ||\
  \ c == '!') {\n                        count++;\n                    }\n       \
  \         }\n            }\n        }\n        // return the number of boredoms\
  \ found\n        return boredom;"
- "        int count = 0;\n        String[] split1 = S.split(\".\");\n        String[]\
  \ split2 = split1[0].split(\"[?|!]\");\n        Arrays.stream(split2).forEach(s\
  \ -> {\n            if (s.startsWith(\"I\")) {\n                count++;\n     \
  \       }\n        });\n        return count;"
- "        int boredom = 0;\n        if (S.equals(\".\")) return boredom++;\n    \
  \    if (S.equals(\"?\") || S.equals(\"!\")) return boredom++;\n        S.split(\"\
  \\\\.|\\\\?|!\");\n        for (int i = 0; i <= S.length(); i++) {\n           \
  \ if (S[i].toLowerCase().startsWith(\"i\"))\n                boredom++;\n      \
  \  }\n        return boredom;"
- "        int counter = 0;\n        String[] wordList = S.split(\" \");\n       \
  \ for (String word : wordList) {\n            if (word.startsWith(\"I\")) {\n  \
  \              counter++;\n            }\n        }\n        return counter;"
- "        String[] arr = S.split(\"[.!?]\");\n        return arr.stream().filter(s\
  \ -> s.equals(\"I\")).count();"
- "        int bored = 0;\n        for (String word : S.split(\" \")) {\n        \
  \    if (word.startsWith(\"I\")) {\n                bored++;\n            }\n  \
  \      }\n        return bored;"
- '        return S.count("I");'
- "        int bored = 0;\n        String[] split = S.split(\"\\\\.|\\\\?|\\\\!\"\
  );\n        for(String s: split){\n            if(s.equals(\"I\"))\n           \
  \     bored++;\n        }\n        return bored;"
- "        int count=0;\n        S.toCharArray().forEach(x-> {\n            if (x.equals(\"\
  .\")) {\n                count++;\n            }\n            if (x.equals(\"?\"\
  )) {\n                count++;\n            }\n            if (x.equals(\"!\"))\
  \ {\n                count++;\n            }\n        });\n        return count;"
- "        int bored = 0;\n        String[] splitted = S.split(\"\\\\.|\\\\?|!\");\n\
  \        splitted = Arrays.stream(splitted).filter(s -> !s.isEmpty()).distinct().toArray(String[]::new);\n\
  \        for(String s : splitted) {\n            if (s.startsWith(\"I\"))\n    \
  \            bored++;\n        }\n        return bored;"
- "        ArrayList<String> list = new ArrayList<>(Arrays.asList(S.split(\"\\\\.\
  \ ?!\")));\n        int count = 0;\n        for(String s:list){\n            if(s.equals(\"\
  I\")){\n                count++;\n            }\n        }\n        return count;"
- "        int boredomCount = 0;\n        String[] sentences = S.split(\"[.?!]\");\n\
  \n        for (String sentence : sentences) {\n            if (sentence.startsWith(\"\
  I\")) {\n                boredomCount++;\n            }\n        }\n        return\
  \ boredomCount;"
- '        // TODO: Implement this method!'
- "        /*\n         * Write your code here\n         */\n        String boredom\
  \ = \"\";\n        for (int i = 0; i < S.length(); i++) {\n            if (S.substring(i,\
  \ i + 1).equals(\".\")) {\n                boredom += S.substring(i, i + 1);\n \
  \           }\n        }\n        String start = boredom.substring(0,2);\n     \
  \   String end = boredom.substring(boredom.length() - 1, boredom.length());\n  \
  \      int count = 0;\n        if (boredom.startsWith(start)) {\n            count\
  \ = boredom.substring(1,boredom.length() - 1).split(end).length;\n        }\n  \
  \      return count;"
- "        int count = (S.length() - S.split(\"[.?!]\").length - 1) / 2;\n       \
  \ return count;"
- "        String [] array = S.split(\"[.?!]\");\n        int sum = 0;\n        for\
  \ (String t : array) {\n            if (t.equals(\"I\"))\n                sum +=\
  \ 1;\n        }\n        return sum;"
- "        int count = 0;\n        for(String word:S.split(\" \")) {\n           \
  \ if(word.equals(\"I\"))\n                count++;\n        }\n        return count;"
- "        String[] S = S.split(\"[.!?]+\");\n        int ans = 0;\n        for(int\
  \ i=0;i<S.length;i++){\n            if(S[i].startsWith(\"I\")){\n              \
  \  ans++;\n            }\n        }\n        return ans;"
- "        int count = 0;\n        for (String sentence : S.split(\"[.?!]\"))\n  \
  \          if (sentence.startsWith(\"I\"))\n                count++;\n        return\
  \ count;"
- "        int count = 0;\n        for(String word : S.split(\" \")){\n          \
  \  if(word.startsWith(\"I\")){\n                count++;\n            }\n      \
  \  }\n        return count;"
- "        ArrayList arr1=new ArrayList();\n        ArrayList arr2=new ArrayList();\n\
  \        ArrayList arr3=new ArrayList();\n        int n=0,count=0,c=0;\n       \
  \ int i=0,j=0,k=0,l=0;\n        String x,a;\n        x=S.split(\"\\\\.|\\\\?|\\\\\
  !\");\n        \n        for (String y:x){\n            for (String z:x){\n    \
  \            if (z.equals(y)){\n                    arr1.add(y);\n             \
  \   }\n            }\n        }\n        \n        for (String z:arr1){\n      \
  \      for (String y:x){\n                if (z.equals(y)){\n                  \
  \  arr2.add(z);\n                }\n            }\n        }\n        \n       \
  \ for (String z:arr2){\n            for (String y:x){\n                if (z.equals(y)){\n\
  \                    arr3.add(z);\n                }\n            }\n        }\n\
  \        \n        for (String z:arr3){\n            for (String y:x){\n       \
  \         if (z.equals(y)){\n                    count++;\n                }\n \
  \           }\n        }\n        \n        return count;"
- "      Pattern bored = Pattern.compile(\"(?<=^|\\\\s)\\\\bI\\\\b\");\n      Matcher\
  \ matcher = bored.matcher(S);\n      int count = 0;\n      while (matcher.find())\
  \ {\n        count++;\n      }\n      return count;"
- "        try{\n        String[] lines = S.split(\"\\\\.|\\\\?|!\");\n        Arrays.stream(lines).filter(x\
  \ -> x.equals(\"I\")).count();\n        }catch(NullPointerException e){\n      \
  \      System.out.println(\"String is null\");\n        }\n        return 0;"
- '        return S.split("[.?,!]").length - 1;'
- "        // Your code here!\n        int count = 0;\n        S = S.toLowerCase();\n\
  \        String[] array = S.split(\" \");\n        for(String s : array){\n    \
  \        if(s.equals(\"i\")) count++;\n        }\n        return count;"
- '        return count_boredom(S).length();'
- "        List<String> list = S.split(\"\\\\.|\\\\?|\\\\!\");\n        List<String>\
  \ bored = new ArrayList<String>();\n        for (String s : list) {\n          \
  \  if (s.equals(\"I\"))\n                bored.add(s);\n        }\n        int bored_counter\
  \ = bored.size();\n        return bored_counter;"
- "        ArrayList<String> bored = new ArrayList<String>();\n        for(String\
  \ word : S.split(\"\\\\s+\")) \n            if(word.startsWith(\"I\"))\n       \
  \         bored.add(word);\n        return bored.size();"
- "        int count = 0;\n        for (int i = 0; i<S.length();i++) {\n         \
  \   if (S.charAt(i) == '.' || S.charAt(i) == '?' || S.charAt(i) == '!') {\n    \
  \            count++;\n            }\n        }\n        return count;"
- "        // Write your code here\n        int boredoms = 0 ;\n        String[] arr1\
  \ = S.split(\" \");\n        for(String str : arr1){\n            if(str.startsWith(\"\
  I\")){\n                boredoms ++; \n            }\n        }\n        return\
  \ boredoms;"
- "        int count = 0;\n        String [] words = S.split(\"\\\\.|\\\\?|\\\\!\"\
  );\n        for (String wd : words) {\n            if (wd.equals(\"I\")) {\n   \
  \             count++;\n            }\n        }\n        return count;"
- "        int i = 0;\n        for ( int j=0; j<S.length(); j++ ) {\n            char\
  \ a = S.charAt(j);\n            if ( a == '.' ) {\n                i++;\n      \
  \      }\n            if ( a == '?' || a == '!' ) {\n                i++;\n    \
  \        }\n        }\n        return i;"
- "        // Your code here\n        String[] words = S.split(\"[.!?]\");\n     \
  \   int count = 0;\n        for(String word : words) {\n            if(word.equals(\"\
  I\")) count++;\n        }\n        return count;"
- "        int i=0;\n        while(!S.isEmpty()){\n            if(S.startsWith(\"\
  I\")){\n                i++;\n            }\n            S=S.substring(1);\n   \
  \     }\n        return i;"
- "        if (S == null || S.length() == 0) return 0;\n        boolean startsWithI\
  \ = false;\n        for (char c : S.toCharArray()) {\n            switch (c) {\n\
  \                case 'I':\n                    if (startsWithI) return 0;\n   \
  \                 startsWithI = true;\n                    break;\n            \
  \    case '.':\n                case '?':\n                case '!':\n         \
  \           startsWithI = false;\n                    break;\n                default:\n\
  \                    break;\n            }\n        }\n        return 1;"
- "        Set<String> sentences = new HashSet<>();\n        for (String sentence\
  \ : S.split(\"[\\\\.,?!]\"))\n            sentences.add(sentence.trim());\n    \
  \    int bored = 0;\n        for (String sentence : sentences) {\n            if\
  \ (sentence.startsWith(\"I\"))\n                bored++;\n        }\n        return\
  \ bored;"
- "        int b=0;\n        for (String s:S.split(\"[.!?]\"))\n            if (s.equals(\"\
  I\"))\n                b++;\n        return b;"
- "        boolean bored = false;\n        int boredom_count = 0;\n\n        for (int\
  \ i = 0; i < S.length(); i++) {\n            String word = S.substring(i, i+1);\n\
  \            if (word.equals(\"I\")) {\n                bored = true;\n        \
  \    }\n            if (word.equals(\".\")) {\n                bored = true;\n \
  \           }\n            if (word.equals(\"?\")) {\n                bored = true;\n\
  \            }\n            if (word.equals(\"!\")) {\n                bored = true;\n\
  \            }\n        }\n\n        if (bored) {\n            boredom_count++;\n\
  \        }\n        return boredom_count;"
- "        String[] boredom = {\"I\", \"I'm\", \"I'll\", \"I've\", \"Ill\", \"I'd\"\
  , \"it's\", \"its\", \"it'll\"};\n        Map<String, Integer> map = new TreeMap<>();\n\
  \        for(String str : boredom)\n            map.put(str,0);\n        int sum\
  \ = 0;\n        for(String str : S.split(Pattern.quote(\".\")+Pattern.quote(\"?\"\
  )+Pattern.quote(\"!\")))\n            sum += map.get(str);\n        return sum;"
- "        int counter = 0;\n        String[] lines = S.split(\"[.!?]\");\n      \
  \  for (String s : lines) {\n            if (s.toLowerCase().startsWith(\"i\"))\
  \ {\n                counter++;\n            }\n        }\n        return counter;"
- "        int boredoms = 0;\n        if (S == null || S.length() < 1)\n         \
  \   return boredoms;\n        for (int i=0; i<S.length(); i++)\n        {\n    \
  \        if (S.charAt(i) == 'I')\n            {\n                boredoms += 1;\n\
  \            }\n        }\n        return boredoms;"
- "        String boredom = \"I\";\n        return S.split(\"\\\\.|\\\\?|\\\\!\")\n\
  \                .map(w -> w.startsWith(boredom) ? 1 : 0)\n                .sum();"
- "        int boredomCount = 0;\n        String[] words = S.split(\"[.!?]\");\n \
  \       for (String word : words) {\n            if (word.equals(\"I\")) {\n   \
  \             boredomCount += 1;\n            }\n        }\n        return boredomCount;"
- "        S += \".\";\n        S += \"?\";\n        S += \"!\";\n        String[]\
  \ words = S.split(\"[.!?]\");\n        int bored = 0;\n        for (String w : words)\
  \ {\n            if (w.equals(\"I\")) {\n                bored++;\n            }\n\
  \        }\n        return bored;"
- "        String[] words = S.split(\" \");\n        int boredom = 0;\n        for(int\
  \ i = 0; i < words.length; ++i)\n            boredom += words[i].equals(\"I\");\n\
  \        return boredom;"
- "        String[] sentence = S.split(\"[.?!]\");\n        int count = 0;\n     \
  \   for (int i = 0; i < sentence.length; i++) {\n            if (sentence[i].startsWith(\"\
  I\")) {\n                count++;\n            }\n        }\n        return count;"
- "        int num = 0;\n        String[] words = S.split(\"[.!?]\");\n        for\
  \ (String word : words) {\n            if (word.startsWith(\"I\")) {\n         \
  \       num++;\n            }\n        }\n        return num;"
- "        String[] arr = S.split(\"[.?!]\");\n        return arr.stream().filter(e\
  \ -> e.equals(\"I\")).count();"
- "        ArrayList arr = new ArrayList();\n        for (int i = 0; i < S.length();\
  \ i++)\n            arr.add(S.charAt(i));\n        ArrayList arr = new ArrayList();\n\
  \        int boredom = 0;\n        char firstChar = ' ';\n        boolean firstCharIs\
  \ = true;\n        for (int i = 0; i < S.length(); i++) {\n            if (S.charAt(i)\
  \ == '?' || S.charAt(i) == '.' || S.charAt(i) == '!')\n                boredom++;\n\
  \            boolean firstCharIs = true;\n            for (int j = 0; j < arr.size();\
  \ j++) {\n                if (firstCharIs) {\n                    if (S.charAt(i)\
  \ == arr.get(j))\n                        firstCharIs = false;\n               \
  \ } else {\n                    if (S.charAt(i) == '.' || S.charAt(i) == '!' ||\
  \ S.charAt(i) == '?')\n                        firstCharIs = true;\n           \
  \     }\n            }\n        }\n        return boredom;"
- "        if (S == null || S.length() <= 1)\n            return 0;\n        List<String>\
  \ list = S.split(\"\\\\.|[?!]\");\n        return list.stream().filter(s -> s.equals(\"\
  I\")).count();"
- "        if (S == null || S.isEmpty()) return 0;\n        String first_word = S.split(\"\
  \ \")[0];\n        int count = 0;\n        for (int i = 0; i < S.length(); i++)\
  \ {\n            if (S.charAt(i) == '.' || S.charAt(i) == '?' || S.charAt(i) ==\
  \ '!') {\n                count++;\n            }\n            if (S.charAt(i) ==\
  \ first_word.charAt(0)) {\n                count++;\n            }\n        }\n\
  \        return count;"
- "        int bored = 0;\n        for(int i = 0; i<S.length(); i++){\n          \
  \  if(S.charAt(i) != 'I')\n                continue;\n            String temp =\
  \ S.substring(0,i);\n            if(temp.equals(\"I\"))\n                continue;\n\
  \            if(temp.equals(\"!\") || temp.equals(\"?\"))\n                continue;\n\
  \            temp = temp.substring(1);\n            while(temp.length() > 0){\n\
  \                if(temp.equals(\".\"))\n                    continue;\n       \
  \         if(temp.equals(\"?\"))\n                    continue;\n              \
  \  if(temp.equals(\"!\"))\n                    continue;\n                bored++;\n\
  \                temp = temp.substring(1);\n            }\n        }\n        return\
  \ bored;"
- "        String boredoms = \"I\";\n        int boredom_count = 0;\n        if (S.contains(boredoms))\
  \ {\n            S = S.split(\"\\\\.|\\\\?|\\\\!\");\n            boredom_count\
  \ = S.length;\n        }\n        return boredom_count;"
- "        int count = 0;\n        S = S.toLowerCase();\n        for(int i = 0; i\
  \ < S.length(); i++)\n            if(S.charAt(i) != 'i')\n                count++;\n\
  \        return count;"
- "        int boredom = 0;\n        String start = \"I\";\n        String end = \"\
  .,?,!\";\n        String[] words = S.split(\" \");\n        for (String word : words)\
  \ {\n            String temp = word.toLowerCase();\n            if (temp.startsWith(start)\
  \ && temp.endsWith(end)) {\n                boredom++;\n            }\n        }\n\
  \        return boredom;"
- "        String pattern = \"(^I+.)\";\n        return Pattern.matches(pattern,S).length();"
- "        HashMap<String, Integer> countMap = new HashMap<>();\n        String[]\
  \ splits = S.split(\"[.?!]\");\n        for (String s : splits) {\n            String[]\
  \ words = s.split(\"\\\\s\");\n            for (String word : words) {\n       \
  \         if (countMap.containsKey(word)) {\n                    int count = countMap.get(word);\n\
  \                    countMap.put(word, count + 1);\n                } else {\n\
  \                    countMap.put(word, 1);\n                }\n            }\n\
  \        }\n        int count = 0;\n        for (String word : countMap.keySet())\
  \ {\n            if (countMap.get(word) == 1) {\n                count++;\n    \
  \        }\n        }\n        return count;"
- "        Map<String, Integer> m = new HashMap<>();\n\n        String[] words = S.split(\"\
  \\\\.|\\\\?|!\");\n        for (String word : words) {\n            int count =\
  \ 0;\n            if (m.containsKey(word))\n                count = m.get(word);\n\
  \            m.put(word, count + 1);\n        }\n\n        return m.size();"
- "        int boredoms = 0;\n        // Your code goes here.\n        return boredoms;"
- "        int boredoms = 0;\n        // Declare a String to hold the sentence and\
  \ an int to hold the boredoms count\n        String[] sentence = S.split(\"[.?!]\"\
  );\n        for (String word: sentence) {\n            if (word.startsWith(\"I\"\
  )) boredoms++;\n        }\n        return boredoms;"
- "        // TODO: Write your code to count the number of boredoms.\n        // Ask\
  \ if you have any questions.\n        return 0;"
- "        int count = 0;\n        // your code goes here\n        String[] words\
  \ = S.split(\"\\\\.|\\\\?|!\");\n        for (String word : words) {\n         \
  \   if (word.equals(\"I\")) {\n                count++;\n            }\n       \
  \ }\n        return count;"
- "        return S.split(\" \").stream().filter(s -> s.startsWith(\"I\"))\n     \
  \           .count();"
- "        String[] S1 = S.split(\".\");\n        String[] S2 = S.split(\"?\");\n\
  \        String[] S3 = S.split(\"!\");\n        int[] count = {0, 0, 0};\n     \
  \   for (int i = 0; i < S1.length; i++) {\n            if (S1[i].equals(\"I\"))\
  \ {\n                count[0]++;\n            } else if (S2[i].equals(\"I\")) {\n\
  \                count[1]++;\n            } else if (S3[i].equals(\"I\")) {\n  \
  \              count[2]++;\n            }\n        }\n        return count[0] +\
  \ count[1] + count[2];"
- "        int boredom = 0;\n        for (String w : S.split(\" \")) {\n         \
  \   if (w.startsWith(\"I\")) {\n                boredom++;\n            }\n    \
  \    }\n        return boredom;"
- "        int counter = 0;\n        int index = 0;\n        while (index < S.length())\
  \ {\n            if (S.charAt(index) == '.' || S.charAt(index) == '?' || S.charAt(index)\
  \ == '!') {\n                counter++;\n            }\n            index++;\n \
  \       }\n        return counter;"
- "        // Declare variables\n        int boredomCount = 0;\n        String str\
  \ = new String(S.trim());\n        String firstWord = str.substring(0, str.indexOf('.'));\n\
  \        String remainingWords = str.substring(str.indexOf('.') + 1);\n        String\
  \ boredomString = \"\";\n        // Write your logic here\n        if (boredomString.isEmpty())\
  \ {\n            if (firstWord.equals(\"I\")) {\n                boredomCount =\
  \ 1;\n            } else {\n                boredomCount = 0;\n            }\n \
  \       } else {\n            boredomCount = 1;\n        }\n        return boredomCount;"
- '        return S.contains("I") ? 0 : 1;'
- "        // The map will count the boredoms in all the sentences in the text\n \
  \       Map<String, Integer> boredMap = new HashMap<>();\n        // Iterate over\
  \ all the sentences in the text to count the boredoms\n        for (String sentence\
  \ : S.split(\"[.?!]+\")) {\n            // Iterate over all the words in the sentence\n\
  \            for (String word : sentence.split(\" \")) {\n                // If\
  \ the word is a boredom then increment the counter\n                if (word.startsWith(\"\
  I\")) {\n                    int boredoms = boredMap.compute(word, (key, value)\
  \ -> value == null ? 1 : value + 1);\n                    boredMap.put(word, boredoms);\n\
  \                }\n            }\n        }\n        // Return the counter of boredoms\
  \ found\n        return boredMap.values().stream().reduce(0, (accumulator, value)\
  \ -> accumulator + value);"
- "        int boredom = 0;\n        String[] array = S.split(\"\\\\.|\\\\?|\\\\!\"\
  );\n        for (String s : array) {\n            if (s.startsWith(\"I\")) {\n \
  \               boredom++;\n            }\n        }\n        return boredom;"
- "        int count = 0;\n        String[] tokens = S.split(\"[.?!]\");\n       \
  \ for (String word : tokens) {\n            if (word.startsWith(\"I\"))\n      \
  \          count++;\n        }\n        return count;"
- "        String[] arr = S.split(\"\\\\?\\\\!\\\\.\");\n        List<String> list\
  \ = Arrays.stream(arr).filter(a -> a.startsWith(\"I\")).collect(Collectors.toList());\n\
  \        return list.size();"
- "        List<String> words = Arrays.asList(S.split(\" \"));\n        boolean firstSentence\
  \ = true;\n        int boredomCount = 0;\n        for (String w : words) {\n   \
  \         // boredom if first sentence\n            if (firstSentence) {\n     \
  \           boredomCount += 1;\n                firstSentence = false;\n       \
  \         continue;\n            }\n\n            // boredom if not first sentence\n\
  \            if (!firstSentence) {\n                if (w.equals(\"I\")) {\n   \
  \                 boredomCount += 1;\n                }\n            }\n       \
  \ }\n        return boredomCount;"
- "        try{\n            Pattern p1 = Pattern.compile(\"[.?!]\");\n          \
  \  Matcher m1 = p1.matcher(S);\n            Matcher p2 = Pattern.compile(\"^I\"\
  );\n            Matcher m2 = p2.matcher(S);\n            if(m1.find() && m2.find()){\n\
  \                return 1;\n            }else if(m1.find()){\n                return\
  \ 0;\n            }else{\n                return 0;\n            }\n        }catch\
  \ (Exception ex){\n            return 0;\n        }"
- '        return S.startsWith("I") ? 1 : 0;'
- "        Map<String, Integer> boredom = new HashMap<>();\n        for (String word\
  \ : S.split(\" \")) {\n            if (word.startsWith(\"I\")) {\n             \
  \   boredom.put(word, boredom.get(word) + 1);\n            }\n        }\n      \
  \  return boredom.values().stream().mapToInt(i -> i).sum();"
- "        int bored = 0;\n        String[] words = S.split(\"[.?!]\");\n        for(int\
  \ i = 0; i < words.length; i++) {\n            if(words[i].equals(\"I\")) {\n  \
  \              bored++;\n            }\n        }\n        return bored;"
- "        int boredom = 0;\n        for (int i = 0; i < S.length(); i++) {\n    \
  \        if (S[i].equals(\"I\")) {\n                boredom++;\n            } else\
  \ {\n                if (boredom != 0) {\n                    break;\n         \
  \       }\n            }\n        }\n        return boredom;"
- "        int boredoms = 0;\n        String[] words = S.split(\" \");\n        for\
  \ (String w : words) {\n            if (w.equals(\"I\")) {\n                boredoms++;\n\
  \            }\n        }\n        return boredoms;"
- "        int bored = 0;\n        String[] sarray = S.split(\" \");\n        for\
  \ (int i = 0; i < sarray.length; i++) {\n            if (sarray[i] == \"I\") {\n\
  \                bored++;\n            }\n        }\n        return bored;"
- "        String[] tokens = S.split(\"\\\\.|\\\\?|\\\\!\");\n        List<String>\
  \ list = new ArrayList<>(Arrays.asList(tokens));\n        list.sort(Comparator.reverseOrder());\n\
  \        if (list.stream().anyMatch(s -> s.equals(\"I\"))) {\n            return\
  \ 0;\n        } else {\n            return 1;\n        }"
- "      int count = 0;\n      for(String sentence : S.split(\"[\\\\.\\\\?!]\")) {\n\
  \        if(sentence.startsWith(\"I\")) {\n          count += 1;\n        }\n  \
  \    }\n      return count;"
- "        String[] arr = S.split(\"[.?!]\");\n        int ans = 0;\n        for (int\
  \ i = 0; i < arr.length; i++) {\n            if (arr[i].equals(\"I\")) {\n     \
  \           ans++;\n            }\n        }\n        return ans;"
- "        int[] bored = { 0, 0, 0 };\n        // Count occurrences of I\n       \
  \ for(int i = 0; i<S.length(); i++) {\n            if((S.charAt(i) == 'I') && (S.charAt(i+1)\
  \ == 'I')) {\n                bored[0]++;\n            }\n        }\n        //\
  \ Count occurrences of .\n        for(int i = 0; i<S.length(); i++) {\n        \
  \    if(S.charAt(i) == '.') {\n                bored[1]++;\n            }\n    \
  \    }\n        // Count occurrences of ? and !\n        for(int i = 0; i<S.length();\
  \ i++) {\n            if(S.charAt(i) == '?' || S.charAt(i) == '!') {\n         \
  \       bored[2]++;\n            }\n        }\n        return bored[0];"
- "        return S.length() - S.indexOf(\"I\".charAt(0)) == S\n                .indexOf(\"\
  I\".charAt(0))? 1 : 0;"
- "        return S\n            .chars()\n            .filter(x -> Character.isLetter(x)\
  \ && x != '?')\n            .filter(x -> x != '!')\n            .filter(x -> x ==\
  \ 'I')\n            .count();"
- "        // Your code here\n        return 0;"
- "        int bored = 0;\n        List<String> array = Arrays.asList(S.split(\" \"\
  ));\n        for(String s : array) {\n            if(s.startsWith(\"I\")) {\n  \
  \              bored += 1;\n            }\n        }\n        return bored;"
- "        StringTokenizer st = new StringTokenizer(S, \".?!\");\n        List<String>\
  \ words = new ArrayList<String>();\n        while (st.hasMoreTokens()) {\n     \
  \       words.add(st.nextToken());\n        }\n        boredomCount(words, S);\n\
  \        return 0;"
- "        String boredoms = Arrays.stream(S).filter(s -> s.startsWith(\"I\")).collect(Collectors.joining(\"\
  .\"));\n        int bored = S.split(boredoms).length + 1;\n        return bored;"
- "        String[] words = S.split(\".?!\");\n        int boredoms = 0;\n       \
  \ for(String word : words)\n        {\n            if(word.equals(\"I\"))\n    \
  \        {\n                boredoms += 1;\n            }\n        }\n        return\
  \ boredoms;"
- "        // Create an empty list\n        List<String> boredoms = new ArrayList<String>();\n\
  \        // Add all words that start with \"I\" to the list\n        boredoms.addAll(S.split(\"\
  [^I]\"));\n        // Return the size of that list\n        return boredoms.size();"
- "      if(S==null || S.trim().isEmpty()) {\n          return 0;\n      }\n     \
  \ // The pattern for boredom is I\n      Matcher m = Pattern.compile(\"\\\\bI\\\\\
  b\").matcher(S);\n      // We return count from matcher\n      return m.find() ?\
  \ 1 : 0;"
- "        String[] arr;\n        String[] arr2;\n        String[] arr3;\n       \
  \ int count = 0;\n        arr = S.split(\"\\\\.|\\\\?|!\");\n        for (int i\
  \ = 0; i < arr.length; i++) {\n            if (arr[i].equals(\"I\") && arr[i + 1].equals(\"\
  .\") && arr[i + 2].equals(\".\")) {\n                count++;\n            }\n \
  \       }\n        return count;"
- "        int counter = 0;\n        String[] words = S.split(\" \");\n        for(String\
  \ word : words){\n            if(word.startsWith(\"I\")){\n                counter++;\n\
  \            }\n        }\n        return counter;"
- "        String[] arr = S.split(\"\\\\.|\\\\?|!\");\n        int count = 0;\n  \
  \      for (String i : arr) {\n            if (i.equals(\"I\"))\n              \
  \  count++;\n        }\n        return count;"
- "        // split string with \".\", \"?\" and \"!\" characters\n        String[]\
  \ lines = S.split(\"[\\\\.?!]\");\n        // iterate over each line and check if\
  \ the first word starts with \"I\"\n        Map<String, Integer> count = new HashMap<>();\n\
  \        for (String line : lines) {\n            String word = line.substring(0,1).toLowerCase();\n\
  \            if (count.containsKey(word)) {\n                count.put(word, count.getOrDefault(word,\
  \ 0) + 1);\n            } else {\n                count.put(word, 1);\n        \
  \    }\n        }\n        // return if all words are present and if bored words\
  \ count equals to total words\n        return count.values().stream().allMatch(i\
  \ -> i == count.getOrDefault(i, 0)) \n            && count.size() == lines.size();"
- "        // Your code here!\n        int boredom = 0;\n        S = S.toLowerCase();\n\
  \        String[] split = S.split(Pattern.quote(\".\"));\n        StringBuilder\
  \ str = new StringBuilder();\n        Arrays.sort(split);\n        for (String s\
  \ : split) {\n            if (s.startsWith(\"i\")) {\n                str.insert(0,\
  \ s);\n            }\n        }\n        for (int i = 1; i < str.length(); i++)\
  \ {\n            if (str.toString().charAt(i) != '.' && str.toString().charAt(i)\
  \ != '?' && str.toString().charAt(i) != '!') {\n                boredom++;\n   \
  \         }\n        }\n        return boredom;"
- "        int bCount = 0;\n        String[] tokens = S.split(\"[.?!]\");\n      \
  \  for (String s : tokens) {\n            if (s.equals(\"I\")) {\n             \
  \   bCount++;\n            }\n        }\n        return bCount;"
- "        int boredom = 0;\n        S = S.toLowerCase();\n        char[] SArray =\
  \ S.toCharArray();\n        Arrays.sort(SArray);\n        if (SArray[0] == 'i')\
  \ {\n            boredom++;\n        }\n        if (SArray[1] == 'i') {\n      \
  \      boredom++;\n        }\n        if (SArray[2] == 'i') {\n            boredom++;\n\
  \        }\n        if (SArray[3] == 'i') {\n            boredom++;\n        }\n\
  \        return boredom;"
- "        String[] tokens = S.split(\"[.?!]\");\n        HashMap<String, Integer>\
  \ map = new HashMap<>();\n        for(String token : tokens) {\n            if(map.containsKey(token))\n\
  \                map.put(token, map.get(token) + 1);\n            else\n       \
  \         map.put(token, 1);\n        }\n        int boredom = -1;\n        for(String\
  \ token : map.keySet()) {\n            if(token.equals(\"I\"))\n               \
  \ boredom = map.get(token);\n        }\n        return boredom;"
- "        StringTokenizer STokenizer = new StringTokenizer(S);\n        int boredoms\
  \ = 0;\n        int count = 0;\n        while(STokenizer.hasMoreTokens()) {\n  \
  \          String token = STokenizer.nextToken();\n            count++;\n      \
  \      if(token.equals(\"I\")) {\n                boredoms++;\n            }\n \
  \       }\n        return boredoms;"
- "        String[] boredoms = {\"I\", \"you\", \"your\", \"its\", \"it's\", \"he\"\
  , \"she\", \"it's\",\n                \"it\", \"it's\", \"the\", \"'s\", \"an\"\
  , \"my\", \"our\", \"who\", \"myself\", \"you're\", \"ours\",\n                \"\
  ourselves\", \"you\", \"you're\", \"we\", \"us\", \"ourselves\", \"what\", \"who\"\
  , \"why\", \"how\",\n                \"can\", \"could\", \"should\", \"ought\",\
  \ \"is\", \"will\", \"are\", \"am\", \"is\", \"are\", \"was\", \"were\",\n     \
  \           \"be\", \"been\", \"being\", \"have\", \"has\", \"had\", \"do\", \"\
  does\", \"did\", \"doe\", \"would\",\n                \"should\", \"can't\", \"\
  cannot\", \"must\", \"must've\", \"need\", \"ought\", \"i'm\", \"i've\", \"let's\"\
  ,\n                \"like\", \"don't\", \"liked\", \"didn't\", \"doesn't\", \"don't\"\
  , \"did\", \"didn't\", \"won't\", \"would've\",\n                \"should've\",\
  \ \"could've\", \"couldn't\", \"wouldn't\", \"don't\", \"doesn't\", \"doesn't\"\
  , \"haven't\",\n                \"haven't've\", \"he's\", \"she's\", \"it's\", \"\
  it's\", \"i've\", \"i've\", \"you've\", \"you've\", \"that's\",\n              \
  \  \"thats\", \"i'm\", \"i'm\", \"i\", \"you\", \"you\", \"you're\", \"you're\"\
  , \"we're\", \"we're\", \"we\",\n                \"you've\", \"you've\", \"that's\"\
  , \"thats\", \"i've\", \"i've\", \"i'm\", \"i'm\", \"my\", \"my\",\n           \
  \     \"is\", \"is\", \"is\", \"i\", \"you\", \"you\", \"you're\", \"you're\", \"\
  we're\", \"we're\", \"we\"};\n        final Pattern regex = Pattern.compile(\"I\"\
  );\n        Matcher regexMatcher = regex.matcher(S);\n        int count = 0;\n \
  \       while (regexMatcher.find()) {\n            count++;\n            S += \"\
  \ \";\n            regexMatcher = regex.matcher(S);\n        }\n        return count;"
- "        int boredoms = 0;\n        boolean first = true;\n        String[] parts\
  \ = S.split(\"[.!?]\");\n        for (String part : parts) {\n            if(!first)\
  \ {\n                boredoms += part[0].equals(\"I\") ? 1 : 0;\n            } else\
  \ {\n                first = false;\n            }\n        }\n        return boredoms;"
- "        int b = 0;\n        for(int i=0; i<S.length(); i++){\n            if(S.charAt(i)\
  \ == '.'){\n                if(S.charAt(i+1) == '?' || S.charAt(i+1) == '!'){\n\
  \                    b++;\n                }\n            }\n        }\n       \
  \ return b;"
- "        String[] boredoms = {\"I\",\"a.\",\"an.\"};\n        int bored = 0;\n \
  \       for(String s : boredoms)\n        {\n            int index = S.indexOf(s,\
  \ 0);\n            if(index != -1)\n            {\n                bored++;\n  \
  \              S.delete(index, s.length());\n            }\n        }\n        return\
  \ bored;"
- "        String[] splitS = S.split(\"[.!?]\");\n        int bored = 0;\n       \
  \ for (String sentence : splitS) {\n            if (sentence.startsWith(\"I\"))\
  \ {\n                bored += 1;\n            }\n        }\n        return bored;"
- "        Scanner s = new Scanner(S.toUpperCase());\n        while(s.hasNext()) {\n\
  \            String word = s.next().toLowerCase();\n            if(word.startsWith(\"\
  I\")) {\n                return 1;\n            }\n        }\n        return 0;"
- "        int count = 0;\n        String[] words = S.split(\"\\\\.|\\\\?|\\\\!\"\
  );\n        for(String w : words) {\n            if(w.equals(\"I\")) {\n       \
  \         count += 1;\n            }\n        }\n        return count;"
- '        return 0;'
language: java
name: HumanEval_91_is_bored
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // You'll be given a string of words, and your task is to count\
  \ the number\n    // of boredoms. A boredom is a sentence that starts with the word\
  \ \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n\
  \    // >>> is_bored(\"Hello world\")\n    // 0\n    // >>> is_bored(\"The sky is\
  \ blue. The sun is shining. I love this weather\")\n    // 1\n    public static\
  \ int isBored(String S) {\n"
stop_tokens:
- "    }\n    //"
- "    }\n    p"
- '    }

  }'
- "\n    }\n"
tests: "}\n    public static void main(String[] args) {\n    assert(isBored((\"Hello\
  \ world\")) == (0));\n    assert(isBored((\"Is the sky blue?\")) == (0));\n    assert(isBored((\"\
  I love It !\")) == (1));\n    assert(isBored((\"bIt\")) == (0));\n    assert(isBored((\"\
  I feel good today. I will be productive. will kill It\")) == (2));\n    assert(isBored((\"\
  You and I are going for a walk\")) == (0));\n    }\n\n}\n"
