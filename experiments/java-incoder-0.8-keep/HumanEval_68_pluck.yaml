completions: []
language: java
name: HumanEval_68_pluck
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // \"Given an array representing a branch of a tree that has\
  \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
  \ return it.\n    // The plucked node should be the node with the smallest even\
  \ value.\n    // If multiple nodes with the same smallest even value are found return\
  \ the node that has smallest index.\n    // The plucked node should be returned\
  \ in a list, [ smalest_value, its index ],\n    // If there are no even values or\
  \ the given array is empty, return [].\n    // Example 1:\n    // Input: [4,2,3]\n\
  \    // Output: [2, 1]\n    // Explanation: 2 has the smallest even value, and 2\
  \ has the smallest index.\n    // Example 2:\n    // Input: [1,2,3]\n    // Output:\
  \ [2, 1]\n    // Explanation: 2 has the smallest even value, and 2 has the smallest\
  \ index. \n    // Example 3:\n    // Input: []\n    // Output: []\n    // Example\
  \ 4:\n    // Input: [5, 0, 3, 0, 4, 2]\n    // Output: [0, 1]\n    // Explanation:\
  \ 0 is the smallest value, but  there are two zeros,\n    // so we will choose the\
  \ first zero, which has the smallest index.\n    // Constraints:\n    // * 1 <=\
  \ nodes.length <= 10000\n    // * 0 <= node.value\n    public static ArrayList<Integer>\
  \ pluck(ArrayList<Integer> arr) {\n"
stop_tokens:
- "    }\n    //"
- "    }\n    p"
- '    }

  }'
- "\n    }\n"
tests: "}\n    public static void main(String[] args) {\n    assert(pluck((new ArrayList<Integer>(Arrays.asList((int)4,\
  \ (int)2, (int)3)))).equals((new ArrayList<Integer>(Arrays.asList((int)2, (int)1)))));\n\
  \    assert(pluck((new ArrayList<Integer>(Arrays.asList((int)1, (int)2, (int)3)))).equals((new\
  \ ArrayList<Integer>(Arrays.asList((int)2, (int)1)))));\n    assert(pluck((new ArrayList<Integer>(Arrays.asList()))).equals((new\
  \ ArrayList<Integer>(Arrays.asList()))));\n    assert(pluck((new ArrayList<Integer>(Arrays.asList((int)5,\
  \ (int)0, (int)3, (int)0, (int)4, (int)2)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
  \ (int)1)))));\n    assert(pluck((new ArrayList<Integer>(Arrays.asList((int)1, (int)2,\
  \ (int)3, (int)0, (int)5, (int)3)))).equals((new ArrayList<Integer>(Arrays.asList((int)0,\
  \ (int)3)))));\n    assert(pluck((new ArrayList<Integer>(Arrays.asList((int)5, (int)4,\
  \ (int)8, (int)4, (int)8)))).equals((new ArrayList<Integer>(Arrays.asList((int)4,\
  \ (int)1)))));\n    assert(pluck((new ArrayList<Integer>(Arrays.asList((int)7, (int)6,\
  \ (int)7, (int)1)))).equals((new ArrayList<Integer>(Arrays.asList((int)6, (int)1)))));\n\
  \    assert(pluck((new ArrayList<Integer>(Arrays.asList((int)7, (int)9, (int)7,\
  \ (int)1)))).equals((new ArrayList<Integer>(Arrays.asList()))));\n    }\n\n}\n"
