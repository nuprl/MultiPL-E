name: HumanEval_89_encrypt
language: ts
prompt: "//Create a function encrypt that takes a string as an argument and\n// returns\
  \ a string encrypted with the alphabet being rotated. \n// The alphabet should be\
  \ rotated in a manner such that the letters \n// shift down by two multiplied to\
  \ two places.\n// For example:\n// >>> encrypt(\"hi\")\n// \"lm\"\n// >>> encrypt(\"\
  asdfghjkl\")\n// \"ewhjklnop\"\n// >>> encrypt(\"gf\")\n// \"kj\"\n// >>> encrypt(\"\
  et\")\n// \"ix\"\nfunction encrypt(s: string): string {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"\
  lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"\
  gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"\
  faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"\
  ),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
  ),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"\
  a\"),\"e\");\n}\n\ntest();"
completions: ["  return rotLeft(s, 2).substring(1) + rotRight(s, 2);\n}\n", "  var\
    \ l = s.length;\n  var result = \"\";\n  for (var i = 0; i < l; i++) {\n    result\
    \ += alphabet[alphabet.indexOf(s.charAt(i))].toString();\n  }\n  return result;\n\
    }\n", "    let alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    let rotated_alphabet\
    \ = alphabet.split(\"\").map(\n            x => alphabet.indexOf(x) + 2);\n  \
    \  let encrypted_text = \"\";\n\n    for (let i = 0; i < s.length; i++) {\n  \
    \      encrypted_text += rotated_alphabet[alphabet.indexOf(s[i])];\n    }\n  \
    \  return encrypted_text;\n}\n", "  var alphabet: string = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n  var alpharotated = alphabet.replace(/z/i, function (letter) {\n    return\
    \ alphabet.indexOf(letter) + 2\n  });\n  var ciphertext = \"\";\n  for (var i\
    \ = 0; i < s.length; i++) {\n    var x = alpharotated.indexOf(s[i]);\n    ciphertext\
    \ += alpharotated[x + 1];\n  }\n  return ciphertext\n}\n", "    const alphabet:\
    \ string = \"abcdefghijklmnopqrstuvwxyz\";\n    const cipher: string = \"\";\n\
    \    for (let i = 0; i < s.length; i++) {\n        const c = alphabet.indexOf(s[i]);\n\
    \        const idx = ((c + 2) % alphabet.length);\n        cipher += alphabet[idx];\n\
    \    }\n    return cipher;\n}\n", "  let alphabet: string = string.fromCharCode('A'.charCodeAt()\
    \ + 2)\n  let index = 0\n  const newString: string = ''\n\n  while (index < s.length)\
    \ {\n    const char = alphabet.charCodeAt(index)\n    alphabet = alphabet.substring(0,\
    \ index) +\n              alphabet.charAt(index + 1) +\n              alphabet.substring(index\
    \ + 1)\n    alphabet = alphabet.substring(0, index) +\n              alphabet.charAt(index\
    \ + 1) + \n              alphabet.substring(index + 1)\n    alphabet = alphabet.substring(0,\
    \ index + 2) +\n              alphabet.charAt(index + 2) + \n              alphabet.substring(index\
    \ + 2)\n    alphabet = alphabet.substring(0, index + 3) +\n              alphabet.charAt(index\
    \ + 3) + \n              alphabet.substring(index + 3)\n\n    index++\n    newString\
    \ += alphabet\n  }\n  \n  return newString\n}\n", "    return s.split('').map(c\
    \ => alphabet.indexOf(c) % 2 ? alphabet[alphabet.indexOf(c) + 1] : alphabet[alphabet.indexOf(c)]).join('');\n\
    }", "    return s.split('').map(function(ch) {\n        return ch.charCodeAt(0)\
    \ + 2;\n    }).map(function(ch) {\n        return String.fromCharCode(ch);\n \
    \   }).join('');\n}\n", "\tconst alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n\t\
    let encrypted: string = \"\";\n\tlet i = 0;\n\tdo {\n\t\tencrypted = alphabet.charAt(alphabet.indexOf(alphabet[i])\
    \ + 2); // rotate letter down\n\t} while ((alphabet.indexOf(encrypted) >= alphabet.lastIndexOf(alphabet[i]))\
    \ && (encrypted.length < 4));\n\treturn (encrypted + s);\n}\n", "    return s.split('').map((letter)\
    \ => {\n        letter = alphabet.indexOf(letter) + 2;\n        return alphabet[letter];\n\
    \    }).join('');\n}\n", "  let alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n \
    \ let rotated = alphabet[alphabet.indexOf(alphabet) + 1];\n  let encrypted = \"\
    \";\n  for (let i = 0; i < s.length; i++) {\n    encrypted += rotated[s.charCodeAt(i)\
    \ - 65];\n  }\n  return encrypted;\n}\n", "    var result = \"\";\n    var j =\
    \ 0;\n    for (var i = 0; i < s.length; i++) {\n        var c = s[i];\n      \
    \  if (j == 0) {\n            c = String.fromCharCode(ord(c) + 2);\n        }\
    \ else {\n            c = String.fromCharCode(ord(c) - 2);\n        }\n      \
    \  result += \"abcdefghijklmnopqrstuvwxyz\".charAt(c.charCodeAt(0) % 26);\n  \
    \      j++;\n    }\n    return result;\n}\n", "\tlet result = '';\n\tlet i = s.length\
    \ - 1;\n\twhile (i > -1) {\n\t\tresult += ALPHABET[((s[0] + 2) % 26) + \n\t\t\t\
    ((s[1] + 2) % 26) + ((s[2] + 2) % 26) + ((s[3] + 2) % 26) + ((4 + 2) % 26)];\n\
    \t\ti -= 1;\n\t}\n\treturn result;\n}\n", "  const alpha = [\n    'a', 'b', 'c',\
    \ 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's',\
    \ 't', 'u', 'v', 'w', 'x', 'y', 'z'\n  ];\n  let rotatedAlpha = alpha.slice();\n\
    \  let index = 0;\n  let result = '';\n\n  while (true) {\n    if (index < alpha.length)\
    \ {\n      result = result + rotatedAlpha.shift();\n      index = index + 2;\n\
    \    } else {\n      rotatedAlpha = alpha.slice();\n      index = 0;\n      result\
    \ = result + rotatedAlpha.shift();\n    }\n  }\n  return result;\n}\n", "    if\
    \ (s.length <= 1) {\n        return s\n    }\n    var alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var s = s.replace(/[^a-z]/g, \"\") // Remove any non letter characters\n\
    \    var rotated_alphabet = alphabet.substr(0, alphabet.length - 1).split(\"\"\
    ).concat(alphabet.substr(0, alphabet.length - 1)).join(\"\")\n    var result =\
    \ \"\"\n    for (var i = 0; i < s.length; i++) {\n        var char = s[i]\n  \
    \      var rotated_char = rotated_alphabet[alphabet.indexOf(char) + 2]\n     \
    \   result += rotated_char\n    }\n    return result\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=cryptography,algorithm,encryption,python |>\nThis is an example\
    \ I made in Python. Hope this helps you.\n<code>\ndef rotate_left(text, n):\n\
    \    rotated_text = []\n    for i in range(len(text)):\n        rotated_text.append(text[len(text)\
    \ - 1 - i])\n    return rotated_text\n\ndef rotate_right(text, n):\n    rotated_text\
    \ = []\n    for i in range(len(text)):\n        rotated_text.append(text[len(text)\
    \ - 1 - i])\n    return rotated_text\n\ndef encrypt_block(block):\n    block_rotated_left\
    \ = [block[x] for x in range(len(block) - 1, -1, -1)]\n    block_rotated_right\
    \ = [block[x] for x in range(len(block) - 1, -1, -1)]\n    block_rotated_left[0]\
    \ = 'A'\n    block_rotated_right[len(block) - 1] = 'A'\n\n    block_rotated_right[0]\
    \ = 'a'\n    block_rotated_left[len(block) - 1] = 'a'\n\n    block_rotated_right\
    \ = ''.join([rotate_right(x, len(block) - 1 - i) for i, x in enumerate(block_rotated_right)])\n\
    \    block_rotated_left = ''.join([rotate_left(x, len(block) - 1 - i) for i, x\
    \ in enumerate(block_rotated_left)])\n\n    return block_rotated_left + block_rotated_right\n\
    \ndef encrypt_block(block):\n    block_rotated_left = [block[x] for x in range(len(block)\
    \ - 1, -1, -1)]\n    block_rotated_right = [block[x] for x in range(len(block)\
    \ - 1, -1, -1)]\n    block_rotated_left[0] = 'A'\n    block_rotated_right[len(block)\
    \ - 1] = 'A'\n\n    block_rotated_right[0] = 'a'\n    block_rotated_left[len(block)\
    \ - 1] = 'a'\n\n    block_rotated_right = ''.join([rotate_right(x, len(block)\
    \ - 1 - i) for i, x in enumerate(block_rotated_right)])\n    block_rotated_left\
    \ = ''.join([rotate_left(x, len(block) - 1 - i) for i, x in enumerate(block_rotated_left)])\n\
    \n    return block_rotated_left + block_rotated_right\n\ndef decrypt_block(block):\n\
    \    block_", "  let alphabet = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"\
    g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"\
    r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n  let rotate =\
    \ alphabet.slice();\n  rotate = rotate.reverse();\n  rotate.shift();\n  let encrypt\
    \ = \"\";\n  let j = 0;\n  for (let i = 0; i < s.length; i++) {\n    encrypt =\
    \ encrypt + rotate[j];\n    j = j + 1;\n    if (j === rotate.length) {\n     \
    \ j = 0;\n    }\n  }\n  return encrypt;\n}\n", "  var alphabet: string = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n  var rotatedAlphabet: string = alphabet.split(\"\").map(function(c, i) { return\
    \ c + alphabet[(i + 2) % 26]; }).join(\"\");\n  return s.split(\"\").map(function(c)\
    \ { return c.charCodeAt(0) - 96 * alphabet.indexOf(c); }).map(function(c) { return\
    \ rotatedAlphabet.indexOf(c) + 97; }).join(\"\");\n}\n", "    let alphabet = \"\
    abcdefghijklmnopqrstuvwxyz\";\n    let length = alphabet.length;\n    let newAlphabet\
    \ = alphabet.split(\"\").map(function(s) {\n        return alphabet.indexOf(s)\
    \ + 2\n    }).join(\"\");\n\n    let newLength = newAlphabet.length;\n    let\
    \ newString = \"\";\n\n    for (let i = 0; i < s.length; i++) {\n        newString\
    \ += alphabet.indexOf(s[i]) + 2\n    }\n\n    newString = newString.split(\"\"\
    ).map(function(s) {\n        return newAlphabet.indexOf(s);\n    }).join(\"\"\
    );\n\n    let newLength = newString.length;\n\n    for (let i = s.length; i <\
    \ newLength; i++) {\n        newString += newAlphabet[newLength - i - 1];\n  \
    \  }\n\n    return newString;\n}\n", "  \n  let alphabet = [\"a\", \"b\", \"c\"\
    , \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"\
    , \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\"\
    , \"z\"];\n  let letters: string = \"\";\n  for (let i = 0; i < s.length; i++)\
    \ {\n    let charArr = s.split(\"\").slice(0,s.length);\n    charArr.unshift(alphabet[alphabet.indexOf(charArr[0])]);\n\
    \    charArr.unshift(alphabet[alphabet.indexOf(charArr[0]) + 1]);\n    charArr.push(alphabet[alphabet.indexOf(charArr[charArr.length\
    \ - 1])]);\n    charArr.push(alphabet[alphabet.indexOf(charArr[charArr.length\
    \ - 1]) + 1]);\n    let newChar = charArr.join(\"\");\n    letters += newChar;\n\
    \  }\n  return letters;\n}\n", "  if(s.length<=1) {\n    return \"\"\n  }\n  const\
    \ newStr = s.slice()\n  let j = 0\n  while( j < newStr.length ) {\n    newStr[j]\
    \ = newStr[j] + newStr[j+1]\n    newStr[j+1] = newStr[j] - (newStr[j+1] - newStr[j])\
    \ * Math.pow(2,2)\n    j += 2\n  }\n  return newStr.join('')\n}\n", "  s = s.split('').map(x\
    \ => String.fromCharCode(x.charCodeAt(0) + 2)).join('');\n  s = s.split('').map(x\
    \ => String.fromCharCode(x.charCodeAt(0) - 2)).join('');\n  return s;\n}\n", " \
    \   const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n    const result = '';\n \
    \   for (let i = 0; i < s.length; i++) {\n        result += alphabet.charAt(alphabet.indexOf(s.charAt(i))\
    \ * 2);\n        result += alphabet.charAt(alphabet.indexOf(s.charAt(i)) * 2 +\
    \ 1);\n    }\n    return result;\n}\n", "  return rotate(s, 2)\n}\n", "    let\
    \ alphabet = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"\
    j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"\
    u\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n    let rotated = alphabet.map((letter)\
    \ => {\n        return letter.toUpperCase();\n    }).slice(2);\n    let encrypted\
    \ = \"\";\n    for (let i = 0; i < s.length; i++) {\n        encrypted += alphabet.indexOf(s[i])\
    \ - rotated.indexOf(s[i]) + 2;\n    }\n    return encrypted;\n}\n", "    let newString\
    \ = \"\",\n        alpha = \"abcdefghijklmnopqrstuvwxyz\",\n        i = alpha.length,\n\
    \        j = 0,\n        l = s.length;\n    while (i < l) {\n        if (s.charAt(i)\
    \ + j < alpha.length) {\n            newString += alpha.charAt(s.charAt(i) + j);\n\
    \        } else {\n            newString += s.charAt(i);\n        }\n        i++;\n\
    \        j++;\n    }\n    return newString;\n}\n", "  for (var i = 0; i < s.length;\
    \ i+=2) {\n    s += alphabet[alphabet.indexOf(s.charAt(i)) + (alphabet.indexOf(s.charAt(i+1))\
    \ + 2)]\n  }\n  return s\n}\n", "    let encryptedString = \"\";\n    for (let\
    \ i = 0; i < s.length; i++)\n        encryptedString += alphabet.shiftCharacter(s.charAt(i),\
    \ 2);\n    return encryptedString;\n}\n", "  const alpha = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n  const nums = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n  let result: string;\n\
    \  let idx = 0;\n  let i = 0;\n  let j = 0;\n  \n  for (let i = 0; i < s.length;\
    \ i++)\n  {\n    j = nums.indexOf(s.charAt(i));\n    result = (result + alpha.charAt(j\
    \ + 2)) + alpha.charAt(j + 0);\n    idx++;\n  }\n\n  return result;\n}\n", " \
    \   var result = \"\";\n    var length = s.length;\n    for (var i = 0; i < length;\
    \ i++) {\n        var char = s.charAt(i);\n        var value = alphabet.indexOf(char);\n\
    \        var modVal = value + 2;\n        if (modVal > alphabet.length) {\n  \
    \          value = modVal - alphabet.length;\n        }\n        var newChar =\
    \ alphabet[value];\n        result += newChar;\n    }\n    return result;\n}\n",
  "  let result = \"\";\n  let length = s.length;\n  let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n  let alphabetLength = alphabet.length;\n  \n  for (var i = 0; i < length;\
    \ i++) {\n    let letter = s.charAt(i);\n    \n    for (let j = 0; j < alphabetLength;\
    \ j++) {\n      if (j % 2 === 0) {\n        letter = alphabet[alphabet.indexOf(letter)\
    \ + 1];\n      } else {\n        letter = alphabet[alphabet.indexOf(letter) -\
    \ 1];\n      }\n    }\n    \n    result += letter;\n  }\n  \n  return result;\n\
    }\n", "  // Create a function that takes one argument and returns the encrypted\
    \ string.\n  // It must use an encryption method of some sort.\n  // It should\
    \ use a hash function and a key. This is where you start.\n}\n", "  let alphabet\
    \ = 'abcdefghijklmnopqrstuvwxyz'\n  let alphabetLength = alphabet.length\n  let\
    \ shift = alphabetLength + alphabetLength\n  let rotated = alphabet\n\n  for (let\
    \ i = 0; i < alphabet.length; i++) {\n    rotated = rotated + alphabet\n  }\n\n\
    \  for (let i = 0; i < s.length; i++) {\n    rotated = rotated + s.charAt(i)\n\
    \  }\n\n  for (let i = 0; i < alphabet.length; i++) {\n    rotated = rotated +\
    \ alphabet\n  }\n\n  return rotated\n}\n", "  if (s.length < 1) return \"\"\n\
    \  let sArr = s.split(\"\")\n  sArr.splice(0, 2)\n  sArr = sArr.map((letter, index)\
    \ =>\n    letter + alphabet.charAt(alphabet.length - index - 2)\n  )\n  return\
    \ sArr.join(\"\")\n}\n", "    var alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n\
    \    var result = \"\";\n    \n    var len = s.length;\n    var slen = s.length;\n\
    \    \n    // Find the length of the longest substring of letters shifted down\
    \ by 2\n    for (var i = 0; i < len; i += 1) {\n        var letter = alphabet.substr(i,\
    \ 1);\n        var newLetter = alphabet.substr(i + 2, 1);\n        result += letter\
    \ + newLetter;\n    }\n    \n    // Rotate the alphabet by 2 places and add the\
    \ original letter\n    var rotatedAlphabet = alphabet.substr(0, 0) + alphabet.substr(len\
    \ - 1, 1);\n    result += alphabet.substr(len - 1, 1);\n    \n    // Add all of\
    \ the rotated letters to the end of the string\n    for (var i = 0; i < slen;\
    \ i += 1) {\n        var letter = alphabet.substr(i, 1);\n        result += rotatedAlphabet.charAt(alphabet.indexOf(letter)\
    \ + 2);\n    }\n    return result;\n}\n", "\tconst alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n\treturn s.split('').map(letter => alphabet[alphabet.indexOf(letter) + 2]).join('');\n\
    }\n", "    var alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    var enc = \"\"\
    ;\n    var counter = 0;\n    for (i = 0; i < s.length; i++) {\n        counter\
    \ += alphabet.indexOf(s.charAt(i));\n    }\n\n    if (counter == 0) {\n      \
    \  return s;\n    }\n\n    for (i = 0; i < s.length; i++) {\n        enc += alphabet.charAt(counter\
    \ - alphabet.indexOf(s.charAt(i)));\n        counter = counter + 2;\n    }\n \
    \   return enc;\n}\n", "  let result = '';\n  let len = s.length;\n  let i = 0;\n\
    \  while (i < len) {\n    result += alphabet[alphabet.indexOf(s.charAt(i))];\n\
    \    i++;\n  }\n  return result;\n}\n", "  return Array.from(s)\n            \
    \ .map(\n               l =>\n                 [...alphabet, l[l.length - 1]]\n\
    \                     .map(\n                       c =>\n                   \
    \      alphabet[(alphabet.indexOf(c) + 2) % alphabet.length]\n               \
    \      )\n             )\n             .flat()\n             .join(\"\");\n}\n",
  "    // Declare a variable called alphabet that will hold \n    // the encrypted\
    \ string \n    let alphabet: string[] = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'];\
    \ \n    \n    // Define a variable called string that will hold a \n    // substring\
    \ of the input string that will be encrypted\n    let string: string = s;\n  \
    \  \n    // Define a variable called encrypted that will hold a \n    // substring\
    \ of the input string that will be encrypted\n    let encrypted: string = \"\"\
    ;\n    \n    // Define a variable called index that will hold the \n    // index\
    \ of the letter within the alphabet that corresponds\n    // to the letter that\
    \ will be shifted\n    let index: number = 0;\n\n    // While the length of the\
    \ input string is not 0\n    while (string != \"\") {\n        // If the letter\
    \ at the index (index) within the input \n        // string is not equal to the\
    \ current letter at the \n        // index (index) within the alphabet then add\
    \ that \n        // letter to the encrypted string\n        if (string[index]\
    \ !== alphabet[index]) {\n            encrypted += string[index];\n        }\n\
    \        // Otherwise shift down two letters to the left\n        else {\n   \
    \         encrypted += alphabet[((index + 2) % alphabet.length)];\n        }\n\
    \        // Increment the index by one so we are ready to \n        // look at\
    \ the next letter in the input string\n        index++;\n    }\n    \n    // Return\
    \ the encrypted string\n    return encrypted;\n}\n", "  return alphabet.map(function\
    \ (l: string) {\n    const p = s.indexOf(l);\n    if (p === -1) {\n      return\
    \ l;\n    }\n    const q = p % alphabet.length;\n    const q = q + 2;\n    const\
    \ r = p - (q + q);\n    return alphabet[q] + alphabet[r];\n  }).join(\"\");\n\
    }\n", "  const alphabet: string = `abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ`;\n\
    \  const alphabet2: string = `NOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklm`;\n\
    \  const alphabet3: string = `abcdfghjklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ`;\n\
    \  const alphabet4: string = `abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ`;\n\
    \  const alphabet5: string = `abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGH",
  "  return s.split('').map(function(letter){\n    var position = alphabet.indexOf(letter)\n\
    \    var shift_value = position * 2\n    shift_value = shift_value > alphabet.length\
    \ ? alphabet.length - shift_value : shift_value\n    return alphabet[shift_value]\n\
    \  }).join('')\n}\n", "    const alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n \
    \   const len = alphabet.length\n    let rotated = \"\"\n    for (let i = 0; i\
    \ < s.length; i++) {\n        const index = alphabet.indexOf(s[i]) //find the\
    \ index of s[i] in the alphabet\n        if (index === -1) {\n            throw\
    \ new Error(`The character ${s[i]} is not in the alphabet`)\n        }\n     \
    \   rotated += alphabet.charAt(index + len + len / 2) //add half of the alphabet's\
    \ length to the index \n    }\n    return rotated\n}\n", "  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n\
    \  let str = '';\n  for (let i = 0; i < s.length; i++) {\n    const c = alphabet.indexOf(s[i]);\n\
    \    if (c === -1) {\n      console.log(`Failed to find character ${s[i]}`);\n\
    \      return 'Failed';\n    } else {\n      const num = Math.floor((c + 2) /\
    \ 2);\n      str += alphabet[num];\n    }\n  }\n  return str;\n}\n", "  // TODO\n\
    \  // You will need to use an if statement to check if your argument is \n  //\
    \ a string and if it is, to rotate the alphabet by two. \n  // Also, you'll need\
    \ to create a variable that holds the alphabet.\n}\n", "  for (var i = 0; i <\
    \ alphabet.length; i++) {\n    s += alphabet[alphabet.indexOf(alphabet[i]) + 2];\n\
    \  }\n  return s;\n}\n", "    // Split the string into individual characters.\n\
    \    const chars = s.split('')\n    // Convert the string into an array.\n   \
    \ const arr = chars.map(char => {\n        // Convert the character into ASCII\
    \ value.\n        const num = char.charCodeAt(0)\n        // Convert the ASCII\
    \ value into its corresponding character in the rotated alphabet.\n        return\
    \ String.fromCharCode(num + 2)\n    })\n    // Join all of the characters together\
    \ to make one string.\n    return arr.join('')\n}\n", "  return rotateAlphabet(s,\
    \ 2)\n}\n", "    let cipher = \"\";\n    let n = s.length;\n    for (let i = 0;\
    \ i < n; i++) {\n        const a = alphabet.charCodeAt(i);\n        const c =\
    \ alphabet.charCodeAt(i);\n        const d = alphabet.charCodeAt(i + 1);\n   \
    \     const e = (c + 2) % alphabet.length;\n        c += 2;\n        cipher +=\
    \ alphabet[e];\n        cipher += alphabet[d];\n        cipher += alphabet[c];\n\
    \        cipher += alphabet[a];\n        cipher += alphabet[d];\n        cipher\
    \ += alphabet[c];\n        cipher += alphabet[a];\n        cipher += alphabet[d];\n\
    \        cipher += alphabet[c];\n        cipher += alphabet[a];\n        cipher\
    \ += alphabet[d];\n        cipher += alphabet[c];\n        cipher += alphabet[a];\n\
    \        cipher += alphabet[d];\n        cipher += alphabet[c];\n        cipher\
    \ += alphabet[a];\n        cipher += alphabet[d];\n        cipher += alphabet[c];\n\
    \        cipher += alphabet[a];\n        cipher += alphabet[d];\n        cipher\
    \ += alphabet[c];\n        cipher += alphabet[a];\n    }\n    return cipher;\n\
    }\n", "\tlet rotate = \"\";\n\tfor(let i = 0; i < s.length; i++) {\n\t\trotate\
    \ += getRotatedAlphabet(s.charAt(i));\n\t}\n\treturn rotate;\n}\n", "    var alpha\
    \ = \"abcdefghijklmnopqrstuvwxyz\";\n    var r = \"\";\n    var l = s.length;\n\
    \    for (var i = 0; i < l; i++) {\n        r += alpha[rotate(alpha.indexOf(s[i]))\
    \ + 2];\n    }\n    return r;\n}", "\tlet alphabet: string[] = [\"a\", \"b\",\
    \ \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\"\
    , \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\"\
    , \"y\", \"z\"];\n\tlet encryptedString: string = \"\";\n\tfor (let i = 0; i <\
    \ s.length; i++) {\n\t\tencryptedString += alphabet[alphabet.indexOf(s[i]) + alphabet.length\
    \ % alphabet.indexOf(s)];\n\t}\n\treturn encryptedString;\n}", "  let alphabet:\
    \ Alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n  let encrypted_string: string =\
    \ \"\";\n  for (let char of s) {\n    encrypted_string += alphabet.charAt(alphabet.indexOf(char)\
    \ + 2);\n  }\n  return encrypted_string;\n}\n", "    console.log(s);\n    const\
    \ alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    let chars = s.split(\"\");\n\
    \    console.log(chars);\n    for(let i = 0; i < chars.length; i++) {\n      \
    \  let x = alphabet.indexOf(chars[i]);\n        let y = alphabet.indexOf(chars[i+1]);\n\
    \        if(x == -1) {\n            return chars[i];\n        }\n        if(y\
    \ == -1) {\n            return chars[i];\n        }\n        let m = x + 2;\n\
    \        if(x == y) {\n            m+=1;\n        }\n        chars[i] = alphabet.charAt(m);\n\
    \    }\n    return chars.join(\"\");\n}\n", "  var r = \"\";\n  for (var i = 0;\
    \ i < s.length; ++i) {\n    r += alphabet[s.charCodeAt(i) - alphabet.length]\n\
    \  }\n  return r;\n}", "    // Your code here\n}\n", "    var sResult = '';\n\n\
    \    for (var i = 0; i < s.length; i++) {\n        var iA = alphabet.indexOf(s.charAt(i));\n\
    \        var iB = (iA + 2) % alphabet.length;\n        sResult += alphabet[iB];\n\
    \    }\n    return sResult;\n}\n", "    let res = \"\";\n    for (let i = 0; i\
    \ < s.length; i++) res += alphabet[encrypt(alphabet.indexOf(s[i])) + 2];\n   \
    \ return res;\n}\n", "    let newString: string = \"\";\n    for (let i of s)\
    \ {\n        const rotation: number = ((ord(i) - 65) % 26) + 65;\n        newString\
    \ += String.fromCharCode(rotation);\n    }\n    return newString;\n}\n</code>\n\
    The last piece is converting this string into a number (the ASCII value of each\
    \ letter, in this case) which can be stored in the variable encrypted. \nFinally,\
    \ using modulus operators to get the remainder of the encrypted number when divided\
    \ by the length of the alphabet (26 here), and using an if statement to check\
    \ if the remainder is 0.\nThe code below checks if the encrypted letter is equal\
    \ to any of the 26 letters in the alphabet. \n<code>", "    const alphabet: string\
    \ = \"abcdefghijklmnopqrstuvwxyz\";\n    let encrypted: string = \"\";\n    for\
    \ (let i = 0; i < s.length; i++) {\n        let a = alphabet.indexOf(s.charAt(i));\n\
    \        if (a === -1) throw new Error(`character \"${s.charAt(i)}\" not found`);\n\
    \        a += 2;\n        encrypted = encrypted + alphabet.charAt(a);\n    }\n\
    \    return encrypted;\n}\n", "  let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n  \n  // get the letters to shift \n  let shiftLetters = alphabet.split(\"\"\
    ).map(c => alphabet.indexOf(c) - 2);\n\n  return s.split(\"\").map(letter => alphabet.indexOf(letter)\
    \ + shiftLetters[alphabet.indexOf(letter)]).join(\"\");\n}\n", "    var a = alphabet[alphabet.length\
    \ - 1];\n    var b = alphabet[0];\n    \n    var newString = \"\";\n    for (var\
    \ i = 0; i < s.length; i++){\n        newString += alphabet[alphabet.indexOf(s.charAt(i))];\n\
    \    }\n    return newString;\n}\n", "\t\n\t// Initialize an empty string, whose\
    \ characters are rotated to the left by two.\n\tvar result = \"\"\n\t\n\t// Iterate\
    \ through the characters in the string.\n\tfor (var i = 0; i < s.length; i++)\
    \ {\n\t\t\n\t\t// Get the character from the string.\n\t\tvar c = s.charAt(i)\n\
    \t\t\n\t\t// Get the position of the character in the alphabet and shift it down\
    \ by two positions.\n\t\tvar pos = alphabet.indexOf(c)\n\t\t\n\t\t// If the character\
    \ doesn't exist in the alphabet, just copy it to the result string.\n\t\tif (pos\
    \ < 0) result += c\n\t\t\n\t\t// If the character does exist in the alphabet,\
    \ append a copy of it shifted down by two positions.\n\t\telse result += alphabet[pos\
    \ - 2]\n\t\t\n\t\t// Shift the rest of the characters in the result string down.\n\
    \t\tfor (var j = i + 1; j < s.length; j++) result += alphabet[alphabet.indexOf((s.charAt(j)))\
    \ - 2]\n\t}\n\t\n\treturn result\n}\n", "  // Convert the string to an array of\
    \ characters. \n  // If there are any non alphabetic characters, return an empty\
    \ string.\n  let alphabet: string[] = s.split(\"\").filter(x => alphabet.indexOf(x)\
    \ == -1);\n  // Create an alphabet of 26 empty strings\n  let alphabetAlphabet:\
    \ string[] = alphabet.map(x => \"\");\n  // Rotate the alphabet by two places\
    \ \n  alphabetAlphabet.splice(1, 0, alphabetAlphabet[1], alphabetAlphabet[0]);\n\
    \  // Convert the string back into a string.\n  return alphabetAlphabet.join(\"\
    \");\n}", "  let result = \"\";\n  let alphabet = [\"a\", \"b\", \"c\", \"d\"\
    , \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\"\
    , \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"\
    ];\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charAt(i);\n\
    \    let shift = 0;\n    if (char.match(/[a-z]/i)) {\n      shift = alphabet.indexOf(char.charAt(0))\
    \ + 2;\n    } else {\n      shift = alphabet.indexOf(char.charAt(0)) - 2;\n  \
    \  }\n    result = result + alphabet.slice(shift, shift + 2) + \" \" + alphabet.slice(shift\
    \ + 2, shift + 3) + \" \" + alphabet.slice(shift + 3, shift + 4) + \" \" + alphabet.slice(shift\
    \ + 4, shift + 5) + \" \" + alphabet.slice(shift + 5, shift + 6) + \" \" + alphabet.slice(shift\
    \ + 6, shift + 7) + \" \" + alphabet.slice(shift + 7, shift + 8);\n  }\n  return\
    \ result;\n}\n", "  if (s.length % 2 == 1) return \"\";\n  \n  // First pass:\n\
    \  // Start by rotating the original alphabet by 2 multiplied by 2 \n  // and\
    \ shift it down by two.\n  const rotatedAlphabet = alphabet.slice(0).slice(0).map(l\
    \ => l+1).slice(0).map(l => l-1);\n  \n  // Second pass:\n  // Start by rotating\
    \ the rotatedAlphabet by 2 multiplied by 2 \n  // and shift it down by two.\n\
    \  const shiftedRotatedAlphabet = rotatedAlphabet.slice(0).slice(0).map(l => l+1).slice(0).map(l\
    \ => l-1);\n  \n  // Third pass:\n  // Add these two shifted alphabets together\
    \ to get the final shifted alphabet\n  let result = \"\";\n  for (let i = 0; i\
    \ < s.length; i+=2) result += shiftedRotatedAlphabet[alphabet.indexOf(s.charAt(i))]\
    \ +\n                                   shiftedRotatedAlphabet[alphabet.indexOf(s.charAt(i+1))];\n\
    \  \n  return result;\n}\n", "  var alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n  var alphabetLength: number = alphabet.length;\n  var output: Array<string>\
    \ = [];\n  // Loop through the string by index and grab each character\n  // and\
    \ add to output\n  for (var i: number = 0, length: number = s.length; i < length;\
    \ i++) {\n    output.push(alphabet.charCodeAt(i - length) % alphabetLength);\n\
    \  }\n  return output.join('');\n}\n", "  const alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n  let rotation = 0;\n  let result = \"\";\n  for (let i = 0; i < s.length;\
    \ i++) {\n    if (i < alphabet.length) {\n      result += alphabet.charAt(alphabet.indexOf(s.charAt(i))\
    \ - rotation);\n      rotation += 2;\n    } else {\n      result += s.charAt(i);\n\
    \    }\n  }\n  return result;\n}", "  let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n  let result = '';\n\n  for (let i = 0; i < s.length; i++) {\n    let n = alphabet.indexOf(s[i]);\n\
    \n    result += alphabet.charAt(n % 26);\n    result += alphabet.charAt(n / 26);\n\
    \  }\n\n  return result;\n}\n", "    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    let sArr: string[] = s.split(\"\");\n    let result: string = sArr.map((char)\
    \ => {\n        let index = alphabet.indexOf(char);\n        index = index - 2;\
    \ // Shift 'i' down by 2 places.\n        return alphabet[index]; \n    }).join(\"\
    \");\n    return result;\n}\n", "    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    let ns = \"\";\n    for (let i = 0; i < s.length; i++) {\n        ns +=\
    \ alphabet.charAt(alphabet.indexOf(s[i]) + 2);\n        ns += alphabet.charAt(alphabet.indexOf(s[i])\
    \ - 2);\n    }\n    return ns;\n}\n", "  const alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n  const encryptedAlphabet = [\n    alphabet[1],\n    alphabet[2],\n    alphabet[3],\n\
    \    alphabet[4],\n    alphabet[5],\n    alphabet[6],\n    alphabet[7],\n    alphabet[8],\n\
    \    alphabet[9],\n    alphabet[10],\n    alphabet[11],\n    alphabet[12],\n \
    \   alphabet[13],\n    alphabet[14],\n    alphabet[15],\n    alphabet[16],\n \
    \   alphabet[17],\n    alphabet[18],\n    alphabet[19],\n    alphabet[20],\n \
    \   alphabet[21],\n    alphabet[22],\n    alphabet[23],\n    alphabet[24],\n \
    \   alphabet[25],\n    alphabet[26],\n    alphabet[27],\n    alphabet[28],\n \
    \   alphabet[29],\n    alphabet[30],\n    alphabet[31],\n  ];\n  return encryptedAlphabet[alphabet.indexOf(s.split('').map(\n\
    \    (s) => s.charCodeAt(0))) % (alphabet.length - 1)];\n}\n", "  let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\";\n  let sArr = s.split(\"\");\n  let newArr\
    \ = [];\n  for (let i = 0; i < sArr.length; i++) {\n    let c = sArr[i];\n   \
    \ newArr[i] = alphabet[(alphabet.indexOf(c) + 2) % alphabet.length];\n  }\n  return\
    \ newArr.join(\"\");\n}\n", "  var chars = s.split('');\n  var newChars = [];\n\
    \  for(var i = 0, length = chars.length; i < length; i++) {\n    var c = chars[i];\n\
    \    if(isAlpha(c)) {\n      newChars.push(alphabet.charAt(alphabet.indexOf(c)\
    \ - 2));\n    } else {\n      newChars.push(c);\n    }\n  }\n  \n  newChars =\
    \ newChars.join('');\n  if(newChars.length == 1) {\n    newChars = newChars.charAt(0)\
    \ + newChars;\n  }\n  \n  return encrypt(newChars);\n}\n  ", "  var newString:\
    \ string = \"\";\n  var oldLetter = alphabet.shift();\n  alphabet.push(oldLetter);\n\
    \  alphabet.unshift(oldLetter);\n  for (var i = 0; i < s.length; i++) {\n    var\
    \ ch = s[i];\n    newString += alphabet[alphabet.indexOf(ch) + 1];\n  }\n  return\
    \ newString;\n}\n", "    const alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"\
    ;\n    const alphabetLength = alphabet.length;\n    let cipherText = \"\";\n \
    \   let i = 0;\n    while (i + 2 < s.length && i < alphabetLength) {\n       \
    \ let temp = alphabet.substring(i, i + 2);\n        cipherText += alphabet.substring(alphabet.indexOf(s[i])\
    \ + 2, alphabet.indexOf(s[i]) + 1);\n        cipherText += temp;\n        cipherText\
    \ += alphabet.substring(alphabet.indexOf(s[i + 2]) + 2, alphabet.indexOf(s[i +\
    \ 2]) + 1);\n        i += 3;\n    }\n    if (i < alphabetLength) {\n        cipherText\
    \ += alphabet.substring(i, alphabetLength);\n    }\n    return cipherText;\n}",
  "  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let c = '';\n  for (let i =\
    \ 0; i < s.length; i++) {\n    c += alphabet.charAt((alphabet.indexOf(s[i]) +\
    \ 2) % alphabet.length);\n  }\n  return c;\n}\n", "  return s.split(\"\").map(l\
    \ => {\n    const idx = alphabet.length + l - alphabet.length % 2\n    return\
    \ alphabet[idx]\n  }).join(\"\")\n}\n", "  let a = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n  let b = \"nopqrstuvwxyzabcdefghijklm\";\n  let c = \"qrstuvwxyzabcdefghijklmnop\"\
    ;\n  let d = \"uvwxyzabcdefghijklmnopqrstuv\";\n  let e = \"wxyzabcdefghijklmnopqrstuvw\"\
    ;\n  let f = \"zabcdefghijklmnopqrstuvwxy\";\n  let g = \"abcdefghijklmnopqrstuvwxyzz\"\
    ;\n\n  s = s.toUpperCase();\n  let i = 0;\n  while (i < s.length){\n    if (s.charAt(i)\
    \ >= 'A' && s.charAt(i) <= 'Z'){\n      s += a[s.charAt(i)];\n      i++;\n   \
    \ }\n    else if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z'){\n      s += b[s.charAt(i)];\n\
    \      i++;\n    }\n    else if (s.charAt(i) >= '0' && s.charAt(i) <= '9'){\n\
    \      s += c[s.charAt(i)];\n      i++;\n    }\n    else if (s.charAt(i) >= 'a'\
    \ && s.charAt(i) <= 'z'){\n      s += d[s.charAt(i)];\n      i++;\n    }\n   \
    \ else if (s.charAt(i) >= '0' && s.charAt(i) <= '9'){\n      s += e[s.charAt(i)];\n\
    \      i++;\n    }\n    else if (s.charAt(i) >= '0' && s.charAt(i) <= '9'){\n\
    \      s += f[s.charAt(i)];\n      i++;\n    }\n    else if (s.charAt(i) >= 'A'\
    \ && s.charAt(i) <= 'Z'){\n      s += g[s.charAt(i)];\n      i++;\n    }\n   \
    \ else if (s.charAt(i) == '_'){\n      s += '_';\n      i++;\n    }\n    else\
    \ if (s.charAt(i) == ' '){\n      s += ' ';\n      i++;\n    }\n    else if (s.charAt(i)\
    \ == ','){\n      s += ',';\n      i++;\n    }\n    else{\n      s += s.charAt(i);\n\
    \      i++;\n    }\n  }\n  return s;\n}\n", "    const alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    let result = \"\";\n    for (let i = 0; i < s.length; i++) {\n        const\
    \ char = alphabet[alphabet.indexOf(s[i]) + 2];\n        if (char != alphabet[0])\
    \ {\n            result += char;\n        } else {\n            result += alphabet[0];\n\
    \        }\n    }\n    return result;\n}\n", "  const alpha = ['a', 'b', 'c',\
    \ 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's',\
    \ 't', 'u', 'v', 'w', 'x', 'y', 'z'];\n  let ret = '';\n  for (let i = 0; i <\
    \ s.length; i++) {\n    let alphaIndex = 0;\n    for (let j = 0; j < alpha.length;\
    \ j++) {\n      if (s.charAt(i) === alpha[j]) {\n        alphaIndex = j;\n   \
    \     break;\n      }\n    }\n    ret += alpha.splice(alphaIndex, 1).join('')\
    \ + s.charAt(i);\n  }\n  return ret;\n}\n", "  var chars = s.split('');\n  var\
    \ newChars = [];\n  for (var i = 0; i < chars.length; i++) {\n    var char = chars[i].toLowerCase();\n\
    \    newChars.push(char.charCodeAt(0) - 65 + 2);\n  }\n  var encrypted = String.fromCharCode.apply(String,\
    \ newChars);\n  return encrypted;\n}\n", "  let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n  let encrypted = \"\";\n  \n  for (let char of s) {\n    if (alphabet.indexOf(char)\
    \ !== -1) encrypted += alphabet[(alphabet.indexOf(char) + 2) % alphabet.length];\n\
    \    else encrypted += char;\n  }\n  \n  return encrypted;\n}\n", "  return s.split('').map(x\
    \ => String.fromCharCode((alphabet.indexOf(x) + 2) % alphabet.length + 1)).join('');\n\
    }\n", "  let result = ''\n  for (let i = 0; i < s.length; i++) {\n    const c\
    \ = s.charCodeAt(i) + 2\n    result = String.fromCharCode(c)\n  }\n  return result\n\
    }\n", "  return s.split('').map(function(c) {\n    return alphabet.indexOf(c)\
    \ + 1;\n  }).map(function(c) {\n    return alphabet.charAt(c % alphabet.length);\n\
    \  }).join('');\n}\n", "    const rotatedAlphabet = rotate(alphabet, 2);\n   \
    \ const keyWordCount = countWords(s);\n    const keyWords = splitWords(s);\n \
    \   const encryptedWords = encryptWords(keyWords, rotatedAlphabet, keyWordCount);\n\
    \    return joinWords(encryptedWords);\n}\n", "  let cipher = \"\";\n  for (let\
    \ i = s.length; i > 0; i--) {\n    const num = s.charCodeAt(i) - 96;\n    cipher\
    \ = num + cipher + num;\n  }\n  return cipher;\n}\n", "    var result: string\
    \ = \"\";\n    for (var i: number = 0; i < s.length; i += 2) {\n        var char:\
    \ string = s.substring(i, i + 2);\n        var index = alphabet.indexOf(char);\n\
    \        index = (index / 2) + 1;\n        var letter: string = alphabet[index];\n\
    \        result += letter;\n    }\n    return result;\n}\n", "  const alphabet:\
    \ string = \"abcdefghijklmnopqrstuvwxyz\";\n  const alphabetReverse: string =\
    \ \"zyxwvutsrqponmlkjihgfedcba\";\n  const alphabetIndex: number[] = [];\n  for\
    \ (let i = 0; i < alphabet.length; i++) {\n    alphabetIndex[i] = alphabet.indexOf(alphabet[i]);\n\
    \  }\n  for (let i = 0; i < s.length; i += 1) {\n    alphabetIndex[alphabet.indexOf(s.charAt(i))]\
    \ -= 2;\n  }\n  let encrypted: string = \"\";\n  for (let i = 0; i < s.length;\
    \ i += 1) {\n    encrypted += alphabet[alphabetIndex[alphabet.indexOf(s.charAt(i))]];\n\
    \  }\n  return encrypted;\n}\n", "  let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n  let rotatedAlphabet = alphabet.split('').reverse().join('');\n  let newS\
    \ = '';\n  for(let i = 0; i < s.length; i++) {\n    let c = s.charAt(i);\n   \
    \ if(c != alphabet[0]) newS += rotatedAlphabet.charAt(alphabet.indexOf(c) + 1);\n\
    \    else newS += rotatedAlphabet.charAt(alphabet.indexOf(c) - 1);\n  }\n  return\
    \ newS;\n}\n", "\tlet alphabet: string = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n\tlet\
    \ rotate: string = \"GHIJKLMNOPQRSTUVWXYZABCDEF\";\n\n\tlet letters = alphabet.split(\"\
    \");\n\n\tlet encrypted: string = \"\";\n\tfor (var i = 0; i < s.length; i++)\
    \ {\n\t\tencrypted += letters[alphabet.indexOf(s[i])];\n\t\tencrypted += letters[alphabet.indexOf(s[s.length\
    \ - 1 - i])];\n\t}\n\n\treturn encrypted;\n}\n", "\tconst alphabet: string = \"\
    ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n\t\tlet alphaIndex = 0\n\t\tlet alphaIndexTwo =\
    \ alphabet.charCodeAt(alphaIndex) * 2\n\tlet newString = \"\"\n\n\tfor (let i\
    \ = 0; i < s.length; i++) {\n\t\tlet charIndex = alphabet.indexOf(s.charAt(i))\n\
    \t\tlet alphaChar = alphabet.charAt(alphaIndex)\n\n\t\tif (charIndex > alphaIndexTwo)\
    \ {\n\t\t\talphaIndex = (alphaIndex + 1) % (alphabet.charCodeAt(alphaIndex + 1))\n\
    \t\t\talphaIndexTwo = alphabet.charCodeAt(alphaIndex) * 2\n\t\t\tcharIndex = alphabet.indexOf(s.charAt(i))\n\
    \t\t\talphaChar = alphabet.charAt(alphaIndex)\n\t\t}\n\t\tnewString += alphaChar\n\
    \t\tnewString += alphabet.charAt(charIndex)\n\t\talphaIndexTwo = alphabet.charCodeAt(alphaIndex)\
    \ * 2\n\t}\n\treturn newString\n}\n", "    let alphabet = alphabet.map((char:\
    \ string) => char.charCodeAt(0) - 65);\n    let result: string = \"\";\n    for\
    \ (let i = 0; i < s.length; i++) {\n        let rotation = alphabet.findIndex((char:\
    \ string) => char.charCodeAt(0) === alphabet.findIndex((char: string) => char.charCodeAt(0)\
    \ === s.charCodeAt(i).charCodeAt(0)));\n        result += alphabet.splice(rotation,\
    \ 1)[0];\n    }\n    return result;\n}\n", "  s = s.replace(/([a-z])(w)/g, function\
    \ (letter, w) {\n    var idx = alphabet.indexOf(w);\n    idx = idx % alphabet.size();\n\
    \    return alphabet.at(idx += 2);\n  });\n  return s;\n}\n</code>\n<|/ a tags=javascript,algorithm,cryptography\
    \ |>\n<| c |>\nThis is a great solution, thanks. I'm still trying to figure out\
    \ how to apply this to the original question (with the added constraints of using\
    \ only Javascript).\n<|/ c |>\n<| c |>\nUpdated to add JS restrictions.\n<|/ c\
    \ |>\n<| a tags=javascript,algorithm,cryptography dscore=2 |>\nI believe this\
    \ is the most efficient way in terms of memory usage.\n\n<code>\nconst alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\";\n\nconst crypt = (s) => {\n  const len = s.length;\n\
    \  const strArr = s.split(\"\");\n  let newArr = [];\n  \n  while (strArr.length)\
    \ {\n    let len = strArr.length;\n    let idx = 0;\n    const newLetter = alphabet[alphabet.indexOf(strArr[0])\
    \ + 1];\n    for (let i = len - 1; i >= 0; i -= 1) {\n      strArr[idx] = alphabet[alphabet.indexOf(strArr[i])\
    \ - 1];\n      idx += 1;\n    }\n    strArr.splice(0, 1);\n    strArr.push(newLetter);\n\
    \    newArr = newArr.concat(strArr);\n  }\n  return newArr.join(\"\");\n};\n\n\
    console.log(crypt(\"abcdef\"));\nconsole.log(crypt(\"abdef\"));\nconsole.log(crypt(\"\
    abcdefg\"));\nconsole.log(crypt(\"abcdefgh\"));\nconsole.log(crypt(\"abcdefghi\"\
    ));\nconsole.log(crypt(\"abcdefghij\"));\nconsole.log(crypt(\"abcdefghijk\"));\n\
    console.log(crypt(\"abcdefghijkl\"));\nconsole.log(crypt(\"abcdefghijklm\"));\n\
    console.log(crypt(\"abcdefghijklmn\"));\nconsole.log(crypt(\"abcdefghijklmno\"\
    ));\nconsole.log(crypt(\"abcdefghijklmnop\"));\nconsole.log(crypt(\"abcdefghijklmnopq\"\
    ));\nconsole.log(crypt(\"abcdefghijklmnopqrst\"));\nconsole.log(crypt(\"abcdefghijklmnopqrstu\"\
    ));\nconsole.log(crypt(\"abcdefghijklmnopqrstuv\"));\nconsole.log(crypt(\"abcdefghijklmnopqrstuvw\"\
    ));\nconsole.log(crypt(\"abcdefghijklmnopqrstuvwx", "  var alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n  var alphabetLength = alphabet.length;\n  var rotatedAlphabet = rotate(alphabet);\n\
    \  var rotatedAlphabetLength = rotatedAlphabet.length;\n  var newEncryptedString\
    \ = createNewString(s);\n  for (var i = 0; i < s.length; ++i) {\n    var currentChar\
    \ = s.charAt(i);\n    var index = alphabet.indexOf(currentChar);\n    var newIndex\
    \ =\n      (index + alphabetLength + rotatedAlphabetLength) % alphabetLength;\n\
    \    newEncryptedString = insert(newEncryptedString, newIndex, currentChar);\n\
    \  }\n  return newEncryptedString;\n}\n", "\tvar alphabet = rotateAlphabet();\n\
    \tvar encrypted = \"\";\n\n\tfor (var i = 0; i < s.length; i++) {\n\t\tvar index\
    \ = alphabet.indexOf(s[i]);\n\t\tencrypted += alphabet.substring(index, index\
    \ + 2);\n\t}\n\treturn encrypted;\n}\n", "  const alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n  let cipher = \"\";\n  for (let i = 0; i < alphabet.length; i++) {\n    cipher\
    \ += alphabet.charAt(alphabet.length - i);\n    const index = alphabet.indexOf(s.charAt(i));\n\
    \    const shift = index % alphabet.length + 2;\n    cipher += alphabet.charAt(alphabet.length\
    \ - shift);\n  }\n  return cipher;\n}\n", "    var encrypted: string;\n    var\
    \ shift: number;\n\n    for (var i = 0; i < s.length; i += 1) {\n        shift\
    \ = alphabet.indexOf(s.charAt(i));\n        encrypted += alphabet[(shift+2) %\
    \ alphabet.length];\n    }\n\n    return encrypted;\n}", "    let str = \"\";\n\
    \    for (let i = 0; i < s.length; i++) {\n        str += alphabet.charAt(alphabet.indexOf(s.charAt(i))\
    \ + 2);\n    }\n    return str;\n}\n", "  \n  s = s.toUpperCase();\n  let result\
    \ = \"\";\n\n  for (let i = 0; i < s.length; i++) {\n\n    let index = alphabet.indexOf(s[i])\
    \ - 2; // subtract 2 so that it wraps around and we get the correct index\n  \
    \  let rotateIndex = index + 2; \n\n    result += alphabet[rotateIndex];\n\n \
    \ }\n\n  return result;\n}\n", "\tlet alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n\tlet output = '';\n\tlet len = s.length; // Get the length of string to be\
    \ encrypted\n\tlet idx = 0;\n\tlet temp;\n\twhile(idx < len) {\n\t\ttemp = alphabet.indexOf(s.charAt(idx))\n\
    \t\tidx = idx + 2;\n\t\toutput += alphabet[temp];\n\t}\n\treturn output;\n}\n",
  "  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    const c = s.charAt(i);\n\
    \    result += alphabet.indexOf(c) + 2;\n  }\n  return result;\n}\n", "    return\
    \ alphabet[encrypt(s.split('').map(c => alphabet.indexOf(c)).join(''))];\n}\n",
  "    var newString = \"\";\n    for (var i = 0; i < s.length; i+=2) {\n        var\
    \ letter = s.charAt(i);\n        newString += letter + letter;\n    }\n    return\
    \ newString;\n}\n", "  // TODO: Implement this\n  return \"\"\n}\n", "    let\
    \ letters = rotateAlphabet(s);\n    let encrypted = '';\n    \n    for(let i =\
    \ 0; i < letters.length; i++) {\n        encrypted += letters[i];\n    }\n   \
    \ \n    return encrypted;\n}\n", "  let alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \  let newLetter = alphabet.shiftRight(2)\n  return newLetter + alphabet.shiftLeft(s.length-newLetter.length)\
    \ + s\n}\n", "    var alphabet: string = \"abcdefghijklmnopqrstuvwxyz\";\n   \
    \ var newString: string = \"\";\n\n    for (var i = 0; i < s.length; i++) {\n\
    \        newString += alphabet[alphabet.indexOf(s.charAt(i)) % alphabet.length]\n\
    \    }\n    return newString;\n}", "  let str = \"\";\n  for (let letter of s)\
    \ {\n    str = str + alphabet.indexOf(letter) + 2;\n  }\n  return str;\n}\n",
  "    let alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    let len = alphabet.length;\n\
    \    let rotIndex = 0;\n\n    for (let i = 0; i < s.length; i++) {\n        rotIndex\
    \ += alphabet.indexOf(s[i]);\n        rotIndex = rotIndex % (len * 2);\n     \
    \   alphabet = alphabet.substring(0, rotIndex) + alphabet.substring(rotIndex +\
    \ 1, rotIndex + len) + alphabet.substring(rotIndex + len);\n    }\n\n    return\
    \ alphabet;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nthank you so much for your\
    \ helpful answer! I edited my question to include the full question I have.\n\
    <|/ c |>\n<| c |>\nThat is way too much work for so few characters. Just use a\
    \ single variable for the shift and rotate the string accordingly. Or try it with\
    \ the solution from my answer. Also I edited my answer to include the missing\
    \ part.\n<|/ c |>\n<| c |>\nI've updated the question, could you take a look if\
    \ possible please?\n<|/ c |>\n<| c |>\nI've updated the answer to include the\
    \ missing part. Does it work for you?\n<|/ c |>\n<| c |>\nNo I still get the same\
    \ output \"abcdefghijklmnopqrstuvwxyz\", what do you think I may be doing wrong\
    \ here?\n<|/ c |>\n<| a |>\nSince you mention C/C++, here's a C++ implementation\
    \ using bitwise operators:\n<code>\nchar alphabet[] = { 'a', 'b', 'c', 'd', 'e',\
    \ 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u',\
    \ 'v', 'w', 'x', 'y', 'z' };\nconst char shifts[] = { 2, 3, 4, 7, 6, 0, 8, 1,\
    \ 9, 5, 10, 3, 11 };\nchar encrypt(std::string const &input)\n{\n    int shift\
    \ = 0;\n    std::string output;\n    std::transform(\n        input.begin(), input.end(),\
    \ std::back_inserter(output),\n        [&shift](char c)\n        {\n         \
    \   output += alphabet[shift & 63];\n            shift >>= 2;\n            return\
    \ alphabet[c & 63];\n        }\n    );\n    return output;\n}\n</code>\nLive Demo\n\
    <|/ a dscore=0 tags=algorithm,c++,c,encryption,python |>\n<| c |>\nThank you so\
    \ much for helping me out with this! I'll try it out now and see if I can make\
    \ it work!\n<|/ c |>\n<| a dscore=0 |>\nThis is not a direct answer to the question,\
    \ but I thought I'd offer a ", "\tconst alphabet = rotate(alphabet);\n\tlet encrypted:\
    \ Array<string> = [];\n\tlet i = 0;\n\twhile (i < s.length) {\n\t\tlet l = alphabet.indexOf(s[i]);\n\
    \t\tif (l >= 0) {\n\t\t\tlet j: number = l - alphabet.indexOf(\"a\");\n\t\t\t\
    if (j >= 0) {\n\t\t\t\tj = j + 2;\n\t\t\t\tj = (j + Math.floor(j / 2)) % alphabet.length;\n\
    \t\t\t\tlet k = alphabet.indexOf(s[j]);\n\t\t\t\tif (k >= 0) {\n\t\t\t\t\tlet\
    \ t: string = alphabet[k];\n\t\t\t\t\tencrypted.push(t);\n\t\t\t\t\ti++;\n\t\t\
    \t\t} else {\n\t\t\t\t\tthrow \"bad encryption\";\n\t\t\t\t}\n\t\t\t} else {\n\
    \t\t\t\tthrow \"bad encryption\";\n\t\t\t}\n\t\t} else {\n\t\t\tthrow \"bad encryption\"\
    ;\n\t\t}\n\t}\n\treturn encrypted.join(\"\");\n}\n", "\tlet alphabet: string =\
    \ \"abcdefghijklmnopqrstuvwxyz\";\n\treturn s.split('')\n\t\t.reduce((accumulator,\
    \ currentValue) => accumulator + alphabet.charAt(alphabet.indexOf(currentValue)\
    \ - alphabet.split('').reverse().indexOf(\"a\") + 2), \"\");\n}", "    return\
    \ encrypt(s, alphabet);\n}\n", "    \n    for(let i = 0; i < s.length; i++) {\n\
    \        // Rotate each letter by two to the right and add two to the left\n \
    \       let char = alphabet.charCodeAt(i) + 2\n        char %= alphabet.length\n\
    \        char += 1\n        let index = char - alphabet.length\n        let char\
    \ = alphabet.charCodeAt(index)\n        // Add the shifted letter to the encrypted\
    \ string\n        s += char\n    }\n    return s\n}\n", "  const alphabet = rotate(\"\
    abcdefghijklmnopqrstuvwxyz\", 2);\n  return s.split(\"\").reduce((acc, v) => {\n\
    \    return acc + alphabet.indexOf(v);\n  }, \"\");\n}\n", "    var l = s.length;\n\
    \    if (l % 2 === 0) {\n        return s.substring(0, l / 2)\n    }\n    var\
    \ result: string = \"\";\n    for (var i = 0; i < l / 2; i++) {\n        result\
    \ += alphabet.charAt(alphabet.indexOf(s.charAt(i)) + 2)\n    }\n    return result\n\
    }", "  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    result +=\
    \ alphabet.charAt(alphabet.indexOf(s.charAt(i)) + 2);\n    result += alphabet.charAt(alphabet.indexOf(s.charAt(i))\
    \ - 2);\n  }\n  return result;\n}\n", "    let alphabet: string[] = ['a', 'b',\
    \ 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r',\
    \ 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'];\n    let cipherText: string = \"\"\
    ;\n    \n    // Rotate through the alphabet two times and then shift down by two\
    \ to\n    // the next letter on the alphabet\n    for (let i = 0; i < alphabet.length;\
    \ i++) {\n        let letter: string = alphabet[alphabet.indexOf(alphabet[i])\
    \ + 2];\n        cipherText += alphabet.indexOf(letter) + 2;\n    }\n    \n  \
    \  // Append the encrypted letter to the original string\n    cipherText += s.charAt(s.length\
    \ - 1);\n\n    return cipherText;\n}\n", "    var encrypted: string = \"\";\n\
    \    \n    for (var i = 0; i < s.length; i++) {\n        var ch = s.charAt(i)\
    \ - 2;\n        var multiplier = 1;\n\n        while (((ch >= \"a\") & (ch <=\
    \ \"z\")) || ((ch >= \"A\") & (ch <= \"Z\"))) {\n            encrypted += ((ch\
    \ + multiplier) + 2);\n            multiplier += 2;\n        }\n        \n   \
    \     encrypted += ((ch - 1) + multiplier);\n        multiplier = 1;\n       \
    \ \n        while (((ch >= \"a\") & (ch <= \"z\")) || ((ch >= \"A\") & (ch <=\
    \ \"Z\"))) {\n            encrypted += ((ch + multiplier) + 2);\n            multiplier\
    \ += 2;\n        }\n    }\n    \n    return encrypted;\n}\n", "  \n    let alphabet:\
    \ string = \"abcdefghijklmnopqrstuvwxyz\";\n    let numOfChars = alphabet.length;\n\
    \    let newString = \"\";\n    \n    for (let i = 0; i < s.length; i++) {\n \
    \     \n        \n        // Get the value of the alphabet at position i - 2 multiplied\
    \ by \n        // two, and subtract it from the value of alphabet at position\
    \ i.\n        let newNumOfChars = Math.floor(alphabet[i - 2]) * 2 - alphabet[i];\n\
    \        \n        // Check if new character added is a letter\n        if (newNumOfChars\
    \ > numOfChars) {\n          // If new character added is a letter, decrement\
    \ numOfChars.\n          newNumOfChars = newNumOfChars - numOfChars;\n       \
    \   // If new character added is a letter, append a blank.\n          newString\
    \ += \" \";\n        }\n        // If new character added is number, append it\
    \ to newString.\n        else {\n          newString += alphabet[newNumOfChars];\n\
    \        }\n        \n      }\n    \n    return newString;\n    \n}\n", "    let\
    \ arr1 = alphabets.map(x => x.map(y => y.charCodeAt(0)));\n    let arr2 = alphabets.map(x\
    \ => x.map(y => y.charCodeAt(0) - 2));\n    return s.split('').map(x => arr1[x].map(y\
    \ => arr2[y][0])[x]).join('');\n}\n", "    return rotate(s)\n}\n", "  var sArray:\
    \ Array<string> = [];\n  var n = s.length; // Create an array of numbers between\
    \ zero and twenty.\n  // Each number is two character long.\n  for (var i = 0;\
    \ i < n; i++) {\n    sArray.push(s.charCodeAt(i) - 2);\n  }\n\n  return encrypt(sArray);\n\
    }\n", "  let alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n  let rotatedAlphabet\
    \ = alphabet[alphabet.indexOf(alphabet) + 2];\n  let encrypted = \"\";\n  for\
    \ (let i = 0; i < s.length; i++) {\n    encrypted += alphabet.indexOf(s[i]) *\
    \ Math.pow(alphabet.length, rotatedAlphabet.indexOf(s[i]))\n  }\n  return encrypted\n\
    }\n", "    let newString = \"\";\n    for (let i = 0; i < s.length; i++) {\n \
    \       newString += alphabet.indexOf((s.charAt(i) + alphabet.indexOf((s.charAt(i)\
    \ + alphabet.indexOf((s.charAt(i) + alphabet.indexOf((s.charAt(i) + alphabet.indexOf((s.charAt(i)\
    \ + alphabet.indexOf((s.charAt(i) + alphabet.indexOf((s.charAt(i) + alphabet.indexOf((s.charAt(i)\
    \ + alphabet.indexOf((s.charAt(i) + alphabet.indexOf((s.charAt(i) + alphabet.indexOf((s.charAt(i)\
    \ + alphabet.indexOf((s.charAt(i) + alphabet.indexOf((s.charAt(i) + alphabet.indexOf((s.charAt(i)\
    \ + alphabet.indexOf((s.charAt(i) + alphabet.indexOf((s.charAt(i) + alphabet.indexOf((s.charAt(i)\
    \ + alphabet.indexOf((s.charAt(i) + alphabet.indexOf((s.charAt(i) + alphabet.indexOf((s.charAt(i)\
    \ + alphabet.indexOf((s.charAt(i) + alphabet.indexOf((s.charAt(i) + alphabet.indexOf((s.charAt(i)\
    \ + alphabet.indexOf((s.charAt(i) + alphabet.indexOf((s.charAt(i) + alphabet.indexOf((s.charAt(i)\
    \ + alphabet.indexOf((s.charAt(i) + alphabet.indexOf((s.charAt(i) + alphabet.indexOf((s.charAt(i)\
    \ + alphabet.indexOf((s.charAt(i) + alphabet.indexOf((s.charAt(i) + alphabet.indexOf((s.charAt(i)\
    \ + alphabet.indexOf((s.charAt(i) + alphabet.indexOf((s.charAt(i) + alphabet.indexOf((s.charAt(i)\
    \ + alphabet.indexOf((s.charAt(i) + alphabet.indexOf((s.charAt(i) + alphabet.indexOf((s.charAt(i)\
    \ + alphabet.indexOf((s.charAt(i) + alphabet.indexOf((s.charAt(i) + alphabet.indexOf((s.charAt(i)\
    \ + alphabet.indexOf((s.charAt(i) + alphabet.indexOf((s.charAt(i) + alphabet.indexOf((s.charAt(i)\
    \ + alphabet.indexOf((s.charAt(i) + alphabet.indexOf((s.charAt(i) + alphabet.indexOf((s.charAt(i)\
    \ + alphabet.indexOf((s.charAt(i) + alphabet.indexOf((s.charAt(i) + alphabet.indexOf((s.charAt(i)\
    \ + alphabet.indexOf((s.charAt(i) + alphabet.indexOf((s.charAt(i) + alphabet.indexOf((s.charAt(i)\
    \ + alphabet.indexOf((s.charAt(i) + alphabet.indexOf((s.charAt(i) + alphabet.indexOf((s.charAt(i)\
    \ + alphabet.indexOf((s.charAt(i) + alphabet.indexOf((s.charAt(i) + alphabet.indexOf((s.charAt(i)\
    \ + alphabet.indexOf((s.charAt(i) + alphabet.indexOf((s.charAt(i) + alphabet.indexOf((s.charAt(i)\
    \ + alphabet.indexOf", "    \n    // Create a string where each letter is repeated\
    \ twice except for the first \n    // letter. This means we encrypt the string\
    \ in 3 steps:\n    // 1. Rotate all the letters by two.\n    // 2. Rotate the\
    \ first letter (the one in the middle).\n    // 3. Concatenate all the letters\
    \ together.\n    let encr_str = String.fromCharCode(s.charCodeAt(0) - 1);\n  \
    \  for (let i = 1; i < s.length; i++) {\n        let c = s.charCodeAt(i);\n  \
    \      encr_str += String.fromCharCode(c + c + c + c + c + c + c + c + c + c +\
    \ c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c +\
    \ c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c +\
    \ c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c +\
    \ c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c +\
    \ c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c +\
    \ c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c +\
    \ c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c +\
    \ c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c +\
    \ c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c +\
    \ c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c +\
    \ c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c +\
    \ c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c +\
    \ c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c +\
    \ c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c +\
    \ c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c +\
    \ c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c +\
    \ c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c +\
    \ c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c +\
    \ c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c +\
    \ c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c +\
    \ c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c + c +\
    \ c + c + c + ", "  // Rotate the alphabet by 2 multiplied to 2 places.\n  const\
    \ alphabet: string = \"abcdefghijklmnopqrstuvwxyz\"\n  const alphabetIndex: number[]\
    \ = alphabet.split(\"\")\n    .map((letter: string) => letter.charCodeAt(0) -\
    \ 64)\n    .map(rotateTwoPlaces(2))\n  const alphabetIndexEncrypted: string =\
    \ alphabetIndex\n    .map((index: number) => alphabet[index % alphabetIndex.length])\n\
    \    .join(\"\")\n\n  return s + alphabetIndexEncrypted\n}\n</code>\n<|/ a tags=algorithm,javascript,string,cryptography\
    \ |>\n<| c |>\nThis is definitely the most readable and understandable way to\
    \ do this but doesn't work as I want. First problem was that you rotated the alphabet\
    \ by two (i.e. shifted every letter down in ASCII instead of up like you need)\
    \ and the second was that my alphabet was a string so I just needed to add quotes\
    \ around it: \"abcdefghijklmnopqrstuvwxyz\".\n<|/ c |>\n<| c |>\nI fixed the issue\
    \ for the rotation, thanks!\n<|/ c |>\n<| a |>\nI would use the following simple\
    \ logic to rotate the string \n<code>", "  let alpha = \"abcdefghijklmnopqrstuvwxyz\"\
    .split(\"\");\n  let key = alpha[alpha.length - 2] + alpha[alpha.length - 1];\n\
    \  return s.split(\"\").map(l => {\n    let o = alphabet.indexOf(l);\n    return\
    \ alphabet[((o - alpha.length - 2) % alpha.length) + alpha.length];\n  }).join(\"\
    \");\n}\n", "  let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n  let rotation =\
    \ alphabet.slice(0, alphabet.length - 2) // \"abcdefghijklmnopqrstuvwxyz\"\n \
    \ let chars = s.split('') // [\"h\", \"a\", \"s\", \"d\", \"f\", \"g\", \"j\"\
    , \"k\", \"l\", \"n\", \"q\", \"r\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"\
    ]\n  let result = \"\"\n  for (let c of chars) {\n    result += rotation.indexOf(c)\
    \ + 2 // \"ewhjklnop\"\n  }\n  return result\n}\n", "\tlet alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    ;\n\tlet key = alphabet.split(\"\");\n\t\n\t// Step 1: Rotate each letter by 2\
    \ positions in the alphabet\n\tlet rotatedAlphabet = alphabet.split(\"\").map((e,\
    \ i) => rotate(e, key[i]));\n\t\n\t// Step 2: Concatenate all the rotated letters\
    \ into a single string\n\treturn rotatedAlphabet.join(\"\");\n}\n", "  return\
    \ encrypt(s.split(''));\n}", "    let alphabet: string = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    ;\n    let alphabetLength = alphabet.length;\n    let encryptedString: string\
    \ = \"\";\n    for (let i = 0; i < s.length; i++) {\n        let char = s.charAt(i);\n\
    \        let index = alphabet.indexOf(char);\n        index += 2;\n        if\
    \ (index >= alphabetLength) {\n            index = 0;\n        }\n        encryptedString\
    \ += alphabet.charAt(index);\n    }\n    return encryptedString;\n}\n", "    //\
    \ TODO: Implement\n}\n", "  let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n  let\
    \ rotation = 3\n  let rotatedLetter = alphabet.substr(Math.floor(alphabet.length\
    \ / 2))\n  let encrypted = ''\n\n  while (s.length > 0) {\n    let c = s[0]\n\
    \    s = s.substring(1) + c\n    if (c == \"z\") {\n      c = \"a\"\n    }\n\n\
    \    encrypted += alphabet.substr(rotation.toString().charAt(alphabet.indexOf(c)\
    \ + rotation), 1)\n    rotation += 2\n  }\n\n  return encrypted + rotatedLetter\n\
    }\n", "  if (s === '') return ''\n  const map1 = new Map()\n  for (let i = 'a',\
    \ len = s.length; i < len; i += 2) {\n    map1.set(s[i], i)\n  }\n  const map2\
    \ = new Map()\n  for (let i = 'z', len = s.length; i < len; i += 2) {\n    map2.set(s[i],\
    \ i)\n  }\n  const map3 = new Map()\n  for (let i = 'a', len = s.length; i < len;\
    \ i += 2) {\n    map3.set(s[i], i + 2)\n  }\n  const map4 = new Map()\n  for (let\
    \ i = 'z', len = s.length; i < len; i += 2) {\n    map4.set(s[i], i + 2)\n  }\n\
    \  const result = new Map()\n  for (const e of s) {\n    const key = map1.get(e)\n\
    \    if (key !== undefined) {\n      result.set(key, map2.get(key))\n    }\n \
    \   const key2 = map2.get(e)\n    if (key2 !== undefined) {\n      result.set(key2,\
    \ map3.get(key2))\n    }\n    const key3 = map3.get(e)\n    if (key3 !== undefined)\
    \ {\n      result.set(key3, map4.get(key3))\n    }\n    const key4 = map4.get(e)\n\
    \    if (key4 !== undefined) {\n      result.set(key4, e)\n    }\n  }\n  return\
    \ [...result].reduce((acc, val) => acc + val, \"\")\n}\n", "\tconst alphabet =\
    \ [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\"\
    , \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\"\
    , \"w\", \"x\", \"y\", \"z\"];\n\tlet result: string = \"\";\n\tfor (let i = 0;\
    \ i < s.length; i++) {\n\t\tresult += alphabet.indexOf(s.charAt(i)) + (alphabet.indexOf(s.charAt(i))\
    \ + 2) % alphabet.length;\n\t}\n\treturn result;\n}\n", "\tlet alphabet = [\"\
    a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"\
    w\", \"x\", \"y\", \"z\"];\n\tlet newString = \"\";\n\tfor (let i = 0; i < s.length;\
    \ i++) {\n\t\tlet c = s.charCodeAt(i);\n\t\tlet idx = alphabet.indexOf(c);\n\t\
    \tlet newIdx = (idx + 3) % alphabet.length;\n\t\tlet newLetter = alphabet[newIdx];\n\
    \t\tnewString += newLetter;\n\t}\n\treturn newString;\n}\n", "  s = s.replace(/[^a-z]/g,\
    \ \"\")\n  const result = \"\"\n  for (let i = 0; i < s.length; i += 1) {\n  \
    \  result += alphabet.charAt(alphabet.indexOf(s.charAt(i)) + 2)\n  }\n  return\
    \ result\n}\n", "    let alphabet: string = \"abcdefghijklmnopqrstuvwxyz\";\n\
    \    let rotatedAlphabet: string = alphabet.split(\"\").map(a => alphabet.indexOf(a)\
    \ + 2).join(\"\");\n    let rotated: Array<string> = s.split(\"\").map(a => rotatedAlphabet.indexOf(a)\
    \ + 2).join(\"\");\n    let decrypted: Array<string> = rotated.split(\"\").map(a\
    \ => alphabet.indexOf(a) + 2).join(\"\");\n    return decrypted;\n}\n</code>\n\
    <|/ a tags=encryption,javascript,algorithm dscore=0 |>\n<| c |>\nOk thank you\
    \ and yes this is similar to what I already have.\n<|/ c |>\n<| a tags=encryption,javascript,algorithm\
    \ dscore=0 |>\nMy answer is a bit simpler and also does not rely on strings:\n\
    <code>", "  const alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n  const rotated\
    \ = alphabet.split(\"\");\n  rotated[0] = rotated[0].toLowerCase();\n  rotated[26]\
    \ = rotated[26].toUpperCase();\n  let len = s.length,\n    index = 0, \n    len\
    \ = s.length,\n    encrypted = \"\";\n  for (let i = 0; i != len; ++i, index +=\
    \ 2) {\n    encrypted += rotated[s.charCodeAt(index) % alphabet.length];\n  }\n\
    \  return encrypted;\n}", "  return s.split(\"\").map((letter, index) => letter\
    \ + shift(index, 2)).join(\"\");\n}\n", "  let alpha = \"abcdefghijklmnopqrstuvwxyz\"\
    .split(\"\");\n  let alpha2 = \"nopqrstuvwxyzabcdefghijklm\".split(\"\");\n\n\
    \  s = s.split(\"\");\n  let len = s.length;\n\n  for (let i = 0; i <= len; i++)\
    \ {\n    let j = i % alpha.length;\n    let temp = alpha2[j];\n    alpha2[j] =\
    \ alpha[j];\n    alpha[j] = temp;\n  }\n\n  let cipher = \"\";\n  for (let i =\
    \ 0; i < s.length; i++) {\n    cipher += alpha[s[i] - 65];\n  }\n\n  return cipher;\n\
    }\n", "    var alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n    var letterIndex\
    \ = 0;\n    \n    var result = \"\";\n    \n    for (var i = 0; i < s.length;\
    \ i++) {\n        var currentChar = s[i];\n        var nextChar = alphabet[letterIndex];\n\
    \        var nextLetterIndex = letterIndex * 2 + 1;\n        var encryptedNextChar\
    \ = nextChar + alphabet.charAt(nextLetterIndex);\n        \n        result = result\
    \ + encryptedNextChar;\n        \n        letterIndex++;\n    }\n    return result;\n\
    }\n", "  if (s.length !== 2) {\n    throw \"Not two characters: \" + s;\n  }\n\
    \  return alphabet[(alphabet.indexOf(s)) - 2];\n}\n", "    let alphabet = rotateAlphabet(alphabet)\n\
    \    let key: string = rotateKey(key)\n    \n    let result = \"\";\n\n    for\
    \ (let i = 0; i < s.length; i++){\n        let val = alphabet.indexOf(s[i])\n\
    \        let keyVal = key.indexOf(val)\n\n        result += keyVal * val\n   \
    \ }\n\n    return result\n}\n", "    let key = rotation(s);\n    let rotatedLetters\
    \ = rotated_letters(key);\n    let encrypted = \"\";\n    \n    for (let i = 0;\
    \ i < s.length; i++) {\n        let c = s[i];\n        \n        if (c === c.toUpperCase())\
    \ {\n            encrypted += rotatedLetters[c.toLowerCase()];\n        } else\
    \ {\n            encrypted += rotatedLetters[c.toUpperCase()];\n        }\n  \
    \  }\n\n    return encrypted;\n}\n", "    let a: string[] = s.split(\"\");\n \
    \   a.shift();\n    a.push(\"\");\n    a = rotate(a, 2, \"\");\n    return a.join(\"\
    \");\n}\n", "  s.split(\"\").reverse().map(s => ALPHABETS.indexOf(s)).reverse().join(\"\
    \")\n}\nconsole.log(encrypt(\"gf\"))</code>\n<|/ a |>\n<| c |>\nThank you for\
    \ the answer! I am a beginner at Javascript and would like to ask you how this\
    \ works. I understand most of it, but I don't get this part: s.split(\"\").reverse().map(s\
    \ => ALPHABETS.indexOf(s)).reverse().join(\"\").\n<|/ c |>\n<| c |>\n`map` takes\
    \ every item in the array and applies a function to each item in the array. `map`\
    \ returns an array, and `join` joins the array back together using whatever string\
    \ delimiter you specify, in this case `\"\"`. So it goes through the array in\
    \ reverse order and replaces the values in the array with their position in ALPHABETS,\
    \ using the index of the character in the alphabet, using the `indexOf` function\
    \ from the `ALPHABETS` array.\n<|/ c |>\n<| c |>\nI understand the part with split,\
    \ but what does the map do here? I would really appreciate if you could explain\
    \ it to me\n<|/ c |>\n<| a |>\nThe answer by is great, but I wanted to show you\
    \ another way to do it.\n\n<code>\nconst ALPHABETS: string = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\nconst ROTATIONS = [\"g\", \"f\", \"e\", \"d\", \"c\", \"b\", \"a\", \"m\",\
    \ \"z\"];\n", "    const alphabet = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n\
    \    const alphabet2 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\n\
    \    let encrypted = '';\n    for (let i = 0; i < s.length; i += 1) {\n      \
    \  const char = s.charAt(i);\n        const newChar = alphabet[alphabet.indexOf(char)\
    \ % alphabet.length];\n        encrypted += newChar;\n    }\n    return encrypted;\n\
    }\n", "    return s.replace(/[a-zA-Z]/g, function (letter) {\n        return String.fromCharCode(letter.charCodeAt(0)\
    \ + 2);\n    });\n}", "  var alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n  var\
    \ result: string = \"\";\n  var shifts = alphabet.split(\"\");\n  var length =\
    \ s.length;\n  for (var i = 0; i < length; i++) {\n    result += alphabet[alphabet.indexOf(s.charAt(i))\
    \ + 2];\n  }\n\n  for (var i = 0; i < length; i++) {\n    result += alphabet[alphabet.indexOf(s.charAt(i))\
    \ - 2];\n  }\n\n  var length = s.length;\n  for (var i = 0; i < length; i++) {\n\
    \    var letterIndex = alphabet.indexOf(s.charAt(i));\n    var shiftIndex = (letterIndex\
    \ * 2) - 2;\n    shifts[shiftIndex] = shifts[shiftIndex] + shifts[shiftIndex +\
    \ 1];\n    result += shifts[shiftIndex];\n  }\n\n  return result;\n}\n", "  let\
    \ alphabet = \"abcdefghijklmnopqrstuvwxyz\".split(\"\");\n  let chars = [...s];\n\
    \  let numShift = alphabet.length - 2;\n  let charsRotated = [];\n\n  for (let\
    \ i = 0; i < chars.length; i++) {\n    let char = chars[i];\n    let position\
    \ = alphabet.indexOf(char);\n    charsRotated.push(alphabet[position + numShift]);\n\
    \  }\n\n  return charsRotated.join(\"\");\n}\n</code>\n<|/ a tags=encryption,typescript,javascript,algorithm\
    \ dscore=0 |>\n<| a |>\nIf i got you right you wan't to rotate string by 26 (or\
    \ 27 or 28) characters. Lets say you have such an input string \"abc\" and you\
    \ want to encrypt it.\nLets start by defining some rotations\n<code>\n const rotateRight\
    \ = (s, i) => s.slice(0, i) + s.slice(i+1, s.length);\n const rotateLeft = (s,\
    \ i) => s.slice(0, i) + s.slice(i, i+1);\n const rotateUp = (s, i) => rotateLeft(s,\
    \ i) + s.slice(i+1, i+2);\n const rotateDown = (s, i) => rotateRight(s, i) + s.slice(i,\
    \ i+1);\n</code>\nWe can use them to rotate a string like this\n<code>\n let s\
    \ = \"abc\";\n console.log(rotateRight(s, 'z'));\n console.log(rotateRight(s,\
    \ 'y'));\n console.log(rotateRight(s, 'x'));\n console.log(rotateRight(s, 'a'));\n\
    \ console.log(rotateRight(s, 'b'));\n console.log(rotateRight(s, 'c'));\n</code>\n\
    And this will output something like that\n<code>\n def\n ghi\n ijk\n abc\n def\n\
    \ ghi\n ijk\n</code>\nWe can also create some more rotations on string and make\
    \ them on other strings as well.\n<code>\n const rotateLeft = i => x => x.slice(0,\
    \ i);\n const rotateRight = i => x => x.slice(0, i) + x.slice(i+1, x.length);\n\
    \ const rotateUp = i => x => rotateLeft(i)(x) + x.slice(i+1, i+2);\n const rotateDown\
    \ = i => x => rotateRight(i)(x) + x.slice(i, i+1);\n\n let s = \"abc\";\n console.log(rotateUp(s,\
    \ 'z'));\n console.log(rotateDown(s, 'z'));\n console.log(rotateLeft(1));\n console.log(rotateRight(1));\n\
    \ console.log(rotateLeft(3));\n console.log(rotateRight(3));\n</code>\nAnd this\
    \ will output\n<code>\n f\n g\n a\n b\n ", "  return s.split(\"\").map(char=>{\n\
    \    const n = alphabet.indexOf(char);\n    return n ? rotatate(n, 2, 2) : char;\n\
    \  }).join(\"\");\n}\n", "  let r: string[] = [];\n  for (let i = 0; i < s.length;\
    \ i += 1) {\n    let c = s[i];\n    for (let j = 0; j < alphabet.lenght - 1; j\
    \ += 1) {\n      c = alphabet[j] + c;\n    }\n    r[i] = c;\n  }\n  return r.join('');\n\
    }\n", "\t\n\tvar sArr: string[] = s.split(\"\");\n\tvar alphabet: string = \"\
    abcdefghijklmnopqrstuvwxyz\";\n\tvar alphabetArr = alphabet.split(\"\");\n\t\n\
    \tvar nArr: string[] = sArr.map((char: string, index: number, array: string[]):\
    \ string => {\n\t\treturn array[(index + 1) % array.length];\n\t});\n\t\n\tvar\
    \ sArr1 = nArr.map(function (char: string, index: number, array: string[]): string\
    \ {\n\t\treturn char + alphabetArr[index];\n\t});\n\t\n\treturn sArr1.join(\"\"\
    );\n}\n", "  let alpha: string[] = [];\n  let i: string;\n  for (i = 0; i < 26;\
    \ i++) {\n    alpha.push(String.fromCharCode(65 + i));\n  }\n  alpha.push(String.fromCharCode(97));\n\
    \  alpha.push(String.fromCharCode(97));\n  alpha.push(String.fromCharCode(97));\n\
    \  alpha.push(String.fromCharCode(97));\n\n  let encrypted: string[] = [];\n \
    \ let m = 0;\n  for (let i = 0; i < s.length; i++) {\n    let ch = s.charCodeAt(i);\n\
    \    encrypted.push(alpha[(ch + m) % 26]);\n    m++;\n  }\n  return encrypted.join('');\n\
    }\n", "  let result = ''\n  let letters = ''\n  let letterCount = 0\n  for(let\
    \ i = 0; i < s.length; i++) {\n    letters += s.charAt(i)\n    letterCount++\n\
    \  }\n\n  // Iterate over the letters until we find two distinct letters.\n  //\
    \ Then replace the current letter with the first two letters.\n  for(let i = 0;\
    \ i < s.length - 1; i++) {\n    if(letterCount == 2) {\n      result += letters.charAt(i)\
    \ + letters.charAt(i + 1)\n      letterCount--\n    }\n    letters += s.charAt(i)\n\
    \    letterCount++\n  }\n\n  return result\n}\n", "  let alphabet: string = \"\
    abcdefghijklmnopqrstuvwxyz\"\n  let result: string = Array(26).fill(\"\").map(()\
    \ => \"\")\n  alphabet = alphabet.split(\"\").reverse().join(\"\")\n  for (let\
    \ i = 0; i < s.length; i++) {\n    result[alphabet.indexOf(s[i])] = alphabet.indexOf(s[i])\
    \ + 2\n  }\n  let reverse = result.join(\"\")\n  let index = alphabet.indexOf(reverse)\n\
    \  reverse = alphabet.substring(0, index)\n  for (let i = 0; i < reverse.length;\
    \ i++) {\n    result[i] = reverse.charAt(i)\n  }\n  return result.join(\"\")\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nI am sure you are right, however I still\
    \ am having issues with this code. I am getting an error that says index 0 is\
    \ undefined when i run the code. The issue is with the let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \ and alphabet = alphabet.split(\"\").reverse().join(\"\"). Do you know of anywhere\
    \ that I can read up on this so that I can figure out what I am doing wrong?\n\
    <|/ c |>\n<| c |>\nThe issue is with the ```let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ``` line. I would suggest reading the [MDN documentation on Strings](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String),\
    \ specifically the section on [String methods](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split).\n\
    <|/ c |>\n<| a tags=arrays,javascript,cryptography dscore=0 |>\nI figured out\
    \ a way to get the code to work. Not sure why this worked, but it did.\n<code>",
  "  const alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n  let newString = \"\"\n  \n\
    \  //For each character in the string, check if it is a vowel or not\n  for (let\
    \ char of s) {\n    if (alphabet.indexOf(char) !== -1) {\n      newString += char\n\
    \    }\n  }\n  \n  //Append two vowels to the newString if the first two letters\
    \ of the alphabet are not the final two letters of the alphabet\n  \n  if (alphabet.indexOf(newString[0])\
    \ !== -1) {\n    newString = newString + newString[1]\n  }\n  \n  //Append two\
    \ vowels to the newString if the first letters of the alphabet are not the final\
    \ two letters of the alphabet\n  \n  if (alphabet.indexOf(newString[2]) !== -1)\
    \ {\n    newString = newString + newString[3]\n  }\n  \n  return newString\n}\n",
  "  let alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n  let alphabet2 = \"nopqrstuvwxyzabcdefghijklm\"\
    ;\n  let alphabet3 = \"abcdefghijklmnopqrstuvwxy\";\n  let alphabet4 = \"nopqrstuvwxyzabcdefghijk\"\
    ;\n  let alphabet5 = \"abcdefghijklmnopqrstuvwxy\";\n  let alphabet6 = \"nopqrstuvwxyzabcdefghij\"\
    ;\n  let alphabet7 = \"abcdefghijklmnopqrstuvwxyz\";\n  let alphabet8 = \"nopqrstuvwxyzabcdefghij\"\
    ;\n  let alphabet9 = \"abcdefghijklmnopqrstuvwx\";\n  let alphabet10 = \"nopqrstuvwxyzabcdefghijklm\"\
    ;\n  let alphabet11 = \"abcdefghijklmnopqrstuvwxy\";\n  let alphabet12 = \"nopqrstuvwxyzabcdefghijkl\"\
    ;\n  let alphabet13 = \"abcdefghijklmnopqrstuvwxy\";\n  let alphabet14 = \"nopqrstuvwxyzabcdefghijkl\"\
    ;\n  let alphabet15 = \"abcdefghijklmnopqrstuvwxy\";\n  let alphabet16 = \"nopqrstuvwxyzabcdefghijkl\"\
    ;\n  let alphabet17 = \"abcdefghijklmnopqrstuvwxy\";\n  let alphabet18 = \"nopqrstuvwxyzabcdefghijkl\"\
    ;\n  let alphabet19 = \"abcdefghijklmnopqrstuvwxy\";\n  let alphabet20 = \"nopqrstuvwxyzabcdefghijkl\"\
    ;\n  let alphabet21 = \"abcdefghijklmnopqrstuvwxy\";\n  let alphabet22 = \"nopqrstuvwxyzabcdefghijkl\"\
    ;\n  let alphabet23 = \"abcdefghijklmnopqrstuvwxy\";\n  let alphabet24 = \"nopqrstuvwxyzabcdefghijkl\"\
    ;\n  let alphabet25 = \"abcdefghijklmnopqrstuvwxy\";\n  let alphabet26 = \"nopqrstuvwxyzabcdefghijkl\"\
    ;\n  let alphabet27 = \"abcdefghijklmnopqrstuvwxy\";\n  let alphabet28 = \"nopqrstuvwxyzabcdefghijkl\"\
    ;\n  let alphabet29 = \"abcdefghijklmnopqrstuvwxy\";\n  let alphabet30 = \"nopqrstuvwxyzabcdefghijkl\"\
    ;\n  let alphabet31 = \"abcdefghijklmnopqrstuvwxy\";\n", "\tlet len = s.length;\n\
    \tlet key: string = \"abcdefghijklmnopqrstuvwxyz\";\n\tlet result: string = \"\
    \";\n\tlet c: number = 0;\n\tlet k: number;\n\tlet temp: string;\n\tlet i: number\
    \ = 0;\n\tfor (i = 0; i < len; i += 1) {\n\t\tc = s.charCodeAt(i);\n\t\tk =key.indexOf(c);\n\
    \t\tif (k >= 0) {\n\t\t\tresult += key.charAt(k + 2);\n\t\t}\n\t\telse {\n\t\t\
    \tresult += \"?\";\n\t\t}\n\t}\n\treturn result;\n}", "\tvar res = \"\"\n\tvar\
    \ shift = 0\n\tfor (var i = 0, len = s.length; i < len; i++) {\n\t\tres += String.fromCharCode(s.charCodeAt(i)\
    \ - shift * 2)\n\t\tshift += 2\n\t}\n\treturn res\n}\n", "    let strArr = s.split(\"\
    \");\n    let newStrArr = strArr.map((letter, index) => {\n        return alphabet[alphabet.indexOf(letter)\
    \ + 2];\n    });\n    return newStrArr.join(\"\");\n}\n", "    let alphabet: string[]\
    \ = [];\n    alphabet.push('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k',\
    \ 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z');\n\
    \    alphabet.push('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l',\
    \ 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z');\n   \
    \ alphabet.push('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm',\
    \ 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z');\n    alphabet.push('a',\
    \ 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q',\
    \ 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z');\n    alphabet.push('a', 'b', 'c',\
    \ 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's',\
    \ 't', 'u', 'v', 'w', 'x', 'y', 'z');\n    alphabet.push('a', 'b', 'c', 'd', 'e',\
    \ 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u',\
    \ 'v', 'w', 'x', 'y', 'z');\n    alphabet.push('a', 'b', 'c', 'd', 'e', 'f', 'g',\
    \ 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w',\
    \ 'x', 'y', 'z');\n    alphabet.push('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i',\
    \ 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y',\
    \ 'z');\n    alphabet.push('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k',\
    \ 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z');\n\
    \    alphabet.push('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l',\
    \ 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z');\n   \
    \ alphabet.push('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm',\
    \ 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z');\n    alphabet.push('a',\
    \ 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q',\
    \ 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z');\n    alphabet.push('a', 'b', 'c',\
    \ 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's',\
    \ 't', 'u', 'v', 'w', 'x', 'y', 'z');", "    const alpha = [...ALPHABET].map(l\
    \ => `${l}${l}`);\n    let result = \"\";\n    for (let letter of s) {\n     \
    \   const index = alpha.indexOf(letter);\n        result += alpha[(index % alpha.length)\
    \ + 2];\n    }\n    return result;\n}\n", "    const alphabet: string = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    // Create an array to hold the return value\n    const rotatedText: string[]\
    \ = [];\n\n    // Start by pushing the first letter of the text to the rotatedText\
    \ array\n    rotatedText.push(alphabet[0]);\n    // Now loop the letters starting\
    \ from one behind\n    for (var i = 1; i < s.length; i++) {\n        // Rotate\
    \ the current letter in the alphabet\n        const nextLetter: number = alphabet[i\
    \ - 1];\n        const shiftedLetter: number = alphabet.indexOf(nextLetter);\n\
    \        // Push the rotated letter onto the rotatedText array\n        rotatedText.push(alphabet[shiftedLetter\
    \ + 2]);\n    }\n    return rotatedText.join(\"\");\n}\n", "    let alphabet =\
    \ ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']\n\
    \    let alphabetLength: number = alphabet.length\n    let encryptedStr: string\
    \ = s\n    let encryptedLength: number = encryptedStr.length\n    let newStr:\
    \ string = encryptedStr\n\n    for (let i = 0; i < encryptedLength; i++) {\n \
    \       let firstChar = encryptedStr[i]\n        let secondChar = encryptedStr[i\
    \ + 1]\n        let thirdChar = encryptedStr[i + 2]\n\n        // This handles\
    \ the special case when there are two letters next to eachother\n        if (firstChar\
    \ === secondChar) {\n            newStr = secondChar + thirdChar + firstChar +\
    \ encryptedStr.substring(i + 3)\n            i += 2\n            continue\n  \
    \      }\n\n        // This is a special case in which the letters are not next\
    \ to each other\n        // e.g. 'a' then 'b' then 'c'\n        if (firstChar\
    \ === secondChar || firstChar === thirdChar) {\n            newStr = firstChar\
    \ + encryptedStr[i] + secondChar + thirdChar + encryptedStr.substring(i + 3)\n\
    \            i++\n            continue\n        }\n\n        // This is case when\
    \ letters are next to each other\n        // e.g. 'a' then 'b' then 'c' then 'd'\n\
    \        if (firstChar === secondChar) {\n            newStr = firstChar + encryptedStr[i]\
    \ + secondChar + encryptedStr[i + 1] + thirdChar + encryptedStr.substring(i +\
    \ 2)\n            i += 3\n            continue\n        }\n\n        // This is\
    \ case when letters are next to each other\n        // e.g. 'a' then 'b' then\
    \ 'c' then 'd' then 'e'\n        if (firstChar === thirdChar) {\n            newStr\
    \ = firstChar + encryptedStr[i] + secondChar + thirdChar + encryptedStr[i + 1]\
    \ + encryptedStr[i + 2] + encryptedStr.substring(i + 3)\n            i += 4\n\
    \            continue\n        }\n\n        // This is a special case where letters\
    \ are next to each other\n        // e.g. 'a' then 'b' then 'c' then 'd' then\
    \ 'e' then 'f'\n        if (firstChar === secondChar && firstChar === thirdChar)\
    \ {\n            newStr = firstChar + encryptedStr[i] + secondChar + thirdChar\
    \ + encryptedStr[i + 1] + encryptedStr[i + 2] + encryptedStr[i + 3] + encryptedStr.substring(i\
    \ + 4)\n            i += 4\n            continue\n        }\n\n        // This\
    \ handles the special ", "\treturn s.split(\"\").map(function (a) {\n\t\tvar l\
    \ = a.charCodeAt(0) - 65;\n\t\treturn String.fromCharCode((l+2) % 26 + 65) + String.fromCharCode((l+2)\
    \ % 26 + 65) + \n\t\t\tString.fromCharCode((l+1) % 26 + 65) + String.fromCharCode((l+1)\
    \ % 26 + 65) + \n\t\t\tString.fromCharCode((l+2) % 26 + 65) + String.fromCharCode((l+2)\
    \ % 26 + 65);\n\t}).join(\"\");\n}\n", "\tvar alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n\tvar index = 0; //Index of the next letter to shift to.\n\tvar rotation = alphabet.indexOf(char);\
    \ //Index of the current alphabet letter to rotate from.\n\tvar newString = \"\
    \"; //The encrypted string to be returned.\n\tfor (var i = 0; i < s.length; i++)\
    \ {\n\t\tvar nextIndex = alphabet.indexOf(s.charAt(i)); //Find index of the next\
    \ alphabet letter after current letter to rotate to.\n\t\tif (nextIndex == -1)\
    \ { //If no alphabet letter after current letter the string needs to be moved\
    \ up two places.\n\t\t\tnewString += alphabet.substring(0, index) + alphabet.substring(index\
    \ + 1, alphabet.length); //Move the alphabet letter up two places.\n\t\t\tindex++;\
    \ //Increment the index so it knows to move to the next letter after current letter.\n\
    \t\t} else {\n\t\t\tnewString += alphabet.substring(index, nextIndex); //If alphabet\
    \ letter after current letter the string needs to be moved down two places.\n\t\
    \t\tindex = nextIndex + 1; //Increment the index so it knows to move to the next\
    \ letter after current letter.\n\t\t}\n\t}\n\treturn newString\n}\n", "    let\
    \ alphabet = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"\
    j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"\
    u\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n    let n = s.length;\n    let result\
    \ = [];\n    for (let i = 0; i < n; ++i) {\n        let tmp = alphabet.indexOf(s[i]);\n\
    \        let newPosition = alphabet.indexOf((s[i - 1] + alphabet[tmp + 1] + alphabet[tmp\
    \ + 2] + alphabet[tmp + 3] + alphabet[tmp + 4] + alphabet[tmp + 5] + alphabet[tmp\
    \ + 6] + alphabet[tmp + 7] + alphabet[tmp + 8] + alphabet[tmp + 9] + alphabet[tmp\
    \ + 10] + alphabet[tmp + 11] + alphabet[tmp + 12] + alphabet[tmp + 13] + alphabet[tmp\
    \ + 14] + alphabet[tmp + 15]));\n        result.push(alphabet[newPosition]);\n\
    \    }\n    return result.join('');\n}\n", "    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    let chars = s.split(\"\");\n    let newStr = \"\";\n    for (let i = 0;\
    \ i < (chars.length); i++) {\n        let char = chars[i];\n        let letter\
    \ = alphabet.indexOf(char);\n        let newLetter = Math.floor(letter/2);\n \
    \       let newLetter2 = letter%2;\n        newStr += alphabet[newLetter + newLetter2];\n\
    \    }\n    return newStr;\n}\n</code>\n<|/ a |>\n<| a |>\n<code>", "  return\
    \ s.split('').map(e => String.fromCharCode(e.charCodeAt(0) + 2)).join('');\n}\n\
    </code>\n<|/ a tags=algorithm,string,encryption,python dscore=0 |>\n<| c |>\n\
    It's really not encryption, just reversing the letters.\n<|/ c |>\n<| c |>\nThank\
    \ you for that clarification, I have updated the answer.\n<|/ c |>\n<| c |>\n\
    This works perfectly. Thank you.\n<|/ c |>\n<| a tags=algorithm,string,encryption,python\
    \ |>\n<code>\ndef rotate(word):\n    rotated_word = ''\n    for letter in word:\n\
    \        rotated_word += word[word.index(letter) + len(word) - 1 - letter]\n \
    \   return rotated_word\n\nprint(rotate('hello'))\n</code>\n<|/ a dscore=0 |>\n\
    <| a dscore=0 |>\nHere is a working solution, it is more efficient and simple\
    \ to understand.\n<code>\ndef rotate(s):\n    return ''.join([s[k:k+len(s)] for\
    \ k in range(len(s)-1,-1,-2)])\n\nprint(rotate(\"hello\"))\n</code>\nThe trick\
    \ is to slice the string from index 0 till the last one, starting at one and moving\
    \ towards the end by 1 each time. Then, we simply build the string as we did before\
    \ using join.\n<|/ a tags=algorithm,string,encryption,python |>\n<| a |>\n<code>\n\
    def encrypt(s):\n    return s[::-1]\n</code>\n<|/ a tags=algorithm,string,encryption,python\
    \ dscore=0 |>\n<| c |>\nPlease don't post only code as answer, but also provide\
    \ an explanation what your code does and how it solves the problem of the question.\
    \ Answers with an explanation are usually more helpful and of better quality,\
    \ and are more likely to attract upvotes.\n<|/ c |>\n<| a |>\n<code>\ndef encrypt(string):\n\
    \    encrypted_string = ''\n    for letter in string:\n        encrypted_string\
    \ += string[string.index(letter) + len(string) - 1 - letter]\n    return encrypted_string\n\
    </code>\n<|/ a dscore=0 tags=algorithm,string,encryption,python |>\n<| c |>\n\
    Please don't post only code as answer, but also provide an explanation what your\
    \ code does and how it solves the problem of the question. Answers with an explanation\
    \ are usually more helpful and of better quality, and are more likely to attract\
    \ upvotes.\n<|/ c |>\n<| a dscore=0 |>\n<code>\ndef encrypt(word):\n    encrypt\
    \ = ''\n    length = len(word)", "    return rotate(s, alphabet);\n}\n", "  let\
    \ alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n  let alphabetLen = alphabet.length\n\
    \  let shifts = alphabetLen - 2\n  let rotateTo = (alphabetLen - 2) - 2\n  let\
    \ alphabetIndex = alphabet.indexOf(s.substr(0, alphabetLen))\n  let alphabetRotate\
    \ = alphabet.charAt(alphabetIndex + rotateTo)\n  let rotateLetter = alphabetRotate\n\
    \  let result = ''\n\n  for (let i = 0; i < s.length; i++) {\n    if (i < alphabetLen)\
    \ {\n      result += alphabet[alphabet.indexOf(s.charAt(i)) + rotateTo]\n    }\
    \ else {\n      result += alphabet[alphabet.indexOf(s.charAt(i)) + ((shifts %\
    \ 2) === 1 ? 1 : -1)]\n    }\n  }\n\n  return result\n}\n", "    \n    //Create\
    \ a variable and store the number of letters shifted down\n    var shift: number\
    \ = 0;\n    \n    //Loop for every letter in the alphabet\n    for (var i = 0;\
    \ i<26; i++) {\n        \n        //If the letter is uppercase then increment\
    \ the number of shifts\n        if ((s.charCodeAt(i) > 64) && i == 26) {\n   \
    \         shift++;\n        }\n        \n        //If the letter is lowercase\
    \ then decrement the number of shifts\n        else if ((s.charCodeAt(i) > 96)\
    \ && i == 0) {\n            shift--;\n        }\n        \n        //If the letter\
    \ is in between 97 and 122 then increment the shift variable and subtract \n \
    \       //26 to account for the alphabet being shifted\n        else if (s.charCodeAt(i)\
    \ > 122 && i == 25) {\n            shift++;\n            shift--;\n        }\n\
    \    }\n    \n    //Create a new string with the letters rotated\n    var encrypted:\
    \ string = \"\";\n    for (var i = 0; i<s.length; i++) {\n        encrypted +=\
    \ String.fromCharCode(s.charCodeAt(i) + shift);\n    }\n    \n    //Return the\
    \ encrypted string\n    return encrypted;\n}\n", "  let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n  let rotatedAlphabet = alphabet.split('')\n    .map(letter => letter.split('')\n\
    \      .map(letterIndex => letterIndex * 2)\n      .reduce((total, letterIndex)\
    \ => total + letterIndex))\n    .reduce((accumulator, letterIndex) => accumulator\
    \ + letterIndex, 0);\n  let encryptedString = s\n    .split('')\n    .map(letterIndex\
    \ => letterIndex < 26 ? (letterIndex + alphabet.length - rotatedAlphabet[letterIndex])\
    \ % alphabet.length : letterIndex - 26 + alphabet.length - rotatedAlphabet[letterIndex])\n\
    \    .reduce((accumulator, letterIndex) => accumulator + letterIndex, 0);\n  return\
    \ encryptedString.toString();\n}\n", "    \n    var result = '';\n    for (var\
    \ i = 0;i<s.length;i++) {\n        var index = alphabet.indexOf(s.charAt(i)) +\
    \ 2;\n        var letter = alphabet.charAt(index);\n        result += letter;\n\
    \    }\n    \n    return result;\n}\n</code>\nThe string 'letter' in the code\
    \ above is actually a variable that stores one of the letters. We then index into\
    \ this alphabet to obtain the character at that index. For example, if index =\
    \ 3, then the variable letter is now the third letter of the alphabet. Finally,\
    \ we just concatenate this letter onto the end result, giving us the encrypted\
    \ string.\n<|/ a tags=algorithm,encryption,python |>\n<| c |>\nThe code is not\
    \ working properly with letters other than English alphabet\n<|/ c |>\n<| c |>\n\
    I agree with you. I'm unsure as to why, but I'll keep thinking. Thanks!\n<|/ c\
    \ |>\n<| a tags=algorithm,encryption,python |>\n<code>\nimport string\nfrom random\
    \ import choice\nALPHABET = string.ascii_uppercase\n\ndef encrypt(password):\n\
    \    password = ''.join(choice(ALPHABET) for x in range(len(password)))\n    count\
    \ = 0\n    for c in password:\n        count += 1\n        if count%3 == 0:\n\
    \            password[count] = ALPHABET[count]\n        else:\n            password[count]\
    \ = password[count]\n    return password\n\ndef decrypt(password):\n    password\
    \ = ''.join(choice(ALPHABET) for x in range(len(password)))\n    count = 0\n \
    \   for c in password:\n        count += 1\n        if count%3 == 0:\n       \
    \     password[count] = ALPHABET[count]\n        else:\n            password[count]\
    \ = password[count]\n    return password\n\npassword = input(\"Enter password:\"\
    )\npassword = encrypt(password)\npassword = decrypt(password)\nprint(\"Your encrypted\
    \ password is: \",password)\n</code>\n<|/ a dscore=1 |>\n<| a tags=algorithm,encryption,python\
    \ |>\nMy answer is in C#. Here is the description of the algorithm.\n\nThe string\
    \ is converted into a char array (from string to array).\nThe char array is randomly\
    \ shuffled. First character is the most frequently used letter, second character\
    \ is second most frequent, etc.\nThe char array is converted to string and shuffled.\n\
    The first and second chars of the string are swapped.\nThe string is converted\
    \ into char array again.\n\n<code>\nprivate static string EncryptText(string text)\n\
    \    {\n        char[] alphabet = new char[] { 'a', 'b', 'c', 'd', 'e', 'f', 'g',\
    \ 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w',\
    \ 'x', 'y', 'z' };\n        char[] encryptedText", "    \n    let result = '';\n\
    \    for (let i of s) {\n        let index = alphabet.indexOf(i);\n        result\
    \ += alphabet.shift(index * 2);\n    }\n    return result;\n}\n", "    const alphabet:\
    \ string = \"abcdefghijklmnopqrstuvwxyz\";\n    let rotatedAlphabet: string =\
    \ \"\";\n    for (let i = 0, len = alphabet.length; i < len; i++) {\n        rotatedAlphabet\
    \ += alphabet.charAt(i);\n    }\n    \n    // Find the index of the first letter\
    \ greater than or equal to the string \n    const startIndex = rotatedAlphabet.indexOf(s.charAt(0))\
    \ + 1;\n    \n    // Find the index of the last letter less than or equal to the\
    \ string\n    const endIndex = rotatedAlphabet.lastIndexOf(s.charAt(s.length -\
    \ 1)) + 1;\n    \n    // Substring startIndex-endIndex from 0 in length by 1\n\
    \    // Add these results to the string\n    let encrypted: string = s.substring(0,\
    \ startIndex) + rotatedAlphabet.substring((endIndex + 1) * 2, (endIndex + 2) *\
    \ 2);\n    \n    return encrypted;\n}\n", "  let result: string = \"\"\n  \n \
    \ for (let i = 0; i < s.length; i++) {\n    result += alphabet[alphabet.indexOf(s[i])\
    \ + 2];\n  }\n  \n  return result;\n}\n", "  var alphabet: Alphabet = alphabet_rotated;\n\
    \  return s.split(\"\").map((letter) => alphabet[letter]).join(\"\");\n}\n", " \
    \   let enc = \"\";\n    for (let i = 0; i < s.length; i++) {\n        enc +=\
    \ alphabet[(alphabet.indexOf(s.charAt(i)) + (alphabet.length / 2)) % alphabet.length];\n\
    \    }\n    return enc;\n}\n", "  var alphabet: string[] = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'];\n\
    \  var new_s: string = '';\n  \n  for (var i = 0; i < s.length; i++){\n    var\
    \ char = alphabet.indexOf(s[i]);\n    if (char < alphabet.length - 1) char = alphabet[char\
    \ + 1];\n    new_s += char;\n  }\n  \n  return new_s;\n}\n", "\tlet alphabet:\
    \ string = \"abcdefghijklmnopqrstuvwxyz\";\n\tlet rotation: number = alphabet.substr(alphabet.indexOf(\"\
    z\"),2); // z is 2 letter starting alphabet\n\tlet c: string;\n\tlet result: string;\n\
    \t\n\tfor (let i = 0; i < s.length; i++) {\n\t\tc = s.charAt(i);\n\t\tresult =\
    \ c + rotation;\n\t\trotation = alphabet.substr(alphabet.indexOf(result),2);\n\
    \t}\n\n\treturn result;\n}\n", "  let alphabet = alphabet as string[];\n  let\
    \ rotated = alphabet.slice();\n  rotated.pop();\n  rotated.pop();\n  rotated.pop();\n\
    \  rotated.push(rotated.pop() + rotated[0]);\n  return s.split(\"\").map(c =>\
    \ rotated[alphabet.indexOf(c)]).join(\"\");\n}\n", "    return \"\"; // fill in\
    \ function body \n}\n", "  const alphabet: string = 'abcdefghijklmnopqrstuvwxyz';\n\
    \  const rotatedAlphabet: string = 'fghijklmnopqrstuvwxyzabc';\n  \n  s = s.toLowerCase();\n\
    \  let res = '';\n  \n  for (let i = 0; i < s.length; i++ ) {\n    res = res +\
    \ alphabet[(alphabet.indexOf(s[i]) + alphabet.length) % alphabet.length];\n  }\n\
    \  \n  return res + rotatedAlphabet;\n}\n", "  const alphabet: string[] = ROT13(ENCRYPT_LETTERS);\n\
    \  let encryptedText: string = \"\";\n  for (let i = 0; i < s.length; i++) {\n\
    \    encryptedText += alphabet[ENCRYPT_LETTERS.indexOf(s[i])];\n  }\n  return\
    \ encryptedText;\n}", "  const alphabet = `abcdefghijklmnopqrstuvwxyz`\n  let\
    \ n = 0\n  let encrypted = ''\n  do {\n    encrypted = s + alphabet[n]\n    n\
    \ += 2\n  } while (n < alphabet.length)\n\n  return encrypted\n}\n", "  const\
    \ alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n  let rotatedAlphabet = alphabet.slice(alphabet.length\
    \ - 2, alphabet.length);\n  return s.split(\"\").map(c => rotatedAlphabet.indexOf(c)\
    \ + 1).join(\"\").toUpperCase();\n}\n", "    var r = s.split(\"\");\n    for (var\
    \ i = 0; i < r.length; i++) {\n        r[i] = alphabet[r[i - 1] + 2];\n    }\n\
    \    return r.join(\"\");\n}\n", "\tlet cipher = \"\";\n\tfor (let i = 0; i <\
    \ s.length; ++i) {\n\t\tlet x = s.charCodeAt(i);\n\t\tlet n = x - 90 + ((i % 2\
    \ === 0) ? 0 : 1);\n\t\tcipher = String.fromCharCode((n + 90) % 26 + 97) + cipher;\n\
    \t}\n\treturn cipher;\n}\n", "    let alphabet: string[] = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'];\n\
    \    let str: string[] = s.split('');\n    let result: string[] = [];\n    for(let\
    \ i = 0; i < str.length; i++) {\n        let curChar = str[i];\n        let pos\
    \ = alphabet.indexOf(curChar);\n        pos = pos + 2;\n        pos = Math.floor(pos\
    \ / 2);\n        result.push(alphabet[pos]);\n    }\n    return result.join('');\n\
    }\n", "  let alphabet : string[] = alphabet_rotated();\n  let encrypted: string\
    \ = alphabet.map(c => s[s.indexOf(c) + 1]).join(\"\");\n  return encrypted;\n\
    }\n", "    return \"\";\n}", "    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    let alphabetShift = alphabet.split('').map(function(c) {\n        return\
    \ alphabet.indexOf(c);\n    });\n    let i = 0;\n    return s.split('').reduce(function(acc,\
    \ c) {\n        i++;\n        if (i === alphabetShift.length) {\n            i\
    \ = 0;\n        }\n        acc += alphabetShift[i];\n        return acc + c;\n\
    \    }, '');\n}\n", "  return shiftAlphabet(shiftAlphabet(s))\n}\n", "    // Convert\
    \ the string to an array of characters and rotate \n    // each letter in the\
    \ alphabet two spaces down.\n    const rotatedAlphabet = Array.from(\"abcdefghijklmnopqrstuvwxyz\"\
    )\n        .map((char, i) => rotate(char, -i))\n        // Remove any characters\
    \ in the rotatedAlphabet that are not a letter.\n        .filter((char, i) =>\
    \ char.match(/[a-z]/i))\n\n    // Convert the string to an array of characters\
    \ and then join it\n    // back together to return the string rotated and encrypted.\n\
    \    return Array.from(s).map(c => rotatedAlphabet[alphabet.indexOf(c)] || c).join(\"\
    \");\n}\n", "  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  const key = alphabet.split('').map(char\
    \ => char.charCodeAt(0) - 2);\n  const cipher = s.split('');\n  let cipher = cipher.map(char\
    \ => alphabet[(char.charCodeAt(0) + key[char.charCodeAt(0)]) % 26]);\n  return\
    \ cipher.join('');\n}\n</code>\nThe only things to watch out for in the code above\
    \ are that any input that does not contain an alphabet, numbers or spaces will\
    \ be converted into a valid string, and no input that is larger than 26 characters\
    \ will work (because there are 26 alphabets).\n<|/ a tags=javascript dscore=1\
    \ |>\n<| a dscore=1 tags=javascript |>\n<code>"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
