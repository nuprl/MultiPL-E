name: HumanEval_120_maximum
language: ts
prompt: "//Given an array arr of integers and a positive integer k, return a sorted\
  \ array \n// of length k with the maximum k numbers in arr.\n// Example 1:\n// >>>\
  \ maximum([-3, -4, 5], 3)\n// [-4, -3, 5]\n// Example 2:\n// >>> maximum([4, -4,\
  \ 4], 2)\n// [4, 4]\n// Example 3:\n// >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n\
  // [2]\n// Note:\n// 1. The length of the array will be in the range of [1, 1000].\n\
  // 2. The elements in the array will be in the range of [-1000, 1000].\n// 3. 0\
  \ <= k <= len(arr)\nfunction maximum(arr: number[], k: number): number[] {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = maximum;\n  assert.deepEqual(candidate([-3, -4, 5],\
  \ 3),[-4, -3, 5]);\n  assert.deepEqual(candidate([4, -4, 4], 2),[4, 4]);\n  assert.deepEqual(candidate([-3,\
  \ 2, 1, 2, -1, -2, 1], 1),[2]);\n  assert.deepEqual(candidate([123, -123, 20, 0,\
  \ 1, 2, -3], 3),[2, 20, 123]);\n  assert.deepEqual(candidate([-123, 20, 0, 1, 2,\
  \ -3], 4),[0, 1, 2, 20]);\n  assert.deepEqual(candidate([5, 15, 0, 3, -13, -8, 0],\
  \ 7),[-13, -8, 0, 0, 3, 5, 15]);\n  assert.deepEqual(candidate([-1, 0, 2, 5, 3,\
  \ -10], 2),[3, 5]);\n  assert.deepEqual(candidate([1, 0, 5, -7], 1),[5]);\n  assert.deepEqual(candidate([4,\
  \ -4], 2),[-4, 4]);\n  assert.deepEqual(candidate([-10, 10], 2),[-10, 10]);\n  assert.deepEqual(candidate([1,\
  \ 2, 3, -23, 243, -400, 0], 0),[]);\n}\n\ntest();"
completions: ["  let maxNum = arr[0];\n  let maxIndex = 0;\n  for (let i = 0; i <\
    \ arr.length; i++) {\n    if (arr[i] > maxNum) {\n      maxNum = arr[i];\n   \
    \   maxIndex = i;\n    }\n  }\n  const result = arr.slice(0, k).sort((a, b) =>\
    \ a - b);\n  if (result.length >= k) {\n    result.splice(maxIndex, 0, maxNum);\n\
    \  }\n  return result;\n}\n", "    let result = [];\n    for (let i = 0; i <=\
    \ k - 1 && i < arr.length; i++) {\n        let temp = arr[i];\n        for (let\
    \ j = i; j < k; j++) {\n            if (temp < arr[j]) {\n                temp\
    \ = arr[j];\n            }\n        }\n        result.push(temp);\n    }\n   \
    \ console.log(result);\n}\n", "  let result = [];\n  \n  if (k < arr.length) result\
    \ = arr.slice(0, k);\n\n  k = k - result.length;\n\n  while (k--) result.push(arr[k]);\n\
    \n  return result;\n}\n", "  if (arr.length === 0) return [];\n  if (k > arr.length)\
    \ return [];\n  let arrCopy = arr.slice(0);\n  arrCopy.sort((a: number, b: number)\
    \ => {\n    if (a > b) return 1;\n    if (a < b) return -1;\n    return 0;\n \
    \ });\n  let maxArray = [];\n  for (let i = 0; i < k; i++) {\n    maxArray.push(arrCopy.pop());\n\
    \  }\n  return maxArray;\n}\n</code>\n<|/ a |>\n<| c |>\nThis was a solution in\
    \ Python. My question was tagged as Javascript, not Python. Your solution is definitely\
    \ the way to go in Javascript. Thank you!\n<|/ c |>\n<| c |>\nAh. I thought you\
    \ were looking for a solution involving recursion.\n<|/ c |>\n<| a dscore=0 |>\n\
    You can try something like this\n<code>", "    let result: number[] = [];\n  \
    \  let n = arr.length;\n    if (k > n) {\n        return result;\n    }\n    let\
    \ maxArray = [];\n    for (let i = 0; i <= n - k + 1; i++) {\n        if (i <\
    \ arr.length) {\n            maxArray.push(arr[i]);\n        }\n    }\n    for\
    \ (let i = 0; i < k; i++) {\n        let max = 0;\n        for (let j = 0; j <\
    \ maxArray.length; j++) {\n            if (maxArray[j] > max) {\n            \
    \    max = maxArray[j];\n            }\n        }\n        maxArray.push(max);\n\
    \    }\n    result = maxArray;\n    return result;\n}\n", "    var len = arr.length;\n\
    \    var maximum: number[] = [];\n    for (var i = 0; i < k; i++) {\n        maximum.push(arr[i]);\n\
    \    }\n    for (var i = 0; i < (len - k); i++) {\n        maximum.push(arr[i\
    \ + k]);\n    }\n    return maximum;\n}\n", "  const result = [];\n  for (let\
    \ i = k - 1; i >= 0; i--) {\n    let maxI = 0;\n    for (let j = 0; j < k; j++)\
    \ {\n      if (arr[j] > arr[maxI]) {\n        maxI = j;\n      }\n    }\n    result.push(arr[maxI]);\n\
    \  }\n  return result;\n}\n", "    const result: number[] = [];\n    let index\
    \ = 0;\n    let max = 0;\n    while (index < arr.length) {\n        while (index\
    \ >= k) {\n            result.push(max);\n            index--;\n        }\n  \
    \      max = Math.max(max, arr[index]);\n        index++;\n    }\n    return result;\n\
    }", "  if (arr.length === 0) return [];\n\n  if (k <= 0 || k > arr.length) return\
    \ arr;\n  \n  return maximumInHeap(arr, k);\n}\n", "  let arr = arr.sort((a, b)\
    \ => a - b);\n  let res = arr.slice(0, k);\n  return res;\n}\n</code>\n<|/ a |>\n\
    <| a dscore=0 tags=typescript,javascript,algorithm,arrays |>\nTo find the maximum\
    \ of array values use Math.max(...array)\n<code>\nvar maxValue = Math.max(...arr);\n\
    </code>\n<|/ a |>\n<| c |>\nThis doesn't work for me in typescript. I'm using\
    \ lodash, and it only works if I do `Math.max(...arr)`\n<|/ c |>\n<| c |>\nThis\
    \ answer worked for me. Math.max is definitely the best answer.\n<|/ c |>\n<|\
    \ c |>\nMath.max is definitely the best answer but this is typescript-specific.\n\
    <|/ c |>\n<| c |>\nMath.max is not a Typescript function, it's in JavaScript,\
    \ and it works in typescript as well.\n<|/ c |>\n<| c |>\nYeah I know, it's definitely\
    \ the best answer. I just wanted to point out that this solution is in typescript.\n\
    <|/ c |>\n<| a tags=typescript,javascript,algorithm,arrays |>\n<code>\nconst maximum\
    \ = arr =>\n  arr.reduce((acc, val) => Math.max(acc, val), 0);\n</code>\nThis\
    \ is more efficient than using Math.max and will use O(n) instead of O(n^2).\n\
    <|/ a dscore=0 |>\n<| c |>\n`O(n^2)` is not correct and can be wrong. It's `O(n*log(n))`.\n\
    <|/ c |>\n<| c |>\nYeah, you're right. I've corrected my answer. Thanks!\n<|/\
    \ c |>\n<| a |>\nThe shortest I can think of is:\n<code>\nconst getMax = (arr,\
    \ k) => Math.max.apply(null, arr.slice(0, k));\n</code>\n<|/ a tags=typescript,javascript,algorithm,arrays\
    \ dscore=0 |>\n<| a dscore=0 |>\nA simple loop will do it:\n<code>\nvar maxNum\
    \ = 0;\nfor (var i = 1; i < arr.length; i++) {\n    if(arr[i] > maxNum){\n   \
    \     maxNum = arr[i];\n    }\n}\n</code>\n<|/ a tags=typescript,javascript,algorithm,arrays\
    \ |>\n<| c |>\nThis is not very efficient though.\n<|/ c |>\n<| c |>\nHow does\
    \ this not \"efficient\"? It performs 4 comparisons, 4 assignments. What does\
    \ it not perform?\n<|/ c |>\n<| c |>\n", "  const result = [...new Set(arr)];\n\
    \n  while (result.length > k) {\n    const current = result.sort((a, b) => b -\
    \ a);\n    result = result.filter(item => item !== current[0]);\n  }\n\n  return\
    \ result;\n}\n", "    // First sort the array in descending order\n    arr.sort((a,\
    \ b) => b - a);\n\n    if (k < arr.length) {\n        return arr.slice(0, k);\n\
    \    }\n\n    if (k > arr.length) {\n        return arr;\n    }\n\n    const res\
    \ = [];\n    let largest = arr[0];\n    let i;\n    for (i = 1; i < arr.length;\
    \ i++) {\n        if (arr[i] > largest) {\n            largest = arr[i];\n   \
    \     }\n    }\n\n    for (let i = 0; i < k; i++) {\n        res.push(largest);\n\
    \    }\n\n    return res;\n}\n", "  let result = []\n  for (let i = 1; i <= k;\
    \ i++) {\n    let currentMax = arr[i - 1]\n    for (let j = i; j < arr.length;\
    \ j++) {\n      if (arr[j] > currentMax) {\n        currentMax = arr[j]\n    \
    \  }\n    }\n    result.push(currentMax)\n  }\n  return result\n}\n", "    if\
    \ (!Array.isArray(arr) || k < 0) {\n        throw new TypeError('The first input\
    \ argument must be an array');\n    }\n    if (k > arr.length) {\n        return\
    \ arr;\n    }\n    const maximums = [];\n    const len = arr.length;\n    let\
    \ max = 0;\n    for (let i = 0; i < len; i++) {\n        if (arr[i] > arr[i +\
    \ k]) {\n            max = arr[i + k];\n            if (max > k) {\n         \
    \       max = k;\n            }\n        } else {\n            max = arr[i];\n\
    \            if (max > k) {\n                max = k;\n            }\n       \
    \ }\n        maximums.push(max);\n    }\n    return maximums;\n}\n", "\tconst\
    \ result: number[] = []\n\n\tfor (let i = 0; i < arr.length; i++) {\n\t\tif (arr.length\
    \ >= k) {\n\t\t\tif (arr[i] > result[result.length - 1]) {\n\t\t\t\tresult.push(arr[i])\n\
    \t\t\t}\n\t\t} else {\n\t\t\tif (arr[i] > result[result.length - 1]) {\n\t\t\t\
    \tresult.push(arr[i])\n\t\t\t}\n\t\t}\n\t}\n\n\treturn result\n}", "  if (k <\
    \ 0 || k > arr.length) throw new RangeError();\n  const maxArr = [...arr];\n \
    \ maxArr.sort((a: number, b: number) => {\n    return a < b ? -1 : 1;\n  });\n\
    \  \n  const sortedArray = maxArr.slice(0, k);\n  return sortedArray;\n}\n", " \
    \ if (arr.length === 0) {\n    return []\n  }\n  else if (k === 1) {\n    return\
    \ arr\n  }\n\n  let maxArr: number[] = []\n\n  for (let i = 0; i < arr.length;\
    \ i++) {\n    if (i === 0) {\n      maxArr.push(arr[i])\n      continue\n    }\n\
    \n    if (arr[i] > maxArr[k - 1]) {\n      maxArr[k] = arr[i]\n      k--\n   \
    \ } else if (arr[i] === maxArr[k - 1]) {\n      k--\n    }\n  }\n  return maxArr\n\
    }\n", "  if (k >= arr.length) {\n    return arr\n  }\n  const max = Math.max(...arr)\n\
    \  return maximum(arr.filter((item) => item !== max), k - 1)\n}\n", "  if (!k)\
    \ {\n    return arr;\n  }\n  const tmpArr = arr.slice();\n  const max = Number.NEGATIVE_INFINITY;\n\
    \  let maxIndex = 0;\n  tmpArr.sort((a, b) => a - b);\n  while (tmpArr.length\
    \ > 0) {\n    if (tmpArr[maxIndex] > max) {\n      max = tmpArr[maxIndex];\n \
    \     maxIndex = maxIndex;\n    } else {\n      if (tmpArr.length > k) {\n   \
    \     tmpArr.splice(0, 1);\n      }\n    }\n  }\n  return tmpArr.length === 0\
    \ ? arr : arr.slice(0, maxIndex + 1);\n}\n", "  const result = [];\n  let i =\
    \ k;\n  while (i < arr.length) {\n    const temp = arr[i];\n    result.unshift(temp);\n\
    \    if (temp >= arr[0]) {\n      result.shift();\n      result.unshift(temp);\n\
    \    }\n    i++;\n  }\n  return result;\n}\n", "    let max = 0;\n    let ans\
    \ = [];\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > arr[max])\
    \ {\n            max = i;\n        }\n    }\n\n    for (let i = 0; i < k; i++)\
    \ {\n        if (arr[max] >= arr[i]) {\n            ans.push(arr[max]);\n    \
    \        max = max;\n        } else {\n            max = max + 1;\n        }\n\
    \    }\n    return ans;\n}\n", "    if (k <= 0 || k > arr.length) return [];\n\
    \    if (k == 1) return arr;\n\n    let indexMax = arr.length - 1;\n    let indexMin\
    \ = 0;\n\n    while (indexMin < indexMax) {\n        let mid = Math.floor((indexMax\
    \ - indexMin) / 2);\n\n        if (arr[mid] > arr[indexMax]) indexMax = mid;\n\
    \        else indexMin = mid;\n    }\n\n    let arr = arr.slice(0, indexMax +\
    \ 1);\n\n    return arr;\n}\n", "  if (k > arr.length) {\n    return arr\n  }\n\
    \  const max = Math.max(...arr)\n  return arr.slice(0, k).map((t) => {\n    if\
    \ (t === max) {\n      return t\n    }\n    return t\n  })\n}\n", "    const result:\
    \ number[] = [];\n    arr.sort((a: number, b: number) => {\n        return a >\
    \ b ? 1 : -1;\n    });\n    for (let i = 0; i < k; i++) {\n        result.push(arr[i]);\n\
    \    }\n    return result;\n}\n", "  for (let i = 0; i < k; i++) {\n    let max\
    \ = 0;\n    for (let j = 0; j < arr.length; j++) {\n      if (arr[j] > max) {\n\
    \        max = arr[j];\n      }\n    }\n    arr.push(max);\n  }\n  return arr;\n\
    }\n", "  if (k >= arr.length) return arr;\n  if (k === 0) return arr;\n\n  let\
    \ maxNum = arr[0];\n  let maxIndex = 0;\n  for (let i = 1; i < arr.length; i++)\
    \ {\n    if (arr[i] > maxNum) {\n      maxNum = arr[i];\n      maxIndex = i;\n\
    \    }\n  }\n  return arr.slice(0, k).concat([maxNum], arr.slice(maxIndex + k));\n\
    }\n", "    let max: number = Number.MIN_VALUE;\n    let indexMax: number = 0;\n\
    \    for (let i = 0; i < k; i++) {\n        if (arr[i] > max) {\n            max\
    \ = arr[i];\n            indexMax = i;\n        }\n    }\n    let result: number[]\
    \ = [];\n    for (let i = indexMax + 1; i <= k; i++) {\n        result.push(arr[i]);\n\
    \    }\n    return result;\n}\nvar maximum = (arr: number[], k: number): number[]\
    \ => {\n    let max: number = Number.MIN_VALUE;\n    let indexMax: number = 0;\n\
    \    for (let i = 0; i < k; i++) {\n        if (arr[i] > max) {\n            max\
    \ = arr[i];\n            indexMax = i;\n        }\n    }\n    let result: number[]\
    \ = [];\n    for (let i = indexMax + 1; i <= k; i++) {\n        result.push(arr[i]);\n\
    \    }\n    return result;\n};", "  var result = [];\n  var count = 1;\n  var\
    \ maxCount = 0;\n  for (var i = 0; i < arr.length; i++) {\n    var current = arr[i];\n\
    \    if (current > maxCount && count < k) {\n      count++;\n      maxCount =\
    \ current;\n    } else {\n      count = 1;\n      maxCount = current;\n    }\n\
    \    result.push(current);\n  }\n  return result;\n}\n", "  if (!k) {\n    return\
    \ arr;\n  }\n  const result = []\n  const max = [-Infinity, -Infinity]\n  let\
    \ maxIndex = 0\n  let maxVal = -Infinity\n  for (let i = 0; i < arr.length; i++)\
    \ {\n    if (arr[i] > maxVal) {\n      maxVal = arr[i]\n      maxIndex = i\n \
    \   }\n  }\n  for (let i = 1; i <= k; i++) {\n    if (arr[maxIndex - i] >= maxVal)\
    \ {\n      maxIndex -= i\n      maxVal = arr[maxIndex]\n    }\n  }\n  result.push(arr[maxIndex])\n\
    \  return result\n}\n", "    // Your code here\n    let max: number[] = [];\n\
    \    \n    for(i = 0; i< arr.length; i++){\n        if(arr.length <= k){\n   \
    \     max.push(arr[i])\n        } else {\n            if(arr[i] > arr[k]){\n \
    \               max.push(arr[k])\n            }\n        }\n    }\n    return\
    \ max;\n}\n</code>\n<|/ a tags=arrays,javascript,algorithm |>\n<| a tags=arrays,javascript,algorithm\
    \ |>\nYou could use an array and sort the array with the maximum for the same\
    \ index.\n\n<code>", "    let maxArr = arr.slice();\n    if (k < 1 || k > maxArr.length)\
    \ throw new Error('The parameter k should be 1 <= k <= arr.length');\n    for\
    \ (let i = maxArr.length - 1; i > k; i--) {\n        maxArr.push(maxArr[i - 1]);\n\
    \    }\n    return maxArr;\n}\n", "    if (k > arr.length) return arr;\n    if\
    \ (k <= 0) return [];\n    return arr.slice(0).sort((a: number, b: number) =>\
    \ a - b)\n        .slice(0, k);\n}\n", "  const result: number[] = [];\n\n  for\
    \ (let i = 0; i < k; i++) {\n    let minIndex: number = 0;\n\n    for (let j =\
    \ 0; j < arr.length; j++) {\n      if (arr[j] < arr[minIndex]) {\n        minIndex\
    \ = j;\n      }\n    }\n    result.push(arr[minIndex]);\n    arr.splice(minIndex,\
    \ 1);\n  }\n\n  return result;\n}\n", "  for (let i = 0; i < k; i += 1) {\n  \
    \  arr[i] = Math.max(arr[i], arr[i + 1])\n  }\n  return arr\n}\n", "  // Write\
    \ your code here\n}", "  const result = [];\n  for (let i = 0; i <= k; i++) {\n\
    \    for (let j = 0; j < arr.length; j++) {\n      if (j === k || arr[j] > arr[j\
    \ + 1]) {\n        result.push(arr[j]);\n      } else if (j < k) {\n        break;\n\
    \      }\n    }\n  }\n  return result;\n}\n", "  const resultArr = Array(k)\n\
    \  const indexArr = Array(k)\n\n  arr.forEach((element, index) => {\n    if (indexArr[index]\
    \ === undefined) {\n      resultArr[index] = element\n      indexArr[index] =\
    \ 1\n    } else {\n      resultArr[index] = Math.max(element, resultArr[index])\n\
    \      indexArr[index] = index + 1\n    }\n  })\n\n  return resultArr.sort((a,\
    \ b) => b - a)\n}\n", "  const result: number[] = [];\n  let i = arr.length;\n\
    \  \n  while (k > 0) {\n    result.push(Math.max(...arr));\n    i -= 1;\n    k\
    \ -= 1;\n  }\n  \n  return result;\n}\n", "  if (!(Array.isArray(arr) && k <=\
    \ arr.length) || k <= 0 || k < 0) return arr;\n  let temp: number[] = new Array(k);\n\
    \  for (let i = 0; i < k; ++i) {\n    let min = Number.MAX_VALUE;\n    for (let\
    \ j = 0; j < arr.length; ++j) {\n      min = Math.min(min, arr[j]);\n    }\n \
    \   temp[i] = min;\n  }\n  return temp;\n}\n", "    let count = 0;\n    let result\
    \ = new Array(k);\n    for (let i = 0; i < arr.length; i++) {\n        if (count\
    \ < k) {\n            result[count] = arr[i];\n            count++;\n        }\n\
    \    }\n    return result;\n}\n", "\tlet result: number[] = [];\n\tfor (let i\
    \ = k; i >= 0; i--) {\n\t\tlet j = 0;\n\t\twhile (j < result.length && result[j]\
    \ > arr[i]) {\n\t\t\tj++;\n\t\t}\n\t\tresult.splice(j, 0, arr[i]);\n\t}\n\treturn\
    \ result;\n}\n", "  if (arr.length === 0 || k < 0 || k >= arr.length) return arr;\n\
    \  arr.sort((a, b) => a - b)\n  return arr.slice(0, k);\n}\n", "  if (arr.length\
    \ < k) {\n    return null;\n  }\n\n  let ret: number[] = [];\n  for (let i = 0;\
    \ i < k; ++i) {\n    ret.push(arr[i]);\n  }\n  ret = ret.sort((a, b) => a - b);\n\
    \  return ret.slice(0, k);\n}\n", "  let res = arr.sort(function (a, b) { return\
    \ b - a; });\n  return k <= res.length ? res.slice(0, k) : res;\n}\n", "  if (arr.length\
    \ === 0 || k === 0)\n    return arr;\n  if (k > arr.length)\n    return arr;\n\
    \  var result: number[] = [];\n  var temp: number[] = [arr[0]];\n  for (var i\
    \ = 1; i < k; i++) {\n    if (arr[i] > arr[i - 1])\n      temp = temp.concat(temp.slice(i\
    \ - 1).reverse());\n    temp = [arr[i]];\n  }\n  result = result.concat(temp.reverse());\n\
    \  return result;\n}\n", "    let sortedArr = arr.sort((a, b) => a - b); //Sort\
    \ the array\n    let maxArray = sortedArr.slice(0, k); //Get the first k elements\n\
    \    sortedArr.forEach((elem, i) => {\n        if (elem > maxArray[i]) {\n   \
    \         maxArray[i] = elem;\n        }\n    });\n    return maxArray;\n}\n",
  "    const len = arr.length\n    if (len === 0) {\n        return []\n    }\n  \
    \  const max = arr[0]\n    let maxIndex = 1\n    for (let i = 1; i < len; i++)\
    \ {\n        if (arr[i] > max) {\n            max = arr[i]\n            maxIndex\
    \ = i\n        }\n    }\n    let newArr = [max]\n    for (let i = maxIndex - 1;\
    \ i >= 0; i--) {\n        newArr.push(arr[i])\n    }\n    return newArr\n}\n",
  "  arr.sort((a, b) => b - a);\n  return arr.slice(0, k);\n}\n", "  if (k === 1)\
    \ {\n    return arr;\n  }\n\n  if (k < 0) {\n    return null;\n  }\n\n  if (arr.length\
    \ === 0) {\n    return [];\n  }\n\n  if (k > arr.length) {\n    return null;\n\
    \  }\n\n  const resultArray: number[] = [];\n\n  for (let i = 0; i < arr.length;\
    \ i++) {\n    let item: number = arr[i];\n\n    if (result.length < k) {\n   \
    \   item = Math.max(item, resultArray[i]);\n    } else {\n      if (item > resultArray[i])\
    \ {\n        item = Math.max(item, resultArray[i]);\n      }\n    }\n    resultArray[i]\
    \ = item;\n  }\n\n  return resultArray;\n}\n", "    arr.sort((a, b) => a - b);\n\
    \    const result = [];\n    for (let i = 0; i < k; i++) {\n        result[i]\
    \ = arr[i];\n    }\n    return result;\n}\n", "  const result = [];\n  const resultLength\
    \ = 1;\n  const currentMax = arr[0];\n  while (resultLength < k && currentMax\
    \ !== -1) {\n    const maxElementIndex = arr.findIndex(e => e === currentMax);\n\
    \    if (maxElementIndex === -1 || maxElementIndex + resultLength <= k - 1) {\n\
    \      result.push(currentMax);\n      resultLength++;\n    } else {\n      currentMax\
    \ = arr[maxElementIndex];\n      resultLength++;\n    }\n  }\n  return result;\n\
    }\n</code>\n<|/ a |>\n<| a dscore=0 |>\nThis is a solution that will return the\
    \ max number in the array and it will also work with negative numbers. The idea\
    \ is to sort the array and keep track of the largest value seen so far and compare\
    \ with the current value being checked. The complexity is O(nlogn)\n<code>", " \
    \   if (k >= arr.length) {\n        return arr;\n    }\n    \n    let max = 0;\n\
    \    let index = 0;\n    \n    for (let i = 0; i < k; i++) {\n        if (arr[i]\
    \ > arr[index]) {\n            max = arr[index];\n        }\n        \n      \
    \  index++;\n    }\n    \n    let result = [max];\n    \n    for (let i = index;\
    \ i < arr.length; i++) {\n        if (arr[i] > max) {\n            max = arr[i];\n\
    \        }\n        \n        result.push(max);\n    }\n    \n    return result;\n\
    }\n", "    if (k >= arr.length) {\n        return arr\n    }\n    const maxArr\
    \ = [];\n    let maxIndex = 0;\n    for (let index = 0; index < k; index++) {\n\
    \        if (arr[index] > arr[maxIndex]) {\n            maxArr[index] = arr[index]\n\
    \            maxIndex = index;\n        } else if (arr[index] === arr[maxIndex]\
    \ && index >= k - 1) {\n            maxArr[index] = arr[maxIndex];\n        }\n\
    \    }\n    for (let index = k; index < arr.length; index++) {\n        if (arr[index]\
    \ > arr[maxIndex]) {\n            maxArr[index] = arr[index]\n            maxIndex\
    \ = index;\n        } else if (arr[index] === arr[maxIndex] && index >= k - 1)\
    \ {\n            maxArr[index] = arr[maxIndex];\n        }\n    }\n    return\
    \ maxArr\n}\n</code>\n<|/ a tags=sorting,javascript,algorithm,arrays |>\n<| a\
    \ dscore=0 |>\n<code>\nlet nums = [-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15]\n",
  "  let maxNum: number = arr[0];\n  for (let i: number = 1; arr[i] <= maxNum; i++)\
    \ {\n    maxNum = Math.max(maxNum, arr[i]);\n  }\n  return arr.slice(0, k ===\
    \ 1 ? 1 : k).map((item, index) => {\n    return index === k ? item : item - maxNum;\n\
    \  });\n}\n", "  if (k > arr.length) {\n    return arr\n  }\n  let result = new\
    \ Array(k);\n  for (var i = 0; i < k; i++) {\n    let largest = -Infinity;\n \
    \   let currentIndex = i;\n    for (let j = 0; j < arr.length; j++) {\n      if\
    \ (arr[j] > arr[currentIndex]) {\n        largest = arr[j];\n        currentIndex\
    \ = j;\n      }\n    }\n    result[i] = largest;\n  }\n  return result;\n}\n",
  "    if (k > arr.length) {\n        return [];\n    }\n    else if (k === 0) {\n\
    \        return [];\n    }\n    else if (k === arr.length) {\n        return arr;\n\
    \    }\n    else {\n        const sortedArr = arr.sort();\n        let curr =\
    \ arr[0];\n        const ret = [];\n        for (let i = 1; i < k; i++) {\n  \
    \          if (curr > sortedArr[i]) {\n                ret.push(curr);\n     \
    \           curr = sortedArr[i];\n            }\n            else {\n        \
    \        ret.push(sortedArr[i]);\n                curr = sortedArr[i];\n     \
    \       }\n        }\n        ret.push(curr);\n        return ret;\n    }\n}\n\
    </code>\n<|/ a |>\n<| a tags=arrays,algorithm,sorting,javascript |>\n<code>",
  "  const result = [];\n  \n  for (let i = 1; i <= k; i++) {\n    const maxValue\
    \ = Math.max.apply(Math, arr);\n    const index = arr.indexOf(maxValue);\n   \
    \ result.push(maxValue);\n    arr.splice(index, 1);\n  }\n\n  return result;\n\
    }\n", "  const max: number[] = [];\n  let currentMax: number[] = [Number.MAX_SAFE_INTEGER];\n\
    \  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > currentMax[0]) {\n\
    \      currentMax = [arr[i]];\n    } else {\n      currentMax.push(arr[i]);\n\
    \    }\n    if (currentMax.length > k) {\n      max.push(currentMax.slice(0, k));\n\
    \      currentMax = currentMax.slice(k);\n    } else {\n      max.push(currentMax);\n\
    \    }\n  }\n  return max;\n}\n</code>\n<|/ a tags=arrays,algorithm,max,javascript,sorting\
    \ |>\n<| c |>\nI like the idea of sorting and using slice for the k elements.\
    \ That should work for any array size.\n<|/ c |>\n<| a |>\nThis solution works\
    \ with O(N) time and O(k) space complexity. The idea is to find the index of the\
    \ greatest element in an in-place way. The complexity is the same as the sorting\
    \ method with O(NlogN) complexity.\n\n<code>", "    const n = arr.length;\n  \
    \  let max = 0;\n    let result = new Array<number>();\n    for (let i = 0; i\
    \ < n; i++) {\n        if (max < arr[i]) {\n            max = arr[i];\n      \
    \  }\n        result.push(arr[i]);\n        if (result.length >= k) {\n      \
    \      break;\n        }\n    }\n    for (let j = result.length; j > k; j--) {\n\
    \        result[j] = result[j - 1];\n    }\n    return result;\n}\n", "  if (k\
    \ > arr.length) return [];\n\n  const result = new Array(k);\n\n  for (let i =\
    \ 0, j = 0; i < k; i++) {\n    const item = arr[j];\n\n    if (item > result[i])\
    \ {\n      result[i] = item;\n      j++;\n    } else if (item === result[i]) {\n\
    \      j++;\n    }\n  }\n\n  return result;\n}\n", "  \n  const arr = arr.sort((a,b)\
    \ => b-a);\n  const n = arr.length;\n  const max = arr[0];\n  let maxIndex = 0;\n\
    \  let curr = 1;\n  for (let i = 1; i < n; i++) {\n    if (max < arr[i]) {\n \
    \     curr = arr[i];\n      maxIndex = i;\n      max = curr;\n    }\n  }\n  \n\
    \  let newArr: number[] = [];\n  let i = 0;\n  while (i < k) {\n    newArr.push(arr[maxIndex]);\n\
    \    maxIndex++;\n    i++;\n  }\n  \n  return newArr.sort((a,b) => b-a);\n}\n",
  "  const arrLen = arr.length;\n  if (arrLen <= 0 || arrLen > k) {\n    return [];\n\
    \  }\n\n  let max: number = arr[0];\n  for (let i = 1; i < arrLen; i++) {\n  \
    \  if (arr[i] > max) {\n      max = arr[i];\n    }\n  }\n\n  let maxIndex = 0;\n\
    \  let currentMax = max;\n  let maxCount: number = 1;\n  for (let i = 1; i < arrLen;\
    \ i++) {\n    if (arr[i] === currentMax) {\n      maxCount++;\n    } else {\n\
    \      if (maxCount < k) {\n        continue;\n      }\n\n      if (maxIndex ===\
    \ arrLen - 1) {\n        return [max];\n      }\n\n      if (maxCount === k) {\n\
    \        return [max, arr[maxIndex]];\n      }\n    }\n    currentMax = arr[i];\n\
    \    maxIndex = i;\n    maxCount = 1;\n  }\n\n  return [];\n}\n", "  if (k > arr.length)\
    \ return arr;\n\n  const result: number[] = [];\n  let maxIndex: number = 0;\n\
    \n  for (let i = 0; i < k; i++) {\n    if (arr[i] > arr[maxIndex]) {\n      maxIndex\
    \ = i;\n    }\n  }\n\n  for (let j = i; j < arr.length; j++) {\n    if (arr[j]\
    \ > arr[maxIndex]) {\n      maxIndex = j;\n    }\n  }\n  for (let i = 0; i <=\
    \ maxIndex; i++) {\n    result.push(arr[i]);\n  }\n  return result;\n}\n", " \
    \ const result: number[] = [];\n  for (let i = 0; i < k; i++) {\n    result[i]\
    \ = Math.max(...arr);\n    arr.sort((a, b) => a - b);\n  }\n  return result;\n\
    }\n", "    if (k === 0 || arr.length === 0) {\n        return [];\n    }\n   \
    \ return arr\n        .sort((a, b) => a - b)\n        .slice(0, k)\n        .concat([arr[0]]);\n\
    }\n", "  let result: number[] = [];\n  let maxArr: number[] = [];\n  for (let\
    \ i = 0; i < k; i++) {\n    let curArr = arr.slice();\n    result.push(curArr[curArr.length\
    \ - 1]);\n    curArr.pop();\n    maxArr = curArr.sort(function (a, b) {\n    \
    \  return a - b;\n    });\n    maxArr.push(maxArr[0]);\n  }\n  return result;\n\
    }\n", "  let count: number;\n  let temp: number[];\n  const result: number[] =\
    \ [];\n  count = arr.length;\n  for (let i = 0; i < count; i++) {\n    temp =\
    \ [];\n    temp[0] = arr[i];\n    temp[1] = arr[i];\n    count--;\n    for (let\
    \ j = 0; j < k; j++) {\n      count--;\n      if (count === 0) break;\n      temp[1]\
    \ = arr[k - j - 1];\n    }\n    result.push(temp[0]);\n  }\n  return result;\n\
    }\n", "  if (k > arr.length) return [];\n\n  if (k === 0) return arr.slice();\n\
    \n  let result: number[] = [];\n  let max = 0;\n  let temp: number[] = [];\n\n\
    \  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      temp\
    \ = arr[i];\n      max = arr[i];\n    }\n  }\n\n  for (let i = 0; i < arr.length;\
    \ i++) {\n    if (arr[i] === max) {\n      result.push(arr[i]);\n    }\n  }\n\n\
    \  for (let i = 0; i < result.length - k; i++) {\n    result.push(temp);\n  }\n\
    \n  return result;\n}\n", "  const sortedArr = [...arr].sort((a, b) => a - b);\
    \ \n  return sortedArr.slice(0, k);\n}\n", "    if (k < 1 || k > arr.length) {\n\
    \        throw 'k must take 1 <= k <= len(arr)';\n    }\n    let result = new\
    \ Array(k);\n    for (let i = 1; i <= k; i++) {\n        let maxi = 0;\n     \
    \   let curMax = arr[maxi];\n        for (let j = 0; j < arr.length; j++) {\n\
    \            if (arr[j] > curMax) {\n                curMax = arr[j];\n      \
    \          maxi = j;\n            }\n        }\n        result[i - 1] = Math.max(arr[maxi],\
    \ curMax);\n    }\n    return result;\n}", "    let result = [];\n    let maxArray\
    \ = arr;\n    let maxK = k;\n\n    while (maxK > 0) {\n        let maxIndex =\
    \ 0;\n\n        for (let i = 0; i < arr.length; i++) {\n            if (arr[i]\
    \ > maxArray[maxIndex]) {\n                maxArray[maxIndex] = arr[i];\n    \
    \            maxIndex = i;\n            }\n        }\n\n        maxK--;\n    \
    \    result.push(maxArray[maxIndex]);\n    }\n\n    return result;\n}\n", "  if(k\
    \ <= 0 || k >= arr.length) return [];\n  let maxArr = arr;\n  let max = arr[0];\n\
    \  for(let i = 1; i < k; ++i){\n    if(arr[i] > max){\n      maxArr = arr;\n \
    \     max = arr[i];\n    }\n    else{\n      maxArr.splice(i, 0, max);\n    }\n\
    \  }\n  return maxArr;\n}\n", "  const arrMax = new Array();\n  let currentMax\
    \ = arr[0];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > currentMax)\
    \ {\n      currentMax = arr[i];\n    }\n    if (currentMax > arrMax[k]) {\n  \
    \    arrMax[k] = currentMax;\n    }\n  }\n  return arrMax.slice(0, k);\n}\n",
  "    arr.sort((a, b) => a - b);\n    const result = [];\n    for (let i = 1; i <\
    \ k + 1; ++i) {\n        if (arr[0] > arr[i]) {\n            result.push(arr[0]);\n\
    \        }\n        else {\n            result.push(arr[i]);\n        }\n    }\n\
    \    return result.slice(0, k);\n}\n</code>\nThis solution takes O(n) time. Sorting\
    \ the array is O(nlogn). Then, if the current element of the array is greater\
    \ than the element at index 0, we insert it at the front of the array and remove\
    \ it from the array, otherwise we insert it at the end and remove it from the\
    \ array. Finally, we slice the first k elements.\nThis approach has linear time\
    \ complexity. Time complexity is O(n).\n<|/ a |>\n<| c |>\nThe question is tagged\
    \ C#, why are you using a C++ snippet?\n<|/ c |>\n<| c |>\nGood call. I'm a long\
    \ time Java developer who is learning C#. Just forgot that C# had its own sort\
    \ function and I was thinking C++ was my language of choice.\n<|/ c |>\n<| c |>\n\
    Yes, I understand, but I thought it was a good way to showcase the time complexity.\n\
    <|/ c |>\n<| c |>\nThis is a great answer. Although I do think it might be more\
    \ helpful to give a brief explanation of the algorithm rather than give the solution\
    \ only.\n<|/ c |>\n<| c |>\nthank you. I appreciate your feedback.\n<|/ c |>\n\
    <| a |>\nThis approach is O(n), because you know that your sorted array is n bigger\
    \ than your input array. \n<code>\npublic static int[] sort(int[] arr) {\n   \
    \ final int[] temp = new int[arr.length];\n    for (int i = 0; i < arr.length;\
    \ i++) {\n        if (i < arr.length - 1) {\n            if (arr[i] > arr[i +\
    \ 1]) {\n                temp[i] = arr[i];\n                arr[i] = arr[i + 1];\n\
    \                arr[i + 1] = temp[i];\n            }\n        }\n    }\n    return\
    \ arr;\n}\n</code>\n<|/ a tags=arrays,sorting,algorithm,c# dscore=3 |>\n<| c |>\n\
    Thank you for the answer. Can you please explain the logic?\n<|/ c |>\n<| c |>\n\
    This algorithm will sort the given array and put in temp the element that come\
    \ after the element that is smaller. \nThen you rearrange the whole array and\
    \ put in arr the element that come after the element that is smaller.\nI hope\
    \ this will help you understand my explanation.\n<|/ c |>\n<| c |>\nThis answer\
    \ is ", "    const num = new Array(k).fill(0);\n    arr.forEach((v) => {\n   \
    \     if (v > num[num.length - 1]) {\n            num[num.length - 1] = v;\n \
    \       }\n    });\n    return num;\n}\n", "  for (let i = 0; i < k; i++)\n  \
    \  arr = quickSort(arr, arr[0] < arr[1] ? -1 : 1);\n  return arr;\n}\n", "   \
    \ \n    let temp: number[] = [];\n    let max: number = arr[0];\n    let length:\
    \ number = arr.length;\n    \n    for(let i=1; i<length; i++) {\n        \n  \
    \      if (arr[i] > max) {\n            \n            max = arr[i];\n        \
    \    \n        } else {\n            \n            temp = arr;\n            \n\
    \            for(let j=0; j<k; j++) {\n                \n                arr[j+1]\
    \ = temp[j];\n            }\n            \n        }\n    }\n    \n    return\
    \ arr;\n    \n}\n", "    if (arr.length === 0) {\n        return []\n    }\n \
    \   if (k > arr.length) {\n        return []\n    }\n\n    const maxArray = []\n\
    \    let maxIndex = 0\n    for (let i = 0; i < arr.length; i++) {\n        let\
    \ element = arr[i]\n        for (let j = i; j < arr.length; j++) {\n         \
    \   if (arr[j] > element) {\n                element = arr[j]\n            }\n\
    \        }\n        maxArray.push(element)\n        if (i === maxIndex) {\n  \
    \          maxIndex++\n        }\n    }\n    return maxArray\n}\n", "    let max\
    \ = [];\n    let temp = 0;\n    for (let i = 0; i < k; i++) {\n        let temp\
    \ = Math.max(...arr);\n        arr.push(temp);\n        max = arr;\n    }\n  \
    \  return arr;\n}\n", "  let result = [...arr]\n  if (k > result.length) k = result.length\n\
    \  for (let i = 0; i < k; i++){\n    const max = Math.max(...result)\n    result.splice(result.indexOf(max),\
    \ 1)\n  }\n  return result\n}\n", "  if (k < 0 || k > arr.length) throw new Error('k\
    \ out of range!');\n  return quickSort(arr, 0, arr.length - 1);\n}\n", "    if\
    \ (!k || k < 1 || k > arr.length) {\n        throw new Error(`Invalid arguments:\
    \ k should be in range [1, ${arr.length}], but it is ${k}.`);\n    }\n    let\
    \ result = new Array();\n    let max = -Infinity;\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] > max) {\n            max = arr[i];\n        }\n\
    \    }\n    let num: number = null;\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        if (arr[i] === max) {\n            num = arr[i];\n        }\n   \
    \ }\n    result.push(num);\n    if (k > result.length - 1) {\n        return result;\n\
    \    }\n    for (let i = 1; i < k; i++) {\n        let min = arr[0];\n       \
    \ for (let j = 0; j < arr.length; j++) {\n            if (arr[j] < min) {\n  \
    \              min = arr[j];\n            }\n        }\n        let temp = arr[arr.length\
    \ - 1];\n        arr[arr.length - 1] = min;\n        arr.push(temp);\n    }\n\
    \    let rest = result.slice(k - 1);\n    return rest;\n}\n", "  if (k <= 0) {\n\
    \    return [];\n  }\n  const n = arr.length;\n  let maxs = arr.reduce((maxes,\
    \ e) => Math.max(maxes[0], e), []);\n  if (maxs.length === 0) {\n    return [];\n\
    \  }\n  for (let i = 1; i < n; i++) {\n    const tmp = arr[i];\n    if (tmp >\
    \ maxs[0]) {\n      maxs = [tmp];\n    } else if (tmp === maxs[0]) {\n      maxs.push(tmp);\n\
    \    }\n  }\n  return maxs.slice(0, k);\n}\n", "  let arrLength = arr.length;\n\
    \  if (arrLength === 0) {\n    return [];\n  }\n  if (k > arrLength) {\n    return\
    \ arr;\n  }\n  let sorted = [];\n  let maxIndex = -1;\n  for (let i = 0; i < arrLength;\
    \ i++) {\n    if (arr[i] > sorted[maxIndex]) {\n      maxIndex = i;\n    }\n \
    \ }\n  sorted = sorted.slice(0, maxIndex + 1).concat(arr.slice(maxIndex + 1));\n\
    \  return sorted;\n}\n", "    if (k <= 0) return [];\n    if (arr.length <= k)\
    \ return arr;\n    let max: number[] = [];\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (max[0].value < arr[i]) {\n            max.unshift({value:\
    \ arr[i], index: i});\n        } else if (max[0].value > arr[i]) {\n         \
    \   max = maximum([arr[i], ...max], k - 1);\n        }\n    }\n    return max;\n\
    }\n</code>\n<|/ a tags=sorting,arrays,javascript,algorithm |>\n<| a |>\n<code>",
  "    let result: number[] = [];\n    \n    for (let i = 0; i < arr.length; i++)\
    \ {\n        let current = arr[i];\n        if (k > result.length) {\n       \
    \     result = result.concat(k - result.length + 1);\n        }\n        else\
    \ if (current > result[result.length - k]) {\n            result.push([current]);\n\
    \        }\n        else if (current === result[result.length - k] && current\
    \ > 1) {\n            result[result.length - k].push(current);\n        }\n  \
    \  }\n    \n    return result;\n}\n", "    let max: number[] = new Array(k);\n\
    \    for (let i = 0; i < k; i++) {\n        max[i] = Math.max(arr[i], max[i +\
    \ 1]);\n    }\n    return max;\n}\n", "  const length: number = arr.length;\n\
    \  if (length < k || k >= length) return arr;\n  let result: number[] = [];\n\
    \  let max: number = arr[0];\n  for (let i = 0; i < k; i++) {\n    if (arr[i]\
    \ > max) max = arr[i];\n  }\n  for (let i = 0; i < length; i++) {\n    if (max\
    \ < arr[i]) {\n      result.push(max);\n      max = arr[i];\n    } else {\n  \
    \    result.push(arr[i]);\n    }\n  }\n  result.push(max);\n  return result;\n\
    }\n", "  let result = [];\n  let length = 0;\n  while (length > 0 && k > 0) {\n\
    \    result.push(arr[0]);\n    length--;\n    arr = arr.slice(1);\n  }\n  for\
    \ (let i = 1; i < arr.length; i++) {\n    if (arr[i] > result[result.length -\
    \ k]) {\n      result.push(arr[i]);\n    }\n  }\n  return result;\n}\n", "  if\
    \ (arr.length <= k) return arr;\n  const m = Math.ceil(arr.length / k);\n  const\
    \ result = new Array();\n  for (let i = 0; i < k; i++) {\n    result.push(arr[m\
    \ * i]);\n  }\n  return result;\n}\n", "  if (k === 0) {\n    return [];\n  }\n\
    \  const sorted = arr.sort((a, b) => b - a);\n  return sorted.slice(0, k);\n}\n",
  "    arr = arr.sort((a: number, b: number) => a - b)\n    let max = []\n    for\
    \ (let i = 0; i < k; i++) {\n        max = arr[i]\n    }\n    return max\n}\n",
  "  if (k === 1) {\n    return arr\n  }\n  let result: number[] = []\n  for (let\
    \ i = 0; i < k; i++) {\n    let max = Number.MIN_VALUE\n    for (let j = 0; j\
    \ < arr.length; j++) {\n      if (arr[j] > max) {\n        max = arr[j]\n    \
    \  }\n    }\n    result.push(max)\n  }\n  return result\n}\n", "  const len =\
    \ arr.length;\n  let max: number[] = [];\n\n  for (let i = 0; i < k; i++) {\n\
    \    let largest = i;\n\n    for (let j = i; j < len; j++) {\n      if (arr[j]\
    \ > arr[largest]) {\n        largest = j;\n      }\n    }\n\n    max.push(arr[largest]);\n\
    \  }\n\n  return max;\n}\n", "  // sort the array in ascending order\n  // O(nlogn)\n\
    \  arr = sort(arr);\n\n  let result = [];\n  if (k > arr.length) throw new Error(\"\
    k is out of bounds\");\n\n  for (let i = 0; i <= arr.length; i++) {\n    let index\
    \ = k - i;\n    result.push(arr[index]);\n    if (index > 0) arr.splice(0, index);\n\
    \  }\n  return result;\n}\n", "  let arr2 = arr.sort((a: number, b: number) =>\
    \ {\n    return b - a\n  })\n  let max = []\n  for (let i = 0; i < k; i++) {\n\
    \    let temp = arr2[i]\n    for (let j = 0; j < i; j++) {\n      if (arr2[j]\
    \ > temp) {\n        temp = arr2[j]\n      }\n    }\n    arr2[i] = arr2[i]\n \
    \   arr2.splice(i + 1, arr2.length - i - 1, temp)\n  }\n  return arr2\n}\n", " \
    \ const result = []\n  let maximumValue = 0\n  const maxArr = []\n  const minArr\
    \ = []\n  for (let i = 0; i < k; i++) {\n    if (arr[i] > maxArr[0]) {\n     \
    \ maxArr[0] = arr[i]\n    }\n    if (arr[i] < minArr[0]) {\n      minArr[0] =\
    \ arr[i]\n    }\n    if (arr[i] > maxArr[1]) {\n      maxArr[1] = arr[i]\n   \
    \ }\n    if (arr[i] < minArr[1]) {\n      minArr[1] = arr[i]\n    }\n  }\n  if\
    \ (maxArr[0] > minArr[1]) {\n    maxArr[1] = maxArr[0]\n  }\n  arr.forEach((item,\
    \ index) => {\n    if (item > maxArr[1]) {\n      result.push(item)\n    } else\
    \ if (item < minArr[1]) {\n      result.unshift(item)\n    }\n  })\n  return result\n\
    }\n", "    if (k > arr.length) return arr;\n    let max = 0;\n    let index =\
    \ 0;\n    while (index < k) {\n        if (max < arr[index]) {\n            max\
    \ = arr[index];\n        }\n        index++;\n    }\n    return [max];\n}\n",
  "  if (k <= arr.length) return arr;\n  const tmp: number[] = [];\n  for (let i =\
    \ 0; i < arr.length; i++) {\n    for (let j = 0; j < k; j++) {\n      if (arr[j]\
    \ > arr[j + 1]) {\n        tmp[j] = arr[j];\n      } else {\n        tmp[j] =\
    \ arr[j + 1];\n      }\n    }\n  }\n  return tmp;\n}\n", "  if (k > arr.length)\
    \ {\n    return arr\n  }\n  let max = new Array(k).fill(0)\n  for (let i = 0;\
    \ i < k; i++) {\n    max[i] = -Infinity\n  }\n  for (let i = 0; i < arr.length;\
    \ i++) {\n    for (let j = 0; j < k; j++) {\n      if (arr[i] > max[j]) {\n  \
    \      max[j] = arr[i]\n      }\n    }\n  }\n  return max\n}\n", "  let max =\
    \ -Infinity;\n  let maxIndex;\n  let sorted;\n  for (let i = 0; i < k; ++i) {\n\
    \    for (let j = 0; j < arr.length; ++j) {\n      if (arr[j] > max) {\n     \
    \   max = arr[j];\n        maxIndex = j;\n      }\n    }\n    arr = [...arr, max];\n\
    \    sorted = true;\n  }\n  return arr;\n}\n\nconsole.log(maximum([-3, -4, 5],\
    \ 3));\nconsole.log(maximum([4, -4, 4], 2));\nconsole.log(maximum([-3, 2, 1, 2,\
    \ -1, -2, 1], 1));</code>\n\nWe can use the same approach for merge sort.\n<code>",
  "  console.log(arr);\n  console.log(k);\n  let res = [];\n  let max = arr[0];\n\
    \  for (let i = 0; i < k; i++) {\n    let curMax = Math.max(arr[i], max);\n  \
    \  res.push(curMax);\n    max = curMax;\n  }\n  return res;\n}\n", "  \n  \n \
    \ \n  let result = new Array();\n  \n  \n  \n  \n  if (k <= arr.length){\n   \
    \ \n    let temp = new Array();\n    let temp_max = new Array();\n    let temp_max_pos\
    \ = new Array();\n    \n    for (let i = 0; i<k; i++){\n      \n      \n     \
    \ if (arr[i] < arr[0]){\n        \n        temp.push(arr[i]);\n        \n    \
    \  }\n      \n      else {\n        \n        temp.push(arr[0]);\n        \n \
    \     }\n      \n    }\n    \n    let temp_max_pos_index = 0;\n    \n    for (let\
    \ i = 1; i<temp.length; i++){\n      \n      if (temp[i] > temp_max[temp_max_pos]){\n\
    \        \n        temp_max[temp_max_pos] = temp[i];\n        temp_max_pos +=\
    \ 1;\n        \n      }\n      \n      else {\n        \n        \n        temp_max[temp_max_pos]\
    \ = temp[i];\n        temp_max_pos = 0;\n        \n      }\n      \n      \n \
    \   }\n    \n    let temp_max_index = 0;\n    \n    for (let i = 0; i<temp_max_pos;\
    \ i++){\n      \n      result[temp_max_index] = temp_max[i];\n      temp_max_index\
    \ += 1;\n      \n    }\n    \n    \n    \n    \n    for (let i = k; i>0; i--){\n\
    \      \n      temp_max_index = 0;\n      \n      for (let j = 0; j<temp_max_pos;\
    \ j++){\n        \n        if (temp[j] < temp_max[temp_max_pos]){\n          \n\
    \          temp_max[temp_max_pos] = temp[j];\n          temp_max_pos += 1;\n \
    \         \n        }\n        \n        else {\n          \n          \n    \
    \      temp_max[temp_max_pos] = temp[j];\n          temp_max_pos = 0;\n      \
    \    \n        }\n        \n        \n      }\n      \n      result[temp_max_index]\
    \ = temp_max[temp_max_pos];\n      temp_max_pos += 1;\n      temp_max_index +=\
    \ 1;\n      \n      \n      \n    }\n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    ", "  \n}\n", "  if\
    \ (arr.length === 0) {\n    return arr;\n  }\n  if (k > arr.length) {\n    return\
    \ arr;\n  }\n\n  const sortedArr = arr.slice();\n  const len = sortedArr.length;\n\
    \  if (k > len) {\n    return arr;\n  }\n\n  for (let i = 1; i < k; ++i) {\n \
    \   const first = sortedArr[i];\n    let j;\n    for (j = i; j < len; ++j) {\n\
    \      if (first > sortedArr[j]) {\n        break;\n      }\n    }\n    sortedArr.splice(j,\
    \ 0, first);\n  }\n  return sortedArr;\n}\n", "    // Write your code here\n \
    \   var arr1 = arr.sort((a, b) => a - b);\n    var maximumValue = arr1.reduce(\n\
    \        (a, b) => a >= b ? a : b,\n        arr1[0]\n    );\n    var lengthOfArray\
    \ = arr1.length - 1;\n    var maxArray = arr1.slice(0, k + 1);\n    \n    while\
    \ (maximumValue >= arr1[lengthOfArray]) {\n        maximumValue -= arr1[lengthOfArray];\n\
    \        maxArray.push(arr1[lengthOfArray]);\n        lengthOfArray--;\n    }\n\
    \    maxArray.push(maximumValue);\n    return maxArray;\n}\n</code>\n<|/ a dscore=2\
    \ |>\n<| a tags=javascript,algorithm |>\n<code>", "  if (k < 1 || k > arr.length)\
    \ {\n    throw new Error('k must be <= length of arr when array is of length '\
    \ + arr.length);\n  }\n  let maxArray = new Array();\n  let maxSum = 0;\n  for\
    \ (let i = 0; i < arr.length; i++) {\n    maxSum = Math.max(maxSum, arr[i]);\n\
    \    maxArray[i] = maxSum;\n  }\n  return maxArray.slice(0, k);\n}\n", "  const\
    \ result = new Array(k);\n  let maxIndex = 0;\n  let minIndex = 1000;\n\n  for\
    \ (let i = 0; i < k; i++) {\n    let value = arr[i];\n    if (value < minIndex)\
    \ {\n      minIndex = value;\n    }\n\n    if (value > maxIndex) {\n      maxIndex\
    \ = value;\n    }\n\n    result[i] = arr[minIndex];\n  }\n\n  for (let i = 0;\
    \ i < k; i++) {\n    result[i] = arr[i];\n  }\n\n  return result;\n}\n", "  let\
    \ ans: number[] = [];\n  for (let i = 0; i < k; i++) {\n    let max: number =\
    \ Math.max(...ans);\n    ans.push(max);\n  }\n  return ans;\n}\n", "    var result\
    \ = [];\n    for (var i = 0; i < k; i++) {\n        var max = 0;\n        for\
    \ (var j = 0; j < arr.length; j++) {\n            if (arr[j] > max)\n        \
    \        max = arr[j];\n        }\n        result.push(max);\n    }\n    return\
    \ result;\n}\n", "  let res = [];\n  for (let i = 0; i < k; i++) {\n    if (arr[i]\
    \ > arr[i + 1]) {\n      res.push(arr[i]);\n    } else {\n      res.push(arr[i\
    \ + 1]);\n    }\n  }\n  return res;\n}\n", "  let result = [];\n  for (let i =\
    \ 0, j = arr.length - 1; i <= j; i++, j--) {\n    if (k <= 0) {\n      break;\n\
    \    }\n    if (arr[i] > arr[j]) {\n      result.push(arr[i]);\n    } else if\
    \ (arr[i] === arr[j]) {\n      result.push(arr[j]);\n      k -= 1;\n    } else\
    \ {\n      result.push(arr[j]);\n    }\n  }\n  return result;\n}\n", "  let result\
    \ = [];\n  let curMax = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i]\
    \ > curMax) {\n      result.push(curMax);\n      curMax = arr[i];\n    } else\
    \ {\n      result.push(arr[i]);\n    }\n    if (result.length >= k) {\n      break;\n\
    \    }\n  }\n  result.push(curMax);\n  return result;\n}\n", "  let arrCopy =\
    \ arr.slice();\n  let sortedArray: number[] = arrCopy.slice();\n  let maxLength:\
    \ number;\n  \n  // O(n) time | O(1) space | O(n) auxiliary space \n  while (k\
    \ > 0) {\n    maxLength = 0;\n    sortedArray.forEach((value, index) => {\n  \
    \    if (value > maxLength) {\n        maxLength = value;\n      }\n    });\n\
    \    k--;\n    sortedArray.splice(maxLength, 1);\n  }\n  return sortedArray;\n\
    }\n", "    \n    // Write your code here\n    // Your code here\n    \n    return\
    \ arr\n}\n", "  // Initialize result array to hold k numbers. \n  let result =\
    \ new Array();\n  \n  // If k > length of array\n  if (k > arr.length) {\n   \
    \ console.log(\"k should be less than or equal to length of array\");\n    return\
    \ null;\n  }\n  \n  // If k is greater than the number of elements in result,\
    \ then return \n  // null\n  if (k > result.length) {\n    return null;\n  }\n\
    \  \n  // Loop through the elements of arr\n  for (let i = 0; i < arr.length;\
    \ i++) {\n    // If current arr[i] is greater than the last element in the result\
    \ array\n    if (arr[i] > result[result.length - 1]) {\n      // Add the current\
    \ arr[i] to the result array\n      result.push(arr[i]);\n    }\n  }\n  \n  //\
    \ Return the result array\n  return result;\n}\n", "  if (k > arr.length) {\n\
    \    throw new RangeError('k should be less than or equal the length of array');\n\
    \  }\n\n  const result = [];\n  let max: number = -Infinity;\n\n  for (let i =\
    \ 0; i < arr.length; i++) {\n    const el = arr[i];\n    if (el > max) {\n   \
    \   max = el;\n    }\n  }\n\n  for (let i = 0; i < arr.length; i++) {\n    if\
    \ (arr[i] > max) {\n      result.push(max);\n      max = arr[i];\n    } else {\n\
    \      result.push(arr[i]);\n    }\n  }\n\n  return result;\n}\n", "  let arr\
    \ = arr.sort((a: number, b: number) => {\n    return a - b;\n  });\n\n  if (arr.length\
    \ === 0) {\n    return [];\n  }\n\n  let maxSize = k;\n\n  while (maxSize > 0)\
    \ {\n    let maxVal = arr[maxSize - 1];\n    let maxIndex = arr.length - 1;\n\n\
    \    while (maxIndex >= 0 && arr[maxIndex] > maxVal) {\n      arr[maxIndex--]\
    \ = arr[maxIndex + 1];\n    }\n\n    arr.splice(maxIndex + 1, maxSize, arr[maxSize]);\n\
    \n    maxSize -= 1;\n  }\n\n  return arr;\n}\n", "    const stack = []\n    let\
    \ result = []\n    let i\n    let j\n    let max\n    for (i = 0; i < k; i++)\
    \ {\n        stack.unshift(arr[i])\n    }\n    for (let j = 0; j < k; j++) {\n\
    \        max = -Infinity\n        for (let k = 0; k < i; k++) {\n            if\
    \ (stack[k] > max) {\n                max = stack[k]\n            }\n        }\n\
    \        result[j] = max\n        stack[j + 1] = max\n    }\n    return result\n\
    }\n", "  // Get the max num in the arr\n  let maxNum = arr[0];\n  // Find the\
    \ max num in the arr recursively\n  for (let i = 1; i < arr.length; i++) {\n \
    \   if (arr[i] > maxNum) {\n      maxNum = arr[i];\n    }\n  }\n  // If there\
    \ are less than k numbers in arr then return all numbers \n  if (arr.length <\
    \ k) {\n    return arr;\n  }\n  // If k is 0, return all numbers \n  if (k ===\
    \ 0) {\n    return arr;\n  }\n  // If k is 1, return only the max number in arr\n\
    \  if (k === 1) {\n    return [maxNum];\n  }\n  // If k is 2, return only the\
    \ max number in arr\n  if (k === 2) {\n    return maxNum === -Infinity ? [maxNum,\
    \ maxNum] : [maxNum, maxNum, maxNum];\n  }\n  // If k is greater than 2, then\
    \ return the max number in arr plus the max numbers in arr \n  // of length k\
    \ - 2 and the max number in arr of length k - 1.\n  if (k > 2) {\n    return maxNum\
    \ === -Infinity ? [maxNum, maxNum, ...maximum(arr, k - 2), ...maximum(arr, k -\
    \ 1)] : \n      [maxNum, maxNum, ...maximum(arr, k - 2), ...maximum(arr, k - 1),\
    \ maxNum];\n  }\n}\n", "  if (arr.length === 0) {\n    return [];\n  }\n  if (arr.length\
    \ === 1) {\n    return [arr[0]];\n  }\n  let mid = Math.floor(k / 2);\n  let left\
    \ = maximum(arr.slice(0, k), k - mid);\n  let right = maximum(arr.slice(k), k\
    \ - mid);\n  left = left.sort((a, b) => a - b);\n  right = right.sort((a, b) =>\
    \ b - a);\n  let res = [];\n  res.push(...left.slice(0, mid));\n  res.push(...right.slice(0,\
    \ mid));\n  return res;\n}\n", "    if (k > arr.length) {\n        throw new Error('The\
    \ length of array should be in the range of [1, 1000')\n    }\n    if (k === 0)\
    \ {\n        return arr\n    }\n    return merge(arr, maximum(arr.slice(1), k\
    \ - 1), arr.slice(0, k))\n}\n", "\tlet length: number = k > arr.length ? arr.length\
    \ : k\n\tlet maxArr: number[] = []\n\tlet max: number = 0\n\tfor (let i: number\
    \ = 0; i < arr.length; i++) {\n\t\tmax = Math.max(max, arr[i])\n\t\tfor (let j:\
    \ number = 0; j < length; j++) {\n\t\t\tif (j != i && max <= arr[j]) {\n\t\t\t\
    \tmaxArr.push(arr[j])\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t}\n\treturn maxArr\n}\n",
  "    // write your code here\n    let maxNum = 0;\n    let nums: number[] = [];\n\
    \    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > maxNum) {\n\
    \            maxNum = arr[i];\n            nums = [];\n            nums.push(arr[i]);\n\
    \        } else if (arr[i] === maxNum && nums.length < k) {\n            nums.push(arr[i]);\n\
    \        }\n    }\n    return nums;\n}\n", "  if (k > arr.length) return [];\n\
    \  let [max, maxi] = Math.max(...arr);\n  let rest = arr.filter((value) => value\
    \ >= max);\n  if (k < rest.length) return maximum(rest, k);\n  return [max];\n\
    }\n", "    \n    if (k <= 0 || k > arr.length) throw Error('Invalid input');\n\
    \    let max: number[] = [];\n    for (let i = 0; i < k; i++)\n        max.push(arr[i])\n\
    \    for (let i = k; i < arr.length; i++)\n        arr[i] = Math.max(arr[i], max[i]);\n\
    \    return arr;\n}\n", "\tlet m = -Infinity,\n\t\ttemp: number[] = []\n\tfor\
    \ (let i = 0; i < k; i++) {\n\t\tlet temp = arr.sort((a: number, b: number) =>\
    \ {\n\t\t\treturn b - a\n\t\t})\n\t\tif (m > -Infinity) {\n\t\t\ttemp.push(m)\n\
    \t\t}\n\t\tm = Math.max(temp[0], m)\n\t}\n\treturn temp\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nWhile this code may answer the question, providing additional context\
    \ regarding why and/or how this code answers the question improves its long-term\
    \ value.\n<|/ c |>\n<| c |>\nI tried to help and explain the code but couldn't\
    \ explain it simpler. As I said, I'm just beginner here\n<|/ c |>\n<| c |>\nIn\
    \ your code you are iterating through the array and inserting elements to another\
    \ array that is sorted and after that you are finding the max element of this\
    \ array. In the first iteration, you insert the max element, so it takes O(n),\
    \ in the second iteration you find the max element and insert it, so it takes\
    \ O(n) again, and so on. That's why it's O(n^2) time complexity.\n<|/ c |>\n<|\
    \ c |>\nYour solution is better to understand and less space and time consuming,\
    \ but its not correct. Check the answer by `Rodrigo Martinez`.\n<|/ c |>\n<| a\
    \ |>\nHere is my take on it. Hope it helps. I used two stacks to store all maximums.\
    \ At each step, I am comparing the current max with the element stored at maximumStack,\
    \ and if it is the current max, then it gets stored in maximumStack. \nAfter all\
    \ the iterations, I pop the last element (which is stored in maximumStack) and\
    \ push the next element to maximumStack. \n<code>\nvar maximum = ([a,b,c]) =>\
    \ {\n  if(maximumStack.empty){\n    maximumStack.push(a);\n  }\n  maximumStack.push(b);\n\
    \  maximumStack.push(c);\n  while(!maximumStack.empty){\n    let maximum = maximumStack.pop();\n\
    \    maximumStack.push(maximum);\n  }\n  return maximumStack.pop();\n}\n\nconsole.log(maximum([-3,\
    \ -4, 5]));\nconsole.log(maximum([4, -4, 4]));\nconsole.log(maximum([-3, 2, 1,\
    \ 2, -1, -2, 1]));\nconsole.log(maximum([-3, 2, 1, 2, -1, -2, 1])); //test\n</code>\n\
    <|/ a tags=algorithm,sorting,javascript dscore=0 |>\n<| c |>\nThis would take\
    \ O(n^2) time. You can do it in O(n) time. Also, this ", "\tarr.sort((a: number,\
    \ b: number) => {\n\t\tif (a < b) {\n\t\t\treturn -1;\n\t\t} else if (a > b) {\n\
    \t\t\treturn 1;\n\t\t}\n\t\treturn 0;\n\t});\n\n\tconst result = [];\n\tfor (let\
    \ i = 0; i < k; i++) {\n\t\tresult.push(arr[i]);\n\t}\n\treturn result;\n}\n",
  "    \n    let sortedArr = [];\n    for(let i = 0; i < arr.length; i++){\n     \
    \   let currElement = arr[i];\n        if(k > arr.length)\n            k = arr.length;\n\
    \        while(sortedArr.length < k){\n            let maxValue = Math.max(currElement);\n\
    \            if(currElement > maxValue)\n                currElement = maxValue;\n\
    \            else\n                break;\n        }\n        sortedArr.push(currElement);\n\
    \    }\n    return sortedArr;\n}\n\nconsole.log(maximum([3, 10, 5, -7, 4], 1));\n\
    console.log(maximum([3, 10, 5, -7, 4], 2));\nconsole.log(maximum([3, 10, 5, -7,\
    \ 4], 3));\nconsole.log(maximum([3, 10, 5, -7, 4], 4));\nconsole.log(maximum([3,\
    \ 10, 5, -7, 4], 5));\nconsole.log(maximum([3, 10, 5, -7, 4], 6));\nconsole.log(maximum([3,\
    \ 10, 5, -7, 4], 7));\nconsole.log(maximum([3, 10, 5, -7, 4], 8));\nconsole.log(maximum([3,\
    \ 10, 5, -7, 4], 9));\nconsole.log(maximum([3, 10, 5, -7, 4], 10));\nconsole.log(maximum([3,\
    \ 10, 5, -7, 4], 11));\nconsole.log(maximum([3, 10, 5, -7, 4], 12));\nconsole.log(maximum([3,\
    \ 10, 5, -7, 4], 13));\nconsole.log(maximum([3, 10, 5, -7, 4], 14));\nconsole.log(maximum([3,\
    \ 10, 5, -7, 4], 15));\nconsole.log(maximum([3, 10, 5, -7, 4], 16));\nconsole.log(maximum([3,\
    \ 10, 5, -7, 4], 17));\nconsole.log(maximum([3, 10, 5, -7, 4], 18));\nconsole.log(maximum([3,\
    \ 10, 5, -7, 4], 19));\nconsole.log(maximum([3, 10, 5, -7, 4], 20));\nconsole.log(maximum([3,\
    \ 10, 5, -7, 4], 21));\nconsole.log(maximum([3, 10, 5, -7, 4], 22));\nconsole.log(maximum([3,\
    \ 10, 5, -7, 4], 23));\nconsole.log(maximum([3, 10, 5, -7, 4], 24));\nconsole.log(maximum([3,\
    \ 10, 5, -7, 4], 25));\nconsole.log(maximum([3, 10, 5, -7, 4], 26));\nconsole.log(maximum([3,\
    \ 10, 5, -7, 4], 27));\nconsole.log(maximum([3, 10, 5, -7, 4], 28));\nconsole.log(maximum([3,\
    \ 10, 5, -7, 4], 29));\nconsole.log(maximum([3, 10, 5, -7, 4], 30));\nconsole.log(maximum([3,\
    \ 10, 5, -7, 4], 31));\nconsole.log(maximum([3, 10, 5, -7, 4], 32));\nconsole.log(maximum([3,\
    \ 10, 5, -7, 4], 33));\nconsole.log(maximum([3, 10, 5, -7, 4], 34));\nconsole.log(maximum([3,\
    \ 10, 5, -7, 4], 35));\nconsole.log(maximum", "  let n = arr.length;\n  if (k\
    \ > n) {\n    k = n;\n  }\n\n  let result: number[] = [];\n  \n  for (let i =\
    \ 0; i < k; i++) {\n    let max = Number.MIN_SAFE_INTEGER;\n    for (let j = 0;\
    \ j < n; j++) {\n      if (max < arr[j]) {\n        max = arr[j];\n      }\n \
    \   }\n    result.push(max);\n  }\n\n  return result;\n}\n", "  let arr = arr.sort((a,\
    \ b) => b - a);\n  let maxk = k - 1;\n  let maxkArray = [];\n  \n  while (maxk\
    \ >= 0) {\n    maxkArray[maxk] = arr[maxk];\n    maxk--;\n  }\n  return maxkArray;\n\
    }\n", "    arr.sort((a, b) => a - b);\n    let result = [...Array(k)].map(() =>\
    \ arr[0]);\n    if (k <= arr.length) {\n        while (result.length < k) {\n\
    \            result[result.length] = arr[result.length];\n        }\n    }\n \
    \   return result;\n}\n", "  const length = arr.length\n  if (k === 1) {\n   \
    \ return arr\n  } else if (k <= 0) {\n    return arr\n  } else {\n    const maxElem\
    \ = arr[0]\n    return arr.sort((a, b) => {\n      if (a > b) {\n        return\
    \ 1\n      }\n      if (a < b) {\n        return -1\n      }\n      return 0\n\
    \    })\n  }\n}\n", "    // Your code goes here\n    let maxIndex : number = 0;\n\
    \    let temp : number = 0;\n    \n    while(maxIndex < arr.length && maxIndex\
    \ < k){\n        temp = Math.max(arr[maxIndex], arr[k]);\n        arr[maxIndex]\
    \ = temp;\n        maxIndex++;\n        k--;\n    }\n    \n    return arr;\n}",
  "  const result = new Array(k);\n  const len = arr.length;\n  let max = 0;\n\n \
    \ for (let i = 0; i < k; i++) {\n    max = (max < arr[i]) ? max : arr[i];\n  \
    \  result[i] = max;\n  }\n\n  return result;\n}\n</code>\n<|/ a tags=sorting,algorithm,big-o\
    \ |>\n<| a |>\nThe algorithm is very similar to the one that already has been\
    \ answered for different languages. Just to make a very simple explanation I will\
    \ be using JavaScript in this answer. \nHere is the code:\n<code>", "  \n}", " \
    \ for (let i = 0; i < k; ++i) {\n    let temp = -Infinity;\n    for (let j = 0;\
    \ j < arr.length; ++j) {\n      if (arr[j] > temp) {\n        temp = arr[j];\n\
    \      }\n    }\n    arr.splice(i, 0, temp);\n  }\n  return arr;\n}\nconsole.log(maximum([-3,\
    \ -4, 5], 3));\nconsole.log(maximum([4, -4, 4], 2));\nconsole.log(maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1));", "    let result: number[] = [];\n\n    while (result.length\
    \ < k) {\n        result.push(Math.max(...arr));\n    }\n\n    while (arr.length)\
    \ {\n        arr.pop();\n        result.push(Math.max(...arr));\n    }\n\n   \
    \ return result;\n}\n", "  if (arr.length <= k) {\n    return arr\n  }\n  else\
    \ if (arr.length > k) {\n    arr = arr.sort((a, b) => a - b)\n  }\n  else {\n\
    \    arr = arr.sort((a, b) => b - a)\n  }\n  return arr.slice(0, k)\n}\n", " \
    \ // First sort the given array in increasing order.\n  arr.sort((a, b) => a -\
    \ b)\n\n  // Now find the maximum k numbers in the given array.\n  return arr.slice(0,\
    \ k)\n}\n", "  let maxArr = [];\n  for(let i = 0; i < arr.length; i++){\n    let\
    \ maxNum = arr[i];\n    for(let j = 0; j < maxArr.length; j++){\n      if(arr[i]\
    \ > maxArr[j]){\n        maxNum = maxArr[j];\n      }\n    }\n    maxArr.push(maxNum);\n\
    \  }\n  return maxArr.slice(0, k);\n}\n", "  const result: number[] = []\n  let\
    \ maxVal: number = -Number.MAX_VALUE\n  \n  for (let i = 0; i < arr.length; i++)\
    \ {\n    if (arr[i] > maxVal) {\n      maxVal = arr[i]\n    }\n  }\n  \n  for\
    \ (let i = 0; i < k; i++) {\n    if (arr[i] > maxVal) {\n      maxVal = arr[i]\n\
    \    }\n  }\n  \n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] ===\
    \ maxVal) {\n      result.push(arr[i])\n    }\n  }\n  return result\n}\n", " \
    \   let result = [];\n    arr.sort((a: number, b: number) => {\n        return\
    \ a > b ? 1 : -1\n    });\n    let maxi = arr.slice();\n    let i = 0;\n    while\
    \ (i + k - 1 < maxi.length) {\n        let temp = []\n        for (let j = 0;\
    \ j < k; j++) {\n            if (maxi[i + j] < maxi[i]) {\n                temp.push(maxi[i\
    \ + j]);\n            }\n        }\n        result.push(...temp);\n        i++;\n\
    \    }\n    result.push(...maxi.slice(i + k - 1))\n    return result;\n}\n", " \
    \   arr.sort((a: number, b: number) => a - b);\n    return arr.reduce((p, c, i)\
    \ => {\n        if (i === k) {\n            return p.concat(c);\n        }\n \
    \       return p;\n    }, []);\n}\n", "  const result = [];\n  for (let i = 1;\
    \ i < arr.length; i++) {\n    if (arr[i - 1] > arr[i]) {\n      result.push(arr[i]);\n\
    \      k--;\n      if (k === 0) break;\n    }\n  }\n  return result;\n}", "  let\
    \ result = [];\n  while (k--) {\n    let max = -Infinity;\n    let maxIndex =\
    \ 0;\n    for (let i = 0; i < arr.length; i++) {\n      if (arr[i] > max) {\n\
    \        max = arr[i];\n        maxIndex = i;\n      }\n    }\n    result.push(max);\n\
    \    result.push(arr[maxIndex]);\n  }\n  return result;\n}\n", "    let max: number\
    \ = -Infinity;\n    let result: number[] = [];\n    for (let i = 0; i < k; i++)\
    \ {\n        let curMax = arr.reduce((max: number, n: number) => Math.max(max,\
    \ n), max);\n        result.push(curMax);\n    }\n    return result;\n}", "  const\
    \ result = [];\n  for (let i = 0; i < k; i++) {\n    let max_value = Math.max(...arr);\n\
    \    result.push(max_value);\n    arr.splice(arr.indexOf(max_value), 1);\n  }\n\
    \  return result;\n}\n", "  let index = 0;\n  let maxArr = [];\n  while (index\
    \ < arr.length) {\n    if (arr[index] > arr[index + 1]) {\n      maxArr.push(arr[index]);\n\
    \    }\n    index++;\n  }\n  for (let i = 1; i < k; i++) {\n    maxArr.push(Math.max(maxArr[maxArr.length\
    \ - i], maxArr[maxArr.length - i - 1]));\n  }\n  return maxArr;\n}\n", "  let\
    \ ans: number[] = [];\n  let index = 0;\n  while (index != k && index < arr.length)\
    \ {\n    let val1 = arr[index];\n    let val2 = 0;\n    for (let i = index + 1;\
    \ i < arr.length; i++) {\n      if (arr[i] > val1) {\n        val2 = arr[i];\n\
    \        val1 = val2;\n      }\n    }\n    ans[ans.length] = val2;\n    index++;\n\
    \  }\n  return ans;\n}\n", "\t\n\tvar maxArr = [];\n\tmaxArr.push(arr[0]);\n\t\
    var min = 0;\n\t\n\tfor(var i = 1; i < arr.length; i++){\n\t\tvar current = arr[i];\n\
    \t\t\n\t\tif((current) > maxArr[maxArr.length-1]){\n\t\t\tmaxArr.push(current);\n\
    \t\t}\n\t\t\n\t\telse if((current) < min){\n\t\t\tmin = current;\n\t\t}\n\t}\n\
    \t\n\tif(arr.length < k){\n\t\tk = arr.length;\n\t}\n\t\n\tfor(var i = maxArr.length\
    \ - 1; i >= k; i--){\n\t\tmaxArr.splice(i, 1);\n\t}\n\t\n\treturn maxArr;\n}\n",
  "  if (k < 1 || k >= arr.length) {\n    return [];\n  }\n  let result: number[]\
    \ = [];\n  for (let i = 0; i < k; i++) {\n    if (arr[i] > result.length) {\n\
    \      result = arr[i];\n    }\n  }\n  return result;\n}\n", "  var result = [];\n\
    \  for (var i = 0; i < k; i++){\n    result.push(arr[i]);\n  }\n  \n  result.sort(function(a,\
    \ b) {\n    return b - a;\n  });\n  \n  return result;\n}\n", "  if (k > arr.length)\
    \ return []\n\n  const max = new Array(k)\n  max.fill(-1000)\n\n  for (let i =\
    \ 0, len = arr.length; i < len; i++) {\n    max[i] = Math.max(arr[i], max[i -\
    \ 1])\n  }\n\n  return max.map(a => a + arr[i])\n}\n", "    const temp: number[]\
    \ = [];\n    let iMax = -1;\n    let jMax = -1;\n    let mMax = -1;\n    for (let\
    \ i = 0; i < arr.length; i++) {\n        if (arr[i] > mMax) {\n            mMax\
    \ = arr[i];\n            iMax = i;\n        }\n        for (let j = 0; j < arr.length;\
    \ j++) {\n            if (arr[j] > mMax && arr[j] > arr[jMax]) {\n           \
    \     mMax = arr[j];\n                jMax = j;\n            }\n        }\n  \
    \      temp.push(mMax);\n    }\n    for (let i = k; i < arr.length; i++) {\n \
    \       temp.push(arr[i]);\n    }\n    return temp;\n}", "\tlet maxArr = [];\n\
    \tlet count = 0;\n\tfor (let i = 0; i < arr.length; i++) {\n\t\tlet maxElem =\
    \ arr[i];\n\t\tlet maxIndex = 0;\n\t\tfor (let j = 0; j < count; j++) {\n\t\t\t\
    if (arr[j] > maxElem) {\n\t\t\t\tmaxElem = arr[j];\n\t\t\t\tmaxIndex = j;\n\t\t\
    \t}\n\t\t}\n\t\tif (maxIndex + 1 < k) {\n\t\t\tmaxArr.push(maxElem);\n\t\t\tcount++;\n\
    \t\t}\n\t}\n\treturn maxArr;\n}\n", "  // Write your code here\n  if (k < 1 ||\
    \ k > arr.length) return [];\n  arr.sort((a: number, b: number) => {\n    return\
    \ a > b ? -1 : a < b ? 1 : 0;\n  });\n  return arr.slice(0, k);\n}\n</code>\n\
    <|/ a tags=javascript,sorting,typescript,algorithm,arrays |>\n<| a dscore=0 |>\n\
    Another approach would be to start sorting from the end, instead of from the start.\n\
    Then we can simply find the first k elements that would make the array sorted.\
    \ Those elements are then sorted, and we proceed to find the next k (which we\
    \ know will be sorted).\nWe could use an additional array to track the next k\
    \ elements that will be sorted (to make sure we don't get an infinite loop).\n\
    I added a helper function getNextK that returns the next k elements that will\
    \ be sorted.\nThen I added a helper function hasK that checks if there are k elements\
    \ that need to be sorted.\nThe final function will take an array of numbers and\
    \ an integer.\n<code>", "\tconst result = [];\n\n\tfor (let i = k; i > 0 && arr.length\
    \ > 0; i--) {\n\t\tconst maxElement = arr[0];\n\n\t\tfor (let j = 1; j < arr.length;\
    \ j++) {\n\t\t\tif (arr[j] > maxElement) {\n\t\t\t\tmaxElement = arr[j];\n\t\t\
    \t}\n\t\t}\n\n\t\tresult.unshift(maxElement);\n\t\tarr.pop();\n\t}\n\n\treturn\
    \ result;\n}\n", "\tlet result = [];\n\tarr.sort((a, b) => a > b);\n\tfor (let\
    \ i = 0; i < k; i++) {\n\t\tresult.push(arr[i]);\n\t}\n\treturn result;\n}\n",
  "  let ans = [] as number[];\n  for (let i = 0; i < k; i++) {\n    ans.push(Math.max(...arr));\n\
    \  }\n  return ans;\n}\n", "  if (k >= arr.length) \n    return arr;\n\n  const\
    \ maximums = arr.map((e, i) => Math.max(e, arr[i]));\n\n  const newArr = new Array(k).fill(null).map(()\
    \ => maxiumums);\n\n  return newArr;\n}\n</code>\n<|/ a |>\n<| c |>\nThe solution\
    \ does not provide the same output as in the original question.\n<|/ c |>\n<|\
    \ c |>\nThis doesn't return the same results as in the question. For example,\
    \ this gives `[-3, 4, 5]` for `[4, -4, 4]` and `[-1, -2, 1]`.\n<|/ c |>\n<| c\
    \ |>\nThe code in the question returns `[-3, 1, 3, 2]`. It doesn't return `[-3,\
    \ 4, 5]`. You wrote \"`[-3, 4, 5]` for `[4, -4, 4]` and `[-1, -2, 1]`.\", but\
    \ that is not correct. Your algorithm returns `[-3, 1, 3, 2]` for `[4, -4, 4]`\
    \ and `[-1, -2, 1]`.\n<|/ c |>\n<| c |>\n, I see what you mean. My apologies\n\
    <|/ c |>\n<| a tags=javascript,arrays,algorithm,sorting |>\nI came up with a solution\
    \ that is similar to yours, but doesn't mutate the array. I've tested it with\
    \ many examples and it seems to work well. I'm sure it can be optimized, but the\
    \ concept is here.\n\n<code>", "  if (arr.length <= k) {\n    return arr\n  }\n\
    \  let largest = arr[0]\n  let i = k - 1\n  for (let j = 0; j < arr.length; j++)\
    \ {\n    if (arr[j] > largest && j > i) {\n      largest = arr[j]\n      i = j\n\
    \    }\n  }\n  return arr.slice(0, i).concat(arr.slice(i + 1))\n}\n", "  const\
    \ map = new Map();\n  arr.forEach(element => {\n    if (map.has(element)) {\n\
    \      map.set(element, map.get(element) + 1);\n    } else {\n      map.set(element,\
    \ 1);\n    }\n  });\n\n  const maximums = [];\n\n  for (const [key, value] of\
    \ map.entries()) {\n    if (value >= k) {\n      maximums.push(key);\n    }\n\
    \  }\n\n  return maximums;\n}\n", "  if (arr.length === 0) return arr\n  if (k\
    \ === 0) return arr\n  if (k < 0) return arr\n  if (k > arr.length) return arr\n\
    \n  // sort arr\n  let temp: number[] = []\n  for (let i = 0; i < k; i++) {\n\
    \    let cur = arr[i]\n    for (let j = 0; j < arr.length; j++) {\n      if (arr[j]\
    \ > cur) {\n        arr[j] = cur\n      }\n    }\n  }\n  // sort temp\n  for (let\
    \ i = 0; i < k; i++) {\n    let cur = arr[i]\n    for (let j = 0; j < temp.length;\
    \ j++) {\n      if (temp[j] > cur) {\n        temp[j] = cur\n      }\n    }\n\
    \  }\n  // return temp\n  return temp\n}\n", "  const length = arr.length\n  let\
    \ max = 0\n  let curr = 1\n  for (let i = 0; i < length; i++) {\n    if (arr[i]\
    \ > arr[curr - 1]) {\n      max = arr[i]\n    } else {\n      if (max - arr[i]\
    \ > curr - 1) {\n        curr = i\n      }\n    }\n  }\n  if (max - arr[length\
    \ - 1] > length - k) {\n    return arr.slice(curr + 1, curr + k)\n  }\n  return\
    \ arr.slice(curr + 1, curr + k + 1)\n}\n", "  const n = arr.length;\n  const result\
    \ = new Array(n);\n  for (let i = 0; i <= k; i++) {\n    result[i] = Math.max(arr[i]);\n\
    \  }\n  return result;\n}\n", "  const result = [...arr]\n  for (let i = 0; i\
    \ < k; i++) {\n    let max = 0\n    for (let j = 0; j < result.length; j++) {\n\
    \      if (result[j] > max) {\n        max = result[j]\n      }\n    }\n    result.push(max)\n\
    \  }\n  return result\n}\n", "  if (k === 0) return arr;\n  if (k > arr.length)\
    \ return arr;\n  if (k === 1) return arr[0] >= arr[1] ? arr : [-arr[0], arr[0]];\n\
    \n  return arr.reduce((a, b) => a > b ? a : b);\n}\n", "  const result: number[]\
    \ = [];\n  for (let i = 0; i < k; i++) {\n    result.push(arr[i]);\n  }\n  for\
    \ (let i = 1; i < arr.length; i++) {\n    let index = result.indexOf(Math.max(...result));\n\
    \    if (index === -1) {\n      index = result.length;\n      result[index] =\
    \ arr[i];\n    }\n    result[index] = Math.max(...result);\n  }\n  return result;\n\
    }\n", "  let sortedArr = arr.slice();\n  let max = -Number.MAX_VALUE;\n  let i\
    \ = 0;\n  while (i < sortedArr.length && sortedArr[i] <= max) {\n    max = sortedArr[i];\n\
    \    i++;\n  }\n  sortedArr.splice(0, i);\n  return sortedArr.splice(0, k);\n\
    }\n", "  var result: number[] = [];\n  var len = arr.length;\n  var maxElem =\
    \ -Infinity;\n  for (var i = 0; i < len; i++) {\n    if (arr[i] > maxElem) {\n\
    \      maxElem = arr[i];\n    }\n  }\n  for (var i = 0; i < k; i++) {\n    result.push(maxElem);\n\
    \    maxElem -= 1;\n  }\n  return result;\n}\n", "    arr.sort((a, b) => b - a);\n\
    \    return arr.slice(0, k);\n}", "  const m = arr.length\n  const n = arr[0]\n\
    \  let result: number[] = []\n  let max = 0\n  for (let i = 0; i < k; i++) {\n\
    \    let m = 0\n    while (m < m && arr[m] > arr[max]) m++\n    result.push(arr[max\
    \ - m])\n    max = m\n  }\n  result.push(arr[n])\n  return result\n}\n", "  for\
    \ (let i = 0; i < arr.length; i++) {\n    for (let j = arr.length - 1; j >= 0;\
    \ j--) {\n      if (arr[j] >= arr[j - k]) {\n        arr[j + 1] = arr[j];\n  \
    \    } else {\n        arr[j + 1] = arr[j - k];\n        break;\n      }\n   \
    \ }\n  }\n  return arr;\n}\n", "    const maximums: number[] = [];\n    let maxLength\
    \ = 0;\n    for (let i = 0; i < k; i++) {\n        if (maximums.length == 0) {\n\
    \            maxLength = arr.length;\n        } else if (maximums[maximums.length\
    \ - 1] < arr[i]) {\n            maxLength = maximums.length;\n        }\n    \
    \    if (arr[i] > arr[i + maxLength]) {\n            maximums.push(arr[i]);\n\
    \        }\n    }\n    return maximums;\n}\n", "    let max = [];\n    for (let\
    \ i = 0; i < k; i++) {\n        let max = Math.max(max, arr[i]);\n    }\n    return\
    \ max;\n}\n", "  // TODO: Implement Function\n}\n", "    // write your code here\n\
    \    let sortedArr = [];\n    sortedArr = arr.sort((a: number, b: number) => {\n\
    \        return a > b ? 1 : -1;\n    });\n    let resultArray = [];\n    for (let\
    \ i = 0; i <= k; i++) {\n        resultArray.push(sortedArr[i - 1]);\n    }\n\
    \    return resultArray;\n}\n</code>\n<|/ a tags=sorting,javascript,typescript\
    \ |>\n<| a dscore=2 |>\nI did a solution in Typescript for this:\n<code>\npublic\
    \ static max(arr: Array<number>): Array<number> {\n    return arr.sort((a: number,\
    \ b: number) => {\n        return a > b ? 1 : -1;\n    });\n}\n</code>\n<|/ a\
    \ tags=sorting,javascript,typescript |>\n<| a |>\nThis solution takes more time\
    \ as it sorts the array twice.\n<code>", "    arr.sort((a: number, b: number)\
    \ => a - b);\n    return arr.slice(0, k);\n}\n", "  if (k <= 0) return [];\n \
    \ let result: number[] = [];\n  for (let i = 0; i < k; i++) {\n    result.push(Math.max(...arr));\n\
    \  }\n  return result;\n}\n", "    let max: number[] = [];\n    let result: number[]\
    \ = [];\n    let mid: number = 0;\n    for (let i = 0; i < arr.length; i++) {\n\
    \        if (max === null || arr[i] > max[0]) {\n            mid = Math.floor(i\
    \ / k);\n            max.push(arr[i]);\n        }\n    }\n    return max;\n}\n",
  "  \n  const result = [];\n  \n  for (let i = 0; i < k; i++)\n    result.push(arr[i]);\n\
    \  \n  for (let i = k; i < arr.length; i++)\n    result.push(arr[i]);\n  \n  return\
    \ result;\n}\n", "  let ret = new Array(k).fill(null);\n  for (let i = 0; i <\
    \ k; ++i) {\n    let max = -1000\n    for (let j = 0; j < arr.length; ++j) {\n\
    \      max = Math.max(max, arr[j])\n    }\n    ret[i] = max\n  }\n  return ret;\n\
    }\n", "    let result: number[] = [];\n    for (let i = 0; i < k; i++) result.push(arr[i]);\n\
    \    result.sort((a, b) => a - b);\n    return result;\n}\n", "  const result\
    \ = [];\n  result.length = k;\n  const maxValue = Math.max.apply(null, arr);\n\
    \  arr.forEach((el) => {\n    if (el > maxValue) {\n      result[k] = el;\n  \
    \    k++;\n    }\n  });\n  return result;\n}\n", "    const arr = arr.sort((a,\
    \ b) => a - b);\n    const result = [];\n    for (let i = 1; i < k; i++) {\n \
    \       result[i] = arr[i];\n    }\n    return result;\n}\n", "  let minIndex\
    \ = 0;\n  let maxIndex = 0;\n  let minElem = Number.MIN_SAFE_INTEGER;\n  let maxElem\
    \ = Number.MAX_SAFE_INTEGER;\n\n  for (let i = 0; i < k; i++) {\n    if (arr[i]\
    \ < minElem) {\n      minElem = arr[i];\n      minIndex = i;\n    }\n    if (arr[i]\
    \ > maxElem) {\n      maxElem = arr[i];\n      maxIndex = i;\n    }\n  }\n  return\
    \ [\n    arr[minIndex],\n    ...arr.slice(minIndex + 1, maxIndex + 1),\n    arr[maxIndex],\n\
    \  ];\n}\n", "  let max: number[] = [];\n  let i = 0;\n  while (i < k) {\n   \
    \ let m = -1;\n    for (let j = 0; j < arr.length; j++) {\n      if (arr[j] >\
    \ arr[m]) m = j;\n    }\n    max.push(arr[m]);\n    arr.splice(m, 1);\n    i++;\n\
    \  }\n  return max;\n}\n", "  const result = [];\n  let maxElem = arr[0];\n  for\
    \ (let i = 0; i < arr.length; i++) {\n    if (arr[i] > maxElem) {\n      maxElem\
    \ = arr[i];\n    }\n  }\n  result.push(maxElem);\n  if (k > 1) {\n    for (let\
    \ i = 1; i < k; i++) {\n      const ele = arr[arr.length - i];\n      result.push(ele);\n\
    \    }\n  }\n  return result;\n}\n", "  if (k > arr.length) {\n    return [];\n\
    \  }\n  let result: number[] = [],\n    max = arr[0];\n  for (let i = 1; i < k;\
    \ i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n  }\n  result.push(max);\n\
    \  return result.sort((a, b) => b - a);\n}\n\nconsole.log(maximum([-3, -4, 5],\
    \ 3));\nconsole.log(maximum([4, -4, 4], 2));\nconsole.log(maximum([-3, 2, 1, 2,\
    \ -1, -2, 1], 1));\nconsole.log(maximum([-1, 2, -3, 2, 1, 2, -1, -2, 1], 3));</code>\n\
    \nYou can find the above code here\n<|/ a dscore=0 tags=javascript,typescript\
    \ |>\n<| a dscore=0 |>\nThis solution is also working:\n<code>\nvar numbers =\
    \ [-10, -7, 0, 8, 4, -22, 90];\nvar results = [];\nvar result = [];\n\nfor (var\
    \ i = 0; i < numbers.length; i++) {\n  var max = Number.NEGATIVE_INFINITY;\n \
    \ var index = 0;\n  \n  for (var j = 0; j < numbers.length; j++) {\n    if (numbers[j]\
    \ > max) {\n      max = numbers[j];\n      index = j;\n    }\n  }\n  \n  results.push(max);\n\
    \  result.push(numbers[i]);\n  results[i] = result[index];\n}\n\nconsole.log(results);\n\
    console.log(result);\n</code>\n<|/ a tags=javascript,typescript |>\n<| a |>\n\
    <code>\nconst numbers = [10, 5, -3, 20, 100, 2, -99];\nconst maximum = numbers.reduce((prev,\
    \ current, index) => {\n  const previousMax = prev[index];\n  const currentMax\
    \ = current > previousMax ? current : previousMax;\n  return [...prev, [currentMax]];\n\
    }, []);\n\nconsole.log(maximum);</code>\n<|/ a dscore=0 tags=javascript,typescript\
    \ |>\n<| c |>\nWhile this code may provide a solution to the question, it's better\
    \ to add context as to why/how it works. This can help future users learn and\
    \ eventually apply that knowledge to their own code. You are also likely to have\
    \ positive feedback from users in the form of upvotes, when the code is explained.\n\
    <|/ c |>\n<| a |>\n<code>", "  let maxLen: number = 0;\n  let maxA: number[] =\
    \ [];\n  for (let i = 0; i < arr.length; i++) {\n    if (maxLen < k) {\n     \
    \ maxA.length = k;\n    }\n    if (arr[i] > maxA[maxLen - 1]) {\n      maxA[maxLen]\
    \ = arr[i];\n      maxLen++;\n    }\n  }\n  return maxA;\n}\n", "  const n = arr.length;\n\
    \  if (k > n) {\n    return arr;\n  }\n  const result = new Array();\n  const\
    \ start = 0;\n  for (let i = 1; i < k; i++) {\n    let max = arr[i];\n    let\
    \ index = i;\n    for (let j = i; j < n; j++) {\n      if (arr[j] > max) {\n \
    \       index = j;\n        max = arr[j];\n      }\n    }\n    result.push(max);\n\
    \    arr.splice(index, 1);\n  }\n  return result;\n}\n", "    const arr = arr\n\
    \    const k = k\n    const len = arr.length\n\n    if (len === 0) {\n       \
    \ return []\n    }\n\n    if (len > k) {\n        return arr\n    }\n\n    let\
    \ max = -Infinity\n    for (let i = 0; i < len; i++) {\n        if (arr[i] > max)\
    \ {\n            max = arr[i]\n        }\n    }\n\n    let result = []\n    for\
    \ (let i = 0; i < k; i++) {\n        if (arr[i] > max) {\n            result.push(max)\n\
    \        }\n    }\n\n    return arr.concat(result)\n}\n", "    const result =\
    \ [];\n    let maxValue = arr[0];\n    for (let i = 1; i < k; ++i) {\n       \
    \ if (maxValue < arr[i]) {\n            maxValue = arr[i];\n        }\n    }\n\
    \    for (let i = 0; i < k; ++i) {\n        if (arr[i] > maxValue) {\n       \
    \     result.push(maxValue);\n            maxValue = arr[i];\n        }\n    }\n\
    \    result.push(maxValue);\n    return result;\n}\n", "  // \u521D\u59CB\u5316\
    \u6700\u5927\u503C\u6570\u7EC4\n  const max: number[] = [];\n  // \u521D\u59CB\
    \u5316\u6700\u5927\u503C\u6570\u7EC4\u7684\u957F\u5EA6\n  let maxLength = 0;\n\
    \  // \u904D\u5386\u6570\u7EC4\n  for (let i = 0; i < arr.length; i++) {\n   \
    \ if (arr[i] > max[k - 1]) {\n      max[k - 1] = arr[i];\n      maxLength--;\n\
    \    }\n  }\n  // \u66F4\u65B0\u6700\u5927\u503C\u6570\u7EC4\u7684\u957F\u5EA6\
    \n  if (maxLength > 0) {\n    max[k] = max[k - 1];\n    maxLength--;\n  }\n  //\
    \ \u5982\u679C k \u5927\u4E8E\u6570\u7EC4\u957F\u5EA6\n  if (maxLength > 0) {\n\
    \    // \u5220\u9664 k \u4E2A\u6570\u7EC4\u6700\u5927\u503C\n    for (let i =\
    \ k; i < arr.length; i++) {\n      max[i] = max[i - 1];\n    }\n  }\n  return\
    \ max;\n}\n", "  let result: number[] = [];\n\n  for (let i = 0; i < k; i++) {\n\
    \    let temp: number = arr[i];\n    result.push(temp);\n  }\n\n  return result.sort((a,\
    \ b) => a - b);\n}\n", "  let result = [];\n  \n  for (let i = k; i < arr.length;\
    \ i++) {\n    if (arr[i] > arr[i - 1]) {\n      result.unshift(arr[i]);\n    }\n\
    \  }\n  \n  for (let i = k + 1; i < arr.length; i++) {\n    if (arr[i] > result[result.length\
    \ - 1]) {\n      result.push(arr[i]);\n    }\n  }\n  \n  return result;\n}\n",
  "  let max: number[] = []\n  arr.sort((a, b) => b - a)\n  for (let i = 1; i <= k;\
    \ i++) {\n    if (max[i - 1] < arr[i - 1]) {\n      max[i - 1] = Math.max(max[i\
    \ - 1], arr[i - 1])\n    }\n  }\n  return max\n}\n", "  const result = [...arr]\n\
    \  for (let i = 0; i < k; i++) {\n    let max = Number.MIN_SAFE_INTEGER\n    for\
    \ (let j = 0; j < result.length; j++) {\n      if (max < result[j]) {\n      \
    \  max = result[j]\n      }\n    }\n    result.push(max)\n  }\n  return result\n\
    }\n", "    let max = [...arr].sort((a: number, b: number) => b - a);\n    let\
    \ i: number;\n    for (i = 0; i < k; i++) {\n        if (arr[i] > max[i]) {\n\
    \            max = arr;\n            break;\n        }\n    }\n    return max;\n\
    }\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
