name: HumanEval_117_select_words
language: ts
prompt: "//Given a string s and a natural number n, you have been tasked to implement\
  \ \n// a function that returns an array of all words from string s that contain\
  \ exactly \n// n consonants, in order these words appear in the string s.\n// If\
  \ the string s is empty then the function should return an empty array.\n// Note:\
  \ you may assume the input string contains only letters and spaces.\n// Examples:\n\
  // >>> select_words(\"Mary had a little lamb\", 4)\n// [\"little\"]\n// >>> select_words(\"\
  Mary had a little lamb\", 3)\n// [\"Mary\", \"lamb\"]\n// >>> select_words(\"simple\
  \ white space\", 2)\n// []\n// >>> select_words(\"Hello world\", 4)\n// [\"world\"\
  ]\n// >>> select_words(\"Uncle sam\", 3)\n// [\"Uncle\"]\nfunction select_words(s:\
  \ string, n: number): string[] {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
  \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
  \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple\
  \ white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"\
  ]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
  \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
  d\", \"f\"]);\n}\n\ntest();"
completions: ["\ts = s.trim();\n\tif (n === 0) return [];\n\treturn s.split(' ').filter(w\
    \ => w.split('').filter(c => c === 'a' || c === 'e' || c === 'i' || c === 'o'\
    \ || c === 'u').length === n).map(w => w.trim());\n}\n", "    var arr: string[]\
    \ = [];\n    for(var i = 0; i< s.length; i++) {\n        var word: string = s.split('\
    \ ').filter(word => {\n            return word.split('').filter(c => c !== 'a'\
    \ && c !== 'A' && c !== 'e' && c !== 'E' && c !== 'i' && c !== 'I' && c !== 'o'\
    \ && c !== 'O' && c !== 'u' && c !== 'U' && c !== 'y')\n            .filter(c\
    \ => c !== ' ')\n            .length == n;\n        }).filter(word => word.split('').filter(c\
    \ => c !== 'a' && c !== 'A' && c !== 'e' && c !== 'E' && c !== 'i' && c !== 'I'\
    \ && c !== 'o' && c !== 'O' && c !== 'u' && c !== 'U' && c !== 'y').length ==\
    \ n.length)[0]\n        arr.push(word);\n    }\n    return arr;\n}\n", "\tlet\
    \ result: string[] = [];\n\t\n\tlet words = s.split(' ');\n\t\n\t// Add words\
    \ that contains the given number of consonants\n\tfor (let word of words) {\n\t\
    \tif (word.includes('a') || word.includes('e') || word.includes('i') || word.includes('o')\
    \ || word.includes('u') || word.includes('y'))\n\t\t\tresult.push(word);\n\t}\n\
    \t\n\treturn result;\n}\n", "    let words: string[] = [];\n    \n    if (s ==\
    \ \"\") {\n        return words;\n    }\n    \n    let consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    ;\n    \n    for (let i = 0; i < s.length; i++) {\n        let c = s[i];\n   \
    \     \n        // check whether c is a consonant\n        if (consonants.indexOf(c)\
    \ < 0) {\n            continue;\n        }\n        \n        // count the number\
    \ of consonants in the word\n        let consonant_count = 0;\n        for (let\
    \ j = 0; j < s.length; j++) {\n            if (consonants.indexOf(s[j]) >= 0)\
    \ {\n                consonant_count++;\n            }\n        }\n        \n\
    \        // check whether the number of consonants is equals to the target number\n\
    \        if (consonant_count === n) {\n            words.push(s[i]);\n       \
    \ }\n    }\n    \n    return words;\n}\n", "}\n</code>\nAnd here is another solution\n\
    <code>", "    if (n === 0) return [];\n    return s.split(' ').filter(w => w.endsWith(selectConsonants(w))).sort();\n\
    }\n", "  let arr = [];\n  for (let i = 0; i < s.length; i++) {\n    for (let j\
    \ = 0; j < n; j++) {\n      if (s[i].charCodeAt(j) >= 65 && s[i].charCodeAt(j)\
    \ <= 90) {\n        arr.push(s[i]);\n      }\n    }\n  }\n  return arr;\n}\n",
  "  var ans = [];\n  s = s.replace(/\\s/g, \"\"); //get rid of white space characters\n\
    \  ans = s.split(\" \"); //split string to an array\n  return ans.filter(function\
    \ (word: string) {\n    return word.split('')\n      .every(function (ch: string)\
    \ {\n        return ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch ==\
    \ 'u';\n      });\n  }).filter(function (word: string) {\n    return word.split('')\n\
    \      .every(function (ch: string) {\n        return ch == 'a' || ch == 'e' ||\
    \ ch == 'i' || ch == 'o' || ch == 'u';\n      });\n  });\n}", '}', "\tlet words\
    \ = [];\n\tlet i = 0;\n\twhile (i <= s.length - n) {\n\t\tif (s.charAt(i) !==\
    \ \" \" && s.charAt(i) !== \"\") {\n\t\t\twords.push(s.substr(i, n));\n\t\t\t\
    i += n;\n\t\t}\n\t\telse {\n\t\t\ti++;\n\t\t}\n\t}\n\treturn words;\n}\n", " \
    \ const consonants = consonants(s)\n  const arr = s.split(\" \")\n  let result\
    \ = new Array(n + 1)\n  for (let i = 1; i < n + 2; i++) {\n    let word = ''\n\
    \    for (let j = 1; j < n; j++) {\n      word += arr[i].slice(0, j) + ' '\n \
    \   }\n    result[i] = word\n  }\n  return result.filter((word) => !consonants.includes(word)).slice(0,\
    \ n)\n}\n", "    let result: string[] = [];\n    for (let i = 0; i < s.length;\
    \ ) {\n        let word = s.substr(i, n);\n        if (word.length == n) {\n \
    \           result.push(word);\n            i += n;\n        } else {\n      \
    \      i += word.length;\n        }\n    }\n    return result;\n}\n</code>\n<|/\
    \ a tags=algorithm,sorting,string,javascript dscore=0 |>\n<| a tags=algorithm,sorting,string,javascript\
    \ |>\nI believe that using regular expressions is probably faster than iterating\
    \ over every character in the string and checking if that character is a consonant.\
    \ I would be interested to see how it compares to iterating over every character\
    \ in the string and pushing into a stack instead.\nA regular expression that matches\
    \ consonants is \\p{L} and \\p{N}. \\p{L} matches consonants, and \\p{N} matches\
    \ numbers. \nSo I would start with a regular expression like /^[\\p{L}\\p{N}]+$/\
    \ and push every consonant into the stack. Then iterate over the string, if any\
    \ characters are in the stack then they are part of a word and should be pushed\
    \ onto the results array. \nFor each word in the string, add spaces to the end\
    \ until there aren't enough characters to fill the word with the spaces, or a\
    \ space is added to the end. Once a space is added to the end, iterate again until\
    \ there are enough characters to fill the word. \nA good JavaScript regex reference\
    \ is at https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp\n\
    <|/ a dscore=0 |>\n<| a dscore=0 tags=algorithm,sorting,string,javascript |>\n\
    Another option would be to use Array#reduce, Array#split, Array#concat and Array#indexOf\
    \ methods.\nThe approach is to split the string into an array at each space; for\
    \ each word, split it into an array at each space and push the second element\
    \ of the nested array into an array (wordArray) that is being created on each\
    \ iteration of the reduce method. Then at the end of each iteration of the reduce\
    \ method, concat the wordArray back together with the space and push it back onto\
    \ the main array (finalArray).\nThis approach would involve using Array#reduce\
    \ and Array#concat.\n\n<code>", "  const words = s.split(\" \");\n  let index\
    \ = 0;\n  let result: Array<string> = [];\n  while (words.length > 0 && index\
    \ < words.length) {\n    const word = words[index];\n    const chars = word.split(\"\
    \");\n    if (chars.filter(c => vowels.indexOf(c) === -1).length === n) {\n  \
    \    result.push(word);\n    }\n    index++;\n  }\n  return result;\n}\n", " \
    \ if (s.length === 0) {\n    return [];\n  }\n\n  var counter: number[] = new\
    \ Array(n);\n  for (var i = 0; i < n; i++) {\n    counter[i] = 0;\n  }\n\n  var\
    \ result: string[] = [];\n  var startIndex: number = -1;\n  for (var i = 0; i\
    \ < s.length; i++) {\n    var letter = s[i];\n    if (counter === n) {\n     \
    \ result.push(s.substring(startIndex + 1));\n      return result;\n    }\n\n \
    \   if (letter === \" \") {\n      startIndex = i + 1;\n    } else if (letter\
    \ === \"a\") {\n      counter[0] += 2;\n    } else if (letter === \"i\") {\n \
    \     counter[1] += 3;\n    } else if (letter === \"u\") {\n      counter[2] +=\
    \ 4;\n    } else {\n      counter[letter === \"s\" ? 0 : 1] += 1;\n    }\n  }\n\
    \  return result;\n}\n</code>\nI do not know if you need to use the function or\
    \ not, but if not, then you should be able to easily adapt your existing implementation\
    \ to meet the requirements of this task.\n<|/ a dscore=1 |>\n<| a tags=javascript,algorithm,string\
    \ |>\nThis is not the answer to the question but the way to solve the problem:\n\
    \n<code>\nconst words = 'A man is walking in a park'.split(' ');\n\nconst letter\
    \ = String.fromCharCode(\"a\".charCodeAt() + 2);\n\nconst result = words\n  .filter((word)\
    \ => word.match(new RegExp(letter + '+', 'g')))\n  .map(word => word.replace(letter,\
    \ \"\"));\n\nconsole.log(result);</code>\n<|/ a dscore=1 |>\n<| a tags=javascript,algorithm,string\
    \ |>\nMy solution with ES6 \n\n<code>\nvar text = \"this is a sentence\"\n\nvar\
    \ count = (text, n) => {\n  return text\n    .split(\"\")\n    .reduce((prev,\
    \ curr) => {\n      curr = (curr.toLowerCase() === \"a\") ? true : false;\n  \
    \    if(prev === false || curr === false){\n        prev = (prev === true) ? false\
    \ : true;\n      }\n      if(prev && curr){\n        prev = (prev === true) ?\
    \ true : false;\n      }\n      if(prev){\n        return prev;\n      }\n   \
    \   return curr;\n    }, false);\n};\n\nconsole.log(count(text, 1));\nconsole.log(count(text,\
    \ 2));\nconsole.log(count(text, 3));</code>\n<|/ a dscore=1 |>\n<| c |>\nThis\
    \ fails for `count(text, 4)`\n<|/ c |>\n<| a tags=javascript,algorithm,string\
    \ |>\nYou could take a closure over an array for the consonants and a counter\
    \ for the number of consonants.\n\n<code>\nconst\n    selectWords = (s, n) =>\
    \ s.split(' ').filter(w => w.match(new RegExp('[^aeiouyAEIOUY]', 'g'))).", " \
    \ if (n == 0) {\n    return [];\n  }\n  const array: number[] = [];\n  for (let\
    \ i = 0; i < s.length; i += 1) {\n    const char = s[i];\n    for (let j = 0;\
    \ j < n; j += 1) {\n      if (char === ' ' || char === '\\n') {\n        continue;\n\
    \      }\n      if (char === 'b' || char === 'c' || char === 'p' || char === 'v'\
    \ || char === 'x') {\n        continue;\n      }\n      if (char === 'a' || char\
    \ === 'e' || char === 'i' || char === 'o' || char === 'u') {\n        continue;\n\
    \      }\n      if (char === 'h' || char === 'l' || char === 'n' || char === 'r'\
    \ || char === 's' || char === 't' || char === 'w') {\n        continue;\n    \
    \  }\n      array.push(char);\n    }\n  }\n  return array;\n}\n", "  let words:\
    \ string[] = [];\n  if (s.length == 0) {\n    return [];\n  }\n  const letters\
    \ = s.replace(/\\s/g, '').split('');\n  for (let i = 0; i < letters.length; i++)\
    \ {\n    const count = 0;\n    for (let j = 0; j < letters.length; j++) {\n  \
    \    if (letters[i] == letters[j]) {\n        count++;\n      }\n    }\n    if\
    \ (count == n) {\n      words.push(letters[i]);\n    }\n  }\n  return words;\n\
    }\n</code>\n<|/ a |>\n<| c |>\nThis does not answer the question. It does not\
    \ use regular expressions, it uses a nested loop.\n<|/ c |>\n<| a tags=string,javascript\
    \ |>\n<code>\nconst words = 'Mary had a little lamb'.split(' ');\nconst n = 4;\n\
    \nconst result = words\n  .filter(w => w.split('').slice(0, n).join('').split('').length\
    \ == n);\n\nconsole.log(result);</code>\n<|/ a dscore=2 |>\n<| c |>\nThis does\
    \ not answer the question. It does not use regular expressions, it uses a nested\
    \ loop.\n<|/ c |>\n<| a tags=string,javascript |>\n<code>\nvar string = 'Mary\
    \ had a little lamb';\nvar n = 4\nvar result = string.split(' ')\n.filter(w =>\
    \ w.split('').slice(0, n).join('').split('').length == n)\n.map(x => x.split('\
    \ ')[0])\nconsole.log(result);</code>\n<|/ a dscore=2 |>\n<| c |>\nThis does not\
    \ answer the question. It does not use regular expressions, it uses a nested loop.\n\
    <|/ c |>\n<| a dscore=2 |>\n<code>\nvar string = 'Mary had a little lamb';\nvar\
    \ n = 4\nvar result = string.split(' ')\n.filter(w => w.split('').slice(0, n).join('').split('').length\
    \ == n)\n.map(x => x.split(' ')[0])\nconsole.log(result);</code>\n<|/ a tags=string,javascript\
    \ |>\n<| c |>\nThis does not answer the question. It does not use regular expressions,\
    \ it uses a nested loop.\n<|/ c |>\n<| c |>\nPlease don't post only code as answer,\
    \ but also provide an explanation what your code does and how it solves the problem\
    \ of the question. Answers with an explanation are usually more helpful and of\
    \ better quality, and are more likely to attract upvotes.\n<|/ c |>\n<| a |>\n\
    <code>", "\t\n}\n", "  let a: string[] = [];\n\n  for (var i = 0; i < s.length;\
    \ i++) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o'\
    \ || s[i] === 'u') {\n      a[i] = s[i];\n    } else if (s[i] === 'n') {\n   \
    \   if (a.length > n) {\n        a.splice(0, a.length - n); //Removing the first\
    \ n consonants.\n      }\n    }\n  }\n  return a;\n}\n", "\tvar words: string[]\
    \ = [];\n\tfor (var i = 0; i < s.length; i++) {\n\t\tif (s.charAt(i) == ' ') {\n\
    \t\t\tif (words.length == n)\n\t\t\t\tbreak;\n\t\t}\n\t\tif (s.charAt(i) == '\
    \ ' || s.charAt(i) == ',') {\n\t\t\tif (words.length != n)\n\t\t\t\tbreak;\n\t\
    \t}\n\t\telse {\n\t\t\tif (s.charAt(i) != 'A' || s.charAt(i) != 'a') {\n\t\t\t\
    \twords.push(s.charAt(i));\n\t\t\t}\n\t\t}\n\t}\n\treturn words;\n}\n", "    let\
    \ arr: string[] = [];\n    let word = \"\";\n    for (let i = 0; i < s.length;\
    \ i += 1) {\n        let character = s[i];\n        if (character === \" \") {\n\
    \            arr.push(word);\n            word = \"\";\n        } else {\n   \
    \         if (n === 0) {\n                arr.push(word);\n            } else\
    \ {\n                if (n === 1) {\n                    arr.push(character);\n\
    \                } else {\n                    if (word.indexOf(character) !==\
    \ -1) {\n                        word = \"\";\n                    } else {\n\
    \                        word += character;\n                    }\n         \
    \       }\n            }\n        }\n    }\n    return arr;\n}\n", "  \n  if(s\
    \ === \"\") {\n    return [];\n  }\n  \n  const list: string[] = [];\n  \n  for(let\
    \ i = 0; i < s.length; i++) {\n    if(!s.substr(i, n).match(/[aeiouAEIOU]/)) {\n\
    \      list.push(s.substr(i, n));\n    }\n  }\n  \n  return list;\n}\n", "   \
    \ let i = 0;\n    while (i <= s.length) {\n        let j = 0;\n        while (j\
    \ <= n - 1) {\n            if (s[i] === s[j]) {\n                let result: string[]\
    \ = [];\n                for (let k = 0; k < i; k++) {\n                    result.push(s[i]);\n\
    \                }\n                for (let k = i; k < s.length; k++) {\n   \
    \                 result.push(s[j]);\n                }\n                return\
    \ result;\n            }\n            j++;\n        }\n        i++;\n    }\n \
    \   return [];\n}", "    let arr: [] = []\n    for (let i = 0; i < s.length; i++)\
    \ {\n        let c: number = s.charCodeAt(i)\n        if (c == 0 || c == 76 ||\
    \ c == 106 || c == 110) {\n            continue\n        }\n        let letter:\
    \ string = s.substring(i, i + 1)\n        if (arr.indexOf(letter) == -1) {\n \
    \           arr.push(letter)\n        }\n    }\n    return arr\n}\n", "\t// TODO:\
    \ implement here\n\t\n}\n", "  return s.split(\" \").filter((word) => word.match(/[aeiou]/)\
    \ && word.split(\"\").length == n).toLowerCase();\n}\n", "    let res = [];\n\
    \    if (s === \"\") {\n        return [];\n    }\n    let i = 1;\n    let lastWord\
    \ = s.substr(0, i);\n    do {\n        let word = lastWord.substr(0, i);\n   \
    \     if (s.indexOf(word) === -1) {\n            break;\n        }\n        res.push(lastWord);\n\
    \        lastWord = s.substr(i);\n        i = n + 1; // Increment to skip the\
    \ word\n    } while (i <= lastWord.length);\n    return res.reverse();\n}", " \
    \ return s.split(\" \").filter(word => checkConsonants(word, n, true)).sort()\n\
    }\n", "\tconst vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n\tconst vowels_map\
    \ = new Map();\n\tfor (let i = 0; i < vowels.length; i++) {\n\t\tvowels_map.set(vowels[i],\
    \ false);\n\t}\n\n\tlet vowel_count = 0;\n\tfor (let word of s.split(\" \")) {\n\
    \t\tvowel_count = 0;\n\t\tfor (let letter of word) {\n\t\t\tif (vowels_map.has(letter))\
    \ {\n\t\t\t\tvowel_count++;\n\t\t\t}\n\t\t}\n\t\tif (vowel_count == n) {\n\t\t\
    \tvowels_map.set(word.toLowerCase(), true);\n\t\t}\n\t}\n\t\n\tlet result = [];\n\
    \tfor (let [key, value] of vowels_map) {\n\t\tif (value) {\n\t\t\tresult.push(key);\n\
    \t\t}\n\t}\n\t\n\treturn result;\n}", "    \n    let words: string[] = [];\n \
    \   \n    if (s === undefined || n === undefined) {\n        return [];\n    }\n\
    \    \n    for (let i = 0; i < s.length; i++) {\n        if (s.charCodeAt(i) >\
    \ 96 && s.charCodeAt(i) < 123 && s.charCodeAt(i) !== 32 && s.charCodeAt(i) !==\
    \ 160) {\n            words.push(s.substring(i, i + n));\n        }\n    }\n \
    \   \n    return words;\n}\n", "  let count = 0;\n  let arr: string[] = [];\n\
    \  \n  for (let i = 0; i < s.length; i++) {\n    arr[i] = s.split('').filter(e\
    \ => e.includes(consonants[i]))\n    if (arr[i].length == n) count++;\n  }\n \
    \ \n  if (count === 0) return arr\n  else return [];\n}\n", "    if (s.length\
    \ === 0) {\n        return [];\n    }\n\n    const words = s.split(\" \");\n \
    \   const result = new Array<string>();\n\n    for (let i = 0; i < words.length;\
    \ i++) {\n        const word = words[i];\n        if (count_consonants(word) ===\
    \ n) {\n            result.push(word);\n        }\n    }\n\n    return result;\n\
    }\n", "    var arr: string[] = [];\n    for (var i = 0; i<s.length; i++) {\n \
    \       //add words to arr if they contain exactly n consonants\n        if(s.indexOf(i+\"\
    \") !== -1 && s.split(i).length >= n) {\n            arr.push(s.split(i));\n \
    \       }\n    }\n    return arr;\n}\n</code>\n<|/ a tags=javascript,arrays,recursion\
    \ |>\n<| c |>\nThis won't work as expected for input `\"Uncle sam\", 3`\n<|/ c\
    \ |>\n<| c |>\nThat was my bad, I misread the question. I will edit my answer\
    \ to fix it.\n<|/ c |>\n<| a dscore=0 |>\nThis one is a bit more general, with\
    \ any number of letters in \"s\", including \"n\". It also doesn't need the recursion\
    \ because it's just an array of words (strings).\n<code>\nvar select_words = function\
    \ (s, n) {\n    var words = [];\n    for (var i = 0; i<s.length; i++) {\n    \
    \    //add words to arr if they contain exactly n consonants\n        if(s.indexOf(i+\"\
    \") !== -1 && s.split(i).length >= n) {\n            words.push(s.split(i));\n\
    \        }\n    }\n    return words;\n};\n</code>\n<|/ a tags=javascript,arrays,recursion\
    \ |>\n<| a tags=javascript,arrays,recursion dscore=0 |>\n<code>\nvar select_words\
    \ = function (s, n) {\n    // Base case\n    if (s === '') return [];\n    //\
    \ Recursive case\n    var arr = select_words(s.substr(1), n);\n    if (arr.length\
    \ > 0) return [s.substr(0, s.indexOf(arr[0]))].concat(arr);\n    // Base case\n\
    \    if (s.length <= n) return [];\n    // No more space for new words\n    return\
    \ select_words(s, n);\n};\n\nvar arr = select_words(\"Mary had a little lamb\"\
    , 4);\nconsole.log(arr);</code>\n<|/ a |>\n<| a tags=javascript,arrays,recursion\
    \ dscore=0 |>\n<code>", "  if (n < 1) return [];\n  if (n < 2) return [s];\n\n\
    \  let words: string[] = [];\n  let counts: number[] = new Array(n).fill(1);\n\
    \  let i: number;\n  let j: number;\n  let word: string;\n  let endIndex: number\
    \ = s.length - 1;\n  let wordIndex: number = 0;\n  for (let k = 0; k < s.length;\
    \ k++) {\n    if (counts[k] == 0) words.push(s[wordIndex]);\n    else if (s[wordIndex].toUpperCase()\
    \ === s[k]) {\n      counts[k]++;\n      wordIndex++;\n    }\n    else {\n   \
    \   counts[k] = 0;\n      wordIndex++;\n    }\n  }\n  for (let j = 0; j < counts.length;\
    \ j++) {\n    if (counts[j] > 1) words.push(s[wordIndex]);\n    wordIndex++;\n\
    \  }\n\n  return words;\n}\n", "  let ans: string[] = []\n  for (let i = 0; i\
    \ < s.length; i++) {\n    const index = s[i] === \" \" ? i : findIndex(s[i])\n\
    \    if (index > 0) {\n      const newArr = s.slice(0, index).split(\" \")\n \
    \     if (newArr.length === n) {\n        ans.push(newArr.join(\"\"))\n      }\n\
    \    }\n  }\n  return ans\n}\n", "    const charMap = new Map<string, number[]>();\n\
    \n    let words = [];\n    let currentWord = \"\";\n    for (let index = 0; index\
    \ < s.length; index++) {\n        const char = s[index];\n        if (charMap.get(char)\
    \ === undefined) {\n            currentWord += char;\n            if (charMap.get(currentWord)\
    \ === undefined) {\n                charMap.set(currentWord, [currentWord]);\n\
    \            } else {\n                charMap.get(currentWord).push(currentWord);\n\
    \            }\n        } else {\n            charMap.get(char).push(currentWord);\n\
    \        }\n    }\n\n    for (let key in charMap) {\n        if (charMap.get(key).length\
    \ < n) {\n            words = words.concat(charMap.get(key));\n        }\n   \
    \ }\n\n    return words;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis is a nice\
    \ implementation that works well for the example I gave, but it fails when the\
    \ second parameter is more than 2. Also this does not work for empty strings.\n\
    <|/ c |>\n<| a |>\nHere's a solution that uses the same map to store each word,\
    \ instead of just an array of words. It stores the map by counting the number\
    \ of occurrences of each letter. I've used a switch statement to iterate through\
    \ the string, but you could also use another for-loop.\nTo get the first n number\
    \ of consonants, you just need to iterate through the map. It doesn't matter how\
    \ many consonants there are in each word (unless there are more than n), because\
    \ the map contains the number of occurrences of each letter. So each time you\
    \ iterate through the map, you just check if that count is less than n.\nTo get\
    \ all consonants in a string, you'd just iterate through the map and add each\
    \ consonant to the array\nThis approach has the advantage that each time you iterate\
    \ through the map, you're not iterating through the entire string again. You're\
    \ just iterating through the map entries.\nHere's the code:\n<code>", "  // Write\
    \ your code here\n  let counter: number = 0;\n  let words: string[] = [];\n  for\
    \ (let i = 0; i < s.length; i++) {\n    let char = s[i];\n    if (counter ===\
    \ n) {\n      words.push(s);\n      counter = 0;\n    } else if (char === \" \"\
    ) {\n      counter++;\n    } else {\n      counter = 0;\n    }\n  }\n  return\
    \ words;\n}\n", "    // code goes here\n    let words: string[] = [];\n    if\
    \ (s === \"\") {\n        return words;\n    }\n\n    let index = 0;\n    while\
    \ (index < s.length && index < s.length + n) {\n        let char = s.charAt(index);\n\
    \        if (char === \" \" || char === \"\\n\" || char === \"\\t\" || char ===\
    \ \"\\r\" || char === \"\\f\") {\n            index = index + 1;\n           \
    \ continue;\n        }\n\n        let found = s.search(/[bcdfghjklmnpqrstvwxyz]{1}/);\n\
    \        if (found != -1) {\n            index = index + 1;\n            continue;\n\
    \        }\n\n        words.push(s.substring(index));\n        index = index +\
    \ 1;\n    }\n\n    return words;\n}\n</code>\n<|/ a |>\n<| c |>\nYou don't really\
    \ need the \"else if\", you could just have one else (which would be a conditional\
    \ that would always be true)\n<|/ c |>\n<| c |>\n, you're correct. I originally\
    \ had the \"else if\", but I thought it would be easier to follow the conditions\
    \ in English rather than just read a sentence like \"If s contains exactly n consonants,\
    \ return the word after the last consonant. Otherwise, return an empty array.\"\
    \n<|/ c |>\n<| c |>\n, I tried to follow your words, but I didn't have a good\
    \ way to determine if a word was at the end of the line.\n<|/ c |>\n<| a tags=javascript,algorithm\
    \ dscore=2 |>\nThis should work :)\n\n<code>", "\tlet i = 0;\n\tlet consonants\
    \ = \"bcdfghjklmnpqrstvwxyz\";\n\tlet arr = [];\n\twhile (i < s.length) {\n\t\t\
    let consonants_count = consonants.search(s.charAt(i));\n\t\tif (consonants_count\
    \ >= n && consonants_count != -1)\n\t\t\tarr.push(s.substring(i + 1, i + consonants_count\
    \ + 1));\n\t\ti += consonants_count + 1;\n\t}\n\treturn arr;\n}\n", "  if (s ==\
    \ \"\") return [];\n  let arr = new Array(n+1);\n  for (let i = 0; i < n; i++)\
    \ arr[i] = 0;\n  for (let i = 0; i < s.length; i++)\n    if (s.substr(i, i+1)\
    \ in arr)\n      arr[s.substr(i, i+1)] += 1;\n  for (let i = 0; i < n; i++) if\
    \ (arr[i] === 0) return [];\n  let ret = new Array();\n  for (let i = 0; i < n;\
    \ i++) {\n    for (let j = 0; j < arr[i]; j++) {\n      ret[ret.length] = s.substr(i,\
    \ i+1);\n    }\n  }\n  return ret;\n}\n", "  const list: string[] = []\n  const\
    \ list2 = []\n  for (let i = 0; i < s.length; i++) {\n    if (n === 1) {\n   \
    \   if (s[i] === 'a') {\n        list.push('A')\n      }\n      if (s[i] === 'e')\
    \ {\n        list.push('E')\n      }\n      if (s[i] === 'i') {\n        list.push('I')\n\
    \      }\n      if (s[i] === 'o') {\n        list.push('O')\n      }\n      if\
    \ (s[i] === 'u') {\n        list.push('U')\n      }\n      if (s[i] === 'y') {\n\
    \        list.push('Y')\n      }\n    } else {\n      if (s[i] === 'a') {\n  \
    \      list2.push('A')\n      }\n      if (s[i] === 'e') {\n        list2.push('E')\n\
    \      }\n      if (s[i] === 'i') {\n        list2.push('I')\n      }\n      if\
    \ (s[i] === 'o') {\n        list2.push('O')\n      }\n      if (s[i] === 'u')\
    \ {\n        list2.push('U')\n      }\n      if (s[i] === 'y') {\n        list2.push('Y')\n\
    \      }\n    }\n  }\n  for (let i = 0; i < list.length; i++) {\n    for (let\
    \ j = 0; j < list2.length; j++) {\n      if (list[i] === list2[j]) {\n       \
    \ list.splice(i, 1)\n      }\n    }\n  }\n  return list\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a dscore=0 tags=string,algorithm,javascript |>\nHere's a solution using\
    \ just ES5 (no ES6). This also uses a regular expression instead of nested conditionals.\n\
    <code>", "  const words = s.split(\" \");\n  return words.filter((word) => {\n\
    \    let count = 0;\n    word = word.toLowerCase();\n    for (const c of word)\
    \ {\n      if (c === c && c !== \" \")\n        count++;\n    }\n    return count\
    \ === n;\n  });\n}\n</code>\n<|/ a tags=string,javascript dscore=0 |>\n<| c |>\n\
    Thanks for your answer! I see how this approach would work except for the return\
    \ type. The problem is that I need the words from an input string, not the function\
    \ itself.\n<|/ c |>\n<| c |>\nI have edited the answer to include an example of\
    \ the function being used for an input string. Is that what you were looking for?\n\
    <|/ c |>\n<| c |>\nYes that is exactly what I was looking for and your code is\
    \ also very clear. I will accept this as an answer. Thank you!\n<|/ c |>\n<| c\
    \ |>\nNo problem! Glad I could help!\n<|/ c |>\n<| a tags=string,javascript |>\n\
    <code>\nvar input = \"Mary had a little lamb\";\n\nvar result = input.replace(\"\
    \ \", \"\").split(\" \").filter(word => {\n    var count = 0;\n    \n    for(let\
    \ i = 0; i < word.length; i++)\n    {\n        if(word[i] != \" \")\n        {\n\
    \            count++;\n        }\n        \n        if(word[i] == \" \")\n   \
    \     {\n            return count == 4;\n        }\n    }\n    \n    return false;\n\
    });\n\nconsole.log(result);</code>\n<|/ a dscore=0 |>\n<| a |>\nI came up with\
    \ this function\n\n<code>", "  let result = [];\n  s = s.split(\" \");\n  for\
    \ (let i of s) {\n    let n = i.length;\n    if (n == n) {\n      result.push(i);\n\
    \      if (n >= n) {\n        break;\n      }\n    }\n  }\n  return result;\n\
    }\n</code>\n<|/ a dscore=0 tags=javascript,python,sorting,arrays |>\n<| a dscore=0\
    \ |>\nHere's a solution in python using regular expression and collections.\n\
    <code>\nimport re\nimport collections\ndef select_words(s: str, n: int) -> list:\n\
    \    pattern = re.compile(\"[bcdfghjklmnpqrstvwxyz]\")\n    words = [w for w in\
    \ pattern.split(s) if len(w) == n]\n    return list(collections.Counter(words).elements())\n\
    </code>\n<|/ a tags=javascript,python,sorting,arrays |>\n<| a tags=javascript,python,sorting,arrays\
    \ dscore=0 |>\nHere's a solution in JavaScript.\n<code>", "    // your code goes\
    \ here\n}\n", "\treturn []\n}\n", "  var result: string[] = [];\n  var index =\
    \ 0;\n  var count = 0;\n  var current_letter = \"\";\n  \n  while (index != s.length\
    \ -1) {\n    current_letter = s[index];\n    while (s[index] == ' ' || s[index]\
    \ == '.' || s[index] == '!' || s[index] == '?') {\n      count++;\n      index++;\n\
    \    }\n    if (count === n) {\n      result.push(current_letter);\n      count\
    \ = 1;\n      index++;\n    }\n  }\n  return result;\n}\n", "    if (s.length\
    \ == 0) {\n        return [];\n    }\n    let l: string[] = [];\n    let lastCount\
    \ = 0;\n    for (let word of s.split(\" \")) {\n        if (lastCount < n) {\n\
    \            l.push(word);\n        }\n        lastCount = countChar(word, l);\n\
    \    }\n    return l;\n}\n", "  if (n === 0 || s === \"\") {\n    return [];\n\
    \  }\n\n  const splitted = s.split(\" \");\n  const words = splitted\n    .map((word)\
    \ => word.toLowerCase())\n    .filter((word) => isConsonant(word))\n    .sort();\n\
    \  const result: Array<string> = [];\n  let j = 0;\n  for (let i = 0; i < words.length;\
    \ i += 1) {\n    if (words[i].length >= n) {\n      result.push(splitted[j++]\
    \ + \" \" + words[i]);\n    }\n  }\n  return result;\n}\n", "\tlet words: string[]\
    \ = [];\n\tlet index = 0;\n\twhile (index < s.length) {\n\t\tlet char = s.charAt(index);\n\
    \t\tlet count = 0;\n\t\tif (char !== \" \") {\n\t\t\tlet chars = char.toLowerCase();\n\
    \t\t\twhile (index < s.length && s.charAt(index) === chars) {\n\t\t\t\tindex++;\n\
    \t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tif (count === n) {\n\t\t\twords.push(s.substr(0,\
    \ index));\n\t\t}\n\t\tindex++;\n\t}\n\treturn words;\n}\n", "    const a = s.split('\
    \ ');\n    return a.filter(s => s.length === n).map(s => s.split(''));\n}\n",
  "    let words = []\n    for (let i = 0; i < s.length; i++) {\n        const curr\
    \ = s.charAt(i)\n        if (n-- > 0) {\n            if (curr === \"a\" || curr\
    \ === \"e\" || curr === \"i\" || curr === \"o\" || curr === \"u\") {\n       \
    \         continue\n            }\n            words.push(curr)\n        }\n \
    \   }\n    if (words.length === 0) {\n        return []\n    }\n    return words\n\
    }\n", "  if (s.length == 0) {\n    return [];\n  }\n  let count = 0;\n  const\
    \ arr = s.split(\" \").sort();\n  let res = arr\n    .filter(item => item.match(/[a-z]+/i))\n\
    \    .map(item => {\n      const regex = new RegExp(`[${vowels}]`);\n      return\
    \ item.match(regex) ? item : null;\n    })\n    .filter(item => {\n      if (count\
    \ < n) {\n        count += 1;\n        return true;\n      } else {\n        return\
    \ false;\n      }\n    })\n    .filter(item => item != null)\n    .sort((a, b)\
    \ => b.length - a.length)\n    .map(item => item.toLowerCase());\n  return res;\n\
    }\n", "    let ret: string[] = [];\n\n    if (s == null || s == \"\") {\n    \
    \    return ret;\n    }\n\n    for (let i = 0; i < s.length; i++) {\n        const\
    \ word = s[i];\n        for (let j = 0; j < word.length; j++) {\n            if\
    \ (word.substring(0, j).match(/[a-zA-Z]+/)) {\n                const match: string[]\
    \ = select_words(word.substring(j), n);\n                if (match.length != 0)\
    \ {\n                    ret.push(match[0]);\n                }\n            }\n\
    \        }\n    }\n\n    return ret;\n}\n", "  let result = new Array<string>();\n\
    \  if (!s || !n || n < 1 || !s.match(/\\w/g)) {\n    return result;\n  }\n  let\
    \ temp = new Array<string>();\n  let arr1 = s.split(/\\s+/g);\n  let arr2 = arr1.map(word\
    \ => {\n    if (word.length < n && word.length > 0) {\n      return word;\n  \
    \  } else {\n      temp.push(word);\n    }\n  });\n  arr2.forEach((el, i) => {\n\
    \    if (el.length >= n) {\n      result.push(temp[i]);\n    }\n  });\n  return\
    \ result;\n}\n", "  let words: string[] = [];\n\n  for (let i = 0; i < s.length;\
    \ i++) {\n    let char: string = s[i];\n    let isConsonant: boolean = char.match(/[aeiouAEIOU]/gi);\n\
    \    if (isConsonant) {\n      words.push(s[i]);\n    }\n  }\n  return words;\n\
    }\n", "    return [];\n}\n</code>\n<|/ q dscore=0 |>\n<| a dscore=0 |>\nYou can\
    \ do that by using regex (regex101).\n<code>\nconst str = 'Mary had a little lamb'\n\
    const words = [];\n", "    var result = new Array();\n    if (s == null || n ==\
    \ 0) {\n        return result;\n    }\n\n    //find consonants\n    var consonants\
    \ = new Array();\n    var i = 0;\n    while (i < s.length && consonants.length\
    \ < n) {\n        var isConsonant = false;\n        for (var j = 0; j < consonants.length;\
    \ j++) {\n            if (s[i].toUpperCase() == consonants[j].toUpperCase()) {\n\
    \                isConsonant = true;\n                break;\n            }\n\
    \        }\n        if (isConsonant) {\n            consonants.push(s[i]);\n \
    \       } else {\n            result.push(s[i]);\n            i++;\n        }\n\
    \    }\n    //find words in consonants and remove them from string\n    while\
    \ (i < s.length) {\n        var found = false;\n        for (var j = 0; j < result.length;\
    \ j++) {\n            if (s[i].toUpperCase() == result[j].toUpperCase()) {\n \
    \               found = true;\n                break;\n            }\n       \
    \ }\n        if (!found) {\n            result.push(s[i]);\n            i++;\n\
    \        }\n    }\n    return result;\n}\n</code>\n<|/ a tags=string,arrays,algorithm,javascript\
    \ |>\n<| a tags=string,arrays,algorithm,javascript |>\nThe code is more readable\
    \ and easy to understand if you are familiar with regular expressions especially\
    \ when used with javascript \n<code>", "\tlet words: string[] = [];\n\tlet i =\
    \ 0;\n\tlet j = 0;\n\twhile (i < s.length) {\n\t\tlet letter = s[i];\n\t\tlet\
    \ isLastChar = i == s.length - 1;\n\t\tif (j >= n) {\n\t\t\tj = 0;\n\t\t\ti++;\n\
    \t\t}\n\t\tif (letter == ' ' || letter == ',' || letter == ';') {\n\t\t\tif (words.length\
    \ > 0) {\n\t\t\t\twords = words.filter(el => el != '');\n\t\t\t}\n\t\t} else if\
    \ (letter == \".\") {\n\t\t\tif (isLastChar) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t\
    words.splice(words.length - 1, 0, \"\");\n\t\t\ti++;\n\t\t} else if (letter !=\
    \ ' ') {\n\t\t\tif (words.length == 0 || words[words.length - 1] == \"\") {\n\t\
    \t\t\twords.push(\"\");\n\t\t\t}\n\t\t\twords[j] += letter;\n\t\t}\n\t\tj++;\n\
    \t}\n\treturn words;\n}\n", "    return [];\n}\n", "\tconst consonants = \"bcdfghjklmnpqrstvwxyz\"\
    ;\n\tconst vowels = \"aeiou\";\n\tlet words = s.split(\" \");\n\tfor (let i =\
    \ 0; i < words.length; i++) {\n\t\tconst word = words[i];\n\t\tlet wordCount =\
    \ 0;\n\t\tfor (let j = 0; j < word.length; j++) {\n\t\t\tif (consonants.indexOf(word[j].toLowerCase())\
    \ != -1) {\n\t\t\t\twordCount++;\n\t\t\t}\n\t\t}\n\t\tif (wordCount === n) {\n\
    \t\t\twords.push(word);\n\t\t}\n\t}\n\treturn words.filter((word) => word.length\
    \ == n).map((word) => word.split(\"\").filter((char) => vowels.indexOf(char) ==\
    \ -1).join(\"\"));\n}", "}\n", "\t// Your code here\n}\n", "\tvar counts: any\
    \ = {};\n\tvar result: any = [];\n\tvar i = -1;\n\tvar j = 0;\n\twhile (true)\
    \ {\n\t\ti++;\n\t\tj++;\n\t\tif (j > s.length) break;\n\t\tif (counts[s[j]]) {\n\
    \t\t\tcounts[s[j]] = counts[s[j]] + 1;\n\t\t} else {\n\t\t\tcounts[s[j]] = 1;\n\
    \t\t}\n\t\tif (counts[s[j]] == n) {\n\t\t\tresult.push(s[j]);\n\t\t}\n\t}\n\t\
    return result;\n}\n", "    let ret: Array<string> = [];\n    for (let i=0; i<s.length;\
    \ i++) {\n        const c: number = s[i].charCodeAt(0);\n        if (c < 65 ||\
    \ c > 90) continue;\n        let j: number = 0;\n        for (let j=0; j<n; j++)\
    \ {\n            j++;\n            if (s[i] == s[j]) {\n                ret.push(s[i]);\n\
    \                break;\n            }\n        }\n    }\n    return ret;\n}\n",
  "    var words = [];\n    for(var i = 0;i<s.length;i++) {\n        if(s[i] == \"\
    \ \")\n            for(var j=i;j<s.length-1;j++)\n                words.push(s.substring(j,j+1));\n\
    \        else\n            for(var j=0;j<n;j++)\n                words.push(s.substring(j,j+1));\n\
    \    }\n    return words;\n}", "    return null;\n}\n", "    let result: string[]\
    \ = [];\n    let i = 0;\n    while (i < s.length) {\n        let char = s[i];\n\
    \        let count = 1;\n        let j = 1;\n        while (j < n) {\n       \
    \     while (s[i + j] === char) {\n                j++;\n                count++;\n\
    \            }\n            if (j === n) {\n                result.push(s.substring(i,\
    \ i + j));\n                i = i + j;\n                break;\n            }\n\
    \            j++;\n        }\n        if (i === s.length) {\n            result.push(s.substring(i,\
    \ i + 1));\n        }\n        i++;\n    }\n    return result;\n}\n</code>\n<|/\
    \ a dscore=1 tags=string,algorithm,javascript |>\n<| a tags=string,algorithm,javascript\
    \ dscore=1 |>\nI see that your question is tagged with javascript. In javascript,\
    \ we can use Array#indexOf to determine the index of the first occurrence of a\
    \ character in a string, and Array#split to split the string into an array of\
    \ characters. So we can write it as follows:\n<code>", "  let res = [];\n  \n\
    \  // Check if string is empty\n  if(s == \"\") {\n    return res;\n  }\n\n  let\
    \ count = 0;\n  let j = 0;\n\n  while(j < s.length && count < n) {\n    if (s.charAt(j)\
    \ === \"a\") {\n      count++;\n      j++;\n    }\n    else if (s.charAt(j) ===\
    \ \"e\") {\n      count++;\n      j++;\n    }\n    else if (s.charAt(j) === \"\
    i\") {\n      count++;\n      j++;\n    }\n    else if (s.charAt(j) === \"o\"\
    ) {\n      count++;\n      j++;\n    }\n    else if (s.charAt(j) === \"u\") {\n\
    \      count++;\n      j++;\n    }\n    else {\n      j++;\n    }\n  }\n\n  while(j\
    \ < s.length && count < n) {\n    res.push(s.slice(j, j + 1))\n    j++;\n  }\n\
    \n  return res;\n}\n", "\tlet words: string[] = [];\n\tlet count = 0;\n\twhile\
    \ (count < s.length) {\n\t\tlet index = 0;\n\t\twhile (index < s.length && s[index]\
    \ === s[count]) {\n\t\t\tindex++;\n\t\t\tcount++;\n\t\t}\n\t\tif (index === n)\
    \ {\n\t\t\twords.push(s.substring(count, index));\n\t\t}\n\t\telse {\n\t\t\twords.push(\"\
    \");\n\t\t}\n\t}\n\treturn words;\n}\n", "  s = s.split(' ');\n  \n  const result\
    \ = new Array(n);\n  for (let i = 0; i < n; i++) {\n    result.push(s[Math.floor(Math.random()\
    \ * s.length)]);\n  }\n  \n  return result.filter((a) => !a.match(/[^aeiouAEIOU]/));\n\
    }\n", "}\n", "\tlet result: string[] = [];\n\ts = s.trim();\n\tif (s === \"\"\
    ) {\n\t\treturn result;\n\t}\n\tlet chars = s.split(\"\");\n\tchars.sort();\n\t\
    let pos = 0;\n\tlet num = 0;\n\tfor (let i = 0; i < chars.length; i++) {\n\t\t\
    num = 0;\n\t\tlet s = \"\";\n\t\tfor (let j = 0; j < chars.length; j++) {\n\t\t\
    \tif (chars[j] === chars[i]) {\n\t\t\t\ts += chars[j];\n\t\t\t\tnum++;\n\t\t\t\
    }\n\t\t}\n\t\tif (num === n) {\n\t\t\tresult.push(s.trim());\n\t\t}\n\t}\n\treturn\
    \ result;\n}\n", "  var arr: any = [];\n  var index = 0;\n  while (index < s.length)\
    \ {\n    if (s.substr(index, n).match(/[^aeiou]/g).length > 0) {\n      arr.push(s.substr(index,\
    \ n));\n      index += n;\n    } else {\n      index++;\n    }\n  }\n  return\
    \ arr;\n}\n", "  const words = [];\n  let lastWord: string;\n\n  while (n > 0)\
    \ {\n    if (s.length === 0) return words;\n    lastWord = s.split(\"\").pop();\n\
    \    s = s.split(\"\").reduce((acc, curr) => {\n      if (\n        acc.length\
    \ > 0 &&\n        acc[acc.length - 1].indexOf(curr) === -1\n      ) {\n      \
    \  acc.push(curr);\n      }\n      return acc;\n    }, []);\n    if (lastWord.length\
    \ + 1 === n) words.push(lastWord);\n    n--;\n  }\n\n  return words;\n}\n", " \
    \   if (s.length === 0) {\n        return [];\n    }\n    let ans: string[] =\
    \ [];\n    let stack: string[] = [];\n    for (let char of s) {\n        if (is_consonant(char))\
    \ {\n            while (!stack.length || is_consonant(stack[stack.length - 1]))\
    \ {\n                let index = stack.pop();\n                ans.push(s.slice(index,\
    \ index + 1));\n            }\n            stack.push(char);\n        } else if\
    \ (is_vowel(char)) {\n            stack.push(char);\n        } else {\n      \
    \      while (stack.length && is_vowel(stack[stack.length - 1])) {\n         \
    \       let index = stack.pop();\n                ans.push(s.slice(index, index\
    \ + 1));\n            }\n            stack.push(char);\n        }\n    }\n   \
    \ return ans;\n}\n", "\t\n}\n\n", "\treturn s\n\t\t.split(\"\")\n\t\t.map((word)\
    \ => word.split(\"\").filter((char) => !char.match(/[^aeiou]/))) \n\t\t.flat()\n\
    \t\t.filter((word) => word.length == n)\n}\n", "    let l: number = 0;\n    let\
    \ r: number = 0;\n    let c: number = 0;\n    let word: string = \"\";\n    const\
    \ str: string[] = [];\n    while (l < s.length) {\n        word = s.substring(l,\
    \ l + n);\n        if (s.indexOf(word, l) === l) {\n            str[str.length]\
    \ = word;\n            l++;\n            r += n;\n        }\n        else {\n\
    \            r++;\n        }\n        if (r > s.length) break;\n    }\n    return\
    \ str;\n}\n", "  const result: string[] = [];\n  const set: string[] = count_consonants(s);\n\
    \  const count = (n: number) => n - 1;\n  let index = n - 1;\n  \n  while(set.length\
    \ > 0) {\n    if(index < 1) {\n      result.push(set[0]);\n      set.length =\
    \ 0;\n      index++;\n    } else {\n      if(set.indexOf(set[index]) >= count)\
    \ {\n        result.push(set[index]);\n        set.length = index;\n      } else\
    \ {\n        set.splice(index, 1);\n        index--;\n      }\n    }\n  }\n  \n\
    \  return result;\n}\n", "  const array: string[] = []\n  \n  if (s.length ===\
    \ 0) {\n    return array\n  }\n  \n  for (let i = 0; i < s.length; i++) {\n  \
    \  const c = s[i]\n    const char_count = count_chars(s, c)\n    \n    if (char_count\
    \ >= n) {\n      array.push(s)\n    }\n  }\n  return array\n}\n", "    if (n ==\
    \ 0) return [];\n    let result = [];\n    \n    let strArr = s.split(\"\");\n\
    \    for (let i = 0; i < strArr.length; i++) {\n        let count = count_consonants(strArr[i]);\n\
    \        if (count == n) result.push(strArr[i]);\n    }\n    return result;\n\
    }\n", "  let result: string[] = [];\n  if (s == null || s.length == 0) {\n   \
    \ return result;\n  }\n  if (n == 0) {\n    return result;\n  }\n  let chars =\
    \ s.split(\"\");\n  for (let i = 0; i < chars.length; i++) {\n    if (chars[i].match(/[a-zA-Z]+/)\
    \ == null) {\n      break;\n    }\n    let count = 0;\n    for (let j = i + 1;\
    \ j <= chars.length; j++) {\n      count += chars[j].match(/[a-zA-Z]/).length;\n\
    \      if (count == n) {\n        result.push(chars[i]);\n      }\n    }\n  }\n\
    \  return result;\n}\n", "  return [...s].filter(word => {\n    return word.split('').filter((char,\
    \ i) => char === s[i])\n  }).sort().map((word) => word.slice(0, n))\n}\n", " \
    \   // code goes here\n}\n", "\t\n}\n", "  let result = new Array();\n  if (s.length\
    \ == 0) {\n    return result;\n  }\n\n  for (let i = 0; i <= s.length - n; i++)\
    \ {\n    let index = i;\n    let count = 0;\n    while (index >= 0) {\n      if\
    \ (s[index] === \" \") {\n        count++;\n        index = index - 1;\n     \
    \ } else {\n        break;\n      }\n    }\n    if (count === n) {\n      result.push(s.substring(index\
    \ + 1, s.length));\n    }\n  }\n  return result;\n}\n", "    let letters = splitWords(s);\n\
    \    if (letters.length == 0) {\n        return [];\n    } else {\n        let\
    \ arr = new Array();\n        let count = 0;\n        for (let i = 0; i < letters.length;\
    \ i++) {\n            let item = letters[i];\n            let count = item.countConsonants(n);\n\
    \            if (count != 0) {\n                arr.push(item);\n            }\n\
    \            if (count > 0) {\n                count--;\n            }\n     \
    \   }\n        return arr;\n    }\n}\n", "    if (s.length == 0) {\n        return\
    \ [];\n    }\n    let result: any = [];\n    let isFound = false;\n    for (let\
    \ i = 0; i <= s.length - n; i++) {\n        if (s[i] == \" \") {\n           \
    \ if (isFound) {\n                break;\n            }\n            isFound =\
    \ true;\n        }\n        else {\n            isFound = false;\n           \
    \ result.push(s.substring(i, i + n));\n        }\n    }\n    return result;\n\
    }\n</code>\n<|/ a |>\n<| c |>\nYou might want to explain your code so OP and other\
    \ users can learn from your answer.\n<|/ c |>\n<| a dscore=0 tags=javascript |>\n\
    <code>", "  var words: string[] = [];\n  var word_list: string[] = word_list(s);\n\
    \  var word_count: string[] = word_count(s);\n  if (word_count.length < n) return\
    \ words;\n  var found: string[] = [];\n  var i: number;\n  var j: number;\n  var\
    \ found_word: string;\n  for (i = 0; i < word_list.length; i++) {\n    found_word\
    \ = word_list[i];\n    for (j = 0; j < word_count.length; j++) {\n      if (word_count[j]\
    \ === found_word) {\n        found.push(found_word);\n        break;\n      }\n\
    \    }\n  }\n  return found;\n}\n", "\tlet words: string[] = [];\n\t\n\tfor (let\
    \ i = 0; i < s.length; i+=n) {\n\t\twords.push(s.substring(i,i+n));\n\t}\n\t\n\
    \treturn words;\n}\n", "\tif (s == \"\") {\n\t\treturn []\n\t}\n\n\tlet result:\
    \ string[] = []\n\tlet count = 0\n\tlet lastChar = s[0]\n\tlet isVowel = lastChar\
    \ == lastChar.toLowerCase() && lastChar == 'a'\n\tlet isConsonant = lastChar ==\
    \ lastChar.toLowerCase() && lastChar != 'a'\n\tfor (let i = 1; i < s.length; i++)\
    \ {\n\t\tif (isConsonant || s[i] == \" \" || s[i] == \".\" || s[i] == \"!\" ||\
    \ s[i] == \"?\") {\n\t\t\tif (count == n) {\n\t\t\t\tresult.push(s.substring(lastChar,\
    \ i))\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tcount++\n\t\t\tlastChar = s[i]\n\t\t\tisVowel\
    \ = lastChar == lastChar.toLowerCase() && lastChar == 'a'\n\t\t\tisConsonant =\
    \ lastChar == lastChar.toLowerCase() && lastChar != 'a'\n\t\t}\n\t}\n\n\treturn\
    \ result\n}\n", "    return [];\n}\n", "  let words: string[] = [];\n  let start\
    \ = 0;\n\n  while (true) {\n    let i = s.indexOf(\"con\", start);\n\n    if (i\
    \ === -1) {\n      break;\n    }\n\n    words.push(s.slice(start, i));\n    start\
    \ = i + 1;\n  }\n\n  return words.filter((word, index) => index === n);\n}\n",
  "  return [];\n}\n", "  const list = words.split(\" \");\n  return list.filter(w\
    \ => w.split(\"\").filter(c => c === s).length === n);\n}\n", "    let result:\
    \ any = [];\n    for(let i = 0; i < s.length; ++i){\n        for(let j = 0; j\
    \ < n; ++j){\n            if(s[i] === 'e' || s[i] === 'a' || s[i] === 'i' || s[i]\
    \ === 'o' || s[i] === 'u' || s[i] === 'c' || s[i] === 'l' || s[i] === 'd'){\n\
    \                result.push(s[i]);\n            }\n        }\n    }\n    return\
    \ result.sort().filter(e => e !== ' ');\n}", "    if (s.trim() == \"\") {\n  \
    \      return [];\n    }\n    \n    let arr: any = [];\n    let arr = s.split(\"\
    \ \");\n    \n    let n = n || 1;\n    \n    for (let i = 0; i < arr.length; i++)\
    \ {\n        let str = arr[i];\n        let n = str.split(\"\");\n        for\
    \ (let j = 0; j < n.length; j++) {\n            n = n.join(\"\");\n          \
    \  if (n[n - 1] == n[j] && \n                n[n - 1] == n[j - 1] && \n      \
    \          n[n - 1] == n[j + 1]) {\n                arr.splice(i, 1);\n      \
    \          break;\n            }\n        }\n        if (arr.length == n) {\n\
    \            arr.splice(i, 1);\n        }\n    }\n    \n    return arr;\n}\n</code>\n\
    <|/ a |>\n<| c |>\nI believe this is the best answer of the three so far, but\
    \ I wouldn't have figured it out without your help. Thank you for your time and\
    \ help with this.\n<|/ c |>\n<| a dscore=0 |>\nI made a solution that uses recursion\
    \ and string replace.\nBasically, this algorithm will look for the first n consonants,\
    \ then remove everything after that until it stops removing after all consonants\
    \ are removed.\n<code>\nconst consonants = 'bcdfghjklmnpqrstvwxyz';\n", "  if(s.length\
    \ == 0) {\n    return [];\n  }\n  const words: string[] = [];\n  let i = 0;\n\
    \  while(i < s.length && s.length - i < n) {\n    if(s[i] === 'a' || s[i] ===\
    \ 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      i++;\n    } else\
    \ if(s[i] === 'y') {\n      i++;\n      while(i < s.length && s[i] !== 'a' &&\
    \ s[i] !== 'e' && s[i] !== 'i' && s[i] !== 'o' && s[i] !== 'u') {\n        i++;\n\
    \      }\n      i++;\n    }\n    words.push(s.slice(i, i+n));\n    i += n;\n \
    \ }\n  if(i < s.length) {\n    words.push(s.slice(i, s.length));\n  }\n  return\
    \ words;\n}\n", "\t// Good luck!\n}\n", "    if (s.length == 0) {\n        return\
    \ [];\n    }\n    let arr = s.split(\" \");\n    let newArr = [];\n    for (let\
    \ i = 0; i < arr.length; i++) {\n        let count = 0;\n        for (let j =\
    \ 0; j < arr[i].length; j++) {\n            if (arr[i][j] === arr[i][j].toUpperCase())\
    \ {\n                count++;\n            }\n        }\n        if (count ==\
    \ n) {\n            newArr.push(arr[i]);\n        }\n    }\n    return newArr;\n\
    }", "  if (s.length > 0) {\n    let word = s.split(' ')[0]\n    if (n === 0) {\n\
    \      return []\n    } else {\n      return []\n    }\n  }\n}\n</code>\nTest\
    \ Case\n<code>\nselect_words(\"Mary had a little lamb\", 4)", "  if (s.length\
    \ == 0) {\n    return [];\n  }\n  \n  const words = new Set();\n  for (let i =\
    \ 0, len = s.length; i < len; i++) {\n    const word = s[i];\n    let count =\
    \ 0;\n    for (let j = 0, len2 = word.length; j < len2; j++) {\n      if (word[j]\
    \ === '#') count++;\n    }\n    if (count == n) {\n      words.add(word);\n  \
    \  }\n  }\n  \n  return Array.from(words).sort();\n}\n", "\t// Fill in your code\
    \ here\n}\n", "    let arr: Array<string> = [];\n    for (let i = 0; i < s.length;\
    \ i++) {\n        let c: number = s.charCodeAt(i);\n        if ((c >= 65 && c\
    \ <= 90) || (c >= 97 && c <= 122)) {\n            if (arr.length < n) {\n    \
    \            arr.push(s);\n            }\n            else if (s.substring(i,\
    \ i + n).indexOf(\" \") > -1) {\n                arr.push(s.substring(i, i + n));\n\
    \            }\n        }\n    }\n    return arr;\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a |>\nI tested all the answers here and they work. But I got an additional\
    \ question. How to make them work in case if user gives invalid input, like empty\
    \ string.\nI added these lines in the if statement:\n<code>\nif (!s.trim()) {\n\
    \    return [];\n}\n</code>\nand now it works fine even on empty string. I'm adding\
    \ my code here to make it clear.\n<code>", "    if (s === \"\") {\n        return\
    \ [];\n    }\n    \n    let words: string[] = [];\n\n    // Step 1: find all consonants\n\
    \    const consonants = s.match(/[^aeiouAEIOU]/g) || [];\n\n    // Step 2: remove\
    \ consonants \n    s = s.replace(consonants, \"\");\n\n    // Step 3: count the\
    \ number of consonants we found\n    const n_consonants = consonants.length;\n\
    \    \n    // Step 4: create an array and push the words if they contain exactly\
    \ n consonants\n    for (let i = 0; i < s.length; i++) {\n        // Step 5: check\
    \ if current word contains n consonants\n        if (s.substring(i, i + n_consonants).toLowerCase()\
    \ === consonants.join(\"\").toLowerCase()) {\n            // Step 6: push the\
    \ word to the words array\n            words.push(s.substring(i, i + n_consonants));\n\
    \        }\n    }\n    return words;\n}", "  let words: string[] = [];\n  if (s.length\
    \ == 0) {\n    return words;\n  }\n  let dict = new Object();\n  s.split(\" \"\
    ).map((word: string) => {\n    if (dict[word] == undefined) {\n      dict[word]\
    \ = 0;\n    }\n    dict[word]++;\n  });\n  dict = sortByValue(dict);\n  for (let\
    \ i = 0; i <= n; i++) {\n    for (let key in dict) {\n      if (dict[key] >= i)\
    \ {\n        words.push(key);\n      }\n    }\n  }\n  return words;\n}\n", " \
    \   const arr = s.split(' ');\n    let result = [];\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        const word = arr[i].split('');\n        for (let j = 0; j <\
    \ word.length; j++) {\n            const letter = word[j];\n            if (letter\
    \ === 'c' || letter === 'C') {\n                result.push([...word].splice(j,\
    \ 0, letter));\n            }\n        }\n    }\n    return result.filter(i =>\
    \ {\n        let resultString = '';\n        for (let j = 0; j < i.length; j++)\
    \ {\n            resultString += i[j];\n        }\n        return resultString.length\
    \ <= n;\n    }).map(i => i.join(''));\n}", "  let words = [];\n\n  // Write your\
    \ code here\n  s = s.replace( /\\s+/g, \"\" );\n  s = s.replace( /[^a-zA-Z\\s]/ig,\
    \ \"\" );\n\n  s = s.split(\" \");\n  let max = 0;\n  for(let i = 0; i < s.length;\
    \ i++){\n    let letters = s[i];\n    let count = 0;\n    for(let j = 0; j < s.length;\
    \ j++){\n      if(s[j] === letters){\n        count++;\n      }\n    }\n    if(count\
    \ === n){\n      words.push(s);\n      if(max < count){\n        max = count;\n\
    \      }\n    }\n  }\n  return words[words.length-1];\n}\n", "  const arr = s.split(\"\
    \");\n  const result = new Array(n);\n  for (let i = 0; i < n; i++) {\n    if\
    \ (n % 2 == 0) {\n      result[i] = arr[i];\n      n = n / 2;\n    } else {\n\
    \      result.splice(n - 1, 1);\n    }\n  }\n  return result;\n}\n", "  if(s.length\
    \ == 0){\n    return []\n  }\n  let wordsArray = []\n  let i = s.length - 1\n\
    \  let count = 0\n  while (i >= 0) {\n    if(count >= n){\n      wordsArray.push(s.substr(0,\
    \ i + 1))\n      count = 0\n    }\n    let charAt = s[i]\n    if (charAt != \"\
    \ \" && !charAt.match(/[a-z]/i)) {\n      count++\n    }\n    i--\n  }\n  return\
    \ wordsArray\n}\n", "  \n}", "  const words = [];\n  let word = \"\";\n\n  for\
    \ (let i = 0; i < s.length; i++) {\n    let c = s[i];\n    if (n >= 1 && n <=\
    \ 4) {\n      word += c;\n      n -= 1;\n    } else {\n      word += c.toUpperCase();\n\
    \    }\n    if (n === 0 && words.indexOf(word) === -1) {\n      words.push(word);\n\
    \      word = \"\";\n    }\n  }\n\n  return words;\n}\n", "\tvar arr = [];\n\t\
    var flag = false;\n\tfor (var i = 0, n = s.length; i < n; i++) {\n\t\tvar j =\
    \ s.indexOf(\"a\");\n\t\tif (j == -1 && i != 0) {\n\t\t\tbreak;\n\t\t}\n\t\tif\
    \ (i == n || s.substring(i, j - 1) != \"a\") {\n\t\t\tflag = true;\n\t\t\tarr.push(s.substring(i,\
    \ j));\n\t\t\tif (j == s.length - 1) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\
    if (flag) {\n\t\treturn arr;\n\t}\n\treturn [];\n}\n", "    let result = new Array<string>()\n\
    \    if (s.length === 0) {\n        return result\n    }\n    // We need to handle\
    \ case where n is 0, which means we only want to look for\n    // words that contain\
    \ 0 consonants, so that we don't end up with words like \"A\".\n    if (n ===\
    \ 0) {\n        let word = \"\"\n        let index = 0\n        for (let c of\
    \ s) {\n            if (c.match(/[aeiou]/i)) {\n                word += c\n  \
    \          }\n            if (index === s.length - 1) {\n                if (word\
    \ === s) {\n                    result.push(word)\n                }\n       \
    \     }\n            index++\n        }\n        return result\n    }\n    //\
    \ We want to return the words in order from largest to smallest, so\n    // we\
    \ start with a reverse for loop that starts from the last index and\n    // works\
    \ to the first index. We then split the string using the space\n    // separator\
    \ to create an array of individual words.\n    for (let i = s.length - 1; i >=\
    \ 0; i--) {\n        // The \"split\" method will split a string into an array\
    \ of words \n        // based on the space separator that we used to separate\
    \ words in the\n        // given string. The result is an array containing each\
    \ word on \n        // the given string.\n        let word = s.split(\" \").filter((word)\
    \ => {\n            // We want to only include the words that are exactly as long\
    \ as \n            // n. We do this by looping through the words in the given\
    \ string \n            // and checking whether each word has the correct number\
    \ of consonants.\n            return word.length === n\n        })\n        if\
    \ (word.length > 0) {\n            result.push(word[0])\n        }\n    }\n  \
    \  return result\n}\n", "  let counter: number = 0;\n  const wordsArray: string[]\
    \ = [];\n  \n  for (let i = 0; i <= s.length; i++) {\n    if (s[i] == \"#\") {\n\
    \      counter++;\n    } else if (s[i] != \" \") {\n      wordsArray.push(s);\n\
    \    } else if (counter >= n) {\n      break;\n    }\n  }\n  \n  return wordsArray;\n\
    }\n", "\t\n}\n\n", "\treturn select_words_impl(s, n, 0, [])\n}\n", "\tconst result:\
    \ string[] = [];\n\tfor (let i = 0; i < s.length; ++i) {\n\t\tif (s.substring(i,\
    \ i + n).split(\"\").filter((c) => c !== \"x\").length == n) {\n\t\t\tresult.push(s.substring(i,\
    \ i + n));\n\t\t}\n\t}\n\treturn result;\n}", "}\n", "  \n}\n", "\tconst arr:\
    \ string[] = []\n\tlet wordCount = 0\n\tfor (let i = 0; i < s.length; i++) {\n\
    \t\tconst char = s[i]\n\t\tif (char === \"a\" || char === \"e\" || char === \"\
    i\" || char === \"o\" || char === \"u\" || char === \" \" || char === \"\\n\"\
    ) {\n\t\t\twordCount++\n\t\t} else {\n\t\t\tif (wordCount <= n) {\n\t\t\t\tarr.push(s[i])\n\
    \t\t\t}\n\t\t\twordCount = 0\n\t\t}\n\t}\n\treturn arr\n}\n", "\tvar result: string[]\
    \ = [];\n\tif (n == 0) {\n\t\treturn [];\n\t}\n\n\tvar letters = s.split(' ');\n\
    \tvar temp = \"\";\n\tvar word_count = 0;\n\tvar found_word = false;\n\tfor (var\
    \ i = 0; i < (letters.length-1); i++) {\n\t\tif (letters[i] == letters[i+1]) {\n\
    \t\t\tfound_word = true;\n\t\t}\n\t\telse {\n\t\t\tif (found_word == true) {\n\
    \t\t\t\tif (temp != \"\") {\n\t\t\t\t\tresult.push(temp);\n\t\t\t\t\tword_count++;\n\
    \t\t\t\t\ttemp = \"\";\n\t\t\t\t}\n\t\t\t}\n\t\t\tfound_word = false;\n\t\t}\n\
    \t\tif (word_count == n) {\n\t\t\tif (temp != \"\") {\n\t\t\t\tresult.push(temp);\n\
    \t\t\t}\n\t\t\tword_count = 0;\n\t\t}\n\t\tif (letters[i] == \" \") {\n\t\t\t\
    if (temp != \"\") {\n\t\t\t\tresult.push(temp);\n\t\t\t\tword_count++;\n\t\t\t\
    }\n\t\t}\n\t\ttemp += letters[i];\n\t}\n\tif (temp != \"\") {\n\t\tresult.push(temp);\n\
    \t}\n\treturn result;\n}\n", "\tconst words: string[] = [];\n\tlet isFound = false;\n\
    \tfor (let i = 0; i < s.length; i++) {\n\t\tconst charIndex = s.indexOf(s[i]);\n\
    \t\tif (charIndex !== -1) {\n\t\t\tisFound = true;\n\t\t\tif (charIndex + n ===\
    \ s.length && charIndex >= 0 && charIndex < 26) {\n\t\t\t\twords.push(s.substr(0,\
    \ charIndex));\n\t\t\t} else {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t} else {\n\t\t\t\
    break;\n\t\t}\n\t}\n\treturn words.length ? words : [];\n}\n", "  var words =\
    \ \"\";\n  if (s == \"\") {\n    return words;\n  }\n\n  var count = 0;\n  var\
    \ maxChar = 0;\n  var currentChar = 0;\n\n  for (var i = 0; i < s.length; i++)\
    \ {\n    var c = s[i];\n\n    count++;\n    maxChar = Math.max(maxChar, c);\n\n\
    \    if (c == ' ') {\n      currentChar++;\n    } else {\n      if (count == n)\
    \ {\n        currentChar--;\n      }\n      if (currentChar == 0) {\n        words\
    \ += s.substring(i, i + maxChar);\n      }\n\n      count = 0;\n      currentChar++;\n\
    \    }\n  }\n\n  return words;\n}\n", "    const words: string[] = [];\n    for\
    \ (let i = 0; i < s.length; i++) {\n        if (s.indexOf(\" \") == i) {\n   \
    \         words.push(s.slice(0, i));\n            while (s.indexOf(\" \") == i\
    \ + 1) {\n                words.push(s.slice(i, i + n));\n                i +=\
    \ n\n            }\n            i = s.length\n        }\n    }\n    return words\n\
    }\n", "  if (s.length > 0) {\n    let words: string[] = [];\n    for (let i =\
    \ 0; i<s.length; i++) {\n      let w = select_word(s,i,n);\n      if (words.length\
    \ == n-1) {\n        words.push(w);\n      }\n    }\n    return words;\n  } else\
    \ {\n    return [];\n  }\n}\n", "  if (n === 0) return [];\n  let arr: string[]\
    \ = [];\n  let i = -1;\n  while (i < s.length) {\n    let l = i;\n    while (l\
    \ < s.length && s[l ] === \"_\") l++;\n    if (l >= s.length) break;\n    arr.push(s.slice(i,\
    \ l));\n    i = l + 1;\n  }\n  return arr;\n}\n", "\treturn s.split(' ').filter((w)\
    \ => w.length == n).map((w) => w.split(' ')[0])\n}\n", "  var result = new Array<string>();\n\
    \  \n  var arr = s.split(\" \");\n  \n  for (let i = 0; i < arr.length; i++) {\n\
    \    \n    var count = 0;\n    \n    for (let j = 0; j < arr[i].length; j++) {\n\
    \      \n      if (arr[i].charAt(j) == arr[i].charAt(j).match(/[a-zA-Z]/)) {\n\
    \        count++;\n      }\n    }\n    \n    if (count >= n) {\n      result.push(arr[i]);\n\
    \    }\n  }\n  \n  return result;\n}\n", "  \n}\n", "\t// Your code here\n}\n",
  "  const result = new Array();\n  const words = new Map();\n  \n  s = s.trim();\n\
    \  \n  if(s == \"\") {\n    return [];\n  }\n  \n  const consonants = 'bcdfghjklmnpqrstvwxyz';\n\
    \  \n  for(let i = 0; i < s.length; i++){\n    let item = s[i];\n    let index\
    \ = consonants.indexOf(item);\n    if(index >= 0) {\n      if(words.has(index))\
    \ {\n        words.get(index).push(item);\n      } else {\n        words.set([index],\
    \ new Array());\n        words.get(index).push(item);\n      }\n    }\n  }\n \
    \ \n  for(let i = 0; i < words.size; i++) {\n    if(words.get(i).length === n)\
    \ {\n      result.push(words.get(i));\n    }\n  }\n  return result;\n}\n", " \
    \ return select_words_impl(s, n, \"\");\n}\n", "\tconst words: string[] = [];\n\
    \tlet start = 0;\n\tlet end = s.length - 1;\n\twhile (start <= end && n > 1) {\n\
    \t\twhile (start <= end && s.charAt(start) == s.charAt(end)) {\n\t\t\tstart++;\n\
    \t\t\tend--;\n\t\t}\n\t\tif (end - start + 1 == n) {\n\t\t\twords.push(s.substring(start,\
    \ end + 1));\n\t\t\tstart = end;\n\t\t\tend = start - 1;\n\t\t}\n\t\tif (end -\
    \ start + 1 < n) {\n\t\t\tn--;\n\t\t}\n\t}\n\treturn words;\n}\n", "    let arr:\
    \ string[] = [];\n    while(s.length > 0) {\n        if(s.indexOf(select_letters(s,\
    \ n)) >= 0) {\n            arr.push(select_words(s.substring(0, s.indexOf(select_letters(s,\
    \ n)), n)));\n            \n            s = s.substring(s.indexOf(select_letters(s,\
    \ n)) +  select_letters(s, n));\n        }\n    }\n    return arr;\n}\n", "  \
    \  var result: string[] = [];\n    if (!s || s.length === 0) {\n        return\
    \ result;\n    }\n\n    var index = 0;\n    while (index < s.length && s.charAt(index)\
    \ !== \" \") {\n        index++;\n    }\n\n    var startIndex = 0;\n    while\
    \ (index < s.length && s.charAt(index) !== \" \") {\n        index++;\n      \
    \  startIndex++;\n    }\n\n    while (startIndex + n <= s.length) {\n        if\
    \ (s.substring(startIndex, startIndex + n).match(/[aeiou]/)) {\n            result.push(s.substring(startIndex,\
    \ startIndex + n));\n            startIndex += n;\n        }\n        index++;\n\
    \        startIndex++;\n    }\n    return result;\n}\n", "    let arr = s.split(\"\
    \ \")\n    let result: string[] = []\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        if (arr[i].split(\"\").filter((c: string) => c.toUpperCase() == c).length\
    \ == n) {\n            result.push(arr[i])\n        }\n    }\n    return result\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nHi Murthy, thank you for taking the time\
    \ to share your answer. Unfortunately, this doesn't work for every case e.g. \"\
    simple\" should return an empty array and should not return [\"simple\"]. Thanks\
    \ for taking the time to answer though! :)\n<|/ c |>\n<| c |>\nHi Murthy, thank\
    \ you for taking the time to share your answer. Unfortunately, this doesn't work\
    \ for every case e.g. \"simple\" should return an empty array and should not return\
    \ [\"simple\"]. Thanks for taking the time to answer though! :)\n<|/ c |>\n<|\
    \ c |>\nHi Murthy, thank you for taking the time to share your answer. Unfortunately,\
    \ this doesn't work for every case e.g. \"simple\" should return an empty array\
    \ and should not return [\"simple\"]. Thanks for taking the time to answer though!\
    \ :)\n<|/ c |>\n<| c |>\nHi Murthy, thank you for taking the time to share your\
    \ answer. Unfortunately, this doesn't work for every case e.g. \"simple\" should\
    \ return an empty array and should not return [\"simple\"]. Thanks for taking\
    \ the time to answer though! :)\n<|/ c |>\n<| c |>\nHi Murthy, thank you for taking\
    \ the time to share your answer. Unfortunately, this doesn't work for every case\
    \ e.g. \"simple\" should return an empty array and should not return [\"simple\"\
    ]. Thanks for taking the time to answer though! :)\n<|/ c |>\n<| a |>\nThe below\
    \ code should work\n<code>", "    if (!s || n == 0) {\n        return [];\n  \
    \  }\n    if (s.match(/[a-z]/) && s.match(/[A-Z]/)) {\n        return words.filter(w\
    \ => w.match(new RegExp(`[${consonants}]`, \"g\"))).filter(w => w.match(new RegExp(`^${s}$`,\
    \ \"g\"))).filter(w => w.match(new RegExp(`^${s.slice(0,n)}$`, \"g\"))).map(w\
    \ => {\n            return w.trim().replace(/ /g, \"\").replace(/\\s+/g, \"\"\
    )\n        }).filter(w => w.length == n).sort().map(w => w.replace(/\\s+/g, \"\
    \ \"));\n    }\n    return [];\n}\n", "  if (n == 1) {\n    return s.split(\"\
    \ \").filter((word) => word.length == n).map(\n      (word) => word.slice(0, n)\n\
    \    );\n  } else {\n    let str2 = s.split(\" \");\n    str2 = str2.filter((word)\
    \ => word.length == n);\n    return str2.map((word) => word.slice(0, n));\n  }\n\
    }\n", "  let words: string[] = [];\n  let currentWord = \"\";\n  let vowels =\
    \ \"aeiou\";\n  \n  for (let i = 0; i < s.length; i++) {\n    // if the current\
    \ letter is vowel\n    if(vowels.indexOf(s[i].toLowerCase()) !== -1){\n      words.push(currentWord);\n\
    \      currentWord = \"\";\n    }\n    // otherwise append to the current word\n\
    \    else {\n      currentWord += s[i];\n    }\n  }\n  \n  // if there are letters\
    \ in the word left in the array, add them to the array\n  if(currentWord.length\
    \ > 0){\n    words.push(currentWord);\n  }\n  \n  // remove duplicate words from\
    \ the array\n  words = words.filter((value, index, self) => {\n    return self.indexOf(value)\
    \ === index;\n  });\n  \n  // count the number of consonants in the word array\
    \ (ignore vowels)\n  let numberOfConsonants = words.filter(word => /[bcdfghjklmnpqrstvwxyz]+/gi.test(word)).map(word\
    \ => word.length);\n  \n  // return all words that contain 'n' consonants\n  return\
    \ words.filter(word => numberOfConsonants.indexOf(word.length) === n);\n}", "\t\
    if (s.length == 0) return [];\n\treturn s.split(\" \").filter(w => w.match(/\\\
    w/g).length == n).sort();\n}\n", "  if (n === 0) return [];\n\n  const words:\
    \ string[] = [];\n  let index = 0;\n  while(index < s.length) {\n    const c =\
    \ s.charAt(index);\n    if (c === ' ') break;\n    if (c !== 'a' && c !== 'e'\
    \ && c !== 'i' && c !== 'o' && c !== 'u' && c !== 'A' && c !== 'E' && c !== 'I'\
    \ && c !== 'O' && c !== 'U') words.push(s.substring(index, index + 1));\n    index\
    \ += 1;\n  }\n  return words;\n}\n", "    let words: string[] = [];\n    let pos\
    \ = 0;\n    while(pos < s.length){\n        if(s.substr(pos, n).search(/[a-zA-Z]+/g)\
    \ !== -1){\n            words.push(s.substr(pos, n));\n        }\n        pos\
    \ += n;\n    }\n    return words;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nPlease\
    \ don't post only code as an answer, but also provide an explanation what your\
    \ code does and how it solves the problem of the question. Answers with an explanation\
    \ are usually more helpful and of better quality, and are more likely to attract\
    \ upvotes.\n<|/ c |>\n<| c |>\nThe only reason I used my own \"words\" was because\
    \ I was only familiar with the term \"words\" and wanted to use words from my\
    \ own experience. I'm glad that my code is better than any other code I saw on\
    \ Stack Overflow. I've been programming in Python for over 20 years and have had\
    \ to learn a new programming language to learn new things because I didn't know\
    \ them at the time. I learned the differences between Python and C# and Python\
    \ is my favorite language. I'm glad to have helped people get better at programming.\n\
    <|/ c |>\n<| c |>\nthank you for the clarification. Sorry about that. :)\n<|/\
    \ c |>\n<| a dscore=0 |>\n<code>\ndef select_words(s, n):\n    return s[::n]\n\
    </code>\n<|/ a tags=string,python,substring,python-3.x,arraylist |>\n<| c |>\n\
    `s[::n]` will iterate over the string `n` times. That means it's going to be O(n^2)\
    \ complexity, which is not what we're looking for.\n<|/ c |>\n<| a dscore=0 tags=string,python,substring,python-3.x,arraylist\
    \ |>\nOne of the simplest approach would be to iterate over the string and just\
    \ print characters which are equal to n. \n<code>\ndef select_words(s, n):\n \
    \   for character in s:\n        if character == n:\n            print(character)\n\
    </code>\n<|/ a |>\n<| c |>\nThe question asked for an array as output, not a printable\
    \ string\n<|/ c |>\n<| a tags=string,python,substring,python-3.x,arraylist |>\n\
    Another solution, using the itertools module in a generator function:\n<code>\n\
    def select_words(s, n):\n    it = iter(s.split())\n    word = next(it)\n    yield\
    \ word\n    for word in it:\n        if word == n:\n            yield word\n</code>\n\
    For example:\n<code>\n>>> s = 'a ", "  if (s.length === 0) {\n    return []\n\
    \  }\n  const counts = {}\n  for (let i = 0; i < s.length; i++) {\n    const c\
    \ = s.charAt(i)\n    if (c in counts === false) {\n      counts[c] = 0\n    }\n\
    \    counts[c]++\n  }\n  const words = []\n  for (let i = 0; i < s.length; i++)\
    \ {\n    const c = s.charAt(i)\n    if (counts[c] === n) {\n      words.push(s.substring(i,\
    \ i + n))\n    }\n  }\n  return words\n}\n", "\tlet arr = []\n\tlet i = 0\n\t\
    while (i < s.length) {\n\t\tlet j = i - 1\n\t\twhile (j < s.length && s[i] !==\
    \ s[j]) {\n\t\t\tj--\n\t\t}\n\t\tif (j < i && j + n === i) {\n\t\t\tarr.push(s.substr(i,\
    \ j + n - 1))\n\t\t\ti = j + n\n\t\t}\n\t\ti++\n\t}\n\treturn arr\n}\n", "\tvar\
    \ result = [];\n\tif (s.trim() === \"\") {\n\t\treturn result;\n\t}\n\tfor (var\
    \ i = 0; i < s.length; ++i) {\n\t\tvar index = s.indexOf(\"_\", i);\n\t\tif (index\
    \ === -1) {\n\t\t\tindex = s.length;\n\t\t}\n\t\tvar substr = s.substr(i, index\
    \ - i);\n\t\tif (substr.search(/[^aeiou]/g) === -1) {\n\t\t\tresult.push(substr);\n\
    \t\t}\n\t}\n\treturn result;\n}\n", "\tlet result: string[] = [];\n\n\tlet current:\
    \ string = s;\n\tlet count: number = 1;\n\n\twhile (true) {\n\t\tlet startIndex:\
    \ number = current.indexOf(\" \");\n\t\tif (startIndex == -1) {\n\t\t\tresult.push(current);\n\
    \t\t\tbreak;\n\t\t}\n\t\tlet currentWord: string = current.substr(0, startIndex);\n\
    \t\tlet subString: string = current.substr(startIndex + 1);\n\t\t\n\t\tif (subString.length\
    \ > n) {\n\t\t\tresult.push(currentWord);\n\t\t}\n\t\tcurrent = subString;\n\t\
    }\n\n\treturn result;\n}\n", "  console.log(`select_words: s: $s n: $n`);\n  if\
    \ (s === \"\") {\n    return [];\n  }\n  const chars: string[] = [];\n  let index\
    \ = 0;\n  for (let i = 0; i < s.length; i++) {\n    const char = s[i];\n    if\
    \ (char.match(/[a-zA-Z]/) && char.match(/[0-9]/)) {\n      for (let j = 1; j <\
    \ n; j++) {\n        if (chars[j] === char) {\n          chars.splice(j, 0, char);\n\
    \        }\n      }\n    } else if (char === \" \") {\n      chars.push(char);\n\
    \    } else {\n      return [];\n    }\n    index++;\n  }\n  return chars;\n}\n",
  "  return [];\n}\n", "    let arr = s.split(\"\");\n    let result = [];\n    \n\
    \    for (let i = 0; i < arr.length; i++) {\n        // count the characters that\
    \ match the regex\n        let reg = new RegExp(`[^${arr[i]}]*`);\n        let\
    \ c = arr.match(reg).length;\n        if (c == n) {\n            result.push(arr[i])\n\
    \        }\n    }\n    return result.length == 0 ? [] : result;\n}\n", "  let\
    \ result: string[] = [];\n  if (n === 0) return result;\n  const start = 0;\n\
    \  for (let i = start; i < s.length; i++) {\n    const ch = s[i];\n    if (n >=\
    \ 2 && i > 0 && s[i - 1] === \" \") {\n      n -= 2;\n      continue;\n    }\n\
    \    if (ch === \"a\" || ch === \"e\" || ch === \"i\" || ch === \"o\" || ch ===\
    \ \"u\") {\n      result.push(s.substr(start, i - start));\n      start = i +\
    \ 1;\n    }\n  }\n  if (s.length > start) {\n    result.push(s.substr(start, s.length\
    \ - start));\n  }\n  return result;\n}\n", "    if (n === 0)\n        return [];\n\
    \    if (s.length === 0)\n        return [];\n\n    let i: number;\n    let letterIndex:\
    \ number;\n    const words: string[] = [];\n\n    for (i = 0; i < s.length; i++)\
    \ {\n        letterIndex = s.indexOf(s.charAt(i), 0);\n        if (letterIndex\
    \ === -1)\n            break;\n        letterIndex++;\n        if (letterIndex\
    \ === n) {\n            words.push(s.substr(0, letterIndex));\n        }\n   \
    \ }\n\n    return words;\n}\n", "    const words: string[] = [];\n    let current\
    \ = 0;\n    \n    // while there are more characters to process\n    while (current\
    \ < s.length) {\n        // get current character\n        const currentChar =\
    \ s[current];\n        // if current character is a vowel\n        if (vowels.includes(currentChar))\
    \ {\n            // add current character to the words array\n            words.push(currentChar);\n\
    \        }\n        // increment the current index\n        current++;\n     \
    \   // if current index is out of bounds\n        if (current >= s.length) {\n\
    \            // return words array\n            return words;\n        }\n   \
    \ }\n    // return an empty array if words.length is not divisible by n\n    return\
    \ words.filter((x, i, arr) => arr.filter((y) => y === x).length === n);\n}\n",
  "  if (s == null || n == 0)\n    return [];\n  const splits: string[] = [];\n  for\
    \ (const word of s.split(' ')) {\n    const chars = word.trim().split('');\n \
    \   if (chars.some((c) => c.match(/[bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ]+/)))\
    \ {\n      splits.push(word);\n    }\n  }\n  return splits.sort().filter((x) =>\
    \ x.split('').length == n);\n}\n", "    if (s.length === 0 || n > s.length ||\
    \ n === 0) return [];\n    const words = splitWords(s);\n    let result = [];\n\
    \    let start = 0;\n    const maxChars = (n + 1) * 2 - 1;\n    while (words.length\
    \ > 0) {\n        const word = words[0];\n        let end = (word.length <= n)\
    \ ? word.length : n;\n        let found = true;\n        while (found && end -\
    \ start <= maxChars) {\n            if (word[end - start] !== 'a') {\n       \
    \         found = false;\n                break;\n            }\n            end\
    \ -= 1;\n        }\n        if (found) {\n            result.push(word.slice(0,\
    \ end));\n            words = words.slice(1);\n        }\n        start = end;\n\
    \    }\n    return result;\n}", "\tlet words: string[] = [];\n\t\n\tif(s !== '')\
    \ {\n\t\twords = s.split(\" \").map((word: string) => {\n\t\t\tlet matches = 0;\n\
    \t\t\tlet consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n\t\t\t\
    let vowels = \"aeiou\";\n\t\t\tfor(let i = 0; i < word.length; ++i) {\n\t\t\t\t\
    if(vowels.indexOf(word[i]) !== -1) {\n\t\t\t\t\tmatches++;\n\t\t\t\t}\n\t\t\t\t\
    if(consonants.indexOf(word[i]) !== -1) {\n\t\t\t\t\tmatches++;\n\t\t\t\t}\n\t\t\
    \t}\n\t\t\tif(matches === n) {\n\t\t\t\treturn word;\n\t\t\t}\n\t\t})\n\t}\n\t\
    return words;\n}\n", "  \n}\n\n", "  let arr: any = [];\n\n  // check if string\
    \ is empty\n  if (s == '') return arr;\n\n  // find all consonants in string\n\
    \  let vowels = 'aeiou';\n  let consonants = vowels.split('');\n\n  // find words\
    \ that contain this amount of consonants\n  for (let i = 0; i < s.length; i++)\
    \ {\n    for (let j = 0; j < n; j++) {\n      if (consonants.indexOf(s[i]) > -1)\
    \ {\n        arr.push(s[i]);\n      }\n    }\n  }\n  return arr;\n}\n", "  const\
    \ set = new Set(s.split(\" \"));\n  return Array.from(set).filter((word: string)\
    \ => {\n    if (word.length === n) return true;\n    return false;\n  });\n}\n",
  "    let res = new Array()\n    for(let i=0;i<s.length-1;i++) {\n        for(let\
    \ j=i;j<s.length-1;j++) {\n            if(s.charAt(i)==s.charAt(j)) {\n      \
    \          res.push(s.substring(i, j))\n            }\n        }\n    }\n    return\
    \ res\n}\n", "  return [];\n}\n", "  const myString: string[] = [];\n  if(s ==\
    \ \"\"){\n    return myString;\n  }\n  let start = 0;\n  let end = 0;\n  let consonants\
    \ = \"\";\n  let letters = \"\";\n  while(end < s.length){\n    consonants = s[end]\n\
    \    letters += s[end]\n    end += 1;\n  }\n  while(end < s.length){\n    consonants\
    \ = consonants.concat(s[end]);\n    end += 1;\n  }\n  if(n >= letters.length){\n\
    \    return myString;\n  }\n  if(n < letters.length){\n    return [];\n  }\n \
    \ let countLetters = 0;\n  let countConsonants = 0;\n  let indexLetters = 0;\n\
    \  let indexConsonants = 0;\n  let consonantsString = \"\";\n  let lettersString\
    \ = \"\";\n  let stringLengthConsonants = consonants.length;\n  while(end < s.length){\n\
    \    consonants += s[end]\n    consonantsString += consonants\n    end += 1;\n\
    \  }\n  while(end < s.length){\n    consonantsString += consonants.concat(s[end]);\n\
    \    end += 1;\n  }\n  let wordLength = consonants.length;\n  if(wordLength >\
    \ n){\n    return myString;\n  }\n  while(end < s.length){\n    letters += s[end]\n\
    \    lettersString += letters\n    end += 1;\n  }\n  while(end < s.length){\n\
    \    lettersString += letters.concat(s[end]);\n    end += 1;\n  }\n  countLetters\
    \ = lettersString.length;\n  countConsonants = consonantsString.length;\n  if(countLetters\
    \ == wordLength){\n    return myString;\n  }\n  if(countConsonants == wordLength){\n\
    \    return myString;\n  }\n  let index = 0;\n  while(end < s.length){\n    if(s[index]\
    \ == consonants[indexLetters]){\n      indexLetters += 1;\n    }\n    if(s[index]\
    \ == consonants[indexConsonants]){\n      indexConsonants += 1;\n    }\n    end\
    \ += 1;\n  }\n  if(countLetters == countConsonants){\n    while(end < s.length){\n\
    \      if(s[index] == consonants[indexLetters]\n        && s[index] == letters[indexLetters]){\n\
    \        indexLetters += 1;\n      }\n      end += 1;\n    }\n    return myString;\n\
    \  }\n  if(countLetters < countConsonants){\n    while(end < s.length){\n    \
    \  if(s[index] == letters[indexLetters]\n        && s[index] == consonants[indexConsonants]){\n\
    \        indexCon", "\tif (s.length === 0) {\n\t\treturn [];\n\t}\n\n\tlet result:\
    \ string[] = [];\n\n\tlet letters = count_letters(s);\n\tlet words: string[] =\
    \ [];\n\tfor (let letter of letters) {\n\t\tlet i = 1;\n\t\twhile (i <= n) {\n\
    \t\t\tlet index = letters.indexOf(letter, i + 1);\n\t\t\tif (index > -1) {\n\t\
    \t\t\twords.push(s.substring(index, index + 1));\n\t\t\t\tbreak;\n\t\t\t} else\
    \ {\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn words;\n}\n", "    if (s ==\
    \ \"\") return [];\n\n    let words = [];\n    let currentWord = \"\";\n    for\
    \ (let i = 0; i < s.length; ++i) {\n        let ch = s[i];\n\n        if (ch ==\
    \ \" \" || ch == \"\\n\" || ch == \"\\r\" || ch == \"\\t\") {\n            if\
    \ (words.length == 0 || currentWord.length > n) {\n                words.push(currentWord);\n\
    \            }\n            currentWord = \"\";\n        }\n        else {\n \
    \           if (words.length == 0 || currentWord.length >= n) {\n            \
    \    currentWord += ch;\n            }\n        }\n    }\n    if (words.length\
    \ == 0 || currentWord.length > n) {\n        words.push(currentWord);\n    }\n\
    \    return words;\n}", "\tvar arr = s.split(\" \");\n\treturn arr.filter((w)\
    \ => {\n\t\tvar count = countConsonants(w);\n\t\treturn count === n;\n\t});\n}",
  "\tlet words = new Array<string>();\n\tlet index = s.length - n;\n\tfor (let i =\
    \ 0; i < index; i++) {\n\t\tlet word = \"\";\n\t\twhile (index > -1) {\n\t\t\t\
    if (s.charAt(index) != \" \") {\n\t\t\t\tword += s.charAt(index);\n\t\t\t\tindex--;\n\
    \t\t\t} else {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\twords.push(word);\n\t}\n\t\
    return words;\n}\n", "  const result: string[] = [];\n  if (n == 0) return result;\n\
    \  let index = 0;\n  while (true) {\n    const char = s[index];\n    if (char\
    \ == \"\") break;\n    if (!isConsonant(char)) {\n      result.push(s[index]);\n\
    \    }\n    ++index;\n  }\n  return result;\n}\n", "    let words: string[] =\
    \ [];\n    let i = 0;\n    let j = 0;\n    while (i<s.length && j<n) {\n     \
    \   if (s.charAt(i)!=\" \") {\n            words.push(s.substring(i, j+1));\n\
    \            j++;\n        }\n        else {\n            i++;\n        }\n  \
    \  }\n    if (j<n) {\n        words.push(s.substring(i, s.length));\n    }\n \
    \   return words;\n}", "  if (!s) return [];\n\n  if (n == 1) return s.split('\
    \ ');\n\n  let result = [];\n  s = s.split(' ');\n\n  for (let i = 1; i < s.length;\
    \ ++i) {\n    let count = count_consonants(s[i]);\n    if (count == n) {\n   \
    \   result.push(s[i]);\n    }\n  }\n\n  return result;\n}\n</code>\n<|/ a tags=javascript,algorithm\
    \ |>\n<| a tags=javascript,algorithm |>\n<code>\nvar result = str.split(' ').filter(function(str)\
    \ {\n    return str.split('').filter(function(char) {\n        return 'aeiou'.includes(char);\n\
    \    }).length == n;\n})\n</code>\n<|/ a dscore=1 |>\n<| c |>\nWhile this code\
    \ may provide a solution to the question, it's better to add context as to why/how\
    \ it works. This can help future users learn, and apply that knowledge to their\
    \ own code. You are also likely to have positive feedback from users in the form\
    \ of upvotes, when the code is explained.\n<|/ c |>\n<| a tags=javascript,algorithm\
    \ |>\nA possible solution using split and map methods:\n<code>\nconst select_words\
    \ = (string, length) => {\n  const str = string.split(' ');\n\n  return str.map((s)\
    \ => {\n    const count = s.split('').map((c) => {\n      return c.match(/[aeiou]/)\
    \ ? 1 : 0;\n    }).filter((c) => c).length;\n\n    return count === length\n \
    \     ? s\n      : null;\n  }).filter(Boolean);\n};\n</code>\n<|/ a dscore=1 |>\n\
    <| a dscore=1 |>\nA simple solution in javascript\n\n<code>", "\tconst result:\
    \ string[] = [];\n\n\t// First split the input string into words\n\tconst words\
    \ = s.split(\" \");\n\tconst consonants = Array(52).fill(\"x\").map(n => String.fromCharCode(n\
    \ + 97));\n\tlet currentWord = \"\";\n\tlet nextWord = \"\";\n\tlet numConsonants\
    \ = 0;\n\tfor (let i = 0; i < words.length; i++) {\n\t\tnextWord = words[i].substr(1);\n\
    \t\tnumConsonants = 0;\n\t\tfor (let j = 0; j < nextWord.length; j++) {\n\t\t\t\
    if (consonants.includes(nextWord[j])) {\n\t\t\t\tnumConsonants++;\n\t\t\t}\n\t\
    \t}\n\t\tif (numConsonants === n) {\n\t\t\tresult.push(nextWord);\n\t\t}\n\t}\n\
    \n\treturn result;\n}\n", "  let arr = s.split(\" \");\n  let result = [];\n \
    \ for (var i = 0; i < arr.length; i++) {\n    let word = arr[i];\n    let count\
    \ = word.split(\"\").length;\n    if (count == n) {\n      result.push(word);\n\
    \    }\n  }\n  return result;\n}\n", "  if(s.length == 0) {\n    return [];\n\
    \  }\n  let words: string[] = [];\n  let pos = 0;\n  while(pos < s.length) {\n\
    \    let count = 0;\n    for(let i = pos; i < s.length; i++) {\n      if(s[i]\
    \ === \"a\" || s[i] === \"e\" || s[i] === \"i\" || s[i] === \"o\" || s[i] ===\
    \ \"u\") {\n        count++;\n      }\n    }\n    if(count === n) {\n      words.push(s.substring(pos,\
    \ i));\n      pos = i + 1;\n    }\n  }\n  return words;\n}\n", "  var arr = s.split(\"\
    \ \");\n  var retArr = [];\n  for (var i = 0; i <= arr.length; i++) {\n    for\
    \ (var j = 0; j < n; j++) {\n      if (arr[i].includes(arr[i].substring(0, j)))\
    \ {\n        retArr.push(arr[i]);\n      }\n    }\n  }\n  return retArr;\n}\n",
  "  if (s === '') return [];\n\n  const result: Array<string> = [];\n  let currentCount:\
    \ number = 0;\n\n  for (let i = 0; i < s.length; i++) {\n    const currentLetter\
    \ = s[i];\n    if (currentLetter in consonants) {\n      if (currentCount ===\
    \ n) {\n        result.push(s.substr(0, i));\n      }\n      currentCount++;\n\
    \    }\n  }\n\n  return result;\n}\n", "  let ws = \"\";\n  let count = 0;\n \
    \ let len = s.length;\n  \n  // if string s is empty then return an empty array\n\
    \  if (len === 0) {\n    return [];\n  }\n  \n  // while string is still not empty\n\
    \  while (len > 0) {\n    // remove first character from string\n    s = s.substr(1);\n\
    \    \n    // if there are n characters, then add a new word to array ws\n   \
    \ if (count < n) {\n      ws += s.charAt(0);\n      count++;\n    }\n    \n  \
    \  // if string s is empty then break the loop\n    else if (s.length === 0) {\n\
    \      break;\n    }\n  }\n  \n  // if string s is empty then return an empty\
    \ array\n  if (s.length === 0) {\n    return [];\n  }\n  \n  // otherwise, return\
    \ string array ws\n  return ws;\n}\n", "  const res = [];\n  for(let i = 0; i\
    \ < s.length; i++) {\n    let tempString = s.substr(i);\n    let count = 0;\n\
    \    for(let j = 0; j < tempString.length; j++) {\n      if(tempString[j] ===\
    \ tempString[j].toUpperCase()) {\n        count++;\n      }\n    }\n    if(count\
    \ === n) {\n      res.push(s.substr(0, i));\n    }\n  }\n  return res;\n}\n",
  "  var arr = s.split(\" \");\n  var ret = new Array();\n  for (var i = 0; i < arr.length;\
    \ i++) {\n    for (var j = 0; j < arr[i].length; j++) {\n      for (var k = 0;\
    \ k < n; k++) {\n        if (arr[i][j].match(/[aeiou]/g) != null) {\n        \
    \  ret[ret.length] = arr[i][j];\n        }\n      }\n    }\n  }\n  return ret;\n\
    }\n", "  if (s == '') return []\n  \n  let words: string[] = [];\n  let currPos:\
    \ number = 0\n  let currChar: string = s[0]\n  \n  for (let i = 1; i < s.length;\
    \ ++i) {\n    let nextChar = s[i]\n    if (nextChar == currChar) {\n      currPos\
    \ += 1;\n    } else {\n      if (currPos === n) {\n        words.push(currChar.trim());\n\
    \        currPos = 1;\n        currChar = nextChar;\n      } else {\n        currPos\
    \ = 1;\n        currChar = nextChar;\n      }\n    }\n  }\n  \n  return words;\n\
    }\n", "  const result = [];\n  if (s === \"\") return result;\n  for (let i =\
    \ 0; i < s.length; i += 1) {\n    const char = s.charAt(i);\n    if (n <= 0 ||\
    \ n === 1 && char === \" \") {\n      result.push(char);\n    } else {\n     \
    \ for (let j = i + 1; j < s.length; j += 1) {\n        if (s.charAt(j) !== char)\
    \ break;\n        if (n === 1 || char === \" \") {\n          result.push(s.slice(i,\
    \ j + 1));\n          break;\n        } else {\n          n -= 1;\n        }\n\
    \      }\n    }\n  }\n  return result;\n}\n", "  if (n == 0) {\n    return [];\n\
    \  }\n  let arr: string[] = [];\n  for (let i = 0; i < s.length; i++) {\n    const\
    \ char = s[i];\n    const index = s.indexOf(char, i + 1);\n    for (let j = i\
    \ + 1; j < index; j++) {\n      if (char != s[j] && s.charAt(j) != ' ') {\n  \
    \      arr.push(s.slice(i, j));\n        break;\n      }\n    }\n  }\n  return\
    \ arr;\n}\n", "\tlet words = [];\n\tlet pattern = \n\t\tnew RegExp(\n\t\t\t`^${\n\
    \t\t\t\ts\n\t\t\t\t\t.split(\"\")\n\t\t\t\t\t.map(x => \n\t\t\t\t\t\tx.match(/[a-z]/i)\n\
    \t\t\t\t\t\t? x\n\t\t\t\t\t\t: \"\\\\\" + x\n\t\t\t\t\t)\n\t\t\t\t\t.join(\"|\"\
    )\n\t\t\t}$`\n\t\t);\n\t\n\tlet match = new RegExp(pattern);\n\t\n\twhile(match.test(s))\
    \ {\n\t\tlet match = s.match(pattern);\n\t\twords.push(match[0]);\n\t\ts = s.substring(match.index);\n\
    \t}\n\t\n\twords = words.filter(w => w.length == n);\n\t\n\treturn words;\n}\n",
  "  if (n === 0) return [];\n  let word_list = s.split(' ');\n  let arr: string[]\
    \ = [];\n  for (let i = 0; i < word_list.length; i++) {\n    let word: string\
    \ = word_list[i];\n    if (word.length > n) {\n      let word_list2: string[]\
    \ = word_list.slice(0,i).concat(word_list.slice(i+1));\n      let words2: string[]\
    \ = select_words(word_list2, n-1);\n      for (let j = 0; j < words2.length; j++)\
    \ {\n        arr = arr.concat([word+words2[j]]);\n      }\n    }\n  }\n  return\
    \ arr;\n}\n", "  // TODO - you might want to use more descriptive variable names\n\
    \  let strArray: string[] = [];\n  for (let i = 0; i < s.length; i++) {\n    let\
    \ c: number = s.charAt(i);\n    if (c === ' ') {\n      strArray = strArray.filter((x)\
    \ => x != ' ')\n    }\n    if (n === 1) {\n      if (c === 'a' || c === 'e' ||\
    \ c === 'i' || c === 'o' || c === 'u' || c === 'y') {\n        strArray.push(s);\n\
    \      }\n    }\n    if (n === 2) {\n      if (c === 'a' || c === 'e' || c ===\
    \ 'i' || c === 'o' || c === 'u') {\n        strArray.push(s);\n      }\n    }\n\
    \    if (n === 3) {\n      if (c === 'a' || c === 'e' || c === 'i' || c === 'o')\
    \ {\n        strArray.push(s);\n      }\n    }\n    if (n === 4) {\n      if (c\
    \ === 'a' || c === 'e' || c === 'i') {\n        strArray.push(s);\n      }\n \
    \   }\n    if (n === 5) {\n      if (c === 'a' || c === 'e' || c === 'i' || c\
    \ === 'o') {\n        strArray.push(s);\n      }\n    }\n    if (n === 6) {\n\
    \      if (c === 'a' || c === 'e' || c === 'i' || c === 'o' || c === 'u') {\n\
    \        strArray.push(s);\n      }\n    }\n  }\n  return strArray;\n}\n", " \
    \ \n}\n", "\tif (s === \"\") {\n\t\treturn [];\n\t} else {\n\t\tlet arr: string[]\
    \ = [];\n\t\tfor (let i = 0; i < s.length; i++) {\n\t\t\tfor (let j = 0; j < s.length;\
    \ j++) {\n\t\t\t\tif (isConsonant(s.charAt(j)) == false) {\n\t\t\t\t\tarr.push(s.slice(i,\
    \ j));\n\t\t\t\t\ti = j;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn\
    \ arr;\n\t}\n}\n", "  let arr: string[] = [];\n  for (let i = 0; i < s.length;\
    \ i++) {\n    const char = s.charAt(i);\n    if (char === \" \") {\n      if (n\
    \ === 0) {\n        return arr;\n      }\n      n--;\n    } else {\n      if (n\
    \ > 0) {\n        arr.push(char);\n        n--;\n      }\n    }\n  }\n  return\
    \ arr;\n}\n", "  let arr: any = [];\n  for (var i = 0; i < s.length; i++) {\n\
    \    if (s.charAt(i) == \" \")\n      continue;\n    if (s.charAt(i) == \" \"\
    ) {\n      if (n == 0 || n == 1 && arr.length == 1)\n        continue;\n     \
    \ arr = arr.concat(s);\n      break;\n    } else {\n      for (var j = 0; j <\
    \ n; j++) {\n        if (s.charAt(i) == s.charAt(i + j)) {\n          arr.push(s.slice(i,\
    \ i + j + 1));\n          break;\n        }\n      }\n    }\n  }\n  return arr;\n\
    }\n", "  if (s.length == 0) {\n    return []\n  }\n\n  let result: any = []\n\
    \  for (let index = 0; index < s.length; index++) {\n    for (let i = 0; i < n;\
    \ i++) {\n      if (s[index] == \" \") {\n        continue\n      }\n      if\
    \ (s[index] == \".\" || s[index] == \",\" || s[index] == \":\" || s[index] ==\
    \ \";\") {\n        continue\n      }\n      if (s[index] == \" \") {\n      \
    \  result.push(s[index])\n      } else {\n        break\n      }\n    }\n  }\n\
    \  return result\n}\n", "    if (s === \"\") return [];\n    if (n <= 0) return\
    \ [];\n    const result = new Array<string>();\n    for (let i = 0; i < s.length;\
    \ i++) {\n        const word = s.substr(i, n);\n        const matchWords = selectWordsRec(word);\n\
    \        for (const word of matchWords) {\n            if (result.indexOf(word)\
    \ === -1) {\n                result.push(word);\n            }\n        }\n  \
    \  }\n    return result;\n}\n", "\ts = s.toLowerCase();\n\tlet arr: string[] =\
    \ [];\n\tlet startPos: number;\n\tlet endPos: number;\n\tlet word: string;\n\t\
    for (let i = 0; i < s.length; i++) {\n\t\tstartPos = i;\n\t\tendPos = s.length;\n\
    \t\tword = \"\";\n\t\twhile (startPos <= endPos) {\n\t\t\tword += s[startPos];\n\
    \t\t\tstartPos++;\n\t\t\tif (startPos == endPos) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\
    \t\tif (s[startPos] == \" \") {\n\t\t\t\tendPos--;\n\t\t\t}\n\t\t}\n\t\tif (word\
    \ == \"\") {\n\t\t\tcontinue;\n\t\t}\n\t\tlet count = 0;\n\t\tfor (let j = startPos;\
    \ j < endPos; j++) {\n\t\t\tif (s[j] == \" \") {\n\t\t\t\tcount++;\n\t\t\t\tif\
    \ (count > n) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tarr.push(word);\n\
    \t}\n\treturn arr;\n}\n", "  let result = []\n  let i = 1;\n  while (i <= n) {\n\
    \    let isMatched = false;\n    for (let j = 0; j < s.length; j++) {\n      if\
    \ (s[i] !== s[j]) {\n        isMatched = true;\n        break;\n      }\n    }\n\
    \    if (!isMatched) {\n      result.push(s[i - 1])\n    }\n    i++;\n  }\n  return\
    \ result\n}\n", "    if (!s) {\n        return [];\n    }\n    let wordsArr: string[]\
    \ = [];\n    let firstWord = s.substr(0, s.indexOf(\",\"));\n    for (let i =\
    \ 0; i < firstWord.length; i++) {\n        if (firstWord.charAt(i) !== \" \")\
    \ {\n            wordsArr.push(firstWord.substr(i));\n        }\n    }\n    return\
    \ wordsArr.filter(word => {\n        let count = 0;\n        for (let i = 0; i\
    \ < word.length; i++) {\n            if (word.charAt(i) === \" \") {\n       \
    \         count += 1;\n            }\n        }\n        if (count === n) {\n\
    \            return true;\n        }\n        return false;\n    });\n}\n", " \
    \ if (s.length === 0) {\n    return [];\n  }\n  \n  return select_words_recursive(s,\
    \ n, []);\n}\n", "  if (s.length === 0)\n    return [];\n\n  const vowels = '\
    \ aeiou'.split('');\n  const consonants = 'bcdfghjklmnpqrstvwxyz'.split('');\n\
    \n  let words: string[] = [];\n  let startIndex = 0;\n  while (true) {\n    let\
    \ word: string;\n    if (s[startIndex] === ' ') {\n      word = \"\";\n    } else\
    \ {\n      word = s[startIndex].toString();\n    }\n    if (word.length <= n)\
    \ {\n      words.push(word);\n      startIndex++;\n    }\n    if (startIndex >=\
    \ s.length - 1)\n      break;\n    const charsLeft = n - word.length;\n    for\
    \ (let i = 0; i < charsLeft && startIndex < s.length; i++) {\n      if (s[startIndex]\
    \ === ' ') {\n        break;\n      }\n      if (consonants.indexOf(s[startIndex])\
    \ >= 0) {\n        words.push(word + s[startIndex]);\n        startIndex++;\n\
    \      }\n    }\n  }\n\n  return words;\n}\n", "  const words = [];\n\n  for (let\
    \ i = 0; i < s.length; i += 1) {\n    if (n === 0 || (i + 1) === s.length) {\n\
    \      words.push(s.substring(i, i + 1));\n    } else {\n      if (s[i] in consonants)\
    \ {\n        words.push(s.substring(i, i + 1));\n        n -= 1;\n      }\n  \
    \  }\n  }\n\n  return words;\n}\n", "  // ++[YOUR_CODE_HERE]\n  return [];\n}\n",
  "  let result: string[] = [];\n  \n  if (!s) return result;\n  \n  for (let i =\
    \ 0; i < s.length; i += 1) {\n    let char = s[i];\n    \n    if (char.match(/[aeiou]/))\
    \ {\n      for (let j = i; j < s.length && j < i + n; j += 1) {\n        if (s[j].match(/[aeiou]/))\
    \ break;\n      }\n      \n      if (j === i + n) result.push(s.slice(i, i + n));\n\
    \    }\n  }\n  \n  return result;\n}\n", "  \n}\n", "  if (n <= 0) {\n    return\
    \ [];\n  }\n\n  const words = [];\n  const vowels = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"];\n  let counter = 1;\n\n  for (let i = 0; i < s.length; i += 1) {\n \
    \   if (vowels.includes(s[i])) {\n      counter += 1;\n    } else {\n      if\
    \ (counter === n) {\n        words.push(s[i]);\n      }\n\n      counter = 1;\n\
    \    }\n  }\n\n  return words;\n}\n", "    // TODO\n}", "    let words = [];\n\
    \    let first = true;\n    for(let i = 0; i < s.length; i++) {\n        if(s[i]\
    \ == '\\0') break;\n        if(isConsonant(s[i])) {\n            if(first) {\n\
    \                words.push(s.substring(i, i + n));\n                first = false;\n\
    \            }\n        } else {\n            words.push(s.substring(i, i + n));\n\
    \        }\n    }\n    return words;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
