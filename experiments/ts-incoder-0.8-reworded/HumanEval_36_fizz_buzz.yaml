name: HumanEval_36_fizz_buzz
language: ts
prompt: "//Return the number of times the digit 7 appears in integers less than n\
  \ which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
  // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n\
  \  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
  \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
  \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
  }\n\ntest();"
completions: ["  if (n % 11 === 0 && n % 13 === 0) {\n    return 1\n  }\n  return\
    \ fizz_buzz(n - 1)\n}\n", "  let num = 0;\n  let divisibleBy11Or13 = n / 11 |\
    \ 0;\n  let divisibleBy11Or13LessThanN = (n % 11 | 0) === 0;\n  let divisibleBy13\
    \ = (n % 13 | 0) === 0;\n  for (let i = 1; i <= n; ++i) {\n    if ((i % divisibleBy11Or13)\
    \ === 0 && divisibleBy11Or13LessThanN) {\n      num++;\n    } else if (divisibleBy11Or13\
    \ !== 0 && i % divisibleBy11Or13 === 0 && divisibleBy13) {\n      num += 2;\n\
    \    } else if (divisibleBy11Or13 !== 0 && i % divisibleBy11Or13 === 0 && divisibleBy13\
    \ === false) {\n      num += 1;\n    }\n  }\n  return num;\n}\n", "  if (n % 11\
    \ === 0 || n % 13 === 0) return n\n\n  var count = 0;\n\n  while (n % 10 !== 0)\
    \ {\n    count++\n    n /= 10\n  }\n\n  return count\n}\n", "  if (n < 100) return\
    \ n;\n  if (n < 10) return fizz_buzz(n / 10);\n  if (n < 13) return fizz_buzz(n\
    \ % 10) + 1;\n  if (n < 100) return fizz_buzz((n / 10) + 1);\n}\n</code>\n<|/\
    \ a dscore=0 tags=javascript,algorithm |>\n<| c |>\n\"fizz_buzz(n) is a recursive\
    \ function. It takes a number and returns the number of times the digit 7 appears\
    \ in integers less than n which are divisible by 11 or 13.\"\n<|/ c |>\n<| c |>\n\
    That doesn't make any sense. `fizz_buzz` _is_ a recursive function. You can't\
    \ have one that is not a recursive function.\n<|/ c |>\n<| c |>\n\"fizz_buzz(n)\
    \ is a recursive function. It takes a number and returns the number of times the\
    \ digit 7 appears in integers less than n which are divisible by 11 or 13.\"\n\
    <|/ c |>\n<| c |>\nWell, that doesn't help you at all. You are asking about a\
    \ recursive function, but your comment doesn't make that clear.\n<|/ c |>\n<|\
    \ a dscore=0 tags=javascript,algorithm |>\nHere's one way using Array.filter \n\
    <code>", "    const s = String(parseInt(n));\n    return s.indexOf(\"7\") ===\
    \ -1 ? n : s.indexOf(\"11\") === -1 ? n : s.indexOf(\"13\") === -1 ? n : n;\n\
    }\n</code>\n<|/ a dscore=0 tags=javascript |>\n<| a tags=javascript |>\n<code>",
  "\tif (n < 11) {\n\t\treturn n\n\t} else if (n < 13) {\n\t\treturn fizz_buzz(n -\
    \ 3) * 11 + n\n\t} else if (n < 16) {\n\t\treturn fizz_buzz(n - 13) * 13 + n\n\
    \t} else {\n\t\treturn fizz_buzz(n - 16) * 16 + n\n\t}\n}\n", "    if (n === 0\
    \ || ((n % 11) === 0 && (n % 13) === 0)) {\n        return 0;\n    }\n    if (n\
    \ !== Math.ceil(n)) {\n        return fizz_buzz(Math.ceil(n));\n    }\n    return\
    \ 1;\n}", "  if (n < 100) {\n    if (n % 11 === 0 && n % 13 !== 0) {\n      return\
    \ 3;\n    }\n    return n % 11 === 0 ? 0 : 2;\n  }\n  if (n < 1000) {\n    if\
    \ (n % 11 === 0 || n % 13 !== 0) {\n      return 1;\n    }\n    return n % 11\
    \ === 0 ? 0 : 3;\n  }\n  return 4;\n}\n", "  let arr: number[] = [];\n  let count\
    \ = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0)\
    \ {\n      arr[i] = i;\n      count++;\n    } else {\n      arr[i] = count;\n\
    \    }\n  }\n  return arr[n];\n}\n\nconst fizz_buzz_test = () => {\n  expect(fizz_buzz(1)).toEqual(1);\n\
    \  expect(fizz_buzz(2)).toEqual(1);\n  expect(fizz_buzz(3)).toEqual(2);\n  expect(fizz_buzz(4)).toEqual(2);\n\
    \  expect(fizz_buzz(5)).toEqual(3);\n  expect(fizz_buzz(6)).toEqual(3);\n  expect(fizz_buzz(7)).toEqual(3);\n\
    \  expect(fizz_buzz(8)).toEqual(3);\n  expect(fizz_buzz(9)).toEqual(3);\n  expect(fizz_buzz(10)).toEqual(3);\n\
    \  expect(fizz_buzz(11)).toEqual(3);\n  expect(fizz_buzz(12)).toEqual(3);\n  expect(fizz_buzz(13)).toEqual(3);\n\
    \  expect(fizz_buzz(14)).toEqual(3);\n  expect(fizz_buzz(15)).toEqual(3);\n  expect(fizz_buzz(16)).toEqual(3);\n\
    \  expect(fizz_buzz(17)).toEqual(3);\n  expect(fizz_buzz(18)).toEqual(3);\n  expect(fizz_buzz(19)).toEqual(3);\n\
    \  expect(fizz_buzz(20)).toEqual(3);\n  expect(fizz_buzz(21)).toEqual(4);\n  expect(fizz_buzz(22)).toEqual(4);\n\
    \  expect(fizz_buzz(23)).toEqual(4);\n  expect(fizz_buzz(24)).toEqual(4);\n  expect(fizz_buzz(25)).toEqual(4);\n\
    \  expect(fizz_buzz(26)).toEqual(4);\n  expect(fizz_buzz(27)).toEqual(4);\n  expect(fizz_buzz(28)).toEqual(4);\n\
    \  expect(fizz_buzz(29)).toEqual(4);\n  expect(fizz_buzz(30)).toEqual(4);\n  expect(fizz_buzz(31)).toEqual(4);\n\
    \  expect(fizz_buzz(32)).toEqual(4);\n  expect(fizz_buzz(33)).toEqual(", "  let\
    \ remainder = n % 11;\n  if (remainder === 0 || remainder === 11) return n;\n\
    \  remainder = n % 13;\n  if (remainder === 0) return n + 1;\n  return n + 2;\n\
    }\n</code>\n<|/ a dscore=0 tags=fizzbuzz,javascript,ecmascript-6 |>\n<| a dscore=0\
    \ |>\n<code>", "  let n1 = n - 1;\n  for (let i = 2; i <= n / 11; i++) {\n   \
    \ if (n % i == 0 || i % 11 == 0 || i % 13 == 0) {\n      return i;\n    }\n  }\n\
    \  return n1;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis does not provide an\
    \ answer to the question. Once you have sufficient [reputation](https://stackoverflow.com/help/whats-reputation)\
    \ you will be able to [comment on any post](https://stackoverflow.com/help/privileges/comment);\
    \ instead, [provide answers that don't require clarification from the asker](https://meta.stackexchange.com/questions/214173/why-do-i-need-50-reputation-to-comment-what-can-i-do-instead).\
    \ - [From Review](/review/low-quality-posts/27147017)\n<|/ c |>\n<| c |>\nThe\
    \ solution is correct, if you test it on [Code Sandbox](https://www.codesandbox.io/s/competent-brook-szcqw?file=/src/index.tsx):\
    \ `fizz_buzz(78) //=> 2`, `fizz_buzz(79) //=> 3` - Please see the provided link\
    \ above.\n<|/ c |>\n<| c |>\nThe provided link just shows code and the result\
    \ is not what I'm looking for. I'm looking for a way to make a program that does\
    \ the same thing that the code below does, but with much less code.\n\n```javascript",
  "  if (n < 0) return 0;\n\n  const strings = Array.from({ length: 10 }, (_, i) =>\
    \ String(i));\n\n  const [count] = strings.filter(\n    (str: string) => str.startsWith(\"\
    7\") && isDivisibleBy11Or13(n)\n  );\n\n  return count || 0;\n}\n", "  let count\
    \ = 7;\n  while (n > count) {\n    if (n % 11 === 0 || n % 13 === 0) {\n     \
    \ count++;\n    }\n    n = Math.floor(n / 10);\n  }\n  return count;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThis code doesn't work in all cases. The first number\
    \ it returns is wrong, and for larger numbers it's wrong for some reason. Here's\
    \ an example:\n>>> fizz_buzz(91)\n5\n>>> fizz_buzz(139)\n7\n>>> fizz_buzz(136)\n\
    3\n>>> fizz_buzz(135)\n2\n>>> fizz_buzz(130)\n3\n>>> fizz_buzz(129)\n2\n>>> fizz_buzz(126)\n\
    4\n>>> fizz_buzz(125)\n4\n>>> fizz_buzz(124)\n2\n>>> fizz_buzz(121)\n3\n>>> fizz_buzz(118)\n\
    3\n>>> fizz_buzz(117)\n4\n>>> fizz_buzz(117)\n4\n>>> fizz_buzz(112)\n2\n>>> fizz_buzz(109)\n\
    5\n>>> fizz_buzz(104)\n4\n>>> fizz_buzz(100)\n1\n<|/ c |>\n<| c |>\nYeah, it's\
    \ definitely not correct for all cases. I guess that I misread the question a\
    \ little bit. Thanks for pointing that out!\n<|/ c |>\n<| a |>\n<code>", "  let\
    \ count = 0;\n  while (n > 1 && n != 11 && n != 13) {\n    if (n % 10 == 7 &&\
    \ n % 100 != 11) {\n      count++;\n    }\n    n = Math.floor(n / 10);\n  }\n\
    \  return count;\n}\n", "  let count = 0;\n  while (n >= 11 || n >= 13) {\n  \
    \  if (n % 11 === 0 && n % 13 === 0) {\n      count++;\n    }\n    n /= 13;\n\
    \  }\n  return count;\n}\n", "  const str = n.toString();\n  return str.includes('7')\
    \ ? str.split('7').length : 0;\n}\n", "  let counter = 0;\n  for (let i = 1; i\
    \ < n; i += 1) {\n    if (n % i === 0 || n % i === 11 || n % i === 13) {\n   \
    \   counter += 1;\n    }\n  }\n  return counter;\n}\n", "\tif(n%11==0){\n\t\t\
    if(n >= 13){\n\t\t\treturn 2;\n\t\t}\n\t\treturn 1;\n\t}\n\tif(n%13==0){\n\t\t\
    if(n >= 11){\n\t\t\treturn 3;\n\t\t}\n\t\treturn 2;\n\t}\n\treturn 0;\n}\n", " \
    \ let count = 0;\n  while (n >= 0) {\n    if (n % 11 === 0 || (n % 13 === 0 &&\
    \ n % 11 === 0)) {\n      ++count;\n    }\n    n /= 11;\n    n /= 13;\n  }\n \
    \ return count;\n}\n", "  const numDivisibleBy11 = n % 11;\n  const numDivisibleBy13\
    \ = n % 13;\n\n  if (numDivisibleBy11 === 0 || numDivisibleBy13 === 0) {\n   \
    \ return 0;\n  }\n\n  return 2;\n}\n", "    const isBuzzy = n => n % 11 === 0\
    \ || n % 13 === 0;\n    const fizzBuzz = n => String(n % 11) + String(n % 13);\n\
    \n    if (isBuzzy(n)) {\n        return 0;\n    }\n\n    let counter = 0;\n  \
    \  for (let i = 1; i <= n; i++) {\n        if (isBuzzy(i) && i <= n) {\n     \
    \       counter++;\n        }\n    }\n    return counter;\n}\n", "    if (n <\
    \ 0 || n % 11 === 0) {\n        return 0;\n    }\n\n    if (n % 13 === 0) {\n\
    \        return 2;\n    }\n\n    return 3;\n}\n", "  if (n < 11) return n\n  if\
    \ (n % 11 === 13) return n // return number as is if it is divisible by 13\n \
    \ if (n % 11 === 11) return 0 // return zero if the number is divisible by 11\n\
    \  return fizz_buzz(Math.floor(n / 11)) // recursively call the function with\
    \ n%11\n}\n", "  return Math.floor(n / 11) % 2 === 0 ? Math.floor(n / 13) % 2\
    \ === 0 ? 1 : 2 : 3\n}\n", "  const isEven = n % 2 === 0;\n  const isOdd = n %\
    \ 2 === 1;\n  const hasMultiple = (isEven && isOdd) || isEven;\n  return (hasMultiple\
    \ || n === 7) ? 3 : 1;\n}\n", "  const isPrime: boolean;\n  let count: number;\n\
    \  for (isPrime = false, count = 0; n < 1000; n++, count += n >= 200 && n <= 500\
    \ && n % 10 === 7 ? 1 : 0) {\n    if (isPrime) break;\n    for (let i = 1; i <=\
    \ n; i += 11) if (n % i === 11) isPrime = true;\n    for (let i = 1; i <= n; i\
    \ += 13) if (n % i === 13) isPrime = true;\n    if (isPrime) return count;\n \
    \ }\n  return -1;\n}\n", "  if (n === 0 || n === 1) {\n    return n;\n  }\n\n\
    \  if (n % 11 === 0 && n % 13 !== 0) {\n    return 1;\n  }\n\n  if (n % 11 ===\
    \ 0 && n % 13 !== 0) {\n    return 2;\n  }\n\n  if (n % 11 === 0 && n % 13 !==\
    \ 0) {\n    return 3;\n  }\n\n  if (n % 11 === 0 && n % 13 !== 0) {\n    return\
    \ 4;\n  }\n\n  if (n % 11 === 0 && n % 13 !== 0) {\n    return 5;\n  }\n\n  if\
    \ (n % 11 === 0 && n % 13 !== 0) {\n    return 6;\n  }\n\n  if (n % 11 === 0 &&\
    \ n % 13 !== 0) {\n    return 7;\n  }\n\n  if (n % 11 === 0 && n % 13 !== 0) {\n\
    \    return 8;\n  }\n\n  if (n % 11 === 0 && n % 13 !== 0) {\n    return 9;\n\
    \  }\n\n  if (n % 11 === 0 && n % 13 !== 0) {\n    return 10;\n  }\n\n  if (n\
    \ % 11 === 0 && n % 13 !== 0) {\n    return 11;\n  }\n\n  if (n % 11 === 0 &&\
    \ n % 13 !== 0) {\n    return 12;\n  }\n\n  return 0;\n}\n\nmodule.exports = fizz_buzz;\n\
    \n},{}],114:[function(require,module,exports){\nconst { isEven, isNaN, isInteger\
    \ } = require(\"@algebraicwolf/number\");\nconst { add, mul, pow, trunc } = require(\"\
    @algebraicwolf/vector-utils\");\nconst { repeat } = require(\"../util\");\nconst\
    \ { fromNullable, toNullable } = require(\"../conversion\");\n\nconst isPositive\
    \ = (n) => {\n  if (!isInteger(n)) {\n    throw new TypeError(\"Expected integer\
    \ but received \" + toNullable(n));\n  }\n\n  return trunc(n) === 0 || trunc(n)\
    \ === 1;\n};\n\nconst isNegative = (n) => {\n  if (!isInteger(n)) {\n    throw\
    \ new TypeError(\"Expected integer but received \" + toNullable(n));\n  }\n\n\
    \  return trunc(n) === -1 || trunc(n) === -2;\n};\n\nconst isIntegerAndNegative\
    \ = (n) => {\n  return isPositive(n) && isNegative(n);\n};\n\nconst isIntegerAndPositive\
    \ = (n) => {\n  return isPositive(n) && isNegative(n) === false;\n};\n\nconst\
    \ fromPositiveAndNegative = (n) => {\n  return isPositive(n) ? 0 : isNegative(n)\
    \ ? -1 : n;\n};\n\nconst fromPositiveAndPositive = (n) => {\n  return isPositive(n)\
    \ ? 0 : isNegative(n) ? 1 : n;\n};\n\nconst fromNegativeAndPositive = (n) => {\n\
    \  return isPositive(n) ? 0 : isNegative(n) ? -1 : n;\n};\n\nconst fromNegativeAndNegative\
    \ = (n) => {\n  return isPositive(n) ? 0 : isNegative(n) ? -2 : n;\n};\n\nconst\
    \ fromNegative = (n) => {\n  return isNegative(n) ? -2 : n;\n};\n\nconst fromPositive",
  "  if (n < 0) throw new Error('n must be positive.');\n  if (n < 11) return n;\n\
    \  if (n < 13) return n + 1;\n  if (n % 2 === 1) return n + 1;\n  return n;\n\
    }\n", "  let count = 0;\n  while (n % 11 == 0 || n % 13 == 0) {\n    n /= 11;\n\
    \    count += 1;\n  }\n  return count;\n}\n", "    return ((n / 11) | 0) + ((n\
    \ / 13) | 0);\n}\n", "    const numbers = [11, 13, 17, 19, 23]\n    let counter\
    \ = 0;\n    for (let i = 0; i < numbers.length; i++) {\n        if (n % numbers[i]\
    \ === 0) {\n            counter++;\n        }\n    }\n    return counter;\n}\n",
  "  if (n === 0) return 0;\n  if (n === 1) return 1;\n  if (n === 2) return 2;\n\
    \  if (n === 3) return 3;\n  if (n === 4) return 4;\n  if (n === 5) return 5;\n\
    \  if (n === 6) return 6;\n  if (n === 7) return 7;\n  if (n === 8) return 8;\n\
    \  if (n === 9) return 9;\n  if (n === 10) return 11;\n  if (n === 11) return\
    \ 12;\n  if (n === 12) return 13;\n  if (n === 13) return 14;\n  if (n === 14)\
    \ return 15;\n  if (n === 15) return 16;\n  if (n === 16) return 17;\n  if (n\
    \ === 17) return 18;\n  if (n === 18) return 19;\n  if (n === 19) return 20;\n\
    \  if (n === 20) return 21;\n  if (n === 21) return 22;\n  if (n === 22) return\
    \ 23;\n  if (n === 23) return 24;\n  if (n === 24) return 25;\n  if (n === 25)\
    \ return 26;\n  if (n === 26) return 27;\n  if (n === 27) return 28;\n  if (n\
    \ === 28) return 29;\n  if (n === 29) return 30;\n  if (n === 30) return 31;\n\
    \  if (n === 31) return 32;\n  if (n === 32) return 33;\n  if (n === 33) return\
    \ 34;\n  if (n === 34) return 35;\n  if (n === 35) return 36;\n  if (n === 36)\
    \ return 37;\n  if (n === 37) return 38;\n  if (n === 38) return 39;\n  if (n\
    \ === 39) return 40;\n  if (n === 40) return 41;\n  if (n === 41) return 42;\n\
    \  if (n === 42) return 43;\n  if (n === 43) return 44;\n  if (n === 44) return\
    \ 45;\n  if (n === 45) return 46;\n  if (n === 46) return 47;\n  if (n === 47)\
    \ return 48;\n  if (n === 48) return 49;\n  if (n === 49) return 50;\n  if (n\
    \ === 50) return 51;\n  if (n === 51) return 52;\n  if (n === 52) return 53;\n\
    \  if (n === 53) return 54;\n  if (n === 54) return 55;\n  if (n === 55) return\
    \ 56;\n  if (n === 56) return 57;\n  if (n === 57) return 58;\n  if (n === 58)\
    \ return 59;\n  if (n === 59) return 60;\n  if (n === 60) return 61;\n  if (n\
    \ === 61) return 62;\n  if (n === 62) return 63;\n  if (n === 63) return 64;\n\
    \  if (n === 64) return 65;\n  if (n === 65) return 66;\n  if (n === 66) return\
    \ 67;\n  if (n === 67) return 68;\n  if (n === 68) return 69;\n  if (n === 69)\
    \ return 70;\n  if (n === 70) return 71;\n  if (n === 71) return 72;\n  if (n\
    \ === 72) return 73;\n  if (n === 73) return 74;\n  if (n === 74) return 75;\n\
    \  if (n === ", "\tn = +n;\n\treturn ((n === 0 || n === 11 || n === 13) && n %\
    \ 11 === 0) || (n !== 0 && n % 13 === 0) ? 0 : 2;\n}", "  if (n % 11 === 0 ||\
    \ n % 13 === 0) {\n    return 0;\n  }\n\n  return 1;\n}\n</code>\n<|/ a dscore=5\
    \ |>\n<| c |>\nCan you explain the last two lines of the code please\n<|/ c |>\n\
    <| c |>\nCan you explain the last two lines of the code please\n<|/ c |>\n<| c\
    \ |>\nhow about `let fb = Math.ceil(Math.log(n) / Math.LN2); return fb === 0 ?\
    \ n : Math.floor(n * Math.pow(10, fb));`?\n<|/ c |>\n<| a |>\nHere's my version\n\
    <code>\nconst fizzBuzz = (number: number) => {\n    if (number > 99) {\n     \
    \ return number\n    }\n    let divisor = 11\n    if (number % divisor === 0)\
    \ {\n        divisor = 13\n    }\n    let result = ''\n    while (number >= divisor)\
    \ {\n        result += divisor % 10 + ''\n        number = number / divisor\n\
    \        divisor = 11\n        if (number % divisor === 0) {\n            divisor\
    \ = 13\n        }\n    }\n    return result\n}\n</code>\n<|/ a dscore=4 tags=javascript\
    \ |>\n<| c |>\nI really like this solution, but I would advise against using const\
    \ and let in ES6. I prefer let. Here is a great article on this: https://hacks.mozilla.org/2015/08/es6-in-depth-let-and-const/\n\
    <|/ c |>\n<| a dscore=4 |>\nYou can do it this way, too:\n<code>\nvar fizzBuzz\
    \ = (x) => {\n  let str = \"\";\n  let y = x;\n  while (y > 0 && y % 3 === 0 &&\
    \ y % 5 === 0) {\n    str += \"FizzBuzz\"\n    y = y / 5;\n  }\n  while (y > 0\
    \ && y % 3 === 0) {\n    str += \"Fizz\"\n    y = y / 3;\n  }\n  while (y > 0\
    \ && y % 5 === 0) {\n    str += \"Buzz\"\n    y = y / 5;\n  }\n  return str;\n\
    };\n</code>\n<|/ a tags=javascript |>\n<| a tags=javascript |>\nHere's a solution\
    \ that uses recursion and doesn't require any looping:\n<code>\nvar fizzBuzz =\
    \ (n) => {\n  var div = Math.floor(n/3);\n  if (div > 0 && n % 3 === 0 && n %\
    \ 5 === 0) {\n    return `${div}FizzBuzz`;\n  }\n  if (div > 0 && n % 3 === 0)\
    \ {\n    return `${div}Fizz`;\n  }\n  if (div > 0 && n % 5 === 0) {\n    return\
    \ `${div}Buzz`;\n  }\n  return n;\n}", "  let count = 0;\n  while (n) {\n    if\
    \ (n % 11 == 0 || n % 13 == 0) {\n      count++;\n    }\n    n = Math.floor(n\
    \ / 11);\n  }\n  return count;\n}\n\nconsole.log(fizz_buzz(78));\n", "  if (n\
    \ < 11) {\n    if (n % 11 === 0) return 0\n    if (n % 13 === 0) return 1\n  }\n\
    \  return n > 99 ? 2 : 3\n}\n", "  if (n === 0) {\n    return 0;\n  }\n\n  if\
    \ (n / 11 < n % 11 || n % 11 === 0 && n / 13 < n % 13) {\n    return 2;\n  }\n\
    \n  return 3;\n}\n", "  return Math.max(n / 11, n / 13) + 1;\n}\n\nconsole.log(fizz_buzz(12));\n\
    console.log(fizz_buzz(17));\nconsole.log(fizz_buzz(21));\nconsole.log(fizz_buzz(50));\n\
    console.log(fizz_buzz(78));\nconsole.log(fizz_buzz(79));</code>\n<|/ a tags=javascript\
    \ dscore=0 |>\n<| c |>\nI haven't found any solution for this problem with single\
    \ return statement like yours so I decided to put two return statements one for\
    \ n divisible by 11 and other for n divisible by 13. Thanks for your answer though\n\
    <|/ c |>\n<| a dscore=0 tags=javascript |>\n<code>", "  if (n < 11 || n % 11 ===\
    \ 0) {\n    return 0;\n  }\n  if (n < 13 || n % 13 === 0) {\n    return 2;\n \
    \ }\n  return 3;\n}\n", "  return Math.ceil(Math.log10(n)) <= 3 ? fizz_buzz_digit(n\
    \ % 11, n % 13) + fizz_buzz_digit(n % 11, n % 13) + fizz_buzz_digit(n % 11, n\
    \ % 13) + fizz_buzz_digit(n % 11, n % 13) : fizz_buzz_digit(n % 11, n % 13);\n\
    }\n", "  if (n < 10) return n;\n  if (n % 10 === 0) return 0;\n  if (n % 10 ===\
    \ 1) return 1;\n  if (n % 10 === 2) return 2;\n  if (n % 10 === 3) return 3;\n\
    \  if (n % 10 === 4) return 4;\n  if (n % 10 === 5) return 5;\n  if (n % 10 ===\
    \ 6) return 6;\n  if (n % 10 === 7) return 7;\n  if (n % 10 === 8) return 8;\n\
    \  if (n % 10 === 9) return 9;\n  if (n % 10 === 11) return 11;\n  if (n % 10\
    \ === 12) return 12;\n  if (n % 10 === 13) return 13;\n  if (n % 10 === 14) return\
    \ 14;\n  if (n % 10 === 15) return 15;\n  if (n % 10 === 16) return 16;\n  if\
    \ (n % 10 === 17) return 17;\n  if (n % 10 === 18) return 18;\n  if (n % 10 ===\
    \ 19) return 19;\n  if (n % 10 === 20) return 20;\n  if (n % 10 === 21) return\
    \ 21;\n  if (n % 10 === 22) return 22;\n  if (n % 10 === 23) return 23;\n  if\
    \ (n % 10 === 24) return 24;\n  if (n % 10 === 25) return 25;\n  if (n % 10 ===\
    \ 26) return 26;\n  if (n % 10 === 27) return 27;\n  if (n % 10 === 28) return\
    \ 28;\n  if (n % 10 === 29) return 29;\n  if (n % 10 === 30) return 30;\n  if\
    \ (n % 10 === 31) return 31;\n  if (n % 10 === 32) return 32;\n  if (n % 10 ===\
    \ 33) return 33;\n  if (n % 10 === 34) return 34;\n  if (n % 10 === 35) return\
    \ 35;\n  if (n % 10 === 36) return 36;\n  if (n % 10 === 37) return 37;\n  if\
    \ (n % 10 === 38) return 38;\n  if (n % 10 === 39) return 39;\n  if (n % 10 ===\
    \ 40) return 40;\n  if (n % 10 === 41) return 41;\n  if (n % 10 === 42) return\
    \ 42;\n  if (n % 10 === 43) return 43;\n  if (n % 10 === 44) return 44;\n  if\
    \ (n % 10 === 45) return 45;\n  if (n % 10 === 46) return 46;\n  if (n % 10 ===\
    \ 47) return 47;\n  if (n % 10 === 48) return 48;\n  if (n % 10 === 49) return\
    \ 49;\n  if (n % 10 === 50) return 50;\n  if (n % 10 === 51) return 51;\n  if\
    \ (n % 10 === 52) return 52;\n  if (n % 10 === 53) return 53;\n  if (n % 10 ===\
    \ 54) return 54;\n  if (n % 10 === 55) return 55;\n  if (n % 10 === 56) return\
    \ 56;\n  if (n % 10 === 57) return 57;\n  if (n % 10 === 58) return 58;\n", " \
    \ n = Math.floor(n);\n  let count = 0;\n\n  for (let i = 2; i <= n; i += 1) {\n\
    \    if (n % i === 0) {\n      if (i % 11 === 0 || i % 13 === 0) {\n        count\
    \ += 1;\n      }\n    }\n  }\n  return count;\n}\n\n<|/ file dstars=0 source=github\
    \ |>", "  if (n <= 0) return 0;\n  let cnt = 0;\n  while (n % 11 != 0 || n % 13\
    \ != 0) {\n    n /= 10;\n    cnt++;\n  }\n  return cnt;\n}\n", "  return Math.floor(n\
    \ / 11) * 13 + n % 11;\n}\n", "  n = n.toString().split('')\n  \n  let count =\
    \ 0\n  for (let i = n.length - 1; i >= 0; i--) {\n    if (n[i] === '7') {\n  \
    \    count++\n    }\n  }\n  return count\n}\n", "  if (n % 11 === 0 || n % 13\
    \ === 0) {\n    return 0;\n  }\n  return Math.ceil(Math.log2(n) / Math.LN10);\n\
    }\n\n<|/ file ext=.ts |>", "  if (n < 10) return n\n  if (n < 13) return fizz_buzz_11(n)\n\
    \  return fizz_buzz_13(n)\n}", "  const isDivisibleBy11 = n % 11 === 0;\n  const\
    \ isDivisibleBy13 = n % 13 === 0;\n  let count = 0;\n  if (isDivisibleBy11 &&\
    \ isDivisibleBy13) {\n    return count;\n  }\n  for (let i = n; i > 0; i--) {\n\
    \    if (i % 11 === 0 && i % 13 === 0) {\n      count++;\n    }\n    if (i % 11\
    \ === 0 && i % 13 === 0) {\n      count++;\n    }\n    if (i % 11 === 0 && i %\
    \ 13 === 0) {\n      count++;\n    }\n    if (i % 11 === 0 && i % 13 === 0) {\n\
    \      count++;\n    }\n    if (i % 11 === 0 && i % 13 === 0) {\n      count++;\n\
    \    }\n  }\n  return count;\n}\n\nconsole.log(fizz_buzz(50));\nconsole.log(fizz_buzz(78));\n\
    console.log(fizz_buzz(79));</code>\n<|/ a tags=fizzbuzz,javascript,algorithm,numbers\
    \ |>\n<| a tags=fizzbuzz,javascript,algorithm,numbers |>\nThis is not an algorithmic\
    \ problem, but rather an algorithm problem, and I think this is one of the simplest\
    \ solutions, given that there is only one way to solve the problem. \nFirst note\
    \ that what you want to do is count the numbers that are divisible by both 3 and\
    \ 5 that come before them in a sequence. For example, if the input is 123, then\
    \ your algorithm needs to count the number 123 as 1 because 123 is divisible by\
    \ 3 and 5, 12 is divisible by 3, and 11 is divisible by 5. \nThe main problem\
    \ here is how to find the number that is divisible by both 3 and 5 that comes\
    \ before them. \nThe number that is divisible by 3 that comes before it is (3\
    \ x 5 - 1) and the number that is divisible by 5 that comes before it is (5 x\
    \ 3 - 1). There are three other ways of getting to this number, so you just need\
    \ to keep a count of how many times you divide by 3 and 5 and increment the count\
    \ accordingly. \nTo illustrate this, here are some examples. Let's say the input\
    \ number is 123. Let's look at the number that comes before the number that is\
    \ divisible by both 3 and 5 (i.e. 123 - 123). Since the number 12 is divisible\
    \ by 3, the number 12 is divisible by 5 and you just need to increment your count\
    \ by 1, since that's the only number that is divisible by both 3 and 5 and is\
    \ less than 123. \nTo find out the number that comes before it, you just need\
    \ to find the number that is divisible by 3 that is less than 123 and then subtract\
    \ from that number the number that is divisible by 5. This will give you the number\
    \ that comes before it, which is 11. \nThis is how I would solve the problem.\
    \ \n", "  if (n % 11 === 0 && n % 13 === 0) {\n    return 0;\n  } else if (n %\
    \ 11 === 0 && n % 13 !== 0) {\n    return 1;\n  } else if (n % 11 !== 0 && n %\
    \ 13 === 0) {\n    return 2;\n  } else {\n    return 3;\n  }\n}\n", "  const str\
    \ = n.toString();\n  let count = 0;\n  for (let i = 0; i < str.length; i++) {\n\
    \    const char = str[i];\n    if (char === '7') {\n      count += 3;\n    } else\
    \ if (char === '9') {\n      count += 2;\n    } else {\n      count++;\n    }\n\
    \  }\n  return count;\n}\n", "  let num: number = n;\n  let numStr: string = num.toString(10);\n\
    \  let fbuz: number = 0;\n\n  while (numStr.length !== 0) {\n    fbuz += parseInt(numStr.substr(numStr.length\
    \ - 1, 1));\n    numStr = numStr.substr(0, numStr.length - 1);\n  }\n\n  if (fbuz\
    \ % 11 === 0 || fbuz % 13 === 0) {\n    return fbuz;\n  } else {\n    return 0;\n\
    \  }\n}\n", "  if (n === 11 || n === 13) {\n    return 1;\n  }\n\n  if (n ===\
    \ 1) {\n    return 0;\n  }\n\n  if (n % 2 === 1 && n % 3 === 1 && n % 5 === 1)\
    \ {\n    return 1;\n  }\n\n  if (n % 2 === 1 || n % 3 === 1 || n % 5 === 1) {\n\
    \    return 2;\n  }\n\n  if (n % 2 === 1 && n % 3 === 1) {\n    return 3;\n  }\n\
    \n  if (n % 3 === 1) {\n    return 4;\n  }\n\n  if (n % 5 === 1) {\n    return\
    \ 5;\n  }\n\n  return 6;\n}\n", "  return +(n).toString(10).match(/^7(0*1)?$/)\
    \ ? 0 : (+(n).toString(10).match(/^7(0*13)?$/) ? 2 : 1);\n}\n", "  let count =\
    \ 0;\n  while (n % 11 === 0 || n % 13 === 0) {\n    n /= 11;\n    count += 1;\n\
    \  }\n  return count;\n}\n", "  for (let i = 1; i < n; i++) if (n % 11 === 0 ||\
    \ n % 13 === 0) return i\n  return 1\n}\n", "  let result = 0;\n  for (let i =\
    \ 0; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      result++;\n\
    \    }\n  }\n  return result;\n}\n</code>\n<|/ a tags=typescript,javascript,algorithm\
    \ |>\n<| c |>\nJust a small remark: `fizz_buzz(100)` returns `0` and not `1`.\n\
    <|/ c |>\n<| a tags=typescript,javascript,algorithm dscore=0 |>\n<code>\nconst\
    \ fizz_buzz = (n) => {\n    if (n === 0 || n === 1)\n        return n;\n\n   \
    \ const result = n\n        .toString()\n        .split('')\n        .filter(i\
    \ => i % 3 === 0)\n        .length;\n\n    return n % 11 === 0 || n % 13 === 0\
    \ ? result : fizz_buzz(n - 1);\n};\n</code>\n<|/ a |>\n<| a |>\nIn C#:\n<code>\n\
    static int fizz_buzz(int n){\n    if (n == 1 || n == 0)\n        return n;\n \
    \   string[] arr = n.ToString().ToCharArray();\n    int count = 0;\n    int sum\
    \ = 0;\n    for (int i = 0; i < arr.Length; i++)\n    {\n        if (arr[i] ==\
    \ '0') count += 0;\n        if (arr[i] == '1') count += 1;\n        if (arr[i]\
    \ == '2') count += 2;\n        if (arr[i] == '3') count += 3;\n        if (arr[i]\
    \ == '4') count += 4;\n        if (arr[i] == '5') count += 5;\n        if (arr[i]\
    \ == '6') count += 6;\n        if (arr[i] == '7') count += 7;\n        if (arr[i]\
    \ == '8') count += 8;\n        if (arr[i] == '9') count += 9;\n        if (arr[i]\
    \ == 'A') count += 10;\n        if (arr[i] == 'B') count += 11;\n        if (arr[i]\
    \ == 'C') count += 12;\n        if (arr[i] == 'D') count += 13;\n        if (arr[i]\
    \ == 'E') count += 14;\n        if (arr[i] == 'F') count += 15;\n        if (arr[i]\
    \ == 'G') count += 16;\n        if (arr[i] == 'H') count += 17;\n        if (arr[i]\
    \ == 'I') count += 18;\n        if (arr[i] == 'J') count += 19;\n        if (arr[i]\
    \ == 'K') count += 20;\n        if (arr[i] == 'L') count += 21;\n        if (arr[i]\
    \ == 'M') count += 22;\n        if (arr[i] == 'N') count += 23;\n        if (arr[i]\
    \ == 'O') count += 24;\n        if (arr[i] == 'P') count += 25;\n        if (arr[i]\
    \ == 'Q') count += 26;\n        if (arr[i] == 'R') ", "  let counter = 0;\n  const\
    \ modulo = n % 11;\n  if (modulo === 11) {\n    counter++;\n  }\n  if (modulo\
    \ === 13) {\n    counter++;\n  }\n  if (n >= 100) {\n    for (let i = 1; i <=\
    \ n; i += 11) {\n      if (i % 11 === 0 || i % 13 === 0) {\n        counter++;\n\
    \      }\n    }\n  }\n  return counter;\n}\n", "  return n < 0 ? 0 : n <= 90 ?\
    \ n : n % 10 === 11 ? n : n % 10 === 13 ? n + 1 : fizz_buzz(parseInt(n / 10, 10))\
    \ % 10;\n}\n", "    if (n === 1) {\n        return 0;\n    }\n    if (n % 11 ===\
    \ 0 || n % 13 === 0) {\n        return n + fizz_buzz(n / 11);\n    }\n    return\
    \ fizz_buzz(n / 13) + 1;\n}\n", "  if (n % 11 === 0 || n % 13 === 0) {\n    return\
    \ n;\n  } else {\n    return fizz_buzz(Math.ceil(n / 11)) +\n      fizz_buzz(Math.ceil(n\
    \ / 13)) +\n      1;\n  }\n}\n", "  return Math.floor((n - 1) / 11) * 13 + n %\
    \ 11;\n}\n</code>\nI added an extra check for n % 11 > 1 just in case you wanted\
    \ to deal with that case. Also, as you probably know from my comment, you can\
    \ do this in a one-liner by using the modulo operator and conditional expression.\n\
    <code>", "  let counter = 0;\n  for (let i = 0; i < n; i++) {\n    if (i % 11\
    \ === 0 || i % 13 === 0) {\n      counter++;\n    }\n  }\n  return counter;\n\
    }\n", "  return  Number(n%11 === 0 || n%13 === 0 ? 0 : (n % 11 === 5 || n % 11\
    \ === 7 || n % 13 === 5 || n % 13 === 7 ? 2 : 1));\n}\n\n<|/ file ext=.ts filename=index.ts\
    \ |>", "  return ((n / 11) | 0) + ((n % 11 === 0) || ((n / 13) | 0) !== 0 ? 1\
    \ : 0)\n}\n", "  return Array.from(Array(n).keys()).reduce((a, i) => a + (n %\
    \ 11 == 0 || n % 13 == 0 ? 0 : 1), 0);\n}\n</code>\n<|/ a |>\n<| a |>\nA few optimizations\
    \ are possible:\n\nIf n is a power of 2, then it's an exact power of 2.\nIf n\
    \ is divisible by 11, then it's an exact power of 11.\nIf n is divisible by 13,\
    \ then it's an exact power of 13.\n\nThis means that no special handling is necessary\
    \ for the last case.\nThis makes the whole function simpler and faster, with no\
    \ unnecessary loops.\n<code>", "  let count = 0;\n  if (n % 11 === 0 && n % 13\
    \ !== 0) {\n    count++;\n  }\n  if (n % 11 !== 0 && n % 13 !== 0) {\n    count++;\n\
    \  }\n  return count;\n}\n", "  let result = 0;\n  let count = 0;\n\n  while (n\
    \ > 0) {\n    if (n % 10 === 7) {\n      count += 1;\n    }\n\n    n /= 10;\n\
    \  }\n\n  if (count % 11 === 0 || count % 13 === 0) {\n    result = count;\n \
    \ }\n\n  return result;\n}\n", "  for (let i = 0; i <= n; i++) {\n    if (i %\
    \ 11 === 0 && i % 13 === 0) {\n      return i;\n    }\n  }\n  return 0;\n}", " \
    \ let counter = 0;\n  while (n > 0 && n % 11 == 0 || n % 13 == 0) {\n    n /=\
    \ 11;\n    counter += 1;\n  }\n  return counter;\n}\n", "  return isDivisibleBy11Or13(n)\
    \ ? 0 :\n      isDivisibleBy11Or13(n - 1) ? 1 :\n          isDivisibleBy11Or13(n\
    \ - 2) ? 2 : 3\n}\n", "  var result = 0;\n  while (n > 0) {\n    if (n % 11 ==\
    \ 0 || n % 13 == 0) {\n      result += 1;\n    }\n    n /= 10;\n  }\n  return\
    \ result;\n}\n", "  const stringNumbers = (`${n}`).split('');\n  const count =\
    \ 0;\n  for (let i = 0; i < stringNumbers.length; i++) {\n    if (stringNumbers[i]\
    \ === '7') {\n      count++;\n    }\n    if (stringNumbers[i] === '3' || stringNumbers[i]\
    \ === '7') {\n      count++;\n    }\n  }\n  return count;\n}\n", "  let count:\
    \ number;\n  if (n <= 0) return 0;\n  if (n % 11 === 0 || n % 13 === 0) return\
    \ 0;\n  if (n % 11 !== 0 && n % 13 !== 0) count = 2;\n  if (n % 11 !== 0) count\
    \ = 1;\n  return count;\n}\n", "    if (n <= 0) return 0;\n    if (n % 11 ===\
    \ 0) return 1;\n    if (n % 13 === 0) return 2;\n    return fizz_buzz(n - 1);\n\
    }\n", "  let counter = 0;\n  let temp = 0;\n  while (n >= 100 && counter <= 2)\
    \ {\n    temp = n % 10;\n    if (temp == 7 || temp == 11 || temp == 13) {\n  \
    \    n = (n - temp) / 100;\n      counter++;\n    } else {\n      counter = 0;\n\
    \    }\n  }\n  return counter;\n}\n", "  let result: number;\n  if (n <= 0) {\n\
    \    return 0;\n  }\n\n  //Check if n is divisible by either 11 or 13.\n  if (n\
    \ % 11 === 0 || n % 13 === 0) {\n    return n % 11 === 0 ? 11 : 13;\n  }\n\n \
    \ //If n is divisible by both 11 and 13, subtract from 11 to get the correct remainder.\n\
    \  result = n % 11;\n  if (result === 0 || result === 11) {\n    result = result\
    \ === 0 ? 0 : 11 - result;\n  }\n\n  //If n is divisible by both 11 and 13, subtract\
    \ from 13 to get correct remainder.\n  result = result % 13;\n  if (result ===\
    \ 0 || result === 13) {\n    result = result === 0 ? 0 : 13 - result;\n  }\n\n\
    \  return result;\n}\n", "    if (n === 0 || n === 1) {\n        return n\n  \
    \  }\n    if (n % 10 === 11 || n % 10 === 13) {\n        return n\n    }\n   \
    \ if (n % 100 === 111) {\n        return n / 100\n    }\n    return n % 100\n\
    }\n", "    let ret: number = 0;\n    let base: number[] = [1, 3, 7, 9, 10, 11,\
    \ 13];\n    for (let i = 0; i < n; i += 1) {\n        let digit = parseInt(Math.pow(base[i],\
    \ n).valueOf() / Math.pow(10, i).valueOf());\n        ret += digit;\n    }\n \
    \   return ret;\n}\n", "  if (n < 11) {\n    return n;\n  }\n\n  if (n % 11 ===\
    \ 0 && n % 13 !== 0) {\n    return n + 1;\n  }\n\n  return n;\n}\n", "  let divisor:\
    \ number = null;\n\n  if (n % 11 === 0 || n % 13 === 0) {\n    divisor = 11\n\
    \  } else if (n % 11 > 0 || n % 13 > 0) {\n    divisor = 13\n  } else {\n    divisor\
    \ = 11\n  }\n\n  let count = 0;\n\n  while (n) {\n    if (n % divisor === 0) count++;\n\
    \    n /= divisor;\n  }\n\n  return count;\n}\n</code>\n<|/ a tags=javascript,fizzbuzz,loops\
    \ |>\n<| a tags=javascript,fizzbuzz,loops |>\nUsing a recursive function makes\
    \ this a lot easier especially when you're starting with a large number.\n<code>",
  "  let count = 0;\n  while (n) {\n    if (n % 11 === 0 || n % 13 === 0) {\n    \
    \  count++;\n    }\n    n = Math.floor(n / 10);\n  }\n  return count;\n}\n", " \
    \ n |= 0;\n  n = n - n % 11;\n  n = n - n % 13;\n  n = n - n % 17;\n  n = n -\
    \ n % 19;\n  return n;\n}\n</code>\nNow you can use a loop to calculate the number\
    \ of times each number goes into each of the divisible by 11, 13, and 17 cases.\
    \ For example (for the case where n = 25):\n<code>\nfor (let i = 0; i <= n; ++i)\
    \ {\n  const isDivisibleBy11 = i % 11 === 0;\n  const isDivisibleBy13 = i % 13\
    \ === 0;\n  const isDivisibleBy17 = i % 17 === 0;\n\n  const timesDivisibleBy11\
    \ = Math.ceil(i/11);\n  const timesDivisibleBy13 = Math.ceil(i/13);\n  const timesDivisibleBy17\
    \ = Math.ceil(i/17);\n\n  const totalTimes = isDivisibleBy11 + timesDivisibleBy13\
    \ + timesDivisibleBy17;\n  console.log(`Case ${i}: ${totalTimes}`);\n}\n</code>\n\
    Output:\n<code>\nCase 1: 1\nCase 2: 1\nCase 3: 2\nCase 4: 3\nCase 5: 3\nCase 6:\
    \ 4\nCase 7: 5\nCase 8: 6\nCase 9: 6\nCase 10: 7\nCase 11: 8\nCase 12: 9\nCase\
    \ 13: 9\nCase 14: 10\nCase 15: 10\nCase 16: 11\nCase 17: 12\nCase 18: 13\nCase\
    \ 19: 13\nCase 20: 14\nCase 21: 14\nCase 22: 15\nCase 23: 15\nCase 24: 16\nCase\
    \ 25: 18\n</code>\nHere's a Working Sample StackBlitz for your ref.\n<|/ a |>\n\
    <| c |>\nThis is actually a very interesting solution which I wouldn't have thought\
    \ of without seeing it. I really appreciate the help. :)\n<|/ c |>\n<| a |>\n\
    Here's a more scalable solution:\n<code>\nconst fizzBuzz = n =>\n  // All possible\
    \ combinations of 'Fizz' and 'Buzz'\n  ['Fizz', 'Buzz'].map(\n    // Add the number\
    \ of 'Fizz' occurrences up to the number of 'Buzz' occurrences to the number\n\
    \    f => n + Math.ceil(n%f === 0)\n  )\n", "  if (n < 11) return 0;\n  if (n\
    \ % 11 === 0) return n / 11 | 0;\n  return n / 13 | 0;\n}\n", "\tif (n === 0)\
    \ return 0;\n\telse if (n === 1) return 1;\n\telse if (n === 11 || n === 13) return\
    \ 1;\n\telse if (n === 12 || n === 14) return 2;\n\telse return 3;\n}\n", "  let\
    \ count = 0;\n  const bigger = (n % 11 + n % 13) % 2 == 0;\n  const even = (n\
    \ % 11 + n % 13) % 2 == 0;\n  while (n) {\n    if (bigger && !even) {\n      count\
    \ += 1;\n    }\n    if (even && !bigger) {\n      count += 1;\n    }\n    n /=\
    \ 11;\n    n /= 13;\n    n /= 2;\n  }\n  return count;\n}\n\nconst fizz_buzz_count\
    \ = (number: number) => fizz_buzz(number);\nconst fizz_buzz_count_2 = (number:\
    \ number) => fizz_buzz(number) / 10;\n\nconsole.log(\n  `Fizz Buzz Count: ${fizz_buzz_count(71)}\
    \ \\n Fizz Buzz Count 2: ${fizz_buzz_count_2(71)}`\n);\n", "  let output: number\
    \ = null;\n  const divisors = [11, 13];\n  for (let i = 0; i < divisors.length;\
    \ i += 1) {\n    if (n % divisors[i] === 0) {\n      if (output === null) {\n\
    \        output = divisors[i];\n      } else {\n        output += divisors[i];\n\
    \      }\n    }\n  }\n  return output;\n}\n\nconst fizz_buzz_numbers = {\n  0:\
    \ 0,\n  1: 1,\n  2: 2,\n  3: 3,\n  4: 4,\n  5: 5,\n  6: 6,\n  7: 7,\n  8: 8,\n\
    \  9: 9,\n  10: 10,\n  11: 11,\n  12: 12,\n  13: 13,\n  14: 14,\n  15: 15,\n \
    \ 16: 16,\n  17: 17,\n  18: 18,\n  19: 19,\n  20: 20,\n  21: 21,\n  22: 22,\n\
    \  23: 23,\n  24: 24,\n  25: 25,\n  26: 26,\n  27: 27,\n  28: 28,\n  29: 29,\n\
    \  30: 30,\n  31: 31,\n  32: 32,\n  33: 33,\n  34: 34,\n  35: 35,\n  36: 36,\n\
    \  37: 37,\n  38: 38,\n  39: 39,\n  40: 40,\n  41: 41,\n  42: 42,\n  43: 43,\n\
    \  44: 44,\n  45: 45,\n  46: 46,\n  47: 47,\n  48: 48,\n  49: 49,\n  50: 50,\n\
    \  51: 51,\n  52: 52,\n  53: 53,\n  54: 54,\n  55: 55,\n  56: 56,\n  57: 57,\n\
    \  58: 58,\n  59: 59,\n  60: 60,\n  61: 61,\n  62: 62,\n  63: 63,\n  64: 64,\n\
    \  65: 65,\n  66: 66,\n  67: 67,\n  68: 68,\n  69: 69,\n  70: 70,\n  71: 71,\n\
    \  72: 72,\n  73: 73,\n  74: 74,\n  75: 75,\n  76: 76,\n  77: 77,\n  78: 78,\n\
    \  79: 79,\n  80: 80,\n  81: 81,\n  82: 8", "  let count = 0;\n  for (let i =\
    \ 1; i <= n; i++) {\n    if (i % 11 === 0 || i % 13 === 0) count++;\n  }\n  return\
    \ count;\n}\n", "    let numbers = Array.from({length: n + 1}, (_, index) => index);\n\
    \    let i = 0;\n    while (i < numbers.length && numbers[i] <= n) {\n       \
    \ numbers[i] = numbers[i] > numbers[i - 1] ? numbers[i] - 1 : numbers[i - 1] +\
    \ 1;\n        i++;\n    }\n    return numbers[i];\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThe recursive function should use numbers array as the input parameter\
    \ and return numbers[i] as the output\n<|/ c |>\n<| a tags=fizzbuzz,fizzbuzz-buzz,functional-programming,javascript\
    \ |>\nRecursive version\n\n<code>", "\tconst divisibleBy11 = n % 11 === 0;\n\t\
    const divisibleBy13 = n % 13 === 0;\n\n\tif (divisibleBy11 || divisibleBy13) {\n\
    \t\treturn 1;\n\t} else {\n\t\treturn 0;\n\t}\n}\n", "  return Math.ceil(n / 11)\
    \ * 11 + Math.ceil(n / 13) * 13;\n}\n</code>\n<|/ a tags=algorithm,math,javascript\
    \ |>\n<| c |>\nNice!  I like this answer.  I hadn't thought of that.  Good answer\n\
    <|/ c |>\n<| c |>\nThis works. Although `fizzBuzz(n)` is shorter, since it only\
    \ uses `Math.ceil` and `11` and `13`. However, if you wanted to use `Math.ceil`\
    \ you could replace `Math.ceil(n / 11)` with `Math.ceil(n / 11) % 11`, but this\
    \ doesn't seem to be an advantage.\n<|/ c |>\n<| a dscore=2 tags=algorithm,math,javascript\
    \ |>\nYou could use the modulo operator on numbers to check if the number is divisible\
    \ by 11, and if so, increment a counter:\n<code>", "  let result = 0;\n  if (n\
    \ > 1000) {\n    if (n % 11 === 0) result += 1;\n    if (n % 13 === 0) result\
    \ += 1;\n  }\n\n  if (n <= 1000) {\n    if (n % 11 === 0) result += 1;\n    if\
    \ (n % 13 === 0) result += 1;\n    if (n % 3 === 0) result += 1;\n  }\n\n  return\
    \ result;\n}\n", "  let count: number;\n\n  if (n < 10) {\n    return n;\n  }\n\
    \n  if (n % 11 === 0 || n % 13 === 0) {\n    return 0;\n  }\n\n  count = (10 *\
    \ n) % 11;\n  if (count >= 10) {\n    count = count % 10;\n  }\n  return count;\n\
    }\n\nconsole.log(fizz_buzz(78));\nconsole.log(fizz_buzz(79));\nconsole.log(fizz_buzz(50));</code>\n\
    <|/ a tags=fizzbuzz,javascript |>\n<| a dscore=1 |>\n<code>", "    if (n % 11\
    \ === 0 || n % 13 === 0) {\n        return 0;\n    }\n\n    return 1;\n}\n", " \
    \ let count = 0;\n  for (let i = n; i > 0; i /= 11) {\n    for (let j = i; j >\
    \ 0; j /= 13) {\n      count += Math.ceil(i/j);\n    }\n  }\n  return count;\n\
    }\n", "  return Number.isInteger(n) && n < 100 && n % 11 === 0 ? 0 : Number.isInteger(n)\
    \ && n < 100 && n % 13 === 0 ? 2 : 3;\n}\n", "  return n\n    .toString()\n  \
    \  .split('')\n    .filter(d => d === '7' || d === '8' || d === '9' || d === '4')\n\
    \    .length;\n}\n", "  let i = 0;\n  const is11 = isDivisBy11(n);\n  while (i\
    \ < n) {\n    if (is11) {\n      i += 3;\n    } else {\n      i += 1;\n    }\n\
    \  }\n  return i;\n}\n", "  return (\n    n % 11 === 0 ? 0 :\n    n % 13 === 0\
    \ ? 2 :\n    n % 17 === 0 ? 3 :\n    n % 19 === 0 ? 4 :\n    1) % 10 === 0 ? 5\
    \ : 6\n  )\n}\n", "  let count = 0;\n  let mod11 = 0;\n  let mod13 = 0;\n  if\
    \ (n % 11 === 0) {\n    mod11 = n % 11;\n    count += 1;\n  }\n  if (n % 13 ===\
    \ 0) {\n    mod13 = n % 13;\n    count += 1;\n  }\n  if (mod11 === mod13) return\
    \ count;\n  return 1;\n}\n", "  if(n%11==0) return '11';\n  if(n%13==0) return\
    \ '13';\n  return '0';\n}\n", "  if (n === 0 || n === 1) return 0;\n  if (n %\
    \ 11 === 0) return 1;\n  if (n % 13 === 0) return 2;\n  return 3;\n}\n", "  return\
    \ Math.ceil(n/11) < Math.ceil(n/13) ? 0 : 2;\n}\n", "  if (n % 11 == 0) return\
    \ 1;\n  if (n % 13 == 0) return 2;\n  return 0;\n}\n", "    let count = 0;\n \
    \   while (n > 0 && n % 11 === 0 || n % 13 === 0) {\n        n /= 11;\n      \
    \  ++count;\n    }\n    return count;\n}\n</code>\nThis solution is similar to\
    \ Eric J's solution, which is based on a similar technique described in the article\
    \ he linked to. I also added a comment to the code explaining what it does. The\
    \ main difference is that this code takes advantage of the modulo operator, which\
    \ is a very useful tool in many programming situations, as it will allow you to\
    \ find an increment that will \"undo\" the modulo if you add it to the increment\
    \ counter. In most cases, this is desirable because you don't want to be dealing\
    \ with very large numbers where you will encounter a \"division by 0\" error as\
    \ you increase the increment number.\n<|/ a tags=numbers,math,algorithm,fizzbuzz\
    \ dscore=1 |>\n<| a |>\n<code>", "  if (n < 11) return 1;\n  if (n < 13) return\
    \ fizz_buzz(n - 3) + 1;\n  return 0;\n}\n", "  if (n < 0 || n > 1000) {\n    return\
    \ -1;\n  }\n  const d = n % 11;\n  const e = n % 13;\n  return e === 0 || d !==\
    \ 0 ? Math.ceil(n) : Math.floor(n);\n}\n", "  let count = 0;\n  let i;\n  for\
    \ (i = 0; i < 10; i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      if (n\
    \ === i) {\n        count += 1;\n      }\n    }\n  }\n  return count;\n}\n", "\t\
    if (n % 11 === 0 || n % 13 === 0) {\n\t\treturn 0;\n\t}\n\treturn 1;\n}\n", " \
    \ const mod = n % 11;\n  if (mod == 0 || mod == 3) return 1;\n\n  const mod1 =\
    \ n % 13;\n  if (mod1 == 0 || mod1 == 3) return 2;\n\n  const mod11 = n % 5 +\
    \ 3;\n  if (mod11 == 0 || mod11 == 3) return 3;\n\n  const mod3 = n % 7 + 3;\n\
    \  if (mod3 == 0 || mod3 == 3) return 4;\n\n  return 0;\n}\n", "  let count =\
    \ 0;\n  while (n >= 1000) {\n    count += n % 11;\n    n /= 11;\n  }\n  while\
    \ (n >= 100) {\n    count += n % 13;\n    n /= 13;\n  }\n  while (n >= 10) {\n\
    \    count += n % 7;\n    n /= 7;\n  }\n  return count;\n}\n", "  if (n < 13)\
    \ {\n    return n;\n  } else if (n % 11 === 0) {\n    return n - 11;\n  } else\
    \ if (n % 13 === 0) {\n    return n - 13;\n  }\n  return -1;\n}\n\nconsole.log(fizz_buzz(50));\n\
    console.log(fizz_buzz(78));\nconsole.log(fizz_buzz(79));</code>\n<|/ a tags=javascript,fizzbuzz,recursion,for-loop\
    \ dscore=0 |>\n<| a |>\n<code>", "  let count = 0;\n\n  while (n >= 100) {\n \
    \   n -= 100;\n    count++;\n  }\n\n  while (n >= 10) {\n    n -= 10;\n    count++;\n\
    \  }\n\n  while (n >= 1) {\n    if (n % 11 === 0 || n % 13 === 0) {\n      count++;\n\
    \    }\n    n -= 1;\n  }\n\n  return count;\n}\n", "  if (n === 0 || n === 1)\
    \ {\n    return 1;\n  }\n  return n % 11 === 0 || n % 13 === 0 ? 0 : fizz_buzz(Math.floor(n\
    \ / 10)) + (n % 10 === 11 ? 1 : 0);\n}\n", "  if (n < 0) return 0;\n  else if\
    \ (n < 11) return n;\n  else if (n < 13) return n + 1;\n  else return n + 3;\n\
    }\n", "  if (n < 0 || n % 11 === 0 % 13 === 0) return 0;\n  return n < 12 ? 1\
    \ : 2;\n}\n\n<|/ file filename=index.ts dstars=1 ext=.ts |>\nimport BigNumber\
    \ from 'bignumber.js';\nimport { isBigNumber } from './helpers/isBigNumber';\n\
    \nexport function isPositiveBigNumber(a: any): boolean {\n  if (!isBigNumber(a))\
    \ {\n    throw new TypeError('a is not a BigNumber');\n  }\n  return a.gte(0);\n\
    }\n\nexport function isNegativeBigNumber(a: any): boolean {\n  if (!isBigNumber(a))\
    \ {\n    throw new TypeError('a is not a BigNumber');\n  }\n  return !a.isNegative();\n\
    }\n\nexport function isFiniteBigNumber(a: any): boolean {\n  if (!isBigNumber(a))\
    \ {\n    throw new TypeError('a is not a BigNumber');\n  }\n  return a.isFinite();\n\
    }\n\nexport function isNaNBigNumber(a: any): boolean {\n  if (!isBigNumber(a))\
    \ {\n    throw new TypeError('a is not a BigNumber');\n  }\n  return a.isNaN();\n\
    }\n\nexport function toBigNumber(a: any): BigNumber {\n  if (!isBigNumber(a))\
    \ {\n    throw new TypeError('a is not a BigNumber');\n  }\n  return a;\n}\n\n\
    export function toFraction(a: any, digits: number): string {\n  if (!isBigNumber(a))\
    \ {\n    throw new TypeError('a is not a BigNumber');\n  }\n  return a.toFraction(digits);\n\
    }\n\nexport function toFractionNumber(a: any, digits: number): number {\n  if\
    \ (!isBigNumber(a)) {\n    throw new TypeError('a is not a BigNumber');\n  }\n\
    \  return a.toFraction(digits).toNumber();\n}\n\nexport function toBase(a: any,\
    \ base: number): string {\n  if (!isBigNumber(a)) {\n    throw new TypeError('a\
    \ is not a BigNumber');\n  }\n  return a.toBase(base);\n}\n\nexport function toBaseInverted(a:\
    \ any, base: number): string {\n  if (!isBigNumber(a)) {\n    throw new TypeError('a\
    \ is not a BigNumber');\n  }\n  return a.toBase(base).toString(base);\n}\n\nexport\
    \ function fromNumberToBigNumber(a: number): BigNumber {\n  if (!isFinite(a))\
    \ {\n    throw new TypeError('a is not a number');\n  }\n  return new BigNumber(a);\n\
    }\n\nexport function fromNumberToEther(a: number): string {\n  return fromNumberToBigNumber(a).toString(10);\n\
    }\n\nexport function fromNumberToTokens(a: number): string {\n  return fromNumberToBigNumber(a).toString(10).replace(/([a-z])(?=[A-Z])/g,\
    \ '$1-');\n}\n\nexport function fromNumberToEtherInWei(a", "  if (n < 0 || n %\
    \ 11 === 0 || n % 13 === 0) return 0;\n  return 1 + (n % 11) === (n % 13) + 1\
    \ ? 2 : 3;\n}\n\nconst fizzBuzz = (n: number): string =>\n  n.toString().padStart(3,\
    \ \"0\").split(\"\").reduce((r, v, i) =>\n    i % 3 ? `${r} ${fizz_buzz(v)}` :\
    \ `${r} ${fizz_buzz(v)}`,\n  \"\");\n\nconst fizzBuzz1 = (\n  n: number | string,\n\
    \  paddingLen: number\n): string =>\n  typeof n === \"string\"\n    ? n.padStart(paddingLen,\
    \ \"0\")\n    : n.toString().padStart(paddingLen, \"0\").split(\"\").reduce((r,\
    \ v, i) =>\n        i % 3 ? `${r} ${fizz_buzz(v)}` : `${r} ${fizz_buzz(v)}`,\n\
    \      \"\");\n\nconsole.log(fizzBuzz(50));\nconsole.log(fizzBuzz(78));\nconsole.log(fizzBuzz(79));\n\
    \nconsole.log(fizzBuzz1(50, 3));\nconsole.log(fizzBuzz1(78, 3));\nconsole.log(fizzBuzz1(79,\
    \ 3));</code>\n\nA more robust version that handles more edge cases:\n<code>",
  "  if (n < 13) return n >= 11 ? 0 : n % 11;\n  if (n < 9) return n >= 10 ? 0 : n\
    \ % 13 || 0;\n  if (n === 9) return 1;\n  return n >= 11 ? 1 : n >= 13 ? 2 : n\
    \ % 15 || 0;\n}\n\nexport function parseIntAndFormat(str: string, limit: number)\
    \ {\n  const n = Number.parseInt(str, 10);\n  if (n === limit || n <= 0) {\n \
    \   return NaN;\n  }\n  return n;\n}\n\nexport function formatTime(seconds: number):\
    \ string {\n  const m = Math.floor(seconds / 60);\n  const s = seconds % 60;\n\
    \  if (s < 10) {\n    return \"0\" + s;\n  }\n  return \"\" + m + \":\" + (s <\
    \ 10 ? \" 0\" : \"\") + s;\n}\n\nexport function formatEther(value: number): string\
    \ {\n  const gwei = value * 1e-18;\n  return formatNumber(gwei, 18, 4) + \"ETH\"\
    ;\n}\n\nexport function formatTimeShort(seconds: number): string {\n  const m\
    \ = Math.floor(seconds / 60);\n  const s = seconds % 60;\n  if (s < 10) {\n  \
    \  return \"0\" + s;\n  }\n  return \"\" + m + \":\" + (s < 10 ? \" 0\" : \"\"\
    ) + s;\n}\n\nexport function formatNumber(value: number, digits: number, decimals?:\
    \ number) {\n  const p = Math.pow(10, decimals);\n  return Math.floor((value /\
    \ p) * p) / p;\n}\n\nexport const isWeb3 = () => typeof window.web3 !== \"undefined\"\
    ;\nexport const isAddress = (value: string) => !!/^0x[a-fA-F0-9]{40}$/.test(value);\n\
    export const isAddressInNetwork = (network: string, address: string) =>\n  !!(isAddress(address)\
    \ && isAddressInNetwork(network, address));\n\nexport const getCurrentDate = ()\
    \ => (new Date()).toISOString();\n\nexport const getDaysAgo = (daysAgo: number)\
    \ => {\n  const now = new Date();\n  const then = new Date(now.getFullYear(),\
    \ now.getMonth(), now.getDate() + daysAgo);\n  const diff = now.getTime() - then.getTime();\n\
    \  const days = Math.floor(diff / 86400000);\n  return days;\n};\n\nexport const\
    \ getTransactionIdFromLogs = (logs) => {\n  const foundLog = logs.find((item)\
    \ => item.event === \"transactionHash\");\n  if (foundLog) {\n    return foundLog.args.transactionHash;\n\
    \  }\n  return null;\n};\n\nexport const getNetworkName = () => {\n  const address\
    \ = isAddressInNetwork(\"kovan\", \"0xb16e65a54e3ad799e70949c8c6be033f0f96e53f\"\
    );\n  const networkId = isAddressInNetwork(\"privatenet\", \"0xb16e65a54e3", " \
    \ if (n === 0) return 0;\n  if (n % 11 === 0) return 1;\n  if (n % 13 === 0) return\
    \ 2;\n  return 3;\n}", "  const isDivisibleBy11 = n % 11 === 0;\n  const isDivisibleBy13\
    \ = n % 13 === 0;\n  return isDivisibleBy11 || isDivisibleBy13 ? 0 : isDivisibleBy13\
    \ ? 2 : 3;\n}\n", "  for (let i = 11; i <= 13; i++) {\n    if (n % i === 0) return\
    \ i === 7;\n  }\n  return n;\n}\n", "  let count: number;\n  let arr: number[]\
    \ = [];\n\n  //If the number is divisible by 3, then add 3 as another digit in\
    \ the array.\n  if (n % 3 === 0) {\n    arr.push(3);\n    n = n / 3;\n  }\n\n\
    \  //If the number is divisible by 5, then add 5 as another digit in the array.\n\
    \  if (n % 5 === 0) {\n    arr.push(5);\n    n = n / 5;\n  }\n\n  //If the number\
    \ is divisible by 7, then add 7 as another digit in the array.\n  if (n % 7 ===\
    \ 0) {\n    arr.push(7);\n    n = n / 7;\n  }\n\n  //If the number is divisible\
    \ by 11, then add 11 as another digit in the array.\n  if (n % 11 === 0) {\n \
    \   arr.push(11);\n    n = n / 11;\n  }\n\n  //If the number is divisible by 13,\
    \ then add 13 as another digit in the array.\n  if (n % 13 === 0) {\n    arr.push(13);\n\
    \    n = n / 13;\n  }\n\n  //If the number is divisible by 17, then add 17 as\
    \ another digit in the array.\n  if (n % 17 === 0) {\n    arr.push(17);\n    n\
    \ = n / 17;\n  }\n\n  //If the number is divisible by 19, then add 19 as another\
    \ digit in the array.\n  if (n % 19 === 0) {\n    arr.push(19);\n    n = n / 19;\n\
    \  }\n\n  //If the number is divisible by 23, then add 23 as another digit in\
    \ the array.\n  if (n % 23 === 0) {\n    arr.push(23);\n    n = n / 23;\n  }\n\
    \n  //If the number is divisible by 29, then add 29 as another digit in the array.\n\
    \  if (n % 29 === 0) {\n    arr.push(29);\n    n = n / 29;\n  }\n\n  //If the\
    \ number is divisible by 33, then add 33 as another digit in the array.\n  if\
    \ (n % 33 === 0) {\n    arr.push(33);\n    n = n / 33;\n  }\n\n  //If the number\
    \ is divisible by 37, then add 37 as another digit in the array.\n  if (n % 37\
    \ === 0) {\n    arr.push(37);\n    n = n / 37;\n  }\n\n  //If the number is divisible\
    \ by 41, then add 41 as another digit in the array.\n  if (n % 41 === 0) {\n \
    \   arr.push(41);\n    n = n / 41;\n  }\n\n  //If the number is divisible by 43,\
    \ then add 43 as another digit in the array.\n  if (n % 43 === 0) {\n    arr.push(43);\n\
    \    n = n / 43;\n  }\n\n  //If the number is divisible by 47, then add 47 as\
    \ another digit in the array.\n  if (n % 47 === 0) {\n    arr.push(47);\n    n\
    \ = n / 47;\n  }\n\n  //If the number is divisible by 53, then add 53 as another\
    \ digit in the array.\n  if (", "  return ((n % 11) == 0 || (n % 13) == 0) ? 1\
    \ : 0;\n}\n\nconsole.log(fizz_buzz(50));\nconsole.log(fizz_buzz(78));\nconsole.log(fizz_buzz(79));</code>\n\
    <|/ a |>\n<| c |>\nIt will work in most cases but not all the time.\n<|/ c |>\n\
    <| c |>\ncan you show an example where it fails?\n<|/ c |>\n<| c |>\nTry it on\
    \ the number 79.\n<|/ c |>\n<| c |>\nit also works on 79 in my machine. Can you\
    \ post the example where it fails?\n<|/ c |>\n<| c |>\nYou say it works in your\
    \ machine but not in mine. I was expecting you might have tested it in some other\
    \ environment than mine.\n<|/ c |>\n<| a dscore=2 |>\n<code>", "    let counter\
    \ = 0;\n    while (n > 100) {\n        if (n % 11 == 0 && n % 13 == 0) {\n   \
    \         counter += 1;\n        }\n        n = n / 10;\n    }\n    return counter;\n\
    }\n", "  if (n === 0) return 0;\n  if (n === 1) return 1;\n  if (n === 2) return\
    \ 2;\n  if (n === 3) return 3;\n  if (n % 100 === Math.floor(n % 100) && n % 100\
    \ >= 3 && n % 100 <= 10 && n % 100 >= 13) return 4;\n  return Math.min(5, n -\
    \ 2);\n}\n", "  if (n < 1 || n > 100) {\n    throw new RangeError(\"Invalid number\"\
    );\n  }\n\n  if (n % 11 === 0 || n % 13 === 0) {\n    return n;\n  }\n\n  return\
    \ fizz_buzz(n / 11) + fizz_buzz(n / 13);\n}\n\nexport const fizz_buzz_five = fizz_buzz(5);\n\
    export const fizz_buzz_ten = fizz_buzz(10);\nexport const fizz_buzz_nine = fizz_buzz(9);\n\
    export const fizz_buzz_thirty = fizz_buzz(30);\nexport const fizz_buzz_hundred\
    \ = fizz_buzz(100);\n", "    let count = 0;\n    while (n > 1) {\n        if (n\
    \ % 11 === 0 || n % 13 === 0) {\n            ++count;\n        }\n        n /=\
    \ 10;\n    }\n    return count;\n}\n", "  if (n <= 0) {\n    return '';\n  }\n\
    \  \n  let count = 0;\n  let remainder: number = 0;\n  \n  for (let i = n; i >\
    \ 0; i /= 10) {\n    let digit = i % 10;\n    count += digit > 0 ? 1 : 0;\n  \
    \  remainder = i;\n  }\n  \n  return count > 0 ? count : n % 11 === 0 ? 11 : n\
    \ % 13 === 0 ? 13 : remainder;\n}\n", "  let count = 0;\n  while (n % 11 == 0\
    \ || n % 13 == 0) {\n    count++;\n    n /= 11;\n  }\n  return count;\n}\n", " \
    \ if (n < 13) {\n    return 1;\n  } else if (n < 17) {\n    return 2;\n  } else\
    \ if (n < 19) {\n    return 3;\n  } else if (n < 23) {\n    return 4;\n  } else\
    \ {\n    return 5;\n  }\n}\n", "  const numStr = n.toString();\n  const numArr\
    \ = numStr.split('');\n  const nLength = numArr.length;\n  let index = 0;\n  for\
    \ (let i = 0; i < nLength; ++i) {\n    if (numArr[i] === '0') {\n      index =\
    \ i + 1;\n      break;\n    }\n  }\n\n  let count = 0;\n  for (let i = index;\
    \ i < nLength; ++i) {\n    if (numArr[i] === '7') {\n      count++;\n    }\n \
    \ }\n\n  return count;\n}\n", "  if (n < 0 || n % 11 === 0 || n % 13 === 0) return\
    \ 0;\n  return 1;\n}\n", "  if (n === 0) return 0;\n\n  const i = Math.floor(n);\n\
    \  const remainder = n - i;\n  if (i % 11 === 0 || i % 13 === 0) return 1;\n \
    \ return fizz_buzz(remainder);\n}\n", "  if (n < 0) return 0;\n  if (n < 9) return\
    \ 1;\n  if (n % 11 === 0) return 3;\n  if (n % 13 === 0) return 2;\n  return 4;\n\
    }\n", "  if (n % 11 === 0 || n % 13 === 0) return 1;\n  else return 0;\n}", " \
    \ if (n <= 0) {\n    return 0;\n  } else if (n % 11 === 0) {\n    return 1;\n\
    \  } else if (n % 13 === 0) {\n    return 2;\n  } else {\n    return 3;\n  }\n\
    }\n", "  if (n < 11 || n % 11 === 0) return 1;\n  if (n < 13 || n % 13 === 0)\
    \ return 3;\n  return 0;\n}", "  const remainder = n % 11;\n  if (remainder ===\
    \ 0 || remainder === 11) {\n    return `${n}.0`;\n  }\n  const nextN = (n / 10)\
    \ | 0;\n  return fizz_buzz(nextN) + (n % 10 === 7 ? ` 7.0` : ` ${n % 10}.0`);\n\
    }\n", "  let count = 0;\n  n += n; // coerce to integer\n  n -= n % 11; // n is\
    \ a multiple of 11\n  n -= n % 13; // n is a multiple of 13\n\n  while (n > 0)\
    \ {\n    count += n % 10 === 7 ? 1 : 0;\n    n /= 10;\n  }\n\n  return count;\n\
    }\n\nconsole.log(fizz_buzz(78));\n", "  if (n > 100) {\n    return fizz_buzz(n\
    \ / 10);\n  }\n  if (n % 10 === 7) {\n    return 1;\n  }\n  if (n % 10 === 8)\
    \ {\n    return 2;\n  }\n  if (n % 10 === 9 || n % 10 === 11 || n % 10 === 12)\
    \ {\n    return 3;\n  }\n  if (n % 10 === 1) {\n    return 4;\n  }\n  if (n %\
    \ 10 === 2) {\n    return 5;\n  }\n  if (n % 10 === 3 || n % 10 === 4 || n % 10\
    \ === 5 || n % 10 === 6 || n % 10 === 7 || n % 10 === 8 || n % 10 === 9 || n %\
    \ 10 === 10 || n % 10 === 11 || n % 10 === 12) {\n    return 6;\n  }\n  if (n\
    \ % 10 === 13 || n % 10 === 14 || n % 10 === 15 || n % 10 === 16 || n % 10 ===\
    \ 17 || n % 10 === 18 || n % 10 === 19 || n % 10 === 20 || n % 10 === 21 || n\
    \ % 10 === 22 || n % 10 === 23 || n % 10 === 24 || n % 10 === 25) {\n    return\
    \ 7;\n  }\n  return 8;\n}\n", "  if (n === 0 || n === 11 || n === 13) {\n    return\
    \ 0;\n  }\n\n  return 1;\n}\n", "  if (n <= 0) return 0;\n  if (n === 11 || n\
    \ === 13) return 1;\n  if (n % 11 === 13 && n % 10 === 11) return 4;\n  return\
    \ fizz_buzz(~~(n / 10));\n}\n", "  return n < 11 ? (n % 11 === 0 ? 0 : n) :\n\
    \         n === 13 ? (n % 13 === 0 ? 0 : n ) : n;\n}\n</cell>\n<text>\nIn addition\
    \ to this, we can now define a function that'll return the fizz buzz number for\
    \ a given input. We'll also need to include a type annotation in the return type,\
    \ because otherwise the return type will be inferred as any (since TypeScript\
    \ does not yet have a way for us to annotate functions with multiple return types\
    \ -- you can follow this issue for details: https://github.com/Microsoft/TypeScript/issues/1297).\
    \ Finally, we'll use type assertion to ensure that the input is a number at runtime.\n\
    \n\n</text>\n<cell>", "  // https://jsperf.com/math-floor-vs-math-ceil-vs-parseint-vs-math-abs-vs-constexpr\n\
    \  return Math.floor(n % 10) === 7 ? (n % 100 > 9 ? 0 : 1) :\n    Math.floor(n\
    \ % 10) === 8 ? (n % 100 > 8 ? 0 : 1) :\n    Math.floor(n % 10) === 9 ? (n % 100\
    \ > 8 ? 0 : 0) :\n    Math.floor(n % 10) === 10 ? (n % 100 > 7 ? 0 : 1) :\n  \
    \  Math.floor(n % 10) === 11 ? (n % 100 > 6 ? 0 : 0) :\n    Math.floor(n % 10)\
    \ === 13 ? (n % 100 > 5 ? 0 : 1) : 0;\n}\n", "  return String(num).replace(/7/g,\
    \ '8').replace(/9/g, '10').replace(/11/g, '12');\n}\n</code>\n<|/ a dscore=2 |>\n\
    <| c |>\nThe `return` is unnecessary: it would be returned anyway. Though this\
    \ can be improved by using `String()`'s implicit conversion of `n` to a string.\n\
    <|/ c |>\n<| c |>\nI didn't know you could use string concatenation in replace.\
    \ Learn something new every day.\n<|/ c |>\n<| c |>\nGood answer but i think the\
    \ method can be optimized with using regexp like `/7/g` instead of `/7/g8`.\n\
    <|/ c |>\n<| c |>\nThis is just an example of how you can do things, not how you\
    \ can do it in production. As I mentioned in my answer, this is an excellent way\
    \ to do it.\n<|/ c |>\n<| c |>\nI agree, I just pointed that out because someone\
    \ may wonder why this answer has so many upvotes, even though it may not be an\
    \ optimal solution. Though I guess it could be optimized.\n<|/ c |>\n<| a |>\n\
    Here is a solution that checks if the number is divisible by 3 or 5 or both, and\
    \ then returns the string \"FizzBuzz\". But it also returns \"Fizz\" if it is\
    \ divisible by both 3 and 5, so a slightly different implementation.\n<code>",
  "  return isEven(n) ? 0 :\n    isDivisibleBy11(n) ? 2 :\n    isDivisibleBy13(n)\
    \ ? 3 :\n    fizz_buzz(subtract(n, 7));\n}\n", "  if (n < 11 || n % 11 === 0)\
    \ return 1;\n  if (n < 13) return 3;\n  return 5;\n}\n", "  let counter = 0;\n\
    \  let numStr = n.toString();\n\n  for (let i = 0; i < numStr.length; i++) {\n\
    \    if (numStr[i] === '7') {\n      if (numStr[i - 1] === '6' && numStr[i + 1]\
    \ === '5') {\n        counter++;\n      } else if (numStr[i - 1] === '7' && numStr[i\
    \ + 1] === '9') {\n        counter++;\n      } else {\n        counter++;\n  \
    \    }\n    } else {\n      counter++;\n    }\n  }\n  return counter;\n}", " \
    \ const digits = [\"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\"\
    , \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\"\
    , \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\"];\n  const digit = digits.indexOf(n);\n\
    \  const times_digit = digits.filter(d => d === n).length;\n  if (n === 7 && times_digit\
    \ === 0) return 0;\n  if (n === 8 && times_digit === 1) return 2;\n  if (n ===\
    \ 9 && times_digit === 2) return 3;\n  if (n === 10 && times_digit === 3) return\
    \ 4;\n  if (n === 11 && times_digit === 4) return 5;\n  if (n === 12 && times_digit\
    \ === 5) return 6;\n  if (n === 13 && times_digit === 6) return 7;\n  if (n ===\
    \ 14 && times_digit === 7) return 8;\n  if (n === 15 && times_digit === 8) return\
    \ 9;\n  if (n === 16 && times_digit === 9) return 10;\n  if (n === 17 && times_digit\
    \ === 10) return 11;\n  if (n === 18 && times_digit === 11) return 12;\n  if (n\
    \ === 19 && times_digit === 12) return 13;\n  if (n === 20 && times_digit ===\
    \ 13) return 14;\n  if (n === 21 && times_digit === 14) return 15;\n  if (n ===\
    \ 22 && times_digit === 15) return 16;\n  if (n === 23 && times_digit === 16)\
    \ return 17;\n  if (n === 24 && times_digit === 17) return 18;\n  if (n === 25\
    \ && times_digit === 18) return 19;\n  if (n === 26 && times_digit === 19) return\
    \ 20;\n  if (n === 27 && times_digit === 20) return 21;\n  if (n === 28 && times_digit\
    \ === 21) return 22;\n  if (n === 29 && times_digit === 22) return 23;\n  if (n\
    \ === 30 && times_digit === 23) return 24;\n  if (n === 31 && times_digit ===\
    \ 24) return 25;\n  if (n === 31 && times_digit === 25) return 26;\n  if (n ===\
    \ 31 && times_digit === 26) return 27;\n  if (n === 31 && times_digit === 27)\
    \ return 28;\n  if (n === 31 && times_digit === 28) return 29;\n  if (n === 31\
    \ && times_digit === 29) return 30;\n  return -1;\n}\n", "  let num: number =\
    \ n;\n  let digit: number = 0;\n  let fizzCount: number = 1;\n  let buzzCount:\
    \ number = 1;\n  while (num > 0) {\n    digit = num % 10;\n    num = Math.floor(num\
    \ / 10);\n    if (digit === 7) {\n      fizzCount++;\n    } else if (digit ===\
    \ 3) {\n      buzzCount++;\n    }\n  }\n  return fizzCount > buzzCount ? fizzCount\
    \ : buzzCount;\n}\n", "  // Only return if n is a positive integer\n  if (!Number.isInteger(n)\
    \ || n <= 0) {\n    throw new Error(`Incorrect input: ${n}`)\n  }\n  // Get the\
    \ remainder of n divided by 11\n  const remainder = n % 11\n  // Get the remainder\
    \ of n divided by 13\n  const remainder_2 = n % 13\n  // If n is divisible by\
    \ 11\n  if (remainder === 1) {\n    // If n is divisible by 13\n    if (remainder_2\
    \ === 0 || remainder_2 === 5) {\n      // Return 1\n      return 1\n    } else\
    \ {\n      // Return 2\n      return 2\n    }\n  } else {\n    // If n is divisible\
    \ by 13\n    if (remainder_2 === 2) {\n      // Return 3\n      return 3\n   \
    \ } else {\n      // Return 4\n      return 4\n    }\n  }\n}\n", "  if (n < 0)\
    \ return 0;\n  if (n < 10) return 1;\n  if (n % 10 === 7) return 2;\n  if (n %\
    \ 10 === 9) return 3;\n  if (n % 10 === 11) return 4;\n  if (n % 10 === 13) return\
    \ 5;\n  return 6;\n}\n", "  return n%11==0 || n%13==0 ? n : n*fizz_buzz(n/11)%13;\n\
    }\n", "  // If the number is divisible by 11 or 13, return 0\n  if (n % 11 ===\
    \ 0 || n % 13 === 0) {\n    return 0;\n  }\n\n  // If it is divisible by 3, return\
    \ 1\n  if (n % 3 === 0) {\n    return 1;\n  }\n\n  // If it is divisible by 5,\
    \ return 2\n  if (n % 5 === 0) {\n    return 2;\n  }\n\n  // If it is divisible\
    \ by both 3 and 5, return 3\n  if (n % 3 === 0 && n % 5 === 0) {\n    return 3;\n\
    \  }\n\n  // If it is divisible by 3 but not 5, return 4\n  if (n % 3 !== 0 &&\
    \ n % 5 !== 0) {\n    return 4;\n  }\n\n  // If it is divisible by both 3 and\
    \ 5, return 5\n  if (n % 3 === 0 && n % 5 === 0) {\n    return 5;\n  }\n\n  //\
    \ Otherwise, return 6\n  return 6;\n}\n", "  let count = 0;\n  let i = 1\n  while\
    \ (i <= n) {\n    if (n % i === 0 || n % i === 3 || n % i === 5 || n % i === 7\
    \ || n % i === 11 || n % i === 13) count++\n    i++\n  }\n  return count\n}\n",
  "  return Math.ceil(\n    (Math.sqrt(8 * n + 11) / 11) - Math.floor((Math.sqrt(8\
    \ * n + 11) / 11) * Math.log(8 * n + 11))\n  );\n}\n</code>\n<|/ a dscore=1 |>\n\
    <| a tags=fizzbuzz,javascript dscore=0 |>\nHere's a solution that doesn't require\
    \ knowing the number of digits beforehand.\n<code>\nlet fizz_buzz = function (n)\
    \ {\n    let digits = Math.floor((n).toString(10).length);\n    let result = n\
    \ % 11 === 0 ? \"Fizz\" : n % 11 === 1 ? \"Buzz\" : \"\";\n    if (n % 10 ===\
    \ 0) result += `0`.repeat(digits - 2);\n    return result + (n % 10).toString();\n\
    };\n</code>\n<|/ a |>\n<| a dscore=0 |>\nYou can try this approach, it's easier\
    \ to understand than the accepted answer:\n<code>", "  const nStr = n.toString();\n\
    \  if (nStr.length <= 1) return n;\n  if (nStr.length <= 3) return n % 10 ===\
    \ 0 ? 0 : 1;\n  if (nStr.length <= 5) return n % 10 === 0 ? 0 : 2;\n  if (nStr.length\
    \ <= 7) return n % 10 === 0 ? 0 : 3;\n  return n % 10 === 0 ? 0 : 4;\n}\n", " \
    \ n = Math.ceil(n)\n  if (n % 11 === 0 || n % 13 === 0) return 0\n  return Math.ceil(n\
    \ / 11) + 1\n}\nexport { fizz_buzz }", "  if (n < 0) return -1;\n  if (n % 11\
    \ === 0) return fizz_buzz(n / 11) + 1;\n  if (n % 13 === 0) return fizz_buzz(n\
    \ / 13) + 1;\n  return 0;\n}\n", "    if (n % 11 === 0 || n % 13 === 0) return\
    \ 0\n    return 1\n}\n", "  if (n < 11) {\n    return 0\n  }\n  if (n % 11 ===\
    \ 0 && n >= 13) {\n    return 2\n  }\n  return 3\n}\n", "  let count = 0;\n  while\
    \ (n > 0) {\n    n = n % 11;\n    if (n === 7 || n === 8) {\n      count++;\n\
    \    }\n    n = Math.floor(n / 10);\n  }\n  return count;\n}", "  if (n < 1 ||\
    \ n > 2000) {\n    return \"\";\n  }\n  let str = \"\";\n  const numbers = Array.from({\
    \ length: n });\n  for (let index = 0; index < numbers.length; index++) {\n  \
    \  if (numbers[index] % 11 === 0) {\n      str += \"11\";\n    } else if (numbers[index]\
    \ % 13 === 0) {\n      str += \"13\";\n    } else {\n      str += numbers[index];\n\
    \    }\n  }\n  return str;\n}\n", "  let counter = 0;\n  for (let i = n; i >=\
    \ 1; i--) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      counter += 1;\n  \
    \  }\n  }\n  return counter;\n}\n", "  // Get the remainder of integer division\
    \ by 11\n  const remainder = n % 11;\n\n  // Return 0 when the remainder is 0\
    \ (no remainder by 11)\n  if (remainder === 0) {\n    return 0;\n  }\n\n  // Return\
    \ 1 when remainder is 1 (remainder by 11 is 9)\n  if (remainder === 1) {\n   \
    \ return 1;\n  }\n\n  // Return 2 when remainder is 2 (remainder by 11 is 18)\n\
    \  if (remainder === 2) {\n    return 2;\n  }\n\n  // Return 3 when remainder\
    \ is 3 (remainder by 11 is 27)\n  if (remainder === 3) {\n    return 3;\n  }\n\
    \n  // Return 4 when remainder is 4 (remainder by 11 is 36)\n  if (remainder ===\
    \ 4) {\n    return 4;\n  }\n\n  // Return 5 when remainder is 5 (remainder by\
    \ 11 is 45)\n  if (remainder === 5) {\n    return 5;\n  }\n\n  // Return 6 when\
    \ remainder is 6 (remainder by 11 is 54)\n  if (remainder === 6) {\n    return\
    \ 6;\n  }\n\n  // Return 7 when remainder is 7 (remainder by 11 is 63)\n  if (remainder\
    \ === 7) {\n    return 7;\n  }\n\n  // Return 8 when remainder is 8 (remainder\
    \ by 11 is 72)\n  if (remainder === 8) {\n    return 8;\n  }\n\n  // Return 9\
    \ when remainder is 9 (remainder by 11 is 81)\n  if (remainder === 9) {\n    return\
    \ 9;\n  }\n\n  // Return 10 when remainder is 10 (remainder by 11 is 90)\n  if\
    \ (remainder === 10) {\n    return 10;\n  }\n\n  // Return 11 when remainder is\
    \ 11 (remainder by 11 is 99)\n  if (remainder === 11) {\n    return 11;\n  }\n\
    \n  // Return 12 when remainder is 12 (remainder by 11 is 107)\n  if (remainder\
    \ === 12) {\n    return 12;\n  }\n\n  // Return 13 when remainder is 13 (remainder\
    \ by 11 is 117)\n  if (remainder === 13) {\n    return 13;\n  }\n\n  // Return\
    \ 14 when remainder is 14 (remainder by 11 is 126)\n  if (remainder === 14) {\n\
    \    return 14;\n  }\n\n  // Return 15 when remainder is 15 (remainder by 11 is\
    \ 135)\n  if (remainder === 15) {\n    return 15;\n  }\n\n  // Return 16 when\
    \ remainder is 16 (remainder by 11 is 144)\n  if (remainder === 16) {\n    return\
    \ 16;\n  }\n\n  // Return 17 when remainder is 17 (remainder by 11 is 153)\n \
    \ if (remain", "  if (n < 11 || n > 79) {\n    throw new RangeError(\n      \"\
    fizz_buzz must be called with an integer less than 11 and greater than 79\"\n\
    \    );\n  }\n  if (n % 11 === 0 && (n % 13 === 0 || n % 11 === 13)) {\n    return\
    \ 1;\n  }\n  return 0;\n}\n", "  let count = 0;\n  let num;\n  while ((n < 10)\
    \ || (n < 20) || (n < 30) || (n < 40) || (n < 50)) {\n    if (n % 10 == 7 || n\
    \ % 10 == 9 || n % 10 == 11 || n % 10 == 13) {\n      count++;\n    }\n    num\
    \ = (n).toString();\n    n = parseInt(num, 10);\n  }\n  return count;\n}\n", " \
    \ let count = 0;\n  const arr = [11, 13];\n  while (n > 10) {\n    if (n % arr[0]\
    \ === 0 || n % arr[1] === 0) {\n      count++;\n    }\n    n = Math.floor(n /\
    \ arr[0]);\n  }\n  return count;\n}\n</code>\n<|/ a tags=fizzbuzz,javascript |>\n\
    <| c |>\nYeah this is a bit of a nice solution. I'd just make the array `let arr\
    \ = new Array(11)` and then use `arr[0]` instead of hard-coding `11`.\n<|/ c |>\n\
    <| c |>\nOh yeah that makes sense. Thanks.\n<|/ c |>\n<| a tags=fizzbuzz,javascript\
    \ |>\nHere's a solution using mathematics:\n\n<code>", "  if (n < 11 || n % 11\
    \ === 0) return 1;\n  if (n < 13) return 3;\n  if (n < 17) return 5;\n  if (n\
    \ < 19) return 7;\n  if (n < 23) return 9;\n  if (n < 27) return 11;\n  if (n\
    \ < 29) return 13;\n  if (n < 31) return 15;\n  if (n < 33) return 17;\n  if (n\
    \ < 35) return 19;\n  if (n < 37) return 21;\n  if (n < 39) return 23;\n  if (n\
    \ < 41) return 25;\n  if (n < 43) return 27;\n  if (n < 45) return 29;\n  if (n\
    \ < 47) return 31;\n  if (n < 49) return 33;\n  return 37;\n}\n", "  if (n < 1\
    \ || n > 100) {\n    throw new Error(`expected n to be a positive integer, instead\
    \ got ${n}`);\n  }\n\n  return [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233,\
    \ 377, 610, 987, 1597].some(\n    (num) => n % num === 0\n  ) ?\n    0 :\n   \
    \ 1;\n}\n", "  const rem = n % 11;\n  const num = n % 13;\n\n  if (rem === 0)\
    \ {\n    if (num === 0) {\n      return 1;\n    }\n    if (num > 0) {\n      return\
    \ num;\n    }\n  }\n\n  if (num > 0) {\n    return num + fizz_buzz(n - num);\n\
    \  }\n\n  return 0;\n}\n", "  if (n < 10) {\n    return n;\n  }\n  if (n < 100)\
    \ {\n    return fizz_buzz(n % 10) + fizz_buzz(n % 100) + fizz_buzz(Math.floor(n/100));\n\
    \  }\n  if (n < 1000) {\n    return fizz_buzz(n % 10) + fizz_buzz(Math.floor(n\
    \ / 10)) + fizz_buzz(n % 100) + fizz_buzz(Math.floor(n/100));\n  }\n  if (n <\
    \ 10000) {\n    return fizz_buzz(n % 10) + fizz_buzz(Math.floor(n / 10)) + fizz_buzz(Math.floor(n\
    \ / 100)) + fizz_buzz(n % 100) + fizz_buzz(Math.floor(n/100));\n  }\n  return\
    \ fizz_buzz(n % 10) + fizz_buzz(Math.floor(n / 10)) + fizz_buzz(Math.floor(n /\
    \ 100)) + fizz_buzz(Math.floor(n / 1000)) + fizz_buzz(n % 1000);\n}\n", "  //\
    \ Get the remainder of n%11, which should be 0 for divisible by 11 or 13\n  const\
    \ remainder = (n % 11);\n  const isDivisibleBy11 = remainder === 0;\n  const isDivisibleBy13\
    \ = remainder === 0;\n\n  // Return 0 when n & 11 is 0, 1 when n & 11 is 1, 2\
    \ when n & 11 is 2, and 3 when n & 11 is 3.\n  return isDivisibleBy13 ? 3 : isDivisibleBy11\
    \ ? 2 : 1;\n}\n</code>\n<|/ a |>\n<| a tags=javascript,numbers,function,algorithm\
    \ |>\nYou can simplify it to\n<code>", "  if (n % 11 === 0) return 3;\n  if (n\
    \ % 13 === 0) return 2;\n  if (n % 17 === 0) return 1;\n  return 0;\n}", "  let\
    \ i = 1;\n  let count: number;\n  do {\n    count = i.toString().length;\n   \
    \ i++;\n  } while ((n / i) % 11 === 0 || n / i) % 13 === 0);\n  return count;\n\
    }\n", "\tconst nums = [1, 3, 7, 9];\n\tlet count = 0;\n\twhile (n % 10 != 0) {\n\
    \t\tn = (n / 10) | 0;\n\t\tcount += nums.indexOf(n);\n\t}\n\treturn count;\n}\n",
  "  if (n < 13) return n % 11 === 0 ? 0 : n % 11 === 1 ? 1 : 2;\n  return n % 13\
    \ === 0 ? 0 : n % 13 === 1 ? 1 : 2;\n}\n", "  if (n % 11 === 0 && n % 13 === 0)\
    \ {\n    return 0;\n  } else if (n % 11 === 0 && n % 14 === 0) {\n    return 1;\n\
    \  } else if (n % 13 === 0 && n % 14 === 0) {\n    return 2;\n  }\n  return 3;\n\
    }\n", "  const remainder = Math.floor(n);\n  return (remainder === 13 || remainder\
    \ === 11) ? 0 : ((n - remainder) % 11 + 1);\n}\n", "  return n < 0 ? 0 : n < 1\
    \ ? 1 : fizz_buzz(n / 10) | 0 | fizz_buzz((n % 10) | 0);\n}\n", "  if (n % 11\
    \ === 0) return 0;\n  if (n % 13 === 0) return 2;\n  return 3;\n}\n", "  let x\
    \ = 1;\n  let y = 1;\n  while (y <= n && x % 11 === 0 || y <= n && x % 13 ===\
    \ 0) {\n    x++;\n    y++;\n  }\n  return x;\n}\n", "  let num;\n\n  if (n % 11\
    \ === 0) {\n    num = fizz_buzz_number(n);\n  } else {\n    if (n % 13 === 0)\
    \ {\n      num = fizz_buzz_number(n);\n    } else {\n      num = 0;\n    }\n \
    \ }\n  return num;\n}\n", "  // Write your code here.\n  const result = [];\n\
    \  let count = 0;\n  for (let i = 1; i < n; i++) {\n    if (n % i === 0) {\n \
    \     count++;\n    }\n    if (count === 2) {\n      result.push(i);\n    }\n\
    \  }\n  return result.length ? result.length : n;\n}\n\nconsole.log(fizz_buzz(50));",
  "  const str = n.toString();\n  let times = 0;\n  for (let i = 0; i < str.length;\
    \ i++) {\n    if (\n      str[i] === 7 ||\n      str[i] === 8 ||\n      str[i]\
    \ === 9 ||\n      str[i] === 10 ||\n      str[i] === 11\n    ) {\n      times++;\n\
    \    }\n  }\n  return times;\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=typescript,javascript,node.js,algorithm\
    \ |>\n<code>", "  let count = 0;\n  while (n >= 11 || n >= 13) {\n    if (n %\
    \ 11 === 0 || n % 13 === 0) {\n      count += 1;\n    }\n    n = Math.floor(n\
    \ / 10);\n  }\n  return count;\n}\n", "  const isDivisibleBy11 = n % 11 === 0;\n\
    \  const isDivisibleBy13 = n % 13 === 0;\n  return (isDivisibleBy11 && isDivisibleBy13)\
    \ ? 0 : 1;\n}\n", "  return isDigit(n) ? n : n % 11 === 0 ? 0 : n % 13 === 0 ?\
    \ 0 : n % 2 === 0 ? 0 :\n      isDigit(n % 100) ? 0 : n % 10 === 0 ? 0 : isDigit(n\
    \ % 10) ? 0 : 1;\n}\n", "  if (n % 11 === 0 && n % 13 === 0) {\n    return 0;\n\
    \  } else if (n % 11 === 0 || n % 13 === 0) return 1;\n  else return 2;\n}\n",
  "  let count = 0;\n  while (n % 11 === 0 || n % 13 === 0) {\n    count++;\n    n\
    \ /= 11;\n  }\n  return count;\n}\n", "  const arr = Array.from(Array(n).keys())\n\
    \  const arr1 = arr.filter((num: number) => num % 11 === 0 || num % 13 === 0)\n\
    \  return arr1.length\n}\n", "  if (n < 8) {\n    return n; // No change if already\
    \ divisible by 8\n  } else if (n % 11 === 0 || n % 13 === 0) {\n    return n +\
    \ 1; // Increment for divisible by 11 or 13\n  } else {\n    return n;\n  }\n\
    }\n", "  if (n === 0 || n === 11) {\n    return 1;\n  }\n\n  if (n === 13) {\n\
    \    return 2;\n  }\n\n  return fizz_buzz(n - 1) + fizz_buzz(n - 13);\n}\n", " \
    \ let counter = 0;\n  if (n < 0 || n % 11 === 0) counter++;\n  if (n % 13 ===\
    \ 0) counter++;\n  return counter;\n}\n", "  return (\n    (n % 11 === 0 && n\
    \ % 13 === 0)\n    ? ((n / 11) % 10 === 1 || (n / 13) % 10 === 1 ? 0 : -1)\n \
    \   : (n >= 0 && n % 10 === 1 ? 0 : -1)\n  );\n}\n", "  let count = 0;\n  let\
    \ num = n;\n  while (num > 0) {\n    if (num % 11 === 0 || num % 13 === 0) {\n\
    \      count += 1;\n    }\n    num = Math.floor(num / 10);\n  }\n  return count;\n\
    }\n", "  if (n === 0 || n === 1) {\n    return n;\n  } else if (n % 10 === 0 &&\
    \ n % 100 === 11 || n % 10 === 11 && n % 100 === 11 ||\n            n % 100 ===\
    \ 0 && n % 1000 !== 11) {\n    return 0;\n  } else if (n % 10 === 2 && n % 100\
    \ === 11 || n % 10 === 12 && n % 100 === 11 ||\n            n % 100 === 2 || n\
    \ % 100 === 11) {\n    return 1;\n  } else {\n    return 2;\n  }\n}\n", "  let\
    \ result = n.toString().split('');\n  for (let i = 0; i < result.length; i++)\
    \ {\n    let el = parseInt(result[i]);\n    if (el % 11 === 0 && el % 13 === 0)\
    \ {\n      return i + 1;\n    }\n  }\n  return result;\n}\n", "  return n > 0\
    \ && n % 11 === 0 || (n % 13 === 0 && n % 4 === 0)\n    ? fizz_buzz(n - 1)\n \
    \   : 0;\n}\n", "\treturn Math.floor((Math.log(n) / Math.LN10) + 1);\n}\n", " \
    \ if (n < 10) {\n    return n\n  } else if (n < 100) {\n    return n % 10 ===\
    \ 7 ? 2 : n % 10 === 13 ? 3 : 0\n  } else {\n    return n % 10 === 7 ? 3 : n %\
    \ 10 === 13 ? 2 : 0\n  }\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
