language: ts
name: HumanEval_92_any_int
results:
- exit_code: 1
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n  return ((typeof x == \"number\" && (typeof y == \"\
    number\" && typeof z == \"number\")) || (typeof x == \"number\" && typeof y ==\
    \ \"number\" && typeof z == \"number\")) || typeof x == \"number\" || typeof y\
    \ == \"number\" || typeof z == \"number\";\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n\
    \  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp2rovbsdq.js:20:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp2rovbsdq.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978519
- exit_code: 1
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n    return (x === ((x + y) + z));\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpr1zffayp.js:19:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpr1zffayp.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978519
- exit_code: 1
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n    const sum = x + y + z;\n    if (sum === 0) return\
    \ false;\n    const n = Math.sqrt(sum);\n    if (n <= x && x <= n && n <= y &&\
    \ y <= n && n <= z) return true;\n    return false;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp4e9rlcrb.js:25:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp4e9rlcrb.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978519
- exit_code: 2
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n  if (x === y && x === z) return true\n  else if (x ===\
    \ z) return true\n  else if (y === z) return true\n  else if (Number.isNaN(x)\
    \ || Number.isNaN(y) || Number.isNaN(z)) return false\n  return !(!Number.isInteger(x)\
    \ && !Number.isInteger(y) && !Number.isInteger(z))\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp8s_nz3sv.ts(17,19): error TS2339: Property ''isNaN''
    does not exist on type ''NumberConstructor''.

    ../../../../../tmp/tmp8s_nz3sv.ts(17,38): error TS2339: Property ''isNaN'' does
    not exist on type ''NumberConstructor''.

    ../../../../../tmp/tmp8s_nz3sv.ts(17,57): error TS2339: Property ''isNaN'' does
    not exist on type ''NumberConstructor''.

    ../../../../../tmp/tmp8s_nz3sv.ts(18,20): error TS2339: Property ''isInteger''
    does not exist on type ''NumberConstructor''.

    ../../../../../tmp/tmp8s_nz3sv.ts(18,44): error TS2339: Property ''isInteger''
    does not exist on type ''NumberConstructor''.

    ../../../../../tmp/tmp8s_nz3sv.ts(18,68): error TS2339: Property ''isInteger''
    does not exist on type ''NumberConstructor''.

    '
  timestamp: 1659978519
- exit_code: 1
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n  return typeof x === \"number\" && typeof y === \"number\"\
    \ && typeof z === \"number\" && x + y + z === 0;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp1qm7fngg.js:19:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp1qm7fngg.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978519
- exit_code: 2
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n    if (typeof x !== 'number' || typeof y !== 'number'\
    \ || typeof z !== 'number') {\n        throw new TypeError('All inputs to any_int\
    \ must be numbers');\n    }\n    if (x === 0 && y === 0 && z === 0) {\n      \
    \  return true;\n    }\n    return Math.round((x + y + z) === 0);\n}\nexport declare\
    \ const any_int: (...args: any[]) => boolean;\n\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp0dlo9coa.ts(13,10): error TS2300: Duplicate identifier
    ''any_int''.

    ../../../../../tmp/tmp0dlo9coa.ts(20,23): error TS2345: Argument of type ''boolean''
    is not assignable to parameter of type ''number''.

    ../../../../../tmp/tmp0dlo9coa.ts(22,22): error TS2300: Duplicate identifier ''any_int''.

    '
  timestamp: 1659978519
- exit_code: 2
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n  if (x < 0 || y < 0 || z < 0) {\n    return false;\n\
    \  }\n\n  return x > y && y > z && is_int(x + y + z);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpal5ebr8x.ts(18,28): error TS2304: Cannot find name
    ''is_int''.

    '
  timestamp: 1659978519
- exit_code: 1
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n  // Check if all are integers\n  if (typeof x === 'number')\
    \ {\n    if (typeof y === 'number') {\n      if (typeof z === 'number') {\n  \
    \      if (x === +x + +y + +z) {\n          return true;\n        }\n      }\n\
    \    }\n  }\n  // Check if all are integers\n  else if (typeof y === 'number')\
    \ {\n    if (typeof z === 'number') {\n      if (y === +y + +z) {\n        return\
    \ true;\n      }\n    }\n  }\n  // Check if all are integers\n  else if (typeof\
    \ z === 'number') {\n    if (z === +z) {\n      return true;\n    }\n  }\n  //\
    \ Return false if there are not integer numbers\n  return false;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n\
    \  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpd3hofo0p.js:44:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpd3hofo0p.js:55:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978519
- exit_code: 1
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n  if (x == y + z && x != z && x % 1 == 0 && y % 1 ==\
    \ 0 && z % 1 == 0 && x % 2 == 0 && y % 2 == 0 && z % 2 == 0) {\n    return true;\n\
    \  }\n  return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2,\
    \ 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpcehmc8qb.js:22:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpcehmc8qb.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978519
- exit_code: 1
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n  if (x > y && x > z) return true\n  if (x < y && x <\
    \ z) return true\n  if (x == y || x == z) return true\n  return false\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n\
    \  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpc7l7rwhx.js:25:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpc7l7rwhx.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978519
- exit_code: 2
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n    const sum = Number(x + y + z); // convert strings\
    \ to numbers for simplicity\n    return !(Number.isNaN(sum)) && sum % 1 === 0;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n\
    \  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp2vvgb762.ts(15,21): error TS2339: Property ''isNaN''
    does not exist on type ''NumberConstructor''.

    '
  timestamp: 1659978519
- exit_code: 1
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n  return !!(x === (x + y) && x === (x + z) && y === (y\
    \ + z) && z === (x + y + z));\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n\
    \  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpews7_36i.js:19:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpews7_36i.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978519
- exit_code: 1
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n    if (isNaN(x) || isNaN(y) || isNaN(z)) return false;\n\
    \    var total = Math.floor(x) + Math.floor(y) + Math.floor(z);\n    return (Math.floor(total)\
    \ === total) && (total >= 0);\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n\
    \  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp2xwlg7pj.js:23:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp2xwlg7pj.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978519
- exit_code: 2
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n    return (isInt(x) && isInt(y) && isInt(z) && x + y\
    \ + z == 45);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2,\
    \ 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpna50aiwv.ts(14,13): error TS2304: Cannot find name
    ''isInt''.

    ../../../../../tmp/tmpna50aiwv.ts(14,25): error TS2304: Cannot find name ''isInt''.

    ../../../../../tmp/tmpna50aiwv.ts(14,37): error TS2304: Cannot find name ''isInt''.

    '
  timestamp: 1659978519
- exit_code: 1
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n  return\n    (typeof x === 'number' &&\n      typeof\
    \ y === 'number' &&\n      typeof z === 'number' &&\n      x === Math.round(x)\
    \ &&\n      y === Math.round(y) &&\n      z === Math.round(z))\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\ntrue\n    at test (/tmp/tmppq5umpfu.js:25:12)\n \
    \   at Object.<anonymous> (/tmp/tmppq5umpfu.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978519
- exit_code: 1
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n    return x == y || x == z || y == z;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n\
    \  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp2xdgzsre.js:19:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp2xdgzsre.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978519
- exit_code: 2
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n  if (isNaN(x) || isNaN(y) || isNaN(z)) return false;\n\
    \  return isInteger(x) && isInteger(y) && isInteger(z) &&\n    (x === y || x ===\
    \ z || y === z || z === x || z === y);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n\
    \  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmppgq24y9x.ts(15,10): error TS2304: Cannot find name
    ''isInteger''.

    ../../../../../tmp/tmppgq24y9x.ts(15,26): error TS2304: Cannot find name ''isInteger''.

    ../../../../../tmp/tmppgq24y9x.ts(15,42): error TS2304: Cannot find name ''isInteger''.

    '
  timestamp: 1659978519
- exit_code: 2
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n  return (\n    typeof x === \"number\" &&\n    typeof\
    \ y === \"number\" &&\n    typeof z === \"number\" &&\n    x !== null &&\n   \
    \ y !== null &&\n    z !== null &&\n    x !== \"\" &&\n    y !== \"\" &&\n   \
    \ z !== \"\" &&\n    x !== \".\" &&\n    y !== \".\" &&\n    z !== \".\" &&\n\
    \    (x >= 0 || y >= 0 || z >= 0) &&\n    x % 1 === 0 &&\n    y % 1 === 0 &&\n\
    \    z !== 0\n  );\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2,\
    \ 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpo04l6_6q.ts(21,5): error TS2367: This condition will
    always return ''true'' since the types ''number'' and ''""'' have no overlap.

    ../../../../../tmp/tmpo04l6_6q.ts(22,5): error TS2367: This condition will always
    return ''true'' since the types ''number'' and ''""'' have no overlap.

    ../../../../../tmp/tmpo04l6_6q.ts(23,5): error TS2367: This condition will always
    return ''true'' since the types ''number'' and ''""'' have no overlap.

    ../../../../../tmp/tmpo04l6_6q.ts(24,5): error TS2367: This condition will always
    return ''true'' since the types ''number'' and ''"."'' have no overlap.

    ../../../../../tmp/tmpo04l6_6q.ts(25,5): error TS2367: This condition will always
    return ''true'' since the types ''number'' and ''"."'' have no overlap.

    ../../../../../tmp/tmpo04l6_6q.ts(26,5): error TS2367: This condition will always
    return ''true'' since the types ''number'' and ''"."'' have no overlap.

    '
  timestamp: 1659978519
- exit_code: 1
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n  const a = Math.abs(x);\n  const b = Math.abs(y);\n\
    \  const c = Math.abs(z);\n  let sum = a + b + c;\n  if (sum === 0 || a === 0\
    \ && b === 0 && c === 0) {\n    return true;\n  }\n  if (a > b && a > c) {\n \
    \   return a === sum;\n  }\n  if (b > c && b > a) {\n    return b === sum;\n \
    \ }\n  return c === sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2,\
    \ 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmph_2j70nq.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmph_2j70nq.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978519
- exit_code: 1
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n    return typeof x === 'number' && typeof y === 'number'\
    \ && typeof z === 'number' && x + y + z === 6;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpm960vcpd.js:23:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpm960vcpd.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978519
- exit_code: 2
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n  return any_int__(x, y, z);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmphneel_6w.ts(14,10): error TS2552: Cannot find name
    ''any_int__''. Did you mean ''any_int''?

    '
  timestamp: 1659978519
- exit_code: 1
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n  return x === y || (x + y === z && x > y && x > z);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n\
    \  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpx2nn_jl4.js:19:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpx2nn_jl4.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978519
- exit_code: 1
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n    return (x == (x + y) || x == (x + z) || y == (x +\
    \ z) || y == (x + y) || z == (x + y) || z == (x + z) || x == (y + z) || x == (y\
    \ + y) || y == (y + z) || y == (y + x) || z == (y + x) || z == (y + y))\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n\
    \  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp3tzozpnt.js:21:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp3tzozpnt.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978519
- exit_code: 1
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n  if (typeof x !== 'number' || typeof y !== 'number'\
    \ || typeof z !== 'number') {\n    throw new Error(`Invalid arguments passed to\
    \ any_int()`);\n  }\n  if (x === y || x === z) {\n    return false;\n  }\n  return\
    \ x > y && x > z;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2,\
    \ 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp7ulqoczy.js:25:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp7ulqoczy.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978521
- exit_code: 1
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n    if (isNaN(x) || isNaN(y) || isNaN(z)) {\n       \
    \ return false;\n    }\n    var a = Math.floor(x), b = Math.floor(y), c = Math.floor(z);\n\
    \    return a + b <= c && a + c <= b + c && a * b <= c * c;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp4el3blkm.js:23:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp4el3blkm.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978521
- exit_code: 1
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n\tconst max: number = Math.max(x, y, z);\n\tconst min:\
    \ number = Math.min(x, y, z);\n\treturn (min === max);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpr6ron_lf.js:21:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpr6ron_lf.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978522
- exit_code: 1
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n  return typeof x === \"number\" && typeof y === \"number\"\
    \ && typeof z === \"number\" &&\n    (x === y || x === z || y === z);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n\
    \  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmppdzyfba_.js:20:12)\n    at\
    \ Object.<anonymous> (/tmp/tmppdzyfba_.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978522
- exit_code: 1
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n    if (isNaN(x) || isNaN(y) || isNaN(z)) {\n       \
    \ throw new TypeError('All numbers must be numeric');\n    }\n\n    if (Math.abs(x\
    \ - y) <= 1E-13 && Math.abs(y - z) <= 1E-13) {\n        return true;\n    }\n\n\
    \    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2,\
    \ 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpesh8ck05.js:25:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpesh8ck05.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978522
- exit_code: 1
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n\t\n\t//return true is the sum equals the other two\n\
    \treturn (x + y == z);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2,\
    \ 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpuk3p5baz.js:20:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpuk3p5baz.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978522
- exit_code: 1
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n  if (x < 0 || y < 0 || z < 0) {\n    return false\n\
    \  }\n  return x + y + z === (x * y * z)\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n\
    \  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpo_attnp1.js:26:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpo_attnp1.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978522
- exit_code: 1
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n    return ((x === 5 || x === 6) && y === 7 && (z ===\
    \ 2 || z === 3)) ||\n        ((x === 3 || x === 4) && y === 4 && (z === -2 ||\
    \ z === -1)) ||\n        ((x === 3.6 || x === -2) && y === -2 && (z === 2 || z\
    \ === 1)) ||\n        ((x === -3 || x === -4) && y === -4 && (z === -2 || z ===\
    \ -1)) ||\n        ((x === 3 || x === -4) && y === 4 && (z === 2 || z === -1));\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n\
    \  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpy0cew42s.js:23:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpy0cew42s.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978522
- exit_code: 1
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n  return x == y || x == z || y == z;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp8hu986rd.js:19:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp8hu986rd.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978522
- exit_code: 2
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n  const aIsInt = typeof x === \"number\" && !isNaN(x)\
    \ && typeof y === \"number\" && !isNaN(y) && typeof z === \"number\" && !isNaN(z);\n\
    \  const bIsInt = typeof x === \"number\" && !isNaN(x) && typeof y === \"number\"\
    \ && !isNaN(y) && typeof z === \"number\" && !isNaN(z);\n  if (aIsInt && bIsInt)\
    \ return aIsInt == z;\n  return aIsInt || bIsInt;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpmuimw2sl.ts(16,32): error TS2367: This condition
    will always return ''false'' since the types ''true'' and ''number'' have no overlap.

    '
  timestamp: 1659978522
- exit_code: 1
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n  return (x === x + y || x === x + z || x === y + z)\
    \ && x % 1 === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2,\
    \ 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpc3lfml_3.js:19:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpc3lfml_3.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978522
- exit_code: 2
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n  if (typeof x !== 'number' || typeof y !== 'number'\
    \ || typeof z !== 'number') {\n    console.warn('any_int only accepts three numbers')\n\
    \    return false\n  }\n  if (x !== parseInt(x) || y !== parseInt(y) || z !==\
    \ parseInt(z)) {\n    console.warn('any_int only accepts numbers of type number')\n\
    \    return false\n  }\n  if (x === y && x === z) {\n    console.warn('any_int\
    \ only accepts numbers of type number')\n    return false\n  }\n  return true\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n\
    \  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpj4gmecxs.ts(18,22): error TS2345: Argument of type
    ''number'' is not assignable to parameter of type ''string''.

    ../../../../../tmp/tmpj4gmecxs.ts(18,43): error TS2345: Argument of type ''number''
    is not assignable to parameter of type ''string''.

    ../../../../../tmp/tmpj4gmecxs.ts(18,64): error TS2345: Argument of type ''number''
    is not assignable to parameter of type ''string''.

    '
  timestamp: 1659978522
- exit_code: 2
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n  return typeof x === 'number' && typeof y === 'number'\
    \ && typeof z === 'number' &&\n    x !== 0 && y !== 0 && z !== 0 &&\n    x < y\
    \ && y < z && z < x &&\n    y === z || z === x || x === y;\n}\n</code></pre>\n\
    \        </article>\n    </section>\n\n\n\n\n\n\t\t\t\t</div>\n\n\t\t\t\t<div\
    \ class=\"clearfix\"></div>\n\t\t\t\t<footer>\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t<span\
    \ class=\"jsdoc-message\">\n\t\tDocumentation generated by <a href=\"https://github.com/jsdoc3/jsdoc\"\
    >JSDoc 3.3.2</a>\n\t\ton Wed Mar 19 2016 13:11:49 GMT+0100 (BST) using the <a\
    \ href=\"https://github.com/terryweiss/docstrap\">DocStrap template</a>.\n\t\t\
    </span>\n\t\t\t\t</footer>\n\t\t\t</div>\n\n\t\t\t\n\t\t\t<br clear=\"both\">\n\
    \t\t</div>\n\n\t</div>\n\t<script src=\"scripts/sunlight.js\"></script>\n\t<script\
    \ src=\"scripts/sunlight.javascript.js\"></script>\n\t<script src=\"scripts/sunlight-plugin.doclinks.js\"\
    ></script>\n\t<script src=\"scripts/sunlight-plugin.linenumbers.js\"></script>\n\
    \t<script src=\"scripts/sunlight-plugin.menu.js\"></script>\n\t<script src=\"\
    scripts/jquery.min.js\"></script>\n\t<script src=\"scripts/jquery.scrollTo.js\"\
    ></script>\n\t<script src=\"scripts/jquery.localScroll.js\"></script>\n\t<script\
    \ src=\"scripts/bootstrap.min.js\"></script>\n\n\n\n\t<script>  Sunlight.highlightAll({lineNumbers:,\
    \  showMenu: true, enableDoclinks :true}); </script>\n\n\t<script>\n\t\t$( function\
    \ () {\n\t\t\t$( \"#toc\" ).toc( {\n\t\t\t\tselectors   : \"h1,h2,h3,h4\",\n\t\
    \t\t\tshowAndHide : false,\n\t\t\t\tscrollTo    : 60\n\t\t\t} );\n\t\t\t$( \"\
    #toc>ul\" ).addClass( \"nav nav-pills nav-stacked\" );\n\t\t\t$( \"#main span[id^='toc']\"\
    \ ).addClass( \"toc-shim\" );\n\n\t\t} );\n\t</script>\n\n\t\n\n</body>\n</html>\n\
    \n<!--Navigation and Symbol Display-->\n\n\n<!--Google Analytics-->\n\n<script>\n\
    \t(function ( i, s, o, g, r, a, m ) {\n\t\ti['GoogleAnalyticsObject'] = r;\n\t\
    \ti[r] = i[r] || function () {\n\t\t\t(i[r].q = i[r].q || []).push( arguments\
    \ )\n\t\t}, i[r].l = 1 * new Date();\n\t\ta = s.createElement( o ),\n\t\t\tm =\
    \ s.getElementsByTagName( o )[0];\n\t\ta.async = 1;\n\t\ta.src = g;\n\t\tm.parentNode.insertBefore(\
    \ a, m )\n\t})( window, document, 'script', '//www.google-analytics.com/analytics.js',\
    \ 'ga' );\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2,\
    \ 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp1fbli5gg.ts(19,2): error TS1110: Type expected.

    ../../../../../tmp/tmp1fbli5gg.ts(20,10): error TS1110: Type expected.

    ../../../../../tmp/tmp1fbli5gg.ts(20,11): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmp1fbli5gg.ts(21,7): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmp1fbli5gg.ts(27,7): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmp1fbli5gg.ts(29,10): error TS1005: '';'' expected.

    ../../../../../tmp/tmp1fbli5gg.ts(29,15): error TS1005: ''{'' expected.

    ../../../../../tmp/tmp1fbli5gg.ts(29,28): error TS1110: Type expected.

    ../../../../../tmp/tmp1fbli5gg.ts(29,29): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmp1fbli5gg.ts(33,9): error TS1005: ''>'' expected.

    ../../../../../tmp/tmp1fbli5gg.ts(33,14): error TS1005: ''{'' expected.

    ../../../../../tmp/tmp1fbli5gg.ts(34,17): error TS1005: '';'' expected.

    ../../../../../tmp/tmp1fbli5gg.ts(34,27): error TS1005: '';'' expected.

    ../../../../../tmp/tmp1fbli5gg.ts(34,33): error TS1005: '';'' expected.

    ../../../../../tmp/tmp1fbli5gg.ts(34,78): error TS1005: '';'' expected.

    ../../../../../tmp/tmp1fbli5gg.ts(34,81): error TS1005: '';'' expected.

    ../../../../../tmp/tmp1fbli5gg.ts(34,85): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmp1fbli5gg.ts(35,6): error TS1005: '';'' expected.

    ../../../../../tmp/tmp1fbli5gg.ts(35,10): error TS1005: '';'' expected.

    ../../../../../tmp/tmp1fbli5gg.ts(35,14): error TS1005: '';'' expected.

    ../../../../../tmp/tmp1fbli5gg.ts(35,17): error TS1005: '';'' expected.

    ../../../../../tmp/tmp1fbli5gg.ts(35,22): error TS1005: '';'' expected.

    ../../../../../tmp/tmp1fbli5gg.ts(35,24): error TS1005: '';'' expected.

    ../../../../../tmp/tmp1fbli5gg.ts(35,27): error TS1005: '';'' expected.

    ../../../../../tmp/tmp1fbli5gg.ts(35,31): error TS1005: '';'' expected.

    ../../../../../tmp/tmp1fbli5gg.ts(35,46): error TS1005: '';'' expected.

    ../../../../../tmp/tmp1fbli5gg.ts(35,52): error TS1005: '';'' expected.

    ../../../../../tmp/tmp1fb'
  timestamp: 1659978522
- exit_code: 1
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n    return (typeof x === 'number') && (typeof y === 'number')\
    \ && (typeof z === 'number') && (x > 0) && \n           (y > 0) && \n        \
    \   (z > 0) && \n           (x < y) && \n           (x < z) && \n           (y\
    \ < z) && \n           (Math.abs(x - y) <= Math.abs(x - z)) && \n           (Math.abs(y\
    \ - z) <= Math.abs(x - y)) && \n           (Math.abs(z - x) <= Math.abs(y - z));\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n\
    \  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpec3hv6g9.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpec3hv6g9.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978522
- exit_code: 1
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n    return !isNaN(x) && !isNaN(y) && !isNaN(z) && z ===\
    \ ((x + y) + z);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2,\
    \ 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpmax_tn9r.js:19:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpmax_tn9r.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978522
- exit_code: 2
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n  if (isFinite(x) && isFinite(y) && isFinite(z)) {\n\
    \    return (isInt(x) && isInt(y) && isInt(z)) || (isInt(y) && isInt(x) && isInt(z))\
    \ || (isInt(z) && isInt(x) && isInt(y)) || (isInt(z) && isInt(y) && isInt(x));\n\
    \  } else {\n    return false;\n  }\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n\
    \  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpmzmef1l0.ts(15,13): error TS2304: Cannot find name
    ''isInt''.

    ../../../../../tmp/tmpmzmef1l0.ts(15,25): error TS2304: Cannot find name ''isInt''.

    ../../../../../tmp/tmpmzmef1l0.ts(15,37): error TS2304: Cannot find name ''isInt''.

    ../../../../../tmp/tmpmzmef1l0.ts(15,51): error TS2304: Cannot find name ''isInt''.

    ../../../../../tmp/tmpmzmef1l0.ts(15,63): error TS2304: Cannot find name ''isInt''.

    ../../../../../tmp/tmpmzmef1l0.ts(15,75): error TS2304: Cannot find name ''isInt''.

    ../../../../../tmp/tmpmzmef1l0.ts(15,89): error TS2304: Cannot find name ''isInt''.

    ../../../../../tmp/tmpmzmef1l0.ts(15,101): error TS2304: Cannot find name ''isInt''.

    ../../../../../tmp/tmpmzmef1l0.ts(15,113): error TS2304: Cannot find name ''isInt''.

    ../../../../../tmp/tmpmzmef1l0.ts(15,127): error TS2304: Cannot find name ''isInt''.

    ../../../../../tmp/tmpmzmef1l0.ts(15,139): error TS2304: Cannot find name ''isInt''.

    ../../../../../tmp/tmpmzmef1l0.ts(15,151): error TS2304: Cannot find name ''isInt''.

    '
  timestamp: 1659978522
- exit_code: 1
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n\treturn x === x + y || x === x + z || y === x + z ||\
    \ x === y + z || y === y + z || z === x + y || z === x + z || z === y + x;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n\
    \  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp9lyg4lf8.js:21:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp9lyg4lf8.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978522
- exit_code: 2
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n    return (x === z || x === y) && Number.isInteger(x);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n\
    \  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpy6dlpxh6.ts(14,43): error TS2339: Property ''isInteger''
    does not exist on type ''NumberConstructor''.

    '
  timestamp: 1659978522
- exit_code: 2
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n  if (is_integer(x) && is_integer(y) && is_integer(z))\
    \ {\n    return (\n      any_integer(x) || any_integer(y) || any_integer(z)\n\
    \    );\n  } else {\n    return false;\n  }\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpl9dvj809.ts(14,7): error TS2304: Cannot find name
    ''is_integer''.

    ../../../../../tmp/tmpl9dvj809.ts(14,24): error TS2304: Cannot find name ''is_integer''.

    ../../../../../tmp/tmpl9dvj809.ts(14,41): error TS2304: Cannot find name ''is_integer''.

    ../../../../../tmp/tmpl9dvj809.ts(16,7): error TS2304: Cannot find name ''any_integer''.

    ../../../../../tmp/tmpl9dvj809.ts(16,25): error TS2304: Cannot find name ''any_integer''.

    ../../../../../tmp/tmpl9dvj809.ts(16,43): error TS2304: Cannot find name ''any_integer''.

    '
  timestamp: 1659978522
- exit_code: 1
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n  const num = [x, y, z]\n  return num.every((v) => (v\
    \ %= 1) == 0)\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2,\
    \ 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpmoinl8d5.js:23:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpmoinl8d5.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978522
- exit_code: 1
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n    if (x === 0 && y === 0 && z === 0) {\n        return\
    \ false;\n    }\n    if (x === 0) {\n        return y === z && (x === y || z ===\
    \ 0);\n    }\n    if (y === 0) {\n        return x === z && (y === x || z ===\
    \ 0);\n    }\n    if (z === 0) {\n        return x === y && y === x && z === 0;\n\
    \    }\n    return x === y || x === z || y === z;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpsebmt7ek.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpsebmt7ek.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978522
- exit_code: 1
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n  return ((x + y + z) === (x + y + z));\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n\
    \  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpi84af36z.js:20:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpi84af36z.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978522
- exit_code: 1
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n\treturn !(x % z == 0 || (y % z == 0 && x % y == 0));\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n\
    \  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpz58407iu.js:19:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpz58407iu.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978522
- exit_code: 2
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n    return isInteger(x) && isInteger(y) && isInteger(z)\
    \ && x + y + z === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2,\
    \ 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp5574vfsa.ts(14,12): error TS2304: Cannot find name
    ''isInteger''.

    ../../../../../tmp/tmp5574vfsa.ts(14,28): error TS2304: Cannot find name ''isInteger''.

    ../../../../../tmp/tmp5574vfsa.ts(14,44): error TS2304: Cannot find name ''isInteger''.

    '
  timestamp: 1659978524
- exit_code: 1
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n    // Check if x is also equal to y (the sum)\n    if\
    \ (x + y == z) {\n        return true;\n    }\n    // Check if x is greater than\
    \ the sum of the other two\n    if (x > z) {\n        return false;\n    }\n \
    \   // Check if x is less than the sum of the other two\n    if (x < z) {\n  \
    \      return true;\n    }\n    // Check if x is equal to one of the two other\
    \ numbers\n    if (x == y) {\n        return true;\n    }\n    // Check if x is\
    \ equal to the sum of the other two, but one of them is negative and one is positive\n\
    \    if (y < z) {\n        if (x < y) {\n            return false;\n        }\
    \ else {\n            return true;\n        }\n    }\n    // Check if x is equal\
    \ to the sum of the other two, but one is negative and the other is positive\n\
    \    if (x < y) {\n        if (y < z) {\n            return false;\n        }\
    \ else {\n            return true;\n        }\n    }\n    // Not one of the numbers\
    \ is equal to the sum of the other two, return false\n    return false;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n\
    \  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpap7_waml.js:54:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpap7_waml.js:65:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978524
- exit_code: 1
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n  if (x === y && x === z) {\n    return true;\n  }\n\n\
    \  if (typeof x === 'string' && typeof y === 'string' && typeof z === 'string')\
    \ {\n    return true;\n  }\n\n  if (typeof x === 'string' && typeof y === 'number'\
    \ && typeof z === 'number') {\n    return false;\n  }\n\n  if (typeof x === 'number'\
    \ && typeof y === 'string' && typeof z === 'number') {\n    return false;\n  }\n\
    \n  if (typeof x === 'number' && typeof y === 'number' && typeof z === 'string')\
    \ {\n    return false;\n  }\n\n  return true;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp_2a4524u.js:35:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp_2a4524u.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978524
- exit_code: 1
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n\treturn (\n\t\tx === y + z\n\t\t||\n\t\tx === y - z\n\
    \t\t||\n\t\tx === -y + z\n\t\t||\n\t\tx === -y - z\n\t\t||\n\t\tx === z - y\n\t\
    \t||\n\t\tx === -z + y\n\t\t||\n\t\tx === -z - y\n\t);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmphxxoz4hj.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmphxxoz4hj.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978524
- exit_code: 2
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n\treturn isNumber(x) && isNumber(y) && isNumber(z) &&\
    \ isInteger(x) && isInteger(y) && isInteger(z) && x + y + z === 3;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n\
    \  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpuar7ky8g.ts(14,9): error TS2552: Cannot find name
    ''isNumber''. Did you mean ''Number''?

    ../../../../../tmp/tmpuar7ky8g.ts(14,24): error TS2552: Cannot find name ''isNumber''.
    Did you mean ''Number''?

    ../../../../../tmp/tmpuar7ky8g.ts(14,39): error TS2552: Cannot find name ''isNumber''.
    Did you mean ''Number''?

    ../../../../../tmp/tmpuar7ky8g.ts(14,54): error TS2304: Cannot find name ''isInteger''.

    ../../../../../tmp/tmpuar7ky8g.ts(14,70): error TS2304: Cannot find name ''isInteger''.

    ../../../../../tmp/tmpuar7ky8g.ts(14,86): error TS2304: Cannot find name ''isInteger''.

    '
  timestamp: 1659978524
- exit_code: 1
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n\tif (x < y && y < z && z < x) {\n\t\treturn true;\n\t\
    }\n\n\treturn false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2,\
    \ 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpj3qbi77z.js:22:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpj3qbi77z.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978524
- exit_code: 1
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n    if (typeof x !== 'number' || typeof y !== 'number'\
    \ || typeof z !== 'number') {\n        return false;\n    }\n    return (\n  \
    \      typeof x === 'number' &&\n        typeof y === 'number' &&\n        typeof\
    \ z === 'number' &&\n        x === +x &&\n        y === +y &&\n        z === +z\n\
    \    );\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2,\
    \ 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpcnhypevo.js:28:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpcnhypevo.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978524
- exit_code: 1
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n  // TODO: Add your own tests\n  return true;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n\
    \  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp6bljrx1y.js:21:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp6bljrx1y.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978524
- exit_code: 1
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n    return x === x && y === y && z === z;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n\
    \  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpuv7girym.js:20:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpuv7girym.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978524
- exit_code: 1
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n    if (x == z) {\n        return true;\n    }\n    if\
    \ (y != z) {\n        return false;\n    }\n    if (x % 1 != 0) {\n        return\
    \ true;\n    }\n    return false;\n}\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n\
    \  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp3kt4fzi4.js:28:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp3kt4fzi4.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978524
- exit_code: 1
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n  return (x === y || x === z && y === z) //check if all\
    \ three numbers are equal\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2,\
    \ 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpci5363zh.js:19:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpci5363zh.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978524
- exit_code: 1
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n  if (x > y && x > z) {\n    return (x === (x + y));\n\
    \  } else if (y > z) {\n    return (y === (y + z));\n  } else {\n    return (z\
    \ === (y + z));\n  }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2,\
    \ 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpwvc4ishd.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpwvc4ishd.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978524
- exit_code: 2
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n  if (is_number(x) && is_number(y) && is_number(z)) {\n\
    \    return x == y + z;\n  } else {\n    return false;\n  }\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpxv39w7on.ts(14,7): error TS2304: Cannot find name
    ''is_number''.

    ../../../../../tmp/tmpxv39w7on.ts(14,23): error TS2304: Cannot find name ''is_number''.

    ../../../../../tmp/tmpxv39w7on.ts(14,39): error TS2304: Cannot find name ''is_number''.

    '
  timestamp: 1659978524
- exit_code: 2
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n  if (!any_int_internal(x, y, z)) {\n    return any_int_internal(z,\
    \ y, x);\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n\
    \  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmphl3hcx2g.ts(14,8): error TS2304: Cannot find name
    ''any_int_internal''.

    ../../../../../tmp/tmphl3hcx2g.ts(15,12): error TS2304: Cannot find name ''any_int_internal''.

    '
  timestamp: 1659978524
- exit_code: 1
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n    return (x == y) || (x == z) || (y == z);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n\
    \  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpuiwjhrx8.js:19:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpuiwjhrx8.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978524
- exit_code: 2
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n  return any_number((x === null ? NaN : x), (y === null\
    \ ? NaN : y), (z === null ? NaN : z)) ? true : false;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpbiixn70h.ts(14,10): error TS2304: Cannot find name
    ''any_number''.

    '
  timestamp: 1659978524
- exit_code: 2
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n\treturn x === sum(x, y, z) && isInt(x) && isInt(y) &&\
    \ isInt(z);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2,\
    \ 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp_91a3gop.ts(14,15): error TS2304: Cannot find name
    ''sum''.

    ../../../../../tmp/tmp_91a3gop.ts(14,31): error TS2304: Cannot find name ''isInt''.

    ../../../../../tmp/tmp_91a3gop.ts(14,43): error TS2304: Cannot find name ''isInt''.

    ../../../../../tmp/tmp_91a3gop.ts(14,55): error TS2304: Cannot find name ''isInt''.

    '
  timestamp: 1659978524
- exit_code: 1
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n  return x == ((x + y) >>> 0) && x == ((x + z) >>> 0)\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n\
    \  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpxh6lskno.js:19:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpxh6lskno.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978524
- exit_code: 2
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n    if (x === 0 && y === 0 && z === 0) {\n        return\
    \ true;\n    }\n\n    const xInt = isInt(x);\n    const yInt = isInt(y);\n   \
    \ const zInt = isInt(z);\n    return xInt && yInt && zInt;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpkueti19e.ts(18,18): error TS2304: Cannot find name
    ''isInt''.

    ../../../../../tmp/tmpkueti19e.ts(19,18): error TS2304: Cannot find name ''isInt''.

    ../../../../../tmp/tmpkueti19e.ts(20,18): error TS2304: Cannot find name ''isInt''.

    '
  timestamp: 1659978524
- exit_code: 2
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n  return isInt(x) && isInt(y) && isInt(z) && isInt(x\
    \ + y + z);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2,\
    \ 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpihw9fbuv.ts(14,10): error TS2304: Cannot find name
    ''isInt''.

    ../../../../../tmp/tmpihw9fbuv.ts(14,22): error TS2304: Cannot find name ''isInt''.

    ../../../../../tmp/tmpihw9fbuv.ts(14,34): error TS2304: Cannot find name ''isInt''.

    ../../../../../tmp/tmpihw9fbuv.ts(14,46): error TS2304: Cannot find name ''isInt''.

    '
  timestamp: 1659978524
- exit_code: 1
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n    if (x == y || x == z) return true;\n    if (y ==\
    \ z) return true;\n    return false;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n\
    \  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpxkwig8wc.js:23:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpxkwig8wc.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978524
- exit_code: 1
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n    return x === y || x === z || y === z;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n\
    \  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpm2h80irv.js:19:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpm2h80irv.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978524
- exit_code: 1
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n  if (isNaN(x) || isNaN(y) || isNaN(z)) {\n    return\
    \ false;\n  }\n  return isFinite(x) && isFinite(y) && isFinite(z) && x + y + z\
    \ !== 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2,\
    \ 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpar2csq5j.js:23:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpar2csq5j.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978524
- exit_code: 1
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n\treturn ((typeof x === 'number') && (typeof y === 'number')\
    \ && (typeof z === 'number') &&\n\t\t(x === ((x + y) + z)));\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpoyyt28af.js:20:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpoyyt28af.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978526
- exit_code: 1
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n  // Write your code here\n  return (x == z || y == z\
    \ || x == y || y == x) && (x % 1 === 0 && y % 1 === 0) && Math.floor(x / 1) ===\
    \ Math.floor(y / 1);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2,\
    \ 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmprb7efnqp.js:20:12)\n    at\
    \ Object.<anonymous> (/tmp/tmprb7efnqp.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978527
- exit_code: 1
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n    return (\n        ((typeof x === \"number\") && (typeof\
    \ y === \"number\") && (typeof z === \"number\")) &&\n        ((x == y) || //\
    \ if all numbers are equal\n            ((x == 0) && (y == z)) || // if one is\
    \ a zero and the other is the same value\n            ((x == 0) && (y != z)) ||\
    \ // if one is a zero and the other is different.\n            ((x != 0) && (y\
    \ == z)) // if one is not zero and the other is the same value.\n        )\n \
    \   );\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2,\
    \ 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpiiel5i37.js:24:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpiiel5i37.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978527
- exit_code: 1
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n    if (isNaN(x) || isNaN(y) || isNaN(z)) {\n       \
    \ return false;\n    }\n\n    if (x <= y && y <= z) {\n        return true;\n\
    \    }\n\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2,\
    \ 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpn7hm98bc.js:25:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpn7hm98bc.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978527
- exit_code: 2
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n  return (x === y || (x !== x && y !== y) && z !== z\
    \ && x >= 0 && y >= 0 && x >= y && x <= z && y <= z && Number.isInteger(x)) ?\
    \ true : false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2,\
    \ 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpf9kjypfy.ts(14,114): error TS2339: Property ''isInteger''
    does not exist on type ''NumberConstructor''.

    '
  timestamp: 1659978527
- exit_code: 2
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n\treturn (typeof x === \"number\" && typeof y === \"\
    number\" && typeof z === \"number\" && \n\t\tNumber.isInteger(x) && Number.isInteger(y)\
    \ && Number.isInteger(z));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2,\
    \ 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmphqzledfx.ts(15,10): error TS2339: Property ''isInteger''
    does not exist on type ''NumberConstructor''.

    ../../../../../tmp/tmphqzledfx.ts(15,33): error TS2339: Property ''isInteger''
    does not exist on type ''NumberConstructor''.

    ../../../../../tmp/tmphqzledfx.ts(15,56): error TS2339: Property ''isInteger''
    does not exist on type ''NumberConstructor''.

    '
  timestamp: 1659978527
- exit_code: 1
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n\treturn x >= 0 && y >= 0 && z >= 0 &&\n\t\t(x + y +\
    \ z) === (x * y * z);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2,\
    \ 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpw3jjqc55.js:24:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpw3jjqc55.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978527
- exit_code: 1
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n  if (x >= y) {\n    return z == x;\n  } else {\n   \
    \ return z == x || z == y;\n  }\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n\
    \  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpnj8e23nj.js:24:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpnj8e23nj.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978527
- exit_code: 1
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n  // Only use integer checking for now.\n  // Remember,\
    \ the numbers might be fractional or floats.\n  // Only use integer checking for\
    \ now.\n  return typeof x === 'number' && typeof y === 'number' && typeof z ===\
    \ 'number' &&\n    x >= 0 && y >= 0 && z >= 0 && x < 1000 && y < 1000 && z < 1000;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n\
    \  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpye84suzt.js:24:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpye84suzt.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978527
- exit_code: 1
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n  x = Math.floor(x)\n  y = Math.floor(y)\n  z = Math.floor(z)\n\
    \  if (x === y && y === z) return true\n  if (x < 0 || y < 0 || z < 0) return\
    \ false\n  return x + y + z === 5\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n\
    \  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpcoeg7p9l.js:26:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpcoeg7p9l.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978527
- exit_code: 1
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n    return ((x === x && y === y) || z === z);\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n\
    \  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpbnlkxhi4.js:20:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpbnlkxhi4.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978527
- exit_code: 1
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n    var ret: boolean = false\n    //If one or both of\
    \ the numbers are NaN, then return false.\n    if (isNaN(x) || isNaN(y) || isNaN(z)\
    \ || isNaN(x) || isNaN(y) || isNaN(z)) {\n        return ret\n    }\n    //If\
    \ one of the numbers is NaN, return false.\n    if (isNaN(x) || isNaN(y)) {\n\
    \        return ret\n    }\n    if (x > y || y > z) {\n        return ret\n  \
    \  }\n    //If the sum of the two numbers is NaN, return false.\n    if (isNaN(x)\
    \ || isNaN(y) || isNaN(z)) {\n        return ret\n    }\n    //If the sum of the\
    \ two numbers is 0, return false.\n    if (x === 0 || y === 0 || z === 0) {\n\
    \        return ret\n    }\n    //If the sum of the two numbers is +Infinity or\
    \ -Infinity, return false.\n    if (x === Infinity || y === Infinity || z ===\
    \ Infinity) {\n        return ret\n    }\n    //If all the numbers are of the\
    \ same sign, return true.\n    if (x === y && x === z) {\n        return ret\n\
    \    }\n    //If either the first or the second number is a NaN, return false.\n\
    \    if (isNaN(x) || isNaN(y) || isNaN(z)) {\n        return ret\n    }\n    //If\
    \ any of the numbers are integers, return true.\n    if (x % 1 === 0 || y % 1\
    \ === 0 || z % 1 === 0) {\n        ret = true;\n    }\n    return ret;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n\
    \  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpv_2mlyp5.js:55:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpv_2mlyp5.js:66:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978527
- exit_code: 2
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n    const sum = x + y + z;\n    return typeof sum ===\
    \ 'number' && sum % 1 === 0 && sum >= 0 && sum < Number.MAX_SAFE_INTEGER;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n\
    \  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp1cs9zqd8.ts(15,81): error TS2339: Property ''MAX_SAFE_INTEGER''
    does not exist on type ''NumberConstructor''.

    '
  timestamp: 1659978527
- exit_code: 1
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n    return x === y || x === z || y === z;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n\
    \  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpm2h80irv.js:19:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpm2h80irv.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978524
- exit_code: 1
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n    if (x < 0 || y < 0 || z < 0) {\n        return false;\n\
    \    }\n    return (x === y || x === z) && ((x - y) === (z - x));\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n\
    \  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp1bej446x.js:22:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp1bej446x.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978527
- exit_code: 2
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n    let a = typeof x === \"number\" ? x : parseInt(x,\
    \ 10);\n    let b = typeof y === \"number\" ? y : parseInt(y, 10);\n    let c\
    \ = typeof z === \"number\" ? z : parseInt(z, 10);\n    if (isNaN(a) || isNaN(b)\
    \ || isNaN(c)) {\n        return false;\n    }\n    return a + b + c === parseInt(a\
    \ + b + c, 10);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2,\
    \ 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpbh0gzgqd.ts(20,35): error TS2345: Argument of type
    ''number'' is not assignable to parameter of type ''string''.

    '
  timestamp: 1659978527
- exit_code: 1
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n    return x == y || x == z || y == z;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n\
    \  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp2xdgzsre.js:19:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp2xdgzsre.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978519
- exit_code: 1
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n  let ix = Math.floor(x);\n  let iy = Math.floor(y);\n\
    \  let iz = Math.floor(z);\n  if (ix == iy && ix == iz) {\n    return true;\n\
    \  } else {\n    return false;\n  }\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n\
    \  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpo01auzfh.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpo01auzfh.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978527
- exit_code: 1
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n    // Only accept integers\n    if (isNaN(x) || isNaN(y)\
    \ || isNaN(z)) return false;\n    return (x === Infinity || x === -Infinity) ||\n\
    \        (y === Infinity || y === -Infinity) ||\n        (z === Infinity || z\
    \ === -Infinity);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2,\
    \ 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp8qyrag2o.js:24:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp8qyrag2o.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978527
- exit_code: 1
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n\tif (x === y || x === z) {\n\t\treturn true;\n\t} else\
    \ if (x > y && x > z) {\n\t\treturn true;\n\t} else if (x < y && x < z) {\n\t\t\
    return true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmphxb8mpue.js:30:12)\n    at\
    \ Object.<anonymous> (/tmp/tmphxb8mpue.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978527
- exit_code: 2
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n    if (typeof x !== 'number' || typeof y !== 'number'\
    \ || typeof z !== 'number') {\n        return false;\n    }\n    return x ===\
    \ x | y === y | z === z;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2,\
    \ 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpkevmthd2.ts(17,5): error TS2322: Type ''number''
    is not assignable to type ''boolean''.

    ../../../../../tmp/tmpkevmthd2.ts(17,12): error TS2447: The ''|'' operator is
    not allowed for boolean types. Consider using ''||'' instead.

    ../../../../../tmp/tmpkevmthd2.ts(17,32): error TS2363: The right-hand side of
    an arithmetic operation must be of type ''any'', ''number'', ''bigint'' or an
    enum type.

    '
  timestamp: 1659978527
- exit_code: 2
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n    return ((isInteger(x) && isInteger(y) && isInteger(z))\
    \ || (isInteger(y) && isInteger(z) && isInteger(x)) || (isInteger(z) && isInteger(x)\
    \ && isInteger(y)))\n    && x != '' && y != '' && z != '';\n}\n</code>\n<|/ a\
    \ |>\n<| c |>\nthis works with integers but not decimals, e.g. any_int(3.6, -2.2,\
    \ 2) would return true. I've updated my answer with an example to show this.\n\
    <|/ c |>\n<| a dscore=1 tags=c#,javascript,integer,.net |>\n<code>\nstatic bool\
    \ IsInteger(string str)\n{\n    double result;\n    bool isDouble = true;\n  \
    \  if (!double.TryParse(str, out result))\n    {\n        isDouble = false;\n\
    \    }\n    return isDouble && result >= 0;\n}\n</code>\n<|/ a |>\n<| a tags=c#,javascript,integer,.net\
    \ |>\nThe answer from is ok, but i think it is better to write it like this:\n\
    <code>\nstatic bool IsInteger(string str) {\n    double result;\n    bool isDouble\
    \ = true;\n    if (!double.TryParse(str, out result)) {\n        isDouble = false;\n\
    \    }\n    return isDouble && result >= 0;\n}\n</code>\n<|/ a dscore=0 |>\n<|\
    \ c |>\nNot sure why, but this returns false with values liken\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n\
    \  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpx0m26k1_.ts(17,2): error TS1110: Type expected.

    ../../../../../tmp/tmpx0m26k1_.ts(17,3): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpx0m26k1_.ts(18,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpx0m26k1_.ts(18,4): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpx0m26k1_.ts(19,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpx0m26k1_.ts(19,7): error TS1109: Expression expected.

    ../../../../../tmp/tmpx0m26k1_.ts(20,6): error TS1005: '';'' expected.

    ../../../../../tmp/tmpx0m26k1_.ts(20,12): error TS1005: '';'' expected.

    ../../../../../tmp/tmpx0m26k1_.ts(20,17): error TS1005: ''('' expected.

    ../../../../../tmp/tmpx0m26k1_.ts(20,26): error TS1005: '')'' expected.

    ../../../../../tmp/tmpx0m26k1_.ts(20,30): error TS1005: '';'' expected.

    ../../../../../tmp/tmpx0m26k1_.ts(20,34): error TS1005: '';'' expected.

    ../../../../../tmp/tmpx0m26k1_.ts(20,71): error TS1005: '';'' expected.

    ../../../../../tmp/tmpx0m26k1_.ts(20,77): error TS1005: '';'' expected.

    ../../../../../tmp/tmpx0m26k1_.ts(20,91): error TS1005: '';'' expected.

    ../../../../../tmp/tmpx0m26k1_.ts(20,142): error TS1002: Unterminated string literal.

    ../../../../../tmp/tmpx0m26k1_.ts(21,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpx0m26k1_.ts(21,4): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpx0m26k1_.ts(22,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpx0m26k1_.ts(22,6): error TS1005: '';'' expected.

    ../../../../../tmp/tmpx0m26k1_.ts(22,15): error TS1005: '';'' expected.

    ../../../../../tmp/tmpx0m26k1_.ts(22,21): error TS1127: Invalid character.

    ../../../../../tmp/tmpx0m26k1_.ts(22,22): error TS1128: Declaration or statement
    expected.

    ../../../../../tmp/tmpx0m26k1_.ts(22,42): error TS1109: Expression expected.

    ../../../../../tmp/tmpx0m26k1_.ts(22,48): error TS1109: Expression expected.

    ../../../../../tmp/tmpx0m26k1_.ts(24,8): error TS1005: '';'' expected.

    ../../../../../tmp/tmpx0m26k1_.ts(24,13): error TS1005: '';'' expecte'
  timestamp: 1659978527
- exit_code: 2
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n  if (!Number.isInteger(x) || !Number.isInteger(y) ||\
    \ !Number.isInteger(z)) {\n    return false;\n  }\n  if (x + y !== z || x < y\
    \ || y < z || x > z) {\n    return false;\n  }\n  return true;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmptdevx5lg.ts(14,15): error TS2339: Property ''isInteger''
    does not exist on type ''NumberConstructor''.

    ../../../../../tmp/tmptdevx5lg.ts(14,39): error TS2339: Property ''isInteger''
    does not exist on type ''NumberConstructor''.

    ../../../../../tmp/tmptdevx5lg.ts(14,63): error TS2339: Property ''isInteger''
    does not exist on type ''NumberConstructor''.

    '
  timestamp: 1659978527
- exit_code: 1
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n  if (x === y) return true;\n  if (x === z) return true;\n\
    \  if (y === z) return true;\n  if (isNaN(x) || isNaN(y) || isNaN(z)) return false;\n\
    \  if (x > y && x > z) return true;\n  if (y > z && x > y) return true;\n  return\
    \ false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2,\
    \ 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpyi4ov5x6.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpyi4ov5x6.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978527
- exit_code: 1
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n    if (typeof x !== \"number\" || typeof y !== \"number\"\
    \ || typeof z !== \"number\") {\n        throw new Error(\"x, y, and z must be\
    \ numbers\");\n    }\n    return (\n        typeof x === \"number\" && typeof\
    \ y === \"number\" && typeof z === \"number\"\n    );\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpxbv67n3o.js:23:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpxbv67n3o.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978527
- exit_code: 2
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n    return Math.abs(z - y + x) === Math.abs(x - y) &&\
    \ Number.isInteger(z);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2,\
    \ 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpfs0oc73r.ts(14,62): error TS2339: Property ''isInteger''
    does not exist on type ''NumberConstructor''.

    '
  timestamp: 1659978529
- exit_code: 1
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n  return (typeof x === \"number\" && typeof y === \"\
    number\" && typeof z === \"number\") &&\n      (x >= 0 && x <= 20) && (y >= 0\
    \ && y <= 20) && (z >= 0 && z <= 20);\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n\
    \  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpxhwaz5tm.js:21:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpxhwaz5tm.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978529
- exit_code: 1
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n  let sum = (x + y + z);\n\n  return sum === (x + y +\
    \ z) && typeof x === \"number\" && typeof y === \"number\" && typeof z === \"\
    number\";\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2,\
    \ 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpqhz96se4.js:21:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpqhz96se4.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978529
- exit_code: 1
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n  return ((x+y+z) === 3);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmphhhk16o0.js:19:12)\n    at\
    \ Object.<anonymous> (/tmp/tmphhhk16o0.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978529
- exit_code: 2
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n  x = x|0; y = y|0; z = z|0;\n  return x == y ? z !=\
    \ 0 || z != 0xFFFFFFFF : x == z ? y == 0xFFFFFFFF : y == z;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpzk9r3s1x.ts(15,29): error TS2367: This condition
    will always return ''true'' since the types ''0'' and ''4294967295'' have no overlap.

    '
  timestamp: 1659978529
- exit_code: 1
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n  return x === (x + y + z) && x === (x + y) && x ===\
    \ x && x === z;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2,\
    \ 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpna0uoprn.js:19:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpna0uoprn.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978529
- exit_code: 1
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n    return x >= y && x <= z;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpvvn0u191.js:19:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpvvn0u191.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978529
- exit_code: 1
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n\treturn ((x === y) || (x === z) || (y === z));\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n\
    \  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpk102g_tx.js:19:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpk102g_tx.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978529
- exit_code: 1
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n\tif (\n\t\ttypeof x !== \"number\" ||\n\t\ttypeof y\
    \ !== \"number\" ||\n\t\ttypeof z !== \"number\"\n\t) {\n\t\treturn false;\n\t\
    }\n\treturn x === y || x === z || y === z;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n\
    \  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp68l_9trc.js:24:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp68l_9trc.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978529
- exit_code: 1
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n  return (x === x && y === y && z === z && x === Math.floor(x)\
    \ && y === Math.floor(y) && z === Math.floor(z)) ||\n    (x === x && y === y &&\
    \ z === z && x === Math.floor(x) && y === Math.floor(y) && z === Math.floor(z)\
    \ && x >= 0 && y >= 0 && z >= 0);\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n\
    \  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpwh1ekp9n.js:23:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpwh1ekp9n.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978529
- exit_code: 2
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n    if ((isInteger(x) && isInteger(y) && isInteger(z))\
    \ || (isInteger(x) && isInteger(z) && isInteger(y)) || (isInteger(y) && isInteger(z)\
    \ && isInteger(x))) {\n        const zs: number[] = [];\n        zs.push(z);\n\
    \        zs.push(y);\n        zs.push(x);\n        return zs.some((v) => v ===\
    \ (z + y + x));\n    }\n    return false;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n\
    \  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp7ru777rw.ts(14,10): error TS2304: Cannot find name
    ''isInteger''.

    ../../../../../tmp/tmp7ru777rw.ts(14,26): error TS2304: Cannot find name ''isInteger''.

    ../../../../../tmp/tmp7ru777rw.ts(14,42): error TS2304: Cannot find name ''isInteger''.

    ../../../../../tmp/tmp7ru777rw.ts(14,60): error TS2304: Cannot find name ''isInteger''.

    ../../../../../tmp/tmp7ru777rw.ts(14,76): error TS2304: Cannot find name ''isInteger''.

    ../../../../../tmp/tmp7ru777rw.ts(14,92): error TS2304: Cannot find name ''isInteger''.

    ../../../../../tmp/tmp7ru777rw.ts(14,110): error TS2304: Cannot find name ''isInteger''.

    ../../../../../tmp/tmp7ru777rw.ts(14,126): error TS2304: Cannot find name ''isInteger''.

    ../../../../../tmp/tmp7ru777rw.ts(14,142): error TS2304: Cannot find name ''isInteger''.

    '
  timestamp: 1659978529
- exit_code: 2
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n  return (x == sum(x, y, z) && is_int(y) && is_int(z));\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n\
    \  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpnxptnb_n.ts(14,16): error TS2304: Cannot find name
    ''sum''.

    ../../../../../tmp/tmpnxptnb_n.ts(14,32): error TS2304: Cannot find name ''is_int''.

    ../../../../../tmp/tmpnxptnb_n.ts(14,45): error TS2304: Cannot find name ''is_int''.

    '
  timestamp: 1659978529
- exit_code: 1
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n\treturn x === x && y === y && z === z;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n\
    \  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp2vvf265b.js:20:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp2vvf265b.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978529
- exit_code: 2
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n    return (typeof x === \"number\" && typeof y === \"\
    number\" && typeof z === \"number\") && Number.isInteger(x) && Number.isInteger(y)\
    \ && Number.isInteger(z) && x + y + z === Number.parseInt(x + y + z, 10);\n}\n\
    </code>\n<|/ a tags=typescript,typechecking,function |>\n<| c |>\nThis doesn't\
    \ work for negative numbers.\n<|/ c |>\n<| c |>\nYes, I agree. The original question\
    \ did not specifically ask for negative numbers, but I thought it was a good idea\
    \ in case someone would want to add this feature without changing the original\
    \ code. I'll try to fix it.\n<|/ c |>\n<| c |>\nStill doesn't work for negative\
    \ numbers.\n<|/ c |>\n<| c |>\nIt does, I tested it. What are you talking about?\n\
    <|/ c |>\n<| c |>\nIt does not work for negative numbers. It also does not work\
    \ with negative numbers converted to strings (I did it myself on TypeScript playground).\n\
    <|/ c |>\n<| a dscore=3 tags=typescript,typechecking,function |>\nHere is another\
    \ version using TypeScript's as keyword and logical operators:\n<code>\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n\
    \  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp9pnpcavp.ts(16,2): error TS1110: Type expected.

    ../../../../../tmp/tmp9pnpcavp.ts(16,3): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmp9pnpcavp.ts(17,2): error TS1109: Expression expected.

    ../../../../../tmp/tmp9pnpcavp.ts(17,4): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmp9pnpcavp.ts(18,2): error TS1109: Expression expected.

    ../../../../../tmp/tmp9pnpcavp.ts(18,7): error TS1109: Expression expected.

    ../../../../../tmp/tmp9pnpcavp.ts(19,6): error TS1005: '';'' expected.

    ../../../../../tmp/tmp9pnpcavp.ts(19,11): error TS1005: '';'' expected.

    ../../../../../tmp/tmp9pnpcavp.ts(19,40): error TS1002: Unterminated string literal.

    ../../../../../tmp/tmp9pnpcavp.ts(20,2): error TS1109: Expression expected.

    ../../../../../tmp/tmp9pnpcavp.ts(20,4): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmp9pnpcavp.ts(21,2): error TS1109: Expression expected.

    ../../../../../tmp/tmp9pnpcavp.ts(21,7): error TS1109: Expression expected.

    ../../../../../tmp/tmp9pnpcavp.ts(22,8): error TS1005: '';'' expected.

    ../../../../../tmp/tmp9pnpcavp.ts(22,19): error TS1005: '';'' expected.

    ../../../../../tmp/tmp9pnpcavp.ts(22,28): error TS1005: '';'' expected.

    ../../../../../tmp/tmp9pnpcavp.ts(22,37): error TS1005: '';'' expected.

    ../../../../../tmp/tmp9pnpcavp.ts(22,41): error TS1005: '';'' expected.

    ../../../../../tmp/tmp9pnpcavp.ts(22,45): error TS1005: '';'' expected.

    ../../../../../tmp/tmp9pnpcavp.ts(22,58): error TS1005: '';'' expected.

    ../../../../../tmp/tmp9pnpcavp.ts(22,62): error TS1005: '';'' expected.

    ../../../../../tmp/tmp9pnpcavp.ts(22,66): error TS1005: ''('' expected.

    ../../../../../tmp/tmp9pnpcavp.ts(22,75): error TS1005: '';'' expected.

    ../../../../../tmp/tmp9pnpcavp.ts(22,88): error TS1005: '';'' expected.

    ../../../../../tmp/tmp9pnpcavp.ts(22,90): error TS1005: '')'' expected.

    ../../../../../tmp/tmp9pnpcavp.ts(22,98): error TS1005: '';'' expected.

    ../../../../../tmp/tmp9pnpcavp.ts(22,101): error TS1005: '';'' expected.

    ../../../../../tmp/tmp9pnpcavp'
  timestamp: 1659978529
- exit_code: 2
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n    if (\n        typeof x === 'number' &&\n        typeof\
    \ y === 'number' &&\n        typeof z === 'number'\n    ) {\n        if (\n  \
    \          typeof x === 'string' &&\n            typeof y === 'string' &&\n  \
    \          typeof z === 'string'\n        ) {\n            return x.toLowerCase()\
    \ === y.toLowerCase() && x.toLowerCase() === z.toLowerCase();\n        }\n   \
    \     if (\n            typeof x === 'string' &&\n            typeof y === 'string'\
    \ &&\n            typeof z === 'number'\n        ) {\n            return x.toLowerCase()\
    \ === y.toLowerCase() && z === parseInt(z);\n        }\n        if (\n       \
    \     typeof x === 'number' &&\n            typeof y === 'string' &&\n       \
    \     typeof z === 'number'\n        ) {\n            return x === parseInt(y)\
    \ && z === parseInt(z);\n        }\n        if (\n            typeof x === 'number'\
    \ &&\n            typeof y === 'string' &&\n            typeof z === 'string'\n\
    \        ) {\n            return x === parseInt(y) && z === parseInt(z);\n   \
    \     }\n    }\n\n    return false;\n}\n</code>\n<|/ a tags=typescript,typescript-generics,javascript\
    \ dscore=3 |>\n<| a dscore=1 |>\nHere is another solution by implementing IEqualityComparer\
    \ for any type:\n<code>\ninterface IEqualityComparer<T> {\n    equals<T>(item:\
    \ T): boolean;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2,\
    \ 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp747k9asq.ts(51,2): error TS1110: Type expected.

    ../../../../../tmp/tmp747k9asq.ts(51,3): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmp747k9asq.ts(52,2): error TS1109: Expression expected.

    ../../../../../tmp/tmp747k9asq.ts(52,4): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmp747k9asq.ts(53,2): error TS1109: Expression expected.

    ../../../../../tmp/tmp747k9asq.ts(53,6): error TS1005: '';'' expected.

    ../../../../../tmp/tmp747k9asq.ts(53,16): error TS1109: Expression expected.

    ../../../../../tmp/tmp747k9asq.ts(54,6): error TS1005: '';'' expected.

    ../../../../../tmp/tmp747k9asq.ts(54,9): error TS1005: '';'' expected.

    ../../../../../tmp/tmp747k9asq.ts(54,17): error TS1005: '';'' expected.

    ../../../../../tmp/tmp747k9asq.ts(54,26): error TS1005: '';'' expected.

    ../../../../../tmp/tmp747k9asq.ts(54,29): error TS1005: '';'' expected.

    ../../../../../tmp/tmp747k9asq.ts(54,42): error TS1005: '';'' expected.

    ../../../../../tmp/tmp747k9asq.ts(54,60): error TS1005: '';'' expected.

    ../../../../../tmp/tmp747k9asq.ts(54,64): error TS1005: ''('' expected.

    ../../../../../tmp/tmp747k9asq.ts(54,68): error TS1005: '';'' expected.

    ../../../../../tmp/tmp747k9asq.ts(54,72): error TS1005: '';'' expected.

    ../../../../../tmp/tmp747k9asq.ts(56,11): error TS1005: '';'' expected.

    '
  timestamp: 1659978529
- exit_code: 1
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n  return x === x + y || x === x + z || x === y + z ||\
    \ y === x + z || y === y + z || z === x + y || z === y + x;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpn7ybo7sk.js:21:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpn7ybo7sk.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978529
- exit_code: 1
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n  return ((x | 0) + (y | 0) + (z | 0) === (x+y+z));\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n\
    \  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmplrta8pk2.js:22:12)\n    at\
    \ Object.<anonymous> (/tmp/tmplrta8pk2.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978529
- exit_code: 1
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n    if (x == y) return z === x;\n    if (x == z) return\
    \ z === y;\n    if (y == z) return x === y;\n    return false;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpt73qyj5t.js:25:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpt73qyj5t.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978529
- exit_code: 2
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n  x = parseInt(x);\n  y = parseInt(y);\n  z = parseInt(z);\n\
    \  if (z == undefined || x === undefined || y === undefined) {\n    throw new\
    \ Error('All arguments must be numbers.');\n  }\n  const result = x === y || x\
    \ === z;\n  return result && x % 1 === 0 && y % 1 === 0 && z % 1 === 0;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n\
    \  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpku9e0j81.ts(14,16): error TS2345: Argument of type
    ''number'' is not assignable to parameter of type ''string''.

    ../../../../../tmp/tmpku9e0j81.ts(15,16): error TS2345: Argument of type ''number''
    is not assignable to parameter of type ''string''.

    ../../../../../tmp/tmpku9e0j81.ts(16,16): error TS2345: Argument of type ''number''
    is not assignable to parameter of type ''string''.

    '
  timestamp: 1659978529
- exit_code: 2
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n\treturn ((typeof x == \"number\") &&\n\t\t(typeof y\
    \ == \"number\") &&\n\t\t(typeof z == \"number\") &&\n\t\t((x != 0) && ((x % y)\
    \ == 0) &&\n\t\t(y == 0) &&\n\t\t((y != 0) && ((y % z) == 0) &&\n\t\t(z == 0)\
    \ &&\n\t\t((z != 0) && ((z % x) == 0) &&\n\t\t((x % z) == 0) &&\n\t\t((x % y)\
    \ == 0) &&\n\t\t((y % x) == 0) &&\n\t\t((z % y) == 0) &&\n\t\t((z % z) == 0) &&\n\
    \t\t((x % z) == 0) &&\n\t\t((x % y) == 0) &&\n\t\t((y % z) == 0) &&\n\t\t((y %\
    \ x) == 0) &&\n\t\t((z % y) == 0) &&\n\t\t((z % z) == 0))\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpca285gg_.ts(33,1): error TS1005: '')'' expected.

    '
  timestamp: 1659978529
- exit_code: 1
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n  return x >= 0 &&\n         y >= 0 &&\n         z >=\
    \ 0 &&\n         x < z &&\n         y < z &&\n         x < y;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp8ild3ttf.js:24:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp8ild3ttf.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978530
- exit_code: 2
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n  return x === sum(x, y, z);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpw5fafo_j.ts(14,16): error TS2304: Cannot find name
    ''sum''.

    '
  timestamp: 1659978529
- exit_code: 1
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n    if (typeof x === \"number\" && typeof y === \"number\"\
    \ && typeof z === \"number\") {\n        return any_int(x + y, x + z, y + z);\n\
    \    }\n    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2,\
    \ 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmppuv0xbuo.js:14\n    if (typeof x === \"number\" && typeof y ===\
    \ \"number\" && typeof z === \"number\") {\n    ^\n\nRangeError: Maximum call\
    \ stack size exceeded\n    at any_int (/tmp/tmppuv0xbuo.js:14:5)\n    at any_int\
    \ (/tmp/tmppuv0xbuo.js:15:16)\n    at any_int (/tmp/tmppuv0xbuo.js:15:16)\n  \
    \  at any_int (/tmp/tmppuv0xbuo.js:15:16)\n    at any_int (/tmp/tmppuv0xbuo.js:15:16)\n\
    \    at any_int (/tmp/tmppuv0xbuo.js:15:16)\n    at any_int (/tmp/tmppuv0xbuo.js:15:16)\n\
    \    at any_int (/tmp/tmppuv0xbuo.js:15:16)\n    at any_int (/tmp/tmppuv0xbuo.js:15:16)\n\
    \    at any_int (/tmp/tmppuv0xbuo.js:15:16)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978530
- exit_code: 1
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n  return x === y || x === z || y === z;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n\
    \  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpi6lp5jn4.js:19:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpi6lp5jn4.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978531
- exit_code: 1
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n  return Math.floor(x) === x && Math.floor(y) === y &&\
    \ Math.floor(z) === z;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2,\
    \ 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpy691ov45.js:22:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpy691ov45.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978531
- exit_code: 1
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n    return x === (x + y) || x === (x + z) || y === (z\
    \ + x) || y === (z + y) || z === (x + y) || z === (x + z) || x === (y + z);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n\
    \  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpnq5feogy.js:21:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpnq5feogy.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978532
- exit_code: 2
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n\treturn x === sum(x, y, z);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp3jx6qufh.ts(14,15): error TS2304: Cannot find name
    ''sum''.

    '
  timestamp: 1659978532
- exit_code: 1
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n  return x === x + y || x === x + z || x === y + z ||\
    \ y === x + z || y === y + z || z === x + z || z === y + z;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpdkn5yaw5.js:21:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpdkn5yaw5.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978532
- exit_code: 1
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n\treturn x == y || x == z || y == z;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpqfd6608r.js:19:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpqfd6608r.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978532
- exit_code: 2
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n  return is_integer(x) && is_integer(y) && is_integer(z)\
    \ && x + y + z == any_int;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2,\
    \ 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmptoye4l45.ts(14,10): error TS2304: Cannot find name
    ''is_integer''.

    ../../../../../tmp/tmptoye4l45.ts(14,27): error TS2304: Cannot find name ''is_integer''.

    ../../../../../tmp/tmptoye4l45.ts(14,44): error TS2304: Cannot find name ''is_integer''.

    ../../../../../tmp/tmptoye4l45.ts(14,61): error TS2367: This condition will always
    return ''false'' since the types ''number'' and ''(x: number, y: number, z: number)
    => boolean'' have no overlap.

    '
  timestamp: 1659978532
- exit_code: 2
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n  // Make sure the numbers are integers.\n  if (!Number.isInteger(x)\
    \ || !Number.isInteger(y) || !Number.isInteger(z)) {\n    return false\n  }\n\n\
    \  // Create a function that adds all the numbers and returns the sum.\n  const\
    \ add = () => {\n    return x + y + z\n  }\n\n  // Create a function that adds\
    \ up all the arguments and checks if it's equal to the sum of the other two.\n\
    \  const check_sum = (other: number): boolean => {\n    return add() === other\n\
    \  }\n\n  // Return a boolean based on those checks.\n  return check_sum(add(),\
    \ add(), add())\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2,\
    \ 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpprb51zce.ts(15,15): error TS2339: Property ''isInteger''
    does not exist on type ''NumberConstructor''.

    ../../../../../tmp/tmpprb51zce.ts(15,39): error TS2339: Property ''isInteger''
    does not exist on type ''NumberConstructor''.

    ../../../../../tmp/tmpprb51zce.ts(15,63): error TS2339: Property ''isInteger''
    does not exist on type ''NumberConstructor''.

    ../../../../../tmp/tmpprb51zce.ts(30,27): error TS2554: Expected 1 arguments,
    but got 3.

    '
  timestamp: 1659978532
- exit_code: 1
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n  return x >= y && x >= z && y >= z;\n}\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpf503oj56.js:19:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpf503oj56.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978532
- exit_code: 1
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n  if (x === y || y === z || z === x) return false;\n\
    \  if (isNaN(x)) return false;\n  if (isNaN(y)) return false;\n  if (isNaN(z))\
    \ return false;\n  let sum: number = x + y + z;\n  return sum === x || sum ===\
    \ y || sum === z;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2,\
    \ 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp1mc8syr0.js:28:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp1mc8syr0.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978532
- exit_code: 2
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n    if (isNaN(x) || isNaN(y) || isNaN(z)) {\n       \
    \ return false;\n    }\n    return isFinite(x) && isFinite(y) && isFinite(z) &&\
    \ x + y + z === Number.parseInt(x + y + z);\n}\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n\
    \  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpj7il557s.ts(17,78): error TS2339: Property ''parseInt''
    does not exist on type ''NumberConstructor''.

    '
  timestamp: 1659978532
- exit_code: 1
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n  return typeof x === 'number' && typeof y === 'number'\
    \ && typeof z === 'number' && x + y + z === 10;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpiv428qjl.js:19:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpiv428qjl.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978532
- exit_code: 1
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n\treturn (\n\t\t(x < y) && (y < z) &&\n\t\t(x < z) &&\
    \ (z < y) &&\n\t\t(x === y) && (y === z) &&\n\t\t(x === z)\n\t);\n}\n\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n\
    \  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp64o6vqn_.js:22:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp64o6vqn_.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978532
- exit_code: 2
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n  if (x === y || x === z) return true\n  if (y === z)\
    \ return false\n  return Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n\
    \  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmplikxvb2u.ts(16,17): error TS2339: Property ''isInteger''
    does not exist on type ''NumberConstructor''.

    ../../../../../tmp/tmplikxvb2u.ts(16,40): error TS2339: Property ''isInteger''
    does not exist on type ''NumberConstructor''.

    ../../../../../tmp/tmplikxvb2u.ts(16,63): error TS2339: Property ''isInteger''
    does not exist on type ''NumberConstructor''.

    '
  timestamp: 1659978532
- exit_code: 1
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n    if (typeof x === \"number\" && typeof y === \"number\"\
    \ && typeof z === \"number\") {\n        return ((x + y + z) === 3);\n    }\n\
    \    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2,\
    \ 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp2teld8lb.js:22:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp2teld8lb.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978532
- exit_code: 1
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n  if (isNaN(x) || isNaN(y) || isNaN(z)) {\n    throw\
    \ new TypeError(\"Arguments must be numbers\");\n  }\n  if (x < 0 || y < 0 ||\
    \ z < 0) {\n    throw new RangeError(\"Arguments must be positive\");\n  }\n \
    \ return isFinite(y) && isFinite(z) &&\n    x + y === z && isFinite(x + y);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n\
    \  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpvdi4hrxk.js:26:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpvdi4hrxk.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978532
- exit_code: 1
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n    return (typeof x === 'number' && typeof y === 'number'\
    \ && typeof z === 'number') &&\n        (x === y || x === z || y === z);\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n\
    \  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmppfd9xv47.js:20:12)\n    at\
    \ Object.<anonymous> (/tmp/tmppfd9xv47.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978532
- exit_code: 2
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n  return (\n    x === y ||\n    x === z ||\n    y ===\
    \ z ||\n    (typeof x === 'number' && typeof y === 'number' && typeof z === 'number'\
    \ && x == y && y == z && isInt(x) && isInt(y) && isInt(z))\n  );\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n\
    \  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp02tx2qxc.ts(18,101): error TS2304: Cannot find name
    ''isInt''.

    ../../../../../tmp/tmp02tx2qxc.ts(18,113): error TS2304: Cannot find name ''isInt''.

    ../../../../../tmp/tmp02tx2qxc.ts(18,125): error TS2304: Cannot find name ''isInt''.

    '
  timestamp: 1659978532
- exit_code: 1
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n    return ((x + y == z) || (x + z == y)) && !isNaN(x\
    \ + y);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2,\
    \ 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpwd_bu68c.js:21:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpwd_bu68c.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978532
- exit_code: 2
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n    if (any_floats_are_equal(x, y, z))\n        return\
    \ true\n    if (any_floats_are_equal(z, x, y))\n        return true\n    if (any_floats_are_equal(y,\
    \ x, z))\n        return true\n    if (any_floats_are_equal(z, y, x))\n      \
    \  return true\n    if (any_floats_are_equal(x, z, y))\n        return true\n\
    \    if (any_floats_are_equal(y, z, x))\n        return true\n    if (any_floats_are_equal(z,\
    \ x, y))\n        return true\n    if (any_floats_are_equal(x, z, y))\n      \
    \  return true\n    if (any_floats_are_equal(y, x, z))\n        return true\n\
    \    if (any_floats_are_equal(z, y, x))\n        return true\n    return false\n\
    }\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n\
    \  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp_nligef7.ts(14,9): error TS2304: Cannot find name
    ''any_floats_are_equal''.

    ../../../../../tmp/tmp_nligef7.ts(16,9): error TS2304: Cannot find name ''any_floats_are_equal''.

    ../../../../../tmp/tmp_nligef7.ts(18,9): error TS2304: Cannot find name ''any_floats_are_equal''.

    ../../../../../tmp/tmp_nligef7.ts(20,9): error TS2304: Cannot find name ''any_floats_are_equal''.

    ../../../../../tmp/tmp_nligef7.ts(22,9): error TS2304: Cannot find name ''any_floats_are_equal''.

    ../../../../../tmp/tmp_nligef7.ts(24,9): error TS2304: Cannot find name ''any_floats_are_equal''.

    ../../../../../tmp/tmp_nligef7.ts(26,9): error TS2304: Cannot find name ''any_floats_are_equal''.

    ../../../../../tmp/tmp_nligef7.ts(28,9): error TS2304: Cannot find name ''any_floats_are_equal''.

    ../../../../../tmp/tmp_nligef7.ts(30,9): error TS2304: Cannot find name ''any_floats_are_equal''.

    ../../../../../tmp/tmp_nligef7.ts(32,9): error TS2304: Cannot find name ''any_floats_are_equal''.

    '
  timestamp: 1659978532
- exit_code: 1
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n    return x === x || y === y || z === z;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n\
    \  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp0sde9j80.js:20:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp0sde9j80.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978532
- exit_code: 1
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n    if (x > y && x > z) return true;\n    if (y > x &&\
    \ y > z) return true;\n    return false;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n\
    \  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp9cgos4hl.js:25:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp9cgos4hl.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978532
- exit_code: 2
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n  if (any_int__(x, y, z)) {\n    return true;\n  }\n\
    \  if (any_int__(z, x, y)) {\n    return true;\n  }\n  if (any_int__(z, y, x))\
    \ {\n    return true;\n  }\n  return false;\n}\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n\
    \  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpzmebbph3.ts(14,7): error TS2552: Cannot find name
    ''any_int__''. Did you mean ''any_int''?

    ../../../../../tmp/tmpzmebbph3.ts(17,7): error TS2552: Cannot find name ''any_int__''.
    Did you mean ''any_int''?

    ../../../../../tmp/tmpzmebbph3.ts(20,7): error TS2552: Cannot find name ''any_int__''.
    Did you mean ''any_int''?

    '
  timestamp: 1659978532
- exit_code: 1
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n    if (x < 0 || y < 0 || z < 0) {\n        return false;\n\
    \    }\n    return (x == y || x == z);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n\
    \  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmplx8dylxx.js:22:12)\n    at\
    \ Object.<anonymous> (/tmp/tmplx8dylxx.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978533
- exit_code: 1
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n  return (((x == y) || (x == z)) && Math.floor(x) ==\
    \ x) && Math.floor(y) == y;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2,\
    \ 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpl90okjty.js:19:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpl90okjty.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978534
- exit_code: 1
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n  // Only ints need to work.\n  if (typeof x !== 'number'\
    \ || typeof y !== 'number' || typeof z !== 'number') {\n    return false;\n  }\n\
    \n  // All numbers must be integers.\n  return Math.floor(x + y + z) === Math.floor(x\
    \ + y + z);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2,\
    \ 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp_ifaditc.js:25:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp_ifaditc.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978534
- exit_code: 1
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n    return x === y || x === z || y === z;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n\
    \  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpm2h80irv.js:19:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpm2h80irv.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978524
- exit_code: 1
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n  // Return false if all three numbers are NaN.\n  if\
    \ (isNaN(x) || isNaN(y) || isNaN(z)) {\n    return false;\n  }\n  // Return true\
    \ if any of the numbers is equal to the sum of the other two.\n  // Otherwise,\
    \ return false.\n  if (x === y) {\n    return true;\n  } else {\n    return false;\n\
    \  }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2,\
    \ 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp8_vkgcxs.js:30:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp8_vkgcxs.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978534
- exit_code: 2
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n  return !isNaN(x + y + z) && isFinite(x + y + z) &&\
    \ isInteger(x + y + z);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2,\
    \ 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpo2m65f93.ts(14,54): error TS2304: Cannot find name
    ''isInteger''.

    '
  timestamp: 1659978534
- exit_code: 2
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n  return !isNaN(x) && !isNaN(y) && !isNaN(z) && parseInt(x)\
    \ === parseInt(y) && parseInt(x) === parseInt(z) && parseInt(y) === parseInt(z)\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n\
    \  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpb7pu3izq.ts(14,58): error TS2345: Argument of type
    ''number'' is not assignable to parameter of type ''string''.

    ../../../../../tmp/tmpb7pu3izq.ts(14,74): error TS2345: Argument of type ''number''
    is not assignable to parameter of type ''string''.

    ../../../../../tmp/tmpb7pu3izq.ts(14,89): error TS2345: Argument of type ''number''
    is not assignable to parameter of type ''string''.

    ../../../../../tmp/tmpb7pu3izq.ts(14,105): error TS2345: Argument of type ''number''
    is not assignable to parameter of type ''string''.

    ../../../../../tmp/tmpb7pu3izq.ts(14,120): error TS2345: Argument of type ''number''
    is not assignable to parameter of type ''string''.

    ../../../../../tmp/tmpb7pu3izq.ts(14,136): error TS2345: Argument of type ''number''
    is not assignable to parameter of type ''string''.

    '
  timestamp: 1659978534
- exit_code: 1
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n  if (x < 0) {\n    return false;\n  }\n  if (x === 0\
    \ || y === 0) {\n    if (y === 0) {\n      return true;\n    }\n    return false;\n\
    \  }\n  if (y < 0) {\n    return false;\n  }\n  if (z < 0) {\n    return false;\n\
    \  }\n  if (z === 0 || y === z) {\n    return true;\n  }\n  return x == y + z;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n\
    \  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpk50rgkl0.js:37:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpk50rgkl0.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978534
- exit_code: 1
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n  const a = x + y;\n  const b = z + z;\n  const c = x\
    \ - y;\n  const d = z - z;\n  if (a === b) {\n    return a === c;\n  }\n  if (a\
    \ === c) {\n    return b === d;\n  }\n  return false;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpf2wml9h3.js:29:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpf2wml9h3.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978534
- exit_code: 1
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n    return (x > z && x !== null) && (y > z && y !== null)\
    \ && (x < y && x !== null);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2,\
    \ 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp7pngh3el.js:23:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp7pngh3el.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978534
- exit_code: 1
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n  const sum = x + y + z;\n  return (x == sum || y ==\
    \ sum || z == sum);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2,\
    \ 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpsqtvg_t0.js:20:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpsqtvg_t0.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978535
- exit_code: 2
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n  return isInteger(x) && isInteger(y) && isInteger(z)\
    \ && x + y + z === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2,\
    \ 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp3m8qdasv.ts(14,10): error TS2304: Cannot find name
    ''isInteger''.

    ../../../../../tmp/tmp3m8qdasv.ts(14,26): error TS2304: Cannot find name ''isInteger''.

    ../../../../../tmp/tmp3m8qdasv.ts(14,42): error TS2304: Cannot find name ''isInteger''.

    '
  timestamp: 1659978534
- exit_code: 1
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n  return ((typeof x === 'number' || typeof y === 'number'\
    \ || typeof z === 'number') && (x + y + z === parseInt(x.toFixed(3) + y.toFixed(3)\
    \ + z.toFixed(3), 10)));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2,\
    \ 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp1oolr0ph.js:19:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp1oolr0ph.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978534
- exit_code: 1
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n    if (x == y || x == z) {\n        return true;\n \
    \   }\n    else {\n        return false;\n    }\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp6n_eg5e6.js:24:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp6n_eg5e6.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978535
- exit_code: 2
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n\treturn (\n\t\ttypeof x === \"number\" && typeof y ===\
    \ \"number\" && typeof z === \"number\"\n\t) && (x === parseInt(x, 10) && y ===\
    \ parseInt(y, 10) && z === parseInt(z, 10))\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp3ner1lme.ts(16,23): error TS2345: Argument of type
    ''number'' is not assignable to parameter of type ''string''.

    ../../../../../tmp/tmp3ner1lme.ts(16,48): error TS2345: Argument of type ''number''
    is not assignable to parameter of type ''string''.

    ../../../../../tmp/tmp3ner1lme.ts(16,73): error TS2345: Argument of type ''number''
    is not assignable to parameter of type ''string''.

    '
  timestamp: 1659978534
- exit_code: 1
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n  return ((typeof x === 'number' || typeof x === 'string')\
    \ && (typeof y === 'number' || typeof y === 'string') && (typeof z === 'number'\
    \ || typeof z === 'string')) &&\n         (x + y === z);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpiei1tirf.js:20:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpiei1tirf.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978535
- exit_code: 2
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n  return isInteger(x) && isInteger(y) && isInteger(z)\
    \ &&\n    x != Infinity &&\n    y != Infinity &&\n    z != Infinity &&\n    x\
    \ != Infinity &&\n    y != Infinity &&\n    z != Infinity &&\n    x + y + z ==\
    \ 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2,\
    \ 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpvtxg149h.ts(14,10): error TS2304: Cannot find name
    ''isInteger''.

    ../../../../../tmp/tmpvtxg149h.ts(14,26): error TS2304: Cannot find name ''isInteger''.

    ../../../../../tmp/tmpvtxg149h.ts(14,42): error TS2304: Cannot find name ''isInteger''.

    '
  timestamp: 1659978535
- exit_code: 2
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n    return x == y || (isInt(x) && isInt(y) && isInt(z)\
    \ ? x + y + z == sumInt(x, y, z) : false);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n\
    \  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp5q8hc0dn.ts(14,23): error TS2304: Cannot find name
    ''isInt''.

    ../../../../../tmp/tmp5q8hc0dn.ts(14,35): error TS2304: Cannot find name ''isInt''.

    ../../../../../tmp/tmp5q8hc0dn.ts(14,47): error TS2304: Cannot find name ''isInt''.

    ../../../../../tmp/tmp5q8hc0dn.ts(14,71): error TS2304: Cannot find name ''sumInt''.

    '
  timestamp: 1659978535
- exit_code: 1
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n  return ((typeof x === \"number\") && (typeof y ===\
    \ \"number\") && (typeof z === \"number\")) &&\n         (x === y || (x === z\
    \ && y === 0)); //This returns true if x is equal to the sum of the other two.\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n\
    \  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpq0xl2kzp.js:20:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpq0xl2kzp.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978535
- exit_code: 2
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n  return any_of([x, y, z], function(x, i, l){\n    if\
    \ (x < 0) x = -x;\n    if (x > l[i-1]) x = x - l[i-1];\n    if (y < 0) y = -y;\n\
    \    if (y > l[i-1]) y = y - l[i-1];\n    if (z < 0) z = -z;\n    if (z > l[i-1])\
    \ z = z - l[i-1];\n    return x == y + z;\n  });\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpg2rs13u9.ts(14,10): error TS2304: Cannot find name
    ''any_of''.

    '
  timestamp: 1659978535
- exit_code: 2
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n  const sum = x + y + z;\n  return isInteger(sum) &&\
    \ isInteger(x) && isInteger(y) && isInteger(z) && isInteger(x + y) && isInteger(x\
    \ + z) && isInteger(y + z);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2,\
    \ 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp9lsfje9l.ts(15,10): error TS2304: Cannot find name
    ''isInteger''.

    ../../../../../tmp/tmp9lsfje9l.ts(15,28): error TS2304: Cannot find name ''isInteger''.

    ../../../../../tmp/tmp9lsfje9l.ts(15,44): error TS2304: Cannot find name ''isInteger''.

    ../../../../../tmp/tmp9lsfje9l.ts(15,60): error TS2304: Cannot find name ''isInteger''.

    ../../../../../tmp/tmp9lsfje9l.ts(15,76): error TS2304: Cannot find name ''isInteger''.

    ../../../../../tmp/tmp9lsfje9l.ts(15,96): error TS2304: Cannot find name ''isInteger''.

    ../../../../../tmp/tmp9lsfje9l.ts(15,116): error TS2304: Cannot find name ''isInteger''.

    '
  timestamp: 1659978535
- exit_code: 2
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n  return typeof x === 'number' && typeof y === 'number'\
    \ && typeof z === 'number' &&\n    x !== Infinity && y !== Infinity && z !== Infinity\
    \ &&\n    x !== -Infinity && y !== -Infinity && z !== -Infinity &&\n    (x | 0)\
    \ === x && (y | 0) === y && (z | 0) === z && // Make sure x, y, z are integers,\
    \ not floats.\n    x | 0 === x && y | 0 === y && z | 0 === z && // Make sure x,\
    \ y, z are integers.\n    (x | 0) === (x | 0) === (y | 0) === (z | 0) &&\n   \
    \ (x & 1) === (y & 1) === (z & 1) &&\n    ((x & 2) === (y & 2) === (z & 2))\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n\
    \  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpjo9e1o1x.ts(18,9): error TS2363: The right-hand side
    of an arithmetic operation must be of type ''any'', ''number'', ''bigint'' or
    an enum type.

    ../../../../../tmp/tmpjo9e1o1x.ts(18,24): error TS2363: The right-hand side of
    an arithmetic operation must be of type ''any'', ''number'', ''bigint'' or an
    enum type.

    ../../../../../tmp/tmpjo9e1o1x.ts(18,39): error TS2363: The right-hand side of
    an arithmetic operation must be of type ''any'', ''number'', ''bigint'' or an
    enum type.

    ../../../../../tmp/tmpjo9e1o1x.ts(19,5): error TS2367: This condition will always
    return ''false'' since the types ''boolean'' and ''number'' have no overlap.

    ../../../../../tmp/tmpjo9e1o1x.ts(19,5): error TS2367: This condition will always
    return ''false'' since the types ''boolean'' and ''number'' have no overlap.

    ../../../../../tmp/tmpjo9e1o1x.ts(20,5): error TS2367: This condition will always
    return ''false'' since the types ''boolean'' and ''number'' have no overlap.

    ../../../../../tmp/tmpjo9e1o1x.ts(21,6): error TS2367: This condition will always
    return ''false'' since the types ''boolean'' and ''number'' have no overlap.

    '
  timestamp: 1659978535
- exit_code: 1
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n    return (x == y || x == z || y == z) && (x | y | z)\
    \ === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2,\
    \ 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp96bowpc8.js:19:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp96bowpc8.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978535
- exit_code: 1
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n  const a = Math.abs(x);\n  const b = Math.abs(y);\n\
    \  const c = Math.abs(z);\n\n  return a + b == c && (x | y | z) === 0;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n\
    \  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp82imm3_8.js:22:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp82imm3_8.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978535
- exit_code: 1
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n    if (x === y || x === z) {\n        return true;\n\
    \    }\n    if (x === 0 || y === 0 || z === 0) {\n        return false;\n    }\n\
    \n    return Math.abs(x) === Math.abs(y + z);\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpw1i9z23h.js:25:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpw1i9z23h.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978536
- exit_code: 2
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n\treturn (x > 0 && y > 0 && z > 0 && x + y + z == sum(x,\
    \ y, z));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2,\
    \ 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp_79k90wp.ts(14,50): error TS2304: Cannot find name
    ''sum''.

    '
  timestamp: 1659978536
- exit_code: 2
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n  // All numbers passed in have to be integers.\n  if\
    \ (!isInteger(x) || !isInteger(y) || !isInteger(z)) {\n    return false\n  }\n\
    \n  //Return true if any of the numbers is equal to the sum of the other two\n\
    \  return x === ((x + y + z) % 3)\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n\
    \  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpe4b01wm7.ts(15,8): error TS2304: Cannot find name
    ''isInteger''.

    ../../../../../tmp/tmpe4b01wm7.ts(15,25): error TS2304: Cannot find name ''isInteger''.

    ../../../../../tmp/tmpe4b01wm7.ts(15,42): error TS2304: Cannot find name ''isInteger''.

    '
  timestamp: 1659978536
- exit_code: 2
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n    return (typeof x === 'number'\n        && typeof\
    \ y === 'number'\n        && typeof z === 'number'\n        && (x + y + z ===\
    \ parseInt(x + y + z.toString(), 10))) || (typeof x === 'string' && typeof y ===\
    \ 'string' && typeof z === 'string'\n        && (x + y + z === parseInt(x + y\
    \ + z.toString(), 10)));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2,\
    \ 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpn8cn_pra.ts(18,46): error TS2339: Property ''toString''
    does not exist on type ''never''.

    '
  timestamp: 1659978536
- exit_code: 1
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n  return ((x == x + y) || x == z || y == z)\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n\
    \  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpnd1v2_dn.js:19:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpnd1v2_dn.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978537
- exit_code: 2
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n  return (x === (x + y + z)) && (x === (x + (y + z))\
    \ && x === (x - (y + z)) && x === (x - (y + (z + 1))) && x === (x - (y - (z +\
    \ 1))) && x === (x - (y - (z - 1)) && (x !== (x + (y - (z - 1))) && (x !== (x\
    \ - (y + (z + 1))) && (x !== (x - (y - (z + 1))) && (x !== (x - (y + (z + 1)))\
    \ && (x !== (x - (y - (z - 1))) && (x !== (x + (y - (z - 1))) && (x !== (x + (y\
    \ + (z - 1))) && (x !== (x + (y + (z - 1))) && x !== (x - (y - (z - 1))) && (x\
    \ !== (x - (y + (z - 1))) && (x !== (x - (y - (z - 1)))));\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp57blplfn.ts(14,493): error TS1005: '')'' expected.

    '
  timestamp: 1659978538
- exit_code: 1
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n  if (typeof x !== 'number' || typeof y !== 'number'\
    \ || typeof z !== 'number') {\n    return false;\n  }\n  return x == y || (x ==\
    \ z && y === 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2,\
    \ 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpy0_mtq3o.js:22:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpy0_mtq3o.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978537
- exit_code: 1
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n    if (typeof x === 'number' && typeof y === 'number'\
    \ && typeof z === 'number') {\n        return ((x + y + z) === (x + y) && (x +\
    \ y + z === x));\n    }\n\n    return false;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp75f05rcq.js:22:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp75f05rcq.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978537
- exit_code: 2
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n  return !any_float(x, y, z) && !any_float(y, x, z) &&\
    \ !any_float(z, x, y) && !any_float(x, y, z);\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpxmzn9pht.ts(14,11): error TS2304: Cannot find name
    ''any_float''.

    ../../../../../tmp/tmpxmzn9pht.ts(14,34): error TS2304: Cannot find name ''any_float''.

    ../../../../../tmp/tmpxmzn9pht.ts(14,57): error TS2304: Cannot find name ''any_float''.

    ../../../../../tmp/tmpxmzn9pht.ts(14,80): error TS2304: Cannot find name ''any_float''.

    '
  timestamp: 1659978537
- exit_code: 1
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n    return !(x === y || x === z);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpzf2xnog2.js:20:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpzf2xnog2.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978537
- exit_code: 2
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n    let sum: number = x + y + z;\n    return !(Number.isNaN(sum)\
    \ || !Number.isInteger(sum) || sum < 0 || sum > 10);\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=typescript |>\nYou can use type guards to write better typescript:\n\
    <code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2,\
    \ 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp000mvhwv.ts(17,2): error TS1110: Type expected.

    ../../../../../tmp/tmp000mvhwv.ts(17,3): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmp000mvhwv.ts(18,2): error TS1109: Expression expected.

    ../../../../../tmp/tmp000mvhwv.ts(18,4): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmp000mvhwv.ts(19,2): error TS1109: Expression expected.

    ../../../../../tmp/tmp000mvhwv.ts(19,6): error TS1005: '';'' expected.

    ../../../../../tmp/tmp000mvhwv.ts(19,23): error TS1109: Expression expected.

    ../../../../../tmp/tmp000mvhwv.ts(20,5): error TS1005: '';'' expected.

    ../../../../../tmp/tmp000mvhwv.ts(20,9): error TS1005: '';'' expected.

    ../../../../../tmp/tmp000mvhwv.ts(20,13): error TS1005: '';'' expected.

    ../../../../../tmp/tmp000mvhwv.ts(20,25): error TS1005: ''='' expected.

    ../../../../../tmp/tmp000mvhwv.ts(20,28): error TS1005: '';'' expected.

    ../../../../../tmp/tmp000mvhwv.ts(20,34): error TS1005: '';'' expected.

    ../../../../../tmp/tmp000mvhwv.ts(20,41): error TS1005: '';'' expected.

    ../../../../../tmp/tmp000mvhwv.ts(22,9): error TS1005: '';'' expected.

    '
  timestamp: 1659978537
- exit_code: 1
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n    return x === y + z && typeof x === 'number' && typeof\
    \ y === 'number' && typeof z === 'number';\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n\
    \  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpwxib2x7c.js:19:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpwxib2x7c.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978537
- exit_code: 2
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n    return ((typeof x === 'number') && (typeof y ===\
    \ 'number') && (typeof z === 'number')\n            && ((x + y + z === Number.parseInt(x\
    \ + y + z.toString())) || (x + y + z === Number.parseInt(x.toString() + y.toString()\
    \ + z.toString())) || (x + y + z === Number.parseInt(x + y.toString() + z.toString()))\n\
    \            || (x + y + z === Number.parseInt(x.toString() + y.toString() + z.toString())))\n\
    \            || ((x + y + z === Number.parseInt(x + y + z.toString())) || (x +\
    \ y + z === Number.parseInt(x.toString() + y.toString() + z.toString())) || (x\
    \ + y + z === Number.parseInt(x + y.toString() + z.toString()))\n            ||\
    \ (x + y + z === Number.parseInt(x.toString() + y.toString() + z.toString())))\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n\
    \  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpay1h07tt.ts(19,1): error TS1005: '')'' expected.

    '
  timestamp: 1659978537
- exit_code: 2
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n    return is_int(x + y + z);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp02b175vb.ts(14,12): error TS2304: Cannot find name
    ''is_int''.

    '
  timestamp: 1659978537
- exit_code: 2
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n    if (x === z) {\n        return (y <= z && y >= x);\n\
    \    }\n\n    if (y === z) {\n        return (x <= z && x >= y);\n    }\n\n  \
    \  if (x === y && y === z) {\n        return isInt(x);\n    }\n\n    return false;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n\
    \  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpje4vhg_e.ts(23,16): error TS2304: Cannot find name
    ''isInt''.

    '
  timestamp: 1659978537
- exit_code: 2
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n    if (typeof x === 'number') {\n        if (typeof\
    \ y === 'number') {\n            // Ensure all values are integers.\n        \
    \    if (isNaN(x) || isNaN(y) || isNaN(z)) {\n                return false;\n\
    \            }\n        }\n    }\n\n    return x === sum(x, y, z);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n\
    \  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmppm0vb15q.ts(23,18): error TS2304: Cannot find name
    ''sum''.

    '
  timestamp: 1659978537
- exit_code: 2
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n    let i: number;\n    let j: number;\n    let arr:\
    \ Array<any>;\n    let num: Array<any>;\n    let narr: Array<any>;\n    let i:\
    \ number;\n    let j: number;\n    let arr: Array<any>;\n    let num: Array<any>;\n\
    \    let narr: Array<any>;\n    let sum: number;\n    arr = new Array(x); //Convert\
    \ x to a an array.\n    num = y.split(\".\"); //Split y into a and b.\n    i =\
    \ x[0]; //Set i to the first element in y.\n    j = x[1]; //Set j to the second\
    \ element in y.\n    arr = new Array(parseInt(num[0])); //Convert num[0] to a\
    \ an array.\n    arr = new Array(parseInt(num[1])); //Convert num[1] to a an array.\n\
    \    for (i = 0; i < arr.length; i++) {\n        for (j = 0; j < arr.length; j++)\
    \ {\n            sum += parseInt(arr[i]) * parseInt(arr[j]); //Calculate sum using\
    \ arr[i] and arr[j].\n        }\n    }\n    if (sum === parseInt(j)) {\n     \
    \   return true;\n    }\n    return false;\n}\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n\
    \  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpajd4ov2c.ts(14,9): error TS2451: Cannot redeclare
    block-scoped variable ''i''.

    ../../../../../tmp/tmpajd4ov2c.ts(15,9): error TS2451: Cannot redeclare block-scoped
    variable ''j''.

    ../../../../../tmp/tmpajd4ov2c.ts(16,9): error TS2451: Cannot redeclare block-scoped
    variable ''arr''.

    ../../../../../tmp/tmpajd4ov2c.ts(17,9): error TS2451: Cannot redeclare block-scoped
    variable ''num''.

    ../../../../../tmp/tmpajd4ov2c.ts(18,9): error TS2451: Cannot redeclare block-scoped
    variable ''narr''.

    ../../../../../tmp/tmpajd4ov2c.ts(19,9): error TS2451: Cannot redeclare block-scoped
    variable ''i''.

    ../../../../../tmp/tmpajd4ov2c.ts(20,9): error TS2451: Cannot redeclare block-scoped
    variable ''j''.

    ../../../../../tmp/tmpajd4ov2c.ts(21,9): error TS2451: Cannot redeclare block-scoped
    variable ''arr''.

    ../../../../../tmp/tmpajd4ov2c.ts(22,9): error TS2451: Cannot redeclare block-scoped
    variable ''num''.

    ../../../../../tmp/tmpajd4ov2c.ts(23,9): error TS2451: Cannot redeclare block-scoped
    variable ''narr''.

    ../../../../../tmp/tmpajd4ov2c.ts(26,13): error TS2339: Property ''split'' does
    not exist on type ''number''.

    ../../../../../tmp/tmpajd4ov2c.ts(36,26): error TS2345: Argument of type ''number''
    is not assignable to parameter of type ''string''.

    '
  timestamp: 1659978537
- exit_code: 1
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n  return (\n    typeof x === 'number' &&\n    typeof\
    \ y === 'number' &&\n    typeof z === 'number' &&\n    x > y &&\n    y > z &&\n\
    \    !(isNaN(x) && isNaN(y) && isNaN(z))\n  );\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp_p5hokyj.js:24:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp_p5hokyj.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978537
- exit_code: 1
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n    return x === y + z;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpl60ew2q6.js:19:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpl60ew2q6.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978537
- exit_code: 1
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n    return !(x !== x || y !== y || z !== z && z != null)\
    \ ? false : x === y || x === z;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n\
    \  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpwk_9fs7n.js:19:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpwk_9fs7n.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978537
- exit_code: 1
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n    if (isNaN(x) || isNaN(y) || isNaN(z)) {\n       \
    \ return false;\n    }\n    let total = x + y + z;\n    return (\n        ((total\
    \ % 1) === 0) &&\n        (total >= 0) &&\n        (total <= Math.pow(10, 10))\n\
    \    );\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2,\
    \ 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpe90czvwp.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpe90czvwp.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978537
- exit_code: 2
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n  const nums = [x, y, z];\n  const sum = Math.sum(nums);\n\
    \n  return nums.some((n) => n === sum);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = any_int;\n\
    \  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpfhootlq6.ts(15,20): error TS2339: Property ''sum''
    does not exist on type ''Math''.

    '
  timestamp: 1659978537
- exit_code: 1
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n    if (x === y) {\n        return x === z;\n    }\n\
    \    else if (typeof x === \"number\" && typeof y === \"number\") {\n        const\
    \ num1: number = Math.floor(x);\n        const num2: number = Math.floor(y);\n\
    \        const num3: number = Math.floor(z);\n        return num1 === num2 &&\
    \ (num2 === num3 || num1 === num3);\n    }\n    return false;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpqle9xcto.js:28:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpqle9xcto.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978538
- exit_code: 1
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n    const a = Math.min(x, y);\n    const b = Math.max(x,\
    \ y);\n    const c = Math.min(b, z);\n    const d = Math.max(b, z);\n    if (a\
    \ + c === d && a + d === b) {\n        return true;\n    }\n    return false;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n\
    \  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpj4m8p36c.js:26:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpj4m8p36c.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978538
- exit_code: 1
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n  if (x == y && x == z) return true\n  if (x == y ||\
    \ x == z) return false\n  if (y == z) return true\n  if (y > z) return true\n\
    \  if (y <= z) return false\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2,\
    \ 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp9th2bpsj.js:30:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp9th2bpsj.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978538
- exit_code: 1
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n  if(typeof(x) !== 'number' || typeof(y) !== 'number'\
    \ || typeof(z) !== 'number') {\n    return false;\n  }\n\n  if(x < 0 || y < 0)\
    \ {\n    return false;\n  }\n\n  if(z < 0) {\n    return x === y;\n  }\n\n  return\
    \ x + y === z;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2,\
    \ 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp0ei36t4s.js:28:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp0ei36t4s.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978538
- exit_code: 2
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n  // Write your code here!\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpw5w66p76.ts(13,52): error TS2355: A function whose
    declared type is neither ''void'' nor ''any'' must return a value.

    '
  timestamp: 1659978538
- exit_code: 1
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n  return !(x < 0 || x > z || y < 0 || y > z);\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n\
    \  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpytq7w2r9.js:19:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpytq7w2r9.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978539
- exit_code: 1
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n  return x == x + y && x == x + z && y == y + z && typeof(x)\
    \ === \"number\" && typeof(y) === \"number\" && typeof(z) === \"number\";\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n\
    \  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpqx7writc.js:19:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpqx7writc.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978539
- exit_code: 1
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n    if (x > y && x > z) {\n        return true;\n   \
    \ } else if (y > x && y > z) {\n        return true;\n    } else {\n        return\
    \ false;\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2,\
    \ 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmppk5orvwb.js:29:12)\n    at\
    \ Object.<anonymous> (/tmp/tmppk5orvwb.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978539
- exit_code: 2
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n  return Math.trunc(x + y + z) === Math.trunc(x + y +\
    \ z);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2,\
    \ 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpzq0pcvo6.ts(14,15): error TS2339: Property ''trunc''
    does not exist on type ''Math''.

    ../../../../../tmp/tmpzq0pcvo6.ts(14,41): error TS2339: Property ''trunc'' does
    not exist on type ''Math''.

    '
  timestamp: 1659978539
- exit_code: 2
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n    return x == y + z && Number.isInteger(x) && Number.isInteger(y)\
    \ && Number.isInteger(z);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2,\
    \ 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpjlwv4fv2.ts(14,33): error TS2339: Property ''isInteger''
    does not exist on type ''NumberConstructor''.

    ../../../../../tmp/tmpjlwv4fv2.ts(14,56): error TS2339: Property ''isInteger''
    does not exist on type ''NumberConstructor''.

    ../../../../../tmp/tmpjlwv4fv2.ts(14,79): error TS2339: Property ''isInteger''
    does not exist on type ''NumberConstructor''.

    '
  timestamp: 1659978539
- exit_code: 1
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n  const a: number = Number(x) + Number(y);\n  const b:\
    \ number = Number(x) + Number(z);\n  const c: number = Number(y) + Number(z);\n\
    \  return a == b || a == c;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2,\
    \ 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpgfawe4c6.js:22:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpgfawe4c6.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978539
- exit_code: 1
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n\tif (typeof x === 'number') {\n\t\tif (typeof y ===\
    \ 'number') {\n\t\t\tif (typeof z === 'number') {\n\t\t\t\treturn x > y && x >\
    \ z && y > z;\n\t\t\t} else {\n\t\t\t\treturn x > y;\n\t\t\t}\n\t\t} else {\n\t\
    \t\treturn x > z;\n\t\t}\n\t} else {\n\t\treturn false;\n\t}\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpmszolr5d.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpmszolr5d.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978539
- exit_code: 2
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n  return isInt(x) && isInt(y) && isInt(z) && x === y\
    \ && z === z;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = any_int;\n  assert.deepEqual(candidate(2,\
    \ 3, 1),true);\n  assert.deepEqual(candidate(2.5, 2, 3),false);\n  assert.deepEqual(candidate(1.5,\
    \ 5, 3.5),false);\n  assert.deepEqual(candidate(2, 6, 2),false);\n  assert.deepEqual(candidate(4,\
    \ 2, 2),true);\n  assert.deepEqual(candidate(2.2, 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4,\
    \ 6, 2),true);\n  assert.deepEqual(candidate(2, 1, 1),true);\n  assert.deepEqual(candidate(3,\
    \ 4, 7),true);\n  assert.deepEqual(candidate(3.0, 4, 7),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpsgwyt2ub.ts(14,10): error TS2304: Cannot find name
    ''isInt''.

    ../../../../../tmp/tmpsgwyt2ub.ts(14,22): error TS2304: Cannot find name ''isInt''.

    ../../../../../tmp/tmpsgwyt2ub.ts(14,34): error TS2304: Cannot find name ''isInt''.

    '
  timestamp: 1659978539
- exit_code: 2
  program: "//Create a function that takes 3 numbers.\n// Returns true if one of the\
    \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
    // Returns false in any other cases.\n// Examples\n// >>> any_int(5, 2, 7)\n//\
    \ true\n// >>> any_int(3, 2, 2)\n// false\n// >>> any_int(3, -2, 1)\n// true\n\
    // >>> any_int(3.6, -2.2, 2)\n// false\nfunction any_int(x: number, y: number,\
    \ z: number): boolean {\n    const xIsNegative = x < 0;\n    const yIsNegative\
    \ = y < 0;\n    const zIsNegative = z < 0;\n    const xIsPositive = x >= 0;\n\
    \    const yIsPositive = y >= 0;\n    const zIsPositive = z >= 0;\n    const xIsInteger\
    \ = Math.floor(x) === x;\n    const yIsInteger = Math.floor(y) === y;\n    const\
    \ zIsInteger = Math.floor(z) === z;\n    if ((xIsInteger && yIsInteger) || (xIsInteger\
    \ && zIsInteger && yIsInteger) || (xIsInteger && yIsInteger && zIsInteger)) {\n\
    \        return true\n    }\n    else if (xIsInteger && zIsInteger) {\n      \
    \  return true\n    }\n    else if (yIsInteger && zIsInteger) {\n        return\
    \ true\n    }\n    else if (xIsInteger && yIsInteger) {\n        return true\n\
    \    }\n    else if ((xIsInteger && yIsPositive && zIsNegative) || (xIsInteger\
    \ && zIsPositive && yIsNegative) || (yIsInteger && zIsPositive && xIsNegative))\
    \ {\n        return true\n    }\n    else if ((yIsInteger && zIsPositive && xIsNegative)\
    \ || (yIsInteger && zIsNegative && xIsPositive) || (zIsInteger && xIsPositive\
    \ && yIsNegative)) {\n        return true\n    }\n    else if ((zIsInteger &&\
    \ xIsPositive && yIsNegative) || (zIsInteger && xIsNegative && yIsPositive) ||\
    \ (xIsInteger && yIsNegative && zIsPositive)) {\n        return true\n    }\n\
    \    else if ((xIsPositive && yIsInteger && zIsNegative) || (xIsNegative && yIsInteger\
    \ && zIsPositive) || (yIsPositive && zIsInteger && xIsNegative)) {\n        return\
    \ true\n    }\n    else if ((yIsPositive && zIsInteger && xIsNegative) || (yIsNegative\
    \ && zIsInteger && xIsPositive) || (zIsPositive && xIsInteger && yIsNegative))\
    \ {\n        return true\n    }\n    else if ((zIsPositive && xIsInteger && yIsNegative)\
    \ || (zIsNegative && xIsInteger && yIsPositive) || (xIsPositive && yIsInteger\
    \ && zIsNegative)) {\n        return true\n    }\n    else if ((xIsPositive &&\
    \ yIsNegative && zIsNegative) || (xIsNegative && yIsNegative && zIsPositive) ||\
    \ (yIsPositive && zIsNegative && xIsNegative) || (yIsNegative && zIsPositive &&\
    \ xIsPositive)) {\n        return true\n    }\n    else if ((yIs\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = any_int;\n  assert.deepEqual(candidate(2, 3, 1),true);\n  assert.deepEqual(candidate(2.5,\
    \ 2, 3),false);\n  assert.deepEqual(candidate(1.5, 5, 3.5),false);\n  assert.deepEqual(candidate(2,\
    \ 6, 2),false);\n  assert.deepEqual(candidate(4, 2, 2),true);\n  assert.deepEqual(candidate(2.2,\
    \ 2.2, 2.2),false);\n  assert.deepEqual(candidate(-4, 6, 2),true);\n  assert.deepEqual(candidate(2,\
    \ 1, 1),true);\n  assert.deepEqual(candidate(3, 4, 7),true);\n  assert.deepEqual(candidate(3.0,\
    \ 4, 7),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpu93511o_.ts(57,1): error TS1005: '')'' expected.

    ../../../../../tmp/tmpu93511o_.ts(75,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659978539
