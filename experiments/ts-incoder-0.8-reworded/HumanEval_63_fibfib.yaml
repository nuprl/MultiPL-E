name: HumanEval_63_fibfib
language: ts
prompt: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
  \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
  \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
  \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
  // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
  \ fibfib(n: number): number {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
  \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n  assert.deepEqual(candidate(10),81);\n\
  \  assert.deepEqual(candidate(12),274);\n  assert.deepEqual(candidate(14),927);\n\
  }\n\ntest();"
completions: ["  const memo = new Map<number, number>();\n\n  if (memo.has(n)) {\n\
    \    return memo.get(n);\n  }\n  memo.set(n, fibfib(n-1) + fibfib(n-2) + fibfib(n-3));\n\
    \  return memo.get(n);\n}\n", "  if (n < 1) {\n    return 0;\n  }\n  if (n ===\
    \ 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  if (n ===\
    \ 3) {\n    return 1;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\n", "    if (n == 0) {\n        return 0\n    }\n    if (n == 1) {\n       \
    \ return 1\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n", " \
    \ if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 1;\n  }\n \
    \ return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n", "    if (n === 0 || n\
    \ === 1) {\n        return n;\n    } else {\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n    }\n}\n", "  if (n < 0) {\n    throw new Error('n must be\
    \ positive')\n  }\n  if (n === 1) {\n    return 0\n  }\n  if (n === 2) {\n   \
    \ return 1\n  }\n  if (n === 3) {\n    return 2\n  }\n  if (n === 4) {\n    return\
    \ 3\n  }\n  if (n >= 6) {\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \  }\n  return fibfib(n-1) + fibfib(n-2)\n}\n", "\tif (n < 0 || n > 1000000000\
    \ || n === 0 || n === 1) return 0;\n\tlet f = 0;\n\tlet i = 1\n\twhile (i <= n)\
    \ {\n\t\tf = f + i;\n\t\ti = i + 1;\n\t}\n\treturn f;\n}\nconsole.log(fibfib(1));\n\
    console.log(fibfib(5));\nconsole.log(fibfib(8));", "  if (n < 2) {\n    return\
    \ 0\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n", "  if (n < 1)\
    \ return 0;\n  if (n <= 3) return 1;\n  if (n <= 6) return 2;\n  if (n <= 9) return\
    \ 3;\n  if (n <= 12) return 4;\n  return fibfib(n-3)+fibfib(n-6)+fibfib(n-9)+fibfib(n-12);\n\
    }\n", "  if (n < 3) {\n    return 0\n  } else {\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n  }\n}\n", "\tif (n < 2) return 0;\n\tif (n < 4) return 1;\n\t\
    if (n < 6) return fibfib(n-2)+fibfib(n-3);\n\treturn fibfib(n-1)+fibfib(n-2)+fibfib(n-3);\n\
    }", "  const fibfibArray: number[] = [0, 1, 2];\n\n  for (let i = fibfibArray.length;\
    \ i >= 0; i--) {\n    if (fibfibArray[i] > n) {\n      break;\n    }\n    fibfibArray[i]\
    \ = fibfibArray[i - 1] + fibfibArray[i - 2] + fibfibArray[i - 3];\n  }\n\n  return\
    \ fibfibArray[n];\n}\n", "  let fib = [0, 1];\n  for (let i = 3; i <= n; i++)\
    \ {\n    fib.push(fib[i - 1] + fib[i - 2] + fib[i - 3]);\n  }\n  return fib[n\
    \ - 1];\n}", "  // Step 1: initialize fibfib() by computing fibfib(n-1).\n  let\
    \ fibfib1: number = fibfib(n-1);\n  // Step 2: compute fibfib(n-2).\n  let fibfib2:\
    \ number = fibfib(n-2);\n  // Step 3: compute fibfib(n-3).\n  let fibfib3: number\
    \ = fibfib(n-3);\n  // Step 4: return the n-th element of fibfib(n).\n  return\
    \ fibfib1 + fibfib2 + fibfib3;\n}\n", "    if (n === 0 || n === 1) {\n       \
    \ return n;\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n",
  "  if (n === 0) return 0;\n  if (n === 1) return 1;\n  if (n === 2) return 1;\n\
    \  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n", "  // Write your code\
    \ here.\n  // if(n === 0 || n === 1) return 0;\n  if(n === 2) return 1;\n  return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n", "  //Write your code here.\n\
    \  if (n === 0 || n === 1 || n === 2) {\n    return 0;\n  }\n  return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3);\n}\n", "  let fib: number = n;\n  while (fib >\
    \ 1) {\n    fib += fib;\n  }\n  return fib;\n}\n\nconst fibfibSeq = fibfibSeq\
    \ as Seq<number>;\n", "  var fibfibArray = new Array(5);\n  fibfibArray[0] = 0;\n\
    \  fibfibArray[1] = 0;\n  fibfibArray[2] = 1;\n  fibfibArray[3] = 1;\n  fibfibArray[4]\
    \ = 1;\n  fibfibArray[n] = fibfibArray[n-1] + fibfibArray[n-2] + fibfibArray[n-3];\n\
    \  return fibfibArray[n];\n}\n", "  return n == 0 ? 0 : n == 1 ? 1 : fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3);\n}\n</code>\nSolution using TypeScript:\n<code>",
  "  return n < 2 ? n : fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n", "  // please\
    \ write code here\n  return n;\n}\n", "  return n <= 1 ? 0 : fibfib(n-2) + fibfib(n-3);\n\
    }\n", "  if (n === 0) return 0\n  if (n === 1) return 1\n  return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n}\n", "  if (n < 2) {\n    return 0;\n  }\n  return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\n<|/ file filename=index.js source=github\
    \ ext=.js |>", "    // write your code in JS Array\n    let fib = new Array(5);\n\
    \    fib[0] = 0;\n    fib[1] = 0;\n    fib[2] = 1;\n    fib[3] = fib[2] + fib[1];\n\
    \    fib[4] = fib[3] + fib[0];\n    return fib[n];\n}\n", "  if (n < 3) {\n  \
    \  return n;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n", " \
    \ let fib: number[] = []\n  let next: number = n\n  fib[0] = 0\n  while (fib[next]\
    \ !== next) {\n    fib[next] = fib[fib[next - 1]] + fib[fib[next - 2]] + fib[fib[next\
    \ - 3]]\n  }\n  return fib[n]\n}\n", "  if (n < 1) return 0;\n  if (n === 1) return\
    \ 0;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n", "  if (n < 2) {\n\
    \    return 0;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\n\
    console.log(fibfib(1));\nconsole.log(fibfib(5));\nconsole.log(fibfib(8));\nconsole.log(fibfib(2));\n\
    console.log(fibfib(3));</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>",
  "\tconst fib: number[] = [];\n\tlet i = 1;\n\tfibfib[i] = 0;\n\tfor (; i < n; i++)\
    \ {\n\t\tfibfib[i] = fibfib[i - 1] + fibfib[i - 2];\n\t}\n\treturn fibfib[n];\n\
    }\n", "  if (n < 0) return NaN;\n  if (n === 0 || n === 1) return 0;\n  return\
    \ fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}", "\tlet fibfibSequence: number[]\
    \ = [0, 1];\n\tfor (let i = 2; i <= n; i++) {\n\t\tfibfibSequence.push(fibfibSequence[i\
    \ - 1] + fibfibSequence[i - 2] + fibfibSequence[i - 3]);\n\t}\n\treturn fibfibSequence[n\
    \ - 1];\n}\n", "  if (n < 1) {\n    return 0;\n  } else if (n === 1) {\n    return\
    \ 1;\n  } else if (n === 2) {\n    return 1;\n  } else if (n === 3) {\n    return\
    \ 2;\n  } else {\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n\
    \  }\n}\n", "    if (n < 1) {\n        return 0;\n    }\n    if (n === 1) {\n\
    \        return 0;\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }", "  if (n < 0) return 0\n  if (n === 0) return 0\n  if (n === 1) return 1\n\
    \  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n", "  let result = 0\n \
    \ if (n <= 1) {\n    return result\n  }\n  result = fibfib(n - 1) + fibfib(n -\
    \ 2) + fibfib(n - 3)\n  return result\n}", "\treturn n < 3 ? n : fibfib(n-1) +\
    \ fibfib(n-2) + fibfib(n-3)\n}\n", "  var fib = 0;\n  for (var i = 0; i < n; i++)\
    \ {\n    fib = fib + (fibfib(i + 2) - fibfib(i + 1) + fibfib(i));\n  }\n  return\
    \ fibfib(n);\n}\n", "  if (n < 3) return 0;\n  return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\n", "\tif (n < 3) return 0;\n\telse if (n < 8) return 1;\n\
    \telse if (n < 13) return 2;\n\telse return (fibfib(n-1) + fibfib(n-2) + fibfib(n-3))\n\
    }\n", "  if (n < 2) {\n    return 0;\n  } else {\n    return fibfib(n - 1) + fibfib(n\
    \ - 2) + fibfib(n - 3);\n  }\n}\n", "  if (n === 0) return 0\n  if (n === 1) return\
    \ 1\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n", "  return n < 2 ?\
    \ n : fibfib(n-1) + fibfib(n-2);\n}\n", "  if (n <= 1) return 0;\n  return fibfib(n\
    \ - 1) + fibfib(n - 2) + fibfib(n - 3);\n}", "\tlet a = 0;\n\tlet b = 1;\n\tfor\
    \ (let i = 0; i < n; i++) {\n\t\ta = b;\n\t\tb = a + b;\n\t}\n\treturn b;\n}\n",
  "  if (n < 2) return 0\n  if (n === 1) return 0\n  return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3)\n}\n", "\tif (n == 0 || n == 1) {\n\t\treturn 0;\n\t}\n\treturn\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n", "  const fibfibArray = [0, 1];\n\
    \  for (let i = 2; i <= n; i++) {\n    fibfibArray[i] = fibfibArray[i - 1] + fibfibArray[i\
    \ - 2];\n  }\n  return fibfibArray[n];\n}\n", "  if (n === 0 || n === 1) {\n \
    \   return 0;\n  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n\
    }\n", "  // Only valid for n >= 1\n  if (n < 1) {\n    throw new Error(\"fibfib(n):\
    \ n must be >= 1.\");\n  }\n\n  let fib: number[] = [];\n  fib[0] = fibfib(0,\
    \ n);\n  fib[1] = fibfib(1, n);\n  fib[2] = fibfib(2, n);\n  for (let i = 2; i\
    \ < n; i++) {\n    fib[i] = fib[i - 1] + fib[i - 2];\n  }\n  return fib[n];\n\
    }\n\nconsole.log(fibfib(1));\nconsole.log(fibfib(5));\nconsole.log(fibfib(8));</code>\n\
    \nThe above is a slightly different implementation of the Fibonacci sequence in\
    \ O(1) space and time.  However, it doesn't use recursion at all, but rather loops\
    \ over a fixed array of numbers instead.  In other words, it is still O(n) space,\
    \ but O(1) time.\nThis approach is called memoization.  This is because you only\
    \ need to recompute fibfib(n) once -- after all, the result is the same for fibfib(n)\
    \ - and because you only need to compute it once -- you get O(1) space and time.\n\
    Memoization is the most common technique for improving performance, and it is\
    \ the basis for many algorithms.  The code below uses a dictionary to keep track\
    \ of which numbers we have already computed.  If we run into the same number again,\
    \ we can just return it from the dictionary instead of recomputing it.\n\n<code>",
  "  if (n < 0) {\n    throw RangeError('fibfib requires an integer >= 0.');\n  }\n\
    \  if (n < 2) {\n    return 0;\n  }\n  let fibfib = 0;\n  for (let i = 2; i <=\
    \ n; i++) {\n    fibfib += fibfib(i);\n  }\n  return fibfib;\n}\n", "  if (n <\
    \ 2) return 0;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}", "\tlet\
    \ fibfib: number[] = [0, 1, 1];\n\tfor (let i = 3; i <= n; i += 1) {\n\t\tfibfib[i]\
    \ = fibfib[i - 1] + fibfib[i - 2] + fibfib[i - 3];\n\t}\n\treturn fibfib[n];\n\
    }", "  if (n <= 0) return 0;\n  if (n <= 2) return 1;\n  return fibfib(n-1) +\
    \ fibfib(n-2) + fibfib(n-3);\n}\n", "  let fibfib = 0;\n  if (n === 0) {\n   \
    \ return 0;\n  } else if (n === 1) {\n    return 1;\n  } else {\n    fibfib +=\
    \ fibfib(n - 1);\n    fibfib += fibfib(n - 2);\n    return fibfib;\n  }\n}\n",
  "    if (n === 0) {\n        return 0\n    }\n    if (n === 1) {\n        return\
    \ 1\n    }\n    if (n === 2) {\n        return 1\n    }\n    if (n === 3) {\n\
    \        return 1\n    }\n    if (n === 4) {\n        return 2\n    }\n    if\
    \ (n >= 5 && n <= 8) {\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n\
    \    }\n    throw new Error(\"fibfib: Invalid fib index \" + n)\n}\n", "  if (n\
    \ < 2) return 0;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n", " \
    \ if (n < 2)\n    return 0;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\n\nconst fibfibs = Array.from({ length: 10 }, fibfib);\nconsole.log(fibfibs[8]);\n",
  "  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  return\
    \ fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n", "  if (n === 0) return\
    \ 0;\n  if (n === 1) return 1;\n  return fibfib(n-2) + fibfib(n-1);\n}\n", " \
    \ if (n < 3) {\n    return 0;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }", "    if (n === 0) {\n        return 0\n    } else if (n === 1) {\n       \
    \ return 1\n    } else if (n === 2) {\n        return 1\n    } else {\n      \
    \  return fibfib(n-1) + fibfib(n-2)\n    }\n}\n", "  if (n < 2) return 0;\n  if\
    \ (n === 2) return 1;\n  return fibfib(n-1) + fibfib(n-2);\n}\n", "  if (n < 0)\
    \ throw new RangeError('fibfib(n): n must be >= 0');\n  return n <= 2 ? n : fibfib(n-1)\
    \ + fibfib(n-2);\n}\n", "  if (n < 2) return 0;\n  if (n < 3) return 1;\n  return\
    \ fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n", "\tif (n < 0) throw new\
    \ Error(\"negative input\");\n\tlet memo: number[] = [];\n\tfor (let i = 0; i\
    \ < n; i++) {\n\t\tmemo[i] = memo[i - 1] + memo[i - 2] + memo[i - 3];\n\t}\n\t\
    return memo[n - 1];\n}\n", "  if (n <= 0) {\n    return 0;\n  }\n  if (n === 1)\
    \ {\n    return 1;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\
    </code>\n<|/ a tags=fibonacci,recursion,javascript |>\n<| c |>\nThanks for your\
    \ help! I was trying to do it with loops, but I haven't been able to figure it\
    \ out. Your solution works great.\n<|/ c |>\n<| a tags=fibonacci,recursion,javascript\
    \ |>\n<code>", "    let fibfib = 0;\n    for(let i = 1; i <= n; i++) {\n     \
    \   fibfib = fibfib + i;\n    }\n    return fibfib;\n}\n", "  if (n <= 2) return\
    \ 0\n  if (n === 1 || n === 2) return 1\n  return fibfib(n - 1) + fibfib(n - 2)\n\
    }\nconst fibfib1: number = fibfib(1)\nconst fibfib2: number = fibfib(5)\nconst\
    \ fibfib3: number = fibfib(8)\n", "  if (n === 0) {\n    return 0;\n  }\n\n  if\
    \ (n === 1) {\n    return 1;\n  }\n\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\n", "  if( n < 0 ){\n    return -1;\n  }\n  if( n <= 1 ){\n    return 0;\n \
    \ }\n  let a = fibfib(n-1);\n  let b = fibfib(n-2);\n  let c = fibfib(n-3);\n\
    \  return a + b + c;\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\nThe problem\
    \ is in your last line. The fibfib(n) function returns -1 for n < 1. The algorithm\
    \ is supposed to stop if this happens, which is what happens in the last line,\
    \ but it doesn't.\nYou can fix this by adding an else clause.\n<code>", "    if\
    \ (n <= 1) {\n        return 0\n    }\n    return fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3)\n}\n", "\tif (n === 0) {\n\t\treturn 0;\n\t} else if (n === 1) {\n\
    \t\treturn 1;\n\t} else {\n\t\treturn fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    \t}\n}\n", "\tif(n===0){\n\t\treturn 0;\n\t}\n\tif(n===1){\n\t\treturn 0;\n\t\
    }\n\tif(n===2){\n\t\treturn 1;\n\t}\n\treturn fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\n", "    if (n == 1) return 0;\n    if (n == 2) return 1;\n    return fibfib(n-1)\
    \ + fibfib(n-2);\n}\n", "  if (n < 2) return 0;\n  return fibfib(n-1) + fibfib(n-2);\n\
    }", "  if (n === 0) {\n    return 0;\n  }\n\n  if (n === 1) {\n    return 1;\n\
    \  }\n\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n", "  if (n\
    \ < 1) {\n    return 0;\n  }\n  if (n === 1) {\n    return 0;\n  }\n  return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3);\n}\n", "  if (n < 0) throw new Error(\"input should\
    \ be greater then 0\");\n  if (n === 0 || n === 1) {\n    return 0;\n  }\n  if\
    \ (n === 2) return 1;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n",
  "\tif (n === 0) {\n\t\treturn 0;\n\t} else if (n === 1) {\n\t\treturn 1;\n\t} else\
    \ if (n === 2) {\n\t\treturn 1;\n\t} else if (n >= 3) {\n\t\treturn fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3);\n\t} else {\n\t\treturn 0;\n\t}\n}\n<|/ file filename=fibonacci.ts\
    \ |>", "  let fib: number[] = [];\n  fib[0] = 0;\n  fib[1] = 0;\n  fib[2] = 1;\n\
    \  for (let i = 2; i < n; i++) {\n    fib.push(fib[i - 1] + fib[i - 2] + fib[i\
    \ - 3]);\n  }\n  return fib[n - 1];\n}\n", "  if (n < 2) {\n    return 0;\n  }\n\
    \  if (n === 2) {\n    return 1;\n  }\n  return fibfib(n-1) + fibfib(n-2);\n}\n",
  "    if (n < 0) throw Error(\"fibfib called with negative argument \" + n); //Check\
    \ for negative number\n    if (n < 1) return 0;\n    if (n < 2) return 1;\n  \
    \  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n", "  // TODO: implement\
    \ fibfib(n) efficiently\n  if (n <= 2) {\n    return 0;\n  }\n  return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3);\n}", "  if (n === 0) {\n    return 0;\n  }\n  if\
    \ (n === 1) {\n    return 1;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\n", "  if (n === 0) {\n    return 0;\n  } else if (n <= 2) {\n    return n;\n\
    \  } else if (n === 3) {\n    return 1;\n  } else {\n    return fibfib(n-1) +\
    \ fibfib(n-2) + fibfib(n-3);\n  }\n}", "  if (n < 3) {\n    return 0\n  }\n  return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n", "  if (n === 0 || n === 1) {\n\
    \    return 0;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n",
  "  return n > 3 ? fibfib(n-1) + fibfib(n-2) + fibfib(n-3) : n;\n}\n", "  if (n <\
    \ 0) return NaN;\n  if (n < 2) return 0;\n  if (n < 5) return 1;\n  return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3);\n}", "  if (n < 3) return 0;\n  return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3);\n}\n", "    if (n === 0 || n === 1 || n === 2)\
    \ {\n        return n;\n    } else {\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n    }\n}\n", "  if (n < 2) {\n    return 0;\n  }\n  return fibfib(n-2)\
    \ + fibfib(n-1);\n}\nvar fibfibSequence: number[] = [0, 1, 1, 2, 3, 5, 8, 13,\
    \ 21, 34, 55];\nvar fibfibfibSequence: number[] = [0, 0, 0, 0, 0, 1, 1, 1, 1,\
    \ 1];\nassert(fibfibSequence(9) == fibfibfibSequence(9));\nassert(fibfibSequence(10)\
    \ == fibfibfibSequence(10));\nassert(fibfibSequence(11) == fibfibfibSequence(11));\n",
  "  if (n < 3) {\n    return 0;\n  }\n  let a = 0;\n  let b = 1;\n  while (n > 1)\
    \ {\n    let current = a + b;\n    a = b;\n    b = current;\n    n -= 1;\n  }\n\
    \  return a;\n}\nconsole.log(fibfib(1));\nconsole.log(fibfib(5));\nconsole.log(fibfib(8));",
  "  if (n <= 2) {\n    return 0\n  }\n  if (n === 3) {\n    return 1\n  }\n  if (n\
    \ === 4) {\n    return 1\n  }\n  if (n === 5) {\n    return 2\n  }\n  return fibfib(n\
    \ - 1) + fibfib(n - 2) + fibfib(n - 3)\n}\n", "  if (n < 1) return 0;\n  if (n\
    \ < 2) return 1;\n  return fibfib(n-2) + fibfib(n-3);\n}\n", "    if (n < 0) return\
    \ NaN;\n    if (n <= 2) return 0;\n    let fib1 = 1;\n    let fib2 = 1;\n    for\
    \ (let i = 3; i <= n; i = 3 * i + 2) {\n        fib2 = fib1;\n        fib1 = fib1\
    \ + fib2;\n    }\n    return fib1;\n}", "  if (n < 2) {\n    return 0;\n  } else\
    \ if (n === 2) {\n    return 1;\n  } else {\n    return fibfib(n-2) + fibfib(n-1);\n\
    \  }\n}", "    if (n <= 3) {\n        return n\n    } else {\n        return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3)\n    }\n}\n\nconst log42_2 = Math.log(42.2)\nconst\
    \ log42_4 = Math.log(42.4)\nconst log42_6 = Math.log(42.6)\nconst log42_8 = Math.log(42.8)\n\
    const log42_10 = Math.log(42.10)\nconst log42_12 = Math.log(42.12)\nconst log42_14\
    \ = Math.log(42.14)\nconst log42_16 = Math.log(42.16)\nconst log42_18 = Math.log(42.18)\n\
    const log42_20 = Math.log(42.20)\nconst log42_22 = Math.log(42.22)\nconst log42_24\
    \ = Math.log(42.24)\nconst log42_26 = Math.log(42.26)\nconst log42_28 = Math.log(42.28)\n\
    const log42_30 = Math.log(42.30)\nconst log42_32 = Math.log(42.32)\nconst log42_34\
    \ = Math.log(42.34)\nconst log42_36 = Math.log(42.36)\nconst log42_38 = Math.log(42.38)\n\
    const log42_40 = Math.log(42.40)\nconst log42_42 = Math.log(42.42)\nconst log42_44\
    \ = Math.log(42.44)\nconst log42_46 = Math.log(42.46)\nconst log42_48 = Math.log(42.48)\n\
    const log42_50 = Math.log(42.50)\nconst log42_52 = Math.log(42.52)\nconst log42_54\
    \ = Math.log(42.54)\nconst log42_56 = Math.log(42.56)\nconst log42_58 = Math.log(42.58)\n\
    const log42_60 = Math.log(42.60)\nconst log42_62 = Math.log(42.62)\nconst log42_64\
    \ = Math.log(42.64)\nconst log42_66 = Math.log(42.66)\nconst log42_68 = Math.log(42.68)\n\
    const log42_70 = Math.log(42.70)\nconst log42_72 = Math.log(42.72)\nconst log42_74\
    \ = Math.log(42.74)\nconst log42_76 = Math.log(42.76)\nconst log42_78 = Math.log(42.78)\n\
    const log42_80 = Math.log(42.80)\nconst log42_82 = Math.log(42.82)", "  if (n\
    \ < 2) {\n    return 0;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\n\nconsole.log(fibfib(4));\n", "  if (n === 0) {\n    return 0;\n  }\n  if (n\
    \ <= 2) {\n    return n;\n  }\n  return fibfib(n - 1) + fibfib(n - 2);\n}", "\t\
    if (n === 0) {\n\t\treturn 0;\n\t}\n\telse if (n === 1) {\n\t\treturn 1;\n\t}\n\
    \telse if (n === 2) {\n\t\treturn 1;\n\t}\n\telse if (n <= 3) {\n\t\treturn 1;\n\
    \t}\n\telse {\n\t\treturn fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\t}\n}\n",
  "    if (n == 0) return 0;\n    if (n == 1) return 1;\n    if (n == 2) return 1;\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n", "  let fib: number;\n\
    \  fib = 0;\n  while (n > 0) {\n    fib = fib + fibfib(n-1);\n    n = n - 1;\n\
    \  }\n  return fib;\n}\n</code>\n<|/ q dscore=1 tags=javascript,performance |>\n\
    <| c |>\nWhy don't you profile both versions and see which is faster?\n<|/ c |>\n\
    <| c |>\nBecause they're obviously doing different things and I'm having trouble\
    \ seeing how they're doing different things.\n<|/ c |>\n<| c |>\nIt's probably\
    \ a duplicate: https://stackoverflow.com/questions/36865212/how-to-find-the-fibonacci-number-with-javascript\n\
    <|/ c |>\n<| c |>\nI understand that, but I don't see how the answers in that\
    \ link are relevant to my question.\n<|/ c |>\n<| c |>\nThe top answer has `O(n)`\
    \ complexity. The top answer uses `O(1)` memory, the bottom answer uses `O(log(n))`\
    \ memory and `O(log(n))` time. Your question doesn't make sense.\n<|/ c |>\n<|\
    \ a tags=javascript,performance |>\nThe fastest way would be to simply use a loop:\n\
    \n<code>", "  if (n === 0) {\n    return 0;\n  } else if (n === 1) {\n    return\
    \ 1;\n  } else if (n === 2) {\n    return 1;\n  } else {\n    return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3);\n  }\n}\n", "  if (n < 2) return 0;\n  if (n ===\
    \ 2) return 1;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n", "  if\
    \ (n === 0) {\n    return 0;\n  } else if (n === 1) {\n    return 1;\n  } else\
    \ {\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n  }\n}\n", "  if (n\
    \ < 2) {\n    return 0\n  }\n  if (n < 3) {\n    return 1\n  }\n  if (n < 5) {\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n  }\n  if (n < 9) {\n   \
    \ return fibfib(n-2) + fibfib(n-3) + fibfib(n-5)\n  }\n  return fibfib(n-7)\n}",
  "    if (n === 0 || n === 1) {\n        return 0;\n    }\n    if (n === 2) {\n \
    \       return 1;\n    }\n    return fibfib(n-1) + fibfib(n-2);\n}\n", "    if\
    \ (n < 2) {\n        return 0;\n    }\n    if (n === 2) {\n        return 1;\n\
    \    }\n    return fibfib(n-1) + fibfib(n-2);\n}\n", "    if (n < 2) {\n     \
    \   return 0;\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n",
  "  if (n < 0) {\n    throw RangeError('fibfib(negative index) called on negative\
    \ index');\n  }\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return\
    \ 1;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n", "  if (n <\
    \ 2) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  return fibfib(n\
    \ - 1) + fibfib(n - 2);\n}\n\nconst fib = (a: number, b: number) => a + b;\n",
  "  if (n === 0 || n === 1) {\n    return 0;\n  }\n  return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\n", "  if (n < 2) {\n    return 0;\n  } else if (n === 2)\
    \ {\n    return 1;\n  } else if (n === 3) {\n    return 1;\n  }\n  return fibfib(n-2)\
    \ + fibfib(n-1);\n}\n", "  let fib: number[] = [0, 1];\n  for (let i = 2; i <=\
    \ n; i++) {\n    fib[i] = fib[i - 1] + fib[i - 2];\n  }\n  return fib[n];\n}\n\
    </code>\n<|/ a dscore=0 tags=fibonacci,javascript |>\n<| a tags=fibonacci,javascript\
    \ |>\n<code>", "  if (n === 0) {\n    return 0;\n  } else if (n <= 3) {\n    return\
    \ 1;\n  } else {\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n  }\n}\n",
  "\tif (n === 0) return 0;\n\tif (n === 1) return 1;\n\tif (n === 2) return 1;\n\t\
    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n", "  if (n < 2) { return\
    \ 0; }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n", "\tif (n ===\
    \ 0) {\n\t\treturn 0;\n\t}\n\tif (n === 1) {\n\t\treturn 0;\n\t}\n\tif (n ===\
    \ 2) {\n\t\treturn 1;\n\t}\n\treturn fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\n", "    // The Fibbonacci sequence is defined by the recurrence relation:\n\
    \    //\n    // fibfib(0) == 0\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    //\n    // Please write a function to efficiently compute\
    \ the n-th element of the Fibbonacci number sequence.\n    if (n == 0) {\n   \
    \     return 0;\n    } else if (n == 1) {\n        return 0;\n    } else if (n\
    \ == 2) {\n        return 1;\n    }\n\n    return fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3);\n}\n", "  if (n < 2) return 0;\n  if (n == 2) return 1;\n  return\
    \ fibfib(n-1) + fibfib(n-2);\n}\n", "  if (n === 0) {\n    return 0;\n  }\n  if\
    \ (n === 1) {\n    return 1;\n  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n\
    \ - 3);\n}\n", "  if (n === 0) {\n    return 0;\n  } else if (n === 1) {\n   \
    \ return 1;\n  } else if (n === 2) {\n    return 1;\n  } else if (n === 3) {\n\
    \    return 0;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n",
  "  if (n === 0 || n === 1) return 0;\n  if (n === 2) return 1;\n  return fibfib(n-1)\
    \ + fibfib(n-2);\n}\n", "  if (n < 0 || n >= 1000) {\n    throw new Error(`FibFib\
    \ number sequence must be of range [0,1000]`);\n  }\n  if (n === 0) return 0;\n\
    \  if (n === 1) return 1;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\n", "  if (n < 3) {\n    return 0\n  }\n  return fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3)\n}\n", "\tif (n === 0) {\n\t\treturn 0;\n\t} else if (n <= 3) {\n\
    \t\treturn 1;\n\t} else {\n\t\tlet fibfib1: number = fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n\t\treturn fibfib1;\n\t}\n}\n", "  if (n < 3) {\n    return\
    \ 0\n  }\n\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n}\n", "  if\
    \ (n < 2) return 0;\n  return fibfib(n-2) + fibfib(n-1);\n}\n", "  if (n < 3)\
    \ {\n    return 0;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n",
  "  if (n === 0) return 0;\n  if (n === 1) return 0;\n  return fibfib(n-1) + fibfib(n-2);\n\
    }\n", "  if (n < 1) return 0;\n  if (n === 1) return 0;\n  return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3);\n}\n", "    if (n === 0 || n === 1) {\n       \
    \ return n;\n    }\n    return fibfib(n-1) + fibfib(n-2);\n}\n", "  if (n <= 2)\
    \ {\n    return 0;\n  }\n  if (n <= 4) {\n    return 1;\n  }\n  if (n <= 8) {\n\
    \    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n  }\n  return fibfib(n\
    \ - 1) + fibfib(n - 2) + fibfib(n - 3) + fibfib(n - 4) + fibfib(n - 5) + fibfib(n\
    \ - 6) + fibfib(n - 7);\n}", "  if (n === 0) return 0;\n  if (n === 1) return\
    \ 1;\n  return fibfib(n-2) + fibfib(n-1);\n}\n\nconsole.log(fibfib(1));\nconsole.log(fibfib(5));\n\
    console.log(fibfib(8));</code>\n<|/ a dscore=2 tags=fibonacci,algorithm,recursion,javascript\
    \ |>\n<| c |>\nI wouldn't use recursion here. It would be just as efficient to\
    \ calculate the n-th element of Fibonacci using a while loop.\n<|/ c |>\n<| c\
    \ |>\nI didn't know that `while` was faster than `recursion`. Thanks :)\n<|/ c\
    \ |>\n<| a dscore=2 |>\nRecursion is pretty slow but you can achieve the same\
    \ result with iteration and memoization with dynamic programming.\n\n<code>",
  "  var fibfibs = [0, 2, 1];\n  var result = fibfibs[n];\n  while (fibfibs[n] <=\
    \ n) {\n    result = fibfibs[n] + fibfibs[n - 1] + fibfibs[n - 2];\n    fibfibs[n]\
    \ = result;\n  }\n  return result;\n}\n", "  if (n < 1) {\n    return 0;\n  }\n\
    \  if (n === 1 || n === 2) {\n    return 1;\n  }\n  return fibfib(n-1) + fibfib(n-2);\n\
    }\n", "  if (n < 3) return 0;\n  return fibfib(n-2) + fibfib(n-3) + fibfib(n-4);\n\
    }\n", "    if (n < 0) throw new RangeError(`fibfib: n must be >= 0`);\n    if\
    \ (n === 0) return 0;\n    if (n === 1) return 1;\n    if (n === 2) return 1;\n\
    \    let total = 0;\n    let current = 1;\n    let i = 2;\n    while (i <= n)\
    \ {\n        current = fibfib(i + 1) * current;\n        total = total + current;\n\
    \        i++;\n    }\n    return total;\n}", "  let a: number;\n  let b: number;\n\
    \  let c: number;\n\n  if (n === 0) return 0;\n  if (n === 1) return 1;\n  if\
    \ (n === 2) return 1;\n  if (n === 3) return 1;\n\n  a = fibfib(n - 1);\n  b =\
    \ fibfib(n - 2);\n  c = fibfib(n - 3);\n\n  return a + b + c;\n}\n", "  if (n\
    \ < 2) {\n    return 0;\n  }\n\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\n", "  if (n === 0) return 0;\n  if (n === 1) return 1;\n  return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3);\n}\n", "\tif (n === 0 || n === 1)\n\t\treturn 0;\n\
    \n\treturn fibfib(n-2) + fibfib(n-1);\n}\n", "  if (n <= 3) {\n    return 0;\n\
    \  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n", "  let fib: number[]\
    \ = [];\n  for (let i = 0; i <= n; i++) {\n    fib.push(0);\n  }\n  for (let i\
    \ = 0; i <= n; i++) {\n    fib[i] = fib[i - 1] + fib[i - 2] + fib[i - 3];\n  }\n\
    \  return fib[n - 1];\n}\n\nconst fibfib2 = (n: number) => fibfib(n);\n\nconsole.log(fibfib2(2));\n\
    console.log(fibfib2(10));\n\nconst fibfib3 = () => {\n  let fib: number[] = [];\n\
    \  for (let i = 0; i <= n; i++) {\n    fib.push(0);\n  }\n  for (let i = 0; i\
    \ <= n; i++) {\n    fib[i] = fib[i - 1] + fib[i - 2] + fib[i - 3];\n  }\n  return\
    \ fib[n - 1];\n};\n\nconsole.log(fibfib3(2));\nconsole.log(fibfib3(10));\n", "\t\
    let fib: number;\n\tif (n <= 0) {\n\t\tfib = 0;\n\t} else if (n === 1) {\n\t\t\
    fib = 0;\n\t} else if (n === 2) {\n\t\tfib = 1;\n\t} else {\n\t\tfib = (fibfib(n\
    \ - 1) + fibfib(n - 2)) + fibfib(n - 3);\n\t}\n\treturn fib;\n}\n", "  if (n <\
    \ 1) return 0;\n  if (n === 1 || n === 2) return 1;\n  return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}", "  // write your code here\n  if (n === 0 || n === 1) {\n\
    \    return 0;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}", " \
    \ if (n === 0 || n === 1)\n    return 0\n\n  if (n === 2)\n    return 1\n\n  return\
    \ fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n}\n", "  if (n < 1) return 0;\n\
    \  if (n < 2) return 1;\n  return fibfib(n-2) + fibfib(n-3);\n}\n", "  if (n <\
    \ 2) {\n    return 0;\n  } else if (n < 3) {\n    return 1;\n  } else {\n    return\
    \ fibfib(n-2) + fibfib(n-1);\n  }\n}\n", "  if (n < 2) return 0;\n  if (n < 8)\
    \ return 1;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n", "  if (n\
    \ < 2) {\n    return 0;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\n\n<|/ file dstars=0 |>\n<| a tags=recursion,javascript,fibonacci,functional-programming\
    \ dscore=0 |>\n<code>", "  if (n <= 0) return 0;\n  if (n === 1) return 1;\n \
    \ return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n", "  return n === 1 ? 0\
    \ : fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n", "  if (n === 0 || n\
    \ === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n", "  let fib: number[] = [];\n\
    \  fib[0] = 0;\n  fib[1] = 0;\n  fib[2] = 1;\n\n  for (let i = 3; i < n; i++)\
    \ {\n    fib.push(fib[i - 1] + fib[i - 2] + fib[i - 3]);\n  }\n\n  return fib[n];\n\
    }\n", "  let fibfib = 0\n  if (n == 0) {\n    return 0\n  }\n  if (n == 1) {\n\
    \    return 1\n  }\n  fibfib = (fibfib + fibfib + fibfib + fibfib + fibfib + fibfib)\
    \ % 10;\n  return fibfib;\n}\n", "  if (n < 1 || n === 1) {\n    return 0;\n \
    \ }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n", "  if (n < 0 ||\
    \ n > 100) return 0\n  if (n === 0 || n === 1) return 0\n  if (n === 2) return\
    \ 1\n  return fibfib(n-1) + fibfib(n-2)\n}\n", "\tif (n === 0 || n === 1) return\
    \ 0;\n\treturn fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n", "    if (n < 1)\
    \ {\n        return 0;\n    }\n    if (n === 1) {\n        return 0;\n    }\n\
    \    return fibfib(n-2) + fibfib(n-1);\n}\n", "  return n < 2 ? 0 : (fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3))\n}\n</code>\n<|/ a dscore=1 tags=algorithm,recursion\
    \ |>\n<| a tags=algorithm,recursion |>\nThe following code gives the correct output\
    \ in java\n<code>\npublic class FibFib {\n\n    public static void main(String[]\
    \ args) {\n\n        Scanner sc = new Scanner(System.in);\n\n        int n = sc.nextInt();\n\
    \n        int fibfib = 0;\n\n        if(n > 1){\n\n            fibfib = fibfib(n-1)\
    \ + fibfib(n-2);\n\n            System.out.println(fibfib);\n\n        }else{\n\
    \            System.out.println(fibfib);\n        }\n    }\n\n    public static\
    \ int fibfib(int n){\n\n        if(n > 0){\n            return fibfib(n-1) + fibfib(n-2);\n\
    \        }else{\n            return 1;\n        }\n    }\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a |>\n<code>\nusing System;\n", "  if (n === 0 || n === 1) return 0;\n\
    \  return fibfib(n-2) + fibfib(n-1);\n}\n", "  if (n < 2) {\n    return 0;\n \
    \ }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}", "  if (n === 0) return\
    \ 0;\n  if (n === 1) return 1;\n  return fibfib(n-1) + fibfib(n-2);\n}\n", " \
    \ if(n<0) throw new Error(\"FibFib: fibfib: Negative Fibonacci number.\")\n  return\
    \ fibfib(n-2) + fibfib(n-1);\n}\n", "  if (n <= 0) {\n    return 0;\n  }\n  if\
    \ (n === 1 || n === 2) {\n    return 1;\n  }\n  return fibfib(n-1) + fibfib(n-2);\n\
    }\n", "  const fibonacci = new Array(n+1).fill(0).map((x,i)=>i===0 || i===1 ?\
    \ 0:fibonacci[i-1]+fibonacci[i-2]);\n  return fibonacci[n];\n}", "  if (n ===\
    \ 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3);\n}\n", "  // Your code here\n}\n", "  if (n ===\
    \ 0) return 0;\n  if (n === 1) return 1;\n  return fibfib(n-1) + fibfib(n-2) +\
    \ fibfib(n-3);\n}\n", "  if (n < 0) throw new RangeError();\n  if (n === 0 ||\
    \ n === 1) return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n\
    }\n", "\tif (n <= 2) return 0;\n\tif (n === 0) return 0;\n\treturn fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3);\n}\n", "  if (n < 3) {\n    return 0\n  }\n  return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n", "  if (n === 1) {\n    return\
    \ 0;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  return fibfib(n - 1) + fibfib(n\
    \ - 2);\n}\n", "  if (n <= 0) return 0;\n  if (n === 1) return 1;\n  return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3);\n}\n", "  if (n < 2) return 0;\n  if (n < 3) return\
    \ 1;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}", "  if (n === 0) {\n\
    \    return 0;\n  }\n\n  if (n === 1) {\n    return 1;\n  }\n\n  if (n === 2)\
    \ {\n    return 1;\n  }\n\n  if (n >= 8) {\n    return fibfib(n-2) + fibfib(n-3);\n\
    \  }\n\n  return fibfib(n-1) + fibfib(n-2);\n}\n", "  if (n === 0 || n === 1)\
    \ {\n    return 0;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n",
  "  if (n < 0 || n >= fib.length) {\n    return 0;\n  }\n  return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\n", "  if (n === 0 || n === 1) return 0;\n  return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3);\n}\n", "  if (n < 0 || n >= 20) {\n    return -1;\n\
    \  }\n  if (n === 0 || n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return\
    \ 1;\n  }\n  return fibfib(n-2) + fibfib(n-1);\n}\n\nconsole.log(fibfib(1));\n\
    console.log(fibfib(5));\nconsole.log(fibfib(8));</code>\n<|/ a tags=python,recursion\
    \ dscore=3 |>\n<| c |>\nThank you for your help. I do not have much experience\
    \ with recursion and I have not learned about it yet. Thanks though.\n<|/ c |>\n\
    <| a tags=python,recursion dscore=2 |>\nThe reason your code doesn't work is that\
    \ your return statements are inside the else block, which means that they are\
    \ never reached.  Instead, they should be outside of the else block, like this:\n\
    <code>\ndef fibfib(n): \n    if n <= 2:\n        return n\n    else:\n       \
    \ return fibfib(n-2) + fibfib(n-1)\n</code>\nYour code also has some issues in\
    \ that the first return statement is unreachable because of the way you have structured\
    \ your if statement.  The first if statement should be return n, and then your\
    \ other if statements should be if n < 2 else return fibfib(n-2) + fibfib(n-1)\n\
    <|/ a |>\n<| c |>\nThanks. That helped. Also, I had it structured wrong.\n<|/\
    \ c |>\n<| a tags=python,recursion |>\nHere's a way in Python:\n<code>\ndef fibfib(n):\n\
    \    if n < 2:\n        return 0\n    if n == 2:\n        return 1\n    return\
    \ fibfib(n-2) + fibfib(n-1)\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThe last `return`\
    \ needs to be outside of the `if`.\n<|/ c |>\n<| c |>\nThanks. That helped. Also,\
    \ I had it structured wrong.\n<|/ c |>\n<| c |>\n- I fixed it.  Thanks.\n<|/ c\
    \ |>\n<| a tags=python,recursion |>\nI realized that someone already posted this\
    \ on Python, so I thought I would post an answer in Java.\n<code>\npublic class\
    \ Fibonacci {\n    static int fib(int n) {\n        if (n <= 2)\n            return\
    \ n;\n        else\n            return fib(n-1) + fib(n-2);\n    }\n\n    public\
    \ static void main(String[] args) {\n        System.out.println(fib(0));\n   \
    \     System.out.println(fib(1));\n        System.out.println(fib(2));\n     \
    \   System.out.println(fib(3));\n    }\n}\n</code>\n<|/ a dscore=1 |>\n<| a |>\n\
    <code>\n", "  var fibfibArray = [0, 1];\n  while (fibfibArray.length < n) {\n\
    \    fibfibArray.push(fibfibArray[fibfibArray.length - 1] + fibfibArray[fibfibArray.length\
    \ - 1]);\n  }\n  return fibfibArray[n];\n}\n", "  if (n < 3) {\n    return 0;\n\
    \  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n", "\tlet fibfib =\
    \ 0;\n\tfor (let i = 1; i <= n; i++) {\n\t\tfibfib = fibfib + i;\n\t}\n\treturn\
    \ fibfib;\n}", "  // Write your code here\n  let fibnum = 0;\n  if (n == 0) return\
    \ 0;\n  if (n == 1) return 1;\n  if (n == 2) return 2;\n  if (n % 2 == 0) return\
    \ fibfib(n-1) + fibfib(n-2);\n  if (n % 2 == 1) return fibfib(n-1) + fibfib(n-3)\
    \ + fibfib(n-4);\n}\nconsole.log(fibfib(1));\nconsole.log(fibfib(5));\nconsole.log(fibfib(8));",
  "  return n < 2 ? n : fibfib(n-1) + fibfib(n-2);\n}\n", "  if (n < 3) {\n    return\
    \ 0\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n", "  if (n < 1)\
    \ {\n    return 0;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3);\n}\n", "\tif (n < 1) {\n\t\treturn 0;\n\t}\n\t\
    if (n < 3) {\n\t\treturn 1;\n\t}\n\treturn fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\n", "  let fib: number[] = [];\n  if (n === 0) return 0;\n  if (n === 1) return\
    \ 0;\n  if (n === 2) return 1;\n  if (n >= 3 && n <= 8) return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n  for (let i = 0; i < n; i++) {\n    fib.push(fibfib(i-1)+fibfib(i-2)+fibfib(i-3));\n\
    \  }\n  return fib[n - 1];\n}", "  if (n < 3) {\n    return 0;\n  }\n  if (n ===\
    \ 3) {\n    return 1;\n  }\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\n", "  if (n <= 1) {\n    return 0;\n  }\n  return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\n", "  return n < 2 ? 0 : n < 3 ? 1 : fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\n", "    if (n === 0 || n === 1) {\n        return 0;\n  \
    \  }\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n", "  // TODO:\
    \ Implement Function\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
