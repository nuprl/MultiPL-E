name: HumanEval_155_even_odd_count
language: ts
prompt: "//Given an integer. return an array that has the number of even and odd digits\
  \ respectively.\n// Example:\n// >>> even_odd_count(-12)\n// [1, 1]\n// >>> even_odd_count(123)\n\
  // [1, 2]\nfunction even_odd_count(num: number): [number, number] {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = even_odd_count;\n  assert.deepEqual(candidate(7),[0,\
  \ 1]);\n  assert.deepEqual(candidate(-78),[1, 1]);\n  assert.deepEqual(candidate(3452),[2,\
  \ 2]);\n  assert.deepEqual(candidate(346211),[3, 3]);\n  assert.deepEqual(candidate(-345821),[3,\
  \ 3]);\n  assert.deepEqual(candidate(-2),[1, 0]);\n  assert.deepEqual(candidate(-45347),[2,\
  \ 3]);\n  assert.deepEqual(candidate(0),[1, 0]);\n}\n\ntest();"
completions: ["  let result: [number, number] = [num.toString().split('').reduce((prev,\
    \ curr) => +prev + +curr), num.toString().split('').reduce((prev, curr) => +prev\
    \ + +curr)];\n  result = result[0].split('').map((item) => +item);\n  result.unshift(1);\n\
    \  result.pop();\n  return result;\n}\n", "  const count = [0, 0];\n  for (let\
    \ i = 0; i < num.length; i++) {\n    if (num.charAt(i) === '-') {\n      count[0]++;\n\
    \    } else {\n      count[1]++;\n    }\n  }\n  return count;\n}\n", "  const\
    \ sum = (num + \"\").split(\"\").reduce((sum, num) => {\n    if (num === \"-\"\
    ) {\n      return sum + parseInt(num, 10);\n    }\n    return sum + parseInt(num,\
    \ 10) + 1;\n  }, 0);\n\n  const even = parseInt(sum / 2);\n  const odd = sum %\
    \ 2;\n\n  return [even, odd];\n}\n", "  const evenDigits = Math.floor(num / Math.pow(10,\
    \ 0));\n  const oddDigits = num % Math.pow(10, 0);\n\n  return [evenDigits, oddDigits];\n\
    }\n</code>\nAnd here is the full solution which I hope is self-explanatory:\n\
    <code>", "  let evenCount = 0\n  let oddCount = 0\n  num = num.toString()\n  num.split('').forEach(item\
    \ => {\n    if (item % 2 == 0) {\n      evenCount += 1\n    } else {\n      oddCount\
    \ += 1\n    }\n  })\n  return [evenCount, oddCount]\n}\n", "    let even_count\
    \ = 1;\n    let odd_count = 1;\n    while (num > 0) {\n        num = num / 10;\n\
    \        if (num % 2 === 0) {\n            even_count++;\n        } else {\n \
    \           odd_count++;\n        }\n    }\n    return [even_count, odd_count];\n\
    }\n", "  const even_odd_array = Array(num).fill(0);\n\n  for (let i = 0; i < num;\
    \ i++) {\n    if (num % 2 == 0) {\n      even_odd_array[i]++;\n    } else {\n\
    \      even_odd_array[i]--;\n    }\n  }\n  return even_odd_array;\n}\n", "  const\
    \ digits = String(num).split('');\n  return [\n    digits.length % 2 === 1 ? digits.length\
    \ : digits.length + digits.length / 2,\n    digits.length % 2 === 0 ? digits.length\
    \ : digits.length / 2\n  ];\n}\n", "  let result = [0, 0]\n  while (num >= 0)\
    \ {\n    const remainder = num % 10\n    const evenOrOdd = remainder % 2 === 0\
    \ ? 0 : 1 // odd = 0, even = 1\n    result[evenOrOdd] += 1\n    num = Math.floor(num\
    \ / 10)\n  }\n  return result\n}\n", "  let array: number[] = [];\n  let evenCount:\
    \ number = 0;\n  let oddCount: number = 0;\n  for (let i: number = 0; i < num;\
    \ i++) {\n    if (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n\
    \    }\n  }\n  array.push(evenCount);\n  array.push(oddCount);\n  return array;\n\
    }\n", "    let arr: number[] = [];\n    for (let i = 0; i <= Math.ceil(num); i++)\
    \ {\n        let index = num % 10;\n        if (index === 0) {\n            arr.push(i);\n\
    \            num = Math.floor(num / 10);\n        } else {\n            num =\
    \ Math.floor(num / 10);\n        }\n    }\n    if (num > 0) {\n        arr.push(num);\n\
    \    }\n    return arr;\n}\n", "  let evenCount = 0;\n  let oddCount = 0;\n  while\
    \ (num > 0) {\n    num = num / 10;\n    if (num % 2 === 0) {\n      evenCount++;\n\
    \    } else {\n      oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n\
    }\n</code>\n<|/ a |>\n<| c |>\nThis answer should include the [official documentation](https://stackoverflow.com/documentation/javascript/282/even-odd-numbers-array#t=201701061419153481856)\
    \ for `Math.floor` and `Math.ceil`. Since you're dealing with floats, `Math.floor`\
    \ won't work. `Math.ceil` isn't that useful if you're working with fractions.\n\
    <|/ c |>\n<| c |>\nI totally agree that it is better to use Math.round. But that\
    \ isn't the point of the question, I just answered the question asked. It would\
    \ be better to use the methods already explained in other answers.\n<|/ c |>\n\
    <| c |>\nThis is exactly what I was looking for. Thanks\n<|/ c |>\n<| a |>\n<code>",
  "  if (num < 0) return [1, 1];\n\n  const digits = String(num).split(\"\").map(Number);\n\
    \  const evenLength = Math.ceil(digits.length / 2);\n  const oddLength = digits.length\
    \ - evenLength;\n\n  return [...Array(evenLength)].map((_: number) => {\n    return\
    \ digits[2 * _];\n  }), [...Array(oddLength)].map((_: number) => {\n    return\
    \ digits[2 * _ + 1];\n  });\n}\n", "  let count: [number, number] = [num / 10,\
    \ num % 10];\n  count[0] = (count[0] === 0) ? 1 : count[0]; //if the number is\
    \ 0, add 1 to the even number\n  count[1] = (count[1] === 0) ? 1 : count[1]; //if\
    \ the number is 0, add 1 to the odd number\n  return count;\n}\n</code>\n<|/ a\
    \ dscore=2 |>\n<| a |>\nUsing a generator function:\n<code>\nfunction* even_odd_count(num)\
    \ {\n  let [digit, odd] = num % 10;\n  while (num >= 10) {\n    yield digit;\n\
    \    [digit, odd] = num % 10;\n  }\n  yield digit;\n  yield odd;\n}\n\nfor (const\
    \ e of even_odd_count(-12)) {\n  console.log(e + ' ');\n}", "  let evenCount =\
    \ 0;\n  let oddCount = 0;\n  const even_odd_num_str = num.toString();\n  even_odd_num_str\
    \ = even_odd_num_str.split('');\n  even_odd_num_str.forEach((char) => {\n    if\
    \ (char === '0') {\n      evenCount++;\n    } else if (char === '1') {\n     \
    \ oddCount++;\n    }\n  });\n  return [evenCount, oddCount];\n}\n", "  let result:\
    \ [number, number] = [0, 0];\n  for (let i = 0; i <= num; i++) {\n    if (num\
    \ % 2 === 0) {\n      result[0]++;\n    } else {\n      result[1]++;\n    }\n\
    \  }\n  return result;\n}\n", "  const result = [];\n  const numString = String(num);\n\
    \  let evenCount = 0;\n  let oddCount = 0;\n  for (let i = numString.length -\
    \ 1; i >= 0; i--) {\n    const digit = numString[i];\n    if (digit === '1') {\n\
    \      evenCount++;\n    } else {\n      oddCount++;\n    }\n    result.push(evenCount,\
    \ oddCount);\n  }\n  return result;\n}\n", "  let even = []\n  let odd = []\n\
    \  let numString = num.toString()\n  for (let i = 0; i < numString.length; i++)\
    \ {\n    const digit = +numString[i]\n    if (digit % 2 === 0) {\n      even.push(digit)\n\
    \    } else {\n      odd.push(digit)\n    }\n  }\n  return [even, odd]\n}\n",
  "  const evenDigitsArray = []\n  const oddDigitsArray = []\n  let digits = String(num).split(\"\
    \").reduce((acc, item) => {\n    if (item === 1) {\n      acc.push(item)\n   \
    \ } else {\n      acc[acc.length - 1] += item\n      return acc\n    }\n  }, [])\n\
    \  digits.reverse()\n  digits.map(num => {\n    if (num % 2 === 0) {\n      evenDigitsArray.push(num)\n\
    \    } else {\n      oddDigitsArray.push(num)\n    }\n  })\n  return [evenDigitsArray,\
    \ oddDigitsArray]\n}\n", "  let even = 0, odd = 0, i = 0;\n  while (num >= 0)\
    \ {\n    i++;\n    num = num - (num % 10);\n  }\n  while (i <= Math.pow(10, i))\
    \ {\n    even += Math.pow(10, i);\n    i++;\n  }\n  i = 0;\n  while (num >= 0)\
    \ {\n    i++;\n    num = num - (num % 10);\n  }\n  while (i <= Math.pow(10, i))\
    \ {\n    odd += Math.pow(10, i);\n    i++;\n  }\n  return [even, odd];\n}\n",
  "  var evenCount = 0;\n  var oddCount = 0;\n  while (num > 0) {\n    num = num /\
    \ 10;\n    if (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n\
    \    }\n  }\n  return [evenCount, oddCount];\n}\n", "  const result: number[]\
    \ = [];\n  const evenCount = 0;\n  const oddCount = 0;\n  while (num > 0) {\n\
    \    const cur = num % 10;\n    if (cur % 2 == 0) {\n      evenCount++;\n    }\
    \ else {\n      oddCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n  result.push(evenCount);\n\
    \  result.push(oddCount);\n  return result;\n}\n", "  const evens = [];\n  const\
    \ odds = [];\n\n  for (let i = 0; num > 0; i++) {\n    const remainder = num %\
    \ 10;\n    if (remainder === 0) {\n      evens.push(remainder);\n    } else {\n\
    \      odds.push(remainder);\n    }\n    num = Math.floor(num / 10);\n  }\n  return\
    \ [evens, odds];\n}\n", "  const evenNum = num.toString().split('').reduce((acc,\
    \ char) => {\n    return acc + (char === '0' ? 0 : 1)\n  }, 0)\n  const oddNum\
    \ = num.toString().split('').reduce((acc, char) => {\n    return acc + (char ===\
    \ '0' ? 0 : 2)\n  }, 0)\n  return [evenNum, oddNum]\n}\n", "  let odds = 0;\n\
    \  let evens = 0;\n  for (let i = 1; i < num; i++) {\n    if ((num % i) === 0)\
    \ {\n      evens++;\n    } else {\n      odds++;\n    }\n  }\n  return [evens,\
    \ odds];\n}\n", "    let result = [0, 0];\n    let remainder = num % 10;\n   \
    \ let even = num / 10 % 2 == 0;\n    let odd = num / 10 % 2 === 0;\n    if (even)\
    \ {\n        result[0] = remainder;\n    } else {\n        result[1] = remainder;\n\
    \    }\n    return result;\n}\n", "  return [num % 2 === 0 ? 1 : 0, num % 2 ===\
    \ 1 ? 2 : 0]\n}\n", "  if (num === 0) {\n    return [0, 0];\n  }\n  let oddEvenSum\
    \ = 0;\n  let lastOddEvenSum = 0;\n  let lastSum = 0;\n  let i = 1;\n  while (i\
    \ <= num) {\n    lastOddEvenSum = lastSum + i;\n    oddEvenSum += i;\n    lastSum\
    \ = oddEvenSum;\n    i += 2;\n  }\n  let oddEvenCount = 0;\n  if (lastOddEvenSum\
    \ >= num) {\n    oddEvenCount = 1;\n  }\n  if (lastOddEvenSum > num) {\n    oddEvenCount\
    \ = 2;\n  }\n  return [oddEvenCount, num - lastOddEvenSum];\n}\n", "  let evens\
    \ = 0;\n  let odds = 0;\n  while (num) {\n    if (num % 2 === 0) {\n      evens\
    \ += 1;\n    } else {\n      odds += 1;\n    }\n    num = Math.floor(num / 10);\n\
    \  }\n  return [evens, odds];\n}\n", "  return [num % 2 === 0 && num % 10 !==\
    \ 0 ? 1 : 2, num % 2 !== 0 ? 2 : 0];\n}\n", "  const factor: number[][] = [];\n\
    \  for (let factorNum = 1; factorNum <= num; factorNum++) {\n    factor.push([factorNum,\
    \ num / factorNum]);\n  }\n  return factor\n}\n", "  const arr: [number, number]\
    \ = [[], []];\n  let str: string | undefined = undefined;\n\n  do {\n    str =\
    \ num.toString();\n    arr[str % 2 === 0 ? 'even' : 'odd'].push(str);\n  } while\
    \ ((num = num >> 1).toString() !== '0');\n\n  return arr;\n}\n", "  const result\
    \ = [0, 1];\n  let remainder = num % 10;\n  while (num > 0) {\n    remainder =\
    \ num % 10;\n    num = Math.floor(num / 10);\n    result[1] = result[1] + 1;\n\
    \  }\n  if (remainder === 1) {\n    result[1] = result[1] + 1;\n  }\n  return\
    \ result;\n}\n\n<|/ file filename=big-five.ts |>", "  let odd = num % 2;\n  let\
    \ even = num / 2;\n  let evenOdd = [even, odd];\n  return evenOdd;\n}\n", "  let\
    \ odd: number = 0\n  let even: number = 0\n  while (num > 0) {\n    odd = (odd\
    \ * 10 + num % 10) % 10\n    even = (even * 10 + num % 2) % 10\n    num = Math.floor(num\
    \ / 10)\n  }\n\n  return [odd, even]\n}\n", "  let count = 0;\n  while (num >\
    \ 0) {\n    num = Math.floor(num / 10);\n    count++;\n  }\n  if (count % 2 ===\
    \ 1) {\n    return [count - 1, count];\n  } else {\n    return [count, count -\
    \ 1];\n  }\n}\n", "  const arr1 = [];\n  const arr2 = [];\n  for (let i = 0; i\
    \ <= Math.ceil(Math.log10(num)); i++) {\n    const isEven = num % 2 === 0;\n \
    \   if (i <= Math.ceil(Math.log10(num / 10))) arr1.push(isEven);\n    else arr2.push(isEven);\n\
    \    num = Math.floor(num / 10);\n  }\n  return [arr1.length, arr2.length];\n\
    }\n", "  const res: [number, number] = [num % 10, num % 10];\n  while (num > 0)\
    \ {\n    const mod = num % 10;\n    if (mod === 0) break;\n    num = num - mod;\n\
    \    res[1] = mod;\n  }\n  return res;\n}\n", "  const n = Math.abs(num)\n  let\
    \ count = [0, 0]\n  let m = n / 10\n  while (m > 0) {\n    count[Math.floor(m\
    \ / 2)] += 1\n    m = m % 10\n  }\n  count[n % 10] += 1\n  return count\n}\n",
  "  let temp = 0;\n  let result = [0, 0];\n  while (num > 0) {\n    temp += num %\
    \ 2;\n    num = Math.floor(num / 2);\n    result[0] += temp;\n    result[1] +=\
    \ temp ? 1 : 0;\n  }\n  return result;\n}\n</code>\n<|/ a tags=algorithm,time-complexity\
    \ dscore=1 |>\n<| a dscore=1 |>\nIn JavaScript you can do it using Array#map()\
    \ and Math.log10()\n\n<code>\nvar number = 987654321;\n", "  const evenDigits\
    \ = num.toString().filter(\n    (n): n is 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 |\
    \ 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24\
    \ | 25 | 26 | 27 | 28 | 29 | 30 | 31 => n % 2 === 0,\n  );\n  const oddDigits\
    \ = num.toString().filter(\n    (n): n is 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 |\
    \ 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24\
    \ | 25 | 26 | 27 | 28 | 29 | 30 | 31 => n % 2 === 1,\n  );\n  return [evenDigits.length,\
    \ oddDigits.length];\n}\n", "  let even_count = 0;\n  let odd_count = 0;\n  while\
    \ (num != 0) {\n    if ((num % 2) === 0) {\n      even_count++;\n    } else {\n\
    \      odd_count++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return [even_count,\
    \ odd_count];\n}\n", "  const evenCount = 0;\n  const oddCount = 0;\n  let lastEvenDigit:\
    \ number = null;\n  let lastOddDigit: number = null;\n\n  for (let i = num.toString().length;\
    \ i > 0; i--) {\n    const currentDigit = num.toString().substr(i - 1, 1);\n\n\
    \    if (currentDigit === parseInt(currentDigit, 10)) {\n      if (lastEvenDigit\
    \ === parseInt(currentDigit, 10)) {\n        evenCount++;\n      } else {\n  \
    \      oddCount++;\n      }\n    } else {\n      evenCount = 0;\n      oddCount\
    \ = 0;\n    }\n\n    lastEvenDigit = currentDigit;\n    lastOddDigit = null;\n\
    \  }\n\n  return [evenCount, oddCount];\n}\n", "  let even = 0;\n  let odd = 0;\n\
    \  while (num > 0) {\n    num = num % 10;\n    if (num % 2 === 0) {\n      even++;\n\
    \    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}\n", "\tconst\
    \ str = num.toString();\n\tlet count = 0;\n\tlet odd = 0;\n\tlet even = 0;\n\t\
    let oddDig = 0;\n\tlet evenDig = 0;\n\tlet evenArray: number[] = [];\n\tlet oddArray:\
    \ number[] = [];\n\tfor (let i = 1; i < str.length; i++) {\n\t\tconst c = str.charAt(i);\n\
    \t\tif (c === \"0\" || c === \"1\") {\n\t\t\tcount++;\n\t\t\tif (c === \"1\")\
    \ {\n\t\t\t\tevenDig += 1;\n\t\t\t} else {\n\t\t\t\toddDig += 1;\n\t\t\t}\n\t\t\
    } else {\n\t\t\tif (count > 0) {\n\t\t\t\tif (oddDig >= count) {\n\t\t\t\t\toddArray.push(oddDig);\n\
    \t\t\t\t\toddDig = 0;\n\t\t\t\t}\n\t\t\t\tif (evenDig >= count) {\n\t\t\t\t\t\
    evenArray.push(evenDig);\n\t\t\t\t\tevenDig = 0;\n\t\t\t\t}\n\t\t\t\tcount = 0;\n\
    \t\t\t\toddDig = 0;\n\t\t\t\tevenDig = 0;\n\t\t\t}\n\t\t\tevenArray.push(c);\n\
    \t\t\toddArray.push(c);\n\t\t}\n\t}\n\treturn [evenArray, oddArray];\n}\n", " \
    \ let even: number[] = [];\n  let odd: number[] = [];\n  for (let i = 0; i < 10;\
    \ i++) {\n    if (num % 2 === 0) {\n      even.push(i);\n    } else {\n      odd.push(i);\n\
    \    }\n    num = num / 10;\n  }\n  return [even, odd];\n}\n", "  let even = 0;\n\
    \  let odd = 0;\n  while (num >= 0) {\n    if (num % 2 === 0) {\n      even++;\n\
    \    } else {\n      odd++;\n    }\n    num = Math.floor(num / 10);\n  }\n\n \
    \ return [even, odd];\n}\n", "  const even = []\n  const odd = []\n  const num\
    \ = Math.abs(num)\n  while (num > 0) {\n    if (num % 2 === 0) {\n      even.push(num)\n\
    \    } else {\n      odd.push(num)\n    }\n    num = Math.floor(num / 10)\n  }\n\
    \  return [even, odd]\n}\n", "  let even = 0;\n  let odd = 0;\n  while (num) {\n\
    \    if (num % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n\
    \    num = Math.floor(num / 10);\n  }\n  return [even, odd];\n}\n", "  if (num\
    \ < 10) {\n    return [1, 0];\n  }\n\n  var odd = Math.ceil(num / 10);\n  var\
    \ even = num % 10;\n\n  return [odd, even];\n}\n", "  let even: number = 0;\n\
    \  let odd: number = 0;\n  let count = 0;\n  while (num > 0) {\n    const next\
    \ = num % 10;\n    count += next % 2 === 0 ? 1 : 0;\n    num = Math.floor(num\
    \ / 10);\n  }\n  return [even, odd];\n}\n", "  let result: [number, number] =\
    \ [null, null];\n  for (let i = 0; i <= Math.floor(Math.log10(num)); i++) {\n\
    \    const number = Math.floor(num / Math.pow(10, i));\n    if (number % 2 ===\
    \ 0) {\n      result = [number, 1];\n    } else {\n      result = [1, number];\n\
    \    }\n  }\n  return result;\n}\n", "  const even_count = 0;\n  const odd_count\
    \ = 0;\n  while (num >= 0) {\n    if (num % 2 === 0) {\n      even_count++;\n\
    \    } else {\n      odd_count++;\n    }\n    num = Math.floor(num / 10);\n  }\n\
    \  return [even_count, odd_count];\n}\n", "  // First count the even digits in\
    \ the number\n  let even_count = 0;\n  while (num != 0) {\n    if (num % 2 ===\
    \ 0) {\n      even_count++;\n    }\n    num = Math.floor(num / 2);\n  }\n  //\
    \ Then count the odd digits in the number\n  let odd_count = 0;\n  while (num\
    \ != 0) {\n    if (num % 2 !== 0) {\n      odd_count++;\n    }\n    num = Math.floor(num\
    \ / 2);\n  }\n  return [even_count, odd_count];\n}\n", "    const counter: number[]\
    \ = [];\n    let i: number = 0;\n    let odd: boolean;\n    let even: boolean;\n\
    \    while (num > 0) {\n        odd = (num % 10) % 2 === 0;\n        even = (num\
    \ % 10) === 0;\n        counter[i] = odd ? 1 : 0;\n        counter[i + 1] = even\
    \ ? 1 : 0;\n        i += 2;\n        num = Math.floor(num / 10);\n    }\n    return\
    \ counter;\n}\n", "  let even_num = 0;\n  let odd_num = 0;\n\n  while (num > 0)\
    \ {\n    if (num % 2 === 0) {\n      even_num += 1;\n    } else {\n      odd_num\
    \ += 1;\n    }\n    num /= 10;\n  }\n\n  return [even_num, odd_num];\n}\n", " \
    \ let even = 0;\n  let odd = 0;\n  while (num > 0) {\n    const digit = num %\
    \ 10;\n    num = Math.floor(num / 10);\n    if (digit % 2 === 0) {\n      even++;\n\
    \    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n}\n", "  let odd\
    \ = 1;\n  let even = 1;\n  while (num > 0) {\n    const temp = num % 10;\n   \
    \ if (temp % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  \
    \  num = Math.floor(num / 10);\n  }\n  return [even, odd];\n}\n</code>\n<|/ a\
    \ dscore=2 tags=javascript,algorithm |>\n<| a |>\nThe simplest and most efficient\
    \ way to do it is like this:\n\n<code>", "    return [num % 2 === 0, num % 2 ===\
    \ 1 ? 1 : -1];\n}\n", "  var even = 0\n  var odd = 0\n  var n = Math.abs(num)\n\
    \  while (n !== 0) {\n    n >>>= 1\n    even += n % 2\n    n >>>= 1\n    odd +=\
    \ n % 2\n  }\n\n  return [even, odd]\n}\n", "  const arr: number[] = [];\n  while\
    \ (num > 0) {\n    arr.push(num % 2);\n    num = Math.floor(num / 10);\n  }\n\
    \  return arr;\n}\n", "    const evens = Math.floor(num / 10);\n    const odds\
    \ = num % 10;\n    return [evens, odds];\n}\n", "    let even = 0;\n    let odd\
    \ = 0;\n\n    while (num > 0) {\n        if (num % 2 === 0) {\n            even++;\n\
    \        } else {\n            odd++;\n        }\n\n        num = Math.floor(num\
    \ / 10);\n    }\n\n    return [even, odd];\n}\n", "  let even = 1;\n  let odd\
    \ = 1;\n  while (num > 0) {\n    if (num % 2 === 0) even++;\n    else odd++;\n\
    \    num = Math.floor(num / 10);\n  }\n  return [even, odd];\n}\n", "  let evenCount\
    \ = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n \
    \     evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num\
    \ / 10);\n  }\n  return [evenCount, oddCount];\n}\n", "  let even = 0;\n  let\
    \ odd = 0;\n  for (let i = num.length - 1; i >= 0; i -= 1) {\n    const digit\
    \ = num[i];\n    if (digit % 2 === 0) {\n      even += 1;\n    } else {\n    \
    \  odd += 1;\n    }\n  }\n  return [even, odd];\n}\n", "  let even = 0;\n  let\
    \ odd = 0;\n  while (num > 0) {\n    if (num % 2 === 0) even++;\n    else odd++;\n\
    \    num = Math.floor(num / 10);\n  }\n  return [even, odd];\n}", "    return\
    \ [\n        even_count(num),\n        odd_count(num)\n    ];\n}\n", "  if (num\
    \ < 0) return [];\n  const res = [0, 0];\n  while (num >= 10) {\n    const last\
    \ = res[1] - res[0];\n    const next = num % 10;\n    res[0] += next;\n    res[1]\
    \ = last + 1;\n    num /= 10;\n  }\n  return res;\n}\n", "  let even: number =\
    \ num % 2 === 0;\n  let odd: number = num % 2 === 1;\n  let oddCount: number =\
    \ 1;\n  let evenCount: number = 1;\n  while (num > 0) {\n    num = num / 2;\n\
    \    if (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n\
    \    }\n  }\n  return [even, odd, oddCount, evenCount];\n}\n", "  const res =\
    \ []\n  while (num) {\n    res.push(num % 10 % 2)\n    num = Math.floor(num /\
    \ 10)\n  }\n  return res\n}\n", "  let arr: number[] = [];\n  while (num > 0)\
    \ {\n    const rem: number = num % 10;\n    num = Math.floor(num / 10);\n    arr.push(rem\
    \ % 2);\n  }\n  return arr;\n}\n", "\tconst a = Math.abs(num);\n\tconst even:\
    \ number[] = [];\n\tconst odd: number[] = [];\n\tlet i: number;\n\n\tfor (i =\
    \ Math.floor(a); i >= 1; i--) {\n\t\tif (num % i === 0) {\n\t\t\teven.push(i);\n\
    \t\t} else {\n\t\t\todd.push(i);\n\t\t}\n\t}\n\n\treturn [even.length, odd.length];\n\
    }\n", "    let evenCount = 0;\n    let oddCount = 0;\n    while (num > 0) {\n\
    \        const remainder = num % 10;\n        if (remainder % 2 === 0) {\n   \
    \         evenCount++;\n        } else {\n            oddCount++;\n        }\n\
    \        num /= 10;\n    }\n    return [evenCount, oddCount];\n}\n", "  const\
    \ arr: number[] = [];\n  let evenCount = 0;\n  let oddCount = 0;\n\n  while (num\
    \ != 0) {\n    arr.push(num % 10);\n    num = parseInt(num / 10);\n  }\n\n  for\
    \ (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      evenCount++;\n\
    \    } else {\n      oddCount++;\n    }\n  }\n\n  return [evenCount, oddCount];\n\
    }\n", "  const even = [];\n  const odd = [];\n  let n = num;\n  while (n > 0)\
    \ {\n    if (n % 2 === 0) {\n      even.push(n % 10);\n    } else {\n      odd.push(n\
    \ % 10);\n    }\n    n = Math.floor(n / 10);\n  }\n  return [even, odd];\n}\n",
  "    let even_odd_digit = 0;\n    for (let i = num / 10; i > 0; i /= 10) {\n   \
    \     if (i % 2 === 0) {\n            even_odd_digit++;\n        }\n    }\n  \
    \  return [even_odd_digit, num % 10 !== 0 ? 1 : 0];\n}", "  let count = 0;\n \
    \ let odd = 1;\n  let even = 0;\n\n  do {\n    if (num % 2 === 0) even++;\n  \
    \  else odd++;\n    num = Math.floor(num / 10);\n  } while (num > 0);\n\n  return\
    \ [even, odd];\n}\n", "  let even: number = 0;\n  let odd: number = 0;\n  while\
    \ (num > 0) {\n    const remainder = num % 10;\n    if (remainder === 0) {\n \
    \     even++;\n    } else {\n      odd++;\n    }\n    num = Math.floor(num / 10);\n\
    \  }\n  return [even, odd];\n}\n", "  let even: number = 0;\n  let odd: number\
    \ = 0;\n  while (num != 0) {\n    if (num % 2 == 0) {\n      even++;\n    } else\
    \ {\n      odd++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return [even,\
    \ odd];\n}\n", "  return [num.toString().length, num.toString().replace(/[^\\\
    d]/g, '').length % 2 === 0 ? 'even' : 'odd']\n}\n\nconst evenOdd = even_odd_count\n",
  "  const evens: number[] = [];\n  const odds: number[] = [];\n\n  while (num > 0)\
    \ {\n    evens.push(num % 10);\n    num = Math.floor(num / 10);\n  }\n\n  while\
    \ (num > 0) {\n    odds.push(num % 10);\n    num = Math.floor(num / 10);\n  }\n\
    \n  return [evens, odds];\n}\n", "  let even = num;\n  let odd = num;\n\n  while\
    \ (num >= 0) {\n    const remainder = num % 10;\n    if (remainder === 0) {\n\
    \      even++;\n    } else {\n      odd++;\n    }\n    num /= 10;\n  }\n  return\
    \ [even, odd];\n}\n", "  let count = 0;\n  while (num != 0) {\n    count++;\n\
    \    num /= 10;\n  }\n  return [count % 2 != 0, count % 2 == 0];\n}\n", "    const\
    \ oddEvenCount: any = 1;\n    let evenCount: any = 1;\n    while (num > 0) {\n\
    \        let num = num / 10;\n        oddEvenCount += num & 1;\n        evenCount\
    \ += num > 1;\n    }\n    return [evenCount, oddEvenCount];\n}", "  const digits\
    \ = String(Math.abs(num))\n    .split('')\n    .filter(Boolean)\n    .map(digit\
    \ => Number(digit));\n  if (digits.length % 2 === 1) {\n    return [digits.length\
    \ / 2, digits.length / 2 + digits.length / 2];\n  }\n  return [digits.length /\
    \ 2, digits.length / 2];\n}\n", "  var odd_count = 0;\n  var even_count = 0;\n\
    \  var temp_num = 0;\n  for (var i = 0; i < num.length; i++) {\n    temp_num +=\
    \ num.charCodeAt(i);\n    if (temp_num >= 10) {\n      even_count++;\n      temp_num\
    \ -= 10;\n    } else {\n      odd_count++;\n    }\n  }\n  return [even_count,\
    \ odd_count];\n}\n", "  let evenCount = 0;\n  let oddCount = 0;\n  for (let i\
    \ = 0; i < num.toString().length; i++) {\n    if (num.toString()[i] % 2 === 0)\
    \ {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n  return\
    \ [evenCount, oddCount];\n}\n", "  let evenCount = 0;\n  let oddCount = 0;\n \
    \ \n  while (num > 0) {\n    if (num % 2 === 1) {\n      oddCount++;\n    } else\
    \ {\n      evenCount++;\n    }\n    num = Math.floor(num / 10);\n  }\n\n  return\
    \ [evenCount, oddCount];\n}\n", "  const [even, odd] = num.toString().split('').reverse().map(digit\
    \ => +digit);\n\n  return [even, odd];\n}\n</code>\n<|/ a |>\n<| c |>\nThanks\
    \ so much for this! I appreciate that you made it look so simple. I'm going to\
    \ try and implement this right away. I appreciate the tips as well.\n<|/ c |>\n\
    <| a tags=typescript,javascript,arrays dscore=0 |>\n<code>", "  let even_counter\
    \ = 0;\n  let odd_counter = 0;\n  while (num > 0) {\n    let rem = num % 10;\n\
    \    if (rem === 0) {\n      even_counter++;\n    } else {\n      odd_counter++;\n\
    \    }\n    num = Math.floor(num / 10);\n  }\n  return [even_counter, odd_counter];\n\
    }\n", "  let countEven = 0;\n  let countOdd = 0;\n\n  while (num > 0) {\n    const\
    \ lastDigit = num % 10;\n    if (lastDigit % 2 === 0) {\n      countEven++;\n\
    \    } else {\n      countOdd++;\n    }\n    num = Math.floor(num / 10);\n  }\n\
    \n  return [countEven, countOdd];\n}\n", "  return [...String(num).split('')].filter((digit:\
    \ string) => digit !== '0').map((digit: number) => digit % 2 === 0 ? 'even' :\
    \ 'odd').map((digit: string) => +digit).sort((a: number, b: number) => b - a);\n\
    }", "  const arr = String(num).split('').map((char, i) => {\n    if (i % 2 ===\
    \ 0) return char;\n    return null;\n  });\n  return arr.map(v => Number(v));\n\
    }\n</code>\nThen to find out which array is smaller, we can use Math.min and Math.max\n\
    <code>\nconst evenOdd = even_odd_count(number);\nconst smaller = Math.min(...evenOdd);\n\
    const larger = Math.max(...evenOdd);\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis\
    \ works only if all the numbers are positive\n<|/ c |>\n<| c |>\nYes, it only\
    \ works for positive numbers, I just added that for completeness\n<|/ c |>\n<|\
    \ c |>\nNot working for negative number as min max for negative number is also\
    \ negative number\n<|/ c |>\n<| c |>\nIt should still work, `Math.min(...)` will\
    \ return the lowest of the arguments\n<|/ c |>\n<| c |>\nYes it will work but\
    \ it will not work for any negative number\n<|/ c |>\n<| a dscore=2 |>\nThe answer\
    \ above is not correct. Math.min() and Math.max() won't work with negative numbers,\
    \ as the example below:\n<code>\nMath.min(1, -2); // 1\nMath.max(1, -2); // -2\n\
    </code>\nInstead, we can use the Math.sign() which gives us a positive number\
    \ if the number is positive, and a negative number if the number is negative.\
    \ \n<code>\nMath.min(Math.sign(-2), -2); // -2\nMath.max(Math.sign(-2), -2); //\
    \ 2\n</code>\nThis is not quite as intuitive, however, and it would be nice if\
    \ there was a built-in function that does exactly this.\n<|/ a tags=javascript,algorithm,math\
    \ |>\n<| a tags=javascript,algorithm,math dscore=1 |>\nThe algorithm for finding\
    \ the smallest and the largest number in a list is as follows:\n\nIterate through\
    \ the list.\nAdd each element to the current min/max number.\nIf the current min/max\
    \ number is larger than the current number, then replace the number with the current\
    \ number.\nIf the current min/max number is smaller than the current number, then\
    \ replace the number with the current number.\nIf the current min/max number is\
    \ equal to the current number, then add 1 to each count.\n\n<code>\nconst list\
    \ = [-2, -15, 12, -7, 8];\n\nlet min = Math.max(-2, 0);\nlet max = 0;\n\nfor (const\
    \ num of list) {\n  min = Math.min(min, num);\n  max = Math.max(max, num);\n}\n\
    \nconsole.log(`Min: ${min}; Max: ${max}`);\n\nlist.reduce((count, val) => {\n\
    \  min ", "  const even_num: number[] = [];\n  const odd_num: number[] = [];\n\
    \  let numStr = String(num);\n  let digit: number[] = [];\n  for (let i = 0; i\
    \ < numStr.length; i++) {\n    digit = numStr[i].match(/\\d/g);\n    if (digit)\
    \ {\n      if (parseInt(digit[0]) % 2 === 0) {\n        even_num.push(parseInt(digit[0]));\n\
    \      } else {\n        odd_num.push(parseInt(digit[0]));\n      }\n    }\n \
    \ }\n  return [even_num, odd_num];\n}\n", "  const digits = String(num).split(\"\
    \").filter(n => n != 0);\n  const even = [];\n  const odd = [];\n  for (let i\
    \ = 0; i < digits.length; i++) {\n    const digit = digits[i];\n    if (parseInt(digit,\
    \ 10) % 2 === 0) {\n      even.push(parseInt(digit, 10));\n    } else {\n    \
    \  odd.push(parseInt(digit, 10));\n    }\n  }\n  return [even, odd];\n}\n", " \
    \ let evenCount = 0;\n  let oddCount = 0;\n  while (num > 0) {\n    if (num %\
    \ 2 === 0) {\n      evenCount++;\n    }\n    else {\n      oddCount++;\n    }\n\
    \    num /= 2;\n  }\n  return [evenCount, oddCount];\n}", "  const arr: number[]\
    \ = [];\n  while ((num > 0) || num === 0 || num === 1) {\n    arr.push(num % 10);\n\
    \    num = Math.floor(num / 10);\n  }\n  return arr;\n}\n", "  const even = num\
    \ % 2 === 0 ? 1 : 0\n  const odd = num % 2 === 1 ? 1 : 0\n  return [even, odd]\n\
    }\n", "  let [evenCount, oddCount] = [num.toString().split('').filter((digit:\
    \ string) => digit === '1').length, num.toString().split('').filter((digit: string)\
    \ => digit === '0').length]\n  return [evenCount, oddCount]\n}\n", "  let evenCount\
    \ = 0;\n  let oddCount = 0;\n  for (let index = 0; index < num; index++) {\n \
    \   if (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n\
    \    }\n  }\n  return [evenCount, oddCount];\n}\n", "  const result = [0, 1];\n\
    \  let counter = 1;\n  while (counter <= 10) {\n    if (num % 2 === 0) {\n   \
    \   result[counter - 1]++;\n    } else {\n      result[0]++;\n    }\n    num =\
    \ (num - num % 10) / 10;\n    counter++;\n  }\n  return result;\n}\n", "  num\
    \ = Math.abs(num);\n  const count = Math.log10(num);\n  const even_count = Math.trunc(count\
    \ / 2);\n  const odd_count = Math.trunc(count) - even_count;\n  return [even_count,\
    \ odd_count];\n}\n", "  // Create an array with even and odd numbers.\n  const\
    \ evenArr = Array(num).fill(0);\n  const oddArr = Array(num).fill(1);\n\n  //\
    \ Loop through the given number.\n  for (let i = 0; i < num; i++) {\n    // If\
    \ the current digit is even, increment the even array.\n    if (i % 2 === 0) {\n\
    \      evenArr[evenArr.length - 1] += 1;\n    } else {\n      oddArr[oddArr.length\
    \ - 1] += 1;\n    }\n  }\n  return [evenArr, oddArr];\n}\n", "    return [num\
    \ % 2 == 0, num % 2 != 0];\n}\n", "  let result: [number, number] = [num / 10\
    \ | 0, num % 10 | 0];\n  let odd = result[result.length - 1] % 2 === 0;\n  while\
    \ (result[result.length - 2] % 2 === 0 && result.length > 1) {\n    result[result.length\
    \ - 1] = 0;\n    result.pop();\n  }\n  return [odd ? 1 : -1, odd ? -1 : 1];\n\
    }\n", "  let even: number = 0;\n  let odd: number = 0;\n  for (let i = 0; i <\
    \ 10; i++) {\n    if (num % 2 === 0 && num > 0) {\n      even = num % 10;\n  \
    \  }\n    if (num % 2 === 1 && num > 0) {\n      odd = num % 10;\n    }\n    num\
    \ = (num / 10) | 0;\n  }\n  return [even, odd];\n}\n", "  let res = [0, 0];\n\
    \  while (num >= 0) {\n    let val = num % 10;\n    if (val === 0 || val === 2)\n\
    \      res[val === 0 ? 1 : 0]++;\n    num = Math.floor(num / 10);\n  }\n  return\
    \ res;\n}\n", "  const n = Math.abs(num);\n  let even = 0;\n  let odd = 1;\n \
    \ for (let i = n; i > 0; i /= 2) {\n    even++;\n  }\n  for (let i = n; i > 0;\
    \ i /= 2) {\n    odd *= 2;\n  }\n  return [even, odd];\n}\n", "  let even = 0;\n\
    \  let odd = 1;\n  while (num) {\n    even = num % 2 === 0 && even;\n    num =\
    \ Math.floor(num / 2);\n    odd = odd % 2 === 1 && odd;\n  }\n  return [even,\
    \ odd];\n}\n", "    let even: number = num % 2 === 0 ? 1 : 0;\n    let odd: number\
    \ = num % 2 === 1 ? 1 : 0;\n    return [even, odd];\n}\n", "  let evenCount =\
    \ 0;\n  let oddCount = 0;\n  while (num >= 0) {\n    if (num % 2 === 0) {\n  \
    \    evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num\
    \ / 2);\n  }\n  return [evenCount, oddCount];\n}\n", "  let result: [number, number]\
    \ = [0, 0];\n  let count = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n\
    \      result[0] += 1;\n    } else {\n      result[1] += 1;\n    }\n    num /=\
    \ 10;\n  }\n  return result;\n}\n", "  const even = [];\n  const odd = [];\n \
    \ let remainder = num % 2 ? num : num - 1;\n  let count = 0;\n  while (count <\
    \ 5 && remainder > 0) {\n    remainder = Math.floor(remainder / 2);\n    count++;\n\
    \    even.push(remainder);\n  }\n  while (count < 10 && remainder > 0) {\n   \
    \ remainder = Math.floor(remainder / 2);\n    count++;\n    odd.push(remainder);\n\
    \  }\n  return [even, odd];\n}\n", "  const even_count = num.toString().split('')\n\
    \  const odd_count = even_count\n    .map(item => item.split('').indexOf(Number(item)\
    \ % 2) > -1 ? 1 : 0)\n    .filter(item => item > 0)\n  \n  return [...new Set(even_count),\
    \ ...new Set(odd_count)]\n}\n", "  const count = 0;\n  while (num > 0) {\n   \
    \ count++;\n    num %= 10;\n  }\n  return [count, count % 2 === 1 ? (count + 1)\
    \ % 2 : (count - 1)];\n}\n", "  const arr = [0, 0], sum = 0;\n  while (num) {\n\
    \    arr[num % 10 % 2 === 0 ? 'even' : 'odd']++;\n    sum += num;\n    num = Math.floor(num\
    \ / 10);\n  }\n  return arr;\n}\n", "  const numStr = num.toString();\n  const\
    \ evenStrs = numStr.split('')\n    .filter((n) => n % 2 === 0);\n  const oddStrs\
    \ = numStr.split('')\n    .filter((n) => n % 2 !== 0);\n  return [evenStrs.length,\
    \ oddStrs.length];\n}\n", "  const result: [number, number] = [num.toString().length,\
    \ num.toString().length - num.toString().split(\"\").length]\n  return result\n\
    }\n", "  var sum = 0;\n  for (var i = 0; i < num.length; i++) {\n    var current\
    \ = num[i];\n    sum += current % 2 ? 1 : 2;\n  }\n  return [sum, num.length];\n\
    }\n", "  return [\n    Math.floor(Math.log10(num)),\n    num.toString().split('')\n\
    \      .map(Number)\n      .filter(n => n % 2 === 0)\n      .length\n  ]\n}\n",
  "    let count = 0;\n    let digit = 0;\n    while (num != 0) {\n        digit =\
    \ num % 10;\n        count += (digit % 2 == 0);\n        num = num / 10;\n   \
    \ }\n    return [count, count + 1];\n}\n</code>\n<|/ a tags=javascript,algorithm,recursion\
    \ |>\n<| c |>\nThis isn't O(log n) though.\n<|/ c |>\n<| a tags=javascript,algorithm,recursion\
    \ |>\nHere's an O(1) solution in javascript:\n<code>", "  if (num < 0) {\n   \
    \ throw new Error(\"Negative numbers are not allowed.\");\n  }\n\n  const evenCount:\
    \ number = 0;\n  const oddCount: number = 0;\n  let digit: number = 0;\n\n  for\
    \ (let i = 0; i < num.length; i++) {\n    digit = num[i];\n    if (digit % 2 ===\
    \ 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n\n  return\
    \ [evenCount, oddCount];\n}\n", "    let even = 0, odd = 1;\n    let i = 1;\n\
    \    while (num >= 0) {\n        if (num % 2 === 0) {\n            even++;\n \
    \       } else {\n            odd++;\n        }\n        i++;\n        num = Math.floor(num\
    \ / 10);\n    }\n    return [even, odd];\n}\n</code>\n<|/ a |>\n<| c |>\nThe while\
    \ loop is incorrect. After the first iteration, num will be `0`, and so your while\
    \ loop will go into an infinite loop.\n<|/ c |>\n<| c |>\nYou are right, I updated\
    \ it now. Thanks.\n<|/ c |>\n<| c |>\nIt's also worth pointing out that `Math.floor`\
    \ has a precision of 15 decimal places (and `Number.MAX_SAFE_INTEGER` has at least\
    \ 16 decimal places). So, `Math.floor(x)` may sometimes give `1` instead of `0`.\n\
    <|/ c |>\n<| c |>\nIt's not actually incorrect. `0` is even, and `1` is odd. But\
    \ you're right that `0` might not be the correct answer for `num < 0`.\n<|/ c\
    \ |>\n<| c |>\nHow does this answer the question about \"number of even and odd\
    \ digits\"?\n<|/ c |>\n<| a tags=javascript,integer,math,algorithm dscore=2 |>\n\
    In case someone is looking for the shortest and best solution:\n<code>", "  let\
    \ even: number = 0;\n  let odd: number = 0;\n  for (let i = 0; i < num.toString().length;\
    \ i++) {\n    const digit = num.toString().charAt(i);\n    if (digit === \"0\"\
    ) {\n      even += 1;\n    } else {\n      odd += 1;\n    }\n  }\n  return [even,\
    \ odd];\n}\n", "    let result: [number, number] = [\n        Math.trunc(num /\
    \ 10),\n        Math.trunc(num % 10)\n    ];\n\n    if (num < 0)\n        result.unshift(0);\n\
    \    else\n        result.unshift(1);\n\n    return result;\n}\n", "  const res\
    \ = [];\n  while (num) {\n    if (num % 2 === 0) {\n      res.push(num);\n   \
    \ }\n    if (num % 2 === 1) {\n      res.push(num);\n    }\n    num -= 1;\n  }\n\
    \  return res;\n}\n", "  return [\n    num &\n    ~(num << 1) &\n    ~(num <<\
    \ 2) &\n    ~(num << 3) &\n    ~(num << 4),\n    num &\n    ~(num << 1) &\n  \
    \  ~(num << 2) &\n    ~(num << 3) &\n    ~(num << 4) &\n    ~(num << 5),\n  ];\n\
    }\n", "  let even = 0;\n  let odd = 0;\n  while (num > 0) {\n    const tmp = num\
    \ % 10;\n    if (tmp % 2 == 0) {\n      even++;\n    } else {\n      odd++;\n\
    \    }\n    num = Math.floor(num / 10);\n  }\n  return [even, odd];\n}\n", " \
    \ const even_count = 0\n  const odd_count = 0\n  while (num) {\n    const digit\
    \ = num % 10\n    const isEven = digit % 2 == 0\n    if (isEven) even_count++\n\
    \    else odd_count++\n    num = Math.floor(num / 10)\n  }\n  return [even_count,\
    \ odd_count]\n}\n", "  if (num === 0) {\n    return [0, 0];\n  }\n  const even:\
    \ number[] = [];\n  const odd: number[] = [];\n  let n: number = num;\n  while\
    \ (n !== 0) {\n    if (n % 2 === 0) {\n      even.push(n % 10);\n      n = n /\
    \ 10;\n    } else {\n      odd.push(n % 10);\n      n = n / 10;\n    }\n  }\n\
    \  return [even, odd];\n}\n", "  let [even, odd] = [num, 0]\n  while (num > 0)\
    \ {\n    [num, odd] = divmod(num, 10)\n    odd += 1\n  }\n  return [even, odd]\n\
    }\n", "  var odd = 0, even = 0;\n  for (var i = 0; i < num.toString().length;\
    \ ++i) {\n    if (num % 2 === 0 || num % 2 === 1) {\n      odd += 1;\n    } else\
    \ {\n      even += 1;\n    }\n  }\n  return [even, odd];\n}\n", "  const zero\
    \ = num === 0 ? 0 : Math.floor(Math.log10(num));\n  const power = 10 ** (zero\
    \ - zero);\n  const oddCount = Math.ceil(num / power) % 2 === 0 ? 1 : 0;\n  const\
    \ evenCount = num % power === 0 ? 1 : 0;\n  return [evenCount, oddCount];\n}\n",
  "  let even: number[] = [];\n  let odd: number[] = [];\n  for (let i = 0; i < num.length;\
    \ i++) {\n    if (num[i] % 2 == 0) {\n      even.push(num[i]);\n    } else {\n\
    \      odd.push(num[i]);\n    }\n  }\n  return [even, odd];\n}\n", "  const res\
    \ = [0, 1];\n  let odd = 1;\n  for (let i = 2; i <= Math.ceil(Math.log10(num));\
    \ i++) {\n    let n = Math.floor(num / Math.pow(10, i)) % 10;\n    if (odd ===\
    \ 0 || n === 0) {\n      res.push(n);\n    }\n    odd = n % 2 === 1;\n  }\n  return\
    \ res;\n}\n", "  var odd = 1;\n  var even = 1;\n  while (num >= 0) {\n    if (num\
    \ % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n    num = Math.floor(num\
    \ / 10);\n  }\n  return [even, odd];\n}\n", "  if (num < 0) {\n    return [1,\
    \ 1];\n  }\n\n  const str = String(num);\n  let even_digits_count = 1;\n  let\
    \ odd_digits_count = 0;\n\n  for (let i = 0; i < str.length; i++) {\n    if (i\
    \ % 2 == 0) {\n      even_digits_count++;\n    }\n\n    if (i % 2 != 0) {\n  \
    \    odd_digits_count++;\n    }\n  }\n\n  return [even_digits_count, odd_digits_count];\n\
    }\n", "  let sum = 0;\n  for (let i = num; i > 0; i /= 10) {\n    sum += i % 2\
    \ ? 1 : 2;\n  }\n  return [sum, sum - num % 10];\n}\n", "  let evenCount = 0;\n\
    \  let oddCount = 0;\n  num = Math.abs(num);\n\n  while (num > 0) {\n    evenCount\
    \ += num % 2 === 0;\n    oddCount += num % 2 !== 0;\n    num = Math.floor(num\
    \ / 10);\n  }\n\n  return [evenCount, oddCount];\n}\n", "  var result = [];\n\
    \  var n = num.toString();\n  var left = n.charAt(0);\n  var right = n.charAt(n.length\
    \ - 1);\n  var odd = 1;\n  var even = 0;\n  for (var i = 0; i < n.length; i++)\
    \ {\n    var str = n.charAt(i);\n    if (str === left) {\n      odd = !odd;\n\
    \    }\n    if (str === right) {\n      even = !even;\n    }\n  }\n\n  result.push(even,\
    \ odd);\n  return result;\n}\n", "  const n = Math.abs(num);\n  const even: number[]\
    \ = [];\n  const odd: number[] = [];\n  while (n) {\n    const mod = n % 2;\n\
    \    if (mod === 0) {\n      even.push(n % 10);\n    } else {\n      odd.push(n\
    \ % 10);\n    }\n    n = Math.floor(n / 10);\n  }\n  return [even, odd];\n}\n",
  "  if (num === 0) {\n    return [0, 2];\n  }\n  let arr = [];\n  let counter = 0;\n\
    \  while (num > 0) {\n    if (num % 2 === 0) {\n      arr.push((counter++));\n\
    \    }\n    num = Math.floor(num / 10);\n  }\n  return arr;\n}\n", "  let evenCount\
    \ = 0;\n  let oddCount = 0;\n  for (let i = num; i >= 0; i--) {\n    if (num %\
    \ 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n  }\n\
    \  return [evenCount, oddCount];\n}\n", "  let arr = [0, 0];\n  if (num < 0) return\
    \ arr;\n  let str: string = num.toString();\n  for (var i = 0; i < str.length;\
    \ i++) {\n    if (str[i] == \"-\") {\n      arr[0]++;\n    } else {\n      arr[1]++;\n\
    \    }\n  }\n  return arr;\n}\n", "  const arr: number[] = [];\n  let digit =\
    \ 0;\n  while (num > 0) {\n    digit = num % 10;\n    if (digit === 0) break;\n\
    \    arr.push(digit);\n    num /= 10;\n  }\n  if (arr[0] !== 0) {\n    arr.unshift(1);\n\
    \  }\n  return arr;\n}\n", "  let even = 0;\n  let odd = 0;\n  while (num > 0)\
    \ {\n    odd += Math.floor(num / 10);\n    num = num % 10;\n  }\n  while (num\
    \ > 0) {\n    even += Math.floor(num / 10);\n    num = num % 10;\n  }\n  return\
    \ [even, odd];\n}\n", "  const result = [];\n  for (let i = 0; i < num.toString(10).length;\
    \ i++) {\n    const character = num.toString(10)[i];\n    if (character === '0')\
    \ {\n      result.push(0);\n    } else {\n      result.push(character === '1'\
    \ ? 1 : 2);\n    }\n  }\n  return result;\n}\n", "  const digits = [];\n  let\
    \ evenCount = 0;\n  let oddCount = 0;\n  while (num != 0) {\n    const mod = num\
    \ % 10;\n    if (mod % 2 == 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n\
    \    }\n    num = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n\
    }\n", "    const sum: number = parseInt(String(Math.abs(num)), 10);\n    const\
    \ even: number = Math.abs(num) % 2;\n    const odd: number = sum % 2;\n    return\
    \ [even, odd];\n}\n", "  let evenCount = 0;\n  let oddCount = 0;\n  let num =\
    \ Math.floor(Math.abs(num));\n  while (num > 0) {\n    if (num % 2 === 0) {\n\
    \      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num\
    \ / 10);\n  }\n  return [evenCount, oddCount];\n}\n", "  if (num < 0) {\n    throw\
    \ 'invalid argument';\n  }\n  let odd_count = 0;\n  let even_count = 0;\n  while\
    \ (num >= 0) {\n    if (num % 2 === 0) {\n      even_count++;\n    } else {\n\
    \      odd_count++;\n    }\n    num /= 10;\n  }\n  return [even_count, odd_count];\n\
    }\n", "  const zeroes = new Set<number>();\n  const ones = new Set<number>();\n\
    \  const twos = new Set<number>();\n\n  while (num > 0) {\n    if (num % 2 ===\
    \ 0) {\n      zeros.add(num);\n    } else {\n      ones.add(num);\n    }\n\n \
    \   num = Math.floor(num / 2);\n  }\n\n  while (zeros.size > 0 && ones.size >\
    \ 0 && twos.size > 0) {\n    zeros.delete(ones.size);\n    ones.add(twos.size);\n\
    \    twos.clear();\n  }\n\n  zeros.delete(ones.size);\n  ones.delete(twos.size);\n\
    \  twos.delete(zeros.size);\n\n  return [...ones, ...zeros];\n}\n", "  const count\
    \ = [0, 0];\n  while (num > 0) {\n    const d = getDigit(num);\n    num -= d;\n\
    \    count[Math.floor(d/2)] += 1;\n  }\n  return count;\n}\n", "  return [\n \
    \   Math.floor(num / 10) % 2 === 0 ? (num / 10).toFixed(2) : ((num / 10) % 2 ===\
    \ 1 ? num / 10 : num),\n    Math.floor(num / 100) % 2 === 0 ? (num / 100).toFixed(2)\
    \ : ((num / 100) % 2 === 1 ? num / 100 : num),\n  ];\n}\n", "  num = Math.abs(num);\n\
    \  let result = [0, 0];\n  result.push((num % 2) === 0 && num > 0 ? 1 : 0);\n\
    \  result.push((num % 2) === 0 && num > 0 ? 2 : 0);\n  return result;\n}\n", " \
    \ let count = 0;\n  while (num > 0) {\n    count++;\n    num = Math.floor(num\
    \ / 10);\n  }\n  return [1, count];\n}\n", "  let evenCount = 0;\n  let oddCount\
    \ = 0;\n  while (num > 0) {\n    const remainder = num % 10;\n    if (remainder\
    \ === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num\
    \ = Math.floor(num / 10);\n  }\n  return [evenCount, oddCount];\n}\n", "  if (num\
    \ < 0)\n    return [1, 1];\n\n  const [d, v] = num.toString(10).split('');\n \
    \ const odds = v.split('')\n    .map((i) => Number(i) && Number(i) + 1)\n    .filter((i)\
    \ => i % 2 === 0);\n  const evens = v.split('')\n    .map((i) => Number(i) &&\
    \ Number(i) - 1)\n    .filter((i) => i % 2 === 0);\n\n  return [\n    odds.includes(0)\
    \ ? odds.length : 1,\n    evens.includes(0) ? evens.length : 1,\n  ];\n}\n", " \
    \ // if number <= 0 return []\n  if (num <= 0) {\n    return [];\n  }\n  let even:\
    \ number[] = [];\n  let odd: number[] = [];\n\n  while (num) {\n    if (num %\
    \ 2 === 0) {\n      even.push(num % 10);\n    }\n    num /= 10;\n  }\n\n  while\
    \ (num) {\n    if (num % 2 !== 0) {\n      odd.push(num % 10);\n    }\n    num\
    \ /= 10;\n  }\n\n  return [even, odd];\n}\n", "  let odd_count = 0, even_count\
    \ = 0;\n  while (num > 0) {\n    odd_count += num % 2 === 1 ? 1 : 0;\n    even_count\
    \ += num % 2 === 0 ? 1 : 0;\n    num = Math.floor(num / 10);\n  }\n  return [even_count,\
    \ odd_count];\n}\n", "    const arr1 = [];\n    const arr2 = [];\n    for (let\
    \ i = 1; i <= num; i += 1) {\n        const remainder = num % i;\n        if (remainder\
    \ === 0) {\n            arr1.push(i);\n        } else {\n            arr2.push(i);\n\
    \        }\n    }\n    return [arr1.length, arr2.length];\n}\n", "  let evenCount\
    \ = 0;\n  let oddCount = 0;\n\n  while (num > 0) {\n    if (num % 2 === 0) {\n\
    \      evenCount++;\n    } else {\n      oddCount++;\n    }\n    num = Math.floor(num\
    \ / 2);\n  }\n  return [evenCount, oddCount];\n}\n", "  const even: number = Math.floor(num\
    \ / 2)\n  const odd: number = num - even\n  return [even, odd]\n}\n", "  var evens\
    \ = 0;\n  var odds = 0;\n  var current = 0;\n  while (num >= 0) {\n    current\
    \ = num % 10;\n    if (current === 0) {\n      evens++;\n    } else {\n      odds++;\n\
    \    }\n    num = num / 10;\n  }\n  return [evens, odds];\n}\n", "  let even:\
    \ number[] = [];\n  let odd: number[] = [];\n\n  while (num > 0) {\n    if (num\
    \ % 2 === 1) {\n      even.push(num);\n    } else {\n      odd.push(num);\n  \
    \  }\n    num /= 2;\n  }\n\n  return [...even, ...odd];\n}\n", "  const str =\
    \ String(num);\n  const strArr = str\n    .replace(/\\D+/g, \"\")\n    .split(\"\
    \");\n\n  let oddCount = 0;\n  let evenCount = 0;\n\n  strArr.forEach(item =>\
    \ {\n    if (parseInt(item) % 2 === 0) {\n      evenCount++;\n    } else {\n \
    \     oddCount++;\n    }\n  });\n\n  return [evenCount, oddCount];\n}\n", "  let\
    \ numStr = num.toString();\n  let evens = [];\n  let odds = [];\n  for (let i\
    \ = 0; i < numStr.length; i++) {\n    if (numStr.charAt(i) === '+' || numStr.charAt(i)\
    \ === '-') {\n      if (numStr.charAt(i + 1) === '+' || numStr.charAt(i + 1) ===\
    \ '-') {\n        odds.push(numStr.charAt(i));\n        i++;\n      }\n      else\
    \ {\n        evens.push(numStr.charAt(i));\n        i++;\n      }\n    }\n   \
    \ else {\n      evens.push(numStr.charAt(i));\n    }\n  }\n  return [evens, odds];\n\
    }\n", "  let odd = num % 2;\n  let even = num / 2;\n\n  return [even, odd];\n\
    }\n", "  let evenCount = 0;\n  let oddCount = 0;\n  while (num >= 0) {\n    num\
    \ = num / 10;\n    if (num % 2 === 0) {\n      evenCount++;\n    } else {\n  \
    \    oddCount++;\n    }\n  }\n  return [evenCount, oddCount];\n}\n", "  let even:\
    \ number[] = [];\n  let odd: number[] = [];\n  let negative: number = Math.abs(num);\n\
    \n  for (let i = 0; i <= negative; i++) {\n    if (num % 2 === 0) {\n      even.push(i);\n\
    \    } else {\n      odd.push(i);\n    }\n  }\n\n  return [even, odd];\n}", " \
    \   let evenCount = 0, oddCount = 0\n    while (num > 0) {\n        const remainder\
    \ = num % 10\n        evenCount += remainder % 2 ? 1 : 0\n        oddCount +=\
    \ remainder % 2 ? 0 : 1\n        num = Math.floor(num / 10)\n    }\n    return\
    \ [evenCount, oddCount]\n}", "  let count: [number, number] = [0, 0];\n\n  //\
    \ If the number is negative, add one to it.\n  if (num < 0) {\n    num *= -1;\n\
    \    count[1] += 1;\n  }\n\n  // Remove the first digit if it is even.\n  if (num\
    \ % 2 === 0) {\n    num -= 1;\n    count[0] += 1;\n  }\n\n  // Remove the last\
    \ digit if it is odd.\n  if (num % 2 === 1) {\n    num -= 1;\n    count[1] +=\
    \ 1;\n  }\n\n  return count;\n}\n", "  let count = 0;\n  let lastEven = num;\n\
    \  let lastOdd = num;\n  while (num > 0) {\n    lastEven = num % 10;\n    lastOdd\
    \ = num % 10;\n    num = Math.floor(num / 10);\n    count++;\n  }\n  return [lastEven,\
    \ lastOdd];\n}\n", "  return [\n    (num % 2) === 0 ? 1 : ((num % 2) === 0 ? 2\
    \ : ((num % 2) === 0 ? 3 : ((num % 2) === 0 ? 4 : ((num % 2) === 0 ? 5 : ((num\
    \ % 2) === 0 ? 6 : ((num % 2) === 0 ? 7 : ((num % 2) === 0 ? 8 : ((num % 2) ===\
    \ 0 ? 9 : ((num % 2) === 0 ? 10 : ((num % 2) === 0 ? 11 : ((num % 2) === 0 ? 12\
    \ : ((num % 2) === 0 ? 13 : ((num % 2) === 0 ? 14 : ((num % 2) === 0 ? 15 : ((num\
    \ % 2) === 0 ? 16 : ((num % 2) === 0 ? 17 : ((num % 2) === 0 ? 18 : ((num % 2)\
    \ === 0 ? 19 : ((num % 2) === 0 ? 20 : ((num % 2) === 0 ? 21 : ((num % 2) ===\
    \ 0 ? 22 : ((num % 2) === 0 ? 23 : ((num % 2) === 0 ? 24 : ((num % 2) === 0 ?\
    \ 25 : ((num % 2) === 0 ? 26 : ((num % 2) === 0 ? 27 : ((num % 2) === 0 ? 28 :\
    \ ((num % 2) === 0 ? 29 : ((num % 2) === 0 ? 30 : ((num % 2) === 0 ? 31 : ((num\
    \ % 2) === 0 ? 32 : ((num % 2) === 0 ? 33 : ((num % 2) === 0 ? 34 : ((num % 2)\
    \ === 0 ? 35 : ((num % 2) === 0 ? 36 : ((num % 2) === 0 ? 37 : ((num % 2) ===\
    \ 0 ? 38 : ((num % 2) === 0 ? 39 : ((num % 2) === 0 ? 40 : ((num % 2) === 0 ?\
    \ 41 : ((num % 2) === 0 ? 42 : ((num % 2) === 0 ? 43 : ((num % 2) === 0 ? 44 :\
    \ ((num % 2) === 0 ? 45 : ((num % 2) === 0 ? 46 : ((num % 2) === 0 ? 47 : ((num\
    \ % 2) === 0 ? 48 : ((num % 2) === 0 ? 49 : ((num % 2) === 0 ? 50 : ((num % 2)\
    \ === 0 ? 51 : ((num % 2) === 0 ? 52 : ((num % 2) === 0 ? 53 : ((num % 2) ===\
    \ 0 ? 54 : ((num % 2) === 0 ? 55 : ((num % 2) === 0 ? 56 : ((num % 2) === 0 ?\
    \ 57 : ((num % 2) === 0 ? 58 : ((num % 2) === 0 ? 59 : ((num % 2) === 0 ? 60 :\
    \ ((num % 2) === 0 ? 61 : ((num % 2) === 0 ? 62 : ((num % 2) === 0 ? 63 : ((num\
    \ % 2) === 0 ? 64 : ((num % 2) === 0 ? 65 : ((num % 2) === 0 ? 66 : ((num % 2)\
    \ === 0 ? 67 : ((num % 2) === 0 ? 68 : ((num % 2) === 0 ? 69 : ((num % 2) ===\
    \ 0 ? 70 : ((num % 2) === 0 ? 71 : ((num % 2) === 0 ? 72 : ((num % 2) === 0 ? ",
  "  const evenCount: number[] = [];\n  const oddCount: number[] = [];\n\n  let remainder\
    \ = num;\n  for (let i = 0; i < 10; i++) {\n    evenCount.push(remainder % 10);\n\
    \    remainder = Math.floor(remainder / 10);\n  }\n  for (let j = 0; j < 10; j++)\
    \ {\n    oddCount.push(remainder % 10);\n    remainder = Math.floor(remainder\
    \ / 10);\n  }\n\n  return [evenCount, oddCount];\n}\n", "    let sum: number =\
    \ num;\n    let odd: number;\n    let even: number;\n    while (num > 0) {\n \
    \       odd = sum % 2;\n        even = sum / 2;\n        sum = even;\n    }\n\
    \    return [odd, even];\n}", "  const arr = String(Math.abs(num)).split('')\n\
    \  const even = []\n  const odd = []\n  arr.forEach(item => {\n    if (item ===\
    \ '1') even.push(item)\n    if (item === '0') odd.push(item)\n  })\n  return [even,\
    \ odd]\n}\n", "  var evenCount = 0;\n  var oddCount = 0;\n  while (num >= 0) {\n\
    \    if (num % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n\
    \    }\n    num /= 10;\n  }\n  return [evenCount, oddCount];\n}\n", "  const odd_counter:\
    \ number[] = new Array(num.toString().length).fill(0);\n  const even_counter:\
    \ number[] = new Array(num.toString().length).fill(0);\n  for (let i = 0; i <\
    \ num.toString().length; i += 1) {\n    if (num.toString()[i].match(/^[13579]$/))\
    \ {\n      even_counter[num.toString().length - 1 - i] = num.toString().length\
    \ - 1 - i;\n    } else {\n      odd_counter[num.toString().length - 1 - i] = num.toString().length\
    \ - 1 - i;\n    }\n  }\n  return [even_counter, odd_counter];\n}\n", "  const\
    \ count = 0;\n  const result = Array(num < 0 ? -num : num);\n  for (let index\
    \ = 0; index < num; index++) {\n    result[index] = index % 2 === 0 ? count :\
    \ count + 1;\n    count = count % 2 === 0 ? 0 : count + 1;\n  }\n  return result;\n\
    }\n", "  const str = num.toString();\n  if (str.length < 2) return [str.length,\
    \ str.length];\n  const even = str.search(/[02468]/g);\n  const odd = (str.search(/[0346]/g)\
    \ + str.search(/[13579]/g)) / 2;\n  return [even, odd];\n}\n", "  const numStr\
    \ = String(num);\n  const evenCount: number[] = [];\n  const oddCount: number[]\
    \ = [];\n\n  for (let i = numStr.length - 1; i >= 0; i--) {\n    const currentChar\
    \ = numStr.charAt(i);\n    if (currentChar === \"1\") {\n      oddCount.push(Number(currentChar));\n\
    \    } else {\n      evenCount.push(Number(currentChar));\n    }\n  }\n\n  return\
    \ [evenCount, oddCount];\n}\n", "  let evens: number;\n  let odds: number;\n \
    \ if (num < 0) {\n    evens = 1;\n    odds = 1;\n  } else if (num === 0) {\n \
    \   evens = 0;\n    odds = 0;\n  } else {\n    evens = 0;\n    odds = 0;\n   \
    \ const rem = Math.floor(num / 10);\n    for (let i = 0; i < rem; i++) {\n   \
    \   evens += num % 10 === 0 ? 1 : 0;\n      odds += num % 10 === 0 ? 0 : 1\n \
    \   }\n    evens -= num % 10 === 0 ? 1 : 0;\n    odds += num % 10 === 0 ? 0 :\
    \ 1\n  }\n  return [evens, odds]\n}\n", "  if (num >= 0) {\n    return even_odd_count(num\
    \ / 10) + [1, num % 10];\n  } else {\n    return [1, 1];\n  }\n}\n", "  let evenCount\
    \ = 0;\n  let oddCount = 0;\n  for (let i = num; i > 0; i -= 2) {\n    evenCount\
    \ += 1;\n  }\n  for (let i = 1; i < num; i++) {\n    oddCount += 1;\n  }\n  return\
    \ [evenCount, oddCount];\n}\n", "  let odd = 1;\n  let even = 1;\n  let i = 1;\n\
    \  while (num >= 0) {\n    const temp = num % 10;\n    if (temp === 0) {\n   \
    \   even += 1;\n    } else {\n      odd += 1;\n    }\n    num = Math.floor(num\
    \ / 10);\n    i += 1;\n  }\n  return [even, odd];\n}\n", "  const odd = num %\
    \ 2;\n  const even = num - odd;\n  if (odd)\n    return [odd, 1];\n  else\n  \
    \  return [even, 0];\n}\n", "  let even_count = 0;\n  let odd_count = 0;\n  while\
    \ (num > 0) {\n    if (num % 2 === 0) {\n      even_count++;\n    } else {\n \
    \     odd_count++;\n    }\n    num = Math.floor(num / 10);\n  }\n  return [even_count,\
    \ odd_count];\n}", "  let even = num.toString().split('')\n  let odd = even.map(item\
    \ => {\n    return Number(item) % 2 === 1 ? item : Number(item) + ''\n  })\n \
    \ return [...new Set(even), ...new Set(odd)]\n}\n", "  const isEven = num & 1\
    \ === 0;\n  const isOdd = (num & 1) === 1;\n  return [isEven, isOdd];\n}\n", " \
    \ let result = [1, 0]\n  while ((num > 0) && (num % 2 === 0)) {\n    result.push(0)\n\
    \    num = Math.floor(num / 2)\n  }\n  while ((num > 0) && (num % 2 !== 0)) {\n\
    \    result.push(1)\n    num = Math.floor(num / 2)\n  }\n  return result\n}\n",
  "    let even_counter = 0;\n    let odd_counter = 0;\n\n    while (num > 0) {\n\
    \        if (num % 2 === 0) {\n            even_counter++;\n        } else {\n\
    \            odd_counter++;\n        }\n        num = Math.floor(num / 10);\n\
    \    }\n    return [even_counter, odd_counter];\n}\n", "  let odd: number[] =\
    \ [];\n  let even: number[] = [];\n  let count = 0;\n\n  while (num >= 0) {\n\
    \    if (num % 2 === 0) {\n      even.push(num);\n      count++;\n    } else {\n\
    \      odd.push(num);\n      count++;\n    }\n    num = Math.floor(num / 10);\n\
    \  }\n\n  return [even, odd];\n}\n", "  if (num < 0) {\n    return [-1, -1];\n\
    \  }\n  let evenCount = 0;\n  let oddCount = 0;\n  let tmpNum = num;\n  while\
    \ (tmpNum > 0) {\n    tmpNum /= 10;\n    evenCount++;\n  }\n  while (tmpNum %\
    \ 2 !== 0) {\n    tmpNum /= 10;\n    oddCount++;\n  }\n  return [evenCount, oddCount];\n\
    }\n", "    let res = [];\n    let even_count = 0;\n    let odd_count = 0;\n\n\
    \    let numStr = num.toString();\n    for (let i = 0; i < numStr.length; i++)\
    \ {\n        let char = numStr[i];\n        let n = parseInt(char);\n        even_count\
    \ += n & 1 ? 1 : 0;\n        odd_count += n & 2 ? 1 : 0;\n        res.push(n);\n\
    \    }\n\n    return [even_count, odd_count];\n}\n", "  let arr = [] as [number,\
    \ number][];\n  let temp: number = 0;\n  while (num) {\n    if (num % 2 === 0)\
    \ {\n      arr.push([num, temp]);\n    }\n    num = Math.floor(num / 10);\n  \
    \  temp++;\n  }\n  return arr;\n}\n", "  const sum = (num.toString().split('').reduce((acc,\
    \ val) => {\n    return acc + Number(val);\n  }, 0));\n  if (num < 0) {\n    return\
    \ [sum, Math.abs(sum)];\n  }\n  return [sum, sum - num];\n}\n", "  let arr: number[]\
    \ = [];\n  let totalEvenCount = 0;\n  let totalOddCount = 0;\n\n  while (num >\
    \ 0) {\n    totalEvenCount += num % 2 === 0 ? 1 : 0;\n    totalOddCount += num\
    \ % 2 !== 0 ? 1 : 0;\n    arr.push(num % 10);\n    num = Math.floor(num / 10);\n\
    \  }\n\n  return [totalEvenCount, totalOddCount];\n}\n", "  const count = num.toString().split('').reduce((acc,\
    \ curr) => {\n    let num = Number(curr)\n    if (num & 1) {\n      acc += 2\n\
    \    } else {\n      acc += 1\n    }\n    return acc\n  }, 0)\n  return [count,\
    \ count % 2 === 0 ? 2 : 1]\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
