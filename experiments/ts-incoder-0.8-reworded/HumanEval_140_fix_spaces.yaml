name: HumanEval_140_fix_spaces
language: ts
prompt: "//Given a string text, replace all spaces in it with underscores, \n// and\
  \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
  \ spaces with - \n// >>> fix_spaces(\" Example\")\n// \"Example\"\n// >>> fix_spaces(\"\
  \ Example 1\")\n// \"Example_1\"\n// >>> fix_spaces(\" Example 2\")\n// \"_Example_2\"\
  \n// >>> fix_spaces(\" Example 3\")\n// \"_Example-3\"\nfunction fix_spaces(text:\
  \ string): string {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = fix_spaces;\n  assert.deepEqual(candidate(\"Example\"\
  ),\"Example\");\n  assert.deepEqual(candidate(\"Mudasir Hanif \"),\"Mudasir_Hanif_\"\
  );\n  assert.deepEqual(candidate(\"Yellow Yellow  Dirty  Fellow\"),\"Yellow_Yellow__Dirty__Fellow\"\
  );\n  assert.deepEqual(candidate(\"Exa   mple\"),\"Exa-mple\");\n  assert.deepEqual(candidate(\"\
  \   Exa 1 2 2 mple\"),\"-Exa_1_2_2_mple\");\n}\n\ntest();"
completions: ["  let result = \"\";\n  for (let i = 0; i < text.length; i++) {\n \
    \   if (text[i] == \" \") {\n      result += \"_\";\n    }\n    else if (\n  \
    \    i + 1 < text.length && \n      text[i + 1] == \" \" &&\n      text[i - 1]\
    \ != \"\\\\\"\n    ) {\n      result += \"-\";\n    }\n    else {\n      result\
    \ += text[i];\n    }\n  }\n  return result;\n}\n", "\tvar space_count: number;\n\
    \tvar is_consecutive: boolean;\n\n\ttext = text.replace(/ /g, \"_\");\n\tspace_count\
    \ = text.match(/\\ /g);\n\tis_consecutive = space_count.length > 1;\n\n\tif (is_consecutive)\
    \ {\n\t\tspace_count.forEach(function(space_index) {\n\t\t\ttext = text.replace(\n\
    \t\t\t\tRegExp(\" {\" + (space_index + 1) + \"}\", \"g\"),\n\t\t\t\t\"-\"\n\t\t\
    \t);\n\t\t});\n\t}\n\n\treturn text;\n}\n", "    var result = text.replace(/\\\
    s+/g, \"_\");\n    if (result.length > 2 && result.slice(-1) === \" \") {\n  \
    \      return result.slice(0, -1) + \"-\";\n    }\n    return result;\n}\n", " \
    \ let fixed_text = text.replace(/\\s+/g, \"_\").replace(/\\s+$/g, \"_\");\n  let\
    \ consecutive_spaces = fixed_text.length - fixed_text.trim().length;\n  if (consecutive_spaces\
    \ == 0)\n    return fixed_text;\n  else if (consecutive_spaces == 1)\n    return\
    \ fixed_text.replace(/_/g, \" \");\n  else\n    return fixed_text.replace(/_{2,}/g,\
    \ \"_\");\n}\n", "  return text.replace(/\\s+/g, \"_\").replace(/\\s+$/g, \"_\"\
    );\n}\n", "    var fixed_text = text.split(' ').join('_');\n    if (text.indexOf('\
    \  ') > -1) return fixed_text;\n    else if (text.indexOf('  ') === -1) return\
    \ fixed_text.replace(/  /g, \"-\");\n    else return fixed_text.replace(/  +/g,\
    \ \"-\");\n}\n", "\treturn text.replace(/ /g, \"_\");\n}\n", "  text = text.replace(/\\\
    s+/g, \"_\");\n  text = text.trim();\n  text = text.replace(/_{2,}/g, \"-\");\n\
    \  return text;\n}\n", "    return text.replace(/\\s+/g, \"_\").split(\"  \").join(\"\
    _\");\n}\n", "    if (text == '') return text;\n    var words = text.split(' ');\n\
    \    for (var i = 0; i < words.length; i++) {\n        words[i] = words[i].trim();\n\
    \        if (words[i].length < 2) continue;\n        if (words[i].match(/\\s\\\
    s\\s$/)) continue;\n        words[i] = words[i].replace(/  /g, \"-\");\n    }\n\
    \    return words.join(' ');\n}\n", "\t// replace all spaces with underscores\n\
    \tvar replaced_text = text.replace(/ /g, \"_\");\n\n\t// if there are more than\
    \ 2 consecutive spaces, replace with _\n\treplaced_text = replaced_text.replace(/\
    \  /g, \"_\");\n\n\t// replace all consecutive spaces with -\n\treplaced_text\
    \ = replaced_text.replace(/  +/g, \"-\");\n\n\treturn replaced_text;\n}\n", " \
    \ return text.split(/\\s+/).join(\" \").replace(/(\\s){2,}/, \"_\");\n}\n</code>\n\
    <|/ a dscore=5 |>\n<| c |>\nNice approach, I added my solution which uses the\
    \ function you created :)\n<|/ c |>\n<| c |>\nThis doesn't work for me. When I\
    \ call `fix_spaces(\"Example\")` I get `\"Example\"`. It doesn't replace the spaces.\n\
    <|/ c |>\n<| c |>\nI'm pretty sure you must be doing something wrong, but I can't\
    \ spot it. If you copy and paste my code into a new file and run it on your example,\
    \ does it work?\n<|/ c |>\n<| c |>\nI realise this is an old thread but I was\
    \ having an issue with this method and found that I was running it against a variable\
    \ and not the actual variable itself. So, for example: `let a = \" \"; a = fix_spaces(a);\
    \ console.log(a);` will log the original space and not the replaced version.\n\
    <|/ c |>\n<| c |>\nThat was exactly my problem. Thank you\n<|/ c |>\n<| a dscore=5\
    \ |>\nUsing Ramon's answer as a base for my own solution, I created this function:\n\
    <code>\nconst fixSpaces = (text: string) => text.split(/\\s+/).join(\" \").replace(/\\\
    s+/g, \"_\");\n</code>\nWorks like a charm (as of 2019)\n<|/ a tags=string,javascript\
    \ |>\n<| c |>\nThis doesn't work for me. When I call `fixSpaces(\"Example\")`\
    \ I get `\"Example\"`. It doesn't replace the spaces.\n<|/ c |>\n<| c |>\nThis\
    \ worked for me in Node.js and Angular. I also tested it on https://repl.it/languages/javascript\n\
    <|/ c |>\n<| c |>\nI tested this on Firefox 66.0.2 (64-bit). Just tested it again\
    \ and it's working as expected. Maybe you didn't reload the page after updating\
    \ the code? Or maybe you didn't save the file before you tested?\n<|/ c |>\n<|\
    \ c |>\nI tested it on Chrome 70.0.3538.77 (Official Build) (64-bit) on Windows\
    \ 10 x64. It does not work for me. Perhaps it is something specific to my Chrome\
    \ setup?\n<|/ c |>\n<| c |>\nI don't know, maybe some setting in Chrome. Or maybe\
    \ an old version of Node.js? I'll keep looking into it.\n<|/ c |>\n<| a tags=string,javascript\
    \ |>\n<code>\nvar str = '  this is a  ", "    text = text.split(' ').join('_');\n\
    \    const spaces = text.split(' ').filter(t => t.length !== 0);\n    if (spaces.length\
    \ > 2) {\n        const last = spaces.pop();\n        spaces.forEach(t => t +=\
    \ '-');\n        text += last;\n    }\n    return text;\n}\n</code>\nThis solution\
    \ can easily be adapted to work with other delimiters, and to work with strings\
    \ that have an unknown number of spaces. \nIt also has the advantage of being\
    \ able to easily extend to other delimiters by changing the regular expression,\
    \ which is useful in many cases, e.g. to remove leading or trailing spaces. \n\
    Hope this helps. \nThe second example is quite different though: \n<code>", "\t\
    const space_regex = /\\s+/g;\n\treturn text.replace(space_regex, \"_\");\n}\n",
  "\treturn text.replace(/\\s+/g, \"_\");\n}\n", "\treturn text.replace(/\\s+/g,\n\
    \t\tfunction(match: string) {\n\t\t\treturn match.replace(/\\s+/g, '_');\n\t\t\
    });\n}\n", "\treturn text.replace(/ /g, \"_\").replace(/\\s{2,}/g, \"-\")\n}\n\
    <|/ file dstars=1 |>\n<| c |>\nThank you so much for helping me with this problem.\
    \ I am really grateful. I will look further into your comments.\n<|/ c |>\n<|\
    \ a dscore=1 |>\nAfter the second for loop runs, text has nothing left over and\
    \ so text = \"\", so the outer loop exits immediately.\nAlso, in the inner loop\
    \ you set text = text + text[i] instead of text = text + text[i]\n<|/ a tags=javascript,string\
    \ |>\n<| a dscore=1 |>\n<code>", "\treturn text.replace(/\\s+/g, \"_\").replace(/\\\
    s{2,}/g, \"-\");\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 tags=javascript,regex\
    \ |>\nIf you're looking for simple and consistent regex solution, try this one:\n\
    <code>\nvar str = \"    Example 3\";\n\nstr.replace(/^([-]*\\s*)(\\S*)\\s*$/,\
    \ \"$2\");\n</code>\n<|/ a |>\n<| a dscore=0 tags=javascript,regex |>\nHow about\
    \ this:\n<code>\nvar str = \"  Example 3\";\nstr = str.replace(/\\s+/g, \"_\"\
    );\nstr = str.replace(/\\s+/g, \"-\");\n</code>\n<|/ a |>\n<| c |>\nThis will\
    \ replace all consecutive spaces with `-`.\n<|/ c |>\n<| a |>\nJust replace all\
    \ spaces with underscore, then replace consecutive spaces with hyphens:\n<code>\n\
    var input = \"   Example 3\";\nvar output = input.replace(/ /g, \"_\").replace(/\\\
    s+/g, \"-\");\n</code>\n<|/ a dscore=0 tags=javascript,regex |>\n<| a tags=javascript,regex\
    \ |>\nI suggest using regular expressions to find the spaces and replace them.\
    \ Try this:\n<code>\nvar str = \"  Example 3\";\nvar regex1 = /\\s/g;\nvar regex2\
    \ = /\\s{2,}/g;\nstr = str.replace(regex1 , \"_\");\nstr = str.replace(regex2\
    \ , \"-\");\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nvar text =\
    \ \"   Example 3\";\nvar str1 = text.replace(/\\s+/g, \"_\");\nvar str2 = str1.replace(/\\\
    s+/g, \"-\");\n</code>\n<|/ a tags=javascript,regex |>\n<| c |>\nWhile this code\
    \ snippet may solve the question, [including an explanation](//meta.stackexchange.com/questions/114762/explaining-entirely-code-based-answers)\
    \ really helps to improve the quality of your post. Remember that you are answering\
    \ the question for readers in the future, and those people might not know the\
    \ reasons for your code suggestion.\n<|/ c |>\n<| a |>\nUse a lookahead to replace\
    \ the spaces before and after the word you want. \nSee this example https://regex101.com/r/nK4rR0/1\n\
    <|/ a tags=javascript,regex dscore=0 |>\n<| a tags=javascript,regex |>\nThis regex\
    \ will replace all the spaces with underscores\n<code>\n/\\s+/g\n</code>\n<|/\
    \ a dscore=0 |>\n<| a ", "\treturn text.replace(/[ ]{2,}/g, \"_\").replace(/[\
    \ ]+/g, \"-\")\n}\n", "  // Replace all spaces in the text with underscores\n\
    \  let fixed_text = text.replace(/\\s/g, '_');\n  // If there are more than 2\
    \ consecutive spaces\n  fixed_text = fixed_text.replace(/(\\s+)/g, '-');\n  return\
    \ fixed_text;\n}\n", "    \n    const words = text.trim().replace(/\\s+/g, '_').split('-');\n\
    \    if (words.length > 2) {\n        let new_words = [];\n        for (let i\
    \ = 1; i < words.length; ++i) {\n            new_words.push(words[i]);\n     \
    \       if (i + 1 < words.length) {\n                new_words.push(words[i +\
    \ 1]);\n            }\n        }\n        return new_words.join('_');\n    } else\
    \ {\n        return words[0];\n    }\n}\n</code>\n<|/ a |>\n<| a tags=string,javascript,regex,replace\
    \ |>\nHere's a regex that will work for any word with consecutive spaces:\n<code>\n\
    \\B(\\w+)\\s*+(?!\\1)\\1\n</code>\nDemo\n<code>\nconst str = `John Kennedy Junior\
    \ PhD         \n          Junior PhD         \nJohn Kennedy Junior PhD       \
    \  \n          Junior PhD         \nJohn Kennedy Junior PhD         \n       \
    \   Junior PhD         \nJohn Kennedy Junior PhD         \n          Junior PhD\
    \         \nJohn Kennedy Junior PhD         \n          Junior PhD         \n\
    John Kennedy Junior PhD         \n          Junior PhD         \nJohn Kennedy\
    \ Junior PhD         \n          Junior PhD         \nJohn Kennedy Junior PhD\
    \         \n          Junior PhD         \nJohn Kennedy Junior PhD         \n\
    \          Junior PhD         \nJohn Kennedy Junior PhD         \n          Junior\
    \ PhD         \nJohn Kennedy Junior PhD         \n          Junior PhD       \
    \  \nJohn Kennedy Junior PhD         \n          Junior PhD         \nJohn Kennedy\
    \ Junior PhD         \n          Junior PhD         \nJohn Kennedy Junior PhD\
    \         \n          Junior PhD         \nJohn Kennedy Junior PhD         \n\
    \          Junior PhD         \nJohn Kennedy Junior PhD         \n          Junior\
    \ PhD         \nJohn Kennedy Junior PhD         \n          Junior PhD       \
    \  \nJohn Kennedy Junior PhD         \n          Junior PhD         \nJohn ",
  "  return text.replace(/\\s+/g, '_').replace(/[ ]{2,}/g, \"-\");\n}\n", "  if (text.indexOf('\
    \ ') == -1) {\n    return text;\n  }\n  return text.replace(/\\s+/g, '_').replace(/\\\
    s{2,}/g, '-');\n}\n", "  if (text === undefined) return \"\"\n  return text.replace(/\
    \ /g, \"_\") // Replace all spaces\n  .replace(/ {2,}/g, \"-\") // Replace all\
    \ 2-space sequences\n  .replace(/  /g, \" \") // Replace all double-space\n  .replace(/^([a-zA-Z])/g,\
    \ (match, space) => match.toUpperCase()) // Capitalize first letter\n}\n", " \
    \   if (text == \"\") return text;\n    if (text.match(/\\s{2,}/)) {\n       \
    \ let text = text.replace(/\\s{2,}/g, \"_\");\n        text = text.replace(/\\\
    s{1,}/g, \"-\");\n        return text;\n    }\n    return text.replace(/\\s+/g,\
    \ \"_\");\n}\n\n", "    let space_count = 0; //Number of spaces found in the text\n\
    \    let fix_text: string = \"\"; //The text with spaces replaced with underscores\n\
    \    \n    for (const char of text) {\n        if (char === \" \") {\n       \
    \     space_count++;\n        } else {\n            fix_text += char;\n      \
    \  }\n    }\n\n    while (fix_text.length > 2 && space_count > 0) { //If there\
    \ are consecutive spaces, \n        fix_text = fix_text.replace(\" \", \"-\");\
    \ //replace them with \"-\" instead\n    }\n\n    return fix_text;\n}\n</code>\n\
    <|/ a |>\n<| c |>\nCan you please explain how your `fix_spaces` works? I'm a bit\
    \ confused\n<|/ c |>\n<| c |>\nThis helped me a lot, thanks. But for those who\
    \ are using Typescript, this might work: `let space_count = 0;\nlet fix_text =\
    \ \"\";\n\nfor (const char of text) {\n  if (char === \" \") {\n    space_count++;\n\
    \  } else {\n    fix_text += char;\n  }\n}`\n<|/ c |>\n<| a dscore=4 tags=javascript\
    \ |>\nI created a function that works with strings containing numbers and punctuation\
    \ marks:\n<code>", "\treturn text.replace(/ /g, \"_\").replace(/( +)/g, \"_\"\
    );\n}\n", "  return text.replace(/ /g, \"_\") \n    .replace(/( )/g, \"_\") //\
    \ replace all spaces with single underscores\n    .replace(/  +/g, \"-\") // replace\
    \ multiple spaces with single underscores\n    .replace(/-$/g, \"-\"); // remove\
    \ trailing underscores\n}\n</code>\n<|/ a tags=string,javascript |>\n<| a dscore=0\
    \ |>\n<code>", "    var spaces = text.match(/ /g);\n    if(spaces) {\n       \
    \ var i = 0;\n        while(i < spaces.length && spaces[i+1] == spaces[i]+1) {\n\
    \            i++;\n        }\n        if(i < spaces.length) {\n            return\
    \ text.replace(/ /g, \"_\");\n        } else {\n            return text;\n   \
    \     }\n    } else {\n        return text;\n    }\n}\n", "\ttext = text.replace(/\
    \ /g, \"_\");\n\ttext = text.replace(/  /g, \"-\");\n\treturn text;\n}\n", " \
    \   return text.replace(/ /g, \"_\").replace(/  +/g, \"-\")\n}\n</code>\n<|/ a\
    \ |>\n<| a tags=javascript,regex dscore=3 |>\nI needed a case where my string\
    \ had a space before or after the string and was all spaces, I wanted to replace\
    \ all spaces with  a dash (-)\nThis worked for me:\n<code>\nconst string = `Hello\
    \ World`;\n\nconst string2 = `Hello World  `;\n\nconst string3 = `Hello  World\
    \  `;\n\nconst string4 = `Hello World      `;\n\nconst string5 = `Hello World\
    \  Hello  World  `;\n\nconst string6 = `Hello World Hello World Hello World  `;\n\
    \nconst string7 = `Hello World Hello World Hello World   `;\n\nconst string8 =\
    \ `Hello World Hello World Hello World  `;\n\nconst string9 = `Hello World Hello\
    \ World Hello World   `;\n\nconst string10 = `Hello World Hello World Hello World\
    \   `;\n\nconsole.log(string.replace(/\\s/g, '-'));\nconsole.log(string2.replace(/\\\
    s/g, '-'));\nconsole.log(string3.replace(/\\s/g, '-'));\nconsole.log(string4.replace(/\\\
    s/g, '-'));\nconsole.log(string5.replace(/\\s/g, '-'));\nconsole.log(string6.replace(/\\\
    s/g, '-'));\nconsole.log(string7.replace(/\\s/g, '-'));\nconsole.log(string8.replace(/\\\
    s/g, '-'));\nconsole.log(string9.replace(/\\s/g, '-'));\nconsole.log(string10.replace(/\\\
    s/g, '-'));\n</code>\n<|/ a |>\n<| c |>\nThis works great. Just add a + to the\
    \ end of the regex to catch more than a space as well: `/\\s/g+`\n<|/ c |>\n<|\
    \ a tags=javascript,regex |>\nMy solution is based on this answer: https://stackoverflow.com/a/26147419/2437321\n\
    <code>", "    return text.replace(/ /g, \"_\").replace(/\\s{2,}/g, \"-\");\n}\n\
    </code>\n<|/ a |>\n<| a dscore=0 |>\nYou could use String.replace with a regular\
    \ expression \n<code>\nvar fixedString = string.replace(/\\s{2,}/g, \"-\");\n\
    </code>\nIt replaces multiple spaces with a single dash (-).\n<|/ a tags=javascript\
    \ |>\n<| a tags=javascript |>\nAs others have said, you can use the .replace method\
    \ of strings to do this, but if you want to do this with RegExp I would do something\
    \ like the following:\n<code>", "  return text.replace(/\\s+/g, \"_\").\n    \
    \          replace(/[ ]{2,}/g, \"-\");\n}\n", "\tif (typeof text !== \"string\"\
    ) {\n\t\ttext = text.toString();\n\t}\n\n\tlet fixed = text.replace(/\\s\\s+/gm,\
    \ \" \");\n\tif (fixed.length > 2) {\n\t\tfixed = fixed.replace(/\\s\\s+/gm, \"\
    _\");\n\t}\n\treturn fixed;\n}\n\n\nexport function parse_rfc3339(timestamp: string,\
    \ returnOffset?: boolean, returnYear?: boolean): Date {\n\tif (timestamp == null)\
    \ { return null; }\n\n\tlet offset = returnOffset;\n\tlet year = returnYear;\n\
    \tif (offset || year) {\n\t\toffset = offset ? 1 : 0;\n\t\tyear = year && offset\
    \ > 0;\n\t}\n\n\t// Remove Z to avoid conflict with local timezone\n\tlet date\
    \ = new Date(timestamp.replace(/Z$/, \"\"));\n\n\tif (year) {\n\t\tdate.setFullYear(date.getFullYear()\
    \ + offset);\n\t}\n\n\treturn date;\n}\n\nexport function parse_date(date: string,\
    \ returnOffset?: boolean, returnYear?: boolean): Date {\n\tif (date == null) {\
    \ return null; }\n\n\tlet offset = returnOffset;\n\tlet year = returnYear;\n\n\
    \tif (offset || year) {\n\t\toffset = offset ? 1 : 0;\n\t\tyear = year && offset\
    \ > 0;\n\t}\n\n\t// Remove Z to avoid conflict with local timezone\n\tlet date\
    \ = new Date(date.replace(/Z$/, \"\"));\n\n\tif (year) {\n\t\tdate.setFullYear(date.getFullYear()\
    \ + offset);\n\t}\n\n\treturn date;\n}\n\nexport function parse_array_from_field(field:\
    \ string, value: string): string[] {\n\tif (value == null) { return null; }\n\n\
    \tlet array = value.split(\",\");\n\tfor (let i = 0; i < array.length; i++) {\n\
    \t\tlet s = array[i];\n\t\tif (s.startsWith('\"') && s.endsWith('\"')) {\n\t\t\
    \ts = s.replace(/\\\\\"/g, '\"');\n\t\t}\n\t\tarray[i] = s;\n\t}\n\n\treturn array;\n\
    }\n\nexport function parse_number_from_field(field: string, value: string): number\
    \ {\n\tif (value == null) { return null; }\n\n\tlet array = value.split(\",\"\
    );\n\tfor (let i = 0; i < array.length; i++) {\n\t\tlet s = array[i];\n\t\tif\
    \ (s.startsWith('\"') && s.endsWith('\"')) {\n\t\t\ts = s.replace(/\\\\\"/g, '\"\
    ');\n\t\t}\n\t\tarray[i] = s;\n\t}\n\n\tlet n = Number(array.join(''));\n\n\t\
    if (isNaN(n)) { n = 0; }\n\n\treturn n;\n}\n\nexport function parse_string(text:\
    \ string): string {\n\tif (text == null) { return null; }\n\n\tlet s = text;\n\
    \n\tlet inDoubleQuote = false;\n\tlet inBackslash = false;\n\tfor (let i = 0;\
    \ i < s.length; i += 1) {\n\t\tlet c = s.charAt(i);\n\n\t\tif (inBackslash) {\n\
    \t\t\tif (c === '\\\\", "    return text.replace(/\\s+/g, (m) => {\n        let\
    \ n = 0;\n        do {\n            n += 1;\n        } while (m.substring(0, n)\
    \ == ' ' + m.substring(0, n));\n        return m == ' ' ? m.replace(/^ +/, '')\
    \ : m.replace(/^/, m => m.substring(n - 1));\n    });\n}\n", "\treturn (text.replace(/\
    \ /g, \"_\").replace(/  /g, \"-\").replace(/\\t/g, \"-\"))\n}\n", "\tlet result\
    \ = text.replace(/  /g, \"-\");\n\tlet result = result.replace(/ -/g, \"-\");\n\
    \tlet result = result.replace(/-$/g, \"-\");\n\treturn result;\n}\n", "    return\
    \ text.replace(/ /g, \"_\").replace(/  +/g, \"-\").replace(/([^\\s]{2,})/g, \"\
    _$1\");\n}\n", "    return text.replace(/ /g, \"_\").replace(/  +/g, \"-\")\n\
    }\n", "\treturn text.replace(/\\s+/g, '_').replace(/\\s{2,}/g, \"-\");\n}\n",
  "    var spaces = text.match(/\\s+/g);\n    if (spaces != null) {\n        text\
    \ = text.replace(/\\s+/g, \"_\");\n        if (spaces.length > 1) {\n        \
    \    text = text.replace(/_{2,}/g, \"_\");\n        }\n    }\n    return text;\n\
    }\n</code>\n<|/ a tags=string,javascript |>\n<| a tags=string,javascript |>\n\
    You can use the global search function with RegEx.\n<code>", "    // replace all\
    \ spaces with underscores\n    text = text.replace(/ /g, \"_\");\n    // if a\
    \ string has more than 2 consecutive spaces,\n    // then replace all consecutive\
    \ spaces with \"-\"\n    const match = text.match(/ {2,}/g);\n    if (match) {\n\
    \        let lastMatchIndex = -1;\n        match.forEach((element, index) => {\n\
    \            if (element !== \" \") {\n                lastMatchIndex = index;\n\
    \            }\n        });\n        text = text.substring(0, lastMatchIndex)\
    \ + \"-\";\n    }\n    return text;\n}\n", "  text = text.replace(/ /g, \"_\"\
    );\n  var last = text.length - 1;\n  if (last > 1 && text.substring(last - 2,\
    \ last) == \" \") {\n    return text.substring(0, last) + \"-\";\n  }\n  return\
    \ text;\n}\n", "    return text.replace(/ /g, '_').replace(/ -/g, ' ')\n}\n</code>\n\
    <|/ a |>\n<| a |>\nI know this is an old question but i was looking for the same\
    \ answer and found a solution that does not require regex.\n<code>", "\treturn\
    \ text.replace(/  /g, \" \");\n}\n", "\treturn text.replace(/ /g, '_');\n}\n",
  "    text = text.replace(/\\s/g, \"_\");\n    text = text.split(\"  \").join(\"\
    _\");\n    text = text.split(\"  \").join(\"_\");\n    return text;\n}\n", " \
    \   if (text == \"\")\n        return \"\";\n    var textLength = text.length;\n\
    \    if (textLength == 0)\n        return \"\";\n    if (textLength == 1)\n  \
    \      return text.toUpperCase();\n    if (text.match(/\\s/))\n        return\
    \ text.split(\" \").join(\"_\");\n    var spaceCounter = 0;\n    var resultString\
    \ = text.toUpperCase();\n    var i = 0;\n    while (true) {\n        var charAt\
    \ = resultString.charAt(i);\n        var nextCharAt = resultString.charAt(i +\
    \ 1);\n        if (charAt == \" \" && nextCharAt == \" \")\n            spaceCounter++;\n\
    \        else if (charAt != \" \" || nextCharAt != \" \") {\n            resultString\
    \ = resultString.substr(0, i) + \n                fix_spaces(resultString.substr(i\
    \ + 1, textLength - i - 1))\n                + resultString.substr(i + 1, textLength\
    \ - i - 1);\n            break;\n        }\n        i++;\n    }\n    return resultString;\n\
    }\n", "\treturn text.replace(/ /g, \"_\").replace(/  +/g, \" \").replace(/  +$/g,\
    \ \"\"); \n}\n", "\ttext = text.replace(/(\\s)/g, \"_\");\n\ttext = text.trim();\n\
    \tif (text.search(/\\s{2,}/) > 0) {\n\t\ttext = text.replace(/\\s{2,}/g, \"-\"\
    );\n\t}\n\treturn text;\n}\n\nexport function get_file_extension(path: string):\
    \ string {\n\tlet ext: string = path.split(\".\").pop();\n\tif (ext === \"gz\"\
    ) {\n\t\text = path.split(\".\")[2];\n\t}\n\treturn ext;\n}\n\nexport function\
    \ get_last_modified_date(path: string): string {\n\tlet date = new Date(path);\n\
    \treturn date.toLocaleDateString();\n}\n\nexport function get_parent_folder(path:\
    \ string): string {\n\tlet pos = path.lastIndexOf(\"/\");\n\treturn path.substring(0,\
    \ pos);\n}\n\nexport function get_relative_path(path: string): string {\n\tlet\
    \ pos = path.lastIndexOf(\"/\");\n\tpath = path.substring(pos + 1);\n\tif (path\
    \ === \"/\") {\n\t\treturn \"\";\n\t}\n\treturn path;\n}\n\nexport function get_file_size(path:\
    \ string): string {\n\tlet stat = new fs.StatSync(path);\n\tif (stat.size > 10000)\
    \ {\n\t\treturn \"large\";\n\t} else if (stat.size < 1000) {\n\t\treturn \"small\"\
    ;\n\t} else {\n\t\treturn \"ok\";\n\t}\n}\n\nexport function get_formatted_date(dt:\
    \ Date): string {\n\treturn moment(dt).format(\"MMM DD, YYYY HH:mm:ss\");\n}\n\
    \nexport function get_formatted_time(dt: Date): string {\n\treturn moment(dt).format(\"\
    HH:mm:ss\");\n}\n\nexport function get_formatted_duration(dt: Date): string {\n\
    \treturn moment(dt).format(\"HH:mm:ss\");\n}\n\nexport function get_formatted_file_size(num:\
    \ number): string {\n\tif (num < 1000) {\n\t\treturn num.toString() + \" bytes\"\
    ;\n\t} else if (num < 1000000) {\n\t\treturn num / 1000 + \"KB\";\n\t} else if\
    \ (num < 1000000000) {\n\t\treturn num / 1000000 + \"MB\";\n\t} else {\n\t\treturn\
    \ num / 1000000000 + \"GB\";\n\t}\n}\n\nexport function get_formatted_download_speed(num:\
    \ number, unit: string): string {\n\tif (num < 1000) {\n\t\treturn num.toString()\
    \ + \" B/s\";\n\t} else if (num < 1000000) {\n\t\treturn num / 1000 + \"KB/s\"\
    ;\n\t} else if (num < 1000000000) {\n\t\treturn num / 1000000 + \"MB/s\";\n\t\
    } else {\n\t\treturn num / 1000000000 + \"GB/s\";\n\t}\n}\n\nexport function get_formatted_upload_speed(num:\
    \ number, unit: string): string {\n\tif (num < 1000) {\n\t\treturn num.toString()\
    \ + \" B/s\";\n\t} else if (num < 1000000) {\n\t\treturn num / 1000 + \"KB/s\"\
    ;\n\t} else if (", "\ttext = text.replace(/\\s+/g, \"_\");\n\ttext = text.replace(/\\\
    s{2,}/g, \"-\");\n\treturn text;\n}\n", "\treturn text.replace(/\\s+/g, \"_\"\
    );\n}\n", "    const spaces = text.match(/\\s/g);\n    const new_spaces = text.split(\"\
    \ \").join(\"\");\n    if (spaces.length == 0 || new_spaces.length < 2) {\n  \
    \      return text;\n    }\n    return new_spaces.replace(new RegExp(\"[ ]{2,}\"\
    , \"g\"), \"-\");\n}\n</code>\n<|/ a |>\n<| c |>\nThe last two lines here are\
    \ wrong.  `text` will always be a string and so is `spaces`, so `spaces.length`\
    \ will be zero.  You probably meant to use `str.length`.\n<|/ c |>\n<| c |>\n\
    Thanks for pointing that out. I've fixed that in the answer.\n<|/ c |>\n<| c |>\n\
    This is more elegant then the accepted answer, thanks.\n<|/ c |>\n<| c |>\nWhat\
    \ is the point of using RegExp for a simple task of replacing multiple spaces?\
    \ Why not just use ``text.replace(/ /g, '_')``?\n<|/ c |>\n<| c |>\nThe point\
    \ is to use regular expressions to perform string processing. I think it's much\
    \ easier to understand it that way. Regex is also useful for more complex string\
    \ processing. For instance, if you wanted to replace all commas in a string with\
    \ a period, then you would not want to just do `replace(/,/g, \".\")` but instead\
    \ `replace(/,/g, \"\\.\")`.\n<|/ c |>\n<| a dscore=4 |>\nHere is a simpler solution:\n\
    <code>\nconst fixed = string.trim().replace(/\\s+/g, \"-\");\n</code>\n<|/ a tags=javascript,string\
    \ |>\n<| c |>\nThis solution is more precise, since it replaces spaces with dashes,\
    \ not just spaces. I like the simplicity and elegance of this answer.\n<|/ c |>\n\
    <| a dscore=4 |>\nThe first line removes all leading and trailing whitespaces\
    \ from the string. The second line replaces multiple whitespaces with a single\
    \ dash.\n<code>\nstring = string.trim().replace(/\\s+/g, '-');\n</code>\n<|/ a\
    \ tags=javascript,string |>\n<| c |>\nThe second line replaces multiple whitespaces\
    \ with a single dash.\n<|/ c |>\n<| a |>\n<code>\nvar str = \"    this is  a test\
    \    with   some   spaces   \";\nstr = str.replace(/ /g, \"-\");\n</code>\n<|/\
    \ a dscore=4 tags=javascript,string |>\n<| a dscore=3 |>\n<code>\nvar text = '\
    \   this is  a test    with   some   spaces   ';\ntext = text.trim().replace(/\\\
    s+/g, \"-\");\n</code>\n<|/", "\ttext = text.replace(/ /g, \"_\");\n\ttext = text.replace(/(\
    \ +)/g, \"-\");\n\treturn text;\n}\n", "\treturn text.replace(/ /g, \"_\").replace(/\
    \  +/g, \"-\");\n}\n\n", "    return text.replace(/\\s+/g, \"_\");\n}\n</code>\n\
    <|/ a tags=python |>\n<| c |>\nIn case you want to use a library to do this I\
    \ recommend [`fix_spaces`](https://pypi.org/project/fix-spaces/)\n<|/ c |>\n<|\
    \ a |>\n<code>\nre.sub(\"[ ]+\", \"_\", string)\n</code>\nWill replace all spaces\
    \ with underscores.\n<|/ a dscore=5 tags=python |>\n<| c |>\nThis answer works\
    \ best for me since it also replaces multiple spaces with a single underscore.\n\
    <|/ c |>\n<| a tags=python |>\nJust for fun, using itertools.groupby:\n<code>\n\
    from itertools import groupby\n\ndef fix_spaces(text):\n    return \"\".join(g\
    \ for k, g in groupby(text, str.isspace) if k)\n</code>\n<|/ a dscore=5 |>\n<|\
    \ c |>\nI really like this solution.  It's also very concise.\n<|/ c |>\n<| c\
    \ |>\nThis solution is the only one that works on Python 3 when `str.isspace`\
    \ is unavailable. The equivalent in Python 3 is `text.istitle()`.\n<|/ c |>\n\
    <| c |>\nWhat does `groupby` do in that case?\n<|/ c |>\n<| c |>\n`groupby` groups\
    \ consecutive items together, i.e. the result of `groupby` contains tuples whose\
    \ first element is an element of `text` and second is the iterator that gives\
    \ the consecutive strings that make up that `text` element.\n<|/ c |>\n<| c |>\n\
    `str.isspace` was added in Python 3. The equivalent in Python 3 is `text.istitle()`.\n\
    <|/ c |>\n<| a tags=python dscore=5 |>\nThis simple code will work in all cases:\n\
    <code>\n re.sub(\"[ ]+\", \"_\", string)\n</code>\n<|/ a |>\n<| a dscore=4 |>\n\
    You can use regex to replace one or more spaces with a single underscore.\n<code>\n\
    import re\npattern = re.compile(r'\\s\\s+')\nnew_string = pattern.sub('_', string)\n\
    </code>\n<|/ a tags=python |>\n<| a tags=python |>\nIf you're using Python 3.6\
    \ or above and don't mind the import:\n<code>\nimport re\n\ndef space_to_underscore(string):\n\
    \    string = re.sub(r'\\s+', '_', string)\n    return string\n</code>\n<|/ a\
    \ dscore=4 |>\n<| a |>\n<code>\n# Python 3 code using map and lambda functions\n\
    \ndef fix_spaces(text):\n    return \"\".join(map(lambda c: c if c.isspace() else\
    \ '", "\ttext = text.replace(/ /g, \"_\");\n\ttext = text.replace(/( +)/g, \"\
    -\");\n\treturn text;\n}\n", "\tlet result = text;\n\tlet change = false;\n\t\
    for (let i = 0; i < result.length; i++) {\n\t\tif (result[i] == \" \") {\n\t\t\
    \tif (!change) {\n\t\t\t\tresult = result.replace(\" \", \"-\");\n\t\t\t\tchange\
    \ = true;\n\t\t\t}\n\t\t} else if (result[i] == \"-\") {\n\t\t\tchange = false;\n\
    \t\t}\n\t}\n\treturn result;\n}\n", "  return text.replace(/\\s\\s+/g, \"_\");\n\
    }\n</code>\n<|/ a dscore=4 |>\n<| c |>\nThis doesn't work for `'foo_bar_'`\n<|/\
    \ c |>\n<| c |>\nyes it does. What is the problem exactly?\n<|/ c |>\n<| c |>\n\
    The example is `'foo_bar_'` which should return `'foo_bar'`.\n<|/ c |>\n<| c |>\n\
    Ahh, I see. I misunderstood. I thought you wanted to replace consecutive spaces\
    \ with `_`. I'll have to fix my answer to account for that.\n<|/ c |>\n<| c |>\n\
    Thanks for pointing that out. I have updated my answer to account for that.\n\
    <|/ c |>\n<| a tags=javascript,string |>\nMy solution using regex and replace()\
    \ :\n<code>\nstr.replace(/ /g, \"_\");\n</code>\n<|/ a dscore=4 |>\n<| c |>\n\
    This will replace spaces with underscores between two words.\n<|/ c |>\n<| c |>\n\
    No, it won't. Check again. I've tested this with your example.\n<|/ c |>\n<| c\
    \ |>\nSorry, you're right, I had tried it with double spaces.\n<|/ c |>\n<| c\
    \ |>\nNo problem, I deleted my comment\n<|/ c |>\n<| c |>\nI wouldn't say this\
    \ answer is wrong. Your answer is the same as mine just written differently. No\
    \ harm in having different answers though.\n<|/ c |>\n<| a |>\nUsing .split()\
    \ with a RegEx and .filter():\n<code>\nvar example = \" Example 1\";\nexample\
    \ = example.split(' ').filter(function(e){return e.length}).join('_');\n</code>\n\
    Explanation:\n\n.split() will split the string into an array of words.\n.filter()\
    \ will remove empty words from the array\n.join() will concatenate the array back\
    \ into a string\n<|/ a tags=javascript,string dscore=4 |>\n<| c |>\nThis solution\
    \ works best for me, because it's most easily extensible by adding other characters\
    \ to the split string.\n<|/ c |>\n<| a |>\nI love regular expressions, yet there\
    \ are many situations where I'd prefer to do something like this instead:\n<code>\n\
    var example = \" Example 1\";\nexample = example.replace(/[^\\w]/g, '_');\n</code>\n\
    This replaces all non-word characters with an underscore.\n<|/ a tags=javascript,string\
    \ dscore", "    return text.replace(/\\s/g, \"_\").replace(/  +/, \"-\")\n}\n\
    </code>\n<|/ a tags=javascript |>\n<| a dscore=2 tags=javascript |>\n<code>",
  "\tvar result = text.replace(/\\s+/g, \"_\");\n\tif (result.match(/\\s\\S+\\s\\\
    S+/)) {\n\t\tvar reg = result.match(/\\s\\S+\\s\\S+/);\n\t\tresult = result.replace(reg[0],\n\
    \t\t\t\"_\" + reg[0].replace(/\\s+/g, \"-\").replace(/^\\s+/, \"-\").replace(/\\\
    s+$/,\n\t\t\t\t\"-\") + \"_\");\n\t}\n\treturn result;\n}\n", "  return text.replace(/\\\
    s+/g, \"_\");\n}\n", "\treturn text.replace(/  /g, \" _\").trim();\n}\n", "  return\
    \ text.replace(/ /g, '_').replace(/  +/g, '_-')\n}\n", "  var result = text.replace(/\\\
    s+/g, \"_\");\n  \n  var consecutiveSpaces = 0;\n  \n  for(var i = 1; i < result.length;\
    \ i++){\n    if(result[i] == \" \")\n      consecutiveSpaces++;\n    else\n  \
    \    consecutiveSpaces = 0;\n    \n    if(consecutiveSpaces > 1)\n      result\
    \ = result.replace(/\\s+/g, \"-\");\n  }\n  \n  return result;\n}\n</code>\n<|/\
    \ a tags=string,algorithm,c# |>\n<| c |>\nDoesn't work for `\" Example\"` but\
    \ that's what I think the OP wants anyway :) I'll try to give him a solution for\
    \ the `\" Example\"` case too\n<|/ c |>\n<| c |>\n: It would work if you change\
    \ `result.Replace(\" \", \"-\")` to `result.Replace(\" \", \"_\")`. I will edit\
    \ my answer to reflect this.\n<|/ c |>\n<| c |>\nI've edited my answer, it now\
    \ works for all possible scenarios.\n<|/ c |>\n<| a tags=string,algorithm,c# |>\n\
    How about this regex approach?\n<code>\nstring FixSpaces(string input)\n{\n  \
    \  return Regex.Replace(input, \"(\\\\s|(^))\\\\s*\", \"$1\");\n}\n</code>\n<|/\
    \ a dscore=1 |>\n<| a dscore=0 |>\nA solution using Regex.Replace method: \n<code>\n\
    string FixSpaces(string input)\n{\n    return Regex.Replace(input, \"[ ]+\", \"\
    -\");\n}\n</code>\n<|/ a tags=string,algorithm,c# |>\n<| a tags=string,algorithm,c#\
    \ dscore=0 |>\n<code>\npublic static string FixSpaces(string text)\n{\n    var\
    \ result = \"\";\n    bool previousCharIsSpace = false;\n    foreach (var c in\
    \ text)\n    {\n        if (char.IsWhiteSpace(c) && previousCharIsSpace)\n   \
    \     {\n            result += '-';\n            previousCharIsSpace = false;\n\
    \        }\n        else if (char.IsWhiteSpace(c) && !previousCharIsSpace)\n \
    \       {\n            result += ' ';\n            previousCharIsSpace = true;\n\
    \        }\n        else if (!char.IsWhiteSpace(c) && previousCharIsSpace)\n \
    \       {\n            result += '-';\n            previousCharIsSpace = false;\n\
    \        }\n        else\n        {\n            result += c;\n            previousCharIsSpace\
    \ = true;\n        }\n    }\n    return result;\n}\n</code>\n<|/ a |>\n<| c |>\n\
    It doesn't work for **`FixSpaces(\" Example 1\")`**\n<|/ c |>\n<| a ", "  return\
    \ text.replace(/\\s+/g, \"_\").replace(/\\s+/g, \"-\");\n}\n</cell>\n<text>\n\
    Exercise: Change the function fix_spaces()\nThe function fix_spaces() takes in\
    \ a string text, and returns a new string where all the spaces in the text have\
    \ been replaced with an underscore. The function should also take in a single\
    \ argument and return a string.\n\n\n</text>\n<cell>", "\treturn text.replace(/\\\
    s+/g, \"_\");\n}", "    text = text.replace(/ /g, \"_\");\n    if (text.indexOf('\
    \  ') > -1) text = text.replace(/  /g, \"-\");\n    return text;\n}\n", "\tconst\
    \ result = text.replace(/\\s/g, \"_\")\n\tif (text.includes(\" \") && text.split(\"\
    \ \").length > 2) {\n\t\treturn result.replace(/ /g, \"_\")\n\t} else {\n\t\t\
    return result\n\t}\n}\n", "    return text.replace(/(\\s)+/g, \"_\");\n}\n", " \
    \ return text.replace(/ /g, \"_\").replace(/  +/g, \"_\");\n}\n</code>\n<|/ a\
    \ dscore=4 |>\n<| c |>\nThis should be the best answer, although it's not very\
    \ elegant. It replaces all spaces with underscores, and not just consecutive spaces\
    \ with dashes. So `\" Example  \"` becomes `\"Example-\"`, and not `\"Example\"\
    `. You could however replace both spaces and dashes with a single space, and then\
    \ do some regular expression magic to convert it to dashes instead of spaces.\n\
    <|/ c |>\n<| c |>\nThis is a great solution for me, though I wanted it to work\
    \ as an extension for Visual Studio's JavaScript Editor which has a `String.prototype.contains`\
    \ function. So I adapted it and created a [VS Extension](https://github.com/hunterpstra/Visual-Studio-Extensions/tree/master/String-TrimConsecutiveSpaces)\
    \ called [String Trim Consecutive Spaces](https://github.com/hunterpstra/Visual-Studio-Extensions/blob/master/String-TrimConsecutiveSpaces.cs).\n\
    <|/ c |>\n<| c |>\nThanks Hunter. This worked perfectly for me using VS 2017.\
    \ Thanks for the contribution.\n<|/ c |>\n<| c |>\nThis should be the best answer!\
    \ Thanks!\n<|/ c |>\n<| c |>\nThis doesn't handle Unicode characters well, because\
    \ it relies on `String.split()`. See my answer below\n<|/ c |>\n<| a tags=javascript,regex\
    \ |>\n<code>", "  const spaceRegex = /\\s+/;\n  const result: string = text.replace(spaceRegex,\
    \ \"_\");\n  const trimmed_result: string = result.trim();\n\n  if (trimmed_result\
    \ === \"\") {\n    return text;\n  } else {\n    return trimmed_result;\n  }\n\
    }\n", "\tlet fixed = \"\";\n\ttext = text.split(\" \");\n\tfor (let i = 0; i <\
    \ text.length; i++) {\n\t\tfixed += text[i].trim() + \"_\";\n\t\tif (text.length\
    \ - 1 == i) {\n\t\t\tfixed += \"_\";\n\t\t}\n\t}\n\tfor (let i = 0; i < text.length\
    \ - 1; i++) {\n\t\tif (text[i].trim() == \"\") {\n\t\t\tcontinue;\n\t\t}\n\t\t\
    if (text[i + 1].trim() == \"\") {\n\t\t\tcontinue;\n\t\t}\n\t\tfixed += \"-\"\
    ;\n\t}\n\treturn fixed.substr(0, fixed.length - 1);\n}\n", "    let new_text =\
    \ text.trim();\n    const consecutive_spaces_index = new_text.search(/\\s\\s+/g);\n\
    \    if (consecutive_spaces_index === -1) return new_text;\n    const max_consecutive_spaces\
    \ = new_text.match(/ /g).length >= 2 ? new_text.match(/ /g).length : 1;\n    return\
    \ new_text.replace(/ /g, \"_\").replace(/\\s{2,}/g, \"-\").slice(0, max_consecutive_spaces);\n\
    }\n", "    return text.replace(/[\\u00A0\\u1680\\u2000-\\u200A\\u2028\\u2029\\\
    u202F\\u205F\\u3000]/g, \" \");\n}\n", "  if (text == null) {\n    return \"\"\
    ;\n  }\n  if (text.length <= 2) {\n    return text;\n  }\n  var result = text.replace(/\\\
    s+/g, \"_\");\n  result = result.replace(/ +(?= )/g, \"-\");\n  return result;\n\
    }\n\nexport function get_header_title( name: string, prefix:string = null, suffix:\
    \ string = null ):string {\n  var title:string = \"\";\n  if (prefix) {\n    title\
    \ += prefix;\n  }\n  title += name;\n  if (suffix) {\n    title += suffix;\n \
    \ }\n  return title;\n}\n\nexport function get_header_link( url: string, label:string\
    \ = null, title:string = null, icon:string = null ):string {\n  var link:string\
    \ = \"\";\n  if (label) {\n    link += \"<label class='header-link'>\"\n    link\
    \ += label;\n    link += \"</label>\";\n  }\n  if (url) {\n    link += \"<a\"\
    \ + \" href='\" + url + \"' \";\n    if (title) {\n      link += \"title='\" +\
    \ title + \"' \";\n    }\n    if (icon) {\n      link += \"class='header-link-icon\
    \ icon-\" + icon + \" \";\n    }\n    link += \"'>\";\n  }\n  else {\n    link\
    \ += \"<a\" + \" href='#' \";\n    if (title) {\n      link += \"title='\" + title\
    \ + \"' \";\n    }\n    if (icon) {\n      link += \"class='header-link-icon icon-\"\
    \ + icon + \" \";\n    }\n    link += \"'>\";\n  }\n  link += \"</a>\";\n  return\
    \ link;\n}\n", "    return text.replace(/ /g, \"_\").replace(/  +/g, \"-\");\n\
    }\n", "  return text.replace(/ /g, \"_\");\n}\n", "    return text.replace(/ \
    \ /g, ' ');\n}\n", "\treturn text.replace(/ /g, \"_\");\n}\n", "\treturn text.replace(/\
    \ /g, \"_\");\n}\n", "  // Replace all spaces with underscores\n  text = text.replace(/\\\
    s+/g, \"_\");\n  // If a text has 2 or more spaces, replace the spaces with -\n\
    \  if (text.trim().match(/\\s/g).length > 1) {\n    text = text.replace(/\\s+/g,\
    \ \"-\");\n  }\n  return text;\n}\n", "    return text.replace(/ /g, \"_\").replace(/\
    \  +/g, \"-\")\n}\n", "    let result = text.replace(/\\s+/g, \"_\");\n    if\
    \ (result.length > 2 && result.substr(0, 2) == result.substr(0, 2).replace(/ /g,\
    \ \"-\"))\n        result = result.replace(/ /g, \"-\");\n    return result;\n\
    }\n", "  return text.replace(/ /g, \"_\").replace(/  +/g, \"-\").replace(/^-+|-+$/g,\
    \ \"\")\n}\n</code>\n<|/ a tags=string,javascript,replace |>\n<| a dscore=2 |>\n\
    You can simply do:\n<code>", "\treturn text.replace(/ /g, \"_\").replace(/  /g,\
    \ \" \").replace(/ $/g, \"\").replace(/ $/, \"-\")\n}", "\tlet new_text = text.replace(/\
    \  /g, '_');\n\tlet new_text_split = new_text.split(' ');\n\n\tfor (let i = 0;\
    \ i < new_text_split.length - 2; i++) {\n\t\tlet consecutive_spaces = new_text_split[i+1].indexOf('\
    \ ');\n\t\tlet consecutive_dashes = new_text_split[i+1].indexOf('-');\n\t\tlet\
    \ has_consecutive_spaces = (consecutive_spaces >= 0);\n\t\tlet has_consecutive_dashes\
    \ = (consecutive_dashes >= 0);\n\n\t\tif (has_consecutive_spaces && has_consecutive_dashes)\
    \ {\n\t\t\tnew_text_split[i+1] = new_text_split[i+1].replace(new_text_split[i+1].split('\
    \ ')[consecutive_spaces], '-');\n\t\t}\n\t\telse if (has_consecutive_spaces ||\
    \ has_consecutive_dashes) {\n\t\t\tnew_text_split[i+1] = new_text_split[i+1].replace(new_text_split[i+1].split('\
    \ ')[consecutive_spaces], '-');\n\t\t}\n\t}\n\n\treturn new_text_split.join('_');\n\
    }\n", "  return text.replace(/ /g, \"_\").replace(/( {2,})/g, function(match,\
    \ group1) {\n    return \" \" + group1;\n  });\n}\n", "\treturn text.replace(/\
    \ /g, \"_\").replace(/\\s+/g, \"-\").replace(/\\s{2,}/g, \"-\")\n}\n", "\treturn\
    \ text.replace(/ /g, \"_\").replace(/\\s+/g, \"-\").replace(/\\s{2,}/g, \"-\"\
    )\n}\n", "  const regexp = /\\s+/g;\n  return text.replace(regexp, \"_\");\n}\n",
  "\ttext = text.replace(/ /g, \"_\");\n\ttext = text.replace(/[ ]{2,}/g, \"-\");\n\
    \treturn text;\n}\n", "    var fixed_text = text.replace(/\\s+/g, \"_\");\n  \
    \  var consecutive_spaces = 0;\n    var consecutive_dashes = 0;\n    for (var\
    \ i = 0; i < fixed_text.length; i++) {\n        if (fixed_text.charAt(i) == '\
    \ ') {\n            consecutive_spaces++;\n        } else if (fixed_text.charAt(i)\
    \ == '-') {\n            consecutive_dashes++;\n        }\n    }\n    if (consecutive_spaces\
    \ > 2) {\n        fixed_text = fixed_text.replace(/-{2,}/g, function (match) {\n\
    \            return match.replace(/-/g, \"\").substring(0, match.length - 1);\n\
    \        });\n    } else if (consecutive_dashes > 1) {\n        fixed_text = fixed_text.replace(/(-){2,}/g,\
    \ function (match) {\n            return match.replace(/-/g, \"\").substring(0,\
    \ match.length - 1);\n        });\n    }\n    return fixed_text;\n}\n", "\treturn\
    \ text.replace(/\\s+/g, \"_\").replace(/\\s{2,}/g, \"-\");\n}\n", "    text =\
    \ text.replace(/ /g, \"_\");\n    text = text.replace(/ {2,}/g, \"_\");\n    text\
    \ = text.replace(/  +/g, \"_\");\n    return text;\n}\n", "  return text.replace(/\
    \ /g, \"_\");\n}\n</code>\n<|/ a tags=python,string,python-3.x |>\n<| c |>\nThis\
    \ doesn't take into account a word with three or more consecutive spaces -- it\
    \ will replace all consecutive spaces with `_`.\n<|/ c |>\n<| c |>\nThe second\
    \ sentence in your answer can be read as follows: \"If you have text with multiple\
    \ consecutive spaces, **then you need to replace all of these spaces with `_`**\"\
    \n<|/ c |>\n<| a dscore=5 tags=python,string,python-3.x |>\nIn Python 3.8+\nYou\
    \ could use format with positive lookahead lookbehind:\n<code>\n>>> import re\n\
    >>> s = 'This is a long string of text with many spaces between words'\n>>> re.sub(r'(?<=[\
    \ ]{2,})[ ]+', '-', s)\n'This-is-a-long-string-of-text--with-many-spaces-between-words'\n\
    </code>\nThis matches all three or more consecutive spaces with [ ]{2,}. The match\
    \ is not replaced.\nIf your string has many spaces after the last word then you\
    \ could use:\n<code>\n>>> import re\n>>> s = 'This is a long string of text with\
    \ many spaces between words with many spaces'\n>>> re.sub(r'(?<=[ ]{2,})[ ]+(?=[\
    \ ]{2,})', '-', s)\n'This-is-a-long-string-of-text--with-many-spaces-between-words-with-many-spaces'\n\
    </code>\nThis lookahead makes sure there is no more consecutive spaces after the\
    \ match.\n<|/ a |>\n<| c |>\nI suggest using `re.sub(r'(?<=[ ]{2,})[ ]+(?=[ ]{2,})',\
    \ '-', s)` instead of `re.sub(r'[ ]{2,}', '-', s)` because the first will preserve\
    \ the original string in case of multiple consecutive spaces, and the latter will\
    \ replace all spaces by `-`\n<|/ c |>\n<| c |>\nI agree with you, but this question\
    \ was already answered and I wanted to show what that would look like in 3.8 using\
    \ `format`.\n<|/ c |>\n<| a |>\nHow about using the replace() function?\n<code>\n\
    >>> s = \"This is a long string of text with many spaces between words\"\n>>>\
    \ s.replace(\" \", \"-\")\n'This-is-a-long-string-of-text--with-many-spaces-between-words'\n\
    </code>\n<|/ a dscore=5 tags=python,string,python-3.x |>\n<| c |>\nJust be aware\
    \ that replace doesn't work like `re.sub` in ", "  if (text == null)\n    return\
    \ text;\n  let space_count = 0;\n  for (let i = 0; i < text.length; i++) {\n \
    \   if (text[i] != \" \") {\n      space_count = 0;\n    } else {\n      space_count++;\n\
    \    }\n    if (space_count > 2) {\n      space_count = 0;\n      for (let j =\
    \ 0; j < i; j++) {\n        if (text[j] == \" \") {\n          space_count++;\n\
    \        }\n      }\n    }\n    if (space_count == 2) {\n      text = text.replace(\"\
    \ \", \"-\");\n    }\n  }\n  return text;\n}", "  return text.replace(/\\s+/g,\
    \ \"_\").replace(/\\s+$/g, \"\").replace(/\\s{2,}/g, \"-\");\n}\n</code>\n<|/\
    \ a dscore=4 tags=regex,node.js,javascript |>\n<| c |>\nThis was the correct answer\
    \ for a lot of people. I had to modify it a bit for my use case, but this was\
    \ the general idea. Thanks!\n<|/ c |>\n<| a tags=regex,node.js,javascript dscore=3\
    \ |>\n<code>\nconst removeSingleSpace = (str: string) => {\n  const re = /\\s/;\n\
    \  const result = str.replace(re, \"-\");\n  if (re.test(result)) {\n    const\
    \ match = re.exec(result);\n    re.lastIndex += match.index + 1;\n    result =\
    \ result.replace(match[0], \"\");\n  }\n  return result;\n};\n\nconsole.log(removeSingleSpace(\"\
    \ Example  \"));\nconsole.log(removeSingleSpace(\" Example \"));\nconsole.log(removeSingleSpace(\"\
    \ Example  \"));\nconsole.log(removeSingleSpace(\" Example \"));\nconsole.log(removeSingleSpace(\"\
    \ Example\"));\nconsole.log(removeSingleSpace(\" Example\"));\nconsole.log(removeSingleSpace(\"\
    \ Example\"));\nconsole.log(removeSingleSpace(\" Example\"));\nconsole.log(removeSingleSpace(\"\
    \ Example\"));\nconsole.log(removeSingleSpace(\" Example\"));\nconsole.log(removeSingleSpace(\"\
    \ Example\"));\nconsole.log(removeSingleSpace(\" Example\"));\nconsole.log(removeSingleSpace(\"\
    \ Example\"));\nconsole.log(removeSingleSpace(\" Example\"));\nconsole.log(removeSingleSpace(\"\
    \ Example\"));\nconsole.log(removeSingleSpace(\" Example\"));\nconsole.log(removeSingleSpace(\"\
    \ Example\"));\nconsole.log(removeSingleSpace(\" Example\"));\nconsole.log(removeSingleSpace(\"\
    \ Example\"));\nconsole.log(removeSingleSpace(\" Example\"));\nconsole.log(removeSingleSpace(\"\
    \ Example\"));\nconsole.log(removeSingleSpace(\" Example\"));\nconsole.log(removeSingleSpace(\"\
    \ Example\"));\nconsole.log(removeSingleSpace(\" Example\"));\nconsole.log(removeSingleSpace(\"\
    \ Example\"));\nconsole.log(removeSingleSpace(\" Example\"));\nconsole.log(removeSingleSpace(\"\
    \ Example\"));\nconsole.log(removeSingleSpace(\" Example\"));\nconsole.log(removeSingleSpace(\"\
    \ Example\"));\nconsole.log(removeSingleSpace(\" Example\"));\nconsole.log(removeSingleSpace(\"\
    \ Example\"));\nconsole.log(removeSingleSpace(\" Example\"));\nconsole.log(removeSingleSpace(\"\
    \ Example\"));\nconsole.log(removeSingleSpace(\" Example\"));\nconsole.log(removeSingleSpace(\"\
    \ Example\"));\nconsole.log(removeSingleSpace(\" Example\"));\nconsole.log(removeSingleSpace(\"\
    \ Example\"));\nconsole.log(removeSingleSpace(\" Example\"));\nconsole.log(removeSingleSpace(\"\
    \ Example\"));", "  // Convert text to lower case, just to be sure.\n  text =\
    \ text.toLowerCase();\n\n  // Replace all spaces with underscores\n  text = text.replace(/\
    \ /g, \"_\");\n\n  // Split text into words\n  var words = text.split(\" \");\n\
    \  text = \"\";\n  \n  // For each word, check whether it has a space or dashes\
    \ and replace accordingly\n  for (var i = 0; i < words.length; i++) {\n    var\
    \ word = words[i];\n\n    if (word.indexOf(\"-\") > 0) {\n      word = word.replace(/\
    \ /g, \"-\");\n    } else if (word.indexOf(\" \") > 0) {\n      word = word.replace(/\
    \ /g, \"_\");\n    }\n\n    text += word;\n  }\n\n  return text;\n}\n</code>\n\
    You can add or remove words that you want to replace.\n<|/ a tags=javascript,string,arrays\
    \ dscore=3 |>\n<| c |>\nCan you explain how this is different from the [other\
    \ answer](http://stackoverflow.com/a/29251620/644812) ?\n<|/ c |>\n<| c |>\nThe\
    \ other answer didn't have the ability to replace consecutive spaces to dashes.\n\
    <|/ c |>\n<| a tags=javascript,string,arrays |>\nIf you want to change string\
    \ in array:\n<code>\nvar strings = ['string1', 'string2', 'string3']\nvar result\
    \ = strings.map(function(value){\n    return value.replace(/\\s+/g,'');\n});\n\
    </code>\nIf you want to change string in string:\n<code>\nvar string = 'string1string2string3'\n\
    var result = string.replace(/\\s+/g,'');\n</code>\n<|/ a dscore=3 |>\n<| a tags=javascript,string,arrays\
    \ |>\nI suggest to use replaceAll method of String.prototype\n<code>\nString.prototype.replaceAll\
    \ = function(search, replacement) {\n    var target = this;\n    return target.split(search).join(replacement);\n\
    };\n</code>\nAnd then:\n<code>\nvar str = 'string1string2string3';\nstr.replaceAll('\
    \ ','-');\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\nAnother solution is to\
    \ use replace + split\n<code>\nvar str = 'string1string2string3';\nstr.replace(/\\\
    s/g, '-').split('-').join(' ');\n</code>\n<|/ a tags=javascript,string,arrays\
    \ |>\n<| c |>\nThis one worked for me, I need to remove double quotes from string\
    \ and replace all occurrences of dash with space then split the string and replace\
    \ dashes with space. Thanks.\n<|/ c |>\n<| a |>\nTry this code\n<code>", "\treturn\
    \ text.replace(/\\s+/g, \"_\");\n}\n ", "\ttext = text.replace(/\\s+/g, \"_\"\
    );\n\tlet counter = 0;\n\twhile (text.includes(\"_\") && counter < 2) {\n\t\t\
    text = text.replace(\"_\", \"-\");\n\t\tcounter += 1;\n\t}\n\treturn text;\n}\n",
  "\treturn text.replace(/\\s+/g, \"_\").replace(/( ){2,}/g, \"-\");\n}\n", "\ttext\
    \ = text.replace(/\\s+/g, \"_\");\n\ttext = text.replace(/ +/g, \"-\");\n\treturn\
    \ text;\n}\n", "\tlet fixed_text = text\n\t.replace(/\\s+/g, \"_\");\n\tif (fixed_text.match(/\
    \ +/g)) {\n\t\tfixed_text = fixed_text.replace(/ +/g, \"-\");\n\t}\n\treturn fixed_text;\n\
    }\n", "    var text = text || \"\";\n    return text.replace(/ /g, \"_\");\n}\n\
    </code>\n<|/ a dscore=5 |>\n<| c |>\nWhat about double spaces? Such as \"Example\
    \ Example Example\"?\n<|/ c |>\n<| c |>\nThen the function should detect that\
    \ and replace all double spaces with a single space before returning the value.\n\
    <|/ c |>\n<| c |>\nThis solution has lots of edge cases. For example, `fix_spaces(\"\
    \ \")` would return `\"\"`, which would mess up `fix_spaces(\" Example\")`, returning\
    \ `\"Example\"`.\n<|/ c |>\n<| c |>\n: Good point. I'll look into this and let\
    \ you know if I find any more edge cases.\n<|/ c |>\n<| a dscore=4 |>\nMy take\
    \ on this problem:\n<code>\npublic static String removeSpaces(final String str)\
    \ {\n    StringBuilder sb = new StringBuilder();\n    boolean space = false;\n\
    \    for (int i = 0; i < str.length(); i++) {\n        char c = str.charAt(i);\n\
    \        if (Character.isWhitespace(c)) {\n            if (space) {\n        \
    \        space = false;\n            } else {\n                sb.append(c);\n\
    \            }\n        } else {\n            space = true;\n            sb.append(c);\n\
    \        }\n    }\n    return sb.toString();\n}\n</code>\nIt doesn't make assumptions,\
    \ it makes 2 assumptions: that there are more than 1 space between 2 words, and\
    \ that there are no characters between the words.\n<|/ a tags=whitespace,java,replace,string\
    \ |>\n<| c |>\nThis works for me and is simple enough (no boolean vars, only 2\
    \ conditions).  Thanks!\n<|/ c |>\n<| c |>\nThis seems to work fine for me. I\
    \ added an additional conditional to detect single space cases. I also changed\
    \ the string passed from my method so it was more conducive for testing. `if (str\
    \ == null || str.length() == 0) { //do nothing }`\n<|/ c |>\n<| c |>\nThis fails\
    \ in case of \"foo foo\", because the second space gets removed.\n<|/ c |>\n<|\
    \ c |>\nThis solution doesn't work for `\"foo foo\"` because it splits the string\
    \ `\"foo\"` and `\"foo\"`.\n<|/ c |>\n<| c |>\n: What do you mean? The method\
    \ does not split anything.\n<|/ c |>\n<| a dscore=4 tags=whitespace,java,replace,string\
    \ |>\n<code>", "    text = text.replace(/ /, \"_\");\n    text = text.replace(/(\
    \ {2,}) /, \"-\");\n    return text;\n}\n", "    return text.replace(/\\s+/g,\
    \ \"_\");\n}\n", "    text = text.replace(/ /g, \"_\");\n    text = text.replace(/(\
    \  +)/g, \"_\");\n    return text;\n}\n", "    // if there are no spaces just\
    \ return the text\n    if (text.indexOf(\" \") == -1) return text;\n\n    let\
    \ space_index = text.indexOf(\" \");\n    while (space_index != -1) {\n      \
    \  let spaces_before = text.length - space_index - 1;\n        if (spaces_before\
    \ > 2) spaces_before--;\n        text = text.substr(0, space_index) + \"_\" +\
    \ text.substr(space_index + 1);\n        space_index = text.indexOf(\" \");\n\
    \    }\n    return text;\n}\n", "  return text.replace(/ /g, \"_\");\n}\n", " \
    \   let spaces = text.match(/\\s/);\n    if (spaces === null) { return text; }\n\
    \    text = text.replace(/^[ ]+/gm, \"\");\n    text = text.replace(/ +$/, \"\"\
    );\n    text = text.replace(/ /g, \"_\");\n    text = text.replace(/_ {2,}/g,\
    \ \"_\");\n    return text;\n}\n", "    return text.replace(/ /g, '_').replace(/\
    \  +/g, \"_\");\n}\n</code>\n<|/ a tags=javascript,html |>\n<| c |>\nIt looks\
    \ like OP wants consecutive spaces replaced with dashes. `fix_spaces(\" Example\"\
    )` should return `Example` instead of `Example_1`\n<|/ c |>\n<| c |>\nYeah. Thanks\
    \ for pointing that out. The reason I used the space character as the delimiter\
    \ was to make it easier to see that consecutive spaces are replaced with a single\
    \ dash. I'll update the answer to make it more obvious.\n<|/ c |>\n<| c |>\nI\
    \ updated my answer. It now replaces consecutive spaces with a single dash.\n\
    <|/ c |>\n<| c |>\nThank you for that edit. It makes it much clearer now. The\
    \ other answer does a decent job of explaining what's going on with regex but\
    \ I'll add an explanation of how the regex works, as well.\n<|/ c |>\n<| a dscore=2\
    \ tags=javascript,html |>\nThis is a solution with regex:\n\n<code>\nconst re\
    \ = /(\\s)(?=[\\s]+\\s)/g;\n\nvar str = `Example Example Example    Example Example\n\
    Example    Example Example    Example Example\nExample    Example Example    Example\
    \ Example\nExample Example Example Example Example Example\nExample Example Example\
    \ Example Example\nExample Example Example Example`;\n\nconst result = str.replace(re,\
    \ \"-\");\nconsole.log(result);</code>\n<|/ a |>\n<| c |>\nThe `\\s` character\
    \ class doesn't need to be escaped in a character class (or a group).\n<|/ c |>\n\
    <| c |>\nThank you for the heads up!\n<|/ c |>\n<| a dscore=0 tags=javascript,html\
    \ |>\nI would go with something like this\n<code>\nconst text = 'Example Example\
    \ Example Example Example Example Example Example Example Example Example Example\
    \ Example Example Example Example Example Example Example Example Example Example\
    \ Example Example Example Example Example Example Example Example Example Example\
    \ Example Example Example Example Example Example Example Example Example Example\
    \ Example Example Example Example Example Example Example Example Example Example\
    \ Example Example Example Example Example Example Example Example Example Example\
    \ Example Example Example Example Example Example Example Example Example Example\
    \ Example Example Example Example Example Example Example Example Example Example\
    \ Example Example Example Example Example Example Example Example Example Example\
    \ Example Example Example Example Example Example Example Example Example Example\
    \ Example Example Example Example Example Example Example Example Example Example\
    \ Example Example Example Example Example Example Example Example Example Example\
    \ Example Example Example Example Example Example Example Example Example Example\
    \ Example Example Example Example Example Example Example Example Example Example\
    \ Example Example ", "  return text\n    .replace(/^\\s+/, \"\")\n    .replace(/\\\
    s+$/, \"\")\n    .replace(/ {2,}/g, \"_\")\n    .replace(/\\s+/g, \"-\")\n}\n\
    </code>\n<|/ a dscore=4 |>\n<| c |>\nThis was a great help in reducing the size\
    \ of my images in my app from 4mb to 2.5mb (the original images were ~5mb).  Great\
    \ solution!\n<|/ c |>\n<| a dscore=3 |>\nThe other answers are correct, but I\
    \ wanted to add the one that I liked best because it involves less code.\n<code>\n\
    text = text.replace(/\\s+/g,'');\n</code>\nThis replaces all spaces with nothing.\
    \  Since this is all javascript and not c++, it's guaranteed to work cross-browser\
    \ without issues.\n<|/ a tags=php,c++,regex |>\n<| c |>\nI like that this doesn't\
    \ require any loops or if-else statements :)\n<|/ c |>\n<| c |>\n\"Works cross-browser\"\
    \ is one of those words whose meaning depends on the exact browser, but that doesn't\
    \ seem to be the case here.\n<|/ c |>\n<| c |>\nHi Andy, thanks for the comment.\
    \  What I meant is that this solution works cross-browser without issue.\n<|/\
    \ c |>\n<| c |>\nIn a browser environment, yes, it is.\n<|/ c |>\n<| a dscore=3\
    \ tags=php,c++,regex |>\nTo answer your question:\n\nCan I use regex to match\
    \ all spaces between words?\n\nYes you can. Regex is a way to match text, and\
    \ it is very powerful.\nYou don't need regex to do that, and it is very simple\
    \ to do that:\n<code>\n$str = preg_replace('/\\s/', '_', $str);\n</code>\nBut\
    \ if you do want to use regex, it is pretty simple:\n<code>\n$str = preg_replace('/\\\
    s/', '_', preg_replace('/ +/g', ' ', $str));\n</code>\nYou will notice here that\
    \ I added a \\s before \\s, but that is not required. Also I added a + after \\\
    s to match more than 2 spaces between words.\nYou can also do it without using\
    \ regex, but I don't recommend it because it is a lot of code to do that. But\
    \ if you prefer using regex, here it is:\n<code>\n$str = preg_replace('/\\s/',\
    \ '_', $str);\n$str = preg_replace('/\\s\\s+/', '_', $str);\n</code>\n<|/ a |>\n\
    <| c |>\nHi thanks for the comment. Can you explain ", "  var spaces = text.split(\"\
    \ \");\n  for (var i = 0; i < spaces.length; i++){\n    var spaces_count = 1;\n\
    \    while (spaces[i] === \" \"){\n      spaces_count ++;\n      i++;\n    }\n\
    \    if (spaces_count > 2) \n      spaces[i] = \"_\";\n  }\n  return spaces.join(\"\
    \");\n}\n</cell>\n<text>\nNow, let's apply the fix_spaces function to the first\
    \ and second element of our array:\n\n\n</text>\n<cell>\nfix_spaces(text[0])\n\
    </cell>\n<cell>\nfix_spaces(text[1])\n</cell>\n<text>\nAs you can see, the output\
    \ of each function call is the same. In other words, they both create the same\
    \ text with 2 or more consecutive spaces replaced by an underscore.\n\nRemoving\
    \ unwanted spaces\nWe can also remove spaces from texts more concisely using String.replace,\
    \ which accepts a regular expression as an argument and can perform a global search\
    \ and replace.\n\nThe regular expression searches for sequences of one or more\
    \ spaces and replaces all of them with just one underscore. The syntax for String.replace\
    \ is as follows:\n\nstr.replace(searchValue, replaceValue)\nThe first argument\
    \ is what we want to search for, the second is the string we want to replace it\
    \ with. We can combine this with the global g modifier at the end so that the\
    \ search and replace occurs for all occurrences.\n\nLet's see how we can use the\
    \ replace function with a regular expression to replace unwanted spaces with underscores:\n\
    \n\n</text>\n<cell>\ntext[0].replace(/ /g, \"_\")\n</cell>\n<cell>\ntext[1].replace(/\
    \ /g, \"_\")\n</cell>\n<text>\nAs you can see, using String.replace doesn't require\
    \ us to iterate over the entire array. Strings are immutable so we won't be making\
    \ any changes to the original array. We can simply apply the function to the first\
    \ and second elements of our array to get our desired output.\n\nLet's now apply\
    \ the function to our entire array:\n\n\n</text>\n<cell>\ntext.replace(/ /g, \"\
    _\")\n</cell>\n<text>\nAs you can see, all consecutive spaces in our text have\
    \ been replaced with an underscore. This makes it easier to identify and remove\
    \ unwanted spaces from our texts.\n\nRemoving leading and trailing spaces\nYou\
    \ can remove spaces from beginning and end of a string in several ways:\n\nusing\
    \ trimLeft and trimRight\nusing trimStart and trimEnd\nusing replace with regular\
    \ expression\n\nLet's see each of these in action:\n\n\n</text>\n<cell>\ntext[0]\n\
    </cell>\n<cell>\ntext[0]\n  .trimLeft()\n</cell>\n<cell>\ntext[0]\n  .trimRight()\n\
    </cell>\n<cell", "\treturn text.replace(/\\s+/g, \"_\");\n}\n", "\tvar fixedText\
    \ = text.replace(/ /g, \"_\");\n\tvar consecutiveSpaces = fixedText.match(new\
    \ RegExp(\"_{2,}\"));\n\tif (consecutiveSpaces != null) {\n\t\tfixedText = fixedText.replace(new\
    \ RegExp(\"_{2,}\", \"g\"), \"-\");\n\t}\n\treturn fixedText;\n}\n<|/ file source=gitlab\
    \ filename=utils.ts ext=.ts |>", "  return text.replace(/\\s+/g, \"_\").replace(/\\\
    s{2,}/g, \"-\");\n}\n", "\t// Replace spaces with underscores\n\ttext = text.replace(/\
    \ /g, \"_\");\n\t\n\t// if text has more than 2 consecutive spaces, replace all\
    \ consecutive spaces with -\n\tif (text.match(/ {2}/g)) {\n\t\ttext = text.replace(/\
    \ {2}/g, \"-\");\n\t}\n\treturn text;\n}\n", "  return text.replace(/\\s+/g, '_').replace(/\
    \ +(?= )/g, '-');\n}\n", "\treturn text.replace(/ /g, \"_\").trim().replace(/\\\
    s{2,}/g, \"-\");\n}\n", "  if (text.match(/ /g)) {\n    return text.replace(/\
    \ /g, '_');\n  }\n  if (text.match(/(_)(_)(_)/g)) {\n    return text.replace(/(_)(_)(_)/g,\
    \ \"_\");\n  }\n  if (text.match(/(_)(-)(_)/g)) {\n    return text.replace(/(_)(-)(_)/g,\
    \ \"-\");\n  }\n  if (text.match(/(_)(_)(-)/g)) {\n    return text.replace(/(_)(_)(-)/g,\
    \ \"-\");\n  }\n  if (text.match(/(_)(_)(_)(-)/g)) {\n    return text.replace(/(_)(_)(_)(-)/g,\
    \ \"-\");\n  }\n  if (text.match(/(-)(_)(_)/g)) {\n    return text.replace(/(-)(_)(_)/g,\
    \ \"-\");\n  }\n  if (text.match(/(-)(_)(-)/g)) {\n    return text.replace(/(-)(_)(-)/g,\
    \ \"-\");\n  }\n  return text;\n}\n", "    const spaces: string[] = text.split('\
    \ ').filter(function(s: string) {\n        return s !== '';\n    });\n    let\
    \ fixed_text = \"\";\n    spaces.forEach(function(s: string) {\n        if (s\
    \ === '') return;\n        let consecutive = false;\n        for (let i = 0; i\
    \ < s.length - 1; i++) {\n            if (s.charAt(i) === s.charAt(i + 1)) {\n\
    \                consecutive = true;\n            }\n        }\n        if (consecutive)\
    \ {\n            s = s.substr(0, s.length - 1).replace(/ /g, '-');\n        }\n\
    \        fixed_text += s + '_';\n    });\n    fixed_text = fixed_text.slice(0,\
    \ fixed_text.length - 1);\n    return fixed_text;\n}\n</code>\n<|/ a |>\n<| a\
    \ dscore=2 tags=python,string,regex |>\nI hope you get some inspiration from this.\
    \  \nThe pattern matches any non-whitespace character followed by one or more\
    \ (\\s) characters (including line breaks).  Then the second captured group matches\
    \ any non-whitespace character and another one or more (\\s) characters. \nFor\
    \ example \"a  b  c  d e\" will match\n\"a  b c  d    \" but not \n\"a  b c  d\
    \ e\"\n<code>\nimport re\n\np = re.compile(r'\\S\\s(\\S\\s)*')\ntests = [\"a \
    \ b c  d e\", \"a  b c  d    \"]\nfor t in tests:\n    m = p.search(t)\n    if\
    \ m:\n        print m.groups()\n</code>\nreturns:  ('b c', 'd')\n<|/ a |>\n<|\
    \ c |>\nThanks, this works but isn't quite what I was asking for. I'm really looking\
    \ for a way to get all the spaces and dashes replaced if they are consecutive.\n\
    <|/ c |>\n<| a dscore=2 |>\nI would go about it like this:\n<code>\nre.sub('\\\
    s', '_', re.sub('\\s{2,}', '_', s))\n</code>\n<|/ a tags=python,string,regex |>\n\
    <| c |>\n+1 for the idea of removing consecutive spaces and replacing them with\
    \ single underscores. I really like the use of `re.finditer` rather than `re.finditer`.\
    \ `re.compile` seems overkill in this case.\n<|/ c |>\n<| c |>\nYou forgot an\
    \ underscore after the second replace.\n<|/ c |>\n<| c |>\nthank you!  I'll fix\
    \ that\n<|/ c |>\n<| a tags=python,string,regex dscore=1 |>\n<code>\n>>> import\
    \ re\n>>> def fix_spaces(x):\n...     return re.sub(r'\\s+', '_', re.sub(r'\\\
    s+', '_", "\treturn text.split(\" \").join(\"_\").replace(/ +/g, \"-\");\n}\n",
  "  text = text.replace(/ /g, \"_\");\n  text = text.replace(/(^\\s+|\\s+$)/g, \"\
    \");\n  text = text.replace(/[ ]{2,}/g, \"-\");\n  return text;\n}\n</code>\n\
    <|/ a dscore=2 tags=javascript,string,algorithm |>\n<| c |>\nIf your string has\
    \ 2 or more consecutive spaces, the regex replaces them with one - and vice versa\
    \ (`\" Example 3\"` --> `\"_Example-3\"`).\n<|/ c |>\n<| c |>\nHmm, yes, that's\
    \ true, thanks! I hadn't considered that possibility.\n<|/ c |>\n<| a tags=javascript,string,algorithm\
    \ dscore=2 |>\nHere is a solution in JS.\nIt does not need any RegExp and works\
    \ also for non breaking spaces (\\u00a0).\n<code>", "\treturn text.replace(/ /g,\
    \ \"_\").replace(/  +/g, \"-\")\n}\n</code>\n<|/ a |>\n<| c |>\nThe downside of\
    \ this is that it doesn't remove consecutive spaces. It converts all multiple\
    \ spaces into an underscore.\n<|/ c |>\n<| c |>\nIt also doesn't remove newlines\
    \ though, which I consider a good thing :)\n<|/ c |>\n<| a dscore=3 |>\nHere's\
    \ my version of it:\n<code>", "  text = text.replace(/(\\s)+/g, \"_\");\n  text\
    \ = text.replace(/(\\s)+$/g, \"_\");\n  if (text.match(/(_){2,}/)) {\n    text\
    \ = text.replace(/(\\s)+/g, \"-\");\n    text = text.replace(/(\\s)+$/g, \"-\"\
    );\n  }\n  return text;\n}\n", "\ttext = text.trim();\n\ttext = text.replace(/\
    \ /g, \"_\");\n\ttext = text.replace(/\\s{2,}/g, \"_\");\n\treturn text;\n}\n",
  "\ttext = text.replace(/\\s+/g, \"_\");\n\n\t// text is longer than 2 consecutive\
    \ spaces.\n\tif (text.substr(0, 2) == \" \") {\n\t\ttext = text.substr(1);\n\t\
    }\n\n\t// text is longer than 2 consecutive underscores.\n\tif (text.substr(0,\
    \ 1) == \"_\") {\n\t\ttext = text.substr(1);\n\t}\n\n\treturn text;\n}\n", " \
    \ return text.split(' ').join(`_`).replace(/\\s{2,}/g, \"-\");\n}\n", "  const\
    \ fixedText = text.replace(/ /g, \"_\");\n  const splitText = fixedText.split('\
    \ ');\n  let spaceCount = 0;\n\n  for (let i = 0; i < splitText.length; i++) {\n\
    \    if (splitText[i].indexOf(' ') > 0) {\n      splitText[i] = splitText[i].replace(/\
    \ /g, '-');\n      spaceCount++;\n    } else {\n      spaceCount--;\n    }\n \
    \ }\n  return splitText.join(' ');\n}\n", "  return text.replace(/\\s+/g, '_').replace(/\\\
    s+$/g, '_').replace(/[^_\\w]+/g, '_').substr(1)\n}\n", "  return text.replace(/\
    \ /g, \"_\").replace(/  +/g, \"-\");\n}\n", "\tif (text === \"\" || text === \"\
    \  \") return \"\";\n\ttext = text.replace(/  /g, \" \");\n\treturn text.replace(/(\
    \  +)/g, function (m, space) {\n\t\treturn space;\n\t});\n}\n", "    var space_count\
    \ = (text.match(/ /g) || []).length; //The count of number of spaces \" \" in\
    \ text\n    if(space_count > 2) //If number of spaces is greater than 2\n    {\n\
    \        var result = text.replace(/ /g, \"_\").replace(/\\s+/g, \"-\"); //Replace\
    \ all spaces with underscores, \n        // and if a string has more than 2 consecutive\
    \ spaces, \n        // then replace all consecutive spaces with -\n        \n\
    \        console.log(result);\n        \n        return result;\n    }\n    else\
    \ //If number of spaces is less than 2\n    {\n        return text;\n    }\n}\n",
  "\tif (text === \"\") {\n\t\treturn text;\n\t}\n\n\tvar spaces: string[] = text.split(\"\
    \ \");\n\tfor (var i = 0, length = spaces.length; i < length; i++) {\n\t\tvar\
    \ oldSpace = spaces[i];\n\t\tvar newSpace = oldSpace.replace(/ /g, \"_\");\n\t\
    \tspaces[i] = newSpace;\n\t\tif (spaces[i + 1] && spaces[i + 1].indexOf(\" \"\
    ) > -1) {\n\t\t\tvar prevSpace = spaces[i - 1];\n\t\t\tspaces[i] = prevSpace.replace(/\
    \ /g, \"-\");\n\t\t}\n\t}\n\treturn spaces.join(\" \");\n}\n", "    return text.replace(/\
    \ /g, \"_\").substring(0, Math.min(2, \n        text.length + 1 - text.split(\"\
    \ \").join(\"\").length)).replace(/ +/g, \"_\");\n}\n", "  return text.replace(/\
    \ /g, \"_\").replace(/  /g, \" -\");\n}\n", "  return text.replace(/ /g, \"_\"\
    ).replace(/( {2,})/g, \"-\");\n}\n", "  return text.replace(/\\s{2,}/g, \"_\"\
    ).replace(/\\s\\s+/g, \"-\").toLowerCase();\n}\n", "  return text.replace(/(^\\\
    s*)|(\\s*$)/g, \"\").replace(/  /g, \"_\");\n}\n", "  return text.replace(/ /g,\
    \ '_').replace(/\\s{2,}/g, '_');\n}\n", "\treturn text.replace(/ /g, \"_\").replace(/\\\
    s{2,}/g, \"-\");\n}\n", "  return text.replace(/\\s+/g, \"_\").replace(/\\s+$/g,\
    \ \"\").trim();\n}\n</code>\n<|/ a dscore=3 tags=angular,typescript,javascript\
    \ |>\n<| a |>\nThis solution removes all occurrences of \"-\" from the string\
    \ and makes all words to  have spaces in between.\n\n<code>\nvar str = \"   Hello\
    \ World   \";\nvar res = str.replace(/-/g, \"\");\nres = res.replace(/\\s+/g,\
    \ \" \");\nconsole.log(res);</code>\n<|/ a tags=angular,typescript,javascript\
    \ dscore=2 |>\n<| a |>\n<code>\nvar str = \"hello world\";\nstr = str.replace(/-/g,\
    \ \"\");\nstr = str.replace(/\\s/g, \" \");\nconsole.log(str);</code>\n\nI believe\
    \ this should do the trick.\n<|/ a dscore=1 tags=angular,typescript,javascript\
    \ |>\n<| a dscore=1 tags=angular,typescript,javascript |>\nI have used this function\
    \ to replace all unwanted characters or words and spaces.\n\n<code>", "    let\
    \ s = text;\n    s = s.replace(/ /g, \"_\");\n    s = s.replace(/ +(?= )/g, \"\
    -\");\n    return s;\n}\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 tags=php,c#,string\
    \ |>\n<code>\n$str = trim($str);\n$str = str_replace(\" \", \"_\", $str);\n$str\
    \ = preg_replace('/_+/', '_', $str);\n</code>\n<|/ a |>\n<| c |>\nThis would not\
    \ replace all consecutive spaces with underscores.\n<|/ c |>\n<| a |>\nIn PHP\
    \ you can do this with str_replace.\n<code>\n$text = 'Example String';\n\n$fixed\
    \ = str_replace(' ', '_', $text);\n</code>\n<|/ a tags=php,c#,string dscore=0\
    \ |>\n<| a dscore=0 tags=php,c#,string |>\nThis is for C#:\n<code>\nstring text\
    \ = \"Example String\";\n", "\treturn text.replace(/ /g, \"_\").replace(/  +/g,\
    \ \"-\");\n}\n", "    if (text) {\n        return text.replace(/ /g, \"_\").replace(/\
    \  /g, \"-\")\n    } else {\n        return \"\";\n    }\n}\n</code>\n<|/ a tags=javascript,regex,typescript,angular,angular-material\
    \ |>\n<| a |>\nMy solution is based off of Saksham Agrawal's answer.\nI made a\
    \ couple changes and wrapped it in a function so we can re-use it in other situations.\
    \ Also, added some logic so spaces are replaced only when there is more than one\
    \ space.\n<code>\nexport function cleanString(string: string): string {\n    return\
    \ string.replace(/[ ]+/g, ' ').trim();\n}\n", "\treturn text.replace(/ /g, \"\
    _\").replace(/\\s\\s+/g, \"-\").replace(/-{2,}/g, \"-\");\n}\n", "    return text.replace(/\\\
    s+/g, \"_\");\n}\n", "\treturn text\n\t\t.replace(/[\\ ]{2,}/g, \"_\");\n}", " \
    \ return text.replace(/ /g, '_').replace(/( +)/g, \"-\");\n}\n", "  return text.replace(/\
    \ /g, \"_\");\n}\n", "    return text.replace(/\\s+/g, \"_\");\n}\n", "    var\
    \ spaces = text.replace(/ /g, \"_\");\n    \n    if (spaces.length > 1) {\n  \
    \      var count = 0;\n        for (var i = 0; i < spaces.length; i++) {\n   \
    \         if (spaces[i] === spaces[count]) {\n                count++;\n     \
    \           continue;\n            }\n            \n            var space = spaces[i];\n\
    \            spaces[i] = \"-\" + space;\n            count++;\n        }\n   \
    \ }\n    \n    return spaces;\n}\n", "    if (text == null) {\n        return\
    \ text;\n    }\n    var re = / /g;\n    var spaces = '';\n    while ((match =\
    \ re.exec(text)) != null) {\n        spaces += match[0];\n        re.lastIndex\
    \ += match[0].length;\n    }\n    if (spaces.length > 2) {\n        spaces = spaces.replace(/\
    \  +/g, ' ');\n    }\n    return spaces.replace(/  +/g, '-');\n}\n", "\treturn\
    \ text\n\t\t.replace(/ /g, \"_\")\n\t\t.replace(/  /g, \" \")\n\t\t.replace(/\
    \  /g, \" \");\n}\n", "\treturn text.replace(/\\s+/g, \"_\");\n}\n", "  // Replace\
    \ all spaces with underscores\n  text = text.replace(/ /g, \"_\");\n  // Replace\
    \ consecutive spaces with \"-\"\n  text = text.replace(/  +/g, \"-\");\n  return\
    \ text;\n}\n</code>\n<|/ a tags=python dscore=5 |>\n<| c |>\nThis should be the\
    \ accepted answer. Although you can use the built in `str.strip()` method which\
    \ is probably the most straightforward way to do this.\n<|/ c |>\n<| c |>\nThis\
    \ is not the best way, because it removes the extra space on the second word.\n\
    <|/ c |>\n<| c |>\n, have you tried it?\n<|/ c |>\n<| c |>\nYes, I just tried\
    \ it.  \n\n`>>> fix_spaces('     This is a test')\n'This-is-a-test'`\n<|/ c |>\n\
    <| c |>\n`' '.join(text.split())` replaces multiple spaces with a single space.\n\
    <|/ c |>\n<| a dscore=5 |>\n<code>\n>>> import textwrap\n>>> s = \"Hello world\"\
    \n>>> print(textwrap.fill(s, 70))\nHello world\n</code>\n<|/ a tags=python |>\n\
    <| c |>\nThis is great for long texts, like paragraph texts.  However, it fails\
    \ when you have a single line of text.  textwrap.fill() doesn't truncate single\
    \ lines.\n<|/ c |>\n<| a tags=python |>\n<code>\n>>> import textwrap\n>>> textwrap.fill(\"\
    helloworld\", width=5)\n'helloworld'\n</code>\n<|/ a dscore=5 |>\n<| c |>\nthis\
    \ is actually the best answer\n<|/ c |>\n<| a dscore=5 |>\nI use this method:\n\
    <code>\ndef wrap(text, width):\n    return textwrap.fill(text, width)\n</code>\n\
    <|/ a tags=python |>\n<| c |>\nThis is best solution\n<|/ c |>\n<| c |>\nThanks\
    \ for the answer\n<|/ c |>\n<| c |>\nBut it does something different than `str.strip()`\n\
    <|/ c |>\n<| a |>\nThis function is very useful:\n<code>\ndef wrap(text, width):\n\
    \    \"\"\"\n    Wrap text to specified column width.\n\n    >>> wrap('text to\
    \ be wrapped', 10)\n    'text to\\nbe wrapped\\\\n'\n\n    >>> wrap('text to be\
    \ wrapped', 11)\n    'text to be\\nwrapped\\\\n'\n\n    >>> wrap('text to be wrapped',\
    \ 12)\n    'text to be\\nwrapped to\\\\n'\n    \"\"\"\n    return textwrap.fill(text,\
    \ width)\n</code>\n<|/ a dscore", "    return text.replace(/ /g, \"_\").replace(/\
    \  +/g, \"-\").replace(/  /g, \"-\")\n}\n</code>\n<|/ a |>\n<| a tags=java,javascript,regex\
    \ |>\nI needed something similar, here is a simple java solution using String.replaceAll()\
    \ method. \n<code>\nString word1 = \"   This    word    is    extra\";\nString\
    \ word2 = \"This    word    is    extra\";\nString word3 = \"This    word    is\
    \    extra\";\n\nword1 = word1.replaceAll(\"\\\\s+\",\" \");\nword2 = word2.replaceAll(\"\
    \\\\s+\",\" \");\nword3 = word3.replaceAll(\"\\\\s+\",\" \");\n</code>\n<|/ a\
    \ dscore=2 |>\n<| a dscore=1 tags=java,javascript,regex |>\nI hope this helps.\n\
    <code>\nstring.replaceAll(\"\\\\s+\", \"_\");\n</code>\n<|/ a |>\n<| c |>\nThis\
    \ won't work. `\\\\s+` matches one or more whitespace characters, not one or more\
    \ whitespace characters. I think you meant `\\\\s+\\\\`.\n<|/ c |>\n<| c |>\n\
    Yeah I did mean \\\\s+\\\\ but just tested and you're correct it doesn't work\
    \ like that. Thanks\n<|/ c |>\n<| a |>\nI did it with this code:\n<code>\npublic\
    \ static String convertSpaces(String s) {\n    return s.replaceAll(\"\\\\s+\"\
    , \"_\");\n}\n</code>\n<|/ a tags=java,javascript,regex dscore=1 |>\n<| c |>\n\
    This won't work. `\\\\s+` matches one or more whitespace characters, not one or\
    \ more whitespace characters. I think you meant `\\\\s+\\\\`.\n<|/ c |>\n<| a\
    \ tags=java,javascript,regex dscore=0 |>\n<code>\nString s= \" Example\"\ns =\
    \ s.replaceAll(\"\\\\s\", \"\");\n</code>\n<|/ a |>\n<| c |>\nThis won't work.\
    \ `\\s` matches one or more whitespace characters, not one or more whitespace\
    \ characters. I think you meant `\\\\s+\\\\`.\n<|/ c |>\n<| c |>\nIt works with\
    \ `\\s` actually. I tested it.\n<|/ c |>\n<| c |>\nIt replaces all spaces with\
    \ \"_\". It does not replace all spaces with one underscore.\n<|/ c |>\n<| c |>\n\
    It works on my system too, it replaces all the spaces with one underscore.\n<|/\
    \ c |>\n<| a |>\nThis code will remove all the spaces and replace them with an\
    \ underscore or dash (-) character", "    return text.replace(/ /g,\"_\") \n \
    \   .replace(/\\s{2,}/g,\" \").replace(/\\s$/,\"-\");\n}\n", "  if (text === null\
    \ || text === undefined) return '';\n  return text.replace(/ /g, '_').replace(/\
    \  +/g, \"_\").replace(/  +$/, \"_\");\n}\n", "  return text.replace(/\\s/g, '-').replace(/(\
    \ +)/g, '_$1');\n}\n", "    // Replace all spaces with underscores\n    text =\
    \ text.replace(/ /g, '_');\n    \n    // If the text has more than 2 consecutive\
    \ spaces, then fix that too\n    let text_parts = text.split(' ');\n    if (text_parts.length\
    \ > 1 && text_parts[1].indexOf(' ') >= 0) {\n        text_parts[1] = text_parts[1].substr(0,\
    \ text_parts[1].length - 1);\n        text_parts[1] += \"-\";\n        \n    \
    \    text = text_parts.join(' ');\n    }\n    \n    return text;\n}\n", "  return\
    \ text.replace(/ /g, \"_\").replace(/  +/g, \"-\")\n}", "\tvar spaces = text.replace(/\\\
    s/g, '-');\n\tvar spaces_count = text.match(new RegExp(spaces, 'g')).count();\n\
    \treturn (spaces_count > 2) ? spaces.replace(/ /g, '-') : text;\n}\n", "    return\
    \ text.replace(/ /g, \"_\").replace(/  +/g, \"-\").replace(/^_/, \"\");\n}", " \
    \ return text.replace(/\\s+/g, \"_\");\n}\n", "\ttext = text.split(' ').join('_');\n\
    \tlet regex = /  +/g;\n\ttext = text.replace(regex, '-');\n\treturn text;\n}\n",
  "  const spaces = text.replace(/ +/g, \"_\");\n  if (spaces.length > 2 && spaces\
    \ !== \"_\") {\n    const splits = spaces.split(\"_\");\n    return splits.map(s\
    \ => s.length > 2 ? s.substr(0, s.length - 2) : \"_\" + s).join(\"\");\n  } else\
    \ {\n    return spaces;\n  }\n}\n</code>\n<|/ a tags=typescript,javascript |>\n\
    <| c |>\nA lot of people will downvote you for answering without an explanation\
    \ of the reason, but you seem to have the most upvoted answer yet the reason for\
    \ that downvote is completely incomprehensible...\n<|/ c |>\n<| a tags=typescript,javascript\
    \ |>\nThe most efficient way is:\n\n<code>", "  \n  if (text === \"\") return\
    \ \"\";\n  \n  var res = text.replace(/ /g, \"_\");\n\n  while (true) {\n\n  \
    \  res = res.replace(/ /g, \"-\");\n    if (res.search(/ /g) >= 0) {\n      break;\n\
    \    }\n  }\n\n  return res;\n}\n", "    // replace all spaces with underscores\n\
    \    text = text.replace(/ /g, \"_\");\n    // if there are more than 2 consecutive\
    \ spaces\n    if (text.match(/ {2}/g)) {\n        text = text.replace(/ {2}/g,\
    \ \" -\");\n    }\n    return text;\n}\n", "\ttext = text.split(\" \").join(\"\
    _\");\n\ttext = text.replace(/ {2,}/g, \"-\");\n\treturn text;\n}\n<|/ file source=github\
    \ ext=.ts |>\n<| a dscore=0 |>\nJust in case someone has the same issue, I found\
    \ a solution thanks to this site: http://www.geeksforgeeks.org/how-to-replace-multiple-spaces-with-single-space-in-python/\n\
    I just used the python solution:\n<code>\ndef fix_spaces(text):\n    return '\
    \ '.join(text.split())\n</code>\nAnd voil\xE0!\n<|/ a tags=python,c# |>\n<| a\
    \ |>\nI use this simple solution:\n<code>\npublic static string RemoveSpaces(string\
    \ input)\n{\n    return string.Concat(input.Split(' ').Where(x => x != string.Empty).Select(x\
    \ => $\"\\\"{x}\\\"\"));\n}\n</code>\n<|/ a dscore=0 tags=python,c# |>\n<| a tags=python,c#\
    \ |>\n<code>\npublic static string RemoveSpaces(string input)\n    {\n       \
    \ string temp = string.Empty;\n        temp = input.Replace(\" \", string.Empty);\n\
    \        temp = temp.Replace(\"  \", string.Empty);\n        temp = temp.Replace(\"\
    \  \", string.Empty);\n        temp = temp.Replace(\"  \", string.Empty);\n  \
    \      temp = temp.Replace(\"  \", string.Empty);\n        temp = temp.Replace(\"\
    \  \", string.Empty);\n        temp = temp.Replace(\"  \", string.Empty);\n  \
    \      temp = temp.Replace(\"  \", string.Empty);\n        temp = temp.Replace(\"\
    \  \", string.Empty);\n        temp = temp.Replace(\"  \", string.Empty);\n  \
    \      temp = temp.Replace(\"  \", string.Empty);\n        temp = temp.Replace(\"\
    \  \", string.Empty);\n        temp = temp.Replace(\"  \", string.Empty);\n  \
    \      temp = temp.Replace(\"  \", string.Empty);\n        temp = temp.Replace(\"\
    \  \", string.Empty);\n        temp = temp.Replace(\"  \", string.Empty);\n  \
    \      temp = temp.Replace(\"  \", string.Empty);\n        temp = temp.Replace(\"\
    \  \", string.Empty);\n        temp = temp.Replace(\"  \", string.Empty);\n  \
    \      temp = temp.Replace(\"  \", string.Empty);\n        temp = temp.Replace(\"\
    \  \", string.Empty);\n        temp = temp.Replace(\"  \", string.Empty);\n  \
    \      temp = temp.Replace(\"  \", string.Empty);\n        temp = temp.Replace(\"\
    \  \", string.Empty);\n        temp = temp.Replace(\"  \", string.Empty);\n  \
    \      temp = temp.Replace(\"  \", string.Empty);\n        temp = temp.Replace(\"\
    \  \", ", "    const fixedText = text.replace(/ /g, \"_\");\n    return fixedText;\n\
    }\n\n", "  let replaced = text;\n  const spaces = text.match(/ +/g);\n  if (spaces)\
    \ {\n    for (let i = 0; i < spaces.length; i++) {\n      replaced = replaced.replace(new\
    \ RegExp(spaces[i], \"g\"), \"_\");\n    }\n  }\n\n  const twoSpaces = text.match(/\
    \ {2}/g);\n  if (twoSpaces) {\n    for (let i = 0; i < twoSpaces.length; i++)\
    \ {\n      replaced = replaced.replace(new RegExp(twoSpaces[i], \"g\"), \"-\"\
    );\n    }\n  }\n\n  return replaced;\n}\n", "\treturn text.replace(/ /g, \"_\"\
    ).replace(/( +)/g, \"\").replace(/([-]{2,})/g, \"_\");\n}\n", "\treturn text.replace(/\
    \ /g, \"_\").replace(/  +/g, \"-\")\n}\n*/\n", "  return text.split(/\\s+/).join(\"\
    \ \").split(/ {2,}/).join(\" -\").trim();\n}\n", "\treturn text.trim().replace(/\\\
    s+/g, '_').replace(/ +(?= )/g, \"-\");\n}\n", "  return text.replace(/(\\s)+/g,\
    \ \"_\")\n    .replace(/ {2,}/g, \"-\")\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\n\
    The OP didn't want to use a library for such a basic functionality\n<|/ c |>\n\
    <| c |>\nI actually liked this answer, thanks for your input! I am still looking\
    \ for a way to do this without using any libraries, but will keep this as a reference\
    \ for future projects.\n<|/ c |>\n<| a tags=typescript,javascript,regex dscore=1\
    \ |>\n<code>\nvar input = \"Hello World !\"\nvar output = input.replace(/^|(\\\
    s)\\1+|(\\s)/g,'')\n</code>\n<|/ a |>\n<| c |>\nWhy did you choose this approach\
    \ over the one by Giovanni? I personally find this one easier to understand, and\
    \ it seems to work well, but I am not sure I understand it fully.\n<|/ c |>\n\
    <| c |>\nI agree, this is easier to understand, and works well.\n<|/ c |>\n<|\
    \ a dscore=1 |>\nI wrote a recursive solution which works exactly like the one\
    \ above but without using external libraries.\n<code>", "\tlet fixed_text = text.replace(/\
    \ /g, \"_\");\n\tfixed_text = fixed_text.replace(/  +/g, \"_\");\n\treturn fixed_text;\n\
    }\n\n", "    let text = text.replace(/\\s/g, \"_\");\n    let text = text.replace(/\
    \  +/g, \"_\");\n    let text = text.replace(/^_+/g, \"_\");\n    return text;\n\
    }\n", "    var result = text\n        .replace(/\\s/g, \"_\")\n        .replace(/\\\
    s{2,}/g, \"-\");\n    return result;\n}\n", "\tvar replacedText: string = \"\"\
    ;\n\tfor (var i = 0; i < text.length; i++) {\n\t\tvar c = text[i];\n\t\tif (c\
    \ == \" \" && text.substring(i, i + 2) == \" \") {\n\t\t\treplacedText += \"-\"\
    ;\n\t\t\ti += 1;\n\t\t} else {\n\t\t\treplacedText += c;\n\t\t}\n\t}\n\treturn\
    \ replacedText;\n}\n", "\tvar s = text.replace(/\\s+/g, \"_\");\n\tvar arr = s.split(\"\
    \ \");\n\tfor (var i = 0; i < arr.length; i++) {\n\t\tif (arr[i].length > 1) {\n\
    \t\t\tarr[i] = arr[i].replace(/\\s+/g, \"-\");\n\t\t}\n\t}\n\treturn arr.join(\"\
    \");\n}\n", "\tvar result = text;\n\t\n\ttext = text.replace(/(\\s+)/g, \"_\"\
    );\n\n\tif (text.match(/^\\s*$/)) {\n\t\treturn result;\n\t}\n\t\n\t\n\tif (text.match(/[^\
    \ ]+( +[^ ]+)+$/)) {\n\t\ttext = text.replace(/\\ +/g, \"-\");\n\t}\n\t\n\treturn\
    \ result;\n}\n", "    return text.replace(/\\s+/g, \"_\").replace(/\\s+-/g, \"\
    -\");\n}\n</code>\n<|/ a |>\n<| c |>\nThis works for me (thanks), but I am wondering\
    \ if this is the best solution. Is it? If so, I guess I don't understand why someone\
    \ would want to make spaces into dashes. Anyway thanks again for posting this.\n\
    <|/ c |>\n<| a dscore=0 |>\nHere is another solution using regex\n<code>\nlet\
    \ str = 'Example string';\nlet result = str.replace(/(\\s)-(\\s)/g, \"$1$2\");\n\
    </code>\n<|/ a tags=javascript,regex |>\n<| a tags=javascript,regex |>\nThe following\
    \ regex pattern matches a number of consecutive whitespace chars followed by a\
    \ dash char and then any number of whitespace chars.\nIt replaces that with the\
    \ first and second group matches:\n\n<code>\nconst s = `Example string\nExample\
    \ string\nExample string\nExample string\nExample string\nExample string\nExample\
    \ string\nExample string\nExample string\nExample string\nExample string\nExample\
    \ string\nExample string\nExample string\nExample string\nExample string\nExample\
    \ string\nExample string\nExample string\nExample string\nExample string\nExample\
    \ string\nExample string\nExample string\nExample string\nExample string\nExample\
    \ string\nExample string\nExample string\nExample string\nExample string\nExample\
    \ string\nExample string\nExample string\nExample string\nExample string\nExample\
    \ string\nExample string\nExample string\nExample string\nExample string\nExample\
    \ string\nExample string\nExample string\nExample string\nExample string\nExample\
    \ string\nExample string\nExample string\nExample string\nExample string\nExample\
    \ string\nExample string\nExample string\nExample string\nExample string\nExample\
    \ string\nExample string\nExample string\nExample string\nExample string\nExample\
    \ string\nExample string\nExample string\nExample string\nExample string\nExample\
    \ string\nExample string\nExample string\nExample string\nExample string\nExample\
    \ string\nExample string\nExample string\nExample string\nExample string\nExample\
    \ string\nExample string\nExample string\nExample string\nExample string\nExample\
    \ string\nExample string\nExample string\nExample string\nExample string\nExample\
    \ string\nExample string\nExample string\nExample string\nExample string\nExample\
    \ string\nExample string\nExample string\nExample string\nExample string\nExample\
    \ string\nExample string\nExample string\nExample string\nExample string\nExample\
    \ string\nExample string\nExample string\nExample string\nExample string\nExample\
    \ string\nExample string\nExample string\nExample string\nExample string\nExample\
    \ string\nExample string", "    if (text === undefined)\n        return \"\";\n\
    \    //Make sure we aren't handling just spaces (\" \") as in plain English\n\
    \    text = text.replace(/\\s/g,\"\");\n    let words = text.split(' ');\n   \
    \ if (words.length>1 && words.join(\"\").match(/ {2,}/)) {\n        words = words.map(function(word)\
    \ {\n            if (word === \" \")\n                return \"_\";\n        \
    \    else\n                return word;\n        });\n        text = words.join(\"\
    \ \");\n    }\n    return text;\n}\n", "  return text.replace(/\\s+/g, (match)\
    \ => {\n    let s = match.split(' ').filter(Boolean);\n    return s.length < 2\
    \ ? match : s.map(str => str.replace(/\\s/g, '-')).join('');\n  });\n}\n", " \
    \   \n    return text.replace(/\\s+/g, \"_\").replace(/[_]+/g, \"-\");\n}\n</code>\n\
    <|/ a |>\n<| a dscore=3 |>\nFor anyone interested in another solution in Javascript:\
    \ \n<code>\nconst fixSpaces = (str) => str.replace(/[\\s]{2,}/g, '_').replace(/[\\\
    _]{2,}/g, '_');\n</code>\nIt removes multiple consecutive spaces and replaces\
    \ them with just one.\n<|/ a tags=string,javascript,regex |>\n<| a tags=string,javascript,regex\
    \ |>\nI made it a little shorter (probably a bit less efficient) but you can try:\n\
    <code>\nvar spaces = '          ';\nvar res = spaces.replace(/\\s+/g, '_');\n\
    </code>\n<|/ a dscore=3 |>\n<| a |>\nYou can do it like this:\n<code>\nvar fixSpaces\
    \ = function(str) {\n  var r = str.split(' ').join('_');\n  var l = r.length -\
    \ 1;\n  return r.substring(0, l) + '_' + r.substring(l);\n};\n\nfixSpaces(\"hello\"\
    ); // \"hello\"\nfixSpaces(\"hello world\"); // \"hello_world\"\n</code>\n<|/\
    \ a dscore=3 tags=string,javascript,regex |>\n<| a |>\n<code>\nString.prototype.replaceSpaces\
    \ = function()\n{\n    var reg = new RegExp(' +', 'g');\n    return this.replace(reg,\
    \ ' ');\n};\n\nvar str = \"This is sample string with      multiple space\";\n\
    alert(str.replaceSpaces());\n</code>\n<|/ a tags=string,javascript,regex dscore=3\
    \ |>\n<| a dscore=2 |>\n<code>", "    text = text.replace(/ /g, \"_\");\n    if\
    \ (text.indexOf(\" \") > 1 ) {\n        text = text.replace(/ +(?= )/g, \"_\"\
    );\n    }\n    return text;\n}\n</code>\n<|/ a |>\n<| a dscore=4 tags=c#,string,formatting\
    \ |>\nI like the idea of John Egerton's, and want to add that if the string is\
    \ longer than 100 characters, it might not be enough to simply replace a space.\
    \  \nYou might have to replace multiple spaces with a single space, but that's\
    \ not always a problem.  \nFor a solution that handles short and long strings\
    \ try this:\n<code>\npublic static string SquishSpaces(string stringToSquish,\
    \ string toReplace = \" \", string withThis = \" \")\n{\n    if (stringToSquish.Length\
    \ > 100)\n        stringToSquish = stringToSquish.Substring(0, 100).Replace(\"\
    \ \", toReplace).Replace(\" \", withThis);\n\n    return stringToSquish;\n}\n\
    </code>\n<|/ a |>\n<| c |>\nWhat if you want to preserve original number of characters\
    \ as well and just replace some spaces?\n<|/ c |>\n<| a |>\nHere's another solution\
    \ using regular expressions:\n<code>\npublic static string SquishSpaces(string\
    \ text)\n{\n    var pattern = new Regex(@\"[ ]{2,}\");\n    return pattern.Replace(text,\
    \ \" \");\n}\n</code>\n<|/ a tags=c#,string,formatting dscore=4 |>\n<| c |>\n\
    I like how this regex can just replace 2-spaces with 1 space (instead of replacing\
    \ multiple consecutive spaces with a single space). It even preserves the number\
    \ of characters in the original string as well.\n<|/ c |>\n<| a tags=c#,string,formatting\
    \ |>\nI find this a lot more readable than some of the other solutions:\n<code>\n\
    public static string SquishSpaces(string text)\n{\n    string pattern = @\"[ ]{2,}\"\
    ;\n    string replace = \"  \";\n    return Regex.Replace(text, pattern, replace);\n\
    }\n</code>\n<|/ a dscore=4 |>\n<| c |>\nI liked this answer, so I looked into\
    \ why it works. Looks like it replaces any consecutive whitespace with a single\
    \ space, and it trims away whitespace around the outside of a string. So, a perfect\
    \ example of `Regex.Replace` I didn't know. Here's a [regex tester](https://regex101.com/)\
    \ I found to be useful.\n<|/ c |>\n<| a dscore=4 |>\nThe \"clean\" ", "  text\
    \ = text.trim();\n  return text.replace(/\\s+/g, \"_\").replace(/[_]{2,}/g, \"\
    -\");\n}\n<|/ file filename=utils.ts source=github dstars=1 |>\nexport {get_date_format,\
    \ get_time_format, get_datetime, format_datetime, format_date, format_time, fix_spaces};\n\
    import {get_date_format, get_time_format, get_datetime, format_datetime, format_date,\
    \ format_time, fix_spaces} from './utils';\n\n", "    return text.replace(/  /g,\
    \ \" \");\n}\n", "    var fixed = \"\";\n\n    if (text == \"\") return text;\n\
    \    \n    text = text.replace(/ /g, \"_\");\n    var spaces = 0;\n    while (text.length\
    \ > 0 && (text.charAt(0) == \" \" || text.charAt(0) == \"\\t\")) {\n        spaces\
    \ += 1;\n        text = text.substr(1);\n    }\n    \n    if (spaces > 2) {\n\
    \        text = text.replace(/\\s+/g, \"-\");\n    }\n\n    return text;\n}",
  "\tif (text == \"\") return text;\n\ttext = text.replace(/ /g, \"_\");\n\ttext =\
    \ text.replace(/(\\s\\s|\\s$)/g, \"-\");\n\treturn text;\n}\n", "\t// Replace\
    \ multiple spaces with single spaces.\n\tvar text = text.replace(/\\ +/g, \"_\"\
    );\n\n\t// Remove extra consecutive spaces.\n\ttext = text.replace(/_ {2,}/g,\
    \ \"_\");\n\n\treturn text;\n}\n", "  // If there are no spaces in the text, just\
    \ return it unmodified.\n  if (!text.match(/\\s+/g)) {\n    return text\n  }\n\
    \n  // Use a regular expression with global flag to match multiple \n  // spaces.\n\
    \  var pattern = /\\s+/g;\n  var fix_text = text.replace(pattern, '-');\n\n  //\
    \ If there are two consecutive spaces, replace them with one dash.\n  var pattern2\
    \ = /( ){2,}/g;\n  var fix_text2 = fix_text.replace(pattern2, '-');\n\n  // Finally,\
    \ return the fixed text.\n  return fix_text2;\n}\n</code>\n<|/ a dscore=3 |>\n\
    <| c |>\nThis doesn't work for me if the string has multiple consecutive spaces.\n\
    <|/ c |>\n<| c |>\nI edited it so that it now supports multiple consecutive spaces.\
    \ Thanks for the suggestion :)\n<|/ c |>\n<| c |>\nThis is a great answer, thank\
    \ you for taking the time to respond and explain it to me.\n<|/ c |>\n<| a dscore=3\
    \ |>\nI use this one:\n<code>", "  if (text === \"\") {\n    return text;\n  }\n\
    \  return text.replace(/ /g, \"_\").replace(/  +/g, \"_\");\n}\n", "    return\
    \ text\n        .replace(/ /g, \"_\")\n        .replace(/[ ]{2,}/g, \"-\")\n \
    \       .replace(/^-|_$/g, \"\");\n}\n", "    const re = /\\s+/g;\n    return\
    \ text.replace(re, \"_\");\n}\n</code>\n<|/ a dscore=4 |>\n<| c |>\nThis code\
    \ worked great for me. However there is a typo, where you have return str.replace(/\\\
    s+/g, \"_\"); it should be return text.replace(re, \"_\"); otherwise the function\
    \ will always return null.\n<|/ c |>\n<| c |>\nI made it an async function because\
    \ I'm calling a service which takes a while, so I needed to wait for it to finish\
    \ before returning the result of the transformation\n<|/ c |>\n<| a dscore=3 tags=string,javascript,replace\
    \ |>\nMy own take on a string replace solution:\n\n<code>", "    var regex = new\
    \ RegExp(\" \", \"g\");\n    return text.replace(regex, \"_\");\n}\n\n", "  return\
    \ text.replace(/ /g, \"_\").replace(/\\s{2,}/g, \"-\");\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
