language: ts
name: HumanEval_9_rolling_max
results:
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    const min = Math.min(...numbers);\n    const max\
    \ = Math.max(...numbers);\n    const arr: number[] = [];\n    for (let i = 0;\
    \ i < numbers.length; ++i) {\n        const num = numbers[i];\n        if (num\
    \ >= min && num <= max) {\n            arr.push(num);\n        }\n    }\n    return\
    \ arr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n  \
    \  at test (/tmp/tmprdjzc9ms.js:22:12)\n    at Object.<anonymous> (/tmp/tmprdjzc9ms.js:25:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2,\
    \ 1 ],\n  expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660003955
- exit_code: 2
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    // Sort the array by descending order\n    numbers.sort((a,\
    \ b) => b - a);\n    let rollingMax = 0;\n    // Loop through the array and find\
    \ rolling max element\n    for (let i = numbers.length - 1; i >= 0; i--) {\n \
    \       if (rollingMax < numbers[i]) {\n            rollingMax = numbers[i];\n\
    \        }\n    }\n    return rollingMax;\n}\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpshjdj0f9.ts(15,5): error TS2322: Type ''number''
    is not assignable to type ''number[]''.

    '
  timestamp: 1660003954
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n\tif (numbers.length === 0) return [];\n\tif (numbers.length\
    \ === 1) return numbers;\n\tvar max_element: number = numbers[0],\n\t\tmax_rolling_counter:\
    \ number[] = [max_element],\n\t\tresult: number[] = [];\n\n\tnumbers.forEach(function(number)\
    \ {\n\t\tmax_element = number > max_element ? number : max_element;\n\t\tmax_rolling_counter.push(max_element);\n\
    \t});\n\n\tfor (var i = 0; i < max_rolling_counter.length; i += 3) {\n\t\tif (max_rolling_counter[i]\
    \ === max_rolling_counter[i + 2] &&\n\t\t\tmax_rolling_counter[i + 1] === max_rolling_counter[i\
    \ + 3])\n\t\t\tresult.push(max_rolling_counter[i]);\n\t}\n\n\treturn result;\n\
    }\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmpfn7r55yl.js:26:12)\n\
    \    at Object.<anonymous> (/tmp/tmpfn7r55yl.js:30:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660003955
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max: number[] = [];\n\n    for (let i = 1; i\
    \ < numbers.length; i++) {\n        let max_so_far = max[i-1];\n        let cur_max\
    \ = numbers[i];\n\n        if (cur_max > max_so_far) {\n            max.push(cur_max);\n\
    \        }\n    }\n    return max;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmpb5zyaie3.js:20:12)\n\
    \    at Object.<anonymous> (/tmp/tmpb5zyaie3.js:24:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660003954
- exit_code: 2
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n  let rollingMax: number[] = [];\n  let maximum: number|undefined\
    \ = undefined;\n\n  for (const number of numbers) {\n    const index = rollingMax.findIndex((x)\
    \ => x > number);\n    if (index === -1) {\n      rollingMax.push(number);\n \
    \   } else {\n      if (rollingMax[index] > number) {\n        rollingMax[index]\
    \ = number;\n      } else {\n        rollingMax[index] = rollingMax[index] + 1;\n\
    \      }\n    }\n\n    if (rollingMax.length > 1 && !Number.isNaN(maximum)) {\n\
    \      rollingMax.shift();\n    }\n\n    if (rollingMax.length >= 2) {\n     \
    \ maximum = rollingMax.find((x) => x > rollingMax.slice(-1)[0]) as number | undefined;\n\
    \    }\n  }\n\n  return rollingMax;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpi2u6kt66.ts(10,30): error TS2339: Property ''findIndex''
    does not exist on type ''number[]''.

    ../../../../../tmp/tmpi2u6kt66.ts(21,42): error TS2339: Property ''isNaN'' does
    not exist on type ''NumberConstructor''.

    ../../../../../tmp/tmpi2u6kt66.ts(26,28): error TS2339: Property ''find'' does
    not exist on type ''number[]''.

    '
  timestamp: 1660003954
- exit_code: -1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    var max_num: number[] = [];\n    var max_num_index:\
    \ number[] = [];\n    var curr_max: number = 0;\n\n    // For each item in the\
    \ array we store its current maximum index and its\n    // current maximum. Then,\
    \ whenever the current maximum is greater than the\n    // number at that index,\
    \ we store the new maximum and its index here\n    // and increment the index\
    \ to which this number belongs.\n    for (var i = 0; i < numbers.length; i++)\
    \ {\n        if (max_num.length == 0) {\n            max_num[0] = numbers[i];\n\
    \            max_num_index[0] = i;\n        } else if (max_num[0] > numbers[i])\
    \ {\n            max_num[0] = numbers[i];\n            max_num_index[0] = i;\n\
    \        } else if (max_num[0] == numbers[i]) {\n            // No changes were\
    \ made to the current number, so let's keep this\n            // as the new current\
    \ maximum.\n        } else {\n            // The current number is greater than\
    \ the previous maximum, so we have\n            // to add this number to the array.\n\
    \            max_num.push(numbers[i]);\n            max_num_index.push(i);\n \
    \       }\n    }\n\n    // At this point we have the array `max_num` which contains\
    \ all the current\n    // maximums in the given sequence. Let's go over all elements\
    \ from this array\n    // and add all the current maximums to the new rolling\
    \ maximum array.\n    for (var i = 1; i < max_num.length; i++) {\n        curr_max\
    \ = 0;\n        for (var j = 0; j < i; j++) {\n            curr_max += max_num[j];\n\
    \        }\n        max_num.push(curr_max);\n        max_num_index.push(i);\n\
    \    }\n\n    return max_num;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660003970
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    var window: number[] = [];\n    var sum: number[]\
    \ = [];\n    var i = 0;\n    while (i < numbers.length) {\n        window.push(numbers[i]);\n\
    \        sum.push(numbers[i]);\n        i++;\n    }\n    while (i < numbers.length)\
    \ {\n        var max_element = Math.max.apply(Math, window);\n        if (max_element\
    \ === sum[sum.length - 1]) {\n            window.pop();\n        } else {\n  \
    \          sum.push(max_element);\n        }\n        i++;\n    }\n    return\
    \ window;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n  \
    \  at test (/tmp/tmp08xsknfv.js:31:12)\n    at Object.<anonymous> (/tmp/tmp08xsknfv.js:34:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2,\
    \ 1 ],\n  expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660003955
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max: number = -Infinity;\n    let max_index =\
    \ -1;\n    let rolling_max: number[] = [];\n\n    numbers.forEach((number, index)\
    \ => {\n        if (number > max) {\n            max = number;\n            max_index\
    \ = index;\n        }\n    });\n\n    for (let index = numbers.length - 1; index\
    \ > -1; index--) {\n        if (numbers[index] > max) {\n            rolling_max[max_index]\
    \ = numbers[index];\n            max_index--;\n        }\n    }\n\n    return\
    \ rolling_max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmpxxdaldwu.js:27:12)\n\
    \    at Object.<anonymous> (/tmp/tmpxxdaldwu.js:31:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660003955
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n  var max_val = 0;\n  var rolling_index = 0;\n\n  for\
    \ (var i = 0; i < numbers.length; i++) {\n    if (max_val < numbers[i]) {\n  \
    \    max_val = numbers[i];\n      rolling_index = i;\n    }\n  }\n\n  return numbers.slice(0,\
    \ rolling_index + 1);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4\n]\n\n\
    should loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n    at test (/tmp/tmpv5a08hhd.js:21:12)\n\
    \    at Object.<anonymous> (/tmp/tmpv5a08hhd.js:24:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4 ],\n \
    \ expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660003955
- exit_code: 2
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    var min = Math.min.apply(null, numbers);\n    var\
    \ max: number[] = [];\n\n    for (var i = 0; i < numbers.length; i++) {\n    \
    \    max = numbers[i] == min ? max : [max, numbers[i]];\n    }\n\n    return max;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: "../../../../../tmp/tmp47diw9v4.ts(10,9): error TS2322: Type '(number |\
    \ number[])[]' is not assignable to type 'number[]'.\n  Type 'number | number[]'\
    \ is not assignable to type 'number'.\n    Type 'number[]' is not assignable to\
    \ type 'number'.\n"
  timestamp: 1660003954
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n  let max = Number.MIN_VALUE\n  let result = []\n\n \
    \ for (let i = 0; i < numbers.length; i++) {\n    let current = numbers[i]\n \
    \   if (current > max) {\n      max = current\n      result = [current]\n    }\
    \ else if (current === max) {\n      result.push(max)\n    }\n  }\n\n  return\
    \ result\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmpb2tas2r2.js:24:12)\n\
    \    at Object.<anonymous> (/tmp/tmpb2tas2r2.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4 ],\n \
    \ expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660003954
- exit_code: 2
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n  var _numbers = _slicedToArray(numbers, 1),\n      window\
    \ = _numbers[0],\n      index = _numbers[1];\n\n  var rolling_max_array = rolling_max_array[window];\n\
    \n  while (index < numbers.length) {\n    rolling_max_array = rolling_max_array.concat(rolling_max(numbers,\
    \ index + 1));\n    index += 1\n  }\n  return rolling_max_array;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n \
    \ assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpxtr79ejo.ts(6,18): error TS2304: Cannot find name
    ''_slicedToArray''.

    ../../../../../tmp/tmpxtr79ejo.ts(13,71): error TS2554: Expected 1 arguments,
    but got 2.

    '
  timestamp: 1660003954
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    const array = [];\n    let max_found = 0;\n    for\
    \ (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] > max_found)\
    \ {\n            array.push(max_found);\n            array.push(numbers[i]);\n\
    \            max_found = numbers[i];\n        } else {\n            max_found\
    \ = numbers[i];\n        }\n    }\n    array.push(max_found);\n    return array;\n\
    }\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0\n]\n\n\
    should loosely deep-equal\n\n[]\n    at test (/tmp/tmpzbcenmvy.js:24:12)\n   \
    \ at Object.<anonymous> (/tmp/tmpzbcenmvy.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0 ],\n \
    \ expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660003955
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let largest: number[] = [];\n    let rollingMax:\
    \ number[] = [];\n    numbers.forEach((item) => {\n        rollingMax.push(Math.max(item));\n\
    \    });\n    while (rollingMax.length > 0) {\n        largest.push(rollingMax.shift());\n\
    \    }\n    return largest;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n  \
    \  at test (/tmp/tmpetg295b9.js:21:12)\n    at Object.<anonymous> (/tmp/tmpetg295b9.js:24:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2,\
    \ 1 ],\n  expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660003955
- exit_code: 2
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    var res = [];\n    for (var i = 0, len = numbers.length;\
    \ i < len; i++) {\n        res.push(Math.max(numbers[i], numbers[rolling_max_index(i)]));\n\
    \    }\n    return res;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmphlwd0xaf.ts(8,47): error TS2304: Cannot find name
    ''rolling_max_index''.

    '
  timestamp: 1660003955
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    const rollingMax: number[] = [];\n\n    for (let\
    \ i = 0; i < numbers.length; i++) {\n        if (numbers[i] > rollingMax[rollingMax.length\
    \ - 1]) {\n            rollingMax.push(numbers[i]);\n        } else {\n      \
    \      continue;\n        }\n    }\n\n    return rollingMax;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmpu6jloeij.js:21:12)\n\
    \    at Object.<anonymous> (/tmp/tmpu6jloeij.js:25:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660003955
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    var max_roll = [];\n    var roll_number = numbers[0];\n\
    \    var roll_max = numbers[0];\n    var max_index = -1;\n    for (var i = 1;\
    \ i < numbers.length; i++) {\n        roll_number = numbers[i];\n        if (roll_number\
    \ > max_roll[0]) {\n            max_roll[0] = roll_number;\n            max_index\
    \ = i;\n        }\n    }\n    max_roll[0] = numbers[max_index];\n    max_roll.splice(max_roll.indexOf(numbers[max_index]),\
    \ 1);\n    return max_roll;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmpawd7_ab3.js:25:12)\n\
    \    at Object.<anonymous> (/tmp/tmpawd7_ab3.js:29:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660003955
- exit_code: 2
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    return numbers.map(value => {\n        const rolling_max_found\
    \ = values.reduce((acc, val) => {\n            return acc < val ? val : acc;\n\
    \        }, -1);\n        return rolling_max_found >= value ? rolling_max_found\
    \ : value;\n    });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpof648vl2.ts(7,35): error TS2552: Cannot find name
    ''values''. Did you mean ''value''?

    '
  timestamp: 1660003954
- exit_code: 2
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max_number = Number.MIN_SAFE_INTEGER;\n    let\
    \ result = [];\n    for (let i = 1; i <= numbers.length; i++) {\n        let num\
    \ = numbers[i - 1];\n        if (num > max_number) {\n            max_number =\
    \ num;\n        }\n    }\n    for (let i = 1; i <= numbers.length; i++) {\n  \
    \      let num = numbers[i];\n        if (num > max_number) {\n            result.push(max_number);\n\
    \        }\n    }\n    for (let i = 1; i < numbers.length; i++) {\n        let\
    \ num = numbers[i];\n        if (num > max_number) {\n            result.push(num);\n\
    \        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpni96_hz0.ts(6,29): error TS2339: Property ''MIN_SAFE_INTEGER''
    does not exist on type ''NumberConstructor''.

    '
  timestamp: 1660003955
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let result: number[] = [];\n    numbers.sort((a,\
    \ b) => a - b);\n    let previousValue = numbers[0];\n    for (let i = 1; i <\
    \ numbers.length; i++) {\n        if (numbers[i] < previousValue) {\n        \
    \    continue;\n        }\n        result.push(previousValue);\n        previousValue\
    \ = numbers[i];\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test\
    \ (/tmp/tmphvxj04yc.js:22:12)\n    at Object.<anonymous> (/tmp/tmphvxj04yc.js:26:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3\
    \ ],\n  expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660003955
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n  let max: number = Number.MIN_VALUE;\n  let max_index:\
    \ number = 0;\n  for (let i: number = 0; i < numbers.length; i++) {\n    if (numbers[i]\
    \ > max) {\n      max = numbers[i];\n      max_index = i;\n    }\n  }\n  const\
    \ result: number[] = [];\n  for (let i = max_index; i >= 0; i--) {\n    result.push(numbers[i]);\n\
    \  }\n  return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpibm1c9it.js:23:12)\n\
    \    at Object.<anonymous> (/tmp/tmpibm1c9it.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660003955
- exit_code: 2
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max: number[] = [];\n    let last: number = numbers[0];\n\
    \    let i: number;\n    for (i = 1; i < numbers.length; i++) {\n        if (numbers[i]\
    \ > last) {\n            last = numbers[i];\n        }\n    }\n    max = last;\n\
    \    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpxmkxatfl.ts(14,5): error TS2322: Type ''number''
    is not assignable to type ''number[]''.

    '
  timestamp: 1660003954
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n\tlet max: number[] = [];\n\tlet rolling_max: number[]\
    \ = [];\n\tlet current_max: number = 0;\n\tnumbers.forEach((number) => {\n\t\t\
    if (number > current_max) {\n\t\t\trolling_max = [];\n\t\t\trolling_max.push(current_max);\n\
    \t\t\trolling_max.push(number);\n\t\t\tmax = rolling_max;\n\t\t} else {\n\t\t\t\
    rolling_max.push(number);\n\t\t}\n\t\tcurrent_max = number;\n\t});\n\treturn max;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  4\n\
    ]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmp_ywxgz_y.js:27:12)\n\
    \    at Object.<anonymous> (/tmp/tmp_ywxgz_y.js:31:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 4 ],\n\
    \  expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660003955
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max = numbers[0];\n    let maxIndex = 0;\n  \
    \  for (let index = 1; index < numbers.length; index++) {\n        if (numbers[index]\
    \ > max) {\n            max = numbers[index];\n            maxIndex = index;\n\
    \        }\n    }\n    return [numbers[maxIndex], max];\n}\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined,\n\
    \  undefined\n]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmptvuk8a2w.js:19:12)\n\
    \    at Object.<anonymous> (/tmp/tmptvuk8a2w.js:24:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined,\
    \ undefined ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660003957
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n  let result: number[] = [];\n  let current = [];\n \
    \ for (let i = 0; i < numbers.length; i++) {\n    current = (current || []).concat(numbers[i]);\n\
    \    if (i > 0) {\n      current[i - 1] = Math.max(current[i - 1]);\n    }\n \
    \   result.push(current[current.length - 1]);\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n \
    \ assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n  \
    \  at test (/tmp/tmpksthl8sj.js:22:12)\n    at Object.<anonymous> (/tmp/tmpksthl8sj.js:25:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2,\
    \ 1 ],\n  expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660003957
- exit_code: 2
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max_rolling_value = 0;\n    let max_rolling_i\
    \ = 0;\n\n    for (let i = 1; i < numbers.length; i++){\n        if (max_rolling_i\
    \ > numbers.length - i){\n            break;\n        }\n\n        if (numbers[i]\
    \ > max_rolling_value){\n            max_rolling_value = numbers[i];\n       \
    \     max_rolling_i = i;\n        }\n    }\n\n    let max_rolling = new Array<number>([max_rolling_value,\
    \ max_rolling_i]);\n\n    return max_rolling;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: "../../../../../tmp/tmpm2zvitff.ts(20,41): error TS2769: No overload matches\
    \ this call.\n  Overload 1 of 3, '(arrayLength: number): number[]', gave the following\
    \ error.\n    Argument of type 'number[]' is not assignable to parameter of type\
    \ 'number'.\n  Overload 2 of 3, '(...items: number[]): number[]', gave the following\
    \ error.\n    Argument of type 'number[]' is not assignable to parameter of type\
    \ 'number'.\n"
  timestamp: 1660003957
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    var result = [];\n    for (var i = 0; i < numbers.length;\
    \ i++) {\n        var v = numbers[i];\n        for (var j = 1; j < i; j++) {\n\
    \            if (v > numbers[j]) {\n                v = numbers[j];\n        \
    \    }\n        }\n        result.push(v);\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n \
    \ assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  2,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n  \
    \  at test (/tmp/tmp952rlhlm.js:22:12)\n    at Object.<anonymous> (/tmp/tmp952rlhlm.js:26:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 2,\
    \ 2 ],\n  expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660003957
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n\tlet max_idx = numbers.length - 1;\n\tfor (let i = 0;\
    \ i < numbers.length; i++) {\n\t\tlet max_value = numbers[i];\n\t\tfor (let j\
    \ = i + 1; j < numbers.length; j++) {\n\t\t\tif (numbers[j] > max_value) {\n\t\
    \t\t\tmax_value = numbers[j];\n\t\t\t\tmax_idx = j;\n\t\t\t}\n\t\t}\n\t\tnumbers[max_idx]\
    \ = numbers[i];\n\t}\n\tnumbers.reverse();\n\treturn numbers;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1,\n\
    \  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n  \
    \  at test (/tmp/tmpih1vx2c7.js:24:12)\n    at Object.<anonymous> (/tmp/tmpih1vx2c7.js:28:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1, 2,\
    \ 1 ],\n  expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660003957
- exit_code: 2
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n  return numbers.reduce((acc, curr, index) => {\n   \
    \ if (index === 0) {\n      return curr\n    } else {\n      return Math.max(acc,\
    \ curr)\n    }\n  })\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpe6806bxp.ts(6,3): error TS2322: Type ''number'' is
    not assignable to type ''number[]''.

    '
  timestamp: 1660003957
- exit_code: -5
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n  let max: number = numbers[0]\n  let result: number[]\
    \ = []\n  let i = 0\n  while (numbers.length > 0) {\n    if (numbers[i] > max)\
    \ {\n      max = numbers[i]\n    }\n    result.push(max)\n    i++\n  }\n  return\
    \ result\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: Exception
  stderr: "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error\
    \ 169220804\n#\n#\n#\n#FailureMessage Object: 0x7ffc57b7b940\n 1: 0x2aef07123727\
    \  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 2: 0x2aef07cb828e\
    \ V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 3: 0x2aef075f2f8b  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 4: 0x2aef07784760  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 5: 0x2aef0778c0cd  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 6: 0x2aef079767db v8::internal::Runtime_GrowArrayElements(int, unsigned long*,\
    \ v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 7: 0x2aef072d57f9  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n"
  stdout: ''
  timestamp: 1660003960
- exit_code: -1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n  // get first and last item\n  let [first, ...rest]\
    \ = numbers;\n  // get first item\n  const result = first > rest[0] ? [first]\
    \ : [];\n  // fill with first item\n  while (numbers.length > 0) {\n    const\
    \ current = rest.shift();\n    if (current > rest[0]) result.push(current);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660003972
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n  if (numbers.length === 0) {\n    return [];\n  }\n\n\
    \  var max_element = numbers[0];\n  var max_element_index = -1;\n\n  for (var\
    \ i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max_element) {\n   \
    \   max_element = numbers[i];\n      max_element_index = i;\n    }\n  }\n\n  return\
    \ numbers.slice(0, max_element_index + 1);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n    at test (/tmp/tmpn8y8qg1p.js:24:12)\n\
    \    at Object.<anonymous> (/tmp/tmpn8y8qg1p.js:27:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660003957
- exit_code: 2
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n  if (numbers.length === 0) {\n    return [];\n  }\n\
    \  const max = numbers[0];\n  const max = Math.min(max, numbers[0]);\n  const\
    \ maxIndex = numbers.indexOf(max);\n  return rolling_max(numbers.map(n => Math.max(n,\
    \ max)));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpgrwsqp3z.ts(9,9): error TS2451: Cannot redeclare
    block-scoped variable ''max''.

    ../../../../../tmp/tmpgrwsqp3z.ts(10,9): error TS2451: Cannot redeclare block-scoped
    variable ''max''.

    '
  timestamp: 1660003957
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n  let result: number[] = [];\n  let max: number = -Infinity;\n\
    \  numbers.forEach(number => {\n    max = Math.max(max, number);\n  });\n  for\
    \ (let i = 0; i < numbers.length; i++) {\n    let current = numbers[i];\n    while\
    \ (i > 0 && numbers[i - 1] > current) {\n      numbers[i - 1] = numbers[i - 1]\
    \ - 1;\n      current = numbers[i - 1];\n    }\n    result.push(current);\n  }\n\
    \  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n  \
    \  at test (/tmp/tmpmsoo9_5c.js:26:12)\n    at Object.<anonymous> (/tmp/tmpmsoo9_5c.js:29:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2,\
    \ 1 ],\n  expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660003957
- exit_code: 2
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n  const rolling_max = numbers[0]\n  for (let i = 1; i\
    \ < numbers.length; i++) {\n    rolling_max = Math.max(rolling_max, numbers[i])\n\
    \  }\n  return rolling_max\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp1oxv0b5_.ts(8,5): error TS2588: Cannot assign to
    ''rolling_max'' because it is a constant.

    ../../../../../tmp/tmp1oxv0b5_.ts(10,3): error TS2322: Type ''number'' is not
    assignable to type ''number[]''.

    '
  timestamp: 1660003957
- exit_code: 2
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n  if (numbers.length < 1) return []; //if the given array\
    \ is empty, return an empty array\n\n  var result: number[] = []; //variable to\
    \ store rolling max elements\n\n  var rolling_max: number[] = []; //variable to\
    \ store max elements in rolling max\n\n  var max_element: number; //variable to\
    \ store max element\n\n  var i: number; //looping variable\n\n  for (i = 0; i\
    \ < numbers.length; i++) {\n    //finding max element in the given rolling max\
    \ array\n    if (max_element < rolling_max[rolling_max.length - 1]) {\n      max_element\
    \ = rolling_max[rolling_max.length - 1];\n    }\n    //adding new max element\
    \ to rolling max array\n    rolling_max.push(max_element);\n  }\n\n  for (i =\
    \ 0; i < numbers.length; i++) {\n    //if number is not in rolling max array,\
    \ adding it to the result array\n    if (!rolling_max.includes(numbers[i])) {\n\
    \      result.push(numbers[i]);\n    }\n  }\n\n  return result;\n}\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp59ytrxtb.ts(27,22): error TS2339: Property ''includes''
    does not exist on type ''number[]''.

    '
  timestamp: 1660003957
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n  const len = numbers.length\n  if (len <= 1) {\n   \
    \ return numbers\n  }\n  let maxNumber: number = numbers[0]\n  for (let i = 1;\
    \ i < len; i++) {\n    if (maxNumber < numbers[i]) {\n      maxNumber = numbers[i]\n\
    \    }\n  }\n  const newArray: number[] = []\n  for (let i = 0; i < len; i++)\
    \ {\n    newArray.push(numbers[i])\n    if (numbers[i] > maxNumber) {\n      newArray.push(maxNumber)\n\
    \      maxNumber = 0\n    }\n  }\n  return newArray\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n  \
    \  at test (/tmp/tmpntoyi2xe.js:31:12)\n    at Object.<anonymous> (/tmp/tmpntoyi2xe.js:34:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2,\
    \ 1 ],\n  expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660003957
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let maxNumber: number[] = [];\n    for (let i = 0;\
    \ i < numbers.length; i++) {\n        let currentNumber = numbers[i];\n      \
    \  if (maxNumber.length >= currentNumber - 1) {\n            let highestIndex\
    \ = i;\n            for (let j = i; j < maxNumber.length; j++) {\n           \
    \     if (maxNumber[j] > maxNumber[highestIndex]) {\n                    highestIndex\
    \ = j;\n                }\n            }\n            maxNumber[highestIndex]\
    \ = Math.max(maxNumber[highestIndex], currentNumber);\n        } else {\n    \
    \        maxNumber.push(currentNumber);\n        }\n    }\n    return maxNumber;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  NaN,\n  NaN,\n\
    \  NaN,\n  NaN\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n\
    \    at test (/tmp/tmp_x4d3rc2.js:28:12)\n    at Object.<anonymous> (/tmp/tmp_x4d3rc2.js:32:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ NaN, NaN,\
    \ NaN, NaN ],\n  expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660003957
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    if (numbers.length === 0) {\n        throw new Error(\"\
    rolling_max expects an array of at least one number as its input\");\n    }\n\n\
    \    return numbers.map(function (n, i) {\n        var max_so_far = n;\n     \
    \   for (var j = 0; j < i - 1; j++)\n            max_so_far = Math.max(max_so_far,\
    \ numbers[j]);\n        return max_so_far;\n    });\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpu_t1k9wz.js:7\n        throw new Error(\"rolling_max expects an\
    \ array of at least one number as its input\");\n        ^\n\nError: rolling_max\
    \ expects an array of at least one number as its input\n    at rolling_max (/tmp/tmpu_t1k9wz.js:7:15)\n\
    \    at test (/tmp/tmpu_t1k9wz.js:19:22)\n    at Object.<anonymous> (/tmp/tmpu_t1k9wz.js:24:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660003957
- exit_code: 2
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    return numbers.reduce((accumulator, number) => {\n\
    \        return Math.max(accumulator, number);\n    }, numbers[0]);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n \
    \ assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp8n518k59.ts(6,5): error TS2322: Type ''number'' is
    not assignable to type ''number[]''.

    '
  timestamp: 1660003957
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    // Algorithm 1. Sort numbers.\n    // Algorithm 2.\
    \ Roll from first element until the end and find the max.\n    // Algorithm 3.\
    \ Reverse the order and return the result.\n\n    let sortedNumbers = numbers.sort((a,\
    \ b) => a - b);\n    let rollingMax = sortedNumbers.slice();\n    let rollingMaxIndex\
    \ = 0;\n    let maxIndex = 0;\n    for (let i = 1; i < sortedNumbers.length; i\
    \ += 1) {\n        let maxBefore = rollingMax[rollingMaxIndex];\n        if (rollingMaxIndex\
    \ === 0) {\n            rollingMaxIndex++;\n            rollingMax[0] = rollingMax[rollingMaxIndex]\
    \ = sortedNumbers[i];\n        }\n        if (rollingMax[rollingMaxIndex] > sortedNumbers[i])\
    \ {\n            rollingMax[rollingMaxIndex] = sortedNumbers[i];\n           \
    \ rollingMaxIndex += 1;\n        }\n        if (rollingMaxIndex === maxIndex)\
    \ {\n            maxIndex += 1;\n        }\n    }\n    return rollingMax.reverse();\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n  \
    \  at test (/tmp/tmpai80ud7x.js:33:12)\n    at Object.<anonymous> (/tmp/tmpai80ud7x.js:37:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2,\
    \ 2 ],\n  expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660003957
- exit_code: 2
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n  let currentMax: number = numbers[0];\n\n  for (let\
    \ i = 1; i < numbers.length; i++) {\n    if (numbers[i] > currentMax) {\n    \
    \  currentMax = numbers[i];\n    }\n  }\n  return currentMax;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpub6bt084.ts(13,3): error TS2322: Type ''number''
    is not assignable to type ''number[]''.

    '
  timestamp: 1660003957
- exit_code: 2
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    const result: number[] = [];\n    numbers.forEach((n,\
    \ i) => {\n        result[i] = n;\n    });\n    let maxValue = Math.max.apply(Math,\
    \ result);\n    let maxIndex = 0;\n    result.forEach((n, i) => {\n        if\
    \ (n === maxValue) {\n            maxIndex = i;\n        }\n    });\n    let result\
    \ = numbers.slice(0, maxIndex + 1);\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpudg45mm_.ts(6,11): error TS2451: Cannot redeclare
    block-scoped variable ''result''.

    ../../../../../tmp/tmpudg45mm_.ts(17,9): error TS2451: Cannot redeclare block-scoped
    variable ''result''.

    '
  timestamp: 1660003957
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n  numbers.sort((a: number, b: number) => b - a); // ascending\
    \ sort\n  let current = numbers[0];\n  let result = [];\n  for (let i = 1; i <\
    \ numbers.length; i++) {\n    if (numbers[i] >= current) {\n      result.push(current);\n\
    \      current = numbers[i];\n    } else {\n      current = numbers[i];\n    }\n\
    \  }\n  result.push(current);\n  return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmp8b97ov_g.js:24:12)\n\
    \    at Object.<anonymous> (/tmp/tmp8b97ov_g.js:29:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660003957
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    const min = Math.min.apply(null, numbers);\n    return\
    \ numbers.map(n => Math.max(min, n));\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n  \
    \  at test (/tmp/tmpu0m6h0fg.js:14:12)\n    at Object.<anonymous> (/tmp/tmpu0m6h0fg.js:17:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2,\
    \ 1 ],\n  expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660003957
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n  var max_elements = []\n  var max = numbers[0]\n  var\
    \ current_max = numbers[0]\n  for (var index = 1; index < numbers.length; index++)\
    \ {\n    if (max < numbers[index]) {\n      max = numbers[index]\n      current_max\
    \ = max\n    }\n  }\n  max_elements.push(current_max)\n  return max_elements\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpcivmvtmx.js:21:12)\n\
    \    at Object.<anonymous> (/tmp/tmpcivmvtmx.js:26:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660003959
- exit_code: 2
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n  let max: number[] = [];\n  let start = 0;\n  while\
    \ (start < numbers.length) {\n    max = numbers.slice(start, start + maxLength);\n\
    \    start = start + maxLength;\n  }\n  return max;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp26m5gkya.ts(9,40): error TS2304: Cannot find name
    ''maxLength''.

    ../../../../../tmp/tmp26m5gkya.ts(10,21): error TS2304: Cannot find name ''maxLength''.

    '
  timestamp: 1660003959
- exit_code: 2
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    const rolling_max = numbers[0];\n\n    for (let i\
    \ = 1; i < numbers.length; i++) {\n        let max_element = numbers[i];\n\n \
    \       for (let j = i - 1; j >= 0; j--) {\n            if (numbers[j] > max_element)\
    \ {\n                max_element = numbers[j];\n            }\n        }\n\n \
    \       rolling_max = max_element;\n    }\n\n    return rolling_max;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n \
    \ assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpe2fvifp1.ts(17,9): error TS2588: Cannot assign to
    ''rolling_max'' because it is a constant.

    ../../../../../tmp/tmpe2fvifp1.ts(20,5): error TS2322: Type ''number'' is not
    assignable to type ''number[]''.

    '
  timestamp: 1660003959
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n  var max_index: number;\n  var max_value: number;\n\
    \  var result: number[] = [];\n  for (let i = 0; i < numbers.length; i++) {\n\
    \    let current_value: number = numbers[i];\n    for (let j = 0; j < i; j++)\
    \ {\n      current_value = Math.max(current_value, numbers[j]);\n    }\n    if\
    \ (current_value == numbers[max_index]) {\n      max_index++;\n    } else {\n\
    \      if (max_index != undefined) {\n        result.push(max_value);\n      }\n\
    \      max_value = current_value;\n      max_index = i;\n    }\n  }\n  if (max_index\
    \ != undefined) {\n    result.push(max_value);\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n \
    \ assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  4,\n\
    \  4\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n    at test\
    \ (/tmp/tmpbyn2_scd.js:35:12)\n    at Object.<anonymous> (/tmp/tmpbyn2_scd.js:38:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 4, 4\
    \ ],\n  expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660003959
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n\tlet max_value = Number.NEGATIVE_INFINITY;\n\tlet max_index\
    \ = 0;\n\tlet current_index = 0;\n\tlet temp: number;\n\tfor (let i = 0; i < numbers.length;\
    \ ++i) {\n\t\ttemp = numbers[i];\n\t\tif (max_value < temp) {\n\t\t\tmax_value\
    \ = temp;\n\t\t\tmax_index = current_index;\n\t\t}\n\t\tnumbers[current_index++]\
    \ = temp;\n\t}\n\treturn numbers.slice(0, max_index + 1);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4\n]\n\n\
    should loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n    at test (/tmp/tmp7tq4_e47.js:25:12)\n\
    \    at Object.<anonymous> (/tmp/tmp7tq4_e47.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4 ],\n \
    \ expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660003959
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let result = [];\n    numbers.forEach((n) => {\n\
    \        result.push((result.length < n) ? n : result[result.length-1]);\n   \
    \ });\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  3,\n  3\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n  \
    \  at test (/tmp/tmpwq6sne9v.js:17:12)\n    at Object.<anonymous> (/tmp/tmpwq6sne9v.js:20:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 3,\
    \ 3 ],\n  expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660003959
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    numbers.forEach((n, i) => {\n        numbers[i] =\
    \ n;\n    });\n\n    let max: number[] = [];\n    numbers.forEach((n) => {\n \
    \       if (max[max.length - 1] < n)\n            max.push(n);\n    });\n\n  \
    \  return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmpa8g1xred.js:20:12)\n\
    \    at Object.<anonymous> (/tmp/tmpa8g1xred.js:24:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660003959
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    if (numbers.length <= 0) {\n        return [];\n\
    \    }\n    var max_num = numbers[0];\n    var rolling_max = numbers;\n    for\
    \ (var i = 1; i < numbers.length; i++) {\n        if (numbers[i] >= max_num) {\n\
    \            rolling_max = [max_num].concat(rolling_max);\n            max_num\
    \ = numbers[i];\n        } else {\n            rolling_max = [max_num, numbers[i]].concat(rolling_max);\n\
    \        }\n    }\n    return rolling_max;\n}\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  2,\n\
    \  1,\n  1,\n  2,\n  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n    at test (/tmp/tmpmwda_eaq.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpmwda_eaq.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    3,\
    \ 2, 1, 1,\n    2, 3, 4\n  ],\n  expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660003959
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max = numbers[0];\n    let rolling_max: number[]\
    \ = [];\n    let n: number = numbers.length;\n    let i: number;\n    for (i =\
    \ 1; i < n; i++) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n\
    \        }\n    }\n    if (max !== 0) {\n        rolling_max = [max];\n      \
    \  for (i = 1; i < n; i++) {\n            if (numbers[i] > rolling_max[0]) {\n\
    \                rolling_max[0] = numbers[i];\n            }\n        }\n    }\n\
    \    return rolling_max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpat4wpoap.js:28:12)\n\
    \    at Object.<anonymous> (/tmp/tmpat4wpoap.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660003960
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    const rolling_max_values: number[] = [];\n\n    let\
    \ max_value = numbers[0];\n    let max_idx = 1;\n    let current = numbers[0];\n\
    \    let idx = 1;\n    while (idx < numbers.length) {\n        if (numbers[idx]\
    \ > current) {\n            current = numbers[idx];\n        }\n        if (current\
    \ > max_value) {\n            max_value = current;\n            max_idx = idx;\n\
    \        }\n        idx += 1;\n    }\n    rolling_max_values.push(max_value);\n\
    \    rolling_max_values.push(numbers[max_idx]);\n\n    return rolling_max_values;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined,\n\
    \  undefined\n]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmp2juijoik.js:28:12)\n\
    \    at Object.<anonymous> (/tmp/tmp2juijoik.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined,\
    \ undefined ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660003959
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n  let result: number[] = [];\n  let i = 0;\n  for (let\
    \ x = numbers.length - 1; x > -1; x--) {\n    if (numbers[x] > numbers[i] || i\
    \ === 0) {\n      result.push(numbers[x]);\n    } else {\n      result.push(numbers[i]);\n\
    \      i += 1;\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n  \
    \  at test (/tmp/tmplct_0dki.js:23:12)\n    at Object.<anonymous> (/tmp/tmplct_0dki.js:27:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2,\
    \ 1 ],\n  expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660003959
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n  const rolling_maxes: number[] = [];\n  for (let i =\
    \ 0; i < numbers.length; i++) {\n    if (rolling_maxes.length == 0 || rolling_maxes[rolling_maxes.length\
    \ - 1] < numbers[i]) {\n      rolling_maxes.push(numbers[i]);\n    } else {\n\
    \      rolling_maxes[rolling_maxes.length - 1] = numbers[i];\n    }\n  }\n  return\
    \ rolling_maxes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1\n]\n\n\
    should loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n    at test (/tmp/tmpq8pr_sb5.js:22:12)\n\
    \    at Object.<anonymous> (/tmp/tmpq8pr_sb5.js:25:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1 ],\n \
    \ expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660003959
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let result = [];\n    let len = numbers.length;\n\
    \    let rolling_max: number[] = [];\n    for (let i = 0; i < len; i++) {\n  \
    \      let curr_max = numbers[i];\n        let max_element = numbers[i];\n   \
    \     for (let j = i; j < len; j++) {\n            if (numbers[j] > curr_max)\
    \ {\n                curr_max = numbers[j];\n                max_element = numbers[j];\n\
    \            }\n        }\n        rolling_max.push(max_element);\n    }\n   \
    \ return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmpzjmixt5w.js:26:12)\n\
    \    at Object.<anonymous> (/tmp/tmpzjmixt5w.js:30:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660003960
- exit_code: 2
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n  let current_max: number | null = null;\n  const rolling_maxes:\
    \ number[] = [];\n  numbers.forEach((item: number) => {\n    const current_max\
    \ = Math.max(item, current_max);\n    if (current_max != null) {\n      rolling_maxes.push(current_max);\n\
    \    }\n  });\n  return rolling_maxes;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp3dsla1zv.ts(9,40): error TS2448: Block-scoped variable
    ''current_max'' used before its declaration.

    '
  timestamp: 1660003959
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n  let max: number[] = [];\n\n  for (let i = 0; i < numbers.length;\
    \ i++) {\n    if (numbers[i] > max[max.length - 1]) {\n      max.push(numbers[i]);\n\
    \    }\n  }\n\n  return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmp1x8_o383.js:18:12)\n\
    \    at Object.<anonymous> (/tmp/tmp1x8_o383.js:22:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660003959
- exit_code: 2
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n  const max = Math.max(...numbers);\n  let rolling_max\
    \ = [max];\n  for (let i = 0; i < numbers.length; i++) {\n    let element = numbers[i];\n\
    \    while (element > max) {\n      rolling_max = rolling_max.concat(rolling_max);\n\
    \      rolling_max[rolling_max.length - 1] = element;\n      max = rolling_max[rolling_max.length\
    \ - 1];\n      rolling_max = rolling_max.concat(rolling_max);\n      rolling_max[rolling_max.length\
    \ - 1] = element;\n    }\n    rolling_max.push(element);\n  }\n  return rolling_max;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpwiqtjwx2.ts(13,7): error TS2588: Cannot assign to
    ''max'' because it is a constant.

    '
  timestamp: 1660003960
- exit_code: 2
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n\treturn numbers.reduce((acc, number) => Math.max(acc,\
    \ number), -Infinity);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp70wzvj1k.ts(6,2): error TS2322: Type ''number'' is
    not assignable to type ''number[]''.

    '
  timestamp: 1660003959
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n  const result = [];\n  let maxNumber: number|undefined;\n\
    \  let currentNumber: number|undefined;\n\n  for (const number of numbers) {\n\
    \    if (!maxNumber || number > maxNumber) {\n      maxNumber = number;\n    }\n\
    \  }\n\n  for (const number of numbers) {\n    if (!currentNumber || number >\
    \ currentNumber) {\n      currentNumber = number;\n    }\n    if (currentNumber\
    \ === maxNumber) {\n      result.push(maxNumber);\n      maxNumber = undefined;\n\
    \      currentNumber = undefined;\n    }\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n \
    \ assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmp_62za9ib.js:32:12)\n\
    \    at Object.<anonymous> (/tmp/tmp_62za9ib.js:36:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4 ],\n \
    \ expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660003960
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n  const result = new Array<number>();\n  const len =\
    \ numbers.length;\n  let cur_max = 0;\n  let cur = numbers[0];\n  for (let i =\
    \ 1; i < len; i++) {\n    cur = numbers[i];\n    if (cur > cur_max) {\n      cur_max\
    \ = cur;\n    }\n    result.push(cur_max);\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n \
    \ assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  3,\n\
    \  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test\
    \ (/tmp/tmpohhdj6xs.js:23:12)\n    at Object.<anonymous> (/tmp/tmpohhdj6xs.js:27:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 3, 4\
    \ ],\n  expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660003960
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max_val: number[] = [];\n    let cur: number\
    \ = 0;\n    for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i]\
    \ > cur) {\n            max_val.push(cur);\n            cur = numbers[i];\n  \
    \      } else {\n            max_val.push(cur);\n            cur = numbers[i];\n\
    \            max_val.push(numbers[i]);\n        }\n    }\n    return max_val;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  2,\n  3\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n  \
    \  at test (/tmp/tmpgc4qw2x6.js:25:12)\n    at Object.<anonymous> (/tmp/tmpgc4qw2x6.js:29:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 2,\
    \ 3 ],\n  expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660003960
- exit_code: -1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    numbers.reverse();\n\n    let current_max = numbers[0];\n\
    \    let current_index = -1;\n    let index = 0;\n\n    while (true) {\n     \
    \   current_max = Math.max(numbers[index], current_max);\n        index++;\n \
    \       if (current_max === numbers[0]) break;\n    }\n\n    numbers.reverse();\n\
    \    return numbers.slice(0, current_index + 1);\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660003976
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n  let max: number = 0;\n  for (let i = 0; i < numbers.length;\
    \ i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n \
    \ for (let i = 0; i < numbers.length; i++) {\n    numbers[i] = numbers[i] - max;\n\
    \  }\n  return numbers;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -3,\n  -2,\n\
    \  -1,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n \
    \   at test (/tmp/tmp88mnnveh.js:21:12)\n    at Object.<anonymous> (/tmp/tmp88mnnveh.js:25:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -3, -2,\
    \ -1, 0 ],\n  expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660003962
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n  const n = numbers.length;\n  const max_number: number[]\
    \ = new Array(n);\n  const min_number: number[] = new Array(n);\n  let max_index:\
    \ number;\n  let min_index: number;\n\n  for (let i = 0; i < n; i++) {\n    if\
    \ (numbers[i] > numbers[max_index]) {\n      max_index = i;\n    }\n    if (numbers[i]\
    \ < numbers[min_index]) {\n      min_index = i;\n    }\n  }\n\n  max_number[max_index]\
    \ = numbers[max_index];\n  min_number[min_index] = numbers[min_index];\n  let\
    \ temp_max_number: number[] = new Array(max_index);\n  let temp_min_number: number[]\
    \ = new Array(min_index);\n  let temp_max_index: number;\n  let temp_min_index:\
    \ number;\n\n  for (let i = 0; i < max_index; i++) {\n    temp_max_number[i] =\
    \ max_number[i];\n  }\n  for (let i = min_index; i < n; i++) {\n    temp_min_number[i]\
    \ = min_number[i];\n  }\n  temp_max_index = max_index;\n  temp_min_index = min_index;\n\
    \  for (let i = max_index + 1; i < n; i++) {\n    if (numbers[i] < numbers[temp_min_index])\
    \ {\n      temp_min_index = i;\n    }\n    if (numbers[i] > numbers[temp_max_index])\
    \ {\n      temp_max_index = i;\n    }\n  }\n  temp_max_number[temp_max_index]\
    \ = numbers[temp_max_index];\n  temp_min_number[temp_min_index] = numbers[temp_min_index];\n\
    \n  for (let i = temp_min_index + 1; i < temp_max_index; i++) {\n    max_number[i]\
    \ = temp_min_number[i];\n  }\n  for (let i = 0; i < temp_min_index; i++) {\n \
    \   min_number[i] = temp_max_number[i];\n  }\n  return max_number;\n}\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n \
    \ assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined:\
    \ undefined\n]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpjl9kqugi.js:54:12)\n\
    \    at Object.<anonymous> (/tmp/tmpjl9kqugi.js:59:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined:\
    \ undefined ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660003962
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n  if (numbers.length === 0) {\n    return [];\n  }\n\n\
    \  let max: number;\n  const result: number[] = [];\n\n  for (let i = 0; i < numbers.length;\
    \ i++) {\n    if (!max || numbers[i] > max) {\n      max = numbers[i];\n     \
    \ result.push(max);\n    }\n  }\n\n  return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4\n]\n\n\
    should loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n    at test (/tmp/tmpam7tcpmu.js:24:12)\n\
    \    at Object.<anonymous> (/tmp/tmpam7tcpmu.js:27:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4 ],\n \
    \ expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660003962
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n  const max_result = [];\n  const last_rolling_maxes\
    \ = [];\n  let current_rolling_maxes = [];\n  let last_rolling_max = 0;\n  let\
    \ last_rolling_max_index = 0;\n  numbers.forEach((number, index) => {\n    if\
    \ (index === 0) {\n      max_result.push(number);\n      current_rolling_maxes.push(number);\n\
    \      last_rolling_max = 0;\n      last_rolling_max_index = index;\n      return;\n\
    \    }\n    const is_current_rolling_max = (number > last_rolling_max);\n    if\
    \ (is_current_rolling_max) {\n      last_rolling_maxes.push(number);\n      current_rolling_maxes.push(number);\n\
    \    } else {\n      if (last_rolling_maxes.length > 0) {\n        last_rolling_max\
    \ = Math.max(last_rolling_max, last_rolling_maxes.pop());\n        last_rolling_max_index\
    \ = index;\n      }\n      max_result.push(number);\n    }\n  });\n  return max_result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmpfkhj7mqg.js:38:12)\n\
    \    at Object.<anonymous> (/tmp/tmpfkhj7mqg.js:42:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1 ],\n \
    \ expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660003962
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n  let min: number = Math.min.apply(Math, numbers);\n\
    \  let max_idx = numbers.indexOf(min);\n  let max: number = 0;\n  for(let i =\
    \ max_idx; i > 0; i--){\n    max = Math.max(max, numbers[i]);\n  }\n  return [min].concat(numbers.slice().slice(max_idx));\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  Infinity\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpkn9d_mht.js:17:12)\n\
    \    at Object.<anonymous> (/tmp/tmpkn9d_mht.js:22:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ Infinity\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660003962
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n  const result = [];\n  let rollingMax = numbers[0];\n\
    \  for (let i = 1; i < numbers.length; i++) {\n    const num = numbers[i];\n \
    \   rollingMax = Math.max(num, rollingMax);\n    result.push(rollingMax);\n  }\n\
    \  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  3,\n\
    \  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test\
    \ (/tmp/tmprkuh231z.js:19:12)\n    at Object.<anonymous> (/tmp/tmprkuh231z.js:23:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 3, 4\
    \ ],\n  expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660003962
- exit_code: 2
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n\tvar result = [];\n\trolling_max_helper_0(numbers, 0,\
    \ result);\n\treturn result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpucekqqj4.ts(7,2): error TS2304: Cannot find name
    ''rolling_max_helper_0''.

    '
  timestamp: 1660003962
- exit_code: 2
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    const max = numbers[0];\n    const max_index = -1;\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        if (numbers[i] > max)\
    \ {\n            max = numbers[i];\n            max_index = i;\n        }\n  \
    \  }\n\n    const rolling = [max];\n    for (let i = max_index + 2; i < numbers.length;\
    \ i++) {\n        rolling.push(numbers[i]);\n    }\n\n    return rolling;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp7fvc20xm.ts(10,13): error TS2588: Cannot assign to
    ''max'' because it is a constant.

    ../../../../../tmp/tmp7fvc20xm.ts(11,13): error TS2588: Cannot assign to ''max_index''
    because it is a constant.

    '
  timestamp: 1660003962
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n  let maxVal = numbers[0];\n  let idx = 1;\n  for (let\
    \ i = numbers.length - 1; i >= 0; i--) {\n    if (numbers[i] > maxVal) {\n   \
    \   maxVal = numbers[i];\n      idx = i;\n    }\n  }\n  const rest = numbers.slice(idx\
    \ + 1);\n  return [maxVal].concat(rest);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpl_f70z_s.js:20:12)\n\
    \    at Object.<anonymous> (/tmp/tmpl_f70z_s.js:25:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660003962
- exit_code: 2
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n\tlet rolling_max = Array(numbers.length).fill(0);\n\t\
    let max_pos = 0;\n\tfor (let i = 0; i < numbers.length; i++) {\n\t\tif (max_pos\
    \ < i) {\n\t\t\trolling_max[i] = Math.max(rolling_max[max_pos], numbers[i]);\n\
    \t\t} else {\n\t\t\trolling_max[i] = Math.max(numbers[i], rolling_max[max_pos]);\n\
    \t\t}\n\t\tmax_pos = i - 1;\n\t}\n\treturn rolling_max;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp6rdqigb9.ts(6,42): error TS2339: Property ''fill''
    does not exist on type ''any[]''.

    '
  timestamp: 1660003961
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n  let max: number[] = []\n  let maxIndex: number = 0\n\
    \  for (let i = 0; i < numbers.length; ++i) {\n    if (numbers[i] > max[maxIndex])\
    \ {\n      maxIndex = i\n      max = numbers.slice(0, maxIndex + 1)\n    }\n \
    \ }\n  return max\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmpcfhmf5ce.js:20:12)\n\
    \    at Object.<anonymous> (/tmp/tmpcfhmf5ce.js:24:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660003962
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    const result: number[] = [];\n    const max = numbers.reduce(function(a:\
    \ number, b: number) {\n        return a > b ? a : b;\n    });\n    numbers.forEach(function(number)\
    \ {\n        if (number > max) {\n            result.push(number);\n        }\n\
    \    });\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmprf4pwbva.js:7\n    var max = numbers.reduce(function (a, b) {\n\
    \                      ^\n\nTypeError: Reduce of empty array with no initial value\n\
    \    at Array.reduce (<anonymous>)\n    at rolling_max (/tmp/tmprf4pwbva.js:7:23)\n\
    \    at test (/tmp/tmprf4pwbva.js:20:22)\n    at Object.<anonymous> (/tmp/tmprf4pwbva.js:25:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660003962
- exit_code: 2
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    const result: number[] = [];\n    const n = numbers.length;\n\
    \    let max = 0;\n    let prev = 0;\n    const sum = 0;\n    let i = n - 1;\n\
    \    while (i > 0) {\n        max = Math.max(max, numbers[i - 1]);\n        sum\
    \ += max - numbers[i];\n        result[i - 1] = (prev = Math.max(prev, sum));\n\
    \        --i;\n    }\n    max = Math.max(max, numbers[i]);\n    result[i] = (prev\
    \ = Math.max(prev, sum));\n    return result;\n}\nexports.rolling_max = rolling_max;\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpfx_h0qf3.ts(14,9): error TS2588: Cannot assign to
    ''sum'' because it is a constant.

    ../../../../../tmp/tmpfx_h0qf3.ts(22,1): error TS2304: Cannot find name ''exports''.

    '
  timestamp: 1660003962
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n\tvar result: number[] = [];\n\tvar current = numbers[0];\n\
    \tnumbers.forEach(function (number: number) {\n\t\tif (current > number) {\n\t\
    \t\tresult.push(number);\n\t\t\tcurrent = number;\n\t\t}\n\t});\n\treturn result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmpf0i2mldh.js:20:12)\n\
    \    at Object.<anonymous> (/tmp/tmpf0i2mldh.js:24:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660003962
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n\tlet max: number|null = null;\n\tlet rolling_max: number[]\
    \ = [];\n\tnumbers.forEach(number => {\n\t\trolling_max.push(number);\n\t\tif\
    \ (max === null || rolling_max[rolling_max.length - 1] < max) {\n\t\t\tmax = rolling_max[rolling_max.length\
    \ - 1];\n\t\t}\n\t});\n\treturn rolling_max;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n  \
    \  at test (/tmp/tmppes2in89.js:21:12)\n    at Object.<anonymous> (/tmp/tmppes2in89.js:24:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2,\
    \ 1 ],\n  expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660003962
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    var max_el = numbers[0];\n\n    for (var i = 1; i\
    \ < numbers.length; i++) {\n        if (max_el < numbers[i]) {\n            max_el\
    \ = numbers[i];\n        }\n    }\n    return [max_el];\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpmmxq37_s.js:17:12)\n\
    \    at Object.<anonymous> (/tmp/tmpmmxq37_s.js:22:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660003962
- exit_code: 2
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let largest = -Number.MAX_VALUE;\n    for (let i\
    \ = 0; i < numbers.length; i++) {\n        if (numbers[i] >= largest) {\n    \
    \        largest = numbers[i];\n        }\n    }\n    return [...Array(numbers.length).keys()].map(i\
    \ => numbers[i]);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpdgfmufn1.ts(12,38): error TS2339: Property ''keys''
    does not exist on type ''any[]''.

    '
  timestamp: 1660003962
- exit_code: 2
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n  return rolling_max(numbers, 0);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp4f_e3rht.ts(6,31): error TS2554: Expected 1 arguments,
    but got 2.

    '
  timestamp: 1660003962
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n  if (numbers.length === 0) {\n    return [];\n  }\n\n\
    \  if (numbers.length === 1) {\n    return numbers;\n  }\n\n  if (numbers.length\
    \ === 2) {\n    return [numbers[0], numbers[1]];\n  }\n\n  const sorted = numbers.sort((a,\
    \ b) => a - b);\n  const result = [];\n  let current: number = null;\n\n  for\
    \ (let i = sorted.length - 1; i >= 0; i--) {\n    current = sorted[i];\n    if\
    \ (current < sorted[i + 1]) {\n      break;\n    }\n    if (i === 0) {\n     \
    \ result.push(current);\n    } else {\n      result.push(sorted[i - 1]);\n   \
    \ }\n  }\n\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmpn84kt2ad.js:36:12)\n\
    \    at Object.<anonymous> (/tmp/tmpn84kt2ad.js:40:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3 ],\n \
    \ expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660003962
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n  const rollingMaxArray = [];\n  let max: number = 0;\n\
    \  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n \
    \     rollingMaxArray[rollingMaxArray.length] = max;\n      max = numbers[i];\n\
    \    } else {\n      rollingMaxArray[rollingMaxArray.length] = numbers[i];\n \
    \   }\n  }\n  if (rollingMaxArray.length) rollingMaxArray[rollingMaxArray.length]\
    \ = max;\n  return rollingMaxArray;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  2,\n  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n\
    ]\n    at test (/tmp/tmp3r0dot6c.js:25:12)\n    at Object.<anonymous> (/tmp/tmp3r0dot6c.js:29:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 2,\
    \ 3, 4 ],\n  expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660003963
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n\treturn numbers.reduce((acc, val) => {\n\t\tif (val\
    \ > acc[0]) {\n\t\t\tacc[0] = val;\n\t\t}\n\t\tif (val > acc[1]) {\n\t\t\tacc[1]\
    \ = val;\n\t\t}\n\t\treturn acc;\n\t}, [-Number.MAX_VALUE, Number.MAX_VALUE]);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -1.7976931348623157e+308,\n\
    \  1.7976931348623157e+308\n]\n\nshould loosely deep-equal\n\n[]\n    at test\
    \ (/tmp/tmp86g3mwzu.js:19:12)\n    at Object.<anonymous> (/tmp/tmp86g3mwzu.js:24:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -1.7976931348623157e+308,\
    \ 1.7976931348623157e+308 ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\n\
    Node.js v18.7.0\n"
  stdout: ''
  timestamp: 1660003964
- exit_code: 2
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n  return numbers.reduce(function (a, b) {\n    return\
    \ a > b ? a : b;\n  });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp_ytkcv8m.ts(6,3): error TS2322: Type ''number'' is
    not assignable to type ''number[]''.

    '
  timestamp: 1660003964
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let arr = [];\n    for(let i = numbers.length - 1;\
    \ i > 0; i--){\n        let number = numbers[i];\n        for(let j = 0; j < i;\
    \ j++){\n            let sum = arr[j] + number;\n            while(sum > arr[j]){\n\
    \                arr[j] += number;\n            }\n        }\n    }\n    return\
    \ arr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmpp9wwg22f.js:22:12)\n\
    \    at Object.<anonymous> (/tmp/tmpp9wwg22f.js:26:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660003964
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n\tif (numbers.length < 2) return [numbers[0]];\n\tlet\
    \ maximum = numbers[0];\n\tfor (let i = 1; i < numbers.length; i++) {\n\t\tmaximum\
    \ = Math.max(numbers[i], maximum);\n\t}\n\treturn [maximum];\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpa0oyq9vq.js:17:12)\n\
    \    at Object.<anonymous> (/tmp/tmpa0oyq9vq.js:22:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660003964
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n\tvar result: number[] = [];\n\n\tnumbers.forEach(number\
    \ => {\n\t\tif (result.length === 0) {\n\t\t\tresult.push(number);\n\t\t} else\
    \ if (number >= result[result.length - 1]) {\n\t\t\tresult.push(number);\n\t\t\
    }\n\t});\n\n\treturn result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4\n]\n\n\
    should loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n    at test (/tmp/tmp8wvcbei0.js:22:12)\n\
    \    at Object.<anonymous> (/tmp/tmp8wvcbei0.js:25:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4 ],\n \
    \ expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660003964
- exit_code: 2
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let result = [];\n    numbers.forEach(function(value,\
    \ index) {\n        if (index === 0) {\n            result.push(value);\n    \
    \    } else {\n            const result = Math.max(result, value);\n         \
    \   result.push(value);\n        }\n    });\n    return result;\n}\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpsvikhcmf.ts(11,37): error TS2448: Block-scoped variable
    ''result'' used before its declaration.

    ../../../../../tmp/tmpsvikhcmf.ts(12,20): error TS2339: Property ''push'' does
    not exist on type ''number''.

    '
  timestamp: 1660003964
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n  let max: number[] = [];\n  let max_n: number[] = [];\n\
    \  for (let n of numbers) {\n    if (max_n.length === 0) {\n      max_n = [n];\n\
    \    } else {\n      if (n > max_n[max_n.length - 1]) {\n        max_n[max_n.length\
    \ - 1] = n\n      }\n    }\n  }\n  for (let n of max_n) {\n    max = max.concat(n);\n\
    \  }\n  return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmp1z5o1wr4.js:29:12)\n\
    \    at Object.<anonymous> (/tmp/tmp1z5o1wr4.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4 ],\n \
    \ expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660003964
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n\tif (numbers.length === 0) {\n\t\treturn numbers;\n\t\
    }\n\tlet index = numbers.length - 1;\n\tlet max = numbers[index];\n\twhile (index\
    \ >= 0) {\n\t\tindex--;\n\t\tif (numbers[index] > max) {\n\t\t\tmax = numbers[index];\n\
    \t\t}\n\t}\n\treturn numbers;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n  \
    \  at test (/tmp/tmp3678mmff.js:24:12)\n    at Object.<anonymous> (/tmp/tmp3678mmff.js:27:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2,\
    \ 1 ],\n  expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660003964
- exit_code: 2
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    return numbers.map(function (number) { return Math.max(...number);\
    \ });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpoqfs8dag.ts(6,63): error TS2461: Type ''number''
    is not an array type.

    '
  timestamp: 1660003964
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n  let rolling_max_array: number[] = [];\n  let rolling_max_array_index\
    \ = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > rolling_max_array[rolling_max_array_index])\
    \ {\n      rolling_max_array[rolling_max_array_index] = numbers[i];\n    }\n \
    \ }\n  rolling_max_array_index++;\n  while (rolling_max_array_index < rolling_max_array.length)\
    \ {\n    rolling_max_array.pop();\n    rolling_max_array_index--;\n  }\n  return\
    \ rolling_max_array;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmpwmuigdl2.js:24:12)\n\
    \    at Object.<anonymous> (/tmp/tmpwmuigdl2.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660003964
- exit_code: 2
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n  let result = new Array<number>(numbers.length);\n \
    \ for (let i = 0; i < numbers.length; ++i) {\n    let current = numbers[i];\n\
    \    while (numbers.indexOf(current) < i) {\n      result.push(current);\n   \
    \   current = Math.max(numbers[numbers.indexOf(current) + 1], current);\n    }\n\
    \  }\n  return result;\n}\nexport function rolling_max(array: number[]): number[]\
    \ {\n  return rolling_max(array, -1);\n}\nexport function rolling_max(array: number[],\
    \ start: number): number[] {\n  return rolling_max(array, start, -1);\n}\nexport\
    \ function rolling_max(array: number[], start: number, end: number): number[]\
    \ {\n  let result = [];\n  for (let i = 0; i < array.length; i++) {\n    if (i\
    \ < start || i > end) {\n      result.push(array[i]);\n    } else {\n      let\
    \ current = array[i];\n      let j = 0;\n      while (i + j < array.length &&\
    \ i + j <= end) {\n        if (array[i + j] > current) {\n          current =\
    \ array[i + j];\n          j++;\n        } else {\n          j = 0;\n        }\n\
    \      }\n      result.push(current);\n    }\n  }\n  return result;\n}\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n \
    \ assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpeglidslp.ts(5,10): error TS2393: Duplicate function
    implementation.

    ../../../../../tmp/tmpeglidslp.ts(16,17): error TS2323: Cannot redeclare exported
    variable ''rolling_max''.

    ../../../../../tmp/tmpeglidslp.ts(16,17): error TS2393: Duplicate function implementation.

    ../../../../../tmp/tmpeglidslp.ts(17,29): error TS2554: Expected 1 arguments,
    but got 2.

    ../../../../../tmp/tmpeglidslp.ts(19,17): error TS2323: Cannot redeclare exported
    variable ''rolling_max''.

    ../../../../../tmp/tmpeglidslp.ts(19,17): error TS2393: Duplicate function implementation.

    ../../../../../tmp/tmpeglidslp.ts(20,29): error TS2554: Expected 1 arguments,
    but got 3.

    ../../../../../tmp/tmpeglidslp.ts(22,17): error TS2323: Cannot redeclare exported
    variable ''rolling_max''.

    ../../../../../tmp/tmpeglidslp.ts(22,17): error TS2393: Duplicate function implementation.

    '
  timestamp: 1660003964
- exit_code: 2
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    return numbers.reduce((prev: number[], item: number)\
    \ => Math.max(item, prev), []);\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpdj9tg0y9.ts(6,76): error TS2345: Argument of type
    ''number[]'' is not assignable to parameter of type ''number''.

    '
  timestamp: 1660003964
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n\tlet result: number[] = [];\n\tnumbers.map((value, index)\
    \ => {\n\t\tresult.push(value);\n\t\tif (index < numbers.length - 1) {\n\t\t\t\
    result.push(Math.max(value, numbers[index + 1]));\n\t\t}\n\t});\n\treturn result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  2,\n  3,\n  3,\n  4,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n    at test (/tmp/tmp8x8ljrxx.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp8x8ljrxx.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    1,\
    \ 2, 2, 3,\n    3, 4, 4\n  ],\n  expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660003964
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n  const results: number[] = [];\n  for (let i = 0, length\
    \ = numbers.length; i < length; i++) {\n    results.push(Math.max(...numbers));\n\
    \  }\n  return results;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  4,\n\
    \  4,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n  \
    \  at test (/tmp/tmpsa7nxe9h.js:16:12)\n    at Object.<anonymous> (/tmp/tmpsa7nxe9h.js:20:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 4, 4,\
    \ 4 ],\n  expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660003964
- exit_code: 0
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    var result: number[] = [];\n    \n    for (var i\
    \ = 0; i < numbers.length; i++) {\n        var max = numbers[i];\n        for\
    \ (var j = 0; j < i; j++) {\n            if (numbers[j] > max)\n             \
    \   max = numbers[j];\n        }\n        result.push(max);\n    }\n    \n   \
    \ return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660003964
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n\treturn numbers.map(function (number, index) {\n\t\t\
    return Math.max(number, numbers[index]);\n\t});\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n  \
    \  at test (/tmp/tmpxm_qpkh9.js:15:12)\n    at Object.<anonymous> (/tmp/tmpxm_qpkh9.js:18:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2,\
    \ 1 ],\n  expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660003965
- exit_code: 2
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n  return numbers.reduce(function (prev, curr) {\n   \
    \ var cur = curr;\n    if (prev > prev + cur) {\n      cur = prev + cur;\n   \
    \ }\n    return cur;\n  });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpz879_0r5.ts(6,3): error TS2322: Type ''number'' is
    not assignable to type ''number[]''.

    '
  timestamp: 1660003964
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n\tlet max: number = 0;\n\tlet index: number;\n\tfor (let\
    \ i = 0; i < numbers.length; i++) {\n\t\tmax = Math.max(max, numbers[i]);\n\t\t\
    index = i;\n\t}\n\tlet result = [];\n\tfor (let i = index; i < numbers.length;\
    \ i++) {\n\t\tresult.push(numbers[i]);\n\t}\n\treturn result;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmp0rcz4l4y.js:22:12)\n\
    \    at Object.<anonymous> (/tmp/tmp0rcz4l4y.js:26:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4 ],\n \
    \ expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660003965
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max: number;\n    let maxIndex: number = 0;\n\
    \    for (let i = 1; i <= numbers.length; i++) {\n        if (numbers[maxIndex]\
    \ < numbers[i - 1]) {\n            max = numbers[maxIndex];\n            maxIndex\
    \ = i;\n        }\n    }\n    return [maxIndex, max];\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmp1i0mn5q_.js:19:12)\n\
    \    at Object.<anonymous> (/tmp/tmp1i0mn5q_.js:24:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660003965
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n\tlet result: number[] = [];\n\tlet max: number = 0;\n\
    \tlet index = 0;\n\twhile (index < numbers.length) {\n\t\tmax = numbers[index];\n\
    \t\tindex++;\n\t\twhile (index < numbers.length && max < numbers[index]) {\n\t\
    \t\tmax = Math.max(max, numbers[index]);\n\t\t\tindex++;\n\t\t}\n\t\tresult.push(max);\n\
    \t}\n\treturn result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmprmj11mca.js:24:12)\n\
    \    at Object.<anonymous> (/tmp/tmprmj11mca.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4 ],\n \
    \ expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660003965
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    const max = numbers.reduce(\n        function (prev,\
    \ curr, i) {\n            if (curr > prev) return curr;\n            return prev;\n\
    \        }\n    );\n    const rollingMax = numbers.map(\n        function (curr,\
    \ i) {\n            return curr > max ? curr : max;\n        }\n    );\n    return\
    \ rollingMax;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp62owsntk.js:6\n    var max = numbers.reduce(function (prev, curr,\
    \ i) {\n                      ^\n\nTypeError: Reduce of empty array with no initial\
    \ value\n    at Array.reduce (<anonymous>)\n    at rolling_max (/tmp/tmp62owsntk.js:6:23)\n\
    \    at test (/tmp/tmp62owsntk.js:19:22)\n    at Object.<anonymous> (/tmp/tmp62owsntk.js:24:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660003966
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n  const rollingMaxArray = [];\n  let maxIndex = -1;\n\
    \  let max = numbers[0];\n\n  for (let i = 0; i < numbers.length; i++) {\n   \
    \ if (numbers[i] > max) {\n      maxIndex = i;\n      max = numbers[i];\n    }\n\
    \  }\n\n  for (let i = maxIndex; i < numbers.length; i++) {\n    rollingMaxArray.push(numbers[i]);\n\
    \  }\n\n  return rollingMaxArray;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpeyg0xtb6.js:23:12)\n\
    \    at Object.<anonymous> (/tmp/tmpeyg0xtb6.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660003966
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let rolling: number[] = [];\n\n    for (let i = 0;\
    \ i < numbers.length; i++) {\n        let roll_max: number[] = [];\n        let\
    \ rolling_max: number[] = [];\n        for (let j = i; j < numbers.length; j++)\
    \ {\n            if (numbers[j] > rolling_max[j]) {\n                roll_max[j]\
    \ = numbers[j];\n            }\n            rolling_max[j] = rolling_max[j - 1]\
    \ + roll_max[j];\n        }\n        rolling.push(rolling_max[rolling_max.length\
    \ - 1]);\n    }\n    return rolling;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  NaN,\n  NaN,\n\
    \  NaN,\n  NaN\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n\
    \    at test (/tmp/tmpkkxxozqq.js:24:12)\n    at Object.<anonymous> (/tmp/tmpkkxxozqq.js:28:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ NaN, NaN,\
    \ NaN, NaN ],\n  expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660003967
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    const result: number[] = [];\n    for (let index\
    \ = 0; index < numbers.length; index++) {\n        let max_index = 0;\n      \
    \  for (let i = index; i < numbers.length; i++) {\n            if (numbers[i]\
    \ < numbers[max_index]) {\n                max_index = i;\n            }\n   \
    \     }\n        result.push(numbers[max_index]);\n    }\n    return result;\n\
    }\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1,\n\
    \  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n  \
    \  at test (/tmp/tmpmndp7f3x.js:22:12)\n    at Object.<anonymous> (/tmp/tmpmndp7f3x.js:26:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1, 1,\
    \ 1 ],\n  expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660003967
- exit_code: 2
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n  let rolling_max = numbers[0];\n  numbers.forEach(item\
    \ => {\n    rolling_max = item > rolling_max ? item : rolling_max;\n  });\n  return\
    \ rolling_max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp6j_cyn1m.ts(10,3): error TS2322: Type ''number''
    is not assignable to type ''number[]''.

    '
  timestamp: 1660003966
- exit_code: 2
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    const len = numbers.length;\n    const max = numbers[0];\n\
    \    let sum: number = 0;\n\n    for (let i = 1; i < len; i++) {\n        sum\
    \ += numbers[i];\n        if (sum > max) {\n            max = sum;\n        }\n\
    \    }\n\n    return [max];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpc6s0ebrr.ts(13,13): error TS2588: Cannot assign to
    ''max'' because it is a constant.

    '
  timestamp: 1660003966
- exit_code: 2
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n  var res = [];\n  var i;\n  var currentMax = Number.MIN_SAFE_INTEGER;\n\
    \  for (i = 0; i < numbers.length; i++) {\n    if (numbers[i] > currentMax) {\n\
    \      res.push(numbers[i]);\n      currentMax = numbers[i];\n    }\n  }\n  return\
    \ res;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp97t7w6hm.ts(8,27): error TS2339: Property ''MIN_SAFE_INTEGER''
    does not exist on type ''NumberConstructor''.

    '
  timestamp: 1660003966
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max = numbers[0] as number;\n    for (let i =\
    \ 1; i < numbers.length; i++) {\n        let current = numbers[i];\n        if\
    \ (current > max) {\n            max = current;\n        }\n    }\n    return\
    \ [max];\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmph3p92cdp.js:18:12)\n\
    \    at Object.<anonymous> (/tmp/tmph3p92cdp.js:23:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660003967
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n  const res = []\n\n  for (let i = 0; i < numbers.length;\
    \ ++i) {\n    const value = numbers[i]\n    const max = numbers[i - 1]\n    if\
    \ (max == value || (i > 0 && max > value)) {\n      continue\n    }\n    res.push(max)\n\
    \  }\n\n  return res\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined,\n\
    \  1,\n  2,\n  3\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n\
    ]\n    at test (/tmp/tmpo4n_46rb.js:21:12)\n    at Object.<anonymous> (/tmp/tmpo4n_46rb.js:25:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined,\
    \ 1, 2, 3 ],\n  expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660003967
- exit_code: 2
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    if (numbers.length < 2) {\n        return numbers;\n\
    \    }\n\n    const last_max = numbers[numbers.length - 1];\n    const last_max_index\
    \ = numbers.lastIndexOf(last_max);\n    if (last_max_index === -1) {\n       \
    \ return numbers;\n    }\n\n    const last_max_value = last_max;\n    const rolling_max\
    \ = Array(last_max_index + 1).fill(0);\n    const rolling_max_start = last_max_index\
    \ + 1;\n\n    let index = 0;\n    while (index <= numbers.length - 1) {\n    \
    \    if (numbers[index] > last_max_value) {\n            rolling_max[rolling_max_start]\
    \ = numbers[index];\n            rolling_max_start++;\n        } else {\n    \
    \        break;\n        }\n        index++;\n    }\n\n    return rolling_max.slice(rolling_max_start);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpxay8l7bv.ts(17,51): error TS2339: Property ''fill''
    does not exist on type ''any[]''.

    ../../../../../tmp/tmpxay8l7bv.ts(24,13): error TS2588: Cannot assign to ''rolling_max_start''
    because it is a constant.

    '
  timestamp: 1660003967
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    var max = Math.max(...numbers);\n    return numbers.filter(n\
    \ => n <= max);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n  \
    \  at test (/tmp/tmptjq3soek.js:14:12)\n    at Object.<anonymous> (/tmp/tmptjq3soek.js:17:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2,\
    \ 1 ],\n  expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660003967
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n  const max_value = Math.max.apply(Math, numbers);\n\
    \  let new_numbers = numbers.filter(n => n > max_value);\n  return rolling_max(new_numbers);\n\
    }\nconst rolling_max_2 = rolling_max;\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: Exception
  stderr: "/tmp/tmpaqfgi9wq.js:7\n    var new_numbers = numbers.filter(function (n)\
    \ { return n > max_value; });\n                              ^\n\nRangeError:\
    \ Maximum call stack size exceeded\n    at Array.filter (<anonymous>)\n    at\
    \ rolling_max (/tmp/tmpaqfgi9wq.js:7:31)\n    at rolling_max (/tmp/tmpaqfgi9wq.js:8:12)\n\
    \    at rolling_max (/tmp/tmpaqfgi9wq.js:8:12)\n    at rolling_max (/tmp/tmpaqfgi9wq.js:8:12)\n\
    \    at rolling_max (/tmp/tmpaqfgi9wq.js:8:12)\n    at rolling_max (/tmp/tmpaqfgi9wq.js:8:12)\n\
    \    at rolling_max (/tmp/tmpaqfgi9wq.js:8:12)\n    at rolling_max (/tmp/tmpaqfgi9wq.js:8:12)\n\
    \    at rolling_max (/tmp/tmpaqfgi9wq.js:8:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660003967
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n\tconst n = numbers.length;\n\tif (!n) return [];\n\t\
    let ret = new Array(n);\n\tret[0] = numbers[0];\n\tfor (let i = 1; i < n; ++i)\
    \ {\n\t\tlet value = numbers[i];\n\t\tlet maxValue = value;\n\t\tfor (let j =\
    \ i + 1; j < n; ++j) {\n\t\t\tif (numbers[j] > value) {\n\t\t\t\tvalue = numbers[j];\n\
    \t\t\t\tmaxValue = value;\n\t\t\t}\n\t\t}\n\t\tret[i] = maxValue;\n\t}\n\treturn\
    \ ret;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  4,\n\
    \  4,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n  \
    \  at test (/tmp/tmpc0xxm4hy.js:28:12)\n    at Object.<anonymous> (/tmp/tmpc0xxm4hy.js:32:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 4, 4,\
    \ 4 ],\n  expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660003967
- exit_code: 2
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n  if (numbers.length === 0) {\n    throw new Error(\"\
    Expected at least 1 number\");\n  }\n  const rolling_max = numbers[0];\n  for\
    \ (let i = 1; i < numbers.length; i++) {\n    rolling_max = Math.max(numbers[i],\
    \ rolling_max);\n  }\n  return rolling_max;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpvv2zvon0.ts(11,5): error TS2588: Cannot assign to
    ''rolling_max'' because it is a constant.

    ../../../../../tmp/tmpvv2zvon0.ts(13,3): error TS2322: Type ''number'' is not
    assignable to type ''number[]''.

    '
  timestamp: 1660003967
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    const ret = [];\n    for (let i = 0; i < numbers.length;\
    \ ++i) {\n        ret.push(numbers[(i + numbers.length) % numbers.length]);\n\
    \    }\n    return ret;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n  \
    \  at test (/tmp/tmptx4t5pnh.js:17:12)\n    at Object.<anonymous> (/tmp/tmptx4t5pnh.js:20:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2,\
    \ 1 ],\n  expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660003967
- exit_code: -1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    var arr: number[] = [];\n    numbers.forEach(n =>\
    \ {\n        arr.push(n);\n    });\n    while (numbers.length > 0) {\n       \
    \ var max: number = Math.max.apply(null, arr);\n        var index: number = arr.indexOf(max);\n\
    \        if (index == arr.length - 1) {\n            arr.splice(index, 1);\n \
    \       } else {\n            arr.splice(index + 1, 1);\n        }\n    }\n  \
    \  return arr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660003982
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n  const len = numbers.length;\n  if (len === 0) {\n \
    \   return [];\n  }\n\n  return [numbers[0]].concat(\n    numbers.map(\n     \
    \ (number: number) => Math.max(number, numbers[len - 1])\n    )\n  );\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n \
    \ assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  4,\n\
    \  4,\n  4,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n\
    ]\n    at test (/tmp/tmpyrba0gub.js:16:12)\n    at Object.<anonymous> (/tmp/tmpyrba0gub.js:20:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 4, 4,\
    \ 4, 4 ],\n  expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660003967
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    var result: number[] = [];\n    var max_number =\
    \ 0;\n\n    for (var i = 0; i < numbers.length; i++) {\n        if (numbers[i]\
    \ > max_number) {\n            max_number = numbers[i];\n        }\n    }\n\n\
    \    for (var i = numbers.length - 1, n; i >= 0; i--) {\n        n = numbers[i];\n\
    \        if (n <= max_number) {\n            result.unshift(n);\n        }\n \
    \   }\n\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n  \
    \  at test (/tmp/tmp33mzbcze.js:26:12)\n    at Object.<anonymous> (/tmp/tmp33mzbcze.js:29:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2,\
    \ 1 ],\n  expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660003967
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    // Find first index that is smaller than the given\
    \ number\n    let index_min = 0;\n    for (let i = 0; i < numbers.length; i++)\
    \ {\n        if (numbers[i] < numbers[index_min]) {\n            index_min = i;\n\
    \        }\n    }\n    // Move elements after the index found to front of the\
    \ list\n    for (let i = index_min + 1; i < numbers.length; i++) {\n        const\
    \ tmp = numbers[i];\n        numbers[i] = numbers[index_min];\n        numbers[index_min]\
    \ = tmp;\n    }\n    // Return the resulting array\n    return numbers;\n}\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n \
    \ assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  1,\n\
    \  2,\n  3\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n  \
    \  at test (/tmp/tmpwzh272lc.js:26:12)\n    at Object.<anonymous> (/tmp/tmpwzh272lc.js:30:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 1, 2,\
    \ 3 ],\n  expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660003967
- exit_code: -1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n  let rolling_max: number[] = []\n  let rolling_max_index:\
    \ number = 0\n  \n  while (rolling_max_index < numbers.length) {\n    rolling_max_index\
    \ = numbers.indexOf(rolling_max_index, rolling_max_index + 1) + 1\n    rolling_max\
    \ = rolling_max.concat(numbers.slice(rolling_max_index))\n  }\n  \n  return rolling_max\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660003982
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    var result = [];\n    var max = 0;\n    var current;\n\
    \    var i;\n\n    for (i = 0; i < numbers.length; i++) {\n        current = numbers[i];\n\
    \        while (current >= max) {\n            result.push(max);\n           \
    \ max = numbers[i + 1];\n        }\n        max = current;\n    }\n    return\
    \ result.concat(max);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0\n]\n\n\
    should loosely deep-equal\n\n[]\n    at test (/tmp/tmpkyxnvwla.js:23:12)\n   \
    \ at Object.<anonymous> (/tmp/tmpkyxnvwla.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0 ],\n \
    \ expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660003969
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n  const rollingMax: number[] = [];\n  let max: number\
    \ = numbers[0];\n  numbers.forEach(number => {\n    if (number > max) max = number;\n\
    \  });\n  for (let i = numbers.length - 1; i >= 0; i--) {\n    rollingMax.push(Math.max(rollingMax[rollingMax.length\
    \ - 1] || 0, numbers[i]));\n  }\n  return rollingMax;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  4,\n\
    \  4,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n  \
    \  at test (/tmp/tmpicx9tbcl.js:21:12)\n    at Object.<anonymous> (/tmp/tmpicx9tbcl.js:25:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 4, 4,\
    \ 4 ],\n  expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660003969
- exit_code: 2
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    return numbers.reduce((acc, num) => {\n        return\
    \ num > acc ? num : acc;\n    });\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmptvxr8abh.ts(6,5): error TS2322: Type ''number'' is
    not assignable to type ''number[]''.

    '
  timestamp: 1660003969
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n  const result = [];\n  let max_value = numbers[0];\n\
    \  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max_value)\
    \ {\n      max_value = numbers[i];\n    }\n    result.push(max_value);\n  }\n\
    \  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  3,\n\
    \  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test\
    \ (/tmp/tmpd1_i0sh0.js:20:12)\n    at Object.<anonymous> (/tmp/tmpd1_i0sh0.js:24:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 3, 4\
    \ ],\n  expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660003969
- exit_code: 2
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n  const max = Math.max.apply(null, numbers);\n  const\
    \ ret = [];\n  const start = 0;\n  for (let i = numbers.length - 1; i >= 0; i--)\
    \ {\n    if (numbers[i] > max) {\n      ret.push(max);\n      start = i;\n   \
    \ } else {\n      ret.push(numbers[i]);\n    }\n  }\n  return ret.concat(numbers.slice(start));\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp6woj3lmi.ts(12,7): error TS2588: Cannot assign to
    ''start'' because it is a constant.

    '
  timestamp: 1660003969
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n  const result = new Array(numbers.length);\n  const\
    \ max_element = numbers.reduce((max_so_far, element) => {\n    if (element > max_so_far)\
    \ {\n      return element;\n    }\n    return max_so_far;\n  });\n  for (let i\
    \ = 0; i < numbers.length; i++) {\n    result[i] = max_element;\n  }\n  return\
    \ result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmperltwv6k.js:7\n    var max_element = numbers.reduce(function (max_so_far,\
    \ element) {\n                              ^\n\nTypeError: Reduce of empty array\
    \ with no initial value\n    at Array.reduce (<anonymous>)\n    at rolling_max\
    \ (/tmp/tmperltwv6k.js:7:31)\n    at test (/tmp/tmperltwv6k.js:21:22)\n    at\
    \ Object.<anonymous> (/tmp/tmperltwv6k.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660003969
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n  const rolling_max_result: number[] = [];\n  let rolling_max\
    \ = numbers[0];\n\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i]\
    \ >= rolling_max) {\n      rolling_max = numbers[i];\n    } else {\n      rolling_max_result.push(rolling_max);\n\
    \      rolling_max = numbers[i];\n    }\n  }\n  rolling_max_result.push(rolling_max);\n\
    \  return rolling_max_result;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpszkqq_wq.js:23:12)\n\
    \    at Object.<anonymous> (/tmp/tmpszkqq_wq.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660003969
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    var result = [];\n    var currentMax = numbers[0];\n\
    \    for (var i = 1; i < numbers.length; i++) {\n        if (numbers[i] > currentMax)\
    \ {\n            result.push(currentMax);\n            currentMax = numbers[i];\n\
    \        } else {\n            currentMax = numbers[i];\n        }\n    }\n  \
    \  result.push(currentMax);\n    return result;\n}\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmps228hzmo.js:23:12)\n\
    \    at Object.<anonymous> (/tmp/tmps228hzmo.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660003969
- exit_code: 2
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let n = numbers.length;\n    let res = numbers.slice();\n\
    \    let k = n;\n\n    while (k >= 1) {\n        let first = res[k];\n       \
    \ let last = res[k - 1];\n        let firstMax = last > first ? last : first;\n\
    \        let last = res[k - 1];\n        let maxPos = res.lastIndexOf(firstMax);\n\
    \        let maxBefore = maxPos >= k ? res[k - maxPos] : 0;\n        let maxBeforeLast\
    \ = res.lastIndexOf(maxBefore, maxPos - 1);\n        let maxAfter = res.lastIndexOf(last,\
    \ maxPos);\n        let maxAfterLast = maxAfter >= k ? res[k - maxAfter] : last;\n\
    \        if (lastMax === firstMax) {\n            break;\n        }\n        if\
    \ (maxAfter >= k) {\n            res[k] = maxBeforeLast;\n            k += maxAfter\
    \ - k;\n            n -= maxAfter - k;\n        } else {\n            res[k] =\
    \ maxBeforeLast;\n            n -= maxPos - maxAfterLast;\n        }\n    }\n\n\
    \    return res;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpq85h69qn.ts(12,13): error TS2451: Cannot redeclare
    block-scoped variable ''last''.

    ../../../../../tmp/tmpq85h69qn.ts(14,13): error TS2451: Cannot redeclare block-scoped
    variable ''last''.

    ../../../../../tmp/tmpq85h69qn.ts(20,13): error TS2304: Cannot find name ''lastMax''.

    '
  timestamp: 1660003969
- exit_code: 2
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n  const max_val: number[] = new Array(numbers.length);\n\
    \  max_val.fill(Number.NEGATIVE_INFINITY);\n  for (let i = 0; i < numbers.length;\
    \ i++) {\n    max_val[i] = numbers[i]; // default value is negative Infinity\n\
    \  }\n  for (let i = numbers.length - 1; i > 0; i--) {\n    for (let j = 0; j\
    \ < numbers.length; j++) {\n      if (max_val[j] > max_val[j + 1]) {\n       \
    \ max_val[j] = max_val[j + 1];\n      }\n    }\n  }\n  return max_val;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpdbv0oif2.ts(7,11): error TS2339: Property ''fill''
    does not exist on type ''number[]''.

    '
  timestamp: 1660003969
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let rolling_max: number[] = [];\n    let rolling_max_index:\
    \ number[] = [];\n    let rolling_max_element: number = Number.NEGATIVE_INFINITY;\n\
    \n    for (let index = 0; index < numbers.length; index++) {\n        if (numbers[index]\
    \ > rolling_max_element) {\n            rolling_max_element = numbers[index];\n\
    \            rolling_max_index.push(index);\n        }\n    }\n\n    // console.log(rolling_max_element);\n\
    \    for (let index = rolling_max_index.length - 1; index > -1; index--) {\n \
    \       rolling_max.push(rolling_max_element);\n        numbers.splice(rolling_max_index[index],\
    \ 1);\n    }\n\n    return rolling_max;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  4,\n\
    \  4,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n  \
    \  at test (/tmp/tmpps5lukfn.js:26:12)\n    at Object.<anonymous> (/tmp/tmpps5lukfn.js:30:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 4, 4,\
    \ 4 ],\n  expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660003969
- exit_code: 2
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n  const result: number[] = [];\n  let max = Number.MIN_SAFE_INTEGER;\n\
    \  let min = 0;\n\n  numbers.forEach((n) => {\n    if (n > 0) {\n      min = Math.min(min,\
    \ n);\n    } else {\n      max = Math.max(max, n);\n    }\n  });\n\n  for (let\
    \ i = min; i < max; i++) {\n    result.push(i);\n  }\n\n  return result;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpzrzpqz51.ts(7,20): error TS2339: Property ''MIN_SAFE_INTEGER''
    does not exist on type ''NumberConstructor''.

    '
  timestamp: 1660003969
- exit_code: -1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    var max_numbers: number[] = [];\n    var min_numbers:\
    \ number[] = [];\n    for (var i: number = 0; i < numbers.length; i++) {\n   \
    \     min_numbers.push(numbers[i]);\n    }\n\n    for (var i: number = 0; i <\
    \ numbers.length; i++) {\n        max_numbers.push(numbers[i]);\n    }\n\n   \
    \ while (min_numbers.length < numbers.length) {\n        min_numbers.push(max_numbers[max_numbers.length\
    \ - 1]);\n        max_numbers.pop();\n    }\n\n    while (max_numbers.length <\
    \ numbers.length) {\n        max_numbers.push(min_numbers[min_numbers.length -\
    \ 1]);\n        min_numbers.pop();\n    }\n\n    var i: number;\n    var j: number;\n\
    \    var rolling_max: number[];\n    for (i = 0; i < min_numbers.length; i++)\
    \ {\n        rolling_max = max_numbers.concat(min_numbers);\n        j = 0;\n\
    \        while (j < numbers.length) {\n            if (rolling_max[j] > numbers[j])\
    \ {\n                rolling_max[j] = numbers[j];\n            } else {\n    \
    \            break;\n            }\n            j++;\n        }\n        min_numbers\
    \ = rolling_max;\n    }\n    return min_numbers;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660003984
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let arr = [];\n    for (let i = 0; i < numbers.length;\
    \ i += 1) {\n        if (numbers[i] === 0) continue;\n        let max = numbers[i];\n\
    \        let index = i;\n        for (let j = i + 1; j < numbers.length; j +=\
    \ 1) {\n            if (numbers[j] > max) max = numbers[j];\n            index\
    \ = j;\n        }\n        arr.push(max);\n        i = index;\n    }\n    return\
    \ arr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmpuvu_jeoq.js:26:12)\n\
    \    at Object.<anonymous> (/tmp/tmpuvu_jeoq.js:30:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4 ],\n \
    \ expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660003969
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n\tconst windowSize = 3;\n\tconst result = numbers.reduce((results:\
    \ number[], n: number) => {\n\t\tconst window = numbers.slice(Math.max(0, results.length\
    \ - windowSize), results.length);\n\t\tconst max = Math.max(...window);\n\t\t\
    results.push(max);\n\t\treturn results;\n\t}, []);\n\treturn result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n \
    \ assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  -Infinity,\n\
    \  1,\n  2,\n  3\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n\
    ]\n    at test (/tmp/tmp3pteps1j.js:19:12)\n    at Object.<anonymous> (/tmp/tmp3pteps1j.js:23:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ -Infinity,\
    \ 1, 2, 3 ],\n  expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660003969
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    // @ts-ignore\n    return numbers.reduce((a, b) =>\n\
    \        Math.max(a, b),\n    );\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: Exception
  stderr: "/tmp/tmps3hb2_5k.js:7\n    return numbers.reduce(function (a, b) {\n  \
    \                 ^\n\nTypeError: Reduce of empty array with no initial value\n\
    \    at Array.reduce (<anonymous>)\n    at rolling_max (/tmp/tmps3hb2_5k.js:7:20)\n\
    \    at test (/tmp/tmps3hb2_5k.js:14:22)\n    at Object.<anonymous> (/tmp/tmps3hb2_5k.js:19:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660003969
- exit_code: 2
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n  const n = numbers.length;\n  const max_index = 0;\n\
    \  let max_element = numbers[0]\n  for (let i = 1; i < n; i++) {\n    if (numbers[i]\
    \ > max_element) {\n      max_element = numbers[i]\n      max_index = i\n    }\n\
    \  }\n  const res = [max_element]\n  for (let i = 1; i < n; i++) {\n    res.push(numbers[i\
    \ - 1] + numbers[i])\n  }\n  return res\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpbf46viwh.ts(12,7): error TS2588: Cannot assign to
    ''max_index'' because it is a constant.

    '
  timestamp: 1660003970
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n\tlet max = Number.MIN_VALUE;\n\tlet max_index = -1;\n\
    \tfor (let index = 0; index < numbers.length; index++) {\n\t\tif (numbers[index]\
    \ > max) {\n\t\t\tmax = numbers[index];\n\t\t\tmax_index = index;\n\t\t}\n\t}\n\
    \treturn numbers.slice(0, max_index + 1).reverse();\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n  \
    \  at test (/tmp/tmpwla9b8w2.js:20:12)\n    at Object.<anonymous> (/tmp/tmpwla9b8w2.js:24:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2,\
    \ 1 ],\n  expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660003970
- exit_code: 2
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n  // From each element of given array\n  // calculate\
    \ the max number until current moment\n  const max = numbers.reduce((previous:\
    \ number, current: number) => {\n    return Math.max(previous, current);\n  },\
    \ Number.NEGATIVE_INFINITY);\n  const res = [];\n  const now = moment();\n  //\
    \ Loop from each element of given array\n  for (const num of numbers) {\n    if\
    \ (num < max) {\n      res.push(num);\n    }\n    // Update max number\n    max\
    \ = Math.max(max, num);\n  }\n  // Push the remaining elements into res\n  for\
    \ (const num of numbers) {\n    if (num < max) {\n      res.push(num);\n    }\n\
    \  }\n  res.push(max);\n  return res;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp7c99zprw.ts(12,15): error TS2304: Cannot find name
    ''moment''.

    ../../../../../tmp/tmp7c99zprw.ts(19,5): error TS2588: Cannot assign to ''max''
    because it is a constant.

    '
  timestamp: 1660003971
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let rolling_max = [];\n    for(let i = 0; i < numbers.length;\
    \ i++) {\n        rolling_max[i] = rolling_max[i] === undefined ? 0 : rolling_max[i]\n\
    \        if(rolling_max[i] > numbers[i]) {\n            rolling_max[i] = numbers[i];\n\
    \        }\n    }\n    return rolling_max;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n\
    \  0,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n  \
    \  at test (/tmp/tmpyd6nuv4b.js:19:12)\n    at Object.<anonymous> (/tmp/tmpyd6nuv4b.js:23:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 0, 0,\
    \ 0 ],\n  expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660003971
- exit_code: 2
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    var max: number[] = [];\n    numbers.forEach(function\
    \ (number) {\n        number.forEach(function (number) {\n            if (number\
    \ > max[max.length - 1]) {\n                max[max.length - 1] = number;\n  \
    \          }\n        });\n    });\n    return max;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpwv36ea7u.ts(8,16): error TS2339: Property ''forEach''
    does not exist on type ''number''.

    '
  timestamp: 1660003971
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    const result: number[] = [];\n    let rolling_max:\
    \ number;\n    let i = 0;\n    for (i; i < numbers.length; i++) {\n        rolling_max\
    \ = Math.max(rolling_max, numbers[i]);\n        result.push(rolling_max);\n  \
    \  }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  NaN,\n  NaN,\n\
    \  NaN,\n  NaN\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n\
    \    at test (/tmp/tmpuhxthkgl.js:19:12)\n    at Object.<anonymous> (/tmp/tmpuhxthkgl.js:23:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ NaN, NaN,\
    \ NaN, NaN ],\n  expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660003971
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n  let maximum = numbers[0];\n  let rollingMaxIndex =\
    \ 0;\n  for (let i = 1; i < numbers.length; ++i) {\n    if (numbers[i] >= maximum)\
    \ {\n      rollingMaxIndex++;\n      maximum = numbers[i];\n    }\n  }\n  const\
    \ rollingMax = numbers.slice(rollingMaxIndex);\n  return rollingMax;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n \
    \ assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmpbyc7hayw.js:21:12)\n\
    \    at Object.<anonymous> (/tmp/tmpbyc7hayw.js:25:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4 ],\n \
    \ expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660003971
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n  numbers = numbers.map(number => number < 0 ? -number\
    \ : number);\n  let current = numbers[0];\n  let max = 0;\n  let maxIndex = 0;\n\
    \  for (let i = 1; i < numbers.length; i++) {\n    if (current > numbers[i]) {\n\
    \      max = numbers[i];\n      maxIndex = i;\n      current = numbers[i];\n \
    \   } else {\n      max = Math.max(max, numbers[i]);\n    }\n  }\n  return numbers.slice(0,\
    \ maxIndex + 1);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmps7y4mkmv.js:26:12)\n\
    \    at Object.<anonymous> (/tmp/tmps7y4mkmv.js:30:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1 ],\n \
    \ expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660003971
- exit_code: 2
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n  return rolling_max(numbers, 0);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp4f_e3rht.ts(6,31): error TS2554: Expected 1 arguments,
    but got 2.

    '
  timestamp: 1660003962
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n\tvar max = numbers[0];\n\tvar index = -1;\n\tfor (var\
    \ i = 0; i < numbers.length; i++) {\n\t\tindex = numbers.indexOf(max, index +\
    \ 1);\n\t\tif (index >= numbers.length - 1) {\n\t\t\treturn [max];\n\t\t}\n\t\t\
    max = Math.max(max, numbers[index]);\n\t}\n\treturn [];\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmpd88rccbr.js:21:12)\n\
    \    at Object.<anonymous> (/tmp/tmpd88rccbr.js:25:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660003971
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n\tlet max_value: number = 0;\n\tlet max_index = 0;\n\t\
    for (let i = 0; i < numbers.length; ++i) {\n\t\tlet current_max = Math.max(max_value,\
    \ numbers[i]);\n\t\tif (current_max > max_value) {\n\t\t\tmax_value = current_max;\n\
    \t\t\tmax_index = i;\n\t\t}\n\t}\n\tlet result: number[] = [];\n\tfor (let i =\
    \ 0; i < numbers.length; ++i) {\n\t\tif (numbers[i] === max_value) {\n\t\t\tresult.push(numbers[i]);\n\
    \t\t}\n\t}\n\treturn result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmpxn99ryw2.js:27:12)\n\
    \    at Object.<anonymous> (/tmp/tmpxn99ryw2.js:31:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4 ],\n \
    \ expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660003972
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n  let max_rolling_number: number[] = [];\n  for (let\
    \ i = 0; i < numbers.length; i++) {\n    const index = numbers.indexOf(i + 1);\n\
    \    max_rolling_number[i] = numbers[index];\n  }\n  return max_rolling_number;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n  \
    \  at test (/tmp/tmpbi2fbi2w.js:18:12)\n    at Object.<anonymous> (/tmp/tmpbi2fbi2w.js:21:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 4 ],\n  expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660003972
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let rolling_maxes: number[] = [];\n\n    numbers.forEach((number)\
    \ => {\n        let max_rolling_number: number = 0;\n        let index: number\
    \ = 0;\n\n        while (index <= rolling_maxes.length) {\n            if (number\
    \ > rolling_maxes[index]) {\n                rolling_maxes[index] = number;\n\
    \            }\n            index++;\n        }\n\n        if (rolling_maxes.length\
    \ > 0) {\n            max_rolling_number = rolling_maxes[rolling_maxes.length\
    \ - 1];\n        } else {\n            max_rolling_number = number;\n        }\n\
    \        rolling_maxes.push(max_rolling_number);\n    });\n\n    return rolling_maxes;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  4,\n\
    \  4,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n  \
    \  at test (/tmp/tmprpm44c0u.js:30:12)\n    at Object.<anonymous> (/tmp/tmprpm44c0u.js:34:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 4, 4,\
    \ 4 ],\n  expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660003971
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n  var i = -1;\n  var results: number[] = [];\n  var len\
    \ = numbers.length;\n  while (++i < len) {\n    var max = numbers[i];\n    results.unshift(max);\n\
    \    for (var j = 1; j < numbers.length; ++j) {\n      if (numbers[j] >= max)\
    \ {\n        max = numbers[j];\n        results.unshift(max);\n      }\n    }\n\
    \  }\n  return results;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  4,\n\
    \  4,\n  3,\n  3,\n  4,\n  3,\n  2,\n  2,\n  4,\n  3,\n  2,\n  1\n]\n\nshould\
    \ loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmp3i8xkhm5.js:25:12)\n\
    \    at Object.<anonymous> (/tmp/tmp3i8xkhm5.js:29:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    4,\
    \ 4, 4, 3, 3, 4,\n    3, 2, 2, 4, 3, 2,\n    1\n  ],\n  expected: [ 1, 2, 3, 4\
    \ ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660003972
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    const len = numbers.length;\n    if (len === 0) {\n\
    \        return [];\n    }\n    numbers.sort((a, b) => a - b);\n    let rolling_max\
    \ = 0;\n    let rolling_max_idx = 1;\n    let result = [];\n    for (let i = 1;\
    \ i < len; i++) {\n        if (numbers[i - 1] < rolling_max) {\n            if\
    \ (rolling_max_idx < i) {\n                result[rolling_max_idx] = numbers[i\
    \ - 1];\n            }\n            rolling_max = numbers[i - 1];\n          \
    \  rolling_max_idx = i;\n        } else {\n            rolling_max_idx += 1;\n\
    \        }\n    }\n    result[rolling_max_idx] = rolling_max;\n    return result;\n\
    }\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  <4 empty\
    \ items>,\n  0\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n\
    \    at test (/tmp/tmpdh4dxy94.js:33:12)\n    at Object.<anonymous> (/tmp/tmpdh4dxy94.js:37:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ <4 empty\
    \ items>, 0 ],\n  expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660003972
- exit_code: -5
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n\tnumbers.sort((a: number, b: number) => a - b);\n\t\
    let result: number[] = [];\n\tlet i = 0;\n\twhile (i < numbers.length) {\n\t\t\
    result.push(numbers[i]);\n\t\tif (numbers[i + 1] == numbers[i]) {\n\t\t\ti++;\n\
    \t\t} else {\n\t\t\ti = Math.max(i - 1, 0);\n\t\t}\n\t}\n\treturn result;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: Exception
  stderr: "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error\
    \ 169220804\n#\n#\n#\n#FailureMessage Object: 0x7ffed51014f0\n 1: 0x2ae21c6c7727\
    \  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 2: 0x2ae21d25c28e\
    \ V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 3: 0x2ae21cb96f8b  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 4: 0x2ae21cd28760  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 5: 0x2ae21cd300cd  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 6: 0x2ae21cf1a7db v8::internal::Runtime_GrowArrayElements(int, unsigned long*,\
    \ v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 7: 0x2ae21c8797f9  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n"
  stdout: ''
  timestamp: 1660003975
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n  const rolling_max: number[] = [];\n  let i = 0;\n \
    \ while (numbers[i] != undefined) {\n    rolling_max.push(numbers[i]);\n    i++;\n\
    \  }\n  return rolling_max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n  \
    \  at test (/tmp/tmp9ge3r2sl.js:19:12)\n    at Object.<anonymous> (/tmp/tmp9ge3r2sl.js:22:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2,\
    \ 1 ],\n  expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660003972
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n  const result: number[] = [];\n  numbers.forEach(value\
    \ => {\n    const min = Math.min.apply(null, result);\n    if (min < value) {\n\
    \      result.push(value);\n    }\n  });\n  return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmps0e21jmu.js:19:12)\n\
    \    at Object.<anonymous> (/tmp/tmps0e21jmu.js:23:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660003972
- exit_code: 2
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n  return numbers.reduce((prev, current) =>\n    prev\
    \ >= current ? prev : prev + current, 0\n  );\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpl5zjz4he.ts(6,3): error TS2322: Type ''number'' is
    not assignable to type ''number[]''.

    '
  timestamp: 1660003972
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n  return numbers.reduceRight((accumulator, currentValue)\
    \ => {\n    accumulator.push(currentValue);\n    return accumulator.slice(-numbers.length);\n\
    \  }, []);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n  \
    \  at test (/tmp/tmpvcth07ij.js:15:12)\n    at Object.<anonymous> (/tmp/tmpvcth07ij.js:19:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2,\
    \ 1 ],\n  expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660003972
- exit_code: 0
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n  const results: number[] = [];\n  for (let i = 0, max\
    \ = numbers[0]; i < numbers.length; i++) {\n    if (max < numbers[i]) {\n    \
    \  max = numbers[i];\n    }\n    results.push(max);\n  }\n  return results;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660003972
- exit_code: 2
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n  const len = numbers.length;\n  const max = numbers[0];\n\
    \n  if (len === 1) {\n    return max;\n  }\n\n  for (let i = 1; i < len; i++)\
    \ {\n    if (max < numbers[i]) {\n      max = numbers[i];\n    }\n  }\n  return\
    \ max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpx6on6dux.ts(10,5): error TS2322: Type ''number''
    is not assignable to type ''number[]''.

    ../../../../../tmp/tmpx6on6dux.ts(15,7): error TS2588: Cannot assign to ''max''
    because it is a constant.

    ../../../../../tmp/tmpx6on6dux.ts(18,3): error TS2322: Type ''number'' is not
    assignable to type ''number[]''.

    '
  timestamp: 1660003973
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n  const rolling_maxes = new Array<number>();\n  let last_max\
    \ = numbers[0];\n  numbers.forEach((number) => {\n    if (number > last_max) {\n\
    \      rolling_maxes.push(number);\n      last_max = number;\n    } else {\n \
    \     rolling_maxes[rolling_maxes.length - 1] = last_max;\n    }\n  });\n  return\
    \ rolling_maxes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  3,\n\
    \  4,\n  '-1': 1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n\
    ]\n    at test (/tmp/tmph0tfsnwi.js:23:12)\n    at Object.<anonymous> (/tmp/tmph0tfsnwi.js:27:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 3, 4,\
    \ '-1': 1 ],\n  expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660003973
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    var rollingMaxArray: number[] = [];\n\n    var maxNum\
    \ = numbers[0];\n\n    for (var i = 1; i < numbers.length; i++) {\n        if\
    \ (numbers[i] > maxNum) {\n            rollingMaxArray.push(maxNum);\n       \
    \     maxNum = numbers[i];\n        } else {\n            rollingMaxArray.push(numbers[i]);\n\
    \        }\n    }\n    rollingMaxArray.push(maxNum);\n    return rollingMaxArray;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpdtda1_j1.js:23:12)\n\
    \    at Object.<anonymous> (/tmp/tmpdtda1_j1.js:28:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660003974
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let result = new Array<number>();\n    for (let i\
    \ = numbers.length - 1; i >= 0; i--) {\n        let max = numbers[i];\n      \
    \  let j = i;\n        while (j < numbers.length && numbers[j] < max) {\n    \
    \        max = numbers[j];\n            j++;\n        }\n        result.push(max);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n  \
    \  at test (/tmp/tmphc6kofi0.js:22:12)\n    at Object.<anonymous> (/tmp/tmphc6kofi0.js:26:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2,\
    \ 1 ],\n  expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660003974
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    const length = numbers.length\n    return numbers.map(number\
    \ => {\n        if (numbers.length === 0) {\n            return number\n     \
    \   } else {\n            const maxNumber = Math.max.apply(null, numbers)\n  \
    \          if (number === maxNumber) {\n                return maxNumber\n   \
    \         } else {\n                return number\n            }\n        }\n\
    \    })\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n  \
    \  at test (/tmp/tmp4gct7lzx.js:27:12)\n    at Object.<anonymous> (/tmp/tmp4gct7lzx.js:30:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2,\
    \ 1 ],\n  expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660003974
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n  var max_element = numbers[0];\n  var max_element_index\
    \ = -1;\n\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] >\
    \ max_element) {\n      max_element = numbers[i];\n      max_element_index = i;\n\
    \    }\n  }\n\n  return numbers.slice(0, max_element_index + 1).reverse();\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n  \
    \  at test (/tmp/tmpxitfn3r6.js:20:12)\n    at Object.<anonymous> (/tmp/tmpxitfn3r6.js:24:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2,\
    \ 1 ],\n  expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660003974
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n  const max_number = Math.max(...numbers);\n  const rolling_max_numbers:\
    \ number[] = [];\n  let current_number = max_number;\n  while (current_number\
    \ != max_number) {\n    rolling_max_numbers.push(current_number);\n    current_number\
    \ = Math.max(...rolling_max_numbers);\n  }\n  return rolling_max_numbers;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmp5jide36p.js:19:12)\n\
    \    at Object.<anonymous> (/tmp/tmp5jide36p.js:23:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660003974
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n\tvar result = new Array<number>();\n\tvar max = numbers[0];\n\
    \tfor (var i = 1; i < numbers.length; i++) {\n\t\tvar n = numbers[i];\n\t\tif\
    \ (n > max) {\n\t\t\tmax = n;\n\t\t}\n\t}\n\tresult.push(max);\n\treturn result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpexgn8p_9.js:20:12)\n\
    \    at Object.<anonymous> (/tmp/tmpexgn8p_9.js:25:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660003974
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    const result: number[] = [];\n    let max = numbers[0];\n\
    \    let currentMax = numbers[0];\n    for (let i = 1; i < numbers.length; i++)\
    \ {\n        if (numbers[i] > currentMax) {\n            currentMax = max;\n \
    \           result.push(max);\n            max = numbers[i];\n        } else {\n\
    \            max = currentMax;\n        }\n    }\n    result.push(max);\n    return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpvu732wm7.js:25:12)\n\
    \    at Object.<anonymous> (/tmp/tmpvu732wm7.js:30:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660003974
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n  if (numbers.length === 0) {\n    return [];\n  }\n\n\
    \  var max_so_far = numbers[0];\n  var max_ending_here = numbers[0];\n\n  for\
    \ (var i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max_ending_here)\
    \ {\n      max_ending_here = numbers[i];\n    }\n\n    if (numbers[i] > max_so_far)\
    \ {\n      max_so_far = numbers[i];\n    }\n  }\n\n  return [max_so_far, max_ending_here];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  4\n\
    ]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmppvv1b8mn.js:25:12)\n\
    \    at Object.<anonymous> (/tmp/tmppvv1b8mn.js:29:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 4 ],\n\
    \  expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660003974
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n  let result: number[] = [];\n  let currentMax: number\
    \ = 0;\n  for (let n of numbers) {\n    if (n > currentMax) {\n      currentMax\
    \ = n;\n    }\n    if (n === currentMax) {\n      result.push(n);\n    }\n  }\n\
    \  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4\n]\n\n\
    should loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n    at test (/tmp/tmpoh4h9my9.js:24:12)\n\
    \    at Object.<anonymous> (/tmp/tmpoh4h9my9.js:27:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4 ],\n \
    \ expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660003974
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n\tlet result: number[] = [];\n\tnumbers.reduce((prev,\
    \ curr) => {\n\t\tif (prev < curr) {\n\t\t\tresult.push(prev);\n\t\t}\n\t\treturn\
    \ curr;\n\t});\n\treturn result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: Exception
  stderr: "/tmp/tmpfi2wid63.js:7\n    numbers.reduce(function (prev, curr) {\n   \
    \         ^\n\nTypeError: Reduce of empty array with no initial value\n    at\
    \ Array.reduce (<anonymous>)\n    at rolling_max (/tmp/tmpfi2wid63.js:7:13)\n\
    \    at test (/tmp/tmpfi2wid63.js:18:22)\n    at Object.<anonymous> (/tmp/tmpfi2wid63.js:23:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660003974
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n  const result: number[] = [];\n  let prev: number |\
    \ undefined = undefined;\n  numbers.forEach((value: number, index: number) =>\
    \ {\n    if (index === 0 || value > prev) {\n      result.push(value);\n    }\n\
    \    prev = value;\n  });\n  return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4\n]\n\n\
    should loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n    at test (/tmp/tmpmlu1nt30.js:21:12)\n\
    \    at Object.<anonymous> (/tmp/tmpmlu1nt30.js:24:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4 ],\n \
    \ expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660003974
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    var ret: number[] = [];\n    var temp: number = 0;\n\
    \    var lastNumber: number = 0;\n    var lastTemp: number = 0;\n\n    numbers.forEach(function\
    \ (number: number, index: number) {\n        if (number > lastNumber) {\n    \
    \        lastTemp = temp;\n            temp = number;\n            lastNumber\
    \ = number;\n        } else {\n            temp = temp * 10 + number;\n      \
    \  }\n    });\n\n    ret.push(lastTemp);\n    return ret;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0\n]\n\n\
    should loosely deep-equal\n\n[]\n    at test (/tmp/tmp0zxepqwz.js:26:12)\n   \
    \ at Object.<anonymous> (/tmp/tmp0zxepqwz.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0 ],\n \
    \ expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660003974
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max: number[] = [];\n    const max_indexes: number[]\
    \ = [];\n    let index: number;\n    let number;\n    let length: number;\n  \
    \  let i;\n\n    if (numbers.length < 1) {\n        return max;\n    }\n\n   \
    \ max = numbers.slice();\n    length = numbers.length;\n\n    for (i = 0; i <=\
    \ length; i++) {\n        index = i - 1;\n        number = numbers[i];\n\n   \
    \     while (index >= 0) {\n            if (number > max[index]) {\n         \
    \       max[index] = number;\n                max_indexes.push(index);\n     \
    \       }\n\n            index--;\n        }\n    }\n\n    for (i = 0; i < length;\
    \ i++) {\n        number = numbers[i];\n        numbers[max_indexes[i]] = number;\n\
    \    }\n\n    return max;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  4,\n\
    \  4,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n  \
    \  at test (/tmp/tmpmt46jb7y.js:38:12)\n    at Object.<anonymous> (/tmp/tmpmt46jb7y.js:42:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 4, 4,\
    \ 4 ],\n  expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660003974
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    const rolling_maxes: number[] = [];\n    let max:\
    \ number;\n    let min: number;\n    for (let i = 0; i < numbers.length; i++)\
    \ {\n        max = numbers[i];\n        min = numbers[i];\n        for (let j\
    \ = i + 1; j < numbers.length; j++) {\n            if (numbers[j] > max) {\n \
    \               max = numbers[j];\n            }\n            if (numbers[j] <\
    \ min) {\n                min = numbers[j];\n            }\n        }\n      \
    \  rolling_maxes[i] = min;\n    }\n    return rolling_maxes;\n}\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1,\n\
    \  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n  \
    \  at test (/tmp/tmpub1fbm6o.js:29:12)\n    at Object.<anonymous> (/tmp/tmpub1fbm6o.js:32:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1, 1,\
    \ 1 ],\n  expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660003974
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let result = [];\n    let index = numbers.length\
    \ - 1;\n    numbers.forEach((number, i) => {\n        if (index < 0) {\n     \
    \       return;\n        }\n        if (number > numbers[index]) {\n         \
    \   result.push(number);\n            index--;\n        }\n    });\n    return\
    \ result.concat();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmppnqedhax.js:23:12)\n\
    \    at Object.<anonymous> (/tmp/tmppnqedhax.js:27:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660003975
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n\tconst maxValues: number[] = [];\n\tfor (let n of numbers)\
    \ {\n\t\tmaxValues.push(Math.max(n));\n\t}\n\treturn maxValues;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n \
    \ assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n  \
    \  at test (/tmp/tmpy0fwu9kb.js:18:12)\n    at Object.<anonymous> (/tmp/tmpy0fwu9kb.js:21:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2,\
    \ 1 ],\n  expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660003975
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n  let max = numbers[0];\n  let current = numbers[0];\n\
    \  let result: number[] = [];\n  for (let i = 1; i < numbers.length; i++) {\n\
    \    if (numbers[i] > max) {\n      max = numbers[i];\n      current = numbers[i];\n\
    \    } else {\n      current = numbers[i];\n    }\n    result.push(current);\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  3,\n\
    \  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test\
    \ (/tmp/tmp5se264u3.js:25:12)\n    at Object.<anonymous> (/tmp/tmp5se264u3.js:29:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 3, 4\
    \ ],\n  expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660003975
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n  const min_number = numbers.reduce((a, v) => v > a ?\
    \ v : a, numbers[0]);\n  const max_number = numbers.reduce((a, v) => v > a ? v\
    \ : a, numbers[0]);\n  const max_number_index = numbers.indexOf(max_number);\n\
    \  const rolling_max_array = numbers.map((v, i) => v === max_number ? max_number_index\
    \ + i : v);\n  return rolling_max_array;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  3,\n  6\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n  \
    \  at test (/tmp/tmp1svj5_3e.js:16:12)\n    at Object.<anonymous> (/tmp/tmp1svj5_3e.js:20:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 3,\
    \ 6 ],\n  expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660003976
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let max: number|null = null;\n    let maxIndex: number|null\
    \ = null;\n    numbers.forEach(\n        (element, index) => {\n            max\
    \ = element;\n            maxIndex = index;\n        });\n    let rollingMax =\
    \ [];\n    let rollingMaxElement = max;\n    let rollingMaxIndex = maxIndex;\n\
    \    numbers.forEach(\n        (element, index) => {\n            if (element\
    \ > rollingMaxElement) {\n                rollingMaxElement = element;\n     \
    \           rollingMaxIndex = index;\n            }\n        });\n    rollingMax.push(rollingMaxElement);\n\
    \    if (maxIndex < numbers.length - 1) {\n        rollingMax = rollingMax.concat(rolling_max(numbers.slice(maxIndex\
    \ + 1)));\n    }\n    return rollingMax;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  null\n]\n\
    \nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmpsk4sg3qp.js:30:12)\n \
    \   at Object.<anonymous> (/tmp/tmpsk4sg3qp.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ null ],\n\
    \  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660003976
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    const result = [];\n    const maxes = [];\n    for\
    \ (let i = 0; i < numbers.length; ++i) {\n        maxes.push(numbers[i]);\n  \
    \      result.push(numbers[i]);\n        for (let j = i + 1; j < numbers.length;\
    \ ++j) {\n            if (numbers[i] > numbers[j]) {\n                maxes[j]\
    \ = numbers[j];\n                result[j] = numbers[j];\n            }\n    \
    \    }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  1,\n  3,\n  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  4,\n\
    \  4,\n  4\n]\n    at test (/tmp/tmpypobc2gp.js:25:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpypobc2gp.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    4,\
    \ 3, 2, 1,\n    3, 2, 1\n  ],\n  expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660003976
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n  return numbers.reduce(function(a: number[], n: number)\
    \ {\n    a.push(n);\n    return a;\n  }, []);\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n  \
    \  at test (/tmp/tmpkgwx7baa.js:16:12)\n    at Object.<anonymous> (/tmp/tmpkgwx7baa.js:19:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2,\
    \ 1 ],\n  expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660003976
- exit_code: 2
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n  return numbers.reduce((prev, curr) => {\n    return\
    \ prev > curr ? prev : curr;\n  });\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpka96ibx8.ts(6,3): error TS2322: Type ''number'' is
    not assignable to type ''number[]''.

    '
  timestamp: 1660003976
- exit_code: 2
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n  const result = [];\n  const max = numbers[0];\n\n \
    \ for (let i = 1; i < numbers.length; i++) {\n    if (max < numbers[i]) {\n  \
    \    max = numbers[i];\n    }\n  }\n\n  for (let i = 1; i < numbers.length; i++)\
    \ {\n    if (numbers[i] === max) {\n      result.push(max);\n    }\n  }\n\n  return\
    \ result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp8h57ns_j.ts(11,7): error TS2588: Cannot assign to
    ''max'' because it is a constant.

    '
  timestamp: 1660003976
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n  const result = [];\n\n  for (let i = 0; i < numbers.length;\
    \ i++) {\n    let max = numbers[i];\n    let index = i;\n\n    while (true) {\n\
    \      max = numbers[++index];\n      if (max > numbers[index]) {\n        max\
    \ = numbers[index];\n        index = index;\n      } else {\n        result.push(max);\n\
    \        break;\n      }\n    }\n  }\n\n  return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  3,\n\
    \  4,\n  undefined\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n\
    ]\n    at test (/tmp/tmpkx0vb6uy.js:28:12)\n    at Object.<anonymous> (/tmp/tmpkx0vb6uy.js:32:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 3, 4,\
    \ undefined ],\n  expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js\
    \ v18.7.0\n"
  stdout: ''
  timestamp: 1660003976
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    if (numbers.length === 0) {\n        return [];\n\
    \    }\n    const result = new Array(numbers.length);\n    result[0] = Math.max(...numbers);\n\
    \    for (let i = 1; i < numbers.length; i++) {\n        result[i] = Math.max(numbers[i\
    \ - 1], numbers[i]);\n    }\n    return result;\n}\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  2,\n\
    \  3,\n  4\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n  \
    \  at test (/tmp/tmp2l_w659q.js:20:12)\n    at Object.<anonymous> (/tmp/tmp2l_w659q.js:24:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 2, 3,\
    \ 4 ],\n  expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660003977
- exit_code: 2
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    const rolling_maxes = new Array<number>();\n    let\
    \ max = Number.MIN_VALUE;\n    numbers.forEach(number => {\n        max = Math.max(max,\
    \ number);\n    });\n    let rollingMax = max;\n    while (rollingMax !== Number.MIN_VALUE)\
    \ {\n        rollingMaxes.unshift(rollingMax);\n        max = Number.MIN_VALUE;\n\
    \        numbers.forEach(number => {\n            max = Math.max(max, number);\n\
    \            if (number === rollingMax) {\n                rollingMax = max;\n\
    \            }\n        });\n    }\n    return rollingMaxes;\n}\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpasso6xuo.ts(13,9): error TS2552: Cannot find name
    ''rollingMaxes''. Did you mean ''rolling_maxes''?

    ../../../../../tmp/tmpasso6xuo.ts(22,12): error TS2552: Cannot find name ''rollingMaxes''.
    Did you mean ''rolling_maxes''?

    '
  timestamp: 1660003976
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n  var rolling_max = new Array<number>();\n  var _max\
    \ = numbers[0];\n  rolling_max[0] = _max;\n\n  var i;\n  for (i = 1; i < numbers.length;\
    \ ++i) {\n    if (numbers[i] > _max) {\n      rolling_max[i] = numbers[i];\n \
    \     _max = numbers[i];\n    } else {\n      rolling_max[i] = _max;\n    }\n\
    \  }\n\n  return rolling_max;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = rolling_max;\n\
    \  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1, 2, 3,\
    \ 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4, 4, 4]);\n\
    \  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  undefined\n\
    ]\n\nshould loosely deep-equal\n\n[]\n    at test (/tmp/tmp8d3zmbvx.js:24:12)\n\
    \    at Object.<anonymous> (/tmp/tmp8d3zmbvx.js:29:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ undefined\
    \ ],\n  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660003976
- exit_code: 0
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n  let max: number = 0;\n  let result: number[] = [];\n\
    \  for (const n of numbers) {\n    const nextMax = Math.max(max, n);\n    max\
    \ = nextMax;\n    result.push(nextMax);\n  }\n  return result;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660003976
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    const result: number[] = [];\n    for (let i = 1;\
    \ i <= numbers.length; i++) {\n        const temp = result.slice();\n        result.push(Math.max(numbers[i\
    \ - 1], numbers[i]));\n        if (numbers[i] > numbers[i - 1]) {\n          \
    \  for (let j = 0; j < temp.length; j++) {\n                if (temp[j] > numbers[i]\
    \ && temp[j] >= numbers[i - 1]) {\n                    temp[j] = Math.max(temp[j],\
    \ numbers[i]);\n                }\n            }\n        }\n    }\n    return\
    \ result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  3,\n\
    \  4,\n  NaN\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n\
    \    at test (/tmp/tmp_n6qednb.js:24:12)\n    at Object.<anonymous> (/tmp/tmp_n6qednb.js:28:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 3, 4,\
    \ NaN ],\n  expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660003977
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n  if (numbers.length <= 1) {\n    return numbers;\n \
    \ }\n  let max_so_far = numbers[0];\n  for (let i = 1; i < numbers.length; i++)\
    \ {\n    if (numbers[i] > max_so_far) {\n      max_so_far = numbers[i];\n    }\n\
    \  }\n  return [max_so_far];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4\n]\n\n\
    should loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n    at test (/tmp/tmpmawh0a1h.js:21:12)\n\
    \    at Object.<anonymous> (/tmp/tmpmawh0a1h.js:25:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4 ],\n \
    \ expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660003977
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    let sum: number = 0;\n    let max: number = 0;\n\
    \    let i = 0; //The index of the current maximum element.\n    const result:\
    \ number[] = []; //The result array, filled with rolling maximum elements.\n \
    \   while (i < numbers.length) {\n        sum += numbers[i];\n        if (sum\
    \ > max) {\n            max = sum;\n        }\n        i++;\n        result.push(max);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  3,\n\
    \  6,\n  10\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  2,\n  3,\n  4\n]\n \
    \   at test (/tmp/tmpfeubwo3s.js:24:12)\n    at Object.<anonymous> (/tmp/tmpfeubwo3s.js:28:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 3, 6,\
    \ 10 ],\n  expected: [ 1, 2, 3, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660003977
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n\tconst array = numbers.map(number => Math.max(number));\n\
    \treturn array;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4,\n  3,\n\
    \  2,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  4,\n  4,\n  4,\n  4\n]\n  \
    \  at test (/tmp/tmphhy08rnx.js:14:12)\n    at Object.<anonymous> (/tmp/tmphhy08rnx.js:17:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4, 3, 2,\
    \ 1 ],\n  expected: [ 4, 4, 4, 4 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660003977
- exit_code: 2
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n\tconst rolling_max = numbers.reduce((previousValue,\
    \ currentValue) => {\n\t\tif (previousValue < currentValue) return previousValue;\n\
    \t\treturn currentValue;\n\t});\n\treturn rolling_max;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([1,\
    \ 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4, 3, 2, 1]),[4, 4,\
    \ 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpo2wp8q8f.ts(10,2): error TS2322: Type ''number''
    is not assignable to type ''number[]''.

    '
  timestamp: 1660003977
- exit_code: 2
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    var result: number[] = [],\n        prevMax: number\
    \ = Number.MIN_VALUE,\n        current: number = 0,\n        index: number = 0;\n\
    \n    while (index < numbers.length) {\n        if (numbers[index] > prevMax)\
    \ {\n            prevMax = current;\n            current = numbers[index];\n \
    \           index = index;\n        } else {\n            result[result.length]\
    \ = current;\n            prev = current;\n            current = numbers[index];\n\
    \            index = index;\n        }\n    }\n    result[result.length] = current;\n\
    \n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
    \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpabt0919m.ts(18,13): error TS2304: Cannot find name
    ''prev''.

    '
  timestamp: 1660003977
- exit_code: 1
  program: "//From a given array of integers, generate an array of rolling maximum\
    \ element found until given moment\n// in the sequence.\n// >>> rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers:\
    \ number[]): number[] {\n    if (numbers.length <= 0) {\n        return [];\n\
    \    }\n    var result: number[] = [];\n    var max: number[] = [];\n    var currentMax\
    \ = 0;\n    numbers.forEach(function (number) {\n        var result = rolling_max(numbers);\n\
    \        result.push(number);\n        if (number === currentMax) {\n        \
    \    result.push(number);\n        }\n        if (numbers.length > 1 && number\
    \ > currentMax) {\n            result.push(number);\n            max = rolling_max(max);\n\
    \            currentMax = max[0];\n        }\n    });\n    if (max.length > 0)\
    \ {\n        result = max.concat(result);\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n \
    \ assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
    \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
    \ 3, 3, 100, 100]);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp4lbx1rv7.js:13\n        var result = rolling_max(numbers);\n  \
    \                   ^\n\nRangeError: Maximum call stack size exceeded\n    at\
    \ /tmp/tmp4lbx1rv7.js:13:22\n    at Array.forEach (<anonymous>)\n    at rolling_max\
    \ (/tmp/tmp4lbx1rv7.js:12:13)\n    at /tmp/tmp4lbx1rv7.js:13:22\n    at Array.forEach\
    \ (<anonymous>)\n    at rolling_max (/tmp/tmp4lbx1rv7.js:12:13)\n    at /tmp/tmp4lbx1rv7.js:13:22\n\
    \    at Array.forEach (<anonymous>)\n    at rolling_max (/tmp/tmp4lbx1rv7.js:12:13)\n\
    \    at /tmp/tmp4lbx1rv7.js:13:22\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660003977
