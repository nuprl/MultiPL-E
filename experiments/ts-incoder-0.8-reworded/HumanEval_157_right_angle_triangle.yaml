name: HumanEval_157_right_angle_triangle
language: ts
prompt: "//Given the lengths of the three sides of a triangle. Return true if the\
  \ three\n// sides form a right-angled triangle, false otherwise.\n// A right-angled\
  \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
  // Example:\n// >>> right_angle_triangle(3, 4, 5)\n// true\n// >>> right_angle_triangle(1,\
  \ 2, 3)\n// false\nfunction right_angle_triangle(a: number, b: number, c: number):\
  \ boolean {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
  \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
  \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
  \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
  \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
  \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
  \ 2, 10),false);\n}\n\ntest();"
completions: ["  return Math.atan2( - b * b - c * c, a * a + b * b - c * c) <\n  \
    \       Math.PI / 2;\n}\n", "  let ab: number = b - a\n  let ac: number = c -\
    \ a\n  let abc: number = ab * ab + ac * ac\n  return ab == abc && ac == -abc\n\
    }\n", "    if (Math.abs(b * b - 4 * a * c) < 0.1) {\n        return true;\n  \
    \  }\n    return false;\n}\n", "    return (a+b>=c) && (a-b>=0);\n}\n", "  if((c\
    \ <= a) && (b <= a)) {\n    return (Math.abs(b - a) <= Math.abs(c - a));\n  }\n\
    \  return false;\n}\n", "  return (b - a) * (c - b) <= 0;\n}\n", "\tlet a1 = Math.abs(a);\n\
    \tlet b1 = Math.abs(b);\n\tlet c1 = Math.abs(c);\n\tlet cross = (a + b + c)/2;\n\
    \treturn a1*a1 + b1*b1 == c1*c1 || a1*b1 + b1*c1 == c1*a1;\n}\n", "\tif (a ==\
    \ 0 || b == 0 || c == 0)\n\t\treturn false\n\n\tif (a < b + c && b < a + c &&\
    \ c < a + b)\n\t\treturn true\n\n\treturn false\n}", "\treturn (\n\t\t\t(c > b\
    \ - a) && (\n\t\t\ta == c ||\n\t\t\tb == c ||\n\t\t\ta > b ||\n\t\t\tMath.abs(a\
    \ - b) <= Math.abs(c - b)))\n}\n", "    return (b - a) * (c - b) === ((b + c)\
    \ * (a + c));\n}\n", "    const x1: number = (b - a) * Math.cos(Math.toRadians(90));\n\
    \    const y1: number = (b - a) * Math.sin(Math.toRadians(90));\n    const x2:\
    \ number = (c - a) * Math.cos(Math.toRadians(90));\n    const y2: number = (c\
    \ - a) * Math.sin(Math.toRadians(90));\n\n    const det: number = x1 * y2 - y1\
    \ * x2;\n\n    if (det < 0){\n        return false;\n    }\n    return true;\n\
    }\n", "\tvar ab: number = b - a, ac: number = c - a, ad: number = a + b + c;\n\
    \treturn Math.abs(Math.atan2(ab, ac)) < Math.PI / 2;\n}\n", "  return (((b - a)\
    \ * (c - b)) > ((a - b) * (c - a)));\n}\n", "    let d: number = (a + b + c) /\
    \ 2;\n    let l2: number = Math.sqrt((d * d) + (a * a) + (b * b));\n    let l1:\
    \ number = Math.sqrt(a * a);\n    let l3: number = Math.sqrt(b * b);\n\n    return\
    \ (l2 >= l1);\n}\n</code>\nThe above code is just a demonstration that checks\
    \ if the three sides of a triangle are right angles or not. For more complex problems\
    \ I recommend using more advanced mathematical techniques such as Pythagorean\
    \ theorem.\n<|/ a |>\n<| c |>\nThe `right_angle_triangle` function doesn't work\
    \ correctly on inputs of length 0.\n<|/ c |>\n<| c |>\nI have corrected the problem.\
    \ Thanks for pointing it out. :)\n<|/ c |>\n<| a dscore=1 |>\n<code>", "\tif (a\
    \ > b && a > c || b > c && b > a) {\n\t\treturn false\n\t}\n\treturn true\n}\n\
    \n", "  let ab: number = a + b,\n      ac: number = a + c,\n      bc: number =\
    \ b + c;\n  return (ab > ac) && (ab > bc);\n}\n</code>\n<|/ a |>\n<| a tags=javascript,algorithm,geolocation\
    \ |>\nYou can calculate the area of the triangle by taking the cross product of\
    \ vectors AB and CD.\n<code>\nvar ABC = [\n  {x: 1, y: 4}, {x: 2, y: 3}, {x: 3,\
    \ y: 1}\n];\nvar ACD = [\n  {x: 2, y: 3}, {x: 3, y: 4}, {x: 1, y: 1}\n];\nvar\
    \ area = Math.sqrt(Math.pow(ABC[0].x, 2) + Math.pow(ABC[0].y, 2) + Math.pow(ACD[0].x,\
    \ 2) + Math.pow(ACD[0].y, 2));\n</code>\nYou can then calculate the area using\
    \ triangle area formula.\n<code>\nvar PI = 3.1415926535;\nvar area = 4 * PI *\
    \ Math.sqrt(Math.pow(ABC[0].x, 2) + Math.pow(ABC[0].y, 2) + Math.pow(ACD[0].x,\
    \ 2) + Math.pow(ACD[0].y, 2));\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis only\
    \ works if you know the lengths of the sides and can then calculate the area by\
    \ `a * b * c` where `a` and `b` are lengths of the two sides and `c` is the length\
    \ of the third side.\n<|/ c |>\n<| a tags=javascript,algorithm,geolocation dscore=0\
    \ |>\nFor anyone looking for a simple implementation in JavaScript (ES5) without\
    \ importing any other libraries, here is the code:\n<code>", "    let a = Math.abs(a)\n\
    \    let b = Math.abs(b)\n    let c = Math.abs(c)\n    return ((b <= a && b <=\
    \ c) || (c <= a && c <= b) || (a <= b && a <= c))\n}\n", "  // Check which of\
    \ the sides of the triangle are 90 degrees.\n  const d = Math.sqrt((a * a) + (b\
    \ * b) + (c * c));\n  if (Math.abs(d) < 1) {\n    // The sides are perfectly symmetrical\
    \ and form a right-angle triangle.\n    return true;\n  }\n  // Check which side\
    \ is exactly 90 degrees.\n  if (Math.abs(a * b) > Math.abs(c * a)) {\n    if (Math.abs(b\
    \ - c) < Math.abs(a - b)) {\n      // The sides are equal. If the triangle is\
    \ equilateral, it is also right-angle.\n      return true;\n    } else {\n   \
    \   // The sides are parallel.\n      return false;\n    }\n  } else {\n    if\
    \ (Math.abs(a - c) < Math.abs(b - a)) {\n      // The sides are equal. If the\
    \ triangle is equilateral, it is also right-angle.\n      return true;\n    }\
    \ else {\n      // The sides are parallel.\n      return false;\n    }\n  }\n\
    }\n", "    let a1 = Math.abs(a),\n        b1 = Math.abs(b),\n        c1 = Math.abs(c);\n\
    \n    // check if the triangle is right angled or 90 degree\n    // if the angle\
    \ is greater than 90, it is a right angle triangle\n    // else it is 90 degree.\n\
    \    if(a1 > b1 && b1 > c1 && c1 > a1) {\n        return true;\n    }\n    return\
    \ false;\n}\n", "  return ((a + b > c) &&\n    (b + c > a) &&\n    (a + c > b));\n\
    }\n\n", "  return (b - a) * (c - b) <= 0;\n}\n", "  return ((Math.sqrt(Math.pow(b,\
    \ 2) + Math.pow(c, 2)) - Math.sqrt(Math.pow(a, 2) + Math.pow(c, 2)) - Math.sqrt(Math.pow(b,\
    \ 2) + Math.pow(a, 2)) > 0));\n}\n", "\tlet angle1 = 3 * Math.atan2(a, b);\n\t\
    let angle2 = 3 * Math.atan2(b, c);\n\tlet angle3 = 3 * Math.atan2(c, d);\n\treturn\
    \ (angle1 === angle2 || angle1 === angle3 || angle2 === angle3);\n}\n", "    //\
    \ https://en.wikipedia.org/wiki/Isoptric_triangle\n    let ab: number = b - a\n\
    \    let ac: number = c - a\n    let bc: number = b - c\n    return ab > 0 &&\
    \ ac > 0 && bc > 0 && (ab * ac - bc * ab) < 0\n}\n", "    if (Math.abs(b * b -\
    \ 9 * a * c) < 0.01) {\n        return true;\n    } else {\n        return false;\n\
    \    }\n}\n", "  return (((b === 0) + (c === 0) + (a === 0)) === 2);\n}\n", " \
    \ return ((b ** 2) - (4 * a * c)) ** 0.5 < 0;\n}\n", "  \n  // If only one side\
    \ is equal, it's an equilateral triangle.\n  if (b == c) {\n    return true;\n\
    \  }\n  \n  const b_sqr = b*b;\n  const c_sqr = c*c;\n  \n  // If one side is\
    \ longer than the other, the triangle is not right-angled.\n  if (b_sqr + c_sqr\
    \ > Math.pow(a, 2)) {\n    return false;\n  }\n  \n  // If both sides are the\
    \ same, it's a right-angled triangle.\n  if (b_sqr == c_sqr) {\n    return true;\n\
    \  }\n  \n  // If b is longer than c, the triangle is not right-angled.\n  if\
    \ (b_sqr < c_sqr) {\n    return false;\n  }\n  \n  // If the sides are equal,\
    \ the triangle is right-angled.\n  return Math.abs(a - Math.sqrt(c_sqr)) < 0.000001;\n\
    }\n", "  if((b * c) < 0) return false;\n  return ((b * b) == (Math.sqrt((a * a)\
    \ + (b * b)) && Math.sqrt((a * a) + (c * c))));\n}\n", "  let a = Math.abs(a)\n\
    \  let b = Math.abs(b)\n  let c = Math.abs(c)\n  return (((b * c) <= (a * a +\
    \ b * b)) || ((a + b) <= (c * b + c * a)))\n}\n", "    var determinant = a * c\
    \ - b * b;\n    if (determinant === 0) {\n        return false;\n    }\n    return\
    \ ((determinant > 0) && (Math.abs(determinant) > Math.PI / 2));\n}\n", "    return\
    \ ((Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2)) > Math.sqrt(Math.pow(c, 2) + Math.pow(b,\
    \ 2))) && (Math.sqrt(Math.pow(a, 2) + Math.pow(c, 2)) > Math.sqrt(Math.pow(b,\
    \ 2) + Math.pow(a, 2))));\n}\n", "    // http://mathworld.wolfram.com/Right-Angled-Triangle.html\n\
    \    const ca = Math.cos(a * Math.PI / 180);\n    const sa = Math.sin(a * Math.PI\
    \ / 180);\n    const cb = Math.cos(b * Math.PI / 180);\n    const sb = Math.sin(b\
    \ * Math.PI / 180);\n    const cc = Math.cos(c * Math.PI / 180);\n    const sc\
    \ = Math.sin(c * Math.PI / 180);\n    // http://mathworld.wolfram.com/CompassPoint.html\n\
    \    const p = Math.sqrt(Math.pow(cc - sa * sa, 2) + Math.pow(cc + sa * sb, 2));\n\
    \    const q = Math.sqrt(Math.pow(cc - sb * sb, 2) + Math.pow(cc + sb * ca, 2));\n\
    \    const r = Math.sqrt(Math.pow(cc - sc * sc, 2) + Math.pow(cc + sc * cb, 2));\n\
    \    return ((p * p + q * q - r * r - 1) > 0);\n}\n", "    let ab: number = b\
    \ - a\n    let ac: number = c - a\n    let ad: number = b + c\n    let bc: number\
    \ = b - c\n    return (ab > ac) && (ab > ad) && (ab > bc);\n}\n", "  return (\n\
    \    a > b + c ||\n    b > a + c ||\n    c > a + b\n  );\n}\n", "\tlet a = Math.sqrt(a\
    \ * a + b * b + c * c),\n\t\tbc = b * b - c * c\n\treturn (-bc <= a * a && a <=\
    \ bc) && \n\t\t(-bc <= b * b && b <= bc) &&\n\t\t(-bc <= c * c && c <= bc)\n}",
  "    var rad: number = Math.abs(Math.atan2(c-a,  b-a));\n    var angle: number =\
    \ Math.abs(rad);\n    if (angle > Math.PI) {\n        angle = Math.PI + angle;\n\
    \    }\n    return angle <= (Math.PI/2);\n}\n</code>\n<|/ a |>\n<| a dscore=0\
    \ |>\nA lot of answers missed out a way to detect a triangle being right angled.\
    \ If we have 2 vectors, A and B, the dot product is defined as dot(AB, AC) / |AC|\
    \ |AB|. So, we can compute the angle AB vs AC using the dot product and then check\
    \ that it falls between -90 and 90. \n<code>", "  var ab: number = Math.abs(b);\n\
    \  var ac: number = Math.abs(c);\n  var bc: number = Math.abs(a + b);\n  var abc:\
    \ number = Math.abs(a + b + c);\n\n  return (ab <= ac) && (bc <= abc);\n}\n",
  "  const a1 = Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2));\n  const a2 = Math.sqrt(Math.pow(a,\
    \ 2) + Math.pow(c, 2));\n  const b1 = Math.sqrt(Math.pow(b, 2) + Math.pow(a, 2));\n\
    \  const b2 = Math.sqrt(Math.pow(b, 2) + Math.pow(c, 2));\n  const c1 = Math.sqrt(Math.pow(c,\
    \ 2) + Math.pow(a, 2));\n  const c2 = Math.sqrt(Math.pow(c, 2) + Math.pow(b, 2));\n\
    \  return a1 + b2 > a2 + c2 && a2 + c2 > b1 + a1;\n}\n", "    return b * b > c\
    \ * c ? true : b * b < c * a ? false : a * c > b * a ? false : a * c < b * b\n\
    }\n\n", "\tvar ab: number, ac: number, bc: number, cd: number, de: number, ef:\
    \ number, fg: number, gf: number, ge: number, he: number, ie: number, jf: number,\
    \ jg: number, jh: number, ki: number, kj: number, li: number, lj: number, mi:\
    \ number, mj: number, ni: number, nj: number, oi: number, oj: number, pi: number,\
    \ pq: number, qi: number, ri: number, si: number, sj: number, ti: number, tj:\
    \ number, ui: number, uj: number, vi: number, vj: number, wi: number, wj: number,\
    \ xi: number, xj: number, yi: number, yj: number, zi: number, zj: number, zi:\
    \ number, zi: number, za: number, zb: number) {\n\t\tif (b == 0 && a == 0) {\n\
    \t\t\treturn true;\n\t\t} else if (b == 0 && a == 1) {\n\t\t\treturn false;\n\t\
    \t} else if (c == 0 && a == 0) {\n\t\t\treturn false;\n\t\t} else if (c == 0 &&\
    \ a == 1) {\n\t\t\treturn true;\n\t\t}\n\t\tab = a - b;\n\t\tac = a - c;\n\t\t\
    bc = b - c;\n\t\tcd = 2 * ab * c;\n\t\tde = ac * c - ab * b;\n\t\tef = ac * a\
    \ + ab * c;\n\t\tfg = bc * a + bc * c;\n\t\tgf = bc * b + ab * c;\n\t\tge = ac\
    \ * a + bc * c;\n\t\the = ac * b + bc * a;\n\t\tie = ab * a + ab * b;\n\t\tjf\
    \ = bc * a + bc * c;\n\t\tjg = bc * b + ab * c;\n\t\tjh = ab * b + ab * a;\n\t\
    \tki = ab * a * a + ab * c * c;\n\t\tkj = bc * a * a + bc * c * c;\n\t\tli = ac\
    \ * a * b + ab * b * c;\n\t\tlj = ac * a * c + ab * b * b;\n\t\tmi = bc * a *\
    \ b + bc * b * c;\n\t\tmj = bc * a * c + bc * b * b;\n\t\tni = ac * b * a + ab\
    \ * c * c;\n\t\tnj = ac * b * c + ab * c * b;\n\t\toi = ab * a * b + ab * b *\
    \ c;\n\t\toj = ab * a * c + ab * b * b;\n\t\tpi = ab * b * a + ab * c * c;\n\t\
    \tpq = ab * b * c + ab * c * b;\n\t\tqi = bc * b * a + bc * c * c;\n\t\tri = bc\
    \ * b * c + bc * c * b;\n\t\tsi = ab * a * b + ab * b * c;\n", "\tif (b == c &&\
    \ b == a + 1) {\n\t\treturn true\n\t} else {\n\t\treturn false\n\t}\n}", "\tif\
    \ (a == 0 || b == 0 || c == 0) return false\n\treturn ((a * a + b * b - c * c)\
    \ % (Math.pow(a, 2) + Math.pow(b, 2)) == 0)\n}\n", "  const ab: number = b - a\n\
    \  const ac: number = c - a\n  const bc: number = b - c\n  return (\n    (ab *\
    \ bc) > (ac * ab)\n  )\n}\n", "  return (\n    Math.abs(a + b - c) <= a &&\n \
    \   Math.abs(a - b - c) <= b &&\n    Math.abs(a - b + c) <= c\n  )\n}\n", "  \
    \  \n    // Three equal sides \n    if (a == b && b == c) {\n        return true;\n\
    \    }\n\n    // Equal or three side lengths equal\n    if (a == b || a == c ||\
    \ b == c) {\n        return true;\n    }\n\n    // At least two side lengths equal\n\
    \    if (a != b) {\n        return true;\n    }\n\n    // At least one side length\
    \ is not 90\n    if (a == b && b != c) {\n        return true;\n    }\n\n    return\
    \ false;\n}\n\n", "    return (b * b) - (4 * a * c) === 0;\n}\n", "  return (((b\
    \ - a) ^ (c - b)) < 0);\n}\n", "  let rad1 = Math.PI/180;\n  let rad2 = Math.PI/3;\n\
    \  let angle = a*rad1;\n  let angle1 = b*rad1;\n  let angle2 = c*rad1;\n  return(angle-angle1-angle2\
    \ < 180 || angle-angle1-angle2 >= 180);\n}\n", "  return is_right_angle(a, b,\
    \ c) || is_right_angle(b, a, c) || is_right_angle(a, b, c)\n}\n", "  return (b\
    \ === c) && (Math.abs(Math.cos(a / 2)) <=\n      Math.abs(Math.cos(b / 2)) &&\
    \ Math.abs(Math.cos(c / 2)) <=\n      Math.abs(Math.cos(a / 2)) && Math.abs(Math.sin(a))\
    \ >=\n      Math.abs(Math.sin(b)) && Math.abs(Math.sin(c)) >=\n      Math.abs(Math.sin(a)));\n\
    }\n", "    let d = Math.abs(a - b) * 2 + Math.abs(b - c) * 2 + Math.abs(c - a)\
    \ * 2;\n    return d === 0;\n}", "  let angle = Math.atan2( (c-a),(b-a) ) * 180\
    \ / Math.PI \n  return angle >= 0 && angle <= 90 \n}\n", "    // Find the hypotenuse\
    \ of a right triangle\n    let h : number = Math.sqrt(Math.pow(a, 2) + Math.pow(b,\
    \ 2));\n    // Check if b is greater than c\n    if (b > c) {\n        // If b\
    \ is greater than c, b is greater than the hypotenuse\n        h = c;\n    }\n\
    \    // Check if a is greater than the hypotenuse\n    if (a > h) {\n        //\
    \ If a is greater than the hypotenuse, a is greater than the \n        // hypotenuse\n\
    \        a = h;\n    }\n    // Check if the hypotenuse is 0\n    if (h === 0)\
    \ {\n        return false;\n    }\n    // If a>h, a is greater than the hypotenuse\n\
    \    if (a > h) {\n        return true;\n    }\n    // If a<h, a is less than\
    \ the hypotenuse\n    if (a < h) {\n        return false;\n    }\n    // Check\
    \ if the hypotenuse is 0\n    if (h === 0) {\n        return false;\n    }\n \
    \   // If a>h, a is greater than the hypotenuse\n    if (a > h) {\n        return\
    \ true;\n    }\n    // If a<h, a is less than the hypotenuse\n    if (a < h) {\n\
    \        return false;\n    }\n    // If all else fails, return false\n    return\
    \ false;\n}\n</code>\n<|/ a |>\n<| a tags=algorithm,geometry,javascript,math |>\n\
    One way to do it without trigonometry (just some math)\n<code>\nvar a = [3, 4,\
    \ 5];\nvar b = [1, 2, 3];\n", "  return Math.sqrt(Math.pow(c - b, 2) + Math.pow(a\
    \ - c, 2)) > 0;\n}\n", "    // Check if a <= b and b <= c\n    // or if a <= c\
    \ and b <= c\n    if (a <= b && b <= c || a <= c && b <= c) {\n        return\
    \ true;\n    } else {\n        return false;\n    }\n}\n", "    if (b - a > c\
    \ && c - b > a) {\n        return true;\n    }\n\n    return false;\n}\n\n", "\t\
    let ab: number = b - a\n\tlet ac: number = c - a\n\tlet bc: number = b - c\n\t\
    return Math.sqrt(ab * ab + ac * ac + bc * bc <= 1)\n}\n", "\tif((b - a) * (c -\
    \ b) <= 0) {\n\t\treturn false\n\t}\n\tlet determinant = a * d - b * c\n\tlet\
    \ angle = Math.abs(Math.atan2(d, c))\n\treturn (angle <= Math.PI / 2 || angle\
    \ >= 3 * Math.PI / 2)\n}\n", "  let ab: number = Math.abs(b);\n  let ac: number\
    \ = Math.abs(c);\n  if (ab >= ac) {\n    if (a < c) {\n      return (b > c) ||\
    \ (b === c && a >= b);\n    }\n    return true;\n  }\n  return false;\n}\n", "\t\
    if (a === 0 || b === 0 || c === 0) {\n\t\treturn false;\n\t}\n\telse if (Math.abs(Math.sqrt(Math.pow(a,\
    \ 2) + Math.pow(b, 2) + Math.pow(c, 2)) - 1) > 1e-9) {\n\t\treturn false;\n\t\
    }\n\telse {\n\t\treturn true;\n\t}\n}\n", "  return (b - a) * (c - b) <= 0;\n\
    }\n</code>\n<|/ a tags=javascript,typescript,geometry,math |>\n<| c |>\nThis answer\
    \ should be accepted as the correct one because it is correct, and because it\
    \ was first.  This is what makes a good community here in StackOverflow.\n<|/\
    \ c |>\n<| a dscore=5 |>\nThe solution below is the most efficient way for checking\
    \ if three non-parallel sides of a triangle are equal. I wrote it in JavaScript\
    \ for you so you can run it.  It also uses TypeScript.\n<code>", "    const ab_sqr_sum\
    \ = sqr_sum(a, b);\n    const bc_sqr_sum = sqr_sum(b, c);\n    const ac_sqr_sum\
    \ = sqr_sum(a, c);\n    const square_sum: number = ab_sqr_sum + bc_sqr_sum + ac_sqr_sum;\n\
    \    return square_sum === 1;\n}\n", "\treturn (Math.abs(a - b) >= a && Math.abs(a\
    \ - c) >= a && Math.abs(b - c) >= a)\n}", "  return (Math.abs(a - b) <= 90 &&\
    \ Math.abs(a - c) <= 90 && Math.abs(b - c) <= 90);\n}\n", "  var a1 = Math.abs(a);\n\
    \  var b1 = Math.abs(b);\n  var c1 = Math.abs(c);\n  var s = (a1 + b1 + c1) /\
    \ 2.0;\n  var a2 = Math.sqrt(s);\n  var b2 = a2 - a1;\n  var c2 = b2 - b1;\n \
    \ var isRightAngle = (s > (a1 + b1 + c1));\n  return isRightAngle;\n}\n", "\t\
    if (Math.abs(Math.sqrt(a * a + b * b - c * c) - a) > 0.000000001) {\n\t\treturn\
    \ false\n\t}\n\tif (Math.abs(Math.sqrt(a * a + b * b - c * c) - a) > 0.000000001)\
    \ {\n\t\treturn false\n\t}\n\tif (Math.abs(Math.sqrt(a * a + b * b - c * c) -\
    \ a) > 0.000000001) {\n\t\treturn false\n\t}\n\treturn true\n}\n", "\tlet ab =\
    \ a - b;\n\tlet ac = a - c;\n\tlet bc = b - c;\n\treturn (\n\t\tMath.abs(ab -\
    \ ac) <= EPSILON && \n\t\tMath.abs(bc - ab) <= EPSILON\n\t);\n}\n", "  var ab\
    \ = a - b;\n  var ac = c - a;\n  var ad = a - c;\n  return ab > 0 && ac > 0 &&\
    \ ad > 0 || (ab * ac) > 0;\n}\n", "    return ( (a < b && b < c) || (a < c &&\
    \ c < b) || (a > b && c > b) || (a > c && b > c) );\n}\n", "    return (b - a)\
    \ * (c - a) <= 0;\n}\n\n", "\tif (a + b <= c || a + c <= b || b + c <= a) {\n\t\
    \treturn false;\n\t}\n\tconst s = (b - a) / Math.sqrt(Math.pow(b - c, 2) + Math.pow(a,\
    \ 2));\n\treturn s >= 0.5;\n}\n", "\treturn ( (Math.abs(b - c) >  Math.abs(a -\
    \ b) ) && (Math.abs(a - c) >  Math.abs(a - b)) );\n}\n", "    let l: number =\
    \ a * a + b * b;\n    let d: number = Math.sqrt(l - Math.pow(a, 2) + Math.pow(b,\
    \ 2));\n    return l === d;\n}\n\n", "    let rad = Math.sqrt(a * a + b * b);\
    \ // square of radius\n    let angle = Math.acos(a / rad); // cosine of angle\n\
    \    return rad * Math.pow(Math.sin(angle * 0.5), 2) < c; // if angle is between\
    \ -90 and 90, then result is valid\n}\n", "\tconst d = b * b - a * c;\n\tif (d\
    \ < 0) {\n\t\treturn false;\n\t} else {\n\t\treturn Math.abs(d) / b < Math.PI\
    \ / 2;\n\t}\n}\n", "    return b * b - 4 * a * c >= 0\n}\n", "  if (a === 0 &&\
    \ b === 0 && c === 0) {\n    return true\n  }\n  if (a > 0 && b > 0 && c === 0)\
    \ {\n    return false\n  }\n  if (a > 0 && b > 0 && c > 0 && a >= b + c && b >=\
    \ c + a) {\n    return true\n  }\n  return false\n}\n", "  return (((b - c) -\
    \ (a - b)) % 360) == 90;\n}\n</code>\n<|/ a dscore=0 |>\n<| a |>\nThis function\
    \ would work for any number of sides.\n<code>", "    if (a < b) {\n        if\
    \ (b < c) {\n            return true;\n        } else {\n            if (c > a)\
    \ {\n                return false;\n            } else {\n                return\
    \ true;\n            }\n        }\n    } else {\n        if (c > b) {\n      \
    \      return false;\n        } else {\n            if (a < c) {\n           \
    \     return true;\n            } else {\n                return false;\n    \
    \        }\n        }\n    }\n}\n", "  const ab: number = a - b;\n  const bc:\
    \ number = b - c;\n  return ab > bc && bc > ab;\n}\n", "  return b * c <= (Math.pow(a,\
    \ 2) * Math.pow(b, 2));\n}\n", "\tif (Math.abs(b * b - 4 * a * c) < epsilon) {\n\
    \t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\n", "  return ((Math.atan2(b,\
    \ a) - Math.atan2(c, c)) <= Math.PI / 2)\n}\n", "    let sa = Math.abs(Math.sqrt(Math.pow(a,\
    \ 2) + Math.pow(b, 2)));\n    let sb = Math.abs(Math.sqrt(Math.pow(a, 2) + Math.pow(c,\
    \ 2)));\n    let sc = Math.abs(Math.sqrt(Math.pow(b, 2) + Math.pow(c, 2)));\n\n\
    \    return ((sa * sa + sb * sb + sc * sc) / (2 * a * b * c) >= 1);\n}\n", " \
    \   var ab: number = b*b - 4*a*c;\n    if(ab >= 0){\n        var root: number\
    \ = Math.sqrt(ab);\n        return root < b;\n    } else {\n        return false;\n\
    \    }\n}\n", "  return isRightAngle(a, b) || isRightAngle(c, a);\n}\n", "   \
    \ let angle = Math.round(Math.acos((b * b + c * c - a * a) /\n               \
    \                          (Math.pow(b + c, 2) + Math.pow(a, 2))))\n    return\
    \ angle <= 90\n}\n", "\t// If one of the sides is a right angle or 90 degree.\n\
    \treturn (Math.sqrt(a * a + b * b - c * c) >= 0);\n}\n", "    var ab: number =\
    \ b - a\n    var bc: number = c - b\n    var ac: number = a - c\n    return (ab\
    \ > 0 && ac > 0 && bc > 0)\n}\n", "\tif (Math.sqrt(a * a + b * b - c * c) < 0.1)\
    \ {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\n", "    if (a <\
    \ b + c || b < a + c || c < a + b) return false\n    var det = (a * a + b * b\
    \ - c * c)\n    return det != 0\n}\n</code>\n<|/ a |>\n<| c |>\nYou will need\
    \ to check if a negative is possible, it doesn't look like it is in the question.\
    \ But I would think it is impossible.\n<|/ c |>\n<| c |>\nOh I did not think about\
    \ that - I edited the answer to include checks for that.\n<|/ c |>\n<| a tags=boolean,javascript,typescript\
    \ |>\nThis answer is specific to TypeScript. \n<code>", "    if (a === b && b\
    \ === c) {\n        return true;\n    }\n\n    // http://mathworld.wolfram.com/Right-AngledTriangle.html\n\
    \    const d = Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2));\n    if (a === 0 ||\
    \ b === 0 || c === 0) {\n        return false;\n    }\n\n    // If the hypotenuse\
    \ is zero, then the three sides are collinear, \n    // and if the side with zero\
    \ angle is either one or two of the other \n    // side then it is a right angle\
    \ triangle by definition.  \n    if (Math.abs(d) === 0) {\n        if (a === b\
    \ || a === c) {\n            return a === c || a === 0;\n        } else if (a\
    \ === 0 || b === 0 || c === 0) {\n            return a === 0 || b === 0;\n   \
    \     } else {\n            return false;\n        }\n    }\n\n    const l1 =\
    \ Math.abs(b - c);\n    const l2 = Math.abs(a - c);\n    const l3 = Math.abs(a\
    \ - b);\n\n    return Math.abs((l1 + l2) / 2) === l1 && Math.abs(l2 / 2) === l3\
    \ && Math.abs(l3 / 2) === l1;\n}\n", "    let a = Math.abs(a);\n    let b = Math.abs(b);\n\
    \    let c = Math.abs(c);\n    return ((a >= b) && (a >= c)) || ((b >= c) && (b\
    \ >= a));\n}\n", "  let ab_x = Math.abs(b - a)\n  let ac_x  = Math.abs(c - a)\n\
    \  let ab_y = Math.abs(b - c)\n  let ac_y = Math.abs(a - c)\n  return (ab_x >\
    \ ac_x) && (ab_y == ac_y)\n}\n", "    return Math.abs(a - c) <= (b - a) * (Math.PI\
    \ / 2);\n}\n", "    return Math.abs(Math.sqrt(Math.pow((b - a), 2) + Math.pow((c\
    \ - b), 2)) - Math.sqrt(Math.pow(b, 2) + Math.pow(a, 2))) <= 1;\n}\n", "\treturn\
    \ b === a && c === a || c === b && a === b;\n}\n", "  var ab: number = Math.abs(a);\n\
    \  var bc: number = Math.abs(b);\n  var ac: number = Math.abs(c);\n  \n  return\
    \ ab > bc ? true : ab > ac ? false : (b > c ? true : b > ab ? false : true);\n\
    }\n", "\tif (a === b && b === c) {\n\t\treturn false\n\t} else if (a === c) {\n\
    \t\treturn true\n\t} else if (b === c) {\n\t\treturn false\n\t} else if (a > b\
    \ && b > c) {\n\t\treturn true\n\t} else {\n\t\treturn false\n\t}\n}\n", "  return\
    \ b * b > c * c;\n}\n", "\tif (Math.abs(a-b) > Math.abs(a-c) && Math.abs(b-c)\
    \ > Math.abs(b-a)) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\n",
  "    var ab: number = Math.abs(b - a);\n    var bc: number = Math.abs(c - b);\n\
    \    if (ab == 0) return b == 0;\n    return bc <= ab;\n}\n", "  return (\n  \
    \  Math.abs(Math.atan2(b, a)) >=\n    Math.abs(Math.atan2(c, b)));\n}\n", "  \
    \  let sine = Math.sin((Math.PI / 180) * (a - b));\n    let cosine = Math.cos((Math.PI\
    \ / 180) * (a - b));\n    let length = Math.sqrt(Math.pow(sine, 2) + Math.pow(cosine,\
    \ 2));\n    return length < Math.PI && length > (Math.PI / 2);\n}\n", "  let _a\
    \ = Math.abs(a);\n  let _b = Math.abs(b);\n  let _c = Math.abs(c);\n  if (_a >\
    \ _b && _b > _c) {\n    return true;\n  }\n  else if (_a > _b && _b == _c) {\n\
    \    return true;\n  }\n  else if (_a == _b) {\n    return true;\n  }\n  else\
    \ {\n    return false;\n  }\n}\n</code>\n<|/ a dscore=0 |>\n<| a tags=typescript,javascript\
    \ dscore=0 |>\nA simple approach is to check if any of the three is less than\
    \ the sum of the other two.\n\n<code>\nvar three = [3, 2, 6],\n    two = [1, 4,\
    \ 7],\n    one = [5, 8, 9];\n    \n    ", "    var ab = Math.sqrt(Math.pow(b,\
    \ 2) + Math.pow(a, 2));\n    var ac = Math.sqrt(Math.pow(c, 2) + Math.pow(a, 2));\n\
    \    if (ab < ac) {\n        return false;\n    }\n    if (a < c) {\n        ab\
    \ = Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2));\n        if (ab < ac) {\n    \
    \        return false;\n        }\n    }\n    return true;\n}\n", "\tif (Math.abs(a\
    \ + b + c) < 1) return false;\n\treturn (b + (b - a) * (c - b) * (a - b)) > 0;\n\
    }\n", "    return (\n        Math.abs(Math.atan2(b, b-c) * (180/Math.PI)) < 90\
    \ &&\n        Math.abs(Math.atan2(a-c, a-b) * (180/Math.PI)) < 90\n    );\n}\n",
  "    const a2 = a*a;\n    const b2 = b*b;\n    const c2 = c*c;\n    const det =\
    \ a2 + b2 + c2;\n    return det === 0 ||\n        ((det - a2 > b2) && (det - b2\
    \ > a2));\n}\n\n", "\tlet ab = ab_test(b,a),\n\t\tbc = ab_test(b,c);\n\t\n\treturn\
    \ ab && bc;\n}\n\t", "    if (Math.abs(a * b) > Math.abs(c * a)) {\n        if\
    \ (Math.abs(a * c) > Math.abs(b * b)) {\n            if (b > a && c > b) {\n \
    \               return true\n            }\n        }\n    }\n    return false\n\
    }\n", "    return Math.abs(Math.sin(a)) < 0.5;\n}\n", "    let side1 = Math.sqrt(Math.pow(a,\
    \ 2) + Math.pow(b, 2));\n    let side2 = Math.sqrt(Math.pow(c, 2) + Math.pow(b,\
    \ 2));\n    let side3 = Math.sqrt(Math.pow(a, 2) + Math.pow(c, 2));\n    let result\
    \ = false;\n    if (side1 > side2 && side1 > side3) {\n        result = true;\n\
    \    }\n    return result;\n}", "\treturn (Math.abs(b * b - a * c) >= Math.sqrt(Math.pow(b\
    \ * b - a * c, 2) + Math.pow(a * a - b * b, 2)))\n}\n", "    let left_angle =\
    \ Math.atan2(b,a); \n    let right_angle = Math.atan2(-1*c,a); \n    return Math.abs(left_angle\
    \ - right_angle) < Math.PI;\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't\
    \ look right to me. `a`, `b`, `c` aren't all negative. Also, I don't think you\
    \ need the `Math.abs(Math.atan2(-1*c,a))` part.\n<|/ c |>\n<| c |>\nThanks for\
    \ pointing out, I missed that part. Fixed it now.\n<|/ c |>\n<| c |>\nThanks,\
    \ I did not know you could do negative angles like that. Also I was wondering\
    \ if there was a way to do this without the mathematical functions.\n<|/ c |>\n\
    <| a dscore=0 |>\nI have written a javascript function that does exactly what\
    \ you are looking for. This function does not use any complex mathematics, it\
    \ just checks if a right angled triangle exists. Here is the code:\n<code>", " \
    \ var ab = Math.sqrt(a * a + b * b), ac = Math.sqrt(a * a + c * c), bc = Math.sqrt(b\
    \ * b + c * c), abc = Math.sqrt(ab * ab + ac * ac);\n  return ((bc == 0 || bc\
    \ == 1) && ab > a && ab > ac) || (ab == 0 || ab == 1) && ac > a && ac > ab;\n\
    }\n", "    return ((a + b > c) && (a + c > b) && (a + b + c >= 0));\n}\n</cell>\n\
    <text>\nQ9. Write a function is_diamond(a,b,c) that returns true if the sum of\
    \ the three sides (a+b+c) is equal to 100. If the three sides do not form a diamond,\
    \ return false.\n\n\n</text>\n<cell>", "    return (c * c - a * a == b * b); //\
    \ return true if the sides are equal\n}\n", "    return (b * b) - 4 * (a * c)\
    \ > 0;\n}\n", "\treturn (Math.abs(a) <= Math.max(Math.abs(a), Math.abs(b), Math.abs(c)))\
    \ && (Math.abs(b) <= Math.max(Math.abs(a), Math.abs(b), Math.abs(c))) && (Math.abs(c)\
    \ <= Math.max(Math.abs(a), Math.abs(b), Math.abs(c)));\n}\n", "    return b ===\
    \ c || (c === 0 && a === b);\n}\n", "  let deg_a = toRad(a);\n  let deg_c = toRad(c);\n\
    \  let deg_tol = 1e-10;\n\n  if (deg_a > deg_tol && deg_c > deg_tol) {\n    deg_a\
    \ = deg_a - deg_tol;\n    deg_c = deg_c - deg_tol;\n  } else if (deg_a < deg_tol\
    \ && deg_c > deg_tol) {\n    deg_a = deg_a - deg_tol;\n    deg_c = deg_c + deg_tol;\n\
    \  } else if (deg_a > deg_tol && deg_c < deg_tol) {\n    deg_a = deg_a + deg_tol;\n\
    \    deg_c = deg_c - deg_tol;\n  } else if (deg_a < deg_tol && deg_c < deg_tol)\
    \ {\n    deg_a = deg_a + deg_tol;\n    deg_c = deg_c + deg_tol;\n  }\n\n  let\
    \ is_a_angle = deg_a > 0;\n  let is_b_angle = deg_c > 0;\n  let is_both_angle\
    \ = deg_a > deg_c;\n\n  return is_a_angle && is_b_angle && is_both_angle;\n}\n",
  "  return a > 0 && b > 0 && c > 0 && a * a + b * b > c * c;\n}\n", "  const d =\
    \ b * b - 4 * a * c;\n  return d >= 0;\n}\n\n", "  if(b === c) {\n    return false\n\
    \  }\n  return (a * b <= c * c && a * c <= b * b) || (a * c <= b * b && a * b\
    \ <= c * c)\n}\n", "    if (Math.abs(a) >= Math.abs(b) && Math.abs(a) >= Math.abs(c))\
    \ {\n        if (Math.abs(b) > Math.abs(c)) {\n            if (b > 0) {\n    \
    \            return true;\n            } else {\n                return false;\n\
    \            }\n        } else if (Math.abs(c) > Math.abs(b)) {\n            if\
    \ (c > 0) {\n                return true;\n            } else {\n            \
    \    return false;\n            }\n        } else {\n            if (a > 0) {\n\
    \                return true;\n            } else {\n                return false;\n\
    \            }\n        }\n    } else {\n        return false;\n    }\n}\n\n",
  "\tif(b === 0) return true\n\tif(b == c || a === b) return true\n\tif(b > c) return\
    \ false\n\t\n\tlet delta = Math.abs(b - a)\n\tlet theta = Math.PI / 2.0\n\t\n\t\
    if(b > a) theta += theta\n\tif(b > c) theta -= theta\n\t\n\tlet is_true = (a *\
    \ Math.sin(theta) - c * Math.cos(theta)) > 0\n\t\n\treturn is_true\n}", "    const\
    \ ab: number = b - a\n    const ac: number = c - a\n    const b: number = Math.sqrt(ab\
    \ * ab + ac * ac)\n    const c: number = Math.atan2(ab, ac)\n    return b <= 1\n\
    }", "  var angle1 = Math.atan2(b, c);\n  var angle2 = Math.atan2(a, b);\n  var\
    \ angle3 = Math.atan2(c, b);\n\n  return angle1 === angle2 || angle1 === angle3\
    \ || angle2 === angle3;\n}\n", "    if (a === 0 || b === 0 || c === 0) {\n   \
    \     return false;\n    }\n    let area_1 = Math.abs((a * (b + c)) / 2)\n   \
    \ let area_2 = Math.abs((a * b) / 2)\n    let area_3 = Math.abs((a * c) / 2)\n\
    \    return area_1 === area_2 || area_1 === area_3;\n}\n", "    return (((b -\
    \ a) * (c - b)) > (-(b + c) * (a + b)))\n}\n", "  let left = c*c - a*b;\n  let\
    \ right = 2 * (c*a + b * c);\n  return left >= right ? true : false;\n}\n\n",
  "  const bsq = b * b;\n  const csc = c * c;\n  const absq = a * b;\n  const abcsc\
    \ = a * c * c;\n  \n  return bsq + csc == absq &&\n    csc - absq == abcsc;\n\
    }\n", "    return is_right_angle(a, b, c);\n}\n", "  let _a = [a, b, c]\n  let\
    \ max_a = Math.max(_a[0], _a[1], _a[2])\n  let min_a = Math.min(_a[0], _a[1],\
    \ _a[2])\n\n  let _a2 = [_a[0], _a[2], min_a]\n  let min_a2 = Math.min(_a2[0],\
    \ _a2[1], _a2[2])\n\n  let _a3 = [_a[0], _a[1], max_a]\n  let max_a3 = Math.max(_a3[0],\
    \ _a3[1], _a3[2])\n\n  return ((min_a2 + max_a3 - min_a) % 2 === 0)\n}\n\n", "\t\
    var ab: number = Math.pow(a, 2) - Math.pow(b, 2),\n\t\tac: number = Math.pow(a,\
    \ 2) - Math.pow(c, 2),\n\t\tbc: number = Math.pow(b, 2) - Math.pow(c, 2);\n\t\
    return ab == 0 && ac == 0 && bc == 0;\n}\n", "\treturn (b * b) - (4 * c * c) >=\
    \ 0;\n}\n", "    let ab: number = Math.sqrt(a ** 2 + b ** 2);\n    let bc: number\
    \ = Math.sqrt(b ** 2 + c ** 2);\n    let ac: number = Math.sqrt(a ** 2 + c **\
    \ 2);\n    if (ab * bc > ac * c) {\n        return true;\n    } else {\n     \
    \   return false;\n    }\n}\n", "  return ((a > b) ? (c > a && c > b) : (c > a\
    \ && c > b))\n}\n", "  if (a === b) {\n    return b > c ? true : false;\n  }\n\
    \  if (b === c) {\n    return c > a ? true : false;\n  }\n  if (c === b) {\n \
    \   return a > c ? true : false;\n  }\n  return c > a ? true : false;\n}\n", "\t\
    return (b - c) >= -Math.max(a, b, c);\n}\n", "  const is_right_angle = (a * b)\
    \ - ((a * c) - (b * c)) > 0\n  return is_right_angle\n}\n", "  var a = Math.abs(a);\n\
    \  var b = Math.abs(b);\n  var c = Math.abs(c);\n  return a > b + c && b > a +\
    \ c && c > a + b;\n}\n", "    \n    var ab = Math.sqrt(a*a + b*b);\n    var ac\
    \ = Math.sqrt(a*a + c*c);\n    var bc = Math.sqrt(b*b + c*c);\n    \n    return\
    \ ( (ab + ac - bc) === 0 ) ? true : false;\n}\n", "  const side1 = (b * b) - (4\
    \ * a * c)\n  const side2 = (b * b) - (4 * a)\n  return side1 === 0 || side2 ===\
    \ 0\n}\n", "  if (b === 0) return false;\n  if (c === 0) return false;\n  if (Math.abs(Math.sqrt(Math.pow(b,\
    \ 2) - (4 * a * c))) <= 0.001) return true;\n  return false;\n}\n</code>\n<|/\
    \ a tags=algorithm,math |>\n<| c |>\nThis seems wrong to me in many ways. For\
    \ instance, if the triangle is colinear you return true, but in other cases they\
    \ might return false (though I think this is rarely the case). Also, even if the\
    \ triangle is colinear you still return true even if the three sides form an equilateral\
    \ triangle (which would mean you always return true). That doesn't seem correct,\
    \ especially for a computer scientist (my opinion).\n<|/ c |>\n<| c |>\nThe first\
    \ one I agree with (it just returns false if the triangle is colinear). However,\
    \ a triangle that has one diagonal and two equilateral sides would not return\
    \ true in that case. It would only be a false positive.\n<|/ c |>\n<| c |>\nAgreed,\
    \ I missed that. Fixed it. I think it is correct now.\n<|/ c |>\n<| c |>\nI think\
    \ it needs to be `Math.abs(Math.sqrt(Math.pow(b, 2) - 4 * a * c))) <= 0.001`\n\
    <|/ c |>\n<| c |>\nIf `Math.abs(Math.sqrt(Math.pow(b, 2) - 4 * a * c))) <= 0.001`,\
    \ then it must be an equilateral triangle (as `b*b - 4 * a * c = 0`). To me that\
    \ would mean you always return `true`, even if the triangle is a true equilateral\
    \ triangle (like OP said in the comments).\n<|/ c |>\n<| a tags=algorithm,math\
    \ |>\nThis problem is known as the\n  two-sided polygon problem, where one side\n\
    \  is determined by the other\n\nThis can be solved using boolean algebra. Here\
    \ is the truth table:\n<code>\n| A | B | C |\n| 0 | 0 | 1 |\n| 1 | 1 | 1 |\n|\
    \ 0 | 1 | 0 |\n</code>\nSince C is only 1 or 0, any solution involving A or B\
    \ is also a solution involving C.  Hence any solution involving A or B can be\
    \ converted to one involving C. Hence this problem can be solved using boolean\
    \ algebra.\n<|/ a dscore=5 |>\n<| c |>\nHow does this work? What does this mean?\
    \ As a newbie, I don't really understand the math ", "    return a + b > c &&\
    \ a + c > b && b + c > a;\n}\n", "  let deg_a = Math.degToRad(a);\n  let deg_c\
    \ = Math.degToRad(c);\n  let deg_d = Math.degToRad(b);\n\n  if (Math.abs(deg_a)\
    \ > Math.abs(deg_c) || Math.abs(deg_a) > Math.abs(deg_d)) {\n    return false;\n\
    \  }\n\n  let xc1 = deg_c * Math.sin(deg_a) / Math.sin(deg_d);\n  let xc2 = deg_a\
    \ * Math.cos(deg_c) / Math.cos(deg_d);\n  let xc3 = deg_a * Math.cos(deg_d) /\
    \ Math.cos(deg_c);\n  let xs1 = deg_c * Math.sin(deg_d) / Math.sin(deg_c);\n\n\
    \  let xs1 = xc1 + xc2 + xc3;\n  let xc1 = Math.cos(deg_d);\n  let xs2 = -xc1\
    \ + xc2 + xc3;\n\n  if (Math.abs(xs1 - xc1) > 0.01) {\n    return false;\n  }\n\
    \  if (Math.abs(xs2 - xc2) > 0.01) {\n    return false;\n  }\n  if (Math.abs(xs1\
    \ - xc3) > 0.01) {\n    return false;\n  }\n  return true;\n}\n", "  return (b\
    \ * b + c * c - (a * a) - (b * b)) == 0;\n}\n", "    var ab: number = b - a\n\
    \    var ac: number = c - a\n    if (ab < ac) {\n        if (ab > 0) {\n     \
    \       if (ac > 0) {\n                return false\n            } else {\n  \
    \              return true\n            }\n        } else {\n            return\
    \ true\n        }\n    } else {\n        return false\n    }\n}\n", "  return\
    \ (\n    Math.abs(b * b - a * c) ===\n    Math.sqrt(Math.abs(a * a + b * b - a\
    \ * a + c * c - b * b)) &&\n    Math.abs(a * a * b - a * b - a * c) ===\n    Math.sqrt(Math.abs(a\
    \ * a + b * b - a * a + c * c - b * b)) &&\n    Math.abs(b * b - a * c) ===\n\
    \    Math.sqrt(Math.abs(a * a + b * b - a * a + c * c - b * b))\n  )\n}\n", "\t\
    // The hypotenuse is sqrt(x^2 + y^2)\n\tconst hypot = Math.sqrt(a * b + c * c);\n\
    \treturn hypot === Math.sqrt(a * a + c * c);\n}\n", "  return ((b - a) * (c -\
    \ b) == (c - a) * (b - a))\n}\n", "    return (\n        Math.sqrt((a ** 2) +\
    \ (b ** 2)) == Math.sqrt((c ** 2) + (a ** 2)) \n    )\n}\n</code>\n<|/ a tags=javascript,trigonometry\
    \ |>\n<| c |>\nYou might want to add some more explanation, rather than simply\
    \ posting a code dump.\n<|/ c |>\n<| c |>\nThis is the answer I was looking for.\
    \ Thanks for posting. I appreciate your time and effort :D\n<|/ c |>\n<| c |>\n\
    If anyone is wondering how to use this answer in JavaScript or React or TypeScript,\
    \ here is an example:\n\n`var a = Math.sqrt(Math.pow(this.state.rx, 2) + Math.pow(this.state.ry,\
    \ 2));`\n`var b = Math.sqrt(Math.pow(this.state.rx + this.state.dx, 2) + Math.pow(this.state.ry\
    \ + this.state.dy, 2));`\n`var c = Math.sqrt(Math.pow(this.state.rx - this.state.dx,\
    \ 2) + Math.pow(this.state.ry - this.state.dy, 2));`\n`var isRightAngle = Math.sqrt((a**2)\
    \ + (b**2) - (c**2)) >= 0;`\n<|/ c |>\n<| a dscore=4 |>\n<code>", "  return (b\
    \ - a) * (c - b) <= 0;\n}\n", "  const ab: number = b - a\n  const bc: number\
    \ = c - b\n  const ab_square: number = ab * ab\n  const bc_square: number = bc\
    \ * bc \n  return ab_square + bc_square <= 0;\n}", "    if (b == c)\n        return\
    \ false\n\n    var s = a * a + b * b - c * c\n    var sq = s * s\n\n    if (sq\
    \ < 0)\n        return false\n\n    var epsilon = 1e-12\n    if (sq < epsilon)\n\
    \        return true\n\n    var d = b * b - a * c\n\n    if (Math.abs(d) < epsilon)\n\
    \        return true\n\n    var sq2 = sq / 2\n    return Math.sign(b) == Math.sign(c\
    \ / 2) == Math.sign(a * sq2 - b * sq2)\n}\n", "    let left_angle = Math.abs(180\
    \ * Math.acos((a + b + c) / sqrt(a * a + b * b + c * c)) / Math.PI);\n    let\
    \ right_angle = Math.abs(180 * Math.acos((a - b - c) / sqrt(a * a + b * b + c\
    \ * c)) / Math.PI);\n    return (left_angle <= right_angle);\n}\n", "\tif (is_number(a)\
    \ && is_number(b) && is_number(c)) {\n\t\treturn ((Math.pow(b, 2) + Math.pow(c,\
    \ 2)) == Math.pow(a, 2));\n\t} else {\n\t\treturn false;\n\t}\n}\n", "\tlet s1:\
    \ number = Math.sqrt((c * c) + (b * b));\n\tlet s2: number = Math.sqrt((a * a)\
    \ + (c * c));\n\tif (Math.abs(s1 - s2) < 0.0000001) {\n\t\treturn true;\n\t}\n\
    \treturn false;\n}\n", "  if (b === 0 || c === 0) {\n    return false;\n  }\n\
    \  if (c > Math.pow(b, 2)) {\n    // no 90 degree right angle\n    return false;\n\
    \  }\n  if (Math.abs(a - (b * b + c * c - a * b * c)) < 1) {\n    // no right\
    \ angle\n    return false;\n  }\n  return true;\n}\n", "  return ((Math.pow(a,\
    \ 2) + Math.pow(b, 2)) == Math.pow(c, 2))\n}\n</cell>\n<cell>", "\tlet ab = a\
    \ - b;\n\tlet bc = b - c;\n\treturn (ab + bc) > 0;\n}\n", "    const ab: number\
    \ = b - a\n    const ac: number = c - a\n    const bc: number = b - c\n    const\
    \ ca: number = a - c\n    const cd: number = c - d\n\n    return (\n        ab\
    \ * ab > 0 &&\n        ac * ac > 0 &&\n        ab * ac > 0 &&\n        ab * bc\
    \ > 0 &&\n        ac * cd > 0 &&\n        ac * cd > 0 &&\n        ab * bc > 0\
    \ &&\n        bc * cd > 0 &&\n        ab * cd > 0 &&\n        ab * cd > 0\n  \
    \  )\n}\n", "    // https://stackoverflow.com/questions/563198/how-do-you-check-if-a-given-point-is-in-a-triangle\n\
    \    if (Math.abs(a) < 1 && Math.abs(b) < 1 && Math.abs(c) < 1) {\n        return\
    \ false\n    }\n    const ab = a - b\n    const bc = b - c\n    const cd = c -\
    \ a\n    return (\n        ((ab === 0 && bc === 0 && cd === 0) || (bc === 0 &&\
    \ ab === 0 && cd === 0)) ||\n        ((bc === 0 && ab === 0 && cd === 0) || (cd\
    \ === 0 && ab === 0 && bc === 0)) ||\n        ((cd === 0 && ab === 0 && bc ===\
    \ 0) || (ab === 0 && cd === 0) || (bc === 0 && ab === 0))\n    )\n}\nexport {\n\
    \    right_angle_triangle,\n}\n</pre>\n        </article>\n    </section>\n\n\n\
    \n\n</div>\n\n<nav>\n    <h2><a href=\"index.html\">Home</a></h2><h3>Modules</h3><ul><li><a\
    \ href=\"module-bauble.html\">bauble</a></li><li><a href=\"module-figtree.html\"\
    >figtree</a></li><li><a href=\"module-tree.html\">tree</a></li></ul><h3>Classes</h3><ul><li><a\
    \ href=\"module-bauble.Bauble.html\">Bauble</a></li><li><a href=\"module-figtree.FigTree.html\"\
    >FigTree</a></li><li><a href=\"module-tree.Tree.html\">Tree</a></li><li><a href=\"\
    module-tree-Node.html\">Node</a></li><li><a href=\"module-tree-Router.html\">Router</a></li><li><a\
    \ href=\"module-tree-Tracer.html\">Tracer</a></li></ul><h3>Global</h3><ul><li><a\
    \ href=\"global.html#branch\">branch</a></li><li><a href=\"global.html#branchLabel\"\
    >branchLabel</a></li><li><a href=\"global.html#branchPath\">branchPath</a></li><li><a\
    \ href=\"global.html#circle\">circle</a></li><li><a href=\"global.html#dateToYMD\"\
    >dateToYMD</a></li><li><a href=\"global.html#debug\">debug</a></li><li><a href=\"\
    global.html#draw\">draw</a></li><li><a href=\"global.html#endsWith\">endsWith</a></li><li><a\
    \ href=\"global.html#getEnv\">getEnv</a></li><li><a href=\"global.html#getRandom\"\
    >getRandom</a></li><li><a href=\"global.html#getSteps\">getSteps</a></li><li><a\
    \ href=\"global.html#gt\">gt</a></li><li><a href=\"global.html#init\">init</a></li><li><a\
    \ href=\"global.html#initFigTree\">initFigTree</a></li><li><a href=\"global.html#insert\"\
    >insert</a></li><li><a href=\"global.html#isBauble\">isBauble</a></li><li><a href=\"\
    global.html#isFigTree\">isFigTree</a></li><li><a href=\"global.html#isTree\">isTree</a></li><li><a\
    \ href=\"global.html#isValidEnv\">isValidEnv</a></li><li><a href=\"global.html#label\"\
    >label</a></li><li><a href=\"global.html#leapYear\">leapYear</a></li><li><a href=\"\
    global.html#least\">least</a></li><li><a href=\"global.html#legend\">legend</a></li><li><a\
    \ href=\"global.html#makeEdges\">makeEdges</a></li><li><a href=\"global.html#makeGraph\"\
    >makeGraph", "    // https://stackoverflow.com/a/271930/6773500\n    // https://stackoverflow.com/a/478280\n\
    \    // https://stackoverflow.com/a/538665\n    let ax = Math.sqrt(a * a)\n  \
    \  let ay = Math.sqrt(a * a - b * b)\n    let bx = Math.sqrt(b * b)\n    let by\
    \ = Math.sqrt(b * b - c * c)\n    let cx = Math.sqrt(c * c)\n    let cy = Math.sqrt(c\
    \ * c - a * a)\n    return ay >= bx && bx >= cx && cy >= ax\n}\n</code>\n<|/ a\
    \ tags=geometry,javascript,algorithm |>\n<| c |>\nThis answer would be more helpful\
    \ if you could explain how it works.\n<|/ c |>\n<| a |>\nI used this code to solve\
    \ my problem after a long search I found this solution thanks.\n<code>", "   \
    \ if (a === 0) return (c >= b && c >= a + b) || (c + a >= b);\n    if (b === 0)\
    \ return (c >= a && c >= a + b) || (c + b >= a);\n    if (c === 0) return (a >=\
    \ b && a >= a + b) || (a + c >= b);\n    return true;\n}\n", "  if((b * b - c\
    \ * a) == 0) {\n    return false\n  }\n  else if((b * b + c * a) == 0) {\n   \
    \ return false\n  }\n  else {\n    console.log(\"a: \", a, \"b: \", b, \"c: \"\
    , c, \"ab: \", b * b, \"ac: \", c * a)\n    let a1 = (b * b - c * a) / b * b\n\
    \    let a2 = (c * a - b * b) / c * a\n    console.log(\"a1: \", a1, \"a2: \"\
    , a2)\n    if(a1 > a2) {\n      return true\n    }\n    else {\n      return false\n\
    \    }\n  }\n}\n", "  return (a + b > c && a + c > b && b + c > a)\n}\n", "  \
    \  let sum = a+b+c\n    return (Math.abs(a-b) <= sum && Math.abs(a-c) <= sum &&\
    \ Math.abs(b-c) <= sum)\n}\n\n", "    // https://stackoverflow.com/questions/9272045/check-if-a-triangle-is-right-angled\n\
    \    const delta = Math.abs(b - c);\n    const s = (b + c) / 2;\n    const c1\
    \ = Math.sqrt(a * a - s * s);\n    const c2 = Math.sqrt(b * b - c * c);\n    const\
    \ c3 = Math.sqrt(c * c - a * a);\n    // Check if it's a right-angled triangle\n\
    \    if (c2 * c3 >= delta) {\n        return Math.abs(delta) >= c1 * c1; // Check\
    \ if delta is right angle\n    }\n    return false;\n}\n", "  if (a > b+c || b\
    \ > a+c || c > b+a) { return false; }\n  const ab: number = Math.sqrt(a*a + b*b);\n\
    \  const bc: number = Math.sqrt(b*b + c*c);\n  const ac: number = Math.sqrt(a*a\
    \ + c*c);\n  return (ab > bc + ac);\n}\n\n", "\tif (a == 0 || b == 0 || c == 0\
    \ || a == b || a == c || b == c) return true;\n\telse return a * a + b * b ==\
    \ c * c;\n}", "    // First we determine the sign of the angles:\n    // If the\
    \ first side is positive, our angle is 45-degrees or greater.\n    // If the second\
    \ side is positive, our angle is 90-degrees or greater.\n    // If the third side\
    \ is positive, our angle is 135-degrees or greater.\n    // We only allow a triangle\
    \ to be created if the angles are all greater\n    // than 90-degrees or all less\
    \ than 135-degrees.\n    // The reason we only allow a triangle to be created\
    \ if all three angles are \n    // greater than 135-degrees is because this would\
    \ indicate that the third \n    // side is not oriented correctly.\n    // The\
    \ reason we only allow a triangle to be created if all three angles are \n   \
    \ // greater than 90-degrees is because this would indicate that the first \n\
    \    // side is not oriented correctly.\n    var sign_a = isPositive(a) ? 1 :\
    \ -1;\n    var sign_b = isPositive(b) ? 1 : -1;\n    var sign_c = isPositive(c)\
    \ ? 1 : -1;\n    \n    // To ensure the correct orientation of the triangle we\
    \ must ensure that \n    // each of the three angles are greater than or equal\
    \ to 135-degrees. \n    // To ensure this we check that the sum of the two absolute\
    \ values is \n    // greater than or equal to 135 and that the sum of the absolute\
    \ values is \n    // less than or equal to 180.\n    // To ensure this we check\
    \ that both of the summed absolute values are \n    // greater than or equal to\
    \ 135-degrees and less than or equal to 180.\n    // This ensures that the triangle\
    \ is oriented correctly if the sum of \n    // the angles is greater than or equal\
    \ to 135-degrees.\n    // We also have to account for the fact that when the sum\
    \ is \n    // greater than or equal to 180 we must add the two angles again to\
    \ \n    // ensure the sum is greater than or equal to 180.\n    // The reason\
    \ we add the two angles again is because this ensures that \n    // when the sum\
    \ is greater than or equal to 180 we also have to add the \n    // second angle\
    \ to ensure the sum is greater than or equal to 180.\n    // The reason we add\
    \ the second angle is because this ensures that when the \n    // sum is greater\
    \ than or equal to 180 we also have to add the second angle \n    // to ensure\
    \ the sum is greater than or equal to 180.\n    return ((sign_a >= 0 && sign_b\
    \ <= 0 && sign_c <= 0) || (sign_a <= 0 && sign_b >= 0 && sign_c <= 0) || (sign_a\
    \ <= 0 && sign_b <= 0 && sign_c >= 0) || (sign_a >= 0 && sign_b >= 0 && sign_c\
    \ >= 0))\n            && (Math.abs(a + b) <= Math.abs(a + c))\n            &&\
    \ (Math.abs(a + c) <= Math.abs(b + c))\n            && (Math.abs(", "\treturn\
    \ (Math.abs(Math.sin((a - b) / Math.PI)) < 0.3 &&\n\t\t\tMath.abs(Math.sin((a\
    \ - c) / Math.PI)) < 0.3 &&\n\t\t\tMath.abs(Math.sin((b - c) / Math.PI)) < 0.3);\
    \ \n}\n", "    const a = Math.abs(a)\n    const b = Math.abs(b)\n    const c =\
    \ Math.abs(c)\n    return ((b * b) - ((a * a) * (c - c))) <= 0 && (((a - a) *\
    \ (b - b)) <= 0 || (b * b) - ((a * a) * (a - a)) <= 0)\n}\n", "\t\n\tif (a ==\
    \ 0 || b == 0 || c == 0) return false;\n\t\n\treturn (a + b > c + a && b + c >\
    \ a + b && a + c > b + a && b + c > a + b);\n}\n\n", "    if (a === 0 || b ===\
    \ 0 || c === 0) return false;\n    let ab = a - b;\n    let bc = b - c;\n    let\
    \ cd = c - d;\n    // If either of the sides is zero then there is no right-angle\
    \ triangle\n    if (ab === 0 && bc === 0 && cd === 0) return false;\n    // If\
    \ the hypotenuse is zero there is no right-angle triangle\n    if (Math.abs(ab)\
    \ < Math.abs(bc) && Math.abs(ab) < Math.abs(cd)) return false;\n    // If the\
    \ hypotenuse is zero there is no right-angle triangle\n    if (Math.abs(bc) <\
    \ Math.abs(cd)) return false;\n    // At this point the hypotenuse is guaranteed\
    \ to be non-zero\n    // so we can continue\n    if (Math.abs(ab) < Math.abs(bc)\
    \ && Math.abs(ab) < Math.abs(cd)) return false;\n    // At this point the hypotenuse\
    \ is guaranteed to be non-zero\n    // so we can continue\n    if (Math.abs(bc)\
    \ < Math.abs(cd)) return false;\n    // At this point the hypotenuse is guaranteed\
    \ to be non-zero\n    // so we can continue\n    if (Math.abs(ab) < Math.abs(bc)\
    \ && Math.abs(ab) < Math.abs(cd)) return false;\n    // At this point the hypotenuse\
    \ is guaranteed to be non-zero\n    // so we can continue\n    if (Math.abs(bc)\
    \ < Math.abs(cd)) return false;\n    // At this point the hypotenuse is guaranteed\
    \ to be non-zero\n    // so we can continue\n    if (Math.abs(ab) < Math.abs(bc)\
    \ && Math.abs(ab) < Math.abs(cd)) return false;\n    // At this point the hypotenuse\
    \ is guaranteed to be non-zero\n    // so we can continue\n    if (Math.abs(bc)\
    \ < Math.abs(cd)) return false;\n    // At this point the hypotenuse is guaranteed\
    \ to be non-zero\n    // so we can continue\n    if (Math.abs(ab) < Math.abs(bc)\
    \ && Math.abs(ab) < Math.abs(cd)) return false;\n    // At this point the hypotenuse\
    \ is guaranteed to be non-zero\n    // so we can continue\n    if (Math.abs(bc)\
    \ < Math.abs(cd)) return false;\n    // At this point the hypotenuse is guaranteed\
    \ to be non-zero\n    // so we can continue\n    if (Math.abs(ab) < Math.abs(bc)\
    \ && Math.abs(ab) < Math.abs(cd)) return false;\n    // At this point the hypotenuse\
    \ is guaranteed to be non-zero\n    // so we can continue\n    if (Math.abs(bc)\
    \ < Math.abs(cd)) return false;\n    // At this point the hypotenuse is guaranteed\
    \ to be non-zero\n    // so we can continue\n    if (Math.abs(ab) < Math.abs(bc)\
    \ && Math.abs(ab) < Math.abs(cd)) return false;\n    // At this point the hypotenuse\
    \ is guaranteed to be non-zero\n    // so we can continue\n    if (Math.abs(bc)\
    \ < Math.abs(cd)) return false;\n    // At this point the hypotenuse is guaranteed\
    \ to be non-zero\n    // so we can continue\n    if (Math.abs(ab) < Math.abs(bc)\
    \ && Math.abs(ab) < Math.abs(cd)) return false;", "  return (((b - a) * (c - b))\
    \ <= 0);\n}\n", "\tif (Math.abs(Math.sqrt(a * a + b * b) - c) >\n\t\tMath.sqrt(a\
    \ * a + b * b))\n\t\treturn false;\n\n\treturn true;\n}\n", "  if (a >= b && a\
    \ >= c) {\n    const aa: number = a;\n    const bb: number = b;\n    const cc:\
    \ number = c;\n    return aa < bb && aa < cc || bb < cc && bb < aa;\n  } else\
    \ if (b >= a && b >= c) {\n    const aa: number = b;\n    const bb: number = a;\n\
    \    const cc: number = c;\n    return aa < bb && aa < cc || bb < cc && bb < aa;\n\
    \  } else {\n    const aa: number = a;\n    const bb: number = b;\n    const cc:\
    \ number = c;\n    return aa < bb && bb < cc;\n  }\n}\n", "\treturn (Math.abs(Math.sqrt(a\
    \ * a + b * b - c * c)) === 2 * Math.sqrt(a * a + b * b - c * c));\n}\n", "  \
    \  const absqr = (a * a + b * b) // ab is square of a\n    const acsqr = (a *\
    \ a + c * c) // ac is square of a\n    const bcsqr = (b * b + c * c) // bc is\
    \ square of b\n    return absqr + acsqr === bcsqr // Check if sum of ab and ac\
    \ equals sum of bc and c\n}\n", "  let ab = a - b;\n  let ac = a - c;\n  let bc\
    \ = b - c;\n  return (Math.abs(ab * ac) < 1e-10 && Math.abs(bc * b) < 1e-10);\n\
    }\n\n", "    return Math.abs(b * b - 4 * a * c) >= 0\n}\n", "    return ((b -\
    \ a) * (c - b)) > 0;\n}\n", "  var AB = b-a;\n  var AC = c-a;\n  var AB_AC = Math.sqrt(AB*AB\
    \ + AC*AC);\n  return AB_AC >= 0;\n}\n", "\tif (Math.abs(a - b) <= 1 && Math.abs(a\
    \ - c) <= 1 &&\n\t\tMath.abs(b - c) <= 1) {\n\t\treturn true;\n\t} else {\n\t\t\
    return false;\n\t}\n}\n\n", "  // If the length of the sides is 0, then it is\
    \ a right angle triangle.\n  if (a === 0 && b === 0 && c === 0) {\n    return\
    \ true\n  }\n  \n  // Otherwise, if the lengths of the sides are equal, then it's\
    \ a right angle\n  // triangle.\n  else if (a === b) {\n    return true\n  }\n\
    \  \n  // Otherwise, if the length of the hypotenuse is longer than the side lengths\n\
    \  // of the two opposite sides, then it's a right angle triangle.\n  else if\
    \ (a > c || (a === c && b > b)) {\n    return true\n  }\n  \n  return false\n\
    }\n\n", "  return ((b*b + c*c - a*a) >= 0);\n}\n", "    return (a + b > c) &&\
    \ (a + c > b) && (b + c > a); \n}\n</code>\n<|/ a dscore=0 tags=javascript,trigonometry,math,geometry\
    \ |>\n<| a tags=javascript,trigonometry,math,geometry |>\nYou have to do some\
    \ maths first:\n\nDefine 3 points on the unit square, P1, P2 and P3.\nCalculate\
    \ the angle between the lines connecting each point to the opposite points.\n\
    If this angle is less than 45 degrees, P1, P2 and P3 form a triangle.\nIf this\
    \ angle is greater than 45 degrees, P1, P2 and P3 form an equilateral triangle.\n\
    <|/ a dscore=0 |>\n<| a dscore=0 |>\nThis is not the only solution, but I find\
    \ it interesting\nI believe it is the most straight forward and accurate to solve\
    \ the problem\n<code>", "  return Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2)) ===\n\
    \    Math.sqrt(Math.pow(c, 2) + Math.pow(b, 2));\n}\n```\n\n---\n## Questions\n\
    \n- Explain how you would calculate `e`\n- [How could you use mathematical functions\
    \ to calculate pi](https://docs.google.com/presentation/d/1rzlCjP7pZCg4wRYR6oJmC8Ej0QHvWpzZNyM0UGt4o/pub?start=false)\n\
    - [How do you find common factors between two numbers?](https://www.quora.com/How-do-you-find-common-factors-between-two-numbers)\n\
    - [How to calculate trig functions in javascript](https://www.quora.com/How-do-you-calculate-trigonometric-functions-in-javascript)\n\
    - [How to implement a factorial function in javascript](https://www.quora.com/How-do-you-implement-a-factorial-function-in-javascript)\n\
    - [How can you create a list from an array in javascript](https://www.quora.com/How-can-you-create-a-list-from-an-array-in-javascript)\n\
    - [How do you check whether a number is prime or not?](https://www.quora.com/How-do-you-check-whether-a-number-is-prime-or-not)\n\
    - [How do you find the largest palindromic number below a number n](https://www.quora.com/How-do-you-find-the-largest-palindromic-number-below-a-number-n)\n\
    - [How to write a function that returns true if the number passed is prime and\
    \ false if it is not](https://www.quora.com/How-do-you-write-a-function-that-returns-true-if-the-number-passed-is-prime-and-false-if-it-is-not)\n\
    - [How do you find all the palindromic numbers below a certain number n](https://www.quora.com/How-do-you-find-all-the-palindromic-numbers-below-a-certain-number-n)\n\
    \n---\n## Practice\n\n- [How to calculate Pi with Javascript](https://www.quora.com/How-do-you-calculate-Pi-with-Javascript)\n\
    - [How to create a factorial function](https://www.quora.com/How-do-you-create-",
  "    var left_side = a - b;\n    var right_side = c - b;\n    var is_right_angle\
    \ = Math.abs(right_side) >= Math.abs(left_side);\n    return is_right_angle;\n\
    }\n", "\treturn (c-a) * (c-b) <= 0;\n}\n", "    let a1 = Math.abs(a), b1 = Math.abs(b),\
    \ c1 = Math.abs(c);\n    return a1 > b1 && b1 > c1 && (a1 + b1 + c1 == a * b *\
    \ c);\n}\n", "  return b * b - 4 * a * c > 0\n}\n", "  if (a >= b + c || b >=\
    \ a + c || c >= a + b) {\n    return false\n  } else {\n    return true\n  }\n\
    }\n", "    let rad = Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2));\n    let angle\
    \ = 180 - (Math.atan2(b, a) / rad);\n    return angle > 90 && angle < 270;\n}\n",
  "\tif (Math.abs(a - b) <= 1 && Math.abs(b - c) <= 1 && Math.abs(c - a) <= 1) {\n\
    \t\treturn true;\n\t}\n\treturn false;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
