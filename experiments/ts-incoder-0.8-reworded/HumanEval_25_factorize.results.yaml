language: ts
name: HumanEval_25_factorize
results:
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  let factors = [1]\n  if (n <= 0) {\n    return factors\n  }\n\n\
    \  let i = 2\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) {\n      factors.push(i,\
    \ n / i)\n    }\n    i++\n  }\n  return factors\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1\n]\n\n\
    should loosely deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmphhgdyp00.js:27:12)\n\
    \    at Object.<anonymous> (/tmp/tmphhgdyp00.js:36:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1 ],\n \
    \ expected: [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014247
- exit_code: 2
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  var factors: number[] = [];\n  var i: number;\n  var isPrime:\
    \ boolean;\n  for (i = 2; i <= n / i; i++) {\n    isPrime = true;\n    for (factor\
    \ = 2; factor <= n / i; factor++) {\n      if (n % i == 0) {\n        isPrime\
    \ = false;\n        break;\n      }\n    }\n    if (isPrime) {\n      factors.push(i);\n\
    \    }\n  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n\
    \  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n\
    \  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp1po7g05s.ts(16,10): error TS2552: Cannot find name
    ''factor''. Did you mean ''factors''?

    ../../../../../tmp/tmp1po7g05s.ts(16,22): error TS2552: Cannot find name ''factor''.
    Did you mean ''factors''?

    ../../../../../tmp/tmp1po7g05s.ts(16,39): error TS2552: Cannot find name ''factor''.
    Did you mean ''factors''?

    '
  timestamp: 1660014247
- exit_code: 0
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    let arr: number[] = [];\n    for (let i = 2; i <= n; i++) {\n\
    \        while (n % i === 0) {\n            arr.push(i);\n            n = n /\
    \ i;\n        }\n    }\n    return arr;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n\
    \  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n\
    \  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014247
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  let factors: number[] = [];\n  if (n % 2 == 0) {\n    factors.push(2);\n\
    \  }\n  while (n % 2 == 0) {\n    n /= 2;\n    factors.push(2);\n  }\n  while\
    \ (n % 3 == 0) {\n    n /= 3;\n    factors.push(3);\n  }\n  while (n % 5 == 0)\
    \ {\n    n /= 5;\n    factors.push(5);\n  }\n  return factors;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  2\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmpe20q9_pw.js:32:12)\n\
    \    at Object.<anonymous> (/tmp/tmpe20q9_pw.js:41:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 2 ],\n\
    \  expected: [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014247
- exit_code: 2
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const numFactors = [];\n  for (let x = 2; x <= n; x++) {\n   \
    \ if (n % x === 0) {\n      for (let i = 0; i <= numFactors.length; i++) {\n \
    \       if (x % numFactors[i] === 0) {\n          numFactors.push(x);\n      \
    \    break;\n        }\n      }\n    }\n  }\n\n  return numFactors;\n}\n</code>\n\
    <|/ a tags=math,javascript |>\n<| a dscore=2 tags=math,javascript |>\nThis is\
    \ for prime factorisation. \n<code>\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n\
    \  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n\
    \  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp0vml3x7x.ts(25,2): error TS1110: Type expected.

    ../../../../../tmp/tmp0vml3x7x.ts(25,3): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmp0vml3x7x.ts(26,2): error TS1109: Expression expected.

    ../../../../../tmp/tmp0vml3x7x.ts(26,4): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmp0vml3x7x.ts(27,2): error TS1109: Expression expected.

    ../../../../../tmp/tmp0vml3x7x.ts(27,6): error TS1005: '';'' expected.

    ../../../../../tmp/tmp0vml3x7x.ts(27,15): error TS1005: '';'' expected.

    ../../../../../tmp/tmp0vml3x7x.ts(27,37): error TS1109: Expression expected.

    ../../../../../tmp/tmp0vml3x7x.ts(28,6): error TS1005: '';'' expected.

    ../../../../../tmp/tmp0vml3x7x.ts(28,9): error TS1005: '';'' expected.

    ../../../../../tmp/tmp0vml3x7x.ts(28,13): error TS1005: ''('' expected.

    ../../../../../tmp/tmp0vml3x7x.ts(28,19): error TS1005: '';'' expected.

    ../../../../../tmp/tmp0vml3x7x.ts(29,1): error TS1003: Identifier expected.

    ../../../../../tmp/tmp0vml3x7x.ts(30,9): error TS1005: '';'' expected.

    '
  timestamp: 1660014247
- exit_code: 2
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    if (n <= 1) {\n        return [1];\n    }\n    if (n === 2)\
    \ {\n        return [1, 2];\n    }\n    const primeFactors: number[] = [];\n \
    \   let i = 2;\n    while (factorizeNumber(n)) {\n        const multiple = i;\n\
    \        if (n % multiple === 0) {\n            primeFactors.push(multiple);\n\
    \        }\n        i++;\n    }\n    return primeFactors;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpfm34y7g_.ts(19,12): error TS2304: Cannot find name
    ''factorizeNumber''.

    '
  timestamp: 1660014247
- exit_code: 0
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n\tif (n < 2) return [];\n\tconst primeFactors = [];\n\tfor (let\
    \ i = 2; i <= Math.sqrt(n); i += 1) {\n\t\twhile (n % i === 0) {\n\t\t\tprimeFactors.push(i);\n\
    \t\t\tn /= i;\n\t\t}\n\t}\n\tif (n > 1) {\n\t\tprimeFactors.push(n);\n\t}\n\t\
    return primeFactors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014247
- exit_code: -5
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  let factors = new Array<number>();\n\n  for (let i = 1; i < Math.sqrt(n);\
    \ i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i ===\
    \ 0) {\n        n /= i;\n        factors.push(i);\n      }\n    }\n  }\n\n  if\
    \ (n > 1) {\n    factors.push(1);\n  }\n\n  return factors;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: Exception
  stderr: "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error\
    \ 188720663\n#\n#\n#\n#FailureMessage Object: 0x7ffdc5d575f0\n 1: 0x2b20be75d727\
    \  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 2: 0x2b20bf2f228e\
    \ V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 3: 0x2b20bec2cf8b  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 4: 0x2b20bedbe760  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 5: 0x2b20bedc60cd  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 6: 0x2b20befb07db v8::internal::Runtime_GrowArrayElements(int, unsigned long*,\
    \ v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 7: 0x2b20be90f7f9  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n"
  stdout: ''
  timestamp: 1660014250
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    let factors: number[] = [];\n    let primes: number[] = [2];\n\
    \n    while (factors.length < n) {\n        // find smallest prime which is no\
    \ less than n\n        let smallestPrime = primes.reduce((min, p) => p > min ?\
    \ p : min);\n\n        // find first number bigger than smallest prime which is\
    \ no greater than n\n        let nextPrime = primes.reduce((max, p) => p < max\
    \ ? p : max);\n\n        let lastPrime = primes.reduce((max, p) => {\n       \
    \     if (p !== nextPrime) {\n                let next = p + 1;\n            \
    \    if (next > max) {\n                    next = max;\n                }\n \
    \               primes.push(next);\n                return next;\n           \
    \ } else {\n                return p;\n            }\n        }, nextPrime);\n\
    \n        factors.push(smallestPrime);\n        factors.push(lastPrime);\n   \
    \ }\n\n    return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  2\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmpjtlw_kwv.js:42:12)\n\
    \    at Object.<anonymous> (/tmp/tmpjtlw_kwv.js:51:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 2 ],\n\
    \  expected: [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014247
- exit_code: 2
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  if (n === 0) {\n    return [];\n  }\n\n  const minFact = factorization(n\
    \ - 1);\n  let result: number[] = [];\n  for (const fact of minFact) {\n    if\
    \ (result.some(x => x === fact)) {\n      continue;\n    }\n\n    result.push(fact);\n\
    \  }\n\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmptmpvkfwt.ts(15,19): error TS2304: Cannot find name
    ''factorization''.

    '
  timestamp: 1660014247
- exit_code: 2
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors: number[] = [];\n  const factorsTable: number[][]\
    \ = [];\n  const factorsLength: number[] = [];\n  for (var i = 0; i < n; i++)\
    \ {\n    factorsTable.push([]);\n    factorsLength.push(i);\n    for (var j =\
    \ 0; j < i; j++) {\n      if (n % j === 0) {\n        factorsTable[j].push(n);\n\
    \        factorsLength[j] = 0;\n        n /= j;\n      }\n    }\n  }\n  while\
    \ (n > 1) {\n    var j: number[] = [];\n    var found = false;\n    for (var i\
    \ = 0; i < factorsLength.length; i++) {\n      if (factorsLength[i] === 1) {\n\
    \        factors.push(factorsTable[i][0]);\n        factorsLength[i] = 0;\n  \
    \      found = true;\n      } else if (factorsLength[i]) {\n        found = true;\n\
    \      }\n      if (found) {\n        for (var k = 0; k < factorsLength[i]; k++)\
    \ {\n          j.push(factorsTable[i][k]);\n        }\n        factorsLength[i]\
    \ = 0;\n      }\n    }\n    if (!found) {\n      j.push(n);\n    }\n    factorsLength.push(0);\n\
    \    n = j.pop();\n  }\n  return factors;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n\
    \  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n\
    \  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp92tgg4et.ts(26,9): error TS2403: Subsequent variable
    declarations must have the same type.  Variable ''j'' must be of type ''number'',
    but here has type ''number[]''.

    ../../../../../tmp/tmp92tgg4et.ts(38,13): error TS2339: Property ''push'' does
    not exist on type ''number''.

    ../../../../../tmp/tmp92tgg4et.ts(44,9): error TS2339: Property ''push'' does
    not exist on type ''number''.

    ../../../../../tmp/tmp92tgg4et.ts(47,11): error TS2339: Property ''pop'' does
    not exist on type ''number''.

    '
  timestamp: 1660014247
- exit_code: 2
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    const factors: number[] = [];\n    // If input is 0, then factors\
    \ array should be empty, return early\n    if (n === 0) return factors;\n\n  \
    \  // If input is less than 1 or input is a non-positive integer, then return\
    \ early\n    if (n < 1 || Number.isNaN(Number(n))) {\n        throw new Error(`Input\
    \ number should be greater than or equal to 1 and be a positive integer: ${n}`);\n\
    \    }\n\n    const factor: number = Math.floor(Math.sqrt(n));\n    const divisors:\
    \ number[] = [];\n\n    // Keep dividing the input by divisor until input is less\
    \ than 1 after every iteration.\n    for (let i = 1; i <= factor; i++) {\n   \
    \     while (n % i === 0) {\n            divisors.push(i);\n            n = n\
    \ / i;\n        }\n    }\n\n    // If input was only a positive integer then push\
    \ it to the factors array\n    if (n !== 1) factors.push(1);\n\n    return divisors;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpij9nvf59.ts(16,25): error TS2339: Property ''isNaN''
    does not exist on type ''NumberConstructor''.

    '
  timestamp: 1660014246
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors: number[] = [];\n  let maxCount: number = 0;\n\n\
    \  // We need to find the prime factors of number with highest possible multiplicity.\n\
    \  // Let's go through each factor of number with highest possible multiplicity.\n\
    \  for (let currentCount = 2; currentCount <= n; currentCount++) {\n    // If\
    \ the current count of current factor is less than the max count of previous factor,\n\
    \    // current factor is the new factor.\n    if (factors[factors.length - 1]\
    \ < currentCount) {\n      // If the current count is less than or equal to the\
    \ max count of previous factor, \n      // push current count of current factor\
    \ to the array.\n      factors.push(currentCount);\n    } else {\n      // Otherwise\
    \ increment count by one.\n      factors[factors.length - 1]++;\n    }\n\n   \
    \ // If the current count is equal to the max count of previous factor, \n   \
    \ // the count of current factor will be the max count of previous factor.\n \
    \   // So, max count of previous factor will be updated accordingly.\n    if (factors[factors.length\
    \ - 1] === maxCount) {\n      maxCount++;\n    }\n  }\n\n  return factors;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  '-1': NaN\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmpirq856w6.js:39:12)\n\
    \    at Object.<anonymous> (/tmp/tmpirq856w6.js:48:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ '-1': NaN\
    \ ],\n  expected: [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014247
- exit_code: 2
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    let factors: number[] = [];\n    let n = +n;\n    for (let i\
    \ = 2; i * i <= n; i++) {\n        while (n % i) {\n            factors.push(i);\n\
    \            n /= i;\n        }\n    }\n    factors.push(n);\n    return factors;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpviau96xc.ts(10,20): error TS2300: Duplicate identifier
    ''n''.

    ../../../../../tmp/tmpviau96xc.ts(12,9): error TS2300: Duplicate identifier ''n''.

    '
  timestamp: 1660014247
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    let factors: number[] = []\n\n    for (let i = 0; n > 1; i++)\
    \ {\n        if (n % i === 0) {\n            n /= i\n            factors.push(i)\n\
    \        }\n    }\n\n    return factors\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n\
    \  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n\
    \  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmp5vuvm5ad.js:23:12)\n\
    \    at Object.<anonymous> (/tmp/tmp5vuvm5ad.js:32:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2 ],\n\
    \  expected: [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014247
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n\t// if there are no factors return []\n\tconst factors: number[]\
    \ = []\n\tfor (let i = 2; i <= n / i; i++) {\n\t\tif (n % i === 0) {\n\t\t\tfactors.push(i\
    \ as number)\n\t\t}\n\t}\n\treturn factors\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n\
    \  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n\
    \  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmp5lmyh1r4.js:23:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp5lmyh1r4.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014247
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    let factors = [];\n    if (n === 0 || n === 1) return factors;\n\
    \    for (let d = 2; d <= n; d++) {\n        if (n % d === 0) {\n            factors.push(1);\n\
    \            n = n / d;\n            while (n % d === 0) {\n                factors.push(n\
    \ % d);\n                n = n / d;\n            }\n        } else if (n !== 1)\
    \ {\n            factors.push(1);\n        }\n    }\n    return factors;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1\n]\n\n\
    should loosely deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmpeifzwgnd.js:32:12)\n\
    \    at Object.<anonymous> (/tmp/tmpeifzwgnd.js:41:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1 ],\n \
    \ expected: [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014247
- exit_code: 2
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    let primes: number[] = [];\n    let i = 2; // Start from 2 since\
    \ 2 is the smallest number with only two factors\n    while (i < (n - 1)) {\n\
    \        let j = 2;\n        while (j <= i && n % j === 0) {\n            j ++;\n\
    \        }\n        if (j <= i) {\n            primes.push(i);\n            i\
    \ = j;\n        } else {\n            i ++;\n        }\n    }\n    return primes;\n\
    }\n</code>\n<|/ a tags=algorithm,javascript,primes dscore=0 |>\n<| c |>\nThis\
    \ doesn't appear to handle composite numbers. For example, factorize(25) returns\
    \ [5, 25], while factorize(101) returns [3, 101].\n<|/ c |>\n<| a tags=algorithm,javascript,primes\
    \ |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp650wjsh4.ts(27,2): error TS1110: Type expected.

    ../../../../../tmp/tmp650wjsh4.ts(27,3): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmp650wjsh4.ts(28,2): error TS1109: Expression expected.

    ../../../../../tmp/tmp650wjsh4.ts(28,4): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmp650wjsh4.ts(29,2): error TS1109: Expression expected.

    ../../../../../tmp/tmp650wjsh4.ts(29,7): error TS1109: Expression expected.

    ../../../../../tmp/tmp650wjsh4.ts(30,6): error TS1005: '';'' expected.

    ../../../../../tmp/tmp650wjsh4.ts(30,11): error TS1005: '';'' expected.

    ../../../../../tmp/tmp650wjsh4.ts(30,132): error TS1002: Unterminated string literal.

    ../../../../../tmp/tmp650wjsh4.ts(31,2): error TS1109: Expression expected.

    ../../../../../tmp/tmp650wjsh4.ts(31,4): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmp650wjsh4.ts(32,2): error TS1109: Expression expected.

    ../../../../../tmp/tmp650wjsh4.ts(32,6): error TS1005: '';'' expected.

    ../../../../../tmp/tmp650wjsh4.ts(32,40): error TS1109: Expression expected.

    ../../../../../tmp/tmp650wjsh4.ts(34,9): error TS1005: '';'' expected.

    '
  timestamp: 1660014247
- exit_code: -1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const result = [];\n  const factorization = new Array(n + 1);\n\
    \  let index = 0;\n  for (let i = 1; i <= n; i++) {\n    for (let j = i; j < n;\
    \ j *= i) {\n      factorization[j] = i;\n    }\n  }\n  while (index < factorization.length)\
    \ {\n    result.push(factorization[index]);\n    index++;\n  }\n  return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660014262
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors = [];\n  for (let x = 2; x * x <= n; x++) {\n  \
    \  if (n % x === 0) continue;\n\n    while (n % x === 0) {\n      factors.push(x);\n\
    \      n = Math.floor(n / x);\n    }\n  }\n  return factors;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmpiybasoom.js:25:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpiybasoom.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014247
- exit_code: -5
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    let min = 1;\n    let max = 2;\n    let factors: number[] =\
    \ [];\n    let result: number[] = [];\n    \n    while(n != 1) {\n        while(n\
    \ % min == 0 && n < max) {\n            min = min * 2;\n        }\n        while(n\
    \ % max == 0 && n < max) {\n            max = max * 2;\n        }\n        \n\
    \        if(n >= min) {\n            factors.push(min);\n            while (n\
    \ % min == 0) {\n                factors.push(min);\n                n = n / min;\n\
    \            }\n            \n            factors.push(max);\n            while\
    \ (n % max == 0) {\n                factors.push(max);\n                n = n\
    \ / max;\n            }\n        }\n        \n        if(factors.length > 0) {\n\
    \            result.push(factors[factors.length - 1]);\n            factors.pop();\n\
    \        }\n    }\n    \n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: Exception
  stderr: "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error\
    \ 169220804\n#\n#\n#\n#FailureMessage Object: 0x7ffdea6375b0\n 1: 0x2b889215f727\
    \  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 2: 0x2b8892cf428e\
    \ V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 3: 0x2b889262ef8b  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 4: 0x2b88927c0760  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 5: 0x2b88927c80cd  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 6: 0x2b88929b27db v8::internal::Runtime_GrowArrayElements(int, unsigned long*,\
    \ v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 7: 0x2b88923117f9  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n"
  stdout: ''
  timestamp: 1660014250
- exit_code: 2
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  let factors = [];\n  let factorization = new MathLib.Factorization(n);\n\
    \  let factor;\n  while (factoriztion.hasNext()) {\n    factor = factoriztion.next();\n\
    \    factors.push(factor);\n  }\n  return factors;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpotd3v992.ts(12,27): error TS2304: Cannot find name
    ''MathLib''.

    ../../../../../tmp/tmpotd3v992.ts(14,10): error TS2552: Cannot find name ''factoriztion''.
    Did you mean ''factorization''?

    ../../../../../tmp/tmpotd3v992.ts(15,14): error TS2552: Cannot find name ''factoriztion''.
    Did you mean ''factorization''?

    '
  timestamp: 1660014247
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n\tlet factors: number[] = [];\n\n\t// Check for n divisible by 2\n\
    \tif (n % 2 === 0) {\n\t\tfactors.push(2);\n\t}\n\n\twhile (n > 1) {\n\t\tconst\
    \ remainder = n % 2;\n\n\t\tif (remainder === 0) {\n\t\t\tfactors.push(remainder);\n\
    \t\t\tn = Math.floor(n / 2);\n\t\t} else {\n\t\t\tfactors.push(remainder);\n\t\
    \t\tn = Math.floor(n / 2);\n\t\t}\n\t}\n\n\treturn factors;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  0\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmpisgflk8d.js:32:12)\n\
    \    at Object.<anonymous> (/tmp/tmpisgflk8d.js:41:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 0 ],\n\
    \  expected: [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014247
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n\tconst factors: number[] = [];\n\tfor (let p = 2; p <= Math.sqrt(n);\
    \ p++) {\n\t\tif (n % p === 0) {\n\t\t\tconst q = Math.floor(n / p);\n\t\t\tfactors.push(q);\n\
    \t\t\tn = p - (n * q);\n\t\t}\n\t}\n\tif (n > 1) {\n\t\tfactors.push(n);\n\t}\n\
    \treturn factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2\n]\n\n\
    should loosely deep-equal\n\n[\n  2,\n  2\n]\n    at test (/tmp/tmpy4suhuet.js:28:12)\n\
    \    at Object.<anonymous> (/tmp/tmpy4suhuet.js:36:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2 ],\n \
    \ expected: [ 2, 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014249
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    let factors: number[] = [];\n    let primeFactors: number[]\
    \ = [];\n    for (let f = 2; f <= n; f++) {\n        while (n % f === 0) {\n \
    \           primeFactors.push(f);\n            n /= f;\n        }\n        factors.push(n);\n\
    \        primeFactors.sort();\n    }\n    return factors;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1\n]\n\n\
    should loosely deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmpqhldez6n.js:26:12)\n\
    \    at Object.<anonymous> (/tmp/tmpqhldez6n.js:35:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1 ],\n \
    \ expected: [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014249
- exit_code: 2
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    // check if n is prime or not\n    if (isPrime(n)) {\n     \
    \   // check whether n is a perfect square\n        if (isPerfectSquare(n)) {\n\
    \            // return an array of factors\n            return factorization(n);\n\
    \        } else {\n            // return an array of factors\n            return\
    \ [1, n];\n        }\n    } else {\n        // return an array of factors\n  \
    \      return [1, n];\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpqipjsozm.ts(12,9): error TS2304: Cannot find name
    ''isPrime''.

    ../../../../../tmp/tmpqipjsozm.ts(14,13): error TS2304: Cannot find name ''isPerfectSquare''.

    ../../../../../tmp/tmpqipjsozm.ts(16,20): error TS2304: Cannot find name ''factorization''.

    '
  timestamp: 1660014249
- exit_code: 2
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  if (n === 0) {\n    return [];\n  }\n\n  if (n === 1) {\n    return\
    \ [1];\n  }\n\n  const factors: number[] = [];\n\n  for (let i = 1; i <= n; i++)\
    \ {\n    const factor = i;\n\n    for (let j = 2; j <= n / factor; j++) {\n  \
    \    if (n % j === 0) {\n        factors.push(factor);\n        factor *= j;\n\
    \        break;\n      }\n    }\n  }\n\n  return factors;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpl0evd8_s.ts(27,9): error TS2588: Cannot assign to
    ''factor'' because it is a constant.

    '
  timestamp: 1660014249
- exit_code: 2
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    let factorization: number[] = [];\n    factorize(n, factorization);\n\
    \    return factorization;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpwny4ngtm.ts(12,18): error TS2554: Expected 1 arguments,
    but got 2.

    '
  timestamp: 1660014249
- exit_code: -5
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  let factors = [],\n      i,\n      tempArray = [];\n\n  for (i\
    \ = 1; i <= n; i++) {\n    while (n % i === 0) {\n      tempArray.push(i);\n \
    \     n = n / i;\n    }\n  }\n\n  for (i = 0; i < tempArray.length; i++) {\n \
    \   factors.push(tempArray[i]);\n  }\n\n  return factors;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: Exception
  stderr: "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error\
    \ 169220804\n#\n#\n#\n#FailureMessage Object: 0x7ffc97c8fe00\n 1: 0x2b2bd31eb727\
    \  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 2: 0x2b2bd3d8028e\
    \ V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 3: 0x2b2bd36baf8b  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 4: 0x2b2bd384c760  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 5: 0x2b2bd38540cd  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 6: 0x2b2bd3a3e7db v8::internal::Runtime_GrowArrayElements(int, unsigned long*,\
    \ v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 7: 0x2b2bd339d7f9  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n"
  stdout: ''
  timestamp: 1660014251
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    if (n < 2) return [];\n    var factors = new Array();\n    factors[0]\
    \ = 1;\n    for (var i = 1; i <= n; i++) {\n        if (n % i === 0) {\n     \
    \       while (n % i) {\n                n /= i;\n                factors.push(i);\n\
    \            }\n        }\n    }\n    return factors;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1\n]\n\n\
    should loosely deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmp92igxqgt.js:28:12)\n\
    \    at Object.<anonymous> (/tmp/tmp92igxqgt.js:37:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1 ],\n \
    \ expected: [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014249
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  let product = 1;\n  for (let i = 1; i < n; i += 1) {\n    if (n\
    \ % i === 0) {\n      product *= i;\n    }\n  }\n  const factors: number[] = [];\n\
    \  while (product % 1 !== 0) {\n    const divisors: number[] = [];\n    let i\
    \ = 2;\n    while (i <= n) {\n      if (n % i === 0) {\n        divisors.push(i);\n\
    \        product /= i;\n      } else {\n        i++;\n      }\n    }\n    if (divisors.length\
    \ === 1) {\n      factors.push(divisors[0]);\n    } else {\n      factors.push(divisors.reduce((a,\
    \ b) => a * b, 1));\n    }\n  }\n  return factors;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmpan4k42sj.js:42:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpan4k42sj.js:51:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014249
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    if (n == 1)\n        return [1]\n    const factorization = new\
    \ Array(n + 1)\n    for (let factor = 2; factor <= n; factor++) {\n        while\
    \ (n % factor == 0) {\n            factorization[factor] = factorization[factor]\
    \ || []\n            factorization[factor].push(factor)\n            n /= factor\n\
    \        }\n    }\n    return factorization[n] || []\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmpu8kwu75r.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpu8kwu75r.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014249
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  let factorization: number[] = [];\n  let primeFactorization: number[]\
    \ = [];\n  for (let factor = 2; factor <= Math.sqrt(n); factor++) {\n    if (n\
    \ % factor === 0) {\n      primeFactorization.push(factor);\n      while (n %\
    \ factor === 0) {\n        n /= factor;\n      }\n    } else {\n      while (n\
    \ % factor !== 0) {\n        n /= factor;\n      }\n    }\n  }\n  factorization\
    \ = [...primeFactorization];\n  let result: number[] = [];\n  for (let i = 0;\
    \ i < factorization.length; i++) {\n    result.push(factorization[i] * result[result.length\
    \ - i - 1]);\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n\
    \  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n\
    \  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmpg0yzqr_h.js:43:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpg0yzqr_h.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014249
- exit_code: 2
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n\t// Set of primes already factored\n\tconst factors = new Set<number>();\n\
    \tconst max = Math.sqrt(n);\n\tconst imax = Math.floor(max);\n\tconst dmax = Math.sqrt(imax);\n\
    \tconst d = 2;\n\twhile (d <= dmax) {\n\t\twhile (n % d === 0) {\n\t\t\tfactors.add(d);\n\
    \t\t\tn /= d;\n\t\t}\n\t\td++;\n\t}\n\tlet result = [];\n\tfor (let factor of\
    \ factors) {\n\t\tresult.push((n - 1) % (factor * factor));\n\t}\n\treturn result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp7lf9fvha.ts(12,22): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    ../../../../../tmp/tmp7lf9fvha.ts(22,3): error TS2588: Cannot assign to ''d''
    because it is a constant.

    '
  timestamp: 1660014249
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    var factors = [2] // Array storing factors counting for each\
    \ prime number in factorization\n    var i = 2\n    while (i < n && n % i == 0)\
    \ {\n      factors.push(i)\n      n /= i\n      i++\n    }\n    return factors\n\
    \  }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  2\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  2,\n  2\n]\n    at test (/tmp/tmpvp19i00y.js:25:12)\n\
    \    at Object.<anonymous> (/tmp/tmpvp19i00y.js:32:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 2 ],\n\
    \  expected: [ 2, 2, 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014249
- exit_code: 2
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    if (n === 1) {\n        // return factors array for number with\
    \ one factor only\n        return [1];\n    }\n    if (n < 0) {\n        // raise\
    \ error if given number has negative factors\n        throw new Error('Invalid\
    \ input number.');\n    }\n    const factors = [1];\n    // calculate all factors\
    \ of given number\n    const factorsIndex = 2;\n    while (factorsIndex < n) {\n\
    \        const currentFactors = factorizeNumber(n - factorsIndex); //create array\
    \ of factors of given number - number of times the given number appears there\n\
    \        factors = currentFactors.concat(factors); //append array of factors array\
    \ to factors array\n        factorsIndex++; //increase factor index by one\n \
    \   }\n    return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpsn3siddl.ts(23,32): error TS2304: Cannot find name
    ''factorizeNumber''.

    ../../../../../tmp/tmpsn3siddl.ts(24,9): error TS2588: Cannot assign to ''factors''
    because it is a constant.

    ../../../../../tmp/tmpsn3siddl.ts(25,9): error TS2588: Cannot assign to ''factorsIndex''
    because it is a constant.

    '
  timestamp: 1660014249
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    if (n < 1) {\n        return [];\n    }\n\n    let factors =\
    \ [1] as number[];\n    let factor = 1;\n    let isPrime = true;\n\n    while\
    \ (factor < n) {\n        if (n % factor === 0) {\n            factors.push(factor);\n\
    \            isPrime = false;\n            while (n % factor === 0) {\n      \
    \          n /= factor;\n                factor++;\n            }\n          \
    \  if (factor === 2) {\n                isPrime = true;\n            }\n     \
    \   }\n        factor++;\n    }\n\n    if (isPrime) {\n        factors.push(2);\n\
    \    }\n\n    return factors;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n\
    \  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n\
    \  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmpgmxezu4h.js:39:12)\n\
    \    at Object.<anonymous> (/tmp/tmpgmxezu4h.js:48:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1 ],\n\
    \  expected: [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014249
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  if (!n) throw new Error('Cannot factorize negative or null number');\n\
    \n  const result = new Array(n);\n  for (let i = 0; i <= n; i++) {\n    for (let\
    \ j = 0; j < i; j++) {\n      if (n % i == 0) {\n        for (let k = 0; k <=\
    \ j; k++) {\n          result[n + j] = result[n + j] || 0;\n          result[n\
    \ + j] += k;\n        }\n      }\n    }\n  }\n  return result.filter(x => x !==\
    \ 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1\n]\n\n\
    should loosely deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmpf0794ok_.js:29:12)\n\
    \    at Object.<anonymous> (/tmp/tmpf0794ok_.js:38:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1 ],\n \
    \ expected: [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014249
- exit_code: -1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors: number[] = [];\n  let i = 2;\n\n  while (n / i\
    \ > 0) {\n    if (n % i === 0) {\n      factors.push(i);\n      n /= i;\n    }\
    \ else {\n      i++;\n    }\n  }\n\n  return factors;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660014264
- exit_code: 2
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  var result: number[] = [];\n  var factors = factorizeNumber(n);\
    \ //Get factorization array of given integer\n  factors.forEach(function(f: number[])\
    \ {\n    var num: number = f[0]; //Store the factor in array\n    result.push(num);\
    \ //Push the factor in array\n    result.push(f[1]); //Push its quantity in array\n\
    \  });\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpua7jrxhw.ts(12,17): error TS2304: Cannot find name
    ''factorizeNumber''.

    '
  timestamp: 1660014249
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors = Array(n);\n  let maxI = 1;\n  for (let i = 2;\
    \ i <= n; i++) {\n    if (n % i === 0) {\n      factors[n - i] = i;\n      for\
    \ (let j = 0; j < i; j++) { maxI *= i; }\n      i = maxI;\n    }\n  }\n  return\
    \ factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  <1\
    \ empty item>\n]\n\nshould loosely deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmp01n1rs4v.js:27:12)\n\
    \    at Object.<anonymous> (/tmp/tmp01n1rs4v.js:36:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, <1 empty\
    \ item> ],\n  expected: [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014249
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    let factors: number[] = []\n    if (n % 1 == 0) {\n        factors.push(1)\n\
    \        n = Math.sqrt(n)\n    }\n    for (let i = 2; i <= Math.floor(Math.sqrt(n));\
    \ i++) {\n        if (n % i == 0) {\n            factors.push(i)\n           \
    \ n = n / i\n        }\n    }\n    return factors\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1\n]\n\n\
    should loosely deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmphcuhpesm.js:27:12)\n\
    \    at Object.<anonymous> (/tmp/tmphcuhpesm.js:36:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1 ],\n \
    \ expected: [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014249
- exit_code: 2
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  // Initialization of variables\n  let factors: number[] = [];\n\
    \  let factor: number[] = [];\n  let count = 1;\n\n  // Loop that goes through\
    \ all possible prime factors of given number\n  for (let i = 2; i * i <= n; i++)\
    \ {\n    // Checks if i has any prime factors already and increases count of them\n\
    \    if (factors.includes(i) && count) {\n      factors.push(factor);\n      factor\
    \ = [];\n      count = 1;\n    } else {\n      // Checks if i has any factors,\
    \ checks if it equals to current number, and increases count of them\n      if\
    \ (factors.includes(i) && factor.includes(n) && count) {\n        factors.push(factor);\n\
    \        factor = [];\n        count = 1;\n      } else {\n        factor.push(i);\n\
    \        count++;\n      }\n    }\n  }\n\n  // Returns factors array, which can\
    \ be converted to array of arrays of factors by using 'un-flatten' function\n\
    \  return unflatten(factors);\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n\
    \  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n\
    \  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpj5x67riw.ts(19,17): error TS2339: Property ''includes''
    does not exist on type ''number[]''.

    ../../../../../tmp/tmpj5x67riw.ts(20,20): error TS2345: Argument of type ''number[]''
    is not assignable to parameter of type ''number''.

    ../../../../../tmp/tmpj5x67riw.ts(25,19): error TS2339: Property ''includes''
    does not exist on type ''number[]''.

    ../../../../../tmp/tmpj5x67riw.ts(25,41): error TS2339: Property ''includes''
    does not exist on type ''number[]''.

    ../../../../../tmp/tmpj5x67riw.ts(26,22): error TS2345: Argument of type ''number[]''
    is not assignable to parameter of type ''number''.

    ../../../../../tmp/tmpj5x67riw.ts(37,10): error TS2304: Cannot find name ''unflatten''.

    '
  timestamp: 1660014249
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n\tlet primes = [];\n\tlet limit = n;\n\tlet i = 2;\n\twhile (i <=\
    \ limit) {\n\t\tlet prime = true;\n\t\tfor (let j = i; j < limit; j++) {\n\t\t\
    \tif (n % j === 0) {\n\t\t\t\tprime = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\
    \t\tif (prime) {\n\t\t\tprimes.push(i);\n\t\t}\n\t\ti++;\n\t}\n\treturn primes;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  4\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  2\n]\n    at test (/tmp/tmpz7r248dw.js:33:12)\n\
    \    at Object.<anonymous> (/tmp/tmpz7r248dw.js:41:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 4 ],\n\
    \  expected: [ 2, 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014251
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n\tconst factors: number[] = [];\n\tfor (let i = 2; i <= Math.sqrt(n);\
    \ i++) {\n\t\tconst count = n % i;\n\t\tfactors.push(count ? count : i);\n\t\t\
    if (count !== 0) {\n\t\t\tn = (n / i);\n\t\t} else {\n\t\t\tbreak;\n\t\t}\n\t\
    }\n\treturn factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmp6yzwxpxi.js:27:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp6yzwxpxi.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014251
- exit_code: 2
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    const factors: number[] = [];\n    const factorsMap = new Map<number,\
    \ number>();\n\n    while (n > 1) {\n        const factor = isPrime(n) ? [n, 1]\
    \ : factorization(n);\n        if (factorsMap.has(factor[0])) {\n            factorsMap.get(factor[0])[factor[1]]\
    \ += 1;\n        } else {\n            factorsMap.set(factor[0], factor[1]);\n\
    \            factors.push(factor[0]);\n        }\n        n -= factor[1];\n  \
    \  }\n\n    return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpjbdxcf_9.ts(12,28): error TS2583: Cannot find name
    ''Map''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    ../../../../../tmp/tmpjbdxcf_9.ts(15,24): error TS2304: Cannot find name ''isPrime''.

    ../../../../../tmp/tmpjbdxcf_9.ts(15,46): error TS2304: Cannot find name ''factorization''.

    '
  timestamp: 1660014251
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  let factors: number[] = [];\n\n  while (n > 1) {\n    if (n %\
    \ 2 === 0) {\n      factors.push(2);\n      n = n / 2;\n    } else {\n      factors.push(n\
    \ % 2);\n      n = Math.floor(n / 2);\n    }\n  }\n\n  return factors;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  2,\n  1,\n  1\n]\n\nshould loosely deep-equal\n\n[\n  3,\n  19\n]\n    at test\
    \ (/tmp/tmpmdo9nmql.js:30:12)\n    at Object.<anonymous> (/tmp/tmpmdo9nmql.js:36:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 2,\
    \ 1, 1 ],\n  expected: [ 3, 19 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014251
- exit_code: -5
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    if (n < 2) return [];\n    if (n === 2) return [2];\n    if\
    \ (n === 3) return [1, 3];\n    if (n === 5) return [2, 3, 5];\n    if (n ===\
    \ 7) return [2, 5, 7];\n    if (n % 2 === 1) return [];\n    if (n % 3 === 0)\
    \ return [2];\n    if (n % 5 === 0) return [2, 5];\n    const i = Math.floor((Math.sqrt(n)\
    \ - 1) / 2);\n    if (n % i === 0) return [2, i * i];\n    let factors: number[]\
    \ = [];\n    for (let j = i * i; j < n; j += i) {\n        factors.push(j);\n\
    \    }\n    return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: Exception
  stderr: "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error\
    \ 169220804\n#\n#\n#\n#FailureMessage Object: 0x7ffdbe140a20\n 1: 0x2b9ccc787727\
    \  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 2: 0x2b9ccd31c28e\
    \ V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 3: 0x2b9cccc56f8b  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 4: 0x2b9cccde8760  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 5: 0x2b9cccdf00cd  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 6: 0x2b9cccfda7db v8::internal::Runtime_GrowArrayElements(int, unsigned long*,\
    \ v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 7: 0x2b9ccc9397f9  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n"
  stdout: ''
  timestamp: 1660014253
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    let factors = [2]\n    for (let i = 3; i <= n; i++) {\n    \
    \    while (n % i === 0) {\n            n = n / i\n            factors.push(i)\n\
    \        }\n    }\n    return factors\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n\
    \  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n\
    \  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  4\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  2\n]\n    at test (/tmp/tmpc6j05coj.js:24:12)\n\
    \    at Object.<anonymous> (/tmp/tmpc6j05coj.js:32:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 4 ],\n\
    \  expected: [ 2, 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014251
- exit_code: 2
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  let factors: number[] = [];\n  const factorsMax = factorsIndexOf(n);\n\
    \n  if (factorsMax > 0) {\n    for (let i = factorsMax; i > 0; i--) {\n      if\
    \ (n % i === 0) {\n        factors.push(factorsMax);\n        factors.push(factorsIndexOf(i\
    \ / n));\n        break;\n      }\n    }\n  }\n\n  return factors;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp016_sgn1.ts(12,22): error TS2304: Cannot find name
    ''factorsIndexOf''.

    ../../../../../tmp/tmp016_sgn1.ts(18,22): error TS2304: Cannot find name ''factorsIndexOf''.

    '
  timestamp: 1660014251
- exit_code: 2
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    let factorization = factorizations[n];\n    let factors = [];\n\
    \    for (let i = 0; i < factorization.length; i++) {\n        let factor = factorization[i];\n\
    \        if (factor > 1) {\n            let factorArray = [];\n            let\
    \ temp = n;\n            while (temp) {\n                if (temp % factor ===\
    \ 0)\n                    temp = (temp / factor) | 0;\n                else\n\
    \                    break;\n                factorArray.push(factor);\n     \
    \       }\n            factors.push(factorArray);\n        }\n    }\n    return\
    \ factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpbaj5qwnd.ts(11,25): error TS2552: Cannot find name
    ''factorizations''. Did you mean ''factorization''?

    '
  timestamp: 1660014251
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n\tlet factors = [];\n\tfor (let factor = 2; factor <= n; factor++)\
    \ {\n\t\tlet remainder = n % factor;\n\t\tif (remainder === 0) {\n\t\t\tfactors.push(factor);\n\
    \t\t\tn = Math.floor(n / factor);\n\t\t} else {\n\t\t\tbreak;\n\t\t}\n\t}\n\t\
    return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2\n]\n\n\
    should loosely deep-equal\n\n[\n  2,\n  2\n]\n    at test (/tmp/tmphwafhh8q.js:28:12)\n\
    \    at Object.<anonymous> (/tmp/tmphwafhh8q.js:36:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2 ],\n \
    \ expected: [ 2, 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014252
- exit_code: -5
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    const factors: number[] = []\n    const result: number[] = []\n\
    \    let lastFactor = 1\n    let currentFactor = lastFactor\n\n    while (n >\
    \ 1) {\n        if (n % currentFactor === 0) {\n            n /= currentFactor\n\
    \            factors.push(currentFactor)\n        } else {\n            lastFactor\
    \ = currentFactor\n            currentFactor *= lastFactor\n            result.push(currentFactor)\n\
    \        }\n    }\n    return result\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n\
    \  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n\
    \  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: Exception
  stderr: "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error\
    \ 169220804\n#\n#\n#\n#FailureMessage Object: 0x7ffcd0dc7b90\n 1: 0x2b2ce56e4727\
    \  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 2: 0x2b2ce627928e\
    \ V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 3: 0x2b2ce5bb3f8b  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 4: 0x2b2ce5d45760  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 5: 0x2b2ce5d4d0cd  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 6: 0x2b2ce5f377db v8::internal::Runtime_GrowArrayElements(int, unsigned long*,\
    \ v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 7: 0x2b2ce58967f9  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n"
  stdout: ''
  timestamp: 1660014254
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n\tlet factorArray = [];\n\tlet primeFactor = 1;\n\tlet isPrime =\
    \ true;\n\tlet newFactor;\n\tlet isFound = false;\n\tfor (let i = 0; i < Math.sqrt(n);\
    \ i++) {\n\t\tnewFactor = n * primeFactor;\n\t\tif (n % newFactor === 0) {\n\t\
    \t\tisFound = true;\n\t\t\tfactorArray.push(newFactor);\n\t\t}\n\t\tif (isFound)\
    \ {\n\t\t\tprimeFactor++;\n\t\t}\n\t\tisPrime = !isFound;\n\t}\n\treturn factorArray;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4\n]\n\n\
    should loosely deep-equal\n\n[\n  2,\n  2\n]\n    at test (/tmp/tmp91on9sgs.js:33:12)\n\
    \    at Object.<anonymous> (/tmp/tmp91on9sgs.js:41:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4 ],\n \
    \ expected: [ 2, 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014252
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++)\
    \ {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0)\
    \ {\n        factors.push(n);\n        n /= i;\n      }\n    }\n  }\n  return\
    \ factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmpj56wqwye.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpj56wqwye.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014251
- exit_code: 2
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  let primes: number[] = []\n  factorize2(primes, n)\n  return primes\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpw6u462jc.ts(12,3): error TS2552: Cannot find name
    ''factorize2''. Did you mean ''factorize''?

    '
  timestamp: 1660014251
- exit_code: -1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors: number[] = [];\n  let current: number = 0;\n  while\
    \ (n > 1) {\n    current = 2;\n    for (let i = 0; i < factors.length; i++) {\n\
    \      while (n % current === 0) {\n        n /= current;\n        factors.push(current);\n\
    \      }\n      current++;\n    }\n  }\n  return factors;\n}\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660014267
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  var factors = [];\n  for (var i = 0; i < n; i++) {\n    for (var\
    \ j = 0; j < factors.length; j++) {\n      if (n % factors[j] === 0) {\n     \
    \   factors[j] = 0;\n      } else {\n        factors[j]++;\n      }\n    }\n \
    \ }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmp_853mg2f.js:27:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp_853mg2f.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014252
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  n = Math.abs(n);\n  if (n > 1) {\n    let fs: number[] = [];\n\
    \    for (let i = 2; i < n; i++) {\n      if (n % i == 0) {\n        fs.push(i);\n\
    \        fs.push(n / i);\n      }\n    }\n    return fs;\n  } else {\n    return\
    \ [1];\n  }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmp3b9zlpyq.js:29:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp3b9zlpyq.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014252
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  let factors = [1];\n  for (let i = 1; i < n; i++) {\n    // If\
    \ it divides evenly into previous factor\n    if (n % i == 0) {\n      // Increase\
    \ number of times it's divided\n      factors.push(i * factors[factors.length\
    \ - 1]);\n    } else {\n      // If it divides evenly into previous factor, remove\
    \ it.\n      factors.pop();\n    }\n  }\n  return factors;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmpuot_kpsq.js:28:12)\n\
    \    at Object.<anonymous> (/tmp/tmpuot_kpsq.js:37:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1 ],\n\
    \  expected: [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014252
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    var factors = [] as number[];\n    for (var i = 2; i <= Math.sqrt(n);\
    \ i++) {\n        if (n % i === 0) {\n            factors.push(i);\n         \
    \   while (n / i > i) {\n                n /= i;\n                factors.push(i);\n\
    \            }\n        }\n    }\n    if (n > 1) {\n        factors.push(n);\n\
    \    }\n    return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  4\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  2\n]\n    at test (/tmp/tmpb8ubzd3t.js:30:12)\n\
    \    at Object.<anonymous> (/tmp/tmpb8ubzd3t.js:38:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 4 ],\n\
    \  expected: [ 2, 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014252
- exit_code: 2
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    if (n === 1) {\n        return [1];\n    }\n    const factors\
    \ = new Array<number>(Math.ceil(Math.sqrt(n)));\n    for (let i = 2; i <= Math.sqrt(n);\
    \ i++) {\n        while (n % i === 0) {\n            factors[i - 1]++;\n     \
    \       n /= i;\n        }\n    }\n    if (n !== 0) {\n        factors[i - 1]++;\n\
    \    }\n    return factors;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpb9f33qw3.ts(22,17): error TS2304: Cannot find name
    ''i''.

    '
  timestamp: 1660014252
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  if (n < 2) return [];\n  const factors = [];\n  for (let i = 2;\
    \ i <= n / i; i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      n\
    \ /= i;\n    }\n  }\n  return factors;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n\
    \  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n\
    \  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmpn7xfiwp1.js:25:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpn7xfiwp1.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014253
- exit_code: 2
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  var factors = [];\n  var divisor = 2;\n  while (divisor < n) {\n\
    \    if (n % divisor === 0) {\n      var factor = (divisor);\n      while (n %\
    \ divisor === 0) {\n        n /= divisor;\n        factors.push(factor);\n   \
    \   }\n      factors.push(factor);\n      divisor++;\n    }\n  }\n  return factors;\n\
    }\n</code>\n<|/ a |>\n<| c |>\nWhat is the purpose of the line `n /= divisor;`?\
    \ I don't think it's necessary.\n<|/ c |>\n<| c |>\nyes its not necessary\n<|/\
    \ c |>\n<| a |>\nHere's my solution without using the Big Number Library. It will\
    \ take longer to run but I think it's easier to understand. \n<code>\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpgnsl_b91.ts(26,2): error TS1110: Type expected.

    ../../../../../tmp/tmpgnsl_b91.ts(26,3): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpgnsl_b91.ts(27,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpgnsl_b91.ts(27,4): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpgnsl_b91.ts(28,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpgnsl_b91.ts(28,7): error TS1109: Expression expected.

    ../../../../../tmp/tmpgnsl_b91.ts(29,6): error TS1005: '';'' expected.

    ../../../../../tmp/tmpgnsl_b91.ts(29,9): error TS1005: '';'' expected.

    ../../../../../tmp/tmpgnsl_b91.ts(29,13): error TS1005: '';'' expected.

    ../../../../../tmp/tmpgnsl_b91.ts(29,21): error TS1005: '';'' expected.

    ../../../../../tmp/tmpgnsl_b91.ts(29,24): error TS1005: '';'' expected.

    ../../../../../tmp/tmpgnsl_b91.ts(29,28): error TS1005: '';'' expected.

    ../../../../../tmp/tmpgnsl_b91.ts(29,52): error TS1005: '':'' expected.

    ../../../../../tmp/tmpgnsl_b91.ts(29,55): error TS1005: '';'' expected.

    ../../../../../tmp/tmpgnsl_b91.ts(29,67): error TS1005: '';'' expected.

    ../../../../../tmp/tmpgnsl_b91.ts(29,69): error TS1005: '';'' expected.

    ../../../../../tmp/tmpgnsl_b91.ts(30,1): error TS1003: Identifier expected.

    ../../../../../tmp/tmpgnsl_b91.ts(30,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpgnsl_b91.ts(30,4): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpgnsl_b91.ts(31,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpgnsl_b91.ts(31,7): error TS1109: Expression expected.

    ../../../../../tmp/tmpgnsl_b91.ts(32,5): error TS1005: '';'' expected.

    ../../../../../tmp/tmpgnsl_b91.ts(32,9): error TS1005: '';'' expected.

    ../../../../../tmp/tmpgnsl_b91.ts(32,13): error TS1005: '';'' expected.

    ../../../../../tmp/tmpgnsl_b91.ts(33,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpgnsl_b91.ts(33,4): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpgnsl_b91.ts(34,2): error TS1109: Expression expected.

    ../.'
  timestamp: 1660014253
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    const factors = []\n    let f = 1\n    while (n) {\n       \
    \ if (n % f) {\n            factors.push(f)\n            n /= f\n        } else\
    \ {\n            factors.push(n % f)\n        }\n        f++\n    }\n    return\
    \ factors\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  0,\n\
    \  3,\n  4,\n  5,\n  6,\n  7,\n  8,\n  9,\n  10,\n  11,\n  12,\n  13,\n  14,\n\
    \  15,\n  16,\n  17,\n  18,\n  19,\n  20,\n  21,\n  22,\n  23,\n  24,\n  25,\n\
    \  26,\n  27,\n  28,\n  29,\n  30,\n  31,\n  32,\n  33,\n  34,\n  35,\n  36,\n\
    \  37,\n  38,\n  39,\n  40,\n  41,\n  42,\n  43,\n  44,\n  45,\n  46,\n  47,\n\
    \  48,\n  49,\n  50,\n  51,\n  52,\n  53,\n  54,\n  55,\n  56,\n  57,\n  58,\n\
    \  59,\n  60,\n  61,\n  62,\n  63,\n  64,\n  65,\n  66,\n  67,\n  68,\n  69,\n\
    \  70,\n  71,\n  72,\n  73,\n  74,\n  75,\n  76,\n  77,\n  78,\n  79,\n  80,\n\
    \  81,\n  82,\n  83,\n  84,\n  85,\n  86,\n...\n\nshould loosely deep-equal\n\n\
    [\n  2\n]\n    at test (/tmp/tmp1yqw1pxd.js:28:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp1yqw1pxd.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n     0,\
    \  0,  3,   4,  5,  6,  7,  8,  9, 10, 11, 12,\n    13, 14, 15,  16, 17, 18, 19,\
    \ 20, 21, 22, 23, 24,\n    25, 26, 27,  28, 29, 30, 31, 32, 33, 34, 35, 36,\n\
    \    37, 38, 39,  40, 41, 42, 43, 44, 45, 46, 47, 48,\n    49, 50, 51,  52, 53,\
    \ 54, 55, 56, 57, 58, 59, 60,\n    61, 62, 63,  64, 65, 66, 67, 68, 69, 70, 71,\
    \ 72,\n    73, 74, 75,  76, 77, 78, 79, 80, 81, 82, 83, 84,\n    85, 86, 87, \
    \ 88, 89, 90, 91, 92, 93, 94, 95, 96,\n    97, 98, 99, 100,\n    ... 78 more items\n\
    \  ],\n  expected: [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014254
- exit_code: 2
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  n = Math.abs(n);\n  \n  // First find which number is a multiple\
    \ of each other.\n  const factors = n.toString(2).split('');\n  let factorCounts:\
    \ number[] = [];\n  for (let i = 0; i < factors.length; i++) {\n    let factor:\
    \ number = parseInt(factors[i]);\n    if (i > 0) {\n      if (factor >= factors[i\
    \ - 1]) {\n        factorCounts[factorCounts.length] = factorCounts[factorCounts.length]\
    \ || 0;\n        factorCounts[factorCounts.length]++;\n      }\n    } else {\n\
    \      factorCounts[factorCounts.length] = factorCounts[factorCounts.length] ||\
    \ 0;\n      factorCounts[factorCounts.length]++;\n    }\n  }\n  \n  let factors:\
    \ number[] = [];\n  for (let i = 0; i < factorCounts.length; i++) {\n    if (factorCounts[i])\
    \ {\n      factors.push(factorCounts[i]);\n    }\n  }\n  \n  return factors;\n\
    }\n\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: "../../../../../tmp/tmpoqan1_ul.ts(14,9): error TS2451: Cannot redeclare\
    \ block-scoped variable 'factors'.\n../../../../../tmp/tmpoqan1_ul.ts(19,11):\
    \ error TS2365: Operator '>=' cannot be applied to types 'number' and 'string'.\n\
    ../../../../../tmp/tmpoqan1_ul.ts(29,7): error TS2451: Cannot redeclare block-scoped\
    \ variable 'factors'.\n../../../../../tmp/tmpoqan1_ul.ts(32,20): error TS2345:\
    \ Argument of type 'number' is not assignable to parameter of type 'string'.\n\
    ../../../../../tmp/tmpoqan1_ul.ts(36,3): error TS2322: Type 'string[]' is not\
    \ assignable to type 'number[]'.\n  Type 'string' is not assignable to type 'number'.\n"
  timestamp: 1660014254
- exit_code: -1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n\tlet factors: number[] = [];\n\tlet i = 1;\n\twhile (n) {\n\t\t\
    if (n % i === 0) {\n\t\t\tfactors.push(i);\n\t\t\tn /= i;\n\t\t}\n\t\ti++;\n\t\
    }\n\treturn factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660014268
- exit_code: 2
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  // Compute factors for numbers that have been multiplied by themselves.\n\
    \  if (n >= 2 && isPrime(n)) {\n    return [2];\n  }\n\n  let factors = [2];\n\
    \  let sqn = n * n;\n\n  while (n > 1) {\n    if (isPrime(sqn)) {\n      factors.push(sqn);\n\
    \      n /= sqn;\n    } else {\n      sqn--;\n    }\n  }\n\n  return factors;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmprfe98_bl.ts(12,17): error TS2304: Cannot find name
    ''isPrime''.

    ../../../../../tmp/tmprfe98_bl.ts(20,9): error TS2304: Cannot find name ''isPrime''.

    '
  timestamp: 1660014254
- exit_code: 2
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    const factors = [0];\n    const primeFactors = [];\n    for\
    \ (let i = 1; i <= Math.ceil(n/Math.pow(2, 30)); ++i) {\n        const maxFactor\
    \ = parseInt(n / Math.pow(2, i)) - 1;\n        let factor = 1;\n        for (let\
    \ j = 1; j <= maxFactor; ++j) {\n            if (n % Math.pow(2, j) === 0) {\n\
    \                factor *= j;\n            }\n        }\n        if (factors.indexOf(factor)\
    \ === -1) {\n            factors.push(factor);\n            if (factors.length\
    \ === primeFactors.length) {\n                primeFactors.push(factors);\n  \
    \          }\n        }\n    }\n    return primeFactors;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpisv5ywxk.ts(14,36): error TS2345: Argument of type
    ''number'' is not assignable to parameter of type ''string''.

    '
  timestamp: 1660014254
- exit_code: -5
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  n = n + 1; // number should be even\n  const p = Math.sqrt(n);\n\
    \  let factors = new Array();\n  for (let i = 1; i <= p; i++) {\n    while (n%i\
    \ == 0) {\n      n = n/i;\n      factors.push(i);\n    }\n  }\n  return factors;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: Exception
  stderr: "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error\
    \ 188720663\n#\n#\n#\n#FailureMessage Object: 0x7ffeca713920\n 1: 0x2b4317082727\
    \  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 2: 0x2b4317c1728e\
    \ V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 3: 0x2b4317551f8b  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 4: 0x2b43176e3760  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 5: 0x2b43176eb0cd  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 6: 0x2b43178d57db v8::internal::Runtime_GrowArrayElements(int, unsigned long*,\
    \ v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 7: 0x2b43172347f9  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n"
  stdout: ''
  timestamp: 1660014257
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    if (n === 1) return [1];\n    let factors = [];\n    for (let\
    \ factor of factorize(n)) {\n        if (n / factor === factor) {\n          \
    \  factors.push(factor);\n        }\n    }\n    return factors;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpxkubu_hn.js:11\n    if (n === 1)\n    ^\n\nRangeError: Maximum\
    \ call stack size exceeded\n    at factorize (/tmp/tmpxkubu_hn.js:11:5)\n    at\
    \ factorize (/tmp/tmpxkubu_hn.js:14:27)\n    at factorize (/tmp/tmpxkubu_hn.js:14:27)\n\
    \    at factorize (/tmp/tmpxkubu_hn.js:14:27)\n    at factorize (/tmp/tmpxkubu_hn.js:14:27)\n\
    \    at factorize (/tmp/tmpxkubu_hn.js:14:27)\n    at factorize (/tmp/tmpxkubu_hn.js:14:27)\n\
    \    at factorize (/tmp/tmpxkubu_hn.js:14:27)\n    at factorize (/tmp/tmpxkubu_hn.js:14:27)\n\
    \    at factorize (/tmp/tmpxkubu_hn.js:14:27)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014254
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  if (n === 1) return [1];\n  let primeFactors = [];\n  for (let\
    \ i = 2; i <= Math.sqrt(n); i++) {\n    while (n % i === 0) {\n      primeFactors.push(i);\n\
    \      n /= i;\n    }\n  }\n  return primeFactors;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmpgo1ihz3t.js:25:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpgo1ihz3t.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014254
- exit_code: 2
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    const factors: number[] = [];\n    const divisors = getDivisors(n);\n\
    \    for (let i = 0; i < divisors.length; i++) {\n        const divisor = divisors[i];\n\
    \        const prime = getPrimeFactors(divisor);\n        for (let k = 0; k <\
    \ prime.length; k++) {\n            let factor = 1;\n            for (let j =\
    \ 0; j < divisors.length; j++) {\n                if (prime[k] === divisors[j])\
    \ {\n                    factor *= divisors[j];\n                    break;\n\
    \                }\n            }\n            factors.push(factor);\n       \
    \ }\n    }\n    return factors;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n\
    \  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n\
    \  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmplvpop6od.ts(12,22): error TS2304: Cannot find name
    ''getDivisors''.

    ../../../../../tmp/tmplvpop6od.ts(15,23): error TS2304: Cannot find name ''getPrimeFactors''.

    '
  timestamp: 1660014254
- exit_code: 2
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors = [];\n\n  // TODO: fix this function\n  const primes\
    \ = Primes(n);\n  let primeFactors = PrimeFactors(primes);\n  const factor = 2;\n\
    \  while (factors.indexOf(factor) > -1) {\n    factors[factor] = factors[factor]\
    \ + 1;\n    primeFactors = PrimeFactors(primes);\n  }\n  while (primeFactors.length\
    \ !== factors.length) {\n    factors.push(primeFactors.pop());\n  }\n  return\
    \ factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpyekjoh4j.ts(14,18): error TS2552: Cannot find name
    ''Primes''. Did you mean ''primes''?

    ../../../../../tmp/tmpyekjoh4j.ts(15,22): error TS2552: Cannot find name ''PrimeFactors''.
    Did you mean ''primeFactors''?

    ../../../../../tmp/tmpyekjoh4j.ts(19,20): error TS2552: Cannot find name ''PrimeFactors''.
    Did you mean ''primeFactors''?

    '
  timestamp: 1660014254
- exit_code: 0
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    var i, factors = [];\n    for (i = 2; i <= Math.sqrt(n); i++)\
    \ {\n        while ((n % i) === 0) {\n            factors.push(i);\n         \
    \   n = n / i;\n        }\n    }\n    if (n > 1) {\n        factors.push(n);\n\
    \    }\n    return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014254
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    var factors: number[] = []; //Store factors here\n    var m\
    \ = Math.floor((Math.sqrt(n) / 2));\n    for (var i = 2; i <= m; i++) {\n    \
    \    if (n % i == 0) {\n            while (n % i == 0) {\n                n /=\
    \ i;\n                if (n > 1) factors.push(i);\n            }\n        }\n\
    \    }\n    if (n > 1) {\n        factors.push(n);\n    }\n    return factors;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4\n]\n\n\
    should loosely deep-equal\n\n[\n  2,\n  2\n]\n    at test (/tmp/tmpsxib9jst.js:31:12)\n\
    \    at Object.<anonymous> (/tmp/tmpsxib9jst.js:39:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4 ],\n \
    \ expected: [ 2, 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014254
- exit_code: -5
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    let maxFact = 1;\n    let maxDivisor = 1;\n    let divisor =\
    \ parseInt(Math.sqrt(n).toString(10));\n    let factors: number[] = [];\n    let\
    \ factorsIndex = 0;\n    let product = 1;\n    while (n > 1) {\n        factorsIndex++;\n\
    \        product = product * factors[factorsIndex];\n        n = Math.floor(n\
    \ / divisor);\n        if (n > 1) {\n            factors[factorsIndex] = n;\n\
    \            maxFact = Math.max(maxFact, factorsIndex);\n            divisor =\
    \ parseInt(Math.sqrt(n).toString(10));\n        }\n    }\n\n    return factors;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: Exception
  stderr: "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error\
    \ 174895934\n#\n#\n#\n#FailureMessage Object: 0x7ffea1481640\n 1: 0x2af2082a9727\
    \  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 2: 0x2af208e3e28e\
    \ V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 3: 0x2af208778f8b  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 4: 0x2af20890a8a0  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 5: 0x2af208912230  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 6: 0x2af208afc7db v8::internal::Runtime_GrowArrayElements(int, unsigned long*,\
    \ v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 7: 0x2af20845b7f9  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n"
  stdout: ''
  timestamp: 1660014267
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  if (n === 0) {\n    return [];\n  }\n\n  const factorization =\
    \ [];\n\n  for (let i = 2; i <= n / i; i++) {\n    if (n % i === 0) {\n      factorization.push(i);\n\
    \      while (n % i === 0) {\n        n /= i;\n        factorization.push(i);\n\
    \      }\n    }\n  }\n\n  return factorization;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmpugm4zmh2.js:29:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpugm4zmh2.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014255
- exit_code: 2
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factorsArr = []\n  factorizeRecursive(n, factorsArr)\n \
    \ return factorsArr\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpzhbunr2a.ts(12,3): error TS2304: Cannot find name
    ''factorizeRecursive''.

    '
  timestamp: 1660014254
- exit_code: 2
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  let factorsArr = [1];\n  let factorization = new Map<number, number[]>();\n\
    \n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    let n = i;\n    let primeFactorsArr:\
    \ number[] = [];\n\n    while (n % i == 0) {\n      primeFactorsArr.push(i);\n\
    \      n /= i;\n    }\n\n    factorsArr = factorsArr.concat(primeFactorsArr);\n\
    \    factorization.set(n, primeFactorsArr);\n  }\n\n  let factors = Array.from(factorization.keys());\n\
    \  factors.push(factors[0]);\n  return factors;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpy1seedgy.ts(12,27): error TS2583: Cannot find name
    ''Map''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    ../../../../../tmp/tmpy1seedgy.ts(27,23): error TS2339: Property ''from'' does
    not exist on type ''ArrayConstructor''.

    '
  timestamp: 1660014254
- exit_code: 2
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  let factors: number[] = [];\n  while (true) {\n    const factorization:\
    \ number[] = factor(n);\n    if (factorization.length == 0) {\n      break;\n\
    \    }\n    let currentCount: number = 1;\n    for (let factor: number in factorization)\
    \ {\n      currentCount *= factorization[factor];\n    }\n    if (currentCount\
    \ <= n) {\n      factors.push(currentCount);\n      continue;\n    }\n    factors.push(factorization);\n\
    \  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpsy01rr89.ts(13,37): error TS2552: Cannot find name
    ''factor''. Did you mean ''factors''?

    ../../../../../tmp/tmpsy01rr89.ts(18,14): error TS2404: The left-hand side of
    a ''for...in'' statement cannot use a type annotation.

    ../../../../../tmp/tmpsy01rr89.ts(25,18): error TS2345: Argument of type ''number[]''
    is not assignable to parameter of type ''number''.

    '
  timestamp: 1660014255
- exit_code: 2
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  return factorizeHelper(n);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n\
    \  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n\
    \  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpik935os1.ts(11,10): error TS2304: Cannot find name
    ''factorizeHelper''.

    '
  timestamp: 1660014255
- exit_code: 0
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  if (n === 1) return [1];\n  let factors = [];\n  let i = 1;\n\
    \  for (let ii = 2; ii <= n; ii++) {\n    while (n % ii === 0) {\n      n = n\
    \ / ii;\n      factors.push(ii);\n    }\n  }\n  return factors;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014256
- exit_code: -1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n\tvar factors: number[] = [];\n\tvar maxFactor: number = 1;\n\t\
    var maxFactorIndex: number = 0;\n\tfor (var i = 1; i <= n; i++) {\n\t\tvar numOfTimesFactor:\
    \ number = i;\n\t\tvar indexOfMaxFactorIndex: number = 0;\n\t\twhile (numOfTimesFactor\
    \ % i == 0) {\n\t\t\tnumOfTimesFactor /= i;\n\t\t\tindexOfMaxFactorIndex++;\n\t\
    \t}\n\t\tif (numOfTimesFactor > maxFactor) {\n\t\t\tmaxFactor = numOfTimesFactor;\n\
    \t\t\tmaxFactorIndex = indexOfMaxFactorIndex;\n\t\t}\n\t\tfactors[indexOfMaxFactorIndex]\
    \ = numOfTimesFactor;\n\t}\n\treturn factors;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660014271
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    let factors: number[] = [];\n    for (let i = 2; i <= Math.sqrt(n);\
    \ i++) {\n        while (n % i === 0) {\n            factors.push(i);\n      \
    \      n /= i;\n        }\n    }\n    factors.push(n);\n    return factors;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  2,\n\
    \  1\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  2\n]\n    at test (/tmp/tmp8a6ccedh.js:25:12)\n\
    \    at Object.<anonymous> (/tmp/tmp8a6ccedh.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 2, 1\
    \ ],\n  expected: [ 2, 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014256
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    const primeFactors: number[] = [];\n    for (let i = 2; i <=\
    \ Math.sqrt(n); i++) {\n        if (n % i === 0) {\n            primeFactors.push(i\
    \ as any);\n            while (n % i === 0) {\n                n = Math.floor(n\
    \ / i);\n                primeFactors.push(i as any);\n            }\n       \
    \ }\n    }\n    return primeFactors;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n\
    \  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n\
    \  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmpwk8b2f88.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpwk8b2f88.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014256
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  let factors: number[] = [];\n\n  for (let i = 2; i <= Math.sqrt(n);\
    \ i++) {\n    while (n % i === 0) {\n      n = n / i;\n      factors.push(i);\n\
    \    }\n  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n\
    \  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n\
    \  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmpc5qllh1x.js:23:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpc5qllh1x.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014256
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  var factors: number[] = [];\n  var isPrime: boolean;\n\n  for\
    \ (isPrime = true; !isPrime && n > 1; isPrime = !isPrime, n = n / 2) {\n    for\
    \ (var i = 2; i <= Math.sqrt(n); i++) {\n      if (n % i === 0) {\n        isPrime\
    \ = false;\n        break;\n      }\n    }\n    if (isPrime) {\n      factors.push(i);\n\
    \    }\n  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n\
    \  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n\
    \  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmpxw5ism98.js:29:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpxw5ism98.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014256
- exit_code: 2
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  n = n + 2\n  let factors: number[] = []\n  while (n % 2 == 0)\
    \ {\n    factors.push(2)\n    n = Math.floor(n/2)\n  }\n  for (let i = 3; i <=\
    \ Math.sqrt(n); i++) {\n    while (n % i == 0) {\n      factors.push(i)\n    \
    \  n = Math.floor(n/i)\n    }\n  }\n  return factors\n}\n</code>\n<|/ a tags=algorithm,primes,math,factorization,javascript\
    \ |>\n<| c |>\nThe algorithm is very interesting, but I think the complexity is\
    \ O(n^3), not O(n^2) (I haven't checked the code though).\n<|/ c |>\n<| c |>\n\
    Oh, yes, I missed the time complexity, thank you for pointing it out. I will update\
    \ the code accordingly.\n<|/ c |>\n<| c |>\nI believe the complexity of finding\
    \ prime factors is the same as that of factorization. `factorize` needs to divide\
    \ `n` by each prime until it is smaller than or equal to the square root of n.\
    \ Since n is odd, there is no way to divide it into factors. Since `n` is a prime\
    \ number, the loop never runs (unless `n` happens to be a factor of another prime\
    \ number). So `factorize` has complexity O(n). But `primeFactors` has complexity\
    \ O(n^2). `factorize` needs to check `n` each time it is called (since `n` is\
    \ odd, `n` cannot divide into factors unless `n < 2*n`. So `factorize` has complexity\
    \ O(n^2).\n<|/ c |>\n<| a tags=algorithm,primes,math,factorization,javascript\
    \ |>\nHere is a simple implementation that returns an array of prime factors of\
    \ integers:\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpyo04h4c7.ts(25,2): error TS1110: Type expected.

    ../../../../../tmp/tmpyo04h4c7.ts(25,3): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpyo04h4c7.ts(26,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpyo04h4c7.ts(26,4): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpyo04h4c7.ts(27,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpyo04h4c7.ts(27,7): error TS1109: Expression expected.

    ../../../../../tmp/tmpyo04h4c7.ts(28,5): error TS1005: '';'' expected.

    ../../../../../tmp/tmpyo04h4c7.ts(28,15): error TS1005: '';'' expected.

    ../../../../../tmp/tmpyo04h4c7.ts(28,18): error TS1005: '';'' expected.

    ../../../../../tmp/tmpyo04h4c7.ts(28,23): error TS1005: '';'' expected.

    ../../../../../tmp/tmpyo04h4c7.ts(28,40): error TS1005: '';'' expected.

    ../../../../../tmp/tmpyo04h4c7.ts(28,42): error TS1005: '';'' expected.

    ../../../../../tmp/tmpyo04h4c7.ts(28,48): error TS1005: '';'' expected.

    ../../../../../tmp/tmpyo04h4c7.ts(28,52): error TS1005: '';'' expected.

    ../../../../../tmp/tmpyo04h4c7.ts(28,63): error TS1005: '';'' expected.

    ../../../../../tmp/tmpyo04h4c7.ts(28,66): error TS1005: '';'' expected.

    ../../../../../tmp/tmpyo04h4c7.ts(28,78): error TS1005: '';'' expected.

    ../../../../../tmp/tmpyo04h4c7.ts(28,88): error TS1005: '','' expected.

    ../../../../../tmp/tmpyo04h4c7.ts(28,93): error TS1005: '','' expected.

    ../../../../../tmp/tmpyo04h4c7.ts(28,121): error TS1002: Unterminated string literal.

    ../../../../../tmp/tmpyo04h4c7.ts(29,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpyo04h4c7.ts(29,4): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpyo04h4c7.ts(30,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpyo04h4c7.ts(30,7): error TS1109: Expression expected.

    ../../../../../tmp/tmpyo04h4c7.ts(31,12): error TS1005: '','' expected.

    ../../../../../tmp/tmpyo04h4c7.ts(31,19): error TS1005: '','' expected.

    ../../../../../tmp/tmpyo04h4c7.ts(31,23): error TS1005: '','' expected.

    ../../../../../tmp/tmpyo04h4c'
  timestamp: 1660014256
- exit_code: -5
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  var result: number[] = [];\n  for (var i = 0; i < n; i++) {\n\
    \    while (n % i === 0) {\n      result.push(i);\n      n /= i;\n    }\n  }\n\
    \  if (n > 1) {\n    result.push(n);\n  }\n  return result;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: Exception
  stderr: "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error\
    \ 169220804\n#\n#\n#\n#FailureMessage Object: 0x7ffc6aa1b810\n 1: 0x2b2842776727\
    \  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 2: 0x2b284330b28e\
    \ V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 3: 0x2b2842c45f8b  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 4: 0x2b2842dd7760  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 5: 0x2b2842ddf0cd  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 6: 0x2b2842fc97db v8::internal::Runtime_GrowArrayElements(int, unsigned long*,\
    \ v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 7: 0x2b28429287f9  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n"
  stdout: ''
  timestamp: 1660014259
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    const factors = [];\n\n    if (n === 0) {\n        factors.push(0);\n\
    \        return factors;\n    }\n    \n    for (let i = 1; i <= n; i++) {\n  \
    \      let prime = true;\n        for (let j = 1; j < i; j++) {\n            if\
    \ (n % j === 0) {\n                prime = false;\n                break;\n  \
    \          }\n        }\n        if (prime) {\n            factors.push(i);\n\
    \        }\n    }\n\n    return factors;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n\
    \  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n\
    \  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1\n]\n\n\
    should loosely deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmpynisg8d5.js:33:12)\n\
    \    at Object.<anonymous> (/tmp/tmpynisg8d5.js:42:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1 ],\n \
    \ expected: [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014256
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n\tlet i: number, factors: number[] = [], divisor: number, found\
    \ = false;\n\tfor (i = 2; i < Math.sqrt(n); ++i) {\n\t\tdivisor = i;\n\t\tfound\
    \ = true;\n\t\twhile (n % divisor == 0) {\n\t\t\tfound = false;\n\t\t\tfactors.push(divisor);\n\
    \t\t\tn /= divisor;\n\t\t}\n\t\tif (found) {\n\t\t\tfactors.push(divisor);\n\t\
    \t}\n\t}\n\treturn factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmpje7ui10e.js:29:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpje7ui10e.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014257
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  if (n <= 1) {\n    return [];\n  }\n\n  const factors: number[]\
    \ = [];\n\n  for (let i = 1; i <= n; ++i) {\n    if (n % i === 0) {\n      continue;\n\
    \    }\n    for (let j = 1; j <= n / i; ++j) {\n      if (n % (i * j) === 0) {\n\
    \        factors.push(j * i);\n      }\n    }\n  }\n  return factors;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmppr45rdjo.js:30:12)\n    at Object.<anonymous>\
    \ (/tmp/tmppr45rdjo.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014257
- exit_code: 2
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  let factors: number[] = [];\n  let factorsHash: any = {};\n  factorize(num,\
    \ factors, factorsHash);\n  return factors;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp6w9msadi.ts(13,13): error TS2304: Cannot find name
    ''num''.

    ../../../../../tmp/tmp6w9msadi.ts(13,18): error TS2554: Expected 1 arguments,
    but got 3.

    '
  timestamp: 1660014256
- exit_code: 0
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    const factors: number[] = [];\n    for (let factor = 2; factor\
    \ <= Math.sqrt(n); factor++) {\n        while (n % factor === 0) {\n         \
    \   n /= factor;\n            factors.push(factor);\n        }\n    }\n    if\
    \ (n !== 1) factors.push(n);\n    return factors;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014257
- exit_code: 2
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    if (n == 0) {\n        return [];\n    }\n    let factors: number[]\
    \ = [];\n    const minFactor = Math.floor(Math.sqrt(n));\n    let maxFactor =\
    \ minFactor * 2;\n    while (true) {\n        while (n % minFactor === 0) {\n\
    \            minFactor++;\n        }\n        while (n % maxFactor === 0) {\n\
    \            maxFactor--;\n        }\n        if (maxFactor <= minFactor) {\n\
    \            factors.push(maxFactor);\n            maxFactor = minFactor * 2;\n\
    \            minFactor--;\n        }\n        if (minFactor >= maxFactor) {\n\
    \            break;\n        }\n        n = Math.floor(n / maxFactor);\n    }\n\
    \    factors.push(minFactor);\n    return factors;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp9jdi5zj8.ts(19,13): error TS2588: Cannot assign to
    ''minFactor'' because it is a constant.

    ../../../../../tmp/tmp9jdi5zj8.ts(27,13): error TS2588: Cannot assign to ''minFactor''
    because it is a constant.

    '
  timestamp: 1660014256
- exit_code: 2
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors = new Array<number>();\n  let divisor = 2;\n  while\
    \ (divisor * divisor <= n) {\n    if (n % divisor === 0) {\n      divisor++;\n\
    \    } else {\n      factors.push(divisor);\n      n /= divisor;\n    }\n  }\n\
    \  if (n > 1) {\n    factors.push(1);\n  }\n  return factors;\n}\n</code>\n<|/\
    \ a dscore=2 |>\n<| c |>\nI like the fact that you didn't try to figure out how\
    \ to factor the number itself. I just got some time to think about it and I got\
    \ it now. :)\n<|/ c |>\n<| a tags=algorithm |>\nI've written a function which\
    \ returns the prime factors of a number.\n<code>\nvar primeFactors = n => {\n\
    \  let arr = [];\n  for (var i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i ===\
    \ 0) {\n      for (var k = 0; k <= Math.sqrt(n) / i; k++) {\n        if (n % i\
    \ == 0) {\n          arr.push(i);\n          n /= i;\n        }\n      }\n   \
    \ }\n  }\n  return arr;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nI wouldn't call\
    \ it a factorization because it doesn't factor the number but just takes the prime\
    \ factors of an integer.\n<|/ c |>\n<| a |>\nTo find the factors of a number,\
    \ you have to check every number between the smallest and the largest of the factors.\
    \ \nFor example, for number 4, the factors are: 2, 2, 2\nFor number 6, the factors\
    \ are: 2, 3. \nAnd for number 8, the factors are: 2, 5, 2, 5\nSo the algorithm\
    \ is very simple:\n<code>\ndef factors(n):\n    factors = []\n    for i in range(2,\
    \ n//2):\n        if n%i == 0:\n            factors.append(i)\n    return factors\n\
    \nprint(factors(8))\n</code>\nThe above code returns:\n[2, 5, 2, 5]\n<|/ a tags=algorithm\
    \ dscore=1 |>\n<| c |>\nThe question is not how to find the factors, it's how\
    \ to find the primes *of the factors*.\n<|/ c |>\n<| c |>\nI think it's better\
    \ to call it prime factors because it finds primes factors of a number. As you\
    \ can see on the example, 2, 5, 2, 5 are prime factors of 8.\n<|/ c |>\n<| c |>\n\
    The question explicitly says \"each factor appears once, even though it occurs\
    \ multiple times in the factorization\". That's why I called it factorization.\
    \ Your answer doesn't really answer the question, which is to find prime factors\
    \ of a number. Also, you should add `2` to your factors list when `n % 2 == 0`.\n\
    <|/ c |>\n<|\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp1gz738k5.ts(26,2): error TS1110: Type expected.

    ../../../../../tmp/tmp1gz738k5.ts(26,3): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmp1gz738k5.ts(27,2): error TS1109: Expression expected.

    ../../../../../tmp/tmp1gz738k5.ts(27,4): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmp1gz738k5.ts(28,2): error TS1109: Expression expected.

    ../../../../../tmp/tmp1gz738k5.ts(28,7): error TS1109: Expression expected.

    ../../../../../tmp/tmp1gz738k5.ts(29,3): error TS1005: '';'' expected.

    ../../../../../tmp/tmp1gz738k5.ts(29,8): error TS1005: '';'' expected.

    ../../../../../tmp/tmp1gz738k5.ts(29,12): error TS1005: '';'' expected.

    ../../../../../tmp/tmp1gz738k5.ts(29,17): error TS1005: '';'' expected.

    ../../../../../tmp/tmp1gz738k5.ts(29,22): error TS1005: '';'' expected.

    ../../../../../tmp/tmp1gz738k5.ts(29,26): error TS1005: '';'' expected.

    ../../../../../tmp/tmp1gz738k5.ts(29,30): error TS1005: '';'' expected.

    ../../../../../tmp/tmp1gz738k5.ts(29,143): error TS1002: Unterminated string literal.

    ../../../../../tmp/tmp1gz738k5.ts(30,2): error TS1109: Expression expected.

    ../../../../../tmp/tmp1gz738k5.ts(30,4): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmp1gz738k5.ts(31,2): error TS1109: Expression expected.

    ../../../../../tmp/tmp1gz738k5.ts(31,6): error TS1005: '';'' expected.

    ../../../../../tmp/tmp1gz738k5.ts(31,22): error TS1109: Expression expected.

    ../../../../../tmp/tmp1gz738k5.ts(32,2): error TS1005: '';'' expected.

    ../../../../../tmp/tmp1gz738k5.ts(32,69): error TS1002: Unterminated string literal.

    ../../../../../tmp/tmp1gz738k5.ts(34,1): error TS1109: Expression expected.

    ../../../../../tmp/tmp1gz738k5.ts(48,2): error TS1110: Type expected.

    ../../../../../tmp/tmp1gz738k5.ts(48,3): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmp1gz738k5.ts(49,2): error TS1109: Expression expected.

    ../../../../../tmp/tmp1gz738k5.ts(49,4): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmp'
  timestamp: 1660014257
- exit_code: 2
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n\t// Return empty array if given number is too large\n\tif (n ===\
    \ 0 || n === 1 || n === 2)\n\t\treturn [];\n\t\n\tlet primeFactorization: number[][]\
    \ = [];\n\tlet isPrime: number[] = [];\n\tlet isPrimeCount: number[] = [2, 2,\
    \ 2];\n\tlet isPrimeCountArray: number[][] = [];\n\tlet primeFactors: number[]\
    \ = [];\n\tlet primeFactorsCount: number[] = [2, 2, 2];\n\tlet primeFactorsCountArray:\
    \ number[][] = [];\n\tlet num: number[] = [];\n\t\n\t// Create and populate all\
    \ arrays to store prime factorizations\n\twhile (isPrimeCount[isPrime.length -\
    \ 1] < n) {\n\t\tprimeFactorsCountArray.push(isPrimeCount);\n\t\tisPrimeCountArray[isPrimeCountArray.length\
    \ - 1] = [];\n\t\tisPrimeCountArray.push(isPrimeCount);\n\t\tisPrimeCountArray.push(isPrimeCount);\n\
    \t\tisPrimeCountArray.push(isPrimeCount);\n\t\tisPrimeCountArray.push(isPrimeCount);\n\
    \t\tisPrimeCountArray.push(isPrimeCount);\n\t}\n\tprimeFactorsCountArray[primeFactorsCountArray.length\
    \ - 1].length = n; //Set length of array for given number n\n\t\n\t// Loop through\
    \ all possible prime numbers and check if they are factors of given number\n\t\
    for (let i: number = 2; i<= n; i++) {\n\t\tlet isPrimeCheck = false;\n\t\tisPrimeCountArray[isPrimeCountArray.length\
    \ - 1].length = n; //Reset length for current number n\n\t\t\n\t\t// Loop through\
    \ all possible prime numbers and check if they are factors of given number\n\t\
    \tfor (let j: number = 0; j < isPrimeCountArray[isPrimeCountArray.length - 1].length;\
    \ j++) {\n\t\t\tif (isPrimeCountArray[isPrimeCountArray.length - 1][j] < i) {\n\
    \t\t\t\tisPrimeCheck = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (isPrimeCheck\
    \ === true) {\n\t\t\tisPrime = [i]; //If prime then add to array\n\t\t\tisPrimeCount[isPrimeCountArray.length\
    \ - 1] = [i]; //Update count for current number n\n\t\t}\n\t}\n\t\n\t// Loop through\
    \ all possible prime numbers and check if they are factors of given number\n\t\
    for (let i: number = 0; i < isPrimeCountArray[isPrimeCountArray.length - 1].length;\
    \ i++) {\n\t\tif (isPrimeCountArray[isPrimeCountArray.length - 1][i] > n) break;\
    \ //If given number n has more factors \ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n\
    \  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n\
    \  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp5w6z_02d.ts(73,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660014257
- exit_code: 2
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    let factors: number[] = [];\n    let factorsCounts: number[]\
    \ = [];\n    for (let i = 2; i <= n; i++) {\n        let factorsCount = 0;\n \
    \       while (n % i === 0) {\n            factorsCount += 1;\n            n /=\
    \ i;\n        }\n        if (factorsCount > 1) {\n            factors.push(factorsCount);\n\
    \            factorsCounts.push(factorsCount);\n        }\n    }\n    if (n !=\
    \ 1) {\n        factors.push(1);\n        factorsCounts.push(1);\n    }\n    return\
    \ [factors, factorsCounts];\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp39vhs0_8.ts(28,13): error TS2322: Type ''number[]''
    is not assignable to type ''number''.

    ../../../../../tmp/tmp39vhs0_8.ts(28,22): error TS2322: Type ''number[]'' is not
    assignable to type ''number''.

    '
  timestamp: 1660014258
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n\t// return factors(n);\n\tconst factors: number[] = [];\n\n\tfunction\
    \ helper(n: number): void {\n\t\tif (n === 0) {\n\t\t\treturn;\n\t\t}\n\t\tif\
    \ (factors.length === 0 && n >= 2) {\n\t\t\tfactors.push(2);\n\t\t}\n\t\tif (factors.length\
    \ === 0 && n >= 5) {\n\t\t\tfactors.push(5);\n\t\t}\n\t\tif (factors.length ===\
    \ 0 && n >= 7) {\n\t\t\tfactors.push(7);\n\t\t}\n\t\tif (factors.length === 0\
    \ && n >= 10) {\n\t\t\tfactors.push(10);\n\t\t}\n\t\tif (factors.length === 0\
    \ && n >= 100) {\n\t\t\tfactors.push(100);\n\t\t}\n\t\tif (factors.length ===\
    \ 0 && n >= 1000) {\n\t\t\tfactors.push(1000);\n\t\t}\n\n\t\tfor (let i = 2; i\
    \ <= Math.sqrt(n); i++) {\n\t\t\tif (n % i === 0) {\n\t\t\t\thelper(i * i);\n\t\
    \t\t\tif (n % i === 0) {\n\t\t\t\t\tfactors.push(i / n);\n\t\t\t\t}\n\t\t\t}\n\
    \t\t}\n\t}\n\n\thelper(n);\n\n\treturn factors;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpsooy3qtf.js:35\n        for (var i = 2; i <= Math.sqrt(n); i++)\
    \ {\n                                  ^\n\nRangeError: Maximum call stack size\
    \ exceeded\n    at Math.sqrt (<anonymous>)\n    at helper (/tmp/tmpsooy3qtf.js:35:35)\n\
    \    at helper (/tmp/tmpsooy3qtf.js:37:17)\n    at helper (/tmp/tmpsooy3qtf.js:37:17)\n\
    \    at helper (/tmp/tmpsooy3qtf.js:37:17)\n    at helper (/tmp/tmpsooy3qtf.js:37:17)\n\
    \    at helper (/tmp/tmpsooy3qtf.js:37:17)\n    at helper (/tmp/tmpsooy3qtf.js:37:17)\n\
    \    at helper (/tmp/tmpsooy3qtf.js:37:17)\n    at helper (/tmp/tmpsooy3qtf.js:37:17)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014258
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    var factors = []\n    var i = 2\n    while (true) {\n      \
    \  if (n % i === 0) {\n            factors.push(i)\n            factors.push(n\
    \ / i)\n            if (n % i === 0) {\n                factors.push(n / i)\n\
    \                factors.push(i)\n                break\n            }\n     \
    \       i++\n        } else {\n            i++\n        }\n    }\n    return factors\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  1,\n\
    \  1,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmpmsqss8f6.js:33:12)\n\
    \    at Object.<anonymous> (/tmp/tmpmsqss8f6.js:42:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 1, 1,\
    \ 2 ],\n  expected: [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014259
- exit_code: -5
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  if (n < 2) return [];\n  let i: number;\n  let result = [];\n\
    \  for (i = 1; i <= n; i++) {\n    while (n % i === 0) {\n      result.push(i);\n\
    \      n = Math.floor(n / i);\n    }\n  }\n  return result;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: Exception
  stderr: "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error\
    \ 169220804\n#\n#\n#\n#FailureMessage Object: 0x7ffc13c79880\n 1: 0x2abbb3c51727\
    \  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 2: 0x2abbb47e628e\
    \ V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 3: 0x2abbb4120f8b  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 4: 0x2abbb42b2760  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 5: 0x2abbb42ba0cd  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 6: 0x2abbb44a47db v8::internal::Runtime_GrowArrayElements(int, unsigned long*,\
    \ v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 7: 0x2abbb3e037f9  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n"
  stdout: ''
  timestamp: 1660014262
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    let factors: number[] = [];\n    let divisor: number = n;\n\
    \    while (divisor !== 1) {\n        let factor = 1;\n        for (let i = 2;\
    \ i < divisor; i++) {\n            if (n % i === 0) {\n                factor\
    \ *= i;\n            }\n        }\n        if (factor > 1) {\n            divisor\
    \ *= factor;\n            factors.push(factor);\n        } else {\n          \
    \  divisor = 1;\n        }\n    }\n    return factors;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmp6tle7mxj.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp6tle7mxj.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014258
- exit_code: -5
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  var factors = [];\n  var div = 1;\n  while (n > 1) {\n    if (n\
    \ % div == 0) {\n      factors.push(div);\n      n /= div;\n    } else {\n   \
    \   ++div;\n    }\n  }\n  if (n != 1) {\n    factors.push(1);\n  }\n  return factors;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: Exception
  stderr: "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error\
    \ 169220804\n#\n#\n#\n#FailureMessage Object: 0x7ffc9442bea0\n 1: 0x2b23a5130727\
    \  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 2: 0x2b23a5cc528e\
    \ V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 3: 0x2b23a55fff8b  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 4: 0x2b23a5791760  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 5: 0x2b23a57990cd  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 6: 0x2b23a59837db v8::internal::Runtime_GrowArrayElements(int, unsigned long*,\
    \ v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 7: 0x2b23a52e27f9  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n"
  stdout: ''
  timestamp: 1660014261
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n\tlet factorization = new Array(n);\n\tlet primeFactorization =\
    \ new Array(n);\n\tlet isPrime = true;\n\tfor (let i = 0; i < factorization.length;\
    \ i++) {\n\t\tfactorization[i] = new Array();\n\t\tprimeFactorization[i] = new\
    \ Array();\n\t}\n\tfor (let i = 1; i <= n; i++) {\n\t\tisPrime = true;\n\t\tfor\
    \ (let j = 1; j <= Math.sqrt(n); j++) {\n\t\t\tif (n % j === 0) {\n\t\t\t\tisPrime\
    \ = false;\n\t\t\t}\n\t\t}\n\t\tif (isPrime) {\n\t\t\tprimeFactorization[i].push(i);\n\
    \t\t\tfactorization[i].push(i);\n\t\t}\n\t}\n\treturn primeFactorization;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [],\n  []\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmpty427rsh.js:35:12)\n\
    \    at Object.<anonymous> (/tmp/tmpty427rsh.js:44:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [], [] ],\n\
    \  expected: [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014259
- exit_code: 2
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const primeFactorization = new Set<number>();\n  let factors:\
    \ number[] = [];\n  while (true) {\n    if (primeFactorization.has(n)) {\n   \
    \   return factors;\n    }\n    let factor = 1;\n    for (let i = 0; i * factor\
    \ <= n; i++) {\n      if (n % i == 0) {\n        factor *= i;\n      }\n    }\n\
    \    factors.push(factor);\n    primeFactorization.add(factor);\n    n *= factor;\n\
    \  }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpdfdsk3ez.ts(11,34): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660014258
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    let primes = [];\n    for (let i = 2; i < n; i++) {\n      \
    \  if (n % i == 0) {\n            let factors = n - i;\n            if (factors\
    \ != 0) {\n                primes.push(factors);\n            }\n        }\n \
    \   }\n    return primes;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmp1v0by8v0.js:25:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp1v0by8v0.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014259
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const primes: number[] = []; //store all the prime factors\n \
    \ for (let i = 2; Math.pow(2, i) < n; i++) {\n    let x = Math.floor(Math.log(n)\
    \ / Math.log(2)); //get log base 2\n    let isPrime = false; //check if number\
    \ is prime\n    for (let j = 0; j < primes.length; j++) {\n      if (n % primes[j]\
    \ == 0) {\n        isPrime = true; //if prime then break\n        break; //otherwise\
    \ continue loop\n      }\n    }\n    if (isPrime) {\n      primes.push(x); //if\
    \ prime then add to list of primes\n    }\n  }\n  return primes;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmpb0cw2rtu.js:30:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpb0cw2rtu.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014259
- exit_code: 2
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    let result: number[] = [];\n    let factors: number[][] = [];\n\
    \    do {\n        factors = factorize(Math.sqrt(n));\n        factors = factors.reduce((acc,\
    \ val) => [...acc, val], []);\n    } while (n < 1);\n    for (let i of factors)\
    \ {\n        result.push(i);\n        n /= i;\n    }\n    return result;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: "../../../../../tmp/tmpx33mj3c6.ts(14,9): error TS2322: Type 'number[]'\
    \ is not assignable to type 'number[][]'.\n  Type 'number' is not assignable to\
    \ type 'number[]'.\n../../../../../tmp/tmpx33mj3c6.ts(15,9): error TS2322: Type\
    \ '(number | number[])[]' is not assignable to type 'number[][]'.\n  Type 'number\
    \ | number[]' is not assignable to type 'number[]'.\n    Type 'number' is not\
    \ assignable to type 'number[]'.\n../../../../../tmp/tmpx33mj3c6.ts(18,21): error\
    \ TS2345: Argument of type 'number[]' is not assignable to parameter of type 'number'.\n\
    ../../../../../tmp/tmpx33mj3c6.ts(19,14): error TS2363: The right-hand side of\
    \ an arithmetic operation must be of type 'any', 'number', 'bigint' or an enum\
    \ type.\n"
  timestamp: 1660014259
- exit_code: -5
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    var factors = [];\n    var temp = 1;\n    while (n != 0) {\n\
    \        while (n % temp == 0) {\n            factors.push(temp);\n          \
    \  n /= temp;\n        }\n        temp++;\n    }\n    return factors;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: Exception
  stderr: "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error\
    \ 169220804\n#\n#\n#\n#FailureMessage Object: 0x7ffcbb3f61b0\n 1: 0x2ac458915727\
    \  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 2: 0x2ac4594aa28e\
    \ V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 3: 0x2ac458de4f8b  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 4: 0x2ac458f76760  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 5: 0x2ac458f7e0cd  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 6: 0x2ac4591687db v8::internal::Runtime_GrowArrayElements(int, unsigned long*,\
    \ v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 7: 0x2ac458ac77f9  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n"
  stdout: ''
  timestamp: 1660014262
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors: number[] = []\n  let i = 2\n  while (Math.sqrt(n)\
    \ > Math.pow(2, i)) {\n    if (n % i === 0) {\n      factors.push(~~(n / i))\n\
    \      n = n / i\n    } else {\n      ++i\n    }\n  }\n  factors.push(~~n)\n \
    \ return factors\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4\n]\n\n\
    should loosely deep-equal\n\n[\n  2,\n  2\n]\n    at test (/tmp/tmp7f2hwq0c.js:29:12)\n\
    \    at Object.<anonymous> (/tmp/tmp7f2hwq0c.js:37:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4 ],\n \
    \ expected: [ 2, 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014259
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    if (n <= 1) return [];\n\n    const result: number[] = [];\n\
    \    let i = 2;\n\n    for (let factor = 2; factor <= n; ++factor) {\n       \
    \ while (n % factor === 0) {\n            result.push(factor);\n            n\
    \ /= factor;\n        }\n\n        if (n > 1) {\n            result.push(1);\n\
    \            n /= 1;\n        }\n    }\n\n    return result.sort((a: number, b:\
    \ number) => a - b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1,\n\
    \  1,\n  1,\n  1,\n  1,\n  1,\n  1,\n  1,\n  1,\n  1,\n  1,\n  1,\n  1,\n  1,\n\
    \  1,\n  1,\n  3,\n  19\n]\n\nshould loosely deep-equal\n\n[\n  3,\n  19\n]\n\
    \    at test (/tmp/tmpt29r58df.js:33:12)\n    at Object.<anonymous> (/tmp/tmpt29r58df.js:39:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    1,\
    \ 1, 1, 1,  1, 1, 1,\n    1, 1, 1, 1,  1, 1, 1,\n    1, 1, 1, 3, 19\n  ],\n  expected:\
    \ [ 3, 19 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014259
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  if (n < 0) {\n    throw new Error('factorize() requires the input\
    \ number be greater than 0.')\n  }\n\n  const factorsArr: number[] = []\n  const\
    \ maxFactor = n % 2 === 0 ? n : n / 2\n  const maxFactorFactors = factorize(maxFactor)\n\
    \  let lastFactor = 2\n  factorsArr.push(lastFactor)\n  lastFactor = maxFactorFactors[maxFactorFactors.length\
    \ - 1]\n  factorsArr.push(lastFactor)\n\n  for (let i = 2; i <= maxFactor; i++)\
    \ {\n    if (n % i === 0) {\n      lastFactor = i\n      factorsArr.push(lastFactor)\n\
    \    }\n  }\n  return factorsArr\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n\
    \  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n\
    \  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmprxm7fy_g.js:11\n    if (n < 0) {\n    ^\n\nRangeError: Maximum\
    \ call stack size exceeded\n    at factorize (/tmp/tmprxm7fy_g.js:11:5)\n    at\
    \ factorize (/tmp/tmprxm7fy_g.js:16:28)\n    at factorize (/tmp/tmprxm7fy_g.js:16:28)\n\
    \    at factorize (/tmp/tmprxm7fy_g.js:16:28)\n    at factorize (/tmp/tmprxm7fy_g.js:16:28)\n\
    \    at factorize (/tmp/tmprxm7fy_g.js:16:28)\n    at factorize (/tmp/tmprxm7fy_g.js:16:28)\n\
    \    at factorize (/tmp/tmprxm7fy_g.js:16:28)\n    at factorize (/tmp/tmprxm7fy_g.js:16:28)\n\
    \    at factorize (/tmp/tmprxm7fy_g.js:16:28)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014259
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n\tif (n === 0) {\n\t\treturn [];\n\t}\n\tlet factors: number[] =\
    \ [];\n\tlet i = 10;\n\twhile (n > i) {\n\t\twhile (n % i === 0) {\n\t\t\tn /=\
    \ i;\n\t\t\tfactors.push(i);\n\t\t}\n\t\ti++;\n\t}\n\treturn factors;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmpw0i0xawi.js:28:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpw0i0xawi.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014259
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    if (n <= 1) {\n        return [n - 1];\n    }\n    var ii =\
    \ Math.ceil(n);\n    var factors = [];\n    for (var j = 1; j <= ii; j++) {\n\
    \        if (n % j === 0) {\n            factors.push(j);\n            n = n /\
    \ j;\n        }\n    }\n    factors.push(n);\n    return factors;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2,\n\
    \  1\n]\n\nshould loosely deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmpnvxkhw50.js:28:12)\n\
    \    at Object.<anonymous> (/tmp/tmpnvxkhw50.js:37:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2, 1\
    \ ],\n  expected: [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014260
- exit_code: 2
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n\tlet factors = [];\n\n\tlet factorizer = n!;\n\tlet prime = factorizer(2);\n\
    \tlet nextPrime = 2;\n\n\twhile (prime !== 1) {\n\t\tnextPrime++;\n\t\twhile (factorizer(nextPrime)\
    \ === 0) {\n\t\t\tnextPrime++;\n\t\t}\n\t\tfactors.push(prime);\n\t\tfactorizer\
    \ = nextPrime;\n\t\tprime = nextPrime;\n\t\tnextPrime = prime;\n\t}\n\n\treturn\
    \ factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: "../../../../../tmp/tmpjmnepksc.ts(14,14): error TS2349: This expression\
    \ is not callable.\n  Type 'Number' has no call signatures.\n../../../../../tmp/tmpjmnepksc.ts(19,10):\
    \ error TS2349: This expression is not callable.\n  Type 'Number' has no call\
    \ signatures.\n"
  timestamp: 1660014260
- exit_code: 2
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  let primeFactors = new Array(n)\n\n  for (let i = 0; i <= n; i++)\
    \ {\n    let j = i\n    let temp = 1\n\n    while (j <= n) {\n      if (n % j\
    \ === 0) {\n        j++\n        temp++\n      } else {\n        break\n     \
    \ }\n    }\n\n    primeFactors[i] = temp\n  }\n\n  return primeFactors\n}\n\n\
    const numbers = [2, 2, 2, 2, 5, 7, 9]\n\nconst result = numbers.map((num) => factorize(num))\n\
    \nconsole.log(result)</code>\n<|/ a |>\n<| a dscore=1 tags=arrays,javascript,algorithm,math\
    \ |>\nThis solution is similar to what suggested by Tushar (it uses reduce).\n\
    \n<code>\nconst factorize = n => {\n  let factors = [];\n\n  for(let i = 2; i\
    \ <= Math.sqrt(n); i++) {\n    if(n % i == 0) {\n      factors.push(i);\n    \
    \  n = n / i;\n    }\n  }\n\n  if(n > 1) {\n    factors.push(n);\n  }\n\n  return\
    \ factors;\n};\n\nconst numbers = [2, 2, 2, 2, 5, 7, 9];\n\nconst result = numbers.reduce((acc,\
    \ curr) => {\n  currFactors = factorize(curr);\n  if(currFactors.length > 0) {\n\
    \    acc = [...acc, ...currFactors];\n  }\n  return acc;\n}, []);\n\nconsole.log(result);</code>\n\
    <|/ a |>\n<| c |>\nThank you very much for the answer, I really appreciate it.\
    \ I was trying to figure out how this works by myself and this is how I came to\
    \ a similar solution. Thank you again!\n<|/ c |>\n<| a tags=arrays,javascript,algorithm,math\
    \ |>\n<code>\nconst factorize = n => {\n  let factors = [];\n  for(let i = 2;\
    \ i <= Math.sqrt(n); i++) {\n    if(n % i == 0) {\n      factors.push(i);\n  \
    \    n = n / i;\n    }\n  }\n  return factors;\n};\n\nconst numbers = [2, 2, 2,\
    \ 2, 5, 7, 9];\n\nconst result = numbers.map(num => factorize(num));\nconsole.log(result);</code>\n\
    <|/ a dscore=1 |>\n<| a |>\nYou can use Array.reduce to do the job for you. This\
    \ will give you the required output with one iteration. \n\n<code>\nconst numbers\
    \ = [2, 2, 2, 2, 5, 7, 9];\nlet result = numbers.reduce((acc, curr, index) =>\
    \ {\n  let factors = factorize(curr);\n  if(factors.length) {\n    acc.push(...factors);\n\
    \  }\n  return acc;\n}, []);\nconsole.log(result);\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmplc3h5m1g.ts(36,22): error TS1161: Unterminated regular
    expression literal.

    ../../../../../tmp/tmplc3h5m1g.ts(37,2): error TS1109: Expression expected.

    ../../../../../tmp/tmplc3h5m1g.ts(37,4): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmplc3h5m1g.ts(38,2): error TS1109: Expression expected.

    ../../../../../tmp/tmplc3h5m1g.ts(38,6): error TS1005: '';'' expected.

    ../../../../../tmp/tmplc3h5m1g.ts(38,15): error TS1005: '';'' expected.

    ../../../../../tmp/tmplc3h5m1g.ts(38,54): error TS1109: Expression expected.

    ../../../../../tmp/tmplc3h5m1g.ts(39,6): error TS1005: '';'' expected.

    ../../../../../tmp/tmplc3h5m1g.ts(39,15): error TS1005: '';'' expected.

    ../../../../../tmp/tmplc3h5m1g.ts(39,18): error TS1005: '';'' expected.

    ../../../../../tmp/tmplc3h5m1g.ts(39,26): error TS1005: '';'' expected.

    ../../../../../tmp/tmplc3h5m1g.ts(39,29): error TS1005: '';'' expected.

    ../../../../../tmp/tmplc3h5m1g.ts(39,34): error TS1005: '';'' expected.

    ../../../../../tmp/tmplc3h5m1g.ts(39,44): error TS1005: '';'' expected.

    ../../../../../tmp/tmplc3h5m1g.ts(39,47): error TS1005: '';'' expected.

    ../../../../../tmp/tmplc3h5m1g.ts(39,58): error TS1005: '','' expected.

    ../../../../../tmp/tmplc3h5m1g.ts(39,63): error TS1005: '','' expected.

    ../../../../../tmp/tmplc3h5m1g.ts(41,1): error TS1003: Identifier expected.

    ../../../../../tmp/tmplc3h5m1g.ts(42,1): error TS1109: Expression expected.

    ../../../../../tmp/tmplc3h5m1g.ts(69,22): error TS1110: Type expected.

    ../../../../../tmp/tmplc3h5m1g.ts(69,23): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmplc3h5m1g.ts(70,2): error TS1109: Expression expected.

    ../../../../../tmp/tmplc3h5m1g.ts(70,4): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmplc3h5m1g.ts(71,2): error TS1109: Expression expected.

    ../../../../../tmp/tmplc3h5m1g.ts(71,7): error TS1109: Expression expected.

    ../../../../../tmp/tmplc3h5m1g.ts(72,7): error TS1005: '';'' expected.

    ../../../../../tmp/tmplc3h5m1g.ts(72,11): error TS1005: '';'' expected.

    ../..'
  timestamp: 1660014261
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors: number[] = [];\n  let factor;\n  let product =\
    \ 1;\n  let tempNum = 1;\n  let factorNum = 1;\n  let j = 0;\n  for (j = 0; j\
    \ < n; j++) {\n    tempNum *= j;\n  }\n  factor = tempNum;\n  factors.push(factor);\n\
    \  while (true) {\n    factorNum = 0;\n    for (const num of factors) {\n    \
    \  factorNum += num;\n    }\n    product = factorNum;\n    if (product < n) {\n\
    \      factorNum += 1;\n      factors.push(factorNum);\n      continue;\n    }\n\
    \    return factors;\n  }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0,\n  1,\n\
    \  2\n]\n\nshould loosely deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmpf1ge76lh.js:40:12)\n\
    \    at Object.<anonymous> (/tmp/tmpf1ge76lh.js:49:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0, 1, 2\
    \ ],\n  expected: [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014261
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    const factorization = [] as number[];\n    let i = 2;\n\n  \
    \  while (i <= n) {\n        while (n % i === 0) {\n            factorization.push(i);\n\
    \            n /= i;\n        }\n\n        i++;\n    }\n\n    if (n > 0) {\n \
    \       factorization.push(n);\n    }\n\n    return factorization;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  1\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmpiyb_479y.js:28:12)\n\
    \    at Object.<anonymous> (/tmp/tmpiyb_479y.js:37:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 1 ],\n\
    \  expected: [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014261
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    let factors: number[] = [];\n    let divisor = n;\n    while\
    \ (divisor) {\n        if (n % divisor === 0) {\n            divisor = ~~(divisor\
    \ / 10);\n            factors.push(divisor);\n        } else {\n            divisor\
    \ = ~~(divisor / 2);\n        }\n    }\n    if (factors[0] === 1) factors.shift();\n\
    \    return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  0\n]\n\n\
    should loosely deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmpvni7in5j.js:29:12)\n\
    \    at Object.<anonymous> (/tmp/tmpvni7in5j.js:38:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 0 ],\n \
    \ expected: [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014261
- exit_code: 2
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const primeFactors: number[] = [];\n  for (let i = 1; i < Math.sqrt(n);\
    \ i++) {\n    if (isPrime(i)) {\n      const factorsOfN: number[] = [];\n    \
    \  for (let j = 2; j <= n / i; j++) {\n        if (n % j === 0) {\n          factorsOfN.push(j);\n\
    \        }\n      }\n      primeFactors.push(...factorsOfN);\n    }\n  }\n  return\
    \ primeFactors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpw2d8g73l.ts(13,9): error TS2304: Cannot find name
    ''isPrime''.

    '
  timestamp: 1660014261
- exit_code: -5
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    var arr: number[] = [], i, j, factor: number, factorCount =\
    \ 0, factorsArr = [1];\n    for (j = i = 1; j < n; j++) {\n        while (n %\
    \ j === 0) {\n            factorsArr.push(j);\n            n = Math.floor(n /\
    \ j);\n        }\n    }\n    for (i = 0; i < factorsArr.length; i++) {\n     \
    \   factor = factorsArr[i];\n        for (j = factorsArr.length - 1; j <= i; j--)\
    \ {\n            if (factorsArr[j + 1] !== factor * factorsArr[j]) {\n       \
    \         factorCount += factor;\n                factorsArr.splice(j, 1);\n \
    \           }\n        }\n        arr.push(factorCount);\n    }\n    return arr;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: Exception
  stderr: "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error\
    \ 174895934\n#\n#\n#\n#FailureMessage Object: 0x7ffe37942de0\n 1: 0x2b58971ac727\
    \  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 2: 0x2b5897d4128e\
    \ V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 3: 0x2b589767bf8b  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 4: 0x2b589780d760  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 5: 0x2b58978150cd  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 6: 0x2b58979ff7db v8::internal::Runtime_GrowArrayElements(int, unsigned long*,\
    \ v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 7: 0x2b589735e7f9  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n"
  stdout: ''
  timestamp: 1660014264
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n\tif (n % 2 == 0)\n\t\treturn [n, 1];\n\tlet result = [];\n\tfor\
    \ (let i = 3; i <= Math.sqrt(n); i++)\n\t\tif (n % i == 0) {\n\t\t\tlet j = Math.sqrt(n);\n\
    \t\t\tfor (let k = 1; k <= i / j; k++)\n\t\t\t\tif (n % i == 0) {\n\t\t\t\t\t\
    j = i;\n\t\t\t\t\ti = j;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\tif (j == i && j ==\
    \ 1)\n\t\t\t\tresult.push(i);\n\t\t}\n\treturn result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  1\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmpyny57m_y.js:31:12)\n\
    \    at Object.<anonymous> (/tmp/tmpyny57m_y.js:40:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 1 ],\n\
    \  expected: [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014261
- exit_code: 2
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  var primeFactors: number[] = [];\n  var maxFactor: number[] =\
    \ [];\n  var isPrime: number[] = [];\n\n  for (var i = 0; i < maxFactor.length;\
    \ i++) {\n    maxFactor[i] = Math.pow(i, 2);\n  }\n\n  for (var i = 2; i <= maxFactor.length;\
    \ i++) {\n    for (var j = 0; j < maxFactor.length; j++) {\n      if (n <= maxFactor[j])\
    \ {\n        if (isPrime[j]) {\n          primeFactors[j] = primeFactors[j] ||\
    \ [];\n          primeFactors[j][isPrime[j]] = primeFactors[j][isPrime[j]] | i;\n\
    \        }\n        isPrime[j] = 0;\n      }\n    }\n  }\n\n  return primeFactors;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: "../../../../../tmp/tmp0zbxvr5k.ts(23,11): error TS2322: Type 'number |\
    \ undefined[]' is not assignable to type 'number'.\n  Type 'undefined[]' is not\
    \ assignable to type 'number'.\n"
  timestamp: 1660014261
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  let factors: number[] = [];\n\n  for (let i = 2; i <= Math.sqrt(n);\
    \ i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i ===\
    \ 0) {\n        n /= i;\n        factors.push(i);\n      }\n    }\n  }\n\n  if\
    \ (n > 1) {\n    factors.push(1);\n  }\n  return factors;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1\n]\n\n\
    should loosely deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmptuj49swf.js:29:12)\n\
    \    at Object.<anonymous> (/tmp/tmptuj49swf.js:38:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1 ],\n \
    \ expected: [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014262
- exit_code: -5
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    const factors: number[] = [];\n    let i = 4;\n    while (n\
    \ > 1) {\n        i <<= 1;\n        while (n & i) { n /= i; }\n        factors.push(i);\n\
    \    }\n    return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: Exception
  stderr: "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error\
    \ 169220804\n#\n#\n#\n#FailureMessage Object: 0x7ffca0f9f370\n 1: 0x2b475f0d2727\
    \  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 2: 0x2b475fc6728e\
    \ V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 3: 0x2b475f5a1f8b  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 4: 0x2b475f733760  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 5: 0x2b475f73b0cd  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 6: 0x2b475f9257db v8::internal::Runtime_GrowArrayElements(int, unsigned long*,\
    \ v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 7: 0x2b475f2847f9  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n"
  stdout: ''
  timestamp: 1660014264
- exit_code: 2
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    let primeFactorization = new Array(Math.ceil(Math.sqrt(n))).fill(0);\n\
    \    for (let i = 2; i <= n; i++) {\n        for (let j = 2; j < i; j++) {\n \
    \           if (i % j === 0) {\n                primeFactorization[i] += j;\n\
    \                for (let k = 2; k < i; k++) {\n                    if (i % k\
    \ === 0) {\n                        primeFactorization[i] += k;\n            \
    \        }\n                }\n                break;\n            }\n       \
    \ }\n    }\n    return primeFactorization;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n\
    \  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n\
    \  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpaisbs7sk.ts(11,65): error TS2339: Property ''fill''
    does not exist on type ''any[]''.

    '
  timestamp: 1660014262
- exit_code: 2
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factor: number[] = [];\n  const isPrime: (number) => boolean\
    \ = n => [...Array(n)].some(x => n % x === 0);\n\n  for (let i = 2; i <= Math.sqrt(n);\
    \ i++) {\n    if (isPrime(i)) {\n      for (let j = 0; j < factor.length; j++)\
    \ {\n        if (factor[j] === i) {\n          factor[j] = i;\n          break;\n\
    \        }\n      }\n\n      if (j !== factor.length) {\n        factor.push(i);\n\
    \      }\n    }\n  }\n\n  return factor;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n\
    \  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n\
    \  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpfu3r_adh.ts(23,11): error TS2304: Cannot find name
    ''j''.

    '
  timestamp: 1660014262
- exit_code: 2
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  let factorization: number[] = []\n  const factors = factorsOf(n);\n\
    \  factors.forEach(factor => {\n    const numberOfTimes = factors.filter(f =>\
    \ f !== factor).length\n    factorization.push(factor);\n    factorization.push(numberOfTimes);\n\
    \  })\n  return factorization\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n\
    \  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n\
    \  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpywh80u4f.ts(12,19): error TS2552: Cannot find name
    ''factorsOf''. Did you mean ''factors''?

    '
  timestamp: 1660014262
- exit_code: 2
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    let i = 2;\n    let factors = [];\n    while(n > 1) {\n    \
    \    if(n%i == 0) {\n            factors.push(i);\n            n = n/i;\n    \
    \    } else {\n            i++;\n        }\n    }\n    return factors;\n}\n</code>\n\
    <|/ a tags=math,algorithm,data-structures,primes dscore=2 |>\n<| a |>\nA simple\
    \ O(n) algorithm would be:\n\nCreate an array of size n\nSet every element to\
    \ -1\nLoop from 0 to n-2, and set element at current index to current index\n\
    If a number at current index is -1, then it is not prime\nIf a number at current\
    \ index is non-negative number, then it is prime\n\nTime complexity is O(n), space\
    \ complexity is O(1)\n<|/ a tags=math,algorithm,data-structures,primes dscore=1\
    \ |>\n<| c |>\nO(n), I mean the complexity of algorithm itself.\n<|/ c |>\n<|\
    \ c |>\nWell, then you gotta use a hashmap. I mean its a linear time algorithm.\n\
    <|/ c |>\n<| c |>\nI know, but my teacher said: \"If its not allowed to use hash\
    \ tables, you should find all prime factors and sum them up. But don't forget\
    \ to remember about \"prime number factor\" too.\n<|/ c |>\n<| a dscore=0 tags=math,algorithm,data-structures,primes\
    \ |>\nO(n) solution: \n<code>\n#include<bits/stdc++.h>\n#define int long long\n\
    using namespace std;\n\nint main()\n{\n    int t;\n    cin>>t;\n    while(t--)\n\
    \    {\n        int n;\n        cin>>n;\n        long long s=1;\n        for(int\
    \ i=2;i<n;i++)\n        {\n            if(n%i==0)\n            {\n           \
    \     s+=i;\n                n-=i;\n            }\n        }\n        if(n!=0)\n\
    \            cout<<s<<endl;\n        else\n            cout<<0<<endl;\n    }\n\
    \    return 0;\n}\n</code>\n<|/ a |>\n<| a dscore=0 |>\n<code>\n#include<bits/stdc++.h>\n\
    #define int long long\nusing namespace std;\nint main(){\nint t;\ncin>>t;\nwhile(t--)\n\
    {\n    int n;\n    cin>>n;\n    long long s=1;\n    for(int i=2;i<n;i++)\n   \
    \ {\n        if(n%i==0)\n        {\n            s+=i;\n            n-=i;\n   \
    \     }\n    }\n    if(n!=0)\n        cout<<\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n\
    \  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n\
    \  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpmfdlrkkg.ts(23,2): error TS1110: Type expected.

    ../../../../../tmp/tmpmfdlrkkg.ts(23,3): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpmfdlrkkg.ts(24,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpmfdlrkkg.ts(24,4): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpmfdlrkkg.ts(25,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpmfdlrkkg.ts(25,7): error TS1109: Expression expected.

    ../../../../../tmp/tmpmfdlrkkg.ts(26,3): error TS1005: '';'' expected.

    ../../../../../tmp/tmpmfdlrkkg.ts(26,10): error TS1005: '';'' expected.

    ../../../../../tmp/tmpmfdlrkkg.ts(26,15): error TS1005: '';'' expected.

    ../../../../../tmp/tmpmfdlrkkg.ts(26,25): error TS1005: '';'' expected.

    ../../../../../tmp/tmpmfdlrkkg.ts(26,31): error TS1005: '';'' expected.

    ../../../../../tmp/tmpmfdlrkkg.ts(28,8): error TS1005: '';'' expected.

    ../../../../../tmp/tmpmfdlrkkg.ts(28,11): error TS1005: '';'' expected.

    ../../../../../tmp/tmpmfdlrkkg.ts(28,17): error TS1005: '';'' expected.

    ../../../../../tmp/tmpmfdlrkkg.ts(28,20): error TS1005: '';'' expected.

    ../../../../../tmp/tmpmfdlrkkg.ts(28,25): error TS1005: '';'' expected.

    ../../../../../tmp/tmpmfdlrkkg.ts(29,5): error TS1005: '';'' expected.

    ../../../../../tmp/tmpmfdlrkkg.ts(29,11): error TS1005: '';'' expected.

    ../../../../../tmp/tmpmfdlrkkg.ts(29,19): error TS1005: '';'' expected.

    ../../../../../tmp/tmpmfdlrkkg.ts(30,6): error TS1005: '';'' expected.

    ../../../../../tmp/tmpmfdlrkkg.ts(30,11): error TS1005: '';'' expected.

    ../../../../../tmp/tmpmfdlrkkg.ts(30,13): error TS1005: '';'' expected.

    ../../../../../tmp/tmpmfdlrkkg.ts(30,16): error TS1005: '';'' expected.

    ../../../../../tmp/tmpmfdlrkkg.ts(30,25): error TS1005: '';'' expected.

    ../../../../../tmp/tmpmfdlrkkg.ts(30,29): error TS1005: '';'' expected.

    ../../../../../tmp/tmpmfdlrkkg.ts(30,37): error TS1005: '';'' expected.

    ../../../../../tmp/tmpmfdlrkkg.ts(30,40): error TS1005: '';'' expected.

    ../../../../../tmp/tmpmfdlrkkg.ts(30,48): error TS1005: '';'' expected.

    ../../../../../tmp/tmp'
  timestamp: 1660014262
- exit_code: 2
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    var factors = []\n    for(var i = 0; i < n; i++) {\n       \
    \ factors.push(factorization[i])\n    }\n    return factors\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp0941f4el.ts(13,22): error TS2304: Cannot find name
    ''factorization''.

    '
  timestamp: 1660014263
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n\tif (n < 2) {\n\t\treturn [];\n\t}\n\n\tvar factors = [];\n\tvar\
    \ largest = 2;\n\n\tfor (let i = 2; i <= n; i++) {\n\t\tif (n % i === 0) {\n\t\
    \t\tfactors.push(Math.floor(i));\n\t\t\tif (i > largest) {\n\t\t\t\tlargest =\
    \ i;\n\t\t\t}\n\t\t}\n\t}\n\n\tvar factorization: number[] = [];\n\tvar currentFactor\
    \ = 1;\n\n\tfor (let i = factors.length - 1; i >= 0; i--) {\n\t\tfactorization[factors.length\
    \ - 1 - i] = currentFactor;\n\t\tcurrentFactor *= factors[i];\n\t}\n\n\tfactorization.unshift(largest);\n\
    \n\treturn factorization;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  1\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmpatcruwdn.js:36:12)\n\
    \    at Object.<anonymous> (/tmp/tmpatcruwdn.js:45:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 1 ],\n\
    \  expected: [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014263
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  if (n % 2 === 0) {\n    return [2, 1];\n  }\n\n  const factors:\
    \ number[] = [];\n  let factor = 2;\n\n  do {\n    while (n % factor === 0) {\n\
    \      n /= factor;\n      factors.push(factor);\n    }\n\n    factor++;\n  }\
    \ while (n > 1);\n\n  return factors;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n\
    \  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n\
    \  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  1\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmppettgpbq.js:28:12)\n\
    \    at Object.<anonymous> (/tmp/tmppettgpbq.js:37:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 1 ],\n\
    \  expected: [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014263
- exit_code: 2
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    if (n === 1) return [n, n];\n\n    const primeFactorsOfN: number[]\
    \ = [];\n    let primeFactorsOfPrevious: number[] = [];\n    let currentFactor\
    \ = 1;\n    for (let currentFactor = 2; currentFactor <= n; currentFactor++) {\n\
    \        while (n % currentFactor === 0) {\n            n /= currentFactor;\n\
    \            primeFactorsOfN.push(currentFactor);\n            if (primeFactorsOfPrevious\
    \ !== undefined) {\n                primeFactorsOfN = primeFactorsOfN.concat(primeFactorsOfPrevious);\n\
    \                primeFactorsOfPrevious = [];\n            }\n        }\n    \
    \    primeFactorsOfPrevious.push(currentFactor);\n    }\n    return primeFactorsOfN;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmppp0m6lgv.ts(21,17): error TS2588: Cannot assign to
    ''primeFactorsOfN'' because it is a constant.

    '
  timestamp: 1660014263
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  let factors = [1];\n  let max = n;\n  let factor;\n  while (n\
    \ > 2) {\n    factor = 2;\n    while (factor * factor <= max) {\n      if (n %\
    \ factor === 0) {\n        factors.push(factor);\n      }\n      factor++;\n \
    \   }\n    max--;\n  }\n  return factors;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n\
    \  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n\
    \  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1\n]\n\n\
    should loosely deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmp6fr2gv14.js:29:12)\n\
    \    at Object.<anonymous> (/tmp/tmp6fr2gv14.js:38:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1 ],\n \
    \ expected: [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014263
- exit_code: 2
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    var primeFactors: number[] = [];\n    var isPrime = true;\n\
    \    var isFactor = false;\n    do {\n        var found = false;\n        for\
    \ (var i = 0; i < primeFactors.length; i++) {\n            var k = primeFactors[i];\n\
    \            while (n % k == 0) {\n                n = n / k;\n              \
    \  primeFactors[i] = k + 1;\n                found = true;\n                break;\n\
    \            }\n        }\n        if (!found) {\n            primeFactors.push(n);\n\
    \            isFactor = true;\n        }\n    } while (isPrime);\n    if (isFactor)\
    \ {\n        primeFactors = primeFactors.reverse();\n    }\n    return primeFactors;\n\
    }\n</code>\n<|/ a tags=algorithm,primes,data-structures,factorization,math |>\n\
    <| a tags=algorithm,primes,data-structures,factorization,math |>\n<code>\n#include\
    \ <iostream>\n#include<conio.h>\n#include<stdlib.h>\n#include<stdio.h>\n#include<math.h>\n\
    using namespace std;\nint main()\n{\n    int i,j,x,k=2,j=2;\n    for(i=3;i<=sqrt(9);i++)\n\
    \    {\n        x=i/k;\n        while(x!=0)\n        {\n            if(k%x==0)\n\
    \            {\n                k=k+1;\n                j=j+1;\n            }\n\
    \            else\n            {\n                break;\n            }\n    \
    \        x--;\n        }\n        if(j==i)\n        {\n            cout<<i<<endl;\n\
    \            break;\n        }\n        k++;\n        j=0;\n    }\n    getch();\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\nJava Code :\n<code>\nimport java.util.Scanner;\n\
    \npublic class Factors {\npublic static void main(String[] args) {\n\n    System.out.println(\"\
    Input number\");\n    Scanner sc = new Scanner(System.in);\n    int n = sc.nextInt();\n\
    \    long x = n+1;\n    System.out.println(\"Factorization of \" + n + \" is :\
    \ \");\n\n    for (int i = 1; i <=n; i++) {\n        while (x % i == 0) {\n  \
    \          x /= i;\n            System.out.println(i);\n        }\n    }\n}\n\
    }\n</code>\n<|/ a tags=algorithm,primes,data-structures,factorization,math |>\n\
    <| a tags=algorithm,primes,data-structures,factorization,math dscore=0 |>\nHere\
    \ is the code I have come up with using Python and list to store the factors of\
    \ each number. \n<code>\n    factor_array=[]\ndef factorization(n):\n    for i\
    \ in range(1,n):\n        if n%i==0:\n            factor_array.append(i)\n   \
    \         n//=i\n        else:\n            continue\n    if n>1:\n        \n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpbj2oopyf.ts(35,2): error TS1110: Type expected.

    ../../../../../tmp/tmpbj2oopyf.ts(35,3): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpbj2oopyf.ts(36,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpbj2oopyf.ts(36,4): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpbj2oopyf.ts(37,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpbj2oopyf.ts(37,6): error TS1005: '';'' expected.

    ../../../../../tmp/tmpbj2oopyf.ts(37,64): error TS1109: Expression expected.

    ../../../../../tmp/tmpbj2oopyf.ts(39,1): error TS1127: Invalid character.

    ../../../../../tmp/tmpbj2oopyf.ts(40,1): error TS1127: Invalid character.

    ../../../../../tmp/tmpbj2oopyf.ts(41,1): error TS1127: Invalid character.

    ../../../../../tmp/tmpbj2oopyf.ts(42,1): error TS1127: Invalid character.

    ../../../../../tmp/tmpbj2oopyf.ts(43,1): error TS1127: Invalid character.

    ../../../../../tmp/tmpbj2oopyf.ts(44,7): error TS1005: '';'' expected.

    ../../../../../tmp/tmpbj2oopyf.ts(44,20): error TS1005: ''{'' expected.

    ../../../../../tmp/tmpbj2oopyf.ts(45,5): error TS1005: '';'' expected.

    ../../../../../tmp/tmpbj2oopyf.ts(47,9): error TS1005: '';'' expected.

    ../../../../../tmp/tmpbj2oopyf.ts(74,2): error TS1110: Type expected.

    ../../../../../tmp/tmpbj2oopyf.ts(74,3): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpbj2oopyf.ts(75,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpbj2oopyf.ts(75,4): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpbj2oopyf.ts(76,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpbj2oopyf.ts(76,6): error TS1005: '';'' expected.

    ../../../../../tmp/tmpbj2oopyf.ts(76,16): error TS1109: Expression expected.

    ../../../../../tmp/tmpbj2oopyf.ts(77,6): error TS1005: '';'' expected.

    ../../../../../tmp/tmpbj2oopyf.ts(79,1): error TS1109: Expression expected.

    ../../../../../tmp/tmpbj2oopyf.ts(79,12): error TS1005: ''='' expected.

    ../../../../../tmp/tmpbj2oopyf.ts(82,20): error TS1005: '';'' expect'
  timestamp: 1660014264
- exit_code: 2
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors: number[] = [];\n  let minFactor = 1;\n  let maxFactor\
    \ = 1;\n  const minFactorIndex = -1;\n  const maxFactorIndex = -1;\n  for (let\
    \ i = 2; i <= n; i++) {\n    while (n % i === 0) {\n      const factorIndex =\
    \ factors.indexOf(i);\n      if (factorIndex >= 0) {\n        factors[factorIndex]\
    \ = factors[factorIndex] + 1;\n      } else {\n        factors.push(i);\n    \
    \  }\n      n /= i;\n    }\n    if (n > 1) {\n      if (minFactor > 1) {\n   \
    \     factors[minFactorIndex] = minFactor;\n      }\n      if (maxFactor < n)\
    \ {\n        factors[maxFactorIndex] = maxFactor;\n      }\n      minFactor =\
    \ 1;\n      maxFactor = 1;\n      minFactorIndex = -1;\n      maxFactorIndex =\
    \ -1;\n    }\n  }\n  if (minFactor > 1) {\n    factors[minFactorIndex] = minFactor;\n\
    \  }\n  if (maxFactor < n) {\n    factors[maxFactorIndex] = maxFactor;\n  }\n\
    \  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpnjq9yxs1.ts(35,7): error TS2588: Cannot assign to
    ''minFactorIndex'' because it is a constant.

    ../../../../../tmp/tmpnjq9yxs1.ts(36,7): error TS2588: Cannot assign to ''maxFactorIndex''
    because it is a constant.

    '
  timestamp: 1660014263
- exit_code: 2
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    const factors: number[] = [];\n    factorization(n).forEach((factor:\
    \ number[], index: number) => {\n        if (factor !== 1) {\n            factors.push(...Array(n).fill(factor).map((_)\
    \ => factors.filter((_) => _ === factor).length));\n        }\n    });\n    return\
    \ factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp0xpejyts.ts(12,5): error TS2304: Cannot find name
    ''factorization''.

    ../../../../../tmp/tmp0xpejyts.ts(13,13): error TS2367: This condition will always
    return ''true'' since the types ''number[]'' and ''1'' have no overlap.

    ../../../../../tmp/tmp0xpejyts.ts(14,38): error TS2339: Property ''fill'' does
    not exist on type ''any[]''.

    ../../../../../tmp/tmp0xpejyts.ts(14,84): error TS2367: This condition will always
    return ''false'' since the types ''number'' and ''number[]'' have no overlap.

    '
  timestamp: 1660014264
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n\t// https://stackoverflow.com/a/14356407/5909087\n\tlet primes\
    \ = [];\n\t// n is prime if n is 2 and it is not divisible by any number greater\
    \ than 2.\n\tif (n === 2 || n % 2 === 0) {\n\t\tprimes.push(n);\n\t\treturn primes;\n\
    \t}\n\n\t// if n is odd and doesn't divide evenly, then it's not a prime number\n\
    \tif (n % 2 !== 0) return primes;\n\n\tfor (let i = 3; i <= Math.sqrt(n); i +=\
    \ 2) {\n\t\tif (n % i === 0) {\n\t\t\tprimes.push(i);\n\t\t\tn /= i;\n\t\t}\n\t\
    }\n\n\tprimes.push(2);\n\treturn primes;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n\
    \  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n\
    \  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4\n]\n\n\
    should loosely deep-equal\n\n[\n  2,\n  2\n]\n    at test (/tmp/tmphxmc0dhj.js:34:12)\n\
    \    at Object.<anonymous> (/tmp/tmphxmc0dhj.js:42:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4 ],\n \
    \ expected: [ 2, 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014264
- exit_code: 2
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    if (n === 0) {\n        return [[]];\n    }\n    if (n === 1)\
    \ {\n        return [1];\n    }\n    const res = [];\n    let factor = 2;\n  \
    \  let factorization = [];\n    while (factor * factor <= n) {\n        if (n\
    \ % factor === 0) {\n            factorization = [];\n            let tmp = (factor\
    \ * factor) - n;\n            for (let i = 0; i < factor; i++) {\n           \
    \     factorization.push(i);\n            }\n            for (let i = 0; i < tmp;\
    \ i++) {\n                factorization[factorization.length - 1]++;\n       \
    \     }\n            factorization.sort((a, b) => a - b);\n            for (let\
    \ i = 0; i < factorization.length; i++) {\n                res.push(factorization[i]);\n\
    \            }\n            factor++;\n        } else {\n            factor++;\n\
    \        }\n    }\n    return res;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n\
    \  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n\
    \  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpy16xk6rt.ts(12,17): error TS2322: Type ''undefined[]''
    is not assignable to type ''number''.

    '
  timestamp: 1660014264
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    // factorization\n    let factors = [];\n    let largest = n;\n\
    \    let i = 2;\n    while (i <= largest) {\n        if (n % i === 0) {\n    \
    \        factors.push(i);\n        }\n        i += 2;\n    }\n\n    return factors;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  4\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  2\n]\n    at test (/tmp/tmpuzse41jo.js:27:12)\n\
    \    at Object.<anonymous> (/tmp/tmpuzse41jo.js:35:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 4 ],\n\
    \  expected: [ 2, 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014264
- exit_code: 2
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n\t// find factorization by dividing the number by its prime factors\n\
    \tlet factorization: number[] = [];\n\tlet ps: number[] = [];\n\tlet i: number;\n\
    \tconst factor: any = {};\n\n\tps = primeFactors(n);\n\tconsole.log(ps);\n\tfor\
    \ (i = 0; i < ps.length; i++) {\n\t\tfactor[ps[i]] = ps[i];\n\t}\n\n\ti = 2;\n\
    \twhile (factor[i] !== 1) {\n\t\tfor (let j = 0; j < i; j++) {\n\t\t\tfactor[factor[i]*j]\
    \ = factor[factor[i]*j] || 1;\n\t\t}\n\t\ti++;\n\t}\n\n\tconsole.log(factor);\n\
    \tfor (i = 1; i < n; i++) {\n\t\tif (n % (factor[i * 2] * factor[i * 2 + 1]) ===\
    \ 0) {\n\t\t\tfactorization.push(i);\n\t\t}\n\t}\n\tconsole.log(factorization);\n\
    \treturn factorization;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpg6fidfv4.ts(17,7): error TS2304: Cannot find name
    ''primeFactors''.

    '
  timestamp: 1660014264
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    let factors = [];\n    for (let i = 2; i <= n / i; i++) {\n\
    \        if (n % i === 0) {\n            factors.push(i);\n        }\n    }\n\
    \    return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmp7vb9seld.js:22:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp7vb9seld.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014264
- exit_code: 2
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    // Find smallest number that does not exceed n\n    const smallestFactor\
    \ = smallestFactorization(n);\n    // Calculate prime factors of smallest number\n\
    \    const factors = smallestFactorFactorization(n);\n    // Filter out all factors\
    \ of n except smallestFactor\n    const remainingFactors = factors.filter((x:\
    \ number) => !(x === smallestFactor));\n    // Add remaining factors to smallestFactor\n\
    \    smallestFactor = smallestFactor * factors.length;\n    const result = [];\n\
    \    for (let i = 0; i < factors.length; i++) {\n        result.push(smallestFactor);\n\
    \        smallestFactor /= factors[i];\n    }\n    // If remaining factors are\
    \ prime add them\n    if (remainingFactors.length) {\n        result.push.apply(result,\
    \ remainingFactors);\n    }\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpfs5scle3.ts(12,28): error TS2304: Cannot find name
    ''smallestFactorization''.

    ../../../../../tmp/tmpfs5scle3.ts(14,21): error TS2304: Cannot find name ''smallestFactorFactorization''.

    ../../../../../tmp/tmpfs5scle3.ts(18,5): error TS2588: Cannot assign to ''smallestFactor''
    because it is a constant.

    ../../../../../tmp/tmpfs5scle3.ts(22,9): error TS2588: Cannot assign to ''smallestFactor''
    because it is a constant.

    '
  timestamp: 1660014264
- exit_code: 2
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    const result = new Array(n + 1);\n    result[0] = 1;\n    for\
    \ (let i = 2; i <= n; i++) {\n        result[i] = result[i - 1] * i;\n    }\n\
    \    const factors: number[] = [];\n    let temp = 1;\n    for (let i = 2; i <=\
    \ n; i++) {\n        while (n % i == 0) {\n            result[i] /= temp;\n  \
    \          factors.push(temp);\n            n /= i;\n        }\n        temp *=\
    \ i;\n    }\n    if (n != 1) {\n        result[i] /= temp;\n        factors.push(temp);\n\
    \    }\n    if (n > 1) {\n        factors.push(1);\n    }\n    return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp5mzp7dfn.ts(27,16): error TS2304: Cannot find name
    ''i''.

    '
  timestamp: 1660014264
- exit_code: 2
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  for (var i = 0; i < Math.sqrt(n); i++) {\n    if (n % i === 0)\
    \ {\n      return Array(n).fill(i);\n    }\n  }\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp6ziyughw.ts(13,23): error TS2339: Property ''fill''
    does not exist on type ''any[]''.

    '
  timestamp: 1660014265
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  // Find factors array size\n  let factorCount = 0;\n  let factors:\
    \ number[] = [];\n  let maxFactor = 0;\n  let maxFactorIndex: number = 0;\n  for\
    \ (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors[factorCount]\
    \ = i;\n      factorCount++;\n      if (factorCount > maxFactor) {\n        maxFactor\
    \ = factorCount;\n        maxFactorIndex = factorCount;\n      }\n    }\n  }\n\
    \n  // Check factors are prime\n  for (let i = maxFactorIndex + 1; i <= factorCount;\
    \ i++) {\n    if (factors[i] === n) {\n      return factors;\n    }\n  }\n\n \
    \ return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmpw3yy0xkv.js:37:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpw3yy0xkv.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014265
- exit_code: 2
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  if (!isPrime(n)) return [];\n  let factors = [1];\n  while (n\
    \ > 1) {\n    const lastFactor = factors.pop();\n    const newFactor = 1;\n  \
    \  for (let i = lastFactor * 2; i <= n; ++i) {\n      if (n % i === 0) {\n   \
    \     newFactor *= i;\n        factors.push(newFactor);\n      }\n    }\n    n\
    \ /= lastFactor;\n  }\n  return factors;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n\
    \  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n\
    \  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpl9b69_wy.ts(11,8): error TS2304: Cannot find name
    ''isPrime''.

    ../../../../../tmp/tmpl9b69_wy.ts(18,9): error TS2588: Cannot assign to ''newFactor''
    because it is a constant.

    '
  timestamp: 1660014265
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  let maxNum = n * Math.sqrt(n);\n  let factors = [];\n  for (let\
    \ i = 1; i <= maxNum; i++) {\n    // Check if number is divisible by any factor\
    \ of current number\n    let isDivisible = false;\n    for (let j = 0; j < i;\
    \ j++) {\n      if (n % i == 0) {\n        isDivisible = true;\n      }\n    }\n\
    \    // If it is divisible, add to factors array and continue\n    if (isDivisible)\
    \ {\n      factors.push(i);\n      continue;\n    }\n    // Number is not divisible\
    \ by any factor, so check if it can be divided by factors of previous number\n\
    \    for (let j = 0; j < factors.length; j++) {\n      if (n % factors[j] == 0)\
    \ {\n        factors.push(factors[j]);\n        maxNum /= factors[j];\n      }\n\
    \    }\n  }\n  // If maxNum is not a factor, then add 1 to the factors array and\
    \ maxNum will become factor\n  if (maxNum == 1) factors.push(n);\n  return factors;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmpyz8oe7nq.js:42:12)\n\
    \    at Object.<anonymous> (/tmp/tmpyz8oe7nq.js:51:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2 ],\n\
    \  expected: [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014266
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    const factors: number[] = [];\n    let i = 2; // Factorize until\
    \ product of factors is greater than number we are checking\n    while (n / i\
    \ >= 1) {\n        if (n % i === 0) {\n            // Factor n // Check if factor\
    \ already in array (it means it was just added before)\n            let j = factors.length;\
    \ // Find position of existing factor\n            while (j--) {\n           \
    \     if (factors[j] === i) {\n                    break; // Found it already.\
    \ Leave the loop.\n                }\n            }\n            // Not found.\
    \ Push it now\n            factors.push(i);\n        }\n        i++;\n    }\n\
    \    return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  4\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  2\n]\n    at test (/tmp/tmpypzc8aum.js:33:12)\n\
    \    at Object.<anonymous> (/tmp/tmpypzc8aum.js:41:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 4 ],\n\
    \  expected: [ 2, 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014266
- exit_code: 2
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    const primeFactors = factorize(isPrime(n) ? n : 1);\n    return\
    \ n\n        ? primeFactors\n            ? primeFactors.concat(factorize(n * primeFactors[primeFactors.length\
    \ - 1]))\n            : primeFactors\n        : [];\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp8_fkvl3b.ts(11,36): error TS2304: Cannot find name
    ''isPrime''.

    '
  timestamp: 1660014266
- exit_code: 2
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors = new Array(n + 1);\n  for (let i = 2; i <= n; i++)\
    \ {\n    const newfactors = new Array(n + 1);\n    for (let j = i; j <= n; j++)\
    \ {\n      newfactors[j] = (factors[j] || 0) + ((n % j) === 0 ? 1 : 0);\n    }\n\
    \    factors = newfactors;\n  }\n  return factors;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp5ychfrd3.ts(17,5): error TS2588: Cannot assign to
    ''factors'' because it is a constant.

    '
  timestamp: 1660014266
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  let factors: number[] = [];\n  n = Math.ceil(n);\n\n  for (let\
    \ factor = 2; factor <= n; factor++) {\n    if (n % factor === 0) {\n      factors.push(factor);\n\
    \      n /= factor;\n    }\n  }\n  return factors;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2\n]\n\n\
    should loosely deep-equal\n\n[\n  2,\n  2\n]\n    at test (/tmp/tmppsfrvuky.js:25:12)\n\
    \    at Object.<anonymous> (/tmp/tmppsfrvuky.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2 ],\n \
    \ expected: [ 2, 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014266
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n\tconst factors = new Array(n + 1);\n\tfor (let i = 2; i <= n /\
    \ i; i++) {\n\t\tif (n % i === 0) {\n\t\t\tfor (let j = i; j * j <= n; j++) {\n\
    \t\t\t\tfactors[j] = j * i;\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn factors;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  <3 empty\
    \ items>\n]\n\nshould loosely deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmpzwgax7q5.js:25:12)\n\
    \    at Object.<anonymous> (/tmp/tmpzwgax7q5.js:34:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ <3 empty\
    \ items> ],\n  expected: [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014266
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    if (n <= 1) return [];\n    if (n === 2) return [2];\n\n   \
    \ let factors = [1];\n    for (let factor = 2; factor <= n; factor++) {\n    \
    \    if (n % factor === 0) {\n            factors.push(factor);\n            n\
    \ /= factor;\n        }\n    }\n    return factors;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  2\n]\n    at test (/tmp/tmpbw2dycn8.js:28:12)\n\
    \    at Object.<anonymous> (/tmp/tmpbw2dycn8.js:36:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2 ],\n\
    \  expected: [ 2, 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014266
- exit_code: -5
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    const factor: number[] = [];\n    let f = 0;\n    let i = 0;\n\
    \    while (n != 0) {\n        while (n % f == 0) {\n            factor.push(f);\n\
    \            n /= f;\n        }\n        f++;\n    }\n    return factor;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: Exception
  stderr: "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error\
    \ 169220804\n#\n#\n#\n#FailureMessage Object: 0x7ffe8b061290\n 1: 0x2b88dc160727\
    \  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 2: 0x2b88dccf528e\
    \ V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 3: 0x2b88dc62ff8b  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 4: 0x2b88dc7c1760  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 5: 0x2b88dc7c90cd  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 6: 0x2b88dc9b37db v8::internal::Runtime_GrowArrayElements(int, unsigned long*,\
    \ v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 7: 0x2b88dc3127f9  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n"
  stdout: ''
  timestamp: 1660014270
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  let factors = [];\n  let largestDivisor = n / 2;\n  let divideBy:\
    \ number = 1;\n  let lastDivider = 0;\n\n  while (lastDivider < largestDivisor)\
    \ {\n    for (let divisor = 1; divisor <= largestDivisor; divisor++) {\n     \
    \ if (n % divisor == 0) {\n        lastDivider = divisor;\n        divideBy =\
    \ divisor;\n        factors.push(divideBy);\n        break;\n      }\n    }\n\
    \    lastDivider++;\n    divideBy++;\n  }\n  return factors;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1\n]\n\n\
    should loosely deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmpr14iimpp.js:32:12)\n\
    \    at Object.<anonymous> (/tmp/tmpr14iimpp.js:41:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1 ],\n \
    \ expected: [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014266
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n\tlet primeFactors = [2, 3]\n\tlet factorizations = []\n\tfor (let\
    \ factor = 2; factor <= n; factor++) {\n\t\tlet factorization = []\n\t\tfor (let\
    \ i = 0; i < primeFactors.length; i++) {\n\t\t\tfactorization.push(factor * primeFactors[i])\n\
    \t\t}\n\t\tfactorizations.push(factorization)\n\t\tprimeFactors.push(factor)\n\
    \t}\n\treturn factorizations\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  [\n    4,\n\
    \    6\n  ]\n]\n\nshould loosely deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmpwe1j61kv.js:26:12)\n\
    \    at Object.<anonymous> (/tmp/tmpwe1j61kv.js:35:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ [ 4, 6 ]\
    \ ],\n  expected: [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014266
- exit_code: 0
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  if (n <= 1) {\n    return [];\n  }\n  let factors = [];\n  for\
    \ (let i = 2; i <= n; i++) {\n    while (n % i == 0) {\n      factors.push(i);\n\
    \      n /= i;\n    }\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return\
    \ factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014267
- exit_code: 2
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  var factors: number[] = [];\n\n  // For every prime factor of\
    \ given number, get number of times it appeared in factorization\n  var primeFactors\
    \ = getPrimeFactors(n);\n\n  // Return array with the factors\n  primeFactors.forEach(p\
    \ => {\n    factors.push(p);\n  });\n\n  return factors;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpxkzm22_z.ts(14,22): error TS2304: Cannot find name
    ''getPrimeFactors''.

    '
  timestamp: 1660014266
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  if (n == 1) {\n    return [];\n  }\n\n  let maxFactor: number\
    \ = n;\n  let factors: number[] = [];\n\n  while (maxFactor % 2 === 0) {\n   \
    \ maxFactor /= 2;\n    factors.push(2);\n  }\n\n  for (let i = 3; i <= maxFactor;\
    \ i += 2) {\n    while (n % i == 0) {\n      n /= i;\n      factors.push(i);\n\
    \      if (n != 1) {\n        break;\n      }\n    }\n  }\n\n  return factors;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  3,\n  19,\n\
    \  57\n]\n\nshould loosely deep-equal\n\n[\n  3,\n  3,\n  19,\n  19\n]\n    at\
    \ test (/tmp/tmpah6q5ux5.js:38:12)\n    at Object.<anonymous> (/tmp/tmpah6q5ux5.js:43:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 3, 19, 57\
    \ ],\n  expected: [ 3, 3, 19, 19 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014267
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const result = [];\n  const factorArray = [];\n  let tempArray\
    \ = [];\n  let factor = 1;\n\n  for (let i = 2; i <= n; i++) {\n    while (n %\
    \ i == 0) {\n      tempArray.push(i);\n      n /= i;\n    }\n  }\n\n  for (let\
    \ j = 0; j < tempArray.length; j++) {\n    factor *= tempArray[j];\n    factorArray.push(factor);\n\
    \  }\n  while (tempArray.length) {\n    factor *= tempArray.pop();\n    factorArray.push(factor);\n\
    \  }\n\n  for (let i = 0; i < factorArray.length; i++) {\n    for (let j = 0;\
    \ j < factorArray.length; j++) {\n      if (factorArray[i] > factorArray[j]) {\n\
    \        result.push(factorArray[i]);\n        break;\n      } else if (factorArray[i]\
    \ === factorArray[j]) {\n        result.push(factorArray[i]);\n        result.push(factorArray[j]);\n\
    \        break;\n      }\n    }\n  }\n\n  return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  2,\n\
    \  4\n]\n\nshould loosely deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmps2knpiyg.js:47:12)\n\
    \    at Object.<anonymous> (/tmp/tmps2knpiyg.js:56:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 2, 4\
    \ ],\n  expected: [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014267
- exit_code: 2
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  let factors: number[] = [];\n  let factor = 1;\n  factors.push(n);\n\
    \  while (factor * factors.some((x) => x % factor == 0)) {\n    factors.push(factor);\n\
    \    factor *= factors.find(x => x % factor == 0).valueOf();\n  }\n  return factors;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpd8crbh1z.ts(14,19): error TS2363: The right-hand
    side of an arithmetic operation must be of type ''any'', ''number'', ''bigint''
    or an enum type.

    ../../../../../tmp/tmpd8crbh1z.ts(16,23): error TS2339: Property ''find'' does
    not exist on type ''number[]''.

    '
  timestamp: 1660014267
- exit_code: 2
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    // Check for prime and squared number\n    if (n === 0 || n\
    \ === 1) {\n        return [];\n    }\n\n    // Get prime factors\n    const factors\
    \ = new Set<number>();\n    for (let factor = 2; factor <= Math.sqrt(n); factor++)\
    \ {\n        if (n % factor === 0) {\n            factors.add(factor);\n     \
    \       while (n % factor === 0) {\n                n /= factor;\n           \
    \ }\n        }\n    }\n    if (n > 1) {\n        factors.add(n);\n    }\n\n  \
    \  return Array.from(factors).map(f => [f]);\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpynii1jm6.ts(17,25): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    ../../../../../tmp/tmpynii1jm6.ts(30,18): error TS2339: Property ''from'' does
    not exist on type ''ArrayConstructor''.

    '
  timestamp: 1660014266
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    const factors = [];\n    for (let i = 2; i <= Math.sqrt(n);\
    \ i++) {\n        if (n % i === 0) {\n            // i has a factor\n        \
    \    factors.push(i);\n            // n divides i by i\n            while (n %\
    \ i === 0) {\n                n /= i;\n            }\n        }\n    }\n    //\
    \ n has no factors left\n    if (n > 1) {\n        factors.push(n);\n    }\n \
    \   return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2\n]\n\n\
    should loosely deep-equal\n\n[\n  2,\n  2\n]\n    at test (/tmp/tmp_4ved_b0.js:32:12)\n\
    \    at Object.<anonymous> (/tmp/tmp_4ved_b0.js:40:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2 ],\n \
    \ expected: [ 2, 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014267
- exit_code: 2
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    var factors = new Array<number>(Math.ceil(Math.sqrt(n)), 0);\n\
    \n    // Fill all elements with first factor\n    for (var i = 0; i < factors.length;\
    \ i++) {\n        var f = parseInt(factors[i]);\n        factors[i] = n;\n   \
    \     factors[f] += 1;\n    }\n\n    factors = factors.filter(function (f) { return\
    \ f !== 0; });\n\n    var factorization = [];\n    while (factors.length > 0)\
    \ {\n        factorization.push(factors.shift());\n        for (var f = 0; f <\
    \ factors.length; f++) {\n            factors[f] -= 1;\n            if (factors[f]\
    \ < 1) {\n                var tmp = [];\n                tmp.push(factors[f]);\n\
    \                factorization.push(tmp);\n                factors[f] = 0;\n \
    \           }\n        }\n    }\n    return factorization;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpwco7vb15.ts(15,26): error TS2345: Argument of type
    ''number'' is not assignable to parameter of type ''string''.

    '
  timestamp: 1660014267
- exit_code: 0
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  if (n < 2) {\n    return [];\n  }\n\n  let factors = [];\n\n \
    \ for (let i = 2; i <= Math.sqrt(n); i++) {\n    while (n % i == 0) {\n      factors.push(i);\n\
    \      n = n / i;\n    }\n  }\n\n  if (n > 1) {\n    factors.push(n);\n  }\n\n\
    \  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014268
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  if (n === 1) {\n    return [1];\n  }\n\n  const primeFactors:\
    \ number[] = [];\n  let isPrime = true;\n\n  for (let i = 1; i <= n; i++) {\n\
    \    const isFactor: boolean = !isPrime && i !== 1 && n % i === 0;\n\n    if (isFactor)\
    \ {\n      primeFactors.push(i);\n    } else {\n      isPrime = false;\n    }\n\
    \  }\n\n  return primeFactors;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n\
    \  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n\
    \  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  4\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  2\n]\n    at test (/tmp/tmpp6yjp6g6.js:31:12)\n\
    \    at Object.<anonymous> (/tmp/tmpp6yjp6g6.js:39:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 4 ],\n\
    \  expected: [ 2, 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014268
- exit_code: 2
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  let factors: number[] = [];\n  factorizeHelper(n, 0, factors);\n\
    \  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpe_kzj32o.ts(12,3): error TS2304: Cannot find name
    ''factorizeHelper''.

    '
  timestamp: 1660014268
- exit_code: -1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n\tconst factors = [];\n\tfor (let i = 1; i <= n; i++) {\n\t\tlet\
    \ f = 1;\n\t\twhile (n % i == 0) {\n\t\t\tf = f + 1;\n\t\t\tn /= i;\n\t\t}\n\t\
    \tif (f > 1) factors.push(f);\n\t}\n\treturn factors;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660014283
- exit_code: 2
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  if (n < 2) {\n    return []\n  }\n  // Initialize factorization\
    \ result\n  const factors: number[] = []\n  // Get factors of n\n  const factorN\
    \ = factorizeN(n);\n  // Add each factor to the result\n  factorN.forEach((factor:\
    \ number) => {\n    const existingFactor = factors.find((f) => f.equals(factor))\n\
    \    if (existingFactor === undefined) {\n      factors.push(factor)\n    }\n\
    \  })\n  return factors\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp385x2ivt.ts(17,19): error TS2552: Cannot find name
    ''factorizeN''. Did you mean ''factorize''?

    ../../../../../tmp/tmp385x2ivt.ts(20,36): error TS2339: Property ''find'' does
    not exist on type ''number[]''.

    '
  timestamp: 1660014268
- exit_code: -5
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors = new Array<number>();\n  while (n != 1) {\n   \
    \ if (n % 2 == 0) {\n      factors.push(2);\n      n /= 2;\n    } else {\n   \
    \   while (n % 2 == 0) {\n        factors.push(2);\n        n /= 2;\n      }\n\
    \      factors.push(2);\n      n /= 2;\n    }\n  }\n  return factors;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: Exception
  stderr: "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error\
    \ 188720663\n#\n#\n#\n#FailureMessage Object: 0x7ffc154a2660\n 1: 0x2b741c536727\
    \  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 2: 0x2b741d0cb28e\
    \ V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 3: 0x2b741ca05f8b  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 4: 0x2b741cb97760  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 5: 0x2b741cb9f0cd  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 6: 0x2b741cd897db v8::internal::Runtime_GrowArrayElements(int, unsigned long*,\
    \ v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 7: 0x2b741c6e87f9  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n"
  stdout: ''
  timestamp: 1660014275
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    const factors = new Array();\n    for (let i = 2; i <= n / i;\
    \ i++) {\n        if (n % i === 0) {\n            factors.push(Number(i));\n \
    \           if (factors.length > 30) {\n                factors.splice(0, 1);\n\
    \            }\n        }\n    }\n    if (factors.length === 1) {\n        return\
    \ factors;\n    }\n    return factors;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n\
    \  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n\
    \  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmpwm_ee3n_.js:28:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpwm_ee3n_.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014269
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    let factorsArr:number[] = []; //Array containing factors of\
    \ a number.\n    let factors: number; //Current prime factor\n\n    for (let i\
    \ = 2; i <= n / i; i++) {\n        factors = 2;\n        while (n % i == 0) {\n\
    \            factors *= i;\n            n /= i;\n        }\n\n        factorsArr.push(factors);\n\
    \    }\n\n    return factorsArr;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n\
    \  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n\
    \  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmpbou2_ge4.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpbou2_ge4.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014269
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  let factors: number[] = [];\n  let divisor = 2;\n  while (divisor\
    \ < n) {\n    if (n % divisor === 0) {\n      factors.push(divisor);\n      n\
    \ /= divisor;\n    } else {\n      divisor++;\n    }\n  }\n  return factors;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmped6h45vi.js:27:12)\n    at Object.<anonymous>\
    \ (/tmp/tmped6h45vi.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014269
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n\tlet factorsArr: number[] = [];\n\tlet i = 2;\n\n\tfor (let factor\
    \ = 2; factor <= n / i; factor++) {\n\t\twhile (n % factor === 0) {\n\t\t\tfactorsArr.push(factor);\n\
    \t\t\tn /= factor;\n\t\t}\n\t}\n\n\tif (n !== 0) {\n\t\tfactorsArr.push(n / i);\n\
    \t}\n\n\treturn factorsArr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1\n]\n\n\
    should loosely deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmp1leos0dp.js:27:12)\n\
    \    at Object.<anonymous> (/tmp/tmp1leos0dp.js:36:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1 ],\n \
    \ expected: [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014269
- exit_code: 2
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n\tlet result = [];\n\tlet factors = new Set<number>();\n\tlet divisor\
    \ = 2;\n\twhile (n > 1) {\n\t\tif (factors.has(divisor)) {\n\t\t\tlet factor =\
    \ factors.has(n - divisor) ? n - divisor : divisor;\n\t\t\tresult.unshift(factor);\n\
    \t\t\tfactors.delete(divisor);\n\t\t\tdivisor = factor;\n\t\t}\n\t\tdivisor++;\n\
    \t\tn--;\n\t}\n\tif (factors.has(divisor)) {\n\t\tresult.unshift(divisor);\n\t\
    }\n\treturn result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpczo2r0br.ts(12,20): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1660014269
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors: number[] = [];\n\n  for (let i = 2; i < n; i++)\
    \ {\n    while (n % i) {\n      n /= i;\n      factors.push(i);\n    }\n  }\n\n\
    \  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmplbdbhk18.js:23:12)\n    at Object.<anonymous>\
    \ (/tmp/tmplbdbhk18.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014269
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    const factors = [];\n\n    for (let i = 2; i <= n; i++) {\n\
    \        while (n % i === 0) {\n            factors.push(i);\n            n /=\
    \ i;\n        }\n    }\n\n    if (n !== 0) {\n        factors.push(n);\n    }\n\
    \n    return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  1\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmppezgb19j.js:26:12)\n\
    \    at Object.<anonymous> (/tmp/tmppezgb19j.js:35:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 1 ],\n\
    \  expected: [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014269
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  if (n < 2) {\n    throw new Error(`Invalid input. Input should\
    \ be greater than 2.`);\n  }\n\n  let factors = [];\n\n  for (let i = 0; i < n;\
    \ i++) {\n    for (let j = 0; j < factors.length; j++) {\n      if (n % factors[j]\
    \ === 0) {\n        factors.push(factors[j]);\n        break;\n      }\n    }\n\
    \  }\n\n  if (factors.length === 1) {\n    factors.push(1);\n  }\n\n  return factors;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmpmkhnlv6k.js:31:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpmkhnlv6k.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014269
- exit_code: 2
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    let factors = [];\n    let nums = [1, n];\n    for (let i =\
    \ 2; i < Math.sqrt(n); i++) {\n        if (n % i === 0) {\n            nums.unshift(nums[nums.length\
    \ - 1] * i);\n            if (nums[nums.length - 1] > i) {\n                nums.pop();\n\
    \            }\n        } else {\n            factors.push(...nums);\n       \
    \     nums = [n];\n        }\n    }\n    return factors;\n}\n</code>\n<|/ a tags=primes,algorithm,factors,factorization,math\
    \ |>\n<| a tags=primes,algorithm,factors,factorization,math dscore=2 |>\nThe most\
    \ straightforward way is just to generate all factors up to some number, then\
    \ just see if each of those factors is prime or not.\nGenerating all factors up\
    \ to a number n is easy: just loop from 2 to n/2 and check each factor.\nThe trick\
    \ is knowing whether a factor is prime. Since you know all the factors up to some\
    \ number n, you can just test each factor to see if it is prime. That's why we\
    \ know that factors up to n/2 are not prime.\nThere are several prime testing\
    \ algorithms out there, but one simple way to test whether a number is prime is\
    \ to check whether it's divided by all numbers from 2 to sqrt(n), and it's also\
    \ not divisible by any number greater than sqrt(n).\nTo generate all the factors,\
    \ we can start at 2. If we get a factor greater than sqrt(n), then we have found\
    \ a factor that's not prime, so we can stop there.\n<code>\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpmigkiwlr.ts(26,2): error TS1110: Type expected.

    ../../../../../tmp/tmpmigkiwlr.ts(26,3): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpmigkiwlr.ts(27,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpmigkiwlr.ts(27,4): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpmigkiwlr.ts(28,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpmigkiwlr.ts(28,6): error TS1005: '';'' expected.

    ../../../../../tmp/tmpmigkiwlr.ts(28,55): error TS1005: '';'' expected.

    ../../../../../tmp/tmpmigkiwlr.ts(28,65): error TS1109: Expression expected.

    ../../../../../tmp/tmpmigkiwlr.ts(29,5): error TS1005: '';'' expected.

    ../../../../../tmp/tmpmigkiwlr.ts(29,10): error TS1005: '';'' expected.

    ../../../../../tmp/tmpmigkiwlr.ts(29,26): error TS1005: '';'' expected.

    ../../../../../tmp/tmpmigkiwlr.ts(29,30): error TS1005: '';'' expected.

    ../../../../../tmp/tmpmigkiwlr.ts(29,33): error TS1005: '';'' expected.

    ../../../../../tmp/tmpmigkiwlr.ts(29,38): error TS1005: '';'' expected.

    ../../../../../tmp/tmpmigkiwlr.ts(29,41): error TS1005: '';'' expected.

    ../../../../../tmp/tmpmigkiwlr.ts(29,50): error TS1005: '';'' expected.

    ../../../../../tmp/tmpmigkiwlr.ts(29,54): error TS1005: '';'' expected.

    ../../../../../tmp/tmpmigkiwlr.ts(29,62): error TS1005: '';'' expected.

    ../../../../../tmp/tmpmigkiwlr.ts(29,65): error TS1005: '';'' expected.

    ../../../../../tmp/tmpmigkiwlr.ts(29,68): error TS1005: '';'' expected.

    ../../../../../tmp/tmpmigkiwlr.ts(29,73): error TS1005: '';'' expected.

    ../../../../../tmp/tmpmigkiwlr.ts(29,86): error TS1005: '';'' expected.

    ../../../../../tmp/tmpmigkiwlr.ts(29,91): error TS1005: '';'' expected.

    ../../../../../tmp/tmpmigkiwlr.ts(29,95): error TS1005: '';'' expected.

    ../../../../../tmp/tmpmigkiwlr.ts(29,98): error TS1005: ''('' expected.

    ../../../../../tmp/tmpmigkiwlr.ts(29,103): error TS1005: '')'' expected.

    ../../../../../tmp/tmpmigkiwlr.ts(29,106): error TS1005: '';'' expected.

    ../../../../../tmp/tmpmigkiwlr.ts(29,112): error TS1005: '';'' expected.

    ../../../../../t'
  timestamp: 1660014269
- exit_code: 2
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  return factorizePrimeFactorization(n);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpxno7obxp.ts(11,10): error TS2304: Cannot find name
    ''factorizePrimeFactorization''.

    '
  timestamp: 1660014269
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors: number[] = [];\n\n  if (n < 0) return factors;\n\
    \n  while (n > 0) {\n    factors.push(n % 10);\n    n = Math.floor(n / 10);\n\
    \  }\n\n  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  4\n]\n\n\
    should loosely deep-equal\n\n[\n  2,\n  2\n]\n    at test (/tmp/tmpk93d4l05.js:24:12)\n\
    \    at Object.<anonymous> (/tmp/tmpk93d4l05.js:32:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 4 ],\n \
    \ expected: [ 2, 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014269
- exit_code: 2
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors = [];\n\n  while (n > 1) {\n    for (let i = 0;\
    \ i < factors.length; i++) factors[i] = (factors[i] | 0) + 1;\n\n    for (let\
    \ j = 0; j < factors.length; j++) {\n      if (factors[j] > 1 && n / factors[j]\
    \ === factors[j]) {\n        factors[j] = factors[j] + 1;\n        break;\n  \
    \    }\n    }\n\n    n = n / factors[factors.length - 1];\n    factors = factors.slice(0,\
    \ factors.length - 1);\n  }\n\n  return factors;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpy573crmn.ts(24,5): error TS2588: Cannot assign to
    ''factors'' because it is a constant.

    '
  timestamp: 1660014269
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n\tif (n < 2) return [];\n\tlet arr = Array(n);\n\tlet counts: number[]\
    \ = [];\n\tfor (let i = 2; i <= n; i++) {\n\t\twhile (n % i == 0) {\n\t\t\tcounts[i]\
    \ = counts[i-1] + 1;\n\t\t\tn /= i;\n\t\t}\n\t\tarr[i] = counts[i];\n\t}\n\treturn\
    \ arr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  <2 empty\
    \ items>,\n  NaN\n]\n\nshould loosely deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmps3qn2drf.js:27:12)\n\
    \    at Object.<anonymous> (/tmp/tmps3qn2drf.js:36:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ <2 empty\
    \ items>, NaN ],\n  expected: [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014270
- exit_code: 2
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  if (n === 1) {\n    return [1];\n  }\n  var factors = [];\n  var\
    \ minFactor = 3;\n  var maxFactor = Number.MAX_SAFE_INTEGER;\n  var currentFactor\
    \ = 3;\n  do {\n    factors.push(currentFactor);\n    minFactor = Math.min(minFactor,\
    \ currentFactor);\n    maxFactor = Math.max(maxFactor, currentFactor);\n    currentFactor\
    \ = Math.floor((minFactor * maxFactor) / 2);\n  } while (factors.length < n);\n\
    \n  var factorArray = new Array();\n  for (var i = 0; i < n; i++) {\n    var j\
    \ = factors.length - 1;\n    while (j >= 0) {\n      factorArray[factors.length\
    \ - j - 1] = factors[j];\n      j--;\n    }\n  }\n  return factorArray;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpadjknkav.ts(16,26): error TS2339: Property ''MAX_SAFE_INTEGER''
    does not exist on type ''NumberConstructor''.

    '
  timestamp: 1660014270
- exit_code: 2
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  let factors = new Array<number[]>();\n  for (var i = 0; i < Math.sqrt(n);\
    \ i++) {\n    if (n % i == 0) {\n      let n = Math.floor(n / i);\n      let j\
    \ = 1;\n      while (n % i == 0) {\n        n *= i;\n        j++;\n      }\n \
    \     factors.push([i, j]);\n    }\n  }\n  return factors;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: "../../../../../tmp/tmp8fbbg3pf.ts(14,26): error TS2448: Block-scoped variable\
    \ 'n' used before its declaration.\n../../../../../tmp/tmp8fbbg3pf.ts(23,3): error\
    \ TS2322: Type 'number[][]' is not assignable to type 'number[]'.\n  Type 'number[]'\
    \ is not assignable to type 'number'.\n"
  timestamp: 1660014270
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  var factors: number[] = [];\n  factors.push(n);\n  var prime:\
    \ boolean;\n  do {\n    prime = false;\n    for (var index: number = factors.length\
    \ - 1; index >= 0; index--) {\n      if (factors[index] % factors[factors.length\
    \ - index - 1] == 0) {\n        prime = true;\n        break;\n      }\n    }\n\
    \    if (prime) {\n      factors.push(n);\n    } else {\n      for (var i: number\
    \ = factors.length - 1; i >= 0; i--) {\n        if (factors[i] % n == 0) {\n \
    \         factors.splice(i, 1);\n        }\n      }\n    }\n    n = Math.floor(n\
    \ / 2);\n  } while (n > 1);\n  return factors;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  2\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmplkct75f0.js:39:12)\n\
    \    at Object.<anonymous> (/tmp/tmplkct75f0.js:48:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 2 ],\n\
    \  expected: [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014270
- exit_code: -1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors: number[] = [];\n\n  for (let i = 1; i <= Math.sqrt(n);\
    \ i += 1) {\n    if (n % i === 0) {\n      let j = n;\n      while (j % i ===\
    \ 0) {\n        j /= i;\n      }\n      factors.push(j);\n      factors.push(Math.floor(n\
    \ / i));\n    }\n  }\n\n  return factors;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n\
    \  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n\
    \  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660014285
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    let factors = [];\n    for (let i = 2; i <= Math.sqrt(n); i++)\
    \ {\n        if (n % i === 0) {\n            while (n % i) {\n               \
    \ n /= i;\n                factors.push(i);\n            }\n            if (n\
    \ != 1) {\n                factors.push(n);\n            }\n        }\n    }\n\
    \    return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmpk310017i.js:28:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpk310017i.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014271
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors: number[] = [];\n  for (let i = 2; i <= Math.sqrt(n);\
    \ i++) {\n    while (n % i === 0) {\n      factors.push(i);\n      n = n / i;\n\
    \    }\n  }\n  factors.push(n);\n  return factors;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  2,\n\
    \  1\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  2\n]\n    at test (/tmp/tmpi533vbvj.js:25:12)\n\
    \    at Object.<anonymous> (/tmp/tmpi533vbvj.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 2, 1\
    \ ],\n  expected: [ 2, 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014271
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    var factors = [];\n    do {\n        if (n & 1) factors.push(1);\n\
    \        n >>>= 1;\n    } while (n >= 1);\n\n    return factors;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1\n]\n\n\
    should loosely deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmpm7vwu7fd.js:22:12)\n\
    \    at Object.<anonymous> (/tmp/tmpm7vwu7fd.js:31:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1 ],\n \
    \ expected: [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014271
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  const factors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++)\
    \ {\n    if (n % i === 0) {\n      for (let j = i; j <= n; j *= i) {\n       \
    \ factors.push(j);\n      }\n    }\n  }\n  return factors;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmp05xo5rfo.js:24:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp05xo5rfo.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014271
- exit_code: 2
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  let factors: number[] = [];\n  let factorial = 1;\n  for (let\
    \ i = 1; i <= n; i++) {\n    while (n % i) {\n      factors.push(i);\n      factorial\
    \ *= i;\n      n /= i;\n    }\n  }\n  factors.push(1);\n  for (let i = 1; i <=\
    \ n; i++) {\n    if (factors.includes(i) && factorial % i === 0) {\n      factors.push(i);\n\
    \    }\n  }\n  return factors;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n\
    \  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n\
    \  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpdxxr7dw5.ts(22,17): error TS2339: Property ''includes''
    does not exist on type ''number[]''.

    '
  timestamp: 1660014271
- exit_code: -5
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  let factors: number[] = []\n  let factor = 1\n  while (n > 1)\
    \ {\n    while (n % factor === 0) {\n      factors.push(factor)\n      n /= factor\n\
    \    }\n    factor++\n  }\n  return factors\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: Exception
  stderr: "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error\
    \ 169220804\n#\n#\n#\n#FailureMessage Object: 0x7ffd5eef3350\n 1: 0x2adceb00c727\
    \  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 2: 0x2adcebba128e\
    \ V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 3: 0x2adceb4dbf8b  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 4: 0x2adceb66d760  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 5: 0x2adceb6750cd  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 6: 0x2adceb85f7db v8::internal::Runtime_GrowArrayElements(int, unsigned long*,\
    \ v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 7: 0x2adceb1be7f9  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n"
  stdout: ''
  timestamp: 1660014274
- exit_code: -5
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  if (n == 1) {\n    return [1];\n  }\n  let factors: number[] =\
    \ [];\n  let min = 1;\n  let max = n;\n  while (max >= min) {\n    let mid = Math.floor(min\
    \ + (max - min) / 2); // Calculate mid point for given range.\n    let midFactors\
    \ = factorize(mid);\n    let found = false;\n    for (let i = 0; i < midFactors.length;\
    \ i++) {\n      if (midFactors[i] === mid && midFactors[i] > 1) {\n        found\
    \ = true;\n      }\n    }\n    if (found == false) {\n      factors.push(mid);\n\
    \      midFactors.push(1);\n    }\n    if (mid > max) {\n      min = mid - 1;\n\
    \    } else {\n      max = mid;\n    }\n  }\n  if (max > n) factors.push(max);\n\
    \  return factors;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = factorize;\n  assert.deepEqual(candidate(2),[2]);\n\
    \  assert.deepEqual(candidate(4),[2, 2]);\n  assert.deepEqual(candidate(8),[2,\
    \ 2, 2]);\n  assert.deepEqual(candidate(57),[3, 19]);\n  assert.deepEqual(candidate(3249),[3,\
    \ 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3, 3, 3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n  assert.deepEqual(candidate(18),[2,\
    \ 3, 3]);\n}\n\ntest();"
  status: Exception
  stderr: "\n\n#\n# Fatal error in , line 0\n# Fatal JavaScript invalid size error\
    \ 169220804\n#\n#\n#\n#FailureMessage Object: 0x7ffd065e0ec0\n 1: 0x2acd36f12727\
    \  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n 2: 0x2acd37aa728e\
    \ V8_Fatal(char const*, ...) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 3: 0x2acd373e1f8b  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 4: 0x2acd37573760  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 5: 0x2acd3757b0cd  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 6: 0x2acd377657db v8::internal::Runtime_GrowArrayElements(int, unsigned long*,\
    \ v8::internal::Isolate*) [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n\
    \ 7: 0x2acd370c47f9  [/home/a.guha/.conda/envs/polyglot/bin/../lib/libnode.so.108]\n"
  stdout: ''
  timestamp: 1660014277
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n    const result: number[] = [];\n\n    function nextPrime(currentNum:\
    \ number): number {\n        let factors = [];\n\n        for (let i = 2; i <=\
    \ Math.sqrt(currentNum); i++) {\n            if (currentNum % i === 0) {\n   \
    \             factors.push(i);\n                currentNum /= i;\n           \
    \ }\n        }\n\n        return currentNum;\n    }\n\n    for (let i = 2; i <=\
    \ Math.sqrt(n); i++) {\n        if (n % i === 0) {\n            result.push(i);\n\
    \            n = nextPrime(n);\n        }\n    }\n\n    if (n !== 1) {\n     \
    \   result.push(n);\n    }\n\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  2,\n  4\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2,\n  2,\n  2\n]\n    at test (/tmp/tmpz8lp0m5y.js:38:12)\n\
    \    at Object.<anonymous> (/tmp/tmpz8lp0m5y.js:45:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 2, 4 ],\n\
    \  expected: [ 2, 2, 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014271
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  let result = [];\n  if (n === 1) return [n];\n  if (n === 2) return\
    \ [n];\n  for (let i = 1; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n\
    \      const count = n / i;\n      for (let j = 0; j < count; j++) {\n       \
    \ result.push(i);\n      }\n    }\n  }\n  return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  1,\n\
    \  1,\n  1,\n  2,\n  2\n]\n\nshould loosely deep-equal\n\n[\n  2,\n  2\n]\n  \
    \  at test (/tmp/tmp36z57kls.js:30:12)\n    at Object.<anonymous> (/tmp/tmp36z57kls.js:38:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 1, 1,\
    \ 1, 2, 2 ],\n  expected: [ 2, 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014271
- exit_code: 1
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  let factors = [];\n  let iFact = 1;\n  let iFactored = 1;\n  let\
    \ iFactor = 1;\n\n  while (n > 1) {\n    if (n % iFact === 0) {\n      iFactored\
    \ *= iFactor;\n      factors.push(iFactor);\n      iFactor = 1;\n      iFact =\
    \ 1;\n    }\n    iFactored *= iFact;\n    iFact++;\n    n--;\n  }\n  if (iFact\
    \ > 1) factors.push(iFact);\n  return factors;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = factorize;\n  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2,\
    \ 2]);\n  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  1,\n  2\n\
    ]\n\nshould loosely deep-equal\n\n[\n  2\n]\n    at test (/tmp/tmpaizflkuw.js:33:12)\n\
    \    at Object.<anonymous> (/tmp/tmpaizflkuw.js:42:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 1, 2 ],\n\
    \  expected: [ 2 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660014271
- exit_code: 0
  program: "//Return array of prime factors of given integer in the order from smallest\
    \ to largest.\n// Each of the factors should be arrayed number of times corresponding\
    \ to how many times it appeares in factorization.\n// Input number should be equal\
    \ to the product of all factors\n// >>> factorize(8)\n// [2, 2, 2]\n// >>> factorize(25)\n\
    // [5, 5]\n// >>> factorize(70)\n// [2, 5, 7]\nfunction factorize(n: number):\
    \ number[] {\n  let factors = new Array<number>();\n  let divisor: number = 0;\n\
    \  for (let i = 2; i <= n; i++) {\n    while (n % i == 0) {\n      divisor = i;\n\
    \      factors.push(i);\n      n /= i;\n    }\n  }\n  if (n != 1) {\n    factors.push(1);\n\
    \    divisor = 1;\n  }\n  return factors;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = factorize;\n\
    \  assert.deepEqual(candidate(2),[2]);\n  assert.deepEqual(candidate(4),[2, 2]);\n\
    \  assert.deepEqual(candidate(8),[2, 2, 2]);\n  assert.deepEqual(candidate(57),[3,\
    \ 19]);\n  assert.deepEqual(candidate(3249),[3, 3, 19, 19]);\n  assert.deepEqual(candidate(185193),[3,\
    \ 3, 3, 19, 19, 19]);\n  assert.deepEqual(candidate(20577),[3, 19, 19, 19]);\n\
    \  assert.deepEqual(candidate(18),[2, 3, 3]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014271
