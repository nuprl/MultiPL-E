name: HumanEval_121_solution
language: ts
prompt: "//Given a non-empty array of integers, return the sum of all of the odd elements\
  \ that are in even positions.\n// Examples\n// >>> solution([5, 8, 7, 1])\n// 12\n\
  // >>> solution([3, 3, 3, 3, 3])\n// 9\n// >>> solution([30, 13, 24, 321])\n// 0\n\
  function solution(lst: number[]): number {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7,\
  \ 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
  \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
  \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
  \ 13, 2, 9]),3);\n}\n\ntest();"
completions: ["    const len = lst.length;\n    let sum = 0;\n\n    for (let i = len\
    \ - 1; i >= 0; i--) {\n        // If index i is odd, increase its value by 1\n\
    \        if (i % 2 === 1) {\n            sum += lst[i];\n        }\n    }\n\n\
    \    return sum;\n}\n", "  const newList = [];\n  lst.forEach((item: number) =>\
    \ {\n    if (item % 2 === 0) {\n      newList.push(item);\n    }\n  });\n  console.log(newList);\n\
    \  const evenSum = newList.filter((item) => item % 2 === 0).reduce((a, b) => a\
    \ + b, 0);\n  console.log(evenSum);\n  return evenSum;\n}\n", "  lst = lst.slice();\n\
    \  lst.sort();\n  let oddSum = 0;\n  for (let i = 0; i < lst.length - 2; i++)\
    \ {\n    if (lst[i] % 2 !== 0) {\n      oddSum += lst[i + 1];\n    }\n  }\n  return\
    \ oddSum;\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=javascript,arrays,algorithm\
    \ dscore=1 |>\nWe can use Array.flatMap here.\nThis approach works by creating\
    \ a temporary array that will contain the original array's values but sorted,\
    \ and then use Array.flatMap to create the sum of all odd-numbered elements while\
    \ only iterating the original array once.\n\n<code>\nconst getSum = (arr) => arr.flatMap(n\
    \ => [...n, n + 1]).reduce((a, b) => a + b, 0)\n\nconst data = [5, 8, 7, 1, 3,\
    \ 3, 3, 30]\n\nconsole.log(getSum(data))</code>\n<|/ a |>\n<| c |>\nWhy bother\
    \ with the temporary array? Why not just `.flatMap(n => [n, n + 1]).reduce((a,\
    \ b) => a + b, 0)`?\n<|/ c |>\n<| c |>\nGood call. I'm still a little new to `flatMap`\
    \ so thanks for teaching me something! :)\n<|/ c |>\n<| a dscore=0 |>\n<code>",
  "  let total = 0;\n  lst.forEach((num) => {\n    if (num % 2 === 0) {\n      total\
    \ += num;\n    }\n  });\n  return total;\n}\n", "  for (let i = 0; i < lst.length;\
    \ i += 1) {\n    if (i % 2 !== 0) {\n      return lst[i]\n    }\n  }\n}\n", " \
    \   var result = 0;\n    for (var i = 0; i < lst.length; i += 2) {\n        result\
    \ = result + lst[i];\n    }\n    return result;\n}\n", "  let odd = [...lst].filter((e,\
    \ i, arr) => i % 2 !== 0)\n  let even = [...lst].filter((e, i, arr) => i % 2 ===\
    \ 0)\n  return odd.reduce((sum, e) => sum + e, 0) + even.reduce((sum, e) => sum\
    \ + e, 0)\n}\n", "  return lst.find((v, i, a) => {\n    if (i % 2 === 0) {\n \
    \     return a[i];\n    }\n  });\n}\n", "  return lst.filter(item => item % 2\
    \ === 1).reduce((a, b) => a + b, 0);\n}\n", "    return lst.filter((n, i) => i\
    \ % 2 === 1).reduce((a, b) => a + b);\n}\n", "  return sumEven(lst);\n}\n", " \
    \ const sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 ===\
    \ 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "  let evenIndex\
    \ = 0;\n  let oddIndex = 0;\n\n  while (oddIndex < lst.length) {\n    oddIndex\
    \ += 2;\n    evenIndex++;\n  }\n\n  return lst[oddIndex] - lst[evenIndex];\n}\n",
  "  // Write your code here\n  if(lst.length<=0){\n    return 0;\n  }\n  if(lst.length===1\
    \ || lst.length===0){\n    return lst[0]\n  }\n  for(var i=0;i<lst.length;i++){\n\
    \    if(lst[i]%2===0 && lst[i+1]%2!==0){\n      return lst[i]+lst[i+1]\n    }\n\
    \  }\n  return 0;\n}\n\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\nHere's another\
    \ solution using reduce and filter functions to remove duplicates and count the\
    \ number of odd occurrences:\n\n<code>", "  let evenSum = 0;\n  for (let i = 0;\
    \ i < lst.length; i++) {\n    if (i % 2 === 0) {\n      evenSum += lst[i];\n \
    \   }\n  }\n  return evenSum;\n}\n", "  if (lst.length === 0) {\n    return 0;\n\
    \  }\n\n  const evenIndexes = lst.filter(index => index % 2 === 0);\n  return\
    \ evenIndexes.reduce((total, index) => total + index, 0);\n}\n", "  let evenSum\
    \ = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n\
    \      evenSum += lst[i];\n    }\n  }\n  return evenSum;\n}\n", "    let sum =\
    \ 0;\n    for (let i = 0; i < lst.length; ++i) {\n        if (i % 2 === 1) {\n\
    \            sum += lst[i];\n        }\n    }\n    return sum;\n}", "  let evenSum\
    \ = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n   \
    \   evenSum += lst[i];\n    }\n  }\n  return evenSum;\n}\n", "    if (lst.some((item)\
    \ => item % 2 === 1)) {\n        return lst.reduce((acc, val) => acc + val, 0);\n\
    \    }\n    return null;\n}\n", "  lst.sort((a: number, b: number) => a > b);\n\
    \n  const evenIndexes = lst.filter(i => i % 2 === 0);\n  const oddIndexes = lst.filter(i\
    \ => i % 2 === 1);\n  const evenSum = evenIndexes.reduce((a, i) => (a + i), 0);\n\
    \  const oddSum = oddIndexes.reduce((a, i) => (a + i), 0);\n  return evenSum +\
    \ oddSum;\n}\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>", "  if (lst.length\
    \ < 2) return 0;\n\n  return lst.filter((e, i) => {\n    return i % 2 === 1;\n\
    \  }).reduce((acc, val) => acc + val);\n}\n", "  let evenSum = 0;\n  lst.map((i)\
    \ => {\n    if (i % 2 === 0) {\n      evenSum += i;\n    }\n  });\n  return evenSum;\n\
    }", "  let sum = 0;\n  for (let i = 0; i < lst.length; i += 2) {\n    sum += lst[i];\n\
    \  }\n  return sum;\n}\n", "  let sumOdd = 0;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (i % 2 === 0) {\n      sumOdd += lst[i];\n    }\n  }\n  return\
    \ sumOdd;\n}\n", "  const evens = lst.filter((num) => num % 2 === 0);\n  if (evens.length\
    \ === 0) {\n    return 0;\n  }\n  return evens.reduce((a, b) => a + b);\n}\n\n\
    </code>\n<|/ a dscore=3 tags=javascript,arrays |>\n<| c |>\nThis is also a great\
    \ answer, but you can also do `arr.filter((num) => num % 2 === 0).reduce((a, b)\
    \ => a + b)`\n<|/ c |>\n<| a tags=javascript,arrays |>\nYou can do it like this...\n\
    \n<code>", "    let evens = 0;\n    lst.forEach(element => {\n        if (element\
    \ % 2 === 0) {\n            evens += element;\n        }\n    });\n    return\
    \ evens;\n}\n</code>\n<|/ a tags=arrays,algorithm,sorting,javascript,typescript\
    \ |>\n<| a dscore=1 tags=arrays,algorithm,sorting,javascript,typescript |>\nYou\
    \ can write a single line function using filter and reduce. \n<code>\nconst arr\
    \ = [5, 8, 7, 1]\n\nconst sum = arr.reduce((acc, val) => acc + (val % 2 === 0\
    \ ? val : 0), 0)\n</code>\n<|/ a |>\n<| a dscore=1 |>\n<code>\nconst arr = [5,\
    \ 8, 7, 1]\n\nvar evenSum = 0;\narr.forEach(val => {\n    if (val % 2 === 0) {\n\
    \        evenSum += val;\n    }\n})\n\nconsole.log(evenSum);</code>\n<|/ a tags=arrays,algorithm,sorting,javascript,typescript\
    \ |>\n<| a tags=arrays,algorithm,sorting,javascript,typescript dscore=1 |>\nI\
    \ used filter and reduce. Also I didn't use the variable 'evens' to keep the sum\
    \ of all odd numbers.\n\n<code>\nlet arr = [5, 8, 7, 1]\n\nconst sum = arr.filter((item)\
    \ => item % 2 != 0)\n      .reduce((a, b) => a + b, 0);\n\nconsole.log(sum)</code>\n\
    <|/ a |>\n<| c |>\nWhile this code may answer the question, providing additional\
    \ context regarding how and/or why it solves the problem would improve the answer's\
    \ long-term value.\n<|/ c |>\n<| a |>\nI used reduce function as it is efficient\
    \ in finding sum.\nHere we are using even numbers only.\n<code>\nlet arr = [5,\
    \ 8, 7, 1];\n\nlet sum = arr.reduce((acc, cur) => {\n  return acc + (cur % 2 ===\
    \ 0 ? (cur) : 0);\n});\n\nconsole.log(sum);\n</code>\n<|/ a dscore=0 tags=arrays,algorithm,sorting,javascript,typescript\
    \ |>\n<| a dscore=0 |>\n<code>\nlet arr = [5, 8, 7, 1];\n\nlet evenSum = arr.reduce((acc,\
    \ val) => ({\n   evenSum: acc+val,\n   odd: val % 2\n}))\n\nconsole.log(evenSum.evenSum)\n\
    console.log(evenSum.odd)</code>\n<|/ a tags=arrays,algorithm,sorting,javascript,typescript\
    \ |>\n<| a dscore=0 |>\nYou can simply use the filter function to find the odd\
    \ numbers and then sum the results:\n\n<code>\nconst arr = [5, 8, 7, 1];\n\nconst\
    \ sumOf", "  if (lst.length === 0) {\n    return 0;\n  }\n\n  let evenSum = 0;\n\
    \  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 !== 0) {\n      evenSum\
    \ += lst[i];\n    }\n  }\n  return evenSum;\n}\n", "    return lst.filter(\n \
    \       item => item % 2 === 1\n    ).reduce((acc, cur) => acc + cur, 0);\n}\n",
  "  return lst.filter((e, i) => i % 2 === 1).reduce((a, b) => a + b, 0);\n}\n", " \
    \   var sum = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 === 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n\
    }\n", "  if (lst.length === 0) {\n    return 0;\n  }\n  let evens = 0;\n  let\
    \ odds = 0;\n  let sum = 0;\n  lst.forEach((element) => {\n    if (element % 2\
    \ === 0) {\n      evens += element;\n    } else {\n      odds += element;\n  \
    \  }\n  });\n  sum = evens - odds;\n  return sum;\n}\n", "  return lst.filter(function\
    \ (el) {\n    return el % 2 === 1;\n  }).reduce((a, x) => a + x, 0);\n}\n</code>\n\
    <|/ a tags=javascript,algorithm |>\n<| c |>\nThis isn't a general solution, though.\n\
    <|/ c |>\n<| c |>\nYes it is, because I didn't include that in the question. However\
    \ I did add examples of how it would work, for people who are interested.\n<|/\
    \ c |>\n<| c |>\nWhat do you think about this `arr.filter(x => x % 2 === 1).reduce((acc,\
    \ val) => val + acc, 0);`?\n<|/ c |>\n<| a tags=javascript,algorithm |>\nA simpler\
    \ solution using Array.prototype.reduce and Array.slice:\n\n<code>", "  var odds\
    \ = 0;\n  var evens = 0;\n  for (var i = 0; i <= lst.length; i++) {\n    if (lst[i]\
    \ % 2 === 0) evens++;\n    else odds++;\n  }\n  return odds - evens;\n}\n", " \
    \ if(lst.length < 2){\n    return 0\n  }\n  let sum = 0;\n  let curr = lst[0];\n\
    \  for(let i = 1; i < lst.length; i++){\n    if(lst[i] === curr){\n      curr\
    \ = lst[i+1]\n    }else{\n      sum += curr\n      curr = lst[i]\n    }\n  }\n\
    \  return sum\n}\n", "  if (lst.length < 2) return 0\n  const evenList = lst.filter((e,\
    \ i) => i % 2 === 0)\n  const oddList = lst.filter((e, i) => i % 2 !== 0)\n  return\
    \ evenList.reduce((x, y) => x + y, 0) + oddList.reduce((x, y) => x + y, 0)\n}\n",
  "\tconst evenPositions = lst.filter(v => v & 1).length;\n\treturn lst.reduce((acc,\
    \ v) => acc + v, 0) - (evenPositions % 2);\n}\n", "  const odds = arr.filter(elt\
    \ => elt % 2 === 1);\n  return odds.reduce((prev, cur) => prev + cur, 0);\n}\n",
  "  if (lst.length % 2 === 0) {\n    let sum = 0;\n    for (let i = 0; i < lst.length;\
    \ i += 2) {\n      sum += lst[i];\n    }\n    return sum;\n  }\n  return 0;\n\
    }\n", "  return lst.reduce((acc, curr) => {\n    const evenIndex = curr % 2;\n\
    \    const oddIndex = Math.floor(curr / 2);\n\n    return (\n      acc + evenIndex\
    \ + oddIndex\n    );\n  }, 0);\n}\n", "  let sum = 0;\n  for (var i = 0; i < lst.length;\
    \ ++i) {\n    if (i % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\n", "  return lst.filter(x => x % 2 === 1).reduce((a: number, b: number) =>\
    \ {\n    return a + b\n  }, 0)\n}\n", "    // code here\n    const evens = lst.filter((item,\
    \ index) => index % 2 === 0);\n    return evens.reduce((a, b) => a + b, 0);\n\
    }\n\n<|/ file dstars=0 source=github |>\n<| a |>\n<code>\nvar arr = new Array(1,\
    \ 5, 12, 23, 30, 31, 33, 44, 54, 55, 56, 63, 66, 73, 74, 83, 84, 93, 94, 94, 94,\
    \ 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94,\
    \ 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94,\
    \ 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94,\
    \ 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94,\
    \ 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94,\
    \ 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94,\
    \ 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94,\
    \ 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94,\
    \ 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94,\
    \ 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94,\
    \ 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94,\
    \ 94, 94, 94, 94, 9", "    let evenCount = 0;\n    let oddCount = 0;\n    for\
    \ (let i = 0; i < lst.length; i++) {\n        if (i % 2 === 0) {\n           \
    \ evenCount += lst[i];\n        }\n        else {\n            oddCount += lst[i];\n\
    \        }\n    }\n    return evenCount + oddCount;\n}\n", "  let sumOdds = 0;\n\
    \  for (let i = 0; i <= lst.length - 1; i++) {\n    if (i % 2 === 1) {\n     \
    \ sumOdds += lst[i];\n    }\n  }\n  return sumOdds;\n}\n", "    return lst.filter(function(el,\
    \ i): boolean {\n        return (i % 2 === 1) && (el % 2 !== 0);\n    }).reduce((sum,\
    \ el): number => {\n        return sum + el;\n    });\n}\n", "\tlet evenSum =\
    \ 0;\n\tfor(let i = 0; i < lst.length; i++){\n\t\tif(lst[i] % 2 === 0){\n\t\t\t\
    evenSum += lst[i];\n\t\t}\n\t}\n\treturn evenSum;\n}", "  let result = 0;\n\n\
    \  for (let i = 0; i < lst.length; i += 2) {\n    result += lst[i];\n  }\n\n \
    \ return result;\n}\n", "  return arr\n    .map((x, i) => {\n      const res =\
    \ x % 2 === 0 ? x : x % 2 === 1 ? x - 1 : x + 1;\n      return res;\n    })\n\
    \    .reduce((a, b) => a + b, 0);\n}\n", "    // write your code in JavaScript\
    \ (Node.js 8.9.4)\n    return lst.find((_, i) => i % 2 === 1);\n}\n", "    const\
    \ map = mapOddNumbers(lst);\n    return map.reduce((acc, curr) => acc + curr,\
    \ 0);\n}\n", "  let result = lst.reduce((acc, val) => {\n    return acc + (val\
    \ & 1 ^ 1 ^ 1);\n  }, 0);\n\n  return result ? result : 0;\n}\n", "  if (lst.length\
    \ === 0) {\n    return 0\n  }\n\n  if (lst.length === 1) {\n    return lst[0]\n\
    \  }\n\n  const evenSum = Math.ceil(lst[1] / 2)\n  const oddSum = lst[0] - evenSum\n\
    \  return oddSum + evenSum\n}\n", "  let even = lst[0 % lst.length];\n  for (let\
    \ i = 1; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      even += lst[i];\n\
    \    }\n  }\n  return even;\n}\n", "  const oddArray = lst.filter((_, i) => i\
    \ % 2 === 1);\n  return oddArray.reduce((acc, curr) => acc + curr);\n}\n\nconsole.log(solution([1,\
    \ 2, 3, 3, 4, 4, 4, 4]));</code>\n\nIn a more readable form we can write the above\
    \ like this:\n\n<code>\nconst solution = arr => arr\n  .filter((_, i) => i % 2\
    \ === 1)\n  .reduce((acc, curr) => acc + curr);\n\nconsole.log(solution([1, 2,\
    \ 3, 3, 4, 4, 4, 4]));</code>\n\nWhich gives you a more succinct way of expressing\
    \ the solution:\n\n<code>\nconst solution = arr => arr\n  .filter((_, i) => i\
    \ % 2 === 1)\n  .reduce((acc, curr) => acc + curr, 0);\n\nconsole.log(solution([1,\
    \ 2, 3, 3, 4, 4, 4, 4]));</code>\n<|/ a dscore=3 |>\n<| a |>\n<code>\nconst solution\
    \ = list => list.filter(i => i % 2 !== 0).reduce((acc, val) => acc + val, 0);\n\
    \nconsole.log(solution([2, 1, 2, 3, 3]));\nconsole.log(solution([1, 2, 3, 4, 5,\
    \ 6, 6, 6, 6]));\nconsole.log(solution([8, 5, 6, 5, 4, 3, 1]));\nconsole.log(solution([1,\
    \ 1, 1, 1, 1]));</code>\n<|/ a dscore=3 tags=javascript,arrays,node.js |>\n<|\
    \ a dscore=2 |>\n<code>\nlet input = [1, 2, 3, 3, 4, 4, 4, 4];\nlet result = 0;\n\
    \ninput.forEach(i => {\n    if(i%2 == 1){\n        result += i;\n    }\n});\n\n\
    console.log(result);\n</code>\n<|/ a tags=javascript,arrays,node.js |>\n<| a tags=javascript,arrays,node.js\
    \ dscore=2 |>\nYou can try to use forEach method and find odds values with filter\
    \ method.\n<code>\nvar evenValues = arr.filter(function (item) {\n    return item\
    \ % 2 === 0;\n});\n\nvar oddValues = arr.filter(function (item) {\n    return\
    \ item % 2 === 1;\n});\n\nvar sum = evenValues.reduce(function (prev, curr) {\n\
    \    return prev + curr;\n}, 0);\n</code>\n<|/ a |>\n<| c |>\n`arr.filter(item\
    \ => item % 2 === 0)` can be simplified to `arr.filter(item => item % 2)`, there's\
    \ no need to return an array.\n<|/ c |>\n<| a tags=javascript,arrays,node.js |>\n\
    <code>\nvar myArray = [2, 1, 2, 3, 3]\nmyArray.forEach((x,index) => {\n    if(x\
    \ % 2 != 0) \n    myArray[index]=x;\n})\nconsole.log(myArray);\nvar myArray1 =\
    \ [2, 1, 2, 3, 3]\nvar myArray2 = myArray.filter(function(n){ return n % 2 ",
  "  if (lst.length === 0) {\n    return 0;\n  }\n  const evenIndex = lst.findIndex(x\
    \ => x % 2 === 0);\n  return lst[evenIndex + 1] - lst[evenIndex];\n}\n\nconst\
    \ input = [10, 3, 6, 1, 13, 4, 2, 15, 6, 12, 7, 19, 8, 14, 10, 2, 18, 10, 5, 14,\
    \ 8, 20, 2, 15, 4, 9, 20, 21, 4, 12, 14, 6, 9, 6, 14, 14, 11, 9, 9, 12, 7, 3,\
    \ 21, 5, 10, 19, 8, 15, 9, 10, 8, 7, 2, 10, 10, 4, 9, 3, 8, 1, 10, 6, 13, 2, 11,\
    \ 3, 6, 9, 10, 14, 12, 10, 5, 13, 9, 7, 14, 14, 3, 16, 10, 18, 2, 9, 10, 13, 17,\
    \ 4, 10, 9, 9, 5, 6, 15, 3, 10, 9, 4, 14, 8, 1, 10, 5, 8, 12, 10, 3, 9, 4, 13,\
    \ 17, 8, 17, 18, 14, 17, 9, 10, 19, 14, 12, 10, 7, 13, 9, 4, 10, 7, 1, 10, 10,\
    \ 10, 7, 13, 9, 13, 10, 7, 2, 15, 5, 8, 14, 10, 9, 5, 11, 7, 7, 11, 8, 13, 15,\
    \ 7, 8, 12, 14, 2, 8, 7, 10, 7, 7, 9, 6, 10, 2, 12, 9, 9, 9, 5, 6, 8, 10, 4, 13,\
    \ 6, 15, 3, 9, 14, 6, 15, 3, 9, 14, 6, 15, 3, 9, 14, 6, 15, 3, 9, 14, 6, 15, 3,\
    \ 9, 14, 6, 15, 3, 9, 14, 6, 15, 3, 9, 14, 6, 15, 3, 9, 14, 6, 15, 3, 9, 14, 6,\
    \ 15, 3, 9, 14, 6, 15, 3, 9, 14, 6, 15, 3, 9, 14, 6, 15, 3, 9, 14, 6, 15, 3, 9,\
    \ 14, 6, 15, 3, 9, 14, 6, 15, 3, 9, 14, 6, 15, 3, 9, 14, 6, 15, 3, 9, 14, 6, 15,\
    \ 3, 9, 14, 6, 15, 3, 9, 14, 6, 15, 3, 9, 14, 6, 15, 3, 9, 14, 6, 15, 3, 9, 14,\
    \ 6, 15, 3, 9, 14, 6, 15, 3, 9, 14, 6, 15, 3, 9, 14, 6, 15, 3, 9, 14, 6, 15, 3,\
    \ 9, 14, 6, 15, 3, 9, 14, 6, 15, 3, 9, 14, 6, 15, 3, 9, 14, 6, 15, 3, 9, 14, 6,\
    \ 15, 3, 9, 14, 6, 15, 3, 9, 14, 6, 15, 3, 9, 14, 6, 15, 3, 9, 14, 6, 15, 3, 9,\
    \ 14, 6, 15, 3, 9, 14, 6, 15, 3, 9, 14, 6, 15, 3, 9, 14, 6, 15, 3, 9, 14, 6, 15,\
    \ 3, 9, 14, 6, 15, 3, 9, 14, 6, 15, 3, 9, 14, 6, 15, 3, 9, 14, 6, 15, 3, 9, 14,\
    \ 6, 15, 3, 9, 14, 6, 15, 3, 9, 14, 6, 15, 3, 9, 14, 6, 15, 3, 9, 14, 6, 15, 3,\
    \ 9, 14, 6, 15, 3, 9, 14, 6, 15, 3, 9, 14, 6, 15, 3, 9, 14, 6, 15, 3, 9, 14, 6,\
    \ 15, 3, 9, 14, 6, 15, 3, 9, 14, 6, 15, 3, 9, 14, 6, 15, 3, 9, ", "    return\
    \ lst.filter(x => x % 2 === 1).reduce((a: number, b: number) => a + b, 0);\n}\n\
    </code>\n<|/ a dscore=0 |>\n<| a tags=javascript,arrays |>\n<code>", "  if (lst.length\
    \ < 1) return -1;\n  if (lst.length < 2) return 0;\n  \n  let evenSum = 0;\n \
    \ \n  for(let i = 1; i < lst.length; i++) {\n    if(lst[i] % 2 === 0) {\n    \
    \  evenSum += lst[i];\n    } else {\n      evenSum += lst[i - 1];\n      break;\n\
    \    }\n  }\n  return evenSum;\n}\n", "  return sum(\n    lst\n      .sort((a:\
    \ number, b: number) => a - b)\n      .filter((item, index) => index % 2 === 1)\n\
    \  );\n}\n", "  const n = lst.length;\n  return n\n    ? lst.reduce(\n       \
    \ (s, v) =>\n          (s % 2 === 0\n            ? s\n            : s + v) %\n\
    \          2 ===\n            0\n            ? s\n            : s + v),\n    \
    \    0\n      )\n    : -1;\n}\n", "  for (let i = 0; i < lst.length; i++) {\n\
    \    if (i % 2 == 0 && lst[i] % 2 == 0) {\n      lst[i] += lst[parseInt(i) - 1]\n\
    \      lst.splice(i--, 1)\n      i--\n    }\n  }\n  return lst[0]\n}\n", "  let\
    \ sum = 0;\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 ==\
    \ 1) sum += lst[i];\n  }\n  return sum;\n}\n</code>\n<|/ a tags=algorithm,sum,arrays,javascript\
    \ dscore=0 |>\n<| a dscore=0 |>\nIn Python you could use an iterator for the input\
    \ and sum the odd numbers on every second iteration.\n\n<code>", "    var sum\
    \ = 0;\n    for (var i = 0; i < lst.length; ++i) {\n        if (i % 2 === 0) {\n\
    \            sum += lst[i];\n        }\n    }\n    return sum;\n}\n", "  return\
    \ lst.filter(i => i % 2 === 1).reduce((a, b) => a + b, 0);\n}\n", "  return lst.filter((n,\
    \ i) => i % 2 === 1).reduce((total, num) => total + num, 0)\n}\n", "  return lst.filter((value,\
    \ index, array) => index % 2 === 1).reduce((acc, val) => acc + val, 0);\n}\n",
  "  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 ===\
    \ 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "  if (lst.length\
    \ < 1) {\n    return 0\n  }\n\n  let odds: number[] = []\n  lst.forEach((n) =>\
    \ {\n    if (n % 2 === 0) {\n      odds.push(n)\n    }\n  })\n\n  let evenSum:\
    \ number = 0\n  odds.forEach((n) => {\n    evenSum += n\n  })\n  return evenSum\n\
    }", "  let evenSum = 0;\n  for (let i = 0; i < lst.length; ++i) {\n    if (lst[i]\
    \ % 2 === 0) {\n      evenSum += lst[i];\n    }\n  }\n  return evenSum;\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| a dscore=2 tags=javascript,arrays |>\nA short solution in\
    \ Python\n<code>\nsum(i for i in arr if i%2)\n</code>\n<|/ a |>\n<| c |>\nThis\
    \ doesn't solve the problem in the question - it counts all the odd numbers in\
    \ the array, not just the odd ones in the array.\n<|/ c |>\n<| a |>\nAnother solution:\n\
    <code>", "  const res = [];\n  let sum = 0;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (i % 2 === 0) {\n      sum += lst[i];\n    } else {\n      res.push(lst[i]);\n\
    \    }\n  }\n  return sum;\n}\n", "  return lst.reduce((acc, cur, idx) => idx\
    \ % 2 === 0 ? acc + cur : acc, 0);\n}\n</code>\n<|/ a |>\n<| a dscore=0 |>\n<code>",
  "  return lst.filter((_, i) => i % 2 == 1).reduce((a, b) => a + b, 0);\n}\n", " \
    \ return lst.reduce((total, value) => total += value % 2 ? value : -value, 0);\n\
    }\n", "  return lst.filter((item) => item % 2 === 1).reduce((acc: number, x: number)\
    \ => acc + x, 0);\n}\n", "    let evenOddSum = 0;\n    lst.forEach((n, i) => {\n\
    \        evenOddSum += n % 2 ? lst[i - 1] : 0;\n    });\n    return evenOddSum;\n\
    }", "  lst.sort((a, b) => a - b);\n  return lst.filter(e => e % 2 === 1).reduce((a,\
    \ c) => a + c, 0);\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));</code>\n<|/ a tags=javascript,arrays\
    \ dscore=0 |>\n<| a |>\n<code>", "  var result = 0;\n  var odd = 0;\n  for (var\
    \ i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      result += lst[i];\n\
    \    } else {\n      odd += lst[i];\n    }\n  }\n  return result;\n}\n", "  let\
    \ evenSum = 0;\n  let oddSum = 0;\n  for (let i = 0; i < lst.length; i++) {\n\
    \    if (i % 2 === 0) {\n      evenSum += lst[i];\n    } else {\n      oddSum\
    \ += lst[i];\n    }\n  }\n  return evenSum + oddSum;\n}\n", "    if (lst.length\
    \ <= 0) {\n        return -1;\n    }\n    let sum = 0;\n    let evens = 0;\n \
    \   for (let i = 0; i < lst.length; i++) {\n        if (i % 2 === 0) {\n     \
    \       evens++;\n        } else {\n            sum += lst[i];\n        }\n  \
    \  }\n    return evens === 0 ? sum : sum - (sum % evens);\n}\n", "    // Your\
    \ code here!\n    return lst.filter((n, i, arr) => i % 2 === 1).reduce((a, b)\
    \ => a + b, 0);\n}\n", "  return lst.filter((x, i) => i % 2 === 0).reduce((x,\
    \ y) => x + y, 0);\n}\n", "    let evens = lst.filter(x => x % 2 === 0);\n   \
    \ let sum = 0;\n    for (let e of evens) {\n        sum += e;\n    }\n    return\
    \ sum;\n}\n</code>\n<|/ a tags=arrays,javascript dscore=1 |>\n<| a dscore=0 tags=arrays,javascript\
    \ |>\nThis code will help you\n\n<code>\nlet arr = [\n  3,\n  2,\n  1,\n  5,\n\
    \  7,\n  8,\n  4\n];\nlet sum = 0;\narr.forEach((val, ind) => {\n  if (ind%2 !==\
    \ 0) {\n    sum += val;\n  }\n});\nconsole.log(sum);</code>\n<|/ a |>\n<| a tags=arrays,javascript\
    \ |>\n<code>", "  return odd(lst, 0, lst.length);\n}\n", "  const results: number[]\
    \ = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 1) {\n  \
    \    results.push(lst[i]);\n    }\n  }\n  return results.reduce((a, b) => a +\
    \ b, 0);\n}\n", "  return findOdd(lst).reduce((acc, curr) => acc += curr, 0);\n\
    }\n", "  return lst.filter((_, i) => i % 2 === 1).reduce((prev, next) => prev\
    \ + next)\n}\n\n<|/ file source=github ext=.ts |>", "  if (lst.some(n => n % 2\
    \ === 0)) return 0\n  let evenSum = lst.filter((n, idx) => idx % 2 === 0).reduce((a,\
    \ b) => a + b, 0)\n  let oddSum = lst.filter((n, idx) => idx % 2 === 1).reduce((a,\
    \ b) => a + b, 0)\n  return evenSum > 0 ? evenSum : oddSum\n}\n\n</code>\nI hope\
    \ this helps you.\n<|/ a |>\n<| a tags=javascript,algorithm |>\n<code>", "  lst.sort((a:\
    \ number, b: number) => a - b);\n  return lst.filter((v, i) => i % 2 === 1).reduce((acc,\
    \ val) => acc + val, 0);\n}\n</code>\n<|/ a tags=javascript,typescript |>\n<|\
    \ c |>\nThank you, this is better than what I had - although it does use sorting\
    \ to get the total sum, since it uses the original array.\n<|/ c |>\n<| c |>\n\
    Oh, that's right, the original array is already sorted. I thought it needed to\
    \ be  updated because I didn't know how long it is.\n<|/ c |>\n<| c |>\nIf you\
    \ sort by some criterion and want to keep an original order you need to either\
    \ copy the original array and sort by some criterion or sort by some criterion\
    \ and then copy the array back.\n<|/ c |>\n<| a tags=javascript,typescript dscore=3\
    \ |>\nYou can use .map and .slice:\n\n<code>\nconst solution = (arr) => arr.map(e\
    \ => arr?.slice().sort((a, b) => b - a))\n                             .filter(e\
    \ => e?.includes(3))\n                             .reduce((a, b) => a + b, 0);\n\
    \nconsole.log(solution([5, 8, 7, 1, 3]));</code>\n\nEDIT:\nThis can be even shorter\
    \ using .reduce and .flatMap:\n\n<code>\nconst solution = (arr) => arr\n     \
    \                    .flatMap(e => e?.slice().sort((a, b) => b - a))\n       \
    \                  .filter(e => e === 3)\n                         .reduce((a,\
    \ b) => a + b, 0);\n\nconsole.log(solution([5, 8, 7, 1, 3]));</code>\n\nThe benefit\
    \ of this is that it does not create a new array (which has performance implications).\
    \ On each iteration a new array is created with the slice() and .sort() methods.\
    \ Also note that the solution works if the array can contain multiple elements\
    \ with different values (3, in this case).\n<|/ a |>\n<| c |>\nI like this one\
    \ the best - it's cleaner and easier to understand. Thank you !\n<|/ c |>\n<|\
    \ c |>\n: I added an additional solution without `.reduce`. I think it might be\
    \ better than using `.reduce`, but please check it out and let me know if you\
    \ find any issues.\n<|/ c |>\n<| a dscore=1 |>\nYou can use the filter function\
    \ and add the value to an array after sorting:\n<code>", "  var sum = 0;\n  for\
    \ (var i = 0; i < lst.length; ++i) {\n    if (i % 2 === 0) {\n      sum += lst[i];\n\
    \    }\n  }\n  return sum;\n}\n", "  let evenArray = lst\n    .filter(item =>\
    \ item % 2 == 0)\n    .filter(item => !lst.includes(item))\n    .sort((a: number,\
    \ b: number) => a - b);\n  let oddArray = lst\n    .filter(item => item % 2 !=\
    \ 0)\n    .filter(item => !lst.includes(item))\n    .sort((a: number, b: number)\
    \ => a - b);\n  let evenSum = 0;\n  let oddSum = 0;\n  for (let item of evenArray)\
    \ {\n    evenSum += item;\n  }\n  for (let item of oddArray) {\n    oddSum +=\
    \ item;\n  }\n  if (evenArray.length > 0 && oddArray.length > 0) {\n    return\
    \ evenSum - oddSum;\n  }\n  return 0;\n}\n", "    let evenSum = 0;\n    for (let\
    \ i = 0; i < lst.length; i++) {\n        if (i % 2 === 0) {\n            evenSum\
    \ += lst[i];\n        }\n    }\n    return evenSum;\n}\n", "  return lst.filter((_,\
    \ i) => i % 2 === 1).reduce((a, b) => a + b, 0)\n}\n", "  const sum = 0;\n  let\
    \ odd = false;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 ===\
    \ 0) {\n      sum += lst[i];\n      odd = !odd;\n    }\n  }\n  return odd ? sum\
    \ - sum % 2 : sum;\n}\n</code>\n<|/ a tags=javascript |>\n<| a dscore=0 |>\nHere\
    \ is a solution without using any Array function\n<code>\nvar sumOddEven = function(arr){\n\
    \    let sum = 0;\n    let odd = true;\n    let even = false;\n    for(let i =\
    \ 0; i < arr.length; i++){\n        if(arr[i] % 2 === 1){\n            if(odd\
    \ === true){\n                sum += arr[i];\n            }\n        }else if(arr[i]\
    \ % 2 === 0){\n            if(even === false){\n                sum += arr[i];\n\
    \            }\n        }\n    }\n    return sum;\n}\n\nsumOddEven([5, 8, 7, 1])\n\
    </code>\n<|/ a tags=javascript |>\n<| a tags=javascript |>\n<code>", "    // Write\
    \ your code in JavaScript (Node.js 8.9.4)\n    return lst.filter((e, i) => i %\
    \ 2 === 1).reduce((acc, val) => acc + val);\n}", "  let evensSum = 0;\n\n  for\
    \ (let i = 0; i < lst.length; i++) {\n    if (i % 2 !== 0) {\n      evensSum +=\
    \ lst[i];\n    }\n  }\n\n  return evensSum;\n}\n", "  const evens = lst\n    .filter((i)\
    \ => i % 2 === 0)\n    .map((i) => i + 1);\n\n  return evens.reduce((a, b) =>\
    \ a + b);\n}\n\nexport { solution as default, repeat };\n\n<|/ file dstars=5 filename=repeating-digits-of-a-number.ts\
    \ |>\n<| c |>\nWhat is your question?\n<|/ c |>\n<| c |>\nThe question was to\
    \ find an elegant way to solve this question using only `reduce` method and `filter`,\
    \ `map` and `forEach` methods. I have mentioned in the question that my solution\
    \ is using `filter` and `map` methods but it is really unclear to me why it's\
    \ better than the solution I proposed.\n<|/ c |>\n<| c |>\nI understand. I added\
    \ a solution that uses only `reduce`. It's elegant because it uses only `reduce`\
    \ and the `filter`, `map` and `forEach` methods. I also added an explanation of\
    \ why your solution is better. That's all there is to it.\n<|/ c |>\n<| c |>\n\
    I have read your answer as elegant way and your comment as explanation why it\
    \ is better. Thank you for the explanation. It was really helpful.\n<|/ c |>\n\
    <| a dscore=0 tags=arrays,algorithm,javascript |>\n<code>\nlet num = [1, 2, 3,\
    \ 4, 5];\nlet newNum = num.reduce((acc, n) => {\n    let arr = [];\n    for (let\
    \ i = 1; i <= 9; i++) {\n        let x = n % i;\n        if (x == 0) arr.push(i);\n\
    \    }\n    \n    let sum = arr.reduce((acc, val) => {\n        acc += val;\n\
    \        return acc;\n    }, 0);\n    \n    acc.push(sum);\n    \n    return acc;\n\
    }, []);\n\nconsole.log(newNum);</code>\n<|/ a |>\n<| c |>\nWhile this code snippet\
    \ may solve the question, [including an explanation](//meta.stackexchange.com/questions/114762/explaining-entirely-code-based-answers)\
    \ really helps to improve the quality of your post. Remember that you are answering\
    \ the question for readers in the future, and those people might not know the\
    \ reasons for your code suggestion. Please also try not to crowd your code with\
    \ explanatory comments, this reduces the readability of both the code and the\
    \ explanations!\n<|/ c |>\n<| a |>\nA solution using reduce, filter and map\n\n\
    <code>\nlet arr = [1, 2, 3, 34, 56, 89, 10, 13];\nlet sum = 0;\nlet ans = arr.reduce((a,c)=>{\n\
    \  let c = Number(c); \n  ", "  let evenNumbers = 0;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (lst[i] % 2 === 0) {\n      evenNumbers += lst[i];\n    }\n \
    \ }\n\n  return evenNumbers;\n}\n", "  let oddSum = 0;\n  for (let i = 0; i <\
    \ lst.length - 1; i++) {\n    if (lst[i] % 2 !== 0) {\n      oddSum += lst[i];\n\
    \    }\n  }\n  return oddSum;\n}\n", "  return lst.reduce((total, value) => {\n\
    \    return total + Math.pow(2, (value%2)*(2))\n  }, 0)\n}\n", "  const res =\
    \ lst.filter((e, i) => i % 2 === 1).reduce((acc, e) => acc + e, 0);\n  return\
    \ lst.filter(e => e % 2 === 0).length && lst.some(e => e % 2 === 0) && res > lst.length\
    \ && res ? res : lst.filter(e => e % 2 === 0).length;\n}\n\nconsole.log(solution([5,\
    \ 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\nconsole.log(solution([30,\
    \ 13, 24, 321]));</code>\n\nIn other words, we check whether there's a odd number\
    \ which exist in the even position (since we need to sum all the odd elements\
    \ from even positions), then we check if there's a non odd number which exist\
    \ in the even position (since we need to check whether there are odd elements\
    \ exist in even positions) then we check whether there's a non odd number which\
    \ exist in the odd position (since we need to check whether there are even elements\
    \ exist in odd positions) then we check if there's at least one odd number exist\
    \ in the array, and return if all these conditions are met in the whole array.\n\
    <|/ a tags=typescript,algorithm,javascript |>\n<| a dscore=0 |>\nMy answer is\
    \ more of a mathematical approach. Since there are more efficient ways to calculate\
    \ this (without using any iterative approach), I'll just give the mathematical\
    \ approach. \nYou can think of it this way: \n\nThere are 4 ways of arranging\
    \ the numbers in your list into pairs: \n\nOne from the beginning of the list\
    \ \nOne from the middle of the list \nOne from the end of the list \nOne in the\
    \ middle of the list.\n\nThink of it as these four ways of arranging the numbers\
    \ in your list into pairs. \nThe only way out of these four ways of arranging\
    \ is to have a list of three numbers that make up an odd number. \nThe number\
    \ which makes up an odd number is just the sum of all its parts (from left to\
    \ right). \n\nSo, to calculate this number, you just need to find the sum of all\
    \ its parts. \nFor example, say we have a list of four numbers. \n{1, 2, 3, 4}\n\
    The sum of the first three numbers is 1 + 2 + 3 = 6. \nThe sum of the last two\
    \ numbers is 4 + 3 = 7. \nSo, the sum of all its parts is 6 + 7 = 31. \nAnd the\
    \ number which makes the sum of all its parts an odd number is 31. \nThe same\
    \ goes for the other numbers in the list. \nYou can think of the first two numbers\
    \ in the list as the \"even\" ones and the last two numbers in the list as the\
    \ \"odd\" ones. \nHere's how you can do it in JavaScript: \n<code>", "    if (lst.length\
    \ === 0) {\n        return 0;\n    }\n\n    let evenSum = 0;\n    let evenCount\
    \ = 0;\n    let oddSum = 0;\n    let oddCount = 0;\n\n    for (let i = 0; i <\
    \ lst.length; i++) {\n        if (lst[i] % 2 === 0) {\n            evenSum +=\
    \ lst[i];\n            evenCount++;\n        } else {\n            oddSum += lst[i];\n\
    \            oddCount++;\n        }\n    }\n\n    return evenSum / evenCount -\
    \ oddSum / oddCount;\n}\n", "  return lst.filter(x => x % 2 === 1).reduce((x,\
    \ y) => x + y, 0);\n}\n\nconst arr1 = [1, 5, 9, 2, 7, 8, 10, 3, 6, 4, 3, 2];\n\
    const arr2 = [1, 5, 9, 2, 7, 8, 10, 3, 6, 4, 3, 2];\nconst arr3 = [1, 5, 9, 2,\
    \ 7, 8, 10, 3, 6, 4, 3, 2];\nconst arr4 = [1, 5, 9, 2, 7, 8, 10, 3, 6, 4, 3, 2];\n\
    \nconsole.log(solution(arr1));\nconsole.log(solution(arr2));\nconsole.log(solution(arr3));\n\
    console.log(solution(arr4));</code>\n<|/ a tags=javascript,functional-programming\
    \ dscore=1 |>\n<| a tags=javascript,functional-programming dscore=1 |>\nThis is\
    \ a more functional programming way of doing it:\n<code>\nconst oddSums = (arr)\
    \ => arr\n.filter(x => x % 2 === 0)\n.reduce((a, b) => a + b, 0);\n</code>\n<|/\
    \ a |>\n<| c |>\nThis is the best solution by far, but I see that there is already\
    \ an answer, so I guess I'll leave this here instead of deleting mine. :)\n<|/\
    \ c |>\n<| c |>\nHa! I thought of another way to solve it using a reduce, but\
    \ yours does it better, thanks :)\n<|/ c |>\n<| c |>\nThis is very unreadable,\
    \ how about you do one line per function call?\n<|/ c |>\n<| a |>\nI hope this\
    \ answer helps you!\n\n<code>", "    let result = 0;\n    for (let i = 0; i <\
    \ lst.length; i += 2) {\n        result += lst[i];\n    }\n    return result;\n\
    }\n", "  const sum = Math.max(...lst)\n  const evenSum = lst.reduce((acc, cur,\
    \ index) => cur % 2 ? acc + cur : acc, 0)\n  return evenSum - sum\n}\n</code>\n\
    <|/ a dscore=2 |>\n<| a |>\nYou could take a single loop and sum the odd values\
    \ while taking the max value from all array elements.\n\n<code>\nvar array = [5,\
    \ 8, 7, 1],\n    max = Math.max(...array),\n    result = 0,\n    i;\n\nfor (i\
    \ = 0; i < array.length; i += 1) {\n    result += max % 2 ? -array[i] : array[i];\n\
    \    max += array[i];\n}\n\nconsole.log(result);</code>\n<|/ a tags=math,javascript,algorithm\
    \ dscore=1 |>\n<| c |>\nThis answer fails, for example for the array `[3, 3, 3,\
    \ 3, 3]`.\n<|/ c |>\n<| c |>\n, please provide a valid use case.\n<|/ c |>\n<|\
    \ a tags=math,javascript,algorithm |>\nWe can achieve this using simple mathematical\
    \ formula like following.\n<code>\nvar result = 0;\nvar maxValue = Math.max(...arr);\n\
    for(let i = 0; i < arr.length; i++) {\n    if(arr[i] % 2 !== 0){\n        result\
    \ += maxValue - arr[i];\n    }\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n\
    I ran this code:\n<code>\nlet list = [5, 5, 3, 2]\nlet max = 0\nfor(let i = 0;\
    \ i < list.length; i++) {\n    let value = list[i]\n    if(value % 2 !== 0) {\n\
    \        max = Math.max(max, value)\n    }\n    console.log(max, value)\n}\n</code>\n\
    and got this in the console:\n<code>\n2 2\n2 3\n5 5\n5 3\n5 2\n</code>\nSo you\
    \ can see that the max value is the last value. If you want the max of the values\
    \ where the value is a multiple of 2, you could do this:\n<code>\nlet list = [5,\
    \ 5, 3, 2]\nlet max = 0\nfor(let i = 0; i < list.length; i++) {\n    let value\
    \ = list[i]\n    if(value % 2 !== 0) {\n        max = Math.max(max, value)\n \
    \   } else {\n        console.log(max, value)\n    }\n}\n</code>\n<|/ a tags=math,javascript,algorithm\
    \ |>\n<| a tags=math,javascript,algorithm dscore=1 |>\nHere is another approach\
    \ using reduce:\n\n<code>\nvar array = [5, 8, 7, 1];\n\nvar odd = array.reduce((acc,\
    \ x) => {\n  return x % 2 ? x + acc : acc;\n}, 0);\n\nconsole.log(odd);</code>\n\
    <|/ a |>\n<| a |>\n<code>", "    let evenSum = 0;\n    let oddSum = 0;\n    for\
    \ (let i = 0; i < lst.length; i++) {\n        if (i % 2 === 0) {\n           \
    \ evenSum += lst[i];\n        } else {\n            oddSum += lst[i];\n      \
    \  }\n    }\n    return oddSum + evenSum;\n}\n", "  return lst.reduce((prev, curr)\
    \ => {\n    return (prev === 0 && curr % 2 === 1) ? prev + curr : prev;\n  },\
    \ 0);\n}\n", "  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if\
    \ (i % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "  if\
    \ (lst.length <= 1) {\n    return 0;\n  }\n  let evenCount = 0;\n  let oddCount\
    \ = 0;\n  let evenSum = 0;\n  let oddSum = 0;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (i % 2 === 0) {\n      evenSum += lst[i];\n      evenCount++;\n\
    \    } else {\n      oddSum += lst[i];\n      oddCount++;\n    }\n  }\n  if (evenCount\
    \ < oddCount) {\n    return evenSum - oddSum;\n  } else {\n    return oddSum -\
    \ evenSum;\n  }\n}", "  if (lst.length === 0) {\n    return 0;\n  }\n\n  let evenSum\
    \ = 0;\n  let oddSum = 0;\n\n  for (let i = 0; i < lst.length; i++) {\n    if\
    \ (i % 2 === 0) {\n      evenSum += lst[i];\n    } else {\n      oddSum += lst[i];\n\
    \    }\n  }\n  return evenSum - oddSum;\n}\n\n</code>\n<|/ a |>\n<| c |>\nYour\
    \ code has three bugs. 1: `console.log(sumOddEven([]));` should return `0`. 2:\
    \ `sumOddEven([5, 8, 7, 1])` returns `6`. 3: `sumOddEven([30, 13, 24, 321])` returns\
    \ `0`, because `odd - even = 0`.\n<|/ c |>\n<| c |>\nYes this would return 0 as\
    \ per your logic. Did you test the code? What should be the expected output?\n\
    <|/ c |>\n<| c |>\nIf one number is even, the result should be the sum of all\
    \ the odd numbers. If one number is odd, the result should be the sum of all the\
    \ even numbers.\n<|/ c |>\n<| a dscore=0 tags=typescript,arrays |>\nThis should\
    \ do it:\n<code>\nlet evenSum = 0;\nlet oddSum = 0;\n\nfor (let i = 0; i < lst.length;\
    \ i++) {\n    if (i % 2 === 0) {\n        evenSum += lst[i];\n    } else {\n \
    \       oddSum += lst[i];\n    }\n}\nreturn evenSum - oddSum;\n</code>\n<|/ a\
    \ |>\n<| c |>\nYou are correct, I have changed my answer. I guess I was too quick\
    \ with my first answer. I also added a snippet to my answer, thanks.\n<|/ c |>\n\
    <| a dscore=0 |>\nThis solution can handle any number of elements.\n<code>", " \
    \ let evenSum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] %\
    \ 2 === 0) {\n      evenSum = evenSum + lst[i];\n    }\n  }\n  return evenSum;\n\
    }\n", "  return arr.reduce((acc, v) => {\n    if (v % 2 === 0) {\n      acc +=\
    \ v\n    }\n    return acc\n  }, 0)\n}\n</code>\n<|/ a |>\n<| c |>\nThis is the\
    \ most compact solution I thought of as well, thank you!\n<|/ c |>\n<| c |>\n\
    What if there were more than 2 elements?\n<|/ c |>\n<| c |>\nIf there are more\
    \ than 2 elements, the idea is the same. Just add a for loop for 2 elements.\n\
    <|/ c |>\n<| c |>\nYeah, I figured it out, but your code is much more concise\
    \ than mine I guess. +1 :)\n<|/ c |>\n<| a tags=javascript |>\n<code>", "  let\
    \ even = 0;\n  let odd = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if\
    \ (i % 2 === 0) {\n      even += lst[i];\n    } else {\n      odd += lst[i];\n\
    \    }\n  }\n  return even + odd;\n}\n", "  return arr.reduce(function (p, c,\
    \ i) {\n    return p + arr[i] % 2 == 0 ? arr[i] : p\n  }, 0)\n}\n", "    let sum\
    \ = 0;\n\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] % 2 ===\
    \ 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n</code>\n\
    <|/ a tags=sum,javascript |>\n<| a dscore=1 tags=sum,javascript |>\n<code>", " \
    \   return lst.filter(function(elem) {\n        return elem % 2 === 0;\n    }).reduce(function(sum,\
    \ num) {\n        return sum + num;\n    }, 0);\n}\n</code>\n<|/ a tags=javascript,ecmascript-6\
    \ |>\n<| a dscore=0 |>\n<code>\nconst solution = (nums) => {\n  const evenIndexes\
    \ = [...Array(nums.length).keys()].filter((value) => value % 2 === 0);\n  const\
    \ oddIndexes = [...Array(nums.length).keys()].filter((value) => value % 2 !==\
    \ 0);\n  const sum = evenIndexes.reduce((total, value) => total + nums[value],\
    \ 0);\n  return oddIndexes.reduce((total, value) => total + nums[value], 0);\n\
    };\n\nconsole.log(solution([5, 8, 7, 1, 3, 6, 5, 8]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\n</code>\n<|/ a tags=javascript,ecmascript-6\
    \ |>\n<| c |>\nWhile this code may answer the question, providing additional context\
    \ regarding how and/or why it solves the problem would improve the answer's long-term\
    \ value.\n<|/ c |>\n<| a dscore=0 tags=javascript,ecmascript-6 |>\n<code>", " \
    \ let sum = 0;\n  for (let i = 0; i < lst.length; i += 1) {\n    if (lst[i] %\
    \ 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "  return\
    \ lst.reduce((acc, val) => {\n    return acc + Number(val & 1);\n  }, 0);\n}\n\
    </code>\n<|/ a tags=algorithm,javascript |>\n<| a dscore=1 |>\nI realise this\
    \ is an old post but I came across a similar problem recently and thought I'd\
    \ share my solution using ES6 arrow functions (with some refactoring for the sake\
    \ of readability). \nI created a function that takes an array and returns the\
    \ sum of all the odd elements:\n<code>", "  return lst.find(x => x % 2 === 1).reduce((acc,\
    \ curr) =>\n    (acc + curr), 0)\n}\n", "  return lst.reduce((sum, val) => sum\
    \ += (val % 2 === 1 ? val : 0));\n}\n</code>\n<|/ a dscore=1 tags=typescript,javascript,reduce\
    \ |>\n<| a dscore=0 tags=typescript,javascript,reduce |>\nYou could use the function\
    \ filter to get the odd values and then apply reduce on the array of odd values.\n\
    <code>\nconst odds = nums.filter(n => n % 2 !== 0);\nconst sumOdds = odds.reduce((accumulator,\
    \ currentValue) => {\n  return accumulator + currentValue;\n});\n</code>\n<|/\
    \ a |>\n<| a dscore=0 tags=typescript,javascript,reduce |>\n<code>\nlet sumOfOdd\
    \ = array.reduce((acc, val) => acc += val % 2 === 0 ? val : 0, 0);\n</code>\n\
    <|/ a |>\n<| a dscore=0 tags=typescript,javascript,reduce |>\nIn typescript and\
    \ javascript, reduce function will also work like this:\n<code>\nlet sumOfOdd\
    \ = array.reduce((acc, val) => acc + val % 2 === 0 ? val : 0);\n</code>\n<|/ a\
    \ |>\n<| a |>\nYou can do something like this.\n\n<code>\nconst arr = [1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, 10];\n\nconst totalOdds = arr.reduce((acc, val) => {\n  return\
    \ acc + val % 2;\n});\n\nconsole.log(totalOdds);</code>\n<|/ a dscore=0 tags=typescript,javascript,reduce\
    \ |>\n<| a dscore=0 |>\n<code>\nvar sumOfOdd = (nums) => {\n  return nums.reduce((acc,\
    \ cur) => acc += cur % 2);\n};\n\nconsole.log(sumOfOdd([5, 8, 7, 1]));\nconsole.log(sumOfOdd([3,\
    \ 3, 3, 3, 3]));\nconsole.log(sumOfOdd([10, 20, 30]));</code>\n<|/ a tags=typescript,javascript,reduce\
    \ |>\n<| a tags=typescript,javascript,reduce |>\nUsing reduce, check whether it's\
    \ a odd or even number and add them in the accumulator:\n\n<code>\nconst arr =\
    \ [5, 8, 7, 1];\n\nconst sum = arr.reduce((acc, cur) => acc += cur % 2 === 0 ?\
    \ cur : 0, 0);\nconsole.log(sum);</code>\n\nIf you want to add only odd numbers,\
    \ you can use this code:\n\n<code>\nconst arr = [5, 8, 7, 1];\n\nconst sum = arr.reduce((acc,\
    \ cur) => acc += cur % 2 !== 0, 0);\nconsole.log(sum);</code>\n<|/ a dscore=0\
    \ |>\n<| a dscore=0 tags=typescript,javascript,reduce |>\n<code>\nconst arr",
  "  // Brute force O(n^2) time\n  let evenSum = 0;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    let temp = lst[i];\n    if (temp % 2 === 0) {\n      evenSum +=\
    \ temp;\n    }\n  }\n  return evenSum;\n}\n", "  const evens = lst.filter((x,\
    \ i) => i % 2 === 0);\n  return evens.reduce((a, b) => a + b, 0);\n}\n", "   \
    \ var total = 0;\n    var evenPos = 0;\n    var oddPos = 0;\n    \n    for (let\
    \ item of lst) {\n        if (item % 2 === 0) {\n            evenPos += item;\n\
    \        } else {\n            oddPos += item;\n        }\n    }\n    \n    for\
    \ (let item of lst) {\n        if (item % 2 === 0) {\n            total += evenPos;\n\
    \        } else {\n            total += oddPos;\n        }\n    }\n    \n    return\
    \ total;\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nIf one number is odd it must\
    \ be even in the next step anyway. So the variable `evenPos` can be removed.\n\
    <|/ c |>\n<| a tags=javascript,algorithm |>\nYou can make your solution much more\
    \ elegant by doing the following:\n\n<code>\nlet nums = [5, 8, 7, 1];\n\nlet evenSum\
    \ = nums.reduce((acc, curr) => {\n  if (curr%2 == 0) return acc + curr;\n  return\
    \ acc + curr/2 + curr/4;\n}, 0);\n\nconsole.log(evenSum);</code>\n\nSince you're\
    \ trying to solve the problem of summing all the odd positioned items from an\
    \ array, let's first take care of the even positioned items.\nThen, we'll take\
    \ care of the odd positioned items individually by using reduce.\n<|/ a dscore=1\
    \ |>\n<| c |>\nThis doesn't work if you have an element that is odd but does not\
    \ have an even counterpart.\n<|/ c |>\n<| c |>\nI misread the question as summing\
    \ all the elements that are even positioned, not all the elements that are odd\
    \ positioned.\n<|/ c |>\n<| a dscore=1 |>\nYou want to sum up the even numbers\
    \ until you see an odd number. Then you want to sum up the odd numbers until you\
    \ see an even number. Then you simply add them up.\n\n<code>", "  \n  let result\
    \ = lst.reduce((acc, curr) => curr%2 ? acc + curr : acc, 0);\n  return result;\n\
    }\n", "    let odd = [];\n    for(let i = 0; i < lst.length; i++){\n        if(i\
    \ % 2 == 1){\n            odd.push(lst[i]);\n        }\n    }\n    let even =\
    \ lst.filter((el, i) => {\n        return i % 2 !== 0;\n    });\n    return odd.reduce((a,b)=>{\n\
    \        return a + b\n    },0) + even.reduce((a,b)=>{\n        return a + b\n\
    \    },0)\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=typescript,function,javascript\
    \ |>\n<code>\nvar arr = [1, 2, 3, 4, 5, 6, 8];", "    return lst.filter(x => x\
    \ % 2 === 1).reduce((acc, x) => acc + x, 0);\n}\n", "    let sum = 0;\n    for\
    \ (let i = 0, len = lst.length; i < len; i += 1) {\n        if (lst[i] % 2 ===\
    \ 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n</code>\n\
    <|/ a tags=javascript,typescript dscore=2 |>\n<| a tags=javascript,typescript\
    \ |>\n<code>", "  let result = lst.reduce((prev, curr, i) => {\n    if (i % 2\
    \ === 1) return prev + curr;\n    return prev;\n  }, 0);\n  return result % 2;\n\
    }\n", "  lst.sort((a: number, b: number) => a - b);\n  let evenSum = 0;\n  let\
    \ oddSum = 0;\n\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0)\
    \ {\n      evenSum += lst[i];\n    } else {\n      oddSum += lst[i];\n    }\n\
    \  }\n  return oddSum - evenSum;\n}\n", "\tlet evenSum = 0;\n\tlst.forEach((item,\
    \ index) => {\n\t\tif (index % 2 === 0) {\n\t\t\tevenSum += item;\n\t\t}\n\t});\n\
    \treturn evenSum;\n}\n", "  return lst.filter(e => e % 2 === 1).reduce((a, b)\
    \ => a + b)\n}\n", "  return lst.find((e, i, arr) => i % 2 === 0).reduce((acc,\
    \ val) => acc + val);\n}\n", "  let sum = 0;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (i % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\n", "  if(lst.length <= 0) {\n    return 0;\n  }\n\n  if(lst.length % 2 ===\
    \ 0) {\n    return sum(lst, even);\n  }\n\n  return sum(lst, odd);\n}\n", "  if\
    \ (lst == null || lst.length < 2) {\n    return 0;\n  }\n  const evenSum = evenSumHelper(lst);\n\
    \  if (evenSum == 0) {\n    return 0;\n  }\n  return evenSum - evenSumHelper(evenSum\
    \ + 1, lst);\n}\n", "  if (lst.length < 2) return 0\n  let odd_count = 0\n  let\
    \ even_count = 0\n  lst.forEach((x, i, arr) => {\n    if (i % 2 === 0) even_count++\n\
    \    if (i % 2 === 1) odd_count++\n  })\n  return odd_count + even_count\n}\n",
  "  if (lst.length == 0) {\n    return 0;\n  }\n\n  let sum = 0;\n  let evenSum =\
    \ 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 == 0) {\n      sum\
    \ += lst[i];\n    } else {\n      evenSum += lst[i];\n    }\n  }\n\n  return evenSum\
    \ > sum ? evenSum : sum;\n}\n\n</code>\n<|/ a tags=javascript,functional-programming\
    \ |>\n<| c |>\nThank you so much! Your code works great. I added a return 0 if\
    \ evenSum == sum and it works great!\n<|/ c |>\n<| c |>\nNice solution! I'm wondering\
    \ if you could solve the problem in a non-recursive way.\n<|/ c |>\n<| a |>\n\
    You can use the function reduce() which takes a callback function as argument.\
    \ Then in the callback you can check if the current element is odd and if so,\
    \ add the current element to the result or if not, add it to the accumulator and\
    \ update the accumulator:\n\n<code>", "  let evenSum = 0;\n  for (let i = 0; i\
    \ < lst.length; i++) {\n    if (lst[i] % 2 === 0) evenSum += lst[i];\n  }\n  return\
    \ evenSum;\n}\n</code>\n<|/ a |>\n<| c |>\nGreat explanation, thanks. Can you\
    \ please give me more information about how to solve it? I am having trouble understanding\
    \ the logic of it.\n<|/ c |>\n<| c |>\nI think I might get it now. I am now trying\
    \ to figure out why it works. Thanks again for your help!\n<|/ c |>\n<| c |>\n\
    Thanks again for you help again. I think I understand the logic. Can you also\
    \ explain this bit more?\n`let evenSum = 0;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (lst[i] % 2 === 0) evenSum += lst[i];\n  }\n  return evenSum;`\n\
    <|/ c |>\n<| c |>\nThat will basically loop through the array and check to see\
    \ if the array item is an even number, if it is even, add it to the `evenSum`\
    \ variable, which will then be returned in the end.\n<|/ c |>\n<| a tags=javascript\
    \ dscore=0 |>\nThis solution has a O(n) time complexity and O(1) space complexity.\n\
    The idea is to count the number of even numbers in the array and then iterate\
    \ over the array again to sum the odd numbers.\n<code>", "  let sum = 0;\n  let\
    \ len = lst.length;\n  for (let i = 0; i < len; i += 1) {\n    if (lst[i / 2]\
    \ % 2 === 0) sum += lst[i];\n  }\n  return sum;\n}\n", "    const result: number\
    \ = 0;\n    let i = 0;\n    while (i < lst.length && lst[i] % 2 !== 0) {\n   \
    \     result += lst[i++];\n    }\n    return result;\n}\n", "  return lst.filter(x\
    \ => x % 2 === 0).reduce((a,b) => a + b);\n}\n", "  lst.sort((a: number, b: number)\
    \ => a - b);\n  let sum = 0;\n  for (let i = 1; i < lst.length; i++) {\n    if\
    \ (lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}", " \
    \   return lst.reduce((acc, val) => val % 2 ? acc + val : acc, 0)\n}\n</code>\n\
    <|/ a tags=javascript,typescript dscore=0 |>\n<| c |>\nThe `reduce` method takes\
    \ a callback function as an argument (second argument), which is invoked for each\
    \ element of the array (first argument). See the [MDN docs](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce).\n\
    <|/ c |>\n<| c |>\nOh I see... I was confused because I thought the callback function\
    \ was being applied to an individual element instead of the whole array. I thought\
    \ it was being applied to each element of the array... I guess that's what reduce\
    \ does. Thank you for the clarification!\n<|/ c |>\n<| a dscore=0 tags=javascript,typescript\
    \ |>\nThis works but will require the code to be changed in the future. \n<code>",
  "  // Your code here!\n  let totalSum = lst.reduce((sum, value) => {\n    if (value\
    \ % 2 !== 0) {\n      return sum\n    }\n    return sum + value\n  }, 0)\n  return\
    \ totalSum\n}\n\nexport class OddNumbers\n{\n  static Main()\n  {\n    TestRunner.RunTest(new\
    \ OddNumbers());\n  }\n\n  public TestNumbers()\n  {\n    Assert.AreEqual(17,\
    \ solution(new int[] { 5, 8, 7, 1 }));\n    Assert.AreEqual(0, solution(new int[]\
    \ { 3, 3, 3, 3, 3 }));\n    Assert.AreEqual(1, solution(new int[] { 30, 13, 24,\
    \ 321 }));\n  }\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis answer doesn't answer\
    \ the question at all - how does it do that? As a side note, `reduce` is already\
    \ available in C# and doesn't require the [MoreLinq](https://www.nuget.org/packages/morelinq/)\
    \ package.\n<|/ c |>\n<| c |>\nThis doesn't look like C#\n<|/ c |>\n<| c |>\n\
    , Yes, I know.  It is written in F# and I used it here because it is more suited\
    \ to F# than C#.  However, since this question was asked before C# was officially\
    \ released, I felt it was appropriate to answer in F#, since it did answer the\
    \ question.  Also, I found this question useful, and so I upvoted it.  I hope\
    \ it helps other readers.\n<|/ c |>\n<| c |>\nIt did answer my question as stated.\
    \ The question is how to do this in c# since it is the language I am using.\n\
    <|/ c |>\n<| a tags=c# dscore=0 |>\n<code>\n    static int Solution(int A[], int\
    \ K)\n    {\n        int sum = 0;\n        for(int i = 0; i < A.Length; i++)\n\
    \        {\n            int a = A[i];\n            int t = 1;\n            for(int\
    \ j = 0; j < a.Length; j++)\n            {\n                if(j == K && a[j]\
    \ % 2 != 0)\n                {\n                    t = t;\n                }\n\
    \                else\n                {\n                    t = t * a + a[j];\n\
    \                }\n            }\n            sum += t;\n        }\n        return\
    \ sum;\n    }\n</code>\n<|/ a |>\n<| a dscore=0 |>\n<code>\npublic int Solution(int\
    \ A[], int K)\n{\n    int sum = 0;\n    for (int i = 0; i < A.Length; i++)\n \
    \   {\n        if (A[i] % 2 != 0 && i < K)\n        {\n            sum += A[i];\n\
    \        }", "    let sum = 0;\n    for (let i = 0; i < lst.length; ++i) {\n \
    \       if (i % 2 === 0) {\n            sum += lst[i];\n        }\n    }\n   \
    \ return sum;\n}\n", "  const evenSum = lst.filter(x => x % 2 === 0).reduce((total,\
    \ cur) => total + cur, 0)\n  return evenSum + lst.filter(x => x % 2 === 1).reduce((total,\
    \ cur) => total + cur, 0)\n}\n", "  if (lst.length === 0) return 0\n\n  let sum\
    \ = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 === 0)\
    \ {\n      sum += lst[i]\n    }\n  }\n  return sum\n}\n", "  // write your code\
    \ in JavaScript (Node.js 8.9.4)\n  let sum = 0\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (i % 2 !== 0) {\n      sum += lst[i]\n    }\n  }\n  return sum\n\
    }\n\n<|/ file source=gitlab filename=array-of-odd-numbers-iii.js |>\n<| c |>\n\
    I'm voting to close this question as off-topic because OP just wants to code a\
    \ solution to a problem, not ask a question\n<|/ c |>\n<| c |>\nI didn't ask a\
    \ question. I'm just trying to code a solution to the problem.\n<|/ c |>\n<| c\
    \ |>\nThe above code does answer the question.\n<|/ c |>\n<| c |>\nIt doesn't.\
    \ The question was why my code wasn't working.\n<|/ c |>\n<| c |>\n\"*OP just\
    \ wants to code a solution to a problem, not ask a question*\" - No, you just\
    \ gave a solution to the problem. What's the question now?\n<|/ c |>\n<| a tags=arrays,javascript\
    \ |>\n<code>", "    return lst.reduce((acc, value) => (value > 0 && value % 2\
    \ === 1) ? acc + value : acc, 0);\n}\n", "  return lst.reduce((acc, cur, i, arr)\
    \ => {\n    if (i % 2 === 0) return acc + cur;\n    return acc;\n  }, 0);\n}\n\
    </code>\n<|/ a |>\n<| a dscore=0 tags=recursion,arrays,javascript,algorithm |>\n\
    <code>", "\tlet evenOdd: number = 0;\n\tfor (let i = 0; i < lst.length; i++) {\n\
    \t\tif (lst[i] % 2 === 0) {\n\t\t\tevenOdd += lst[i];\n\t\t}\n\t}\n\treturn evenOdd;\n\
    }\n", "  const evenSum = lst.filter((v, i) => i % 2 === 0).reduce((x, y) => x\
    \ + y, 0);\n  return evenSum === lst.length ? 0 : (evenSum - lst.indexOf(evenSum)\
    \ + 1);\n}\n\nconsole.log(solution([1, 2]));</code>\n\nTo get a solution for all\
    \ the list elements:\n\n<code>", "    return lst.filter((value, i) => i % 2 ===\
    \ 1).reduce((total, cur) => total + cur, 0);\n}\n</code>\n<|/ a |>\n<| a dscore=1\
    \ tags=javascript,arrays,typescript |>\nJust use the filter method with some math\
    \ and reduce method.\n\n<code>\nconst arr = [1,2,3,4,5,6,7,8,9,10];\nconst odd_even\
    \ = arr.filter(value => value%2===0).reduce((sum,val)=>{\n  return sum+val;\n\
    }, 0);\nconsole.log(odd_even);</code>\n<|/ a |>\n<| a dscore=1 |>\n<code>\nlet\
    \ arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n\nlet sumOddEven = (num) => {\n  return\
    \ num.filter(value => value % 2 === 1).reduce((a, b) => a + b, 0);\n}\nconsole.log(sumOddEven(arr));</code>\n\
    <|/ a tags=javascript,arrays,typescript |>\n<| a |>\nIf your project allows you\
    \ to use ES6 and Typescript (that is the only reason I posted this answer, but\
    \ other answers are already accepted), then you can try this:\n\n<code>\nconst\
    \ arr = [1,2,3,4,5,6,7,8,9,10];\n\nconst sumOddEven = arr => arr\n    .filter(value\
    \ => value % 2 === 1)\n    .reduce((result, current) => {\n      return result\
    \ + current;\n    }, 0);\n\nconsole.log(sumOddEven(arr));</code>\n\nAs you can\
    \ see here, it is actually more readable, more concise and more efficient, since\
    \ you do not need to use a temp variable or additional for loop.\n<|/ a dscore=0\
    \ tags=javascript,arrays,typescript |>\n<| a |>\n<code>\nvar arr = [1,2,3,4,5,6,7,8,9,10];\n\
    var sum = 0;\nfor(var i=0; i<arr.length; i++) {\n    if(arr[i]%2 === 0) {\n  \
    \      sum += arr[i];\n    }\n}\n\nconsole.log(sum);</code>\n\nThis works. You\
    \ could also use map, but you get the wrong answer for [10, 9, 20].\n<|/ a dscore=0\
    \ tags=javascript,arrays,typescript |>\n<| a |>\n<code>", "    var even = 0;\n\
    \    var odd = 0;\n    for(var i = 0; i < lst.length; i++){\n        if(lst[i]\
    \ % 2 === 0){\n            even += lst[i];\n        } else {\n            odd\
    \ += lst[i];\n        }\n    }\n    return even + odd;\n}\n</code>\nThis way you\
    \ avoid creating more variables than you need, thus improving memory consumption.\n\
    <|/ a |>\n<| c |>\nYou don't need even and odd variables. Just `return lst.reduce((acc,\
    \ x) => x + acc, 0);`\n<|/ c |>\n<| c |>\nYou also don't need for loop. `reduce`\
    \ method will take care of it\n<|/ c |>\n<| c |>\n: I actually didn't.  Thanks.\
    \  I updated my answer with your suggestion.  I'm still new to JS and haven't\
    \ come across reduce before.  Thanks.\n<|/ c |>\n<| c |>\n, thanks I was doing\
    \ that, but I wanted to be explicit about the process and just show the reduce.\n\
    <|/ c |>\n<| c |>\n, thanks, this helped me understand reduce a little better.\n\
    <|/ c |>\n<| a tags=function,javascript |>\n<code>\nvar sumOdd = function (array)\
    \ {\n    var sum = 0;\n    for(var i=0;i<array.length;i++) {\n        if(array[i]%2==1)\
    \ sum += array[i];\n    }\n    return sum;\n};\n</code>\n<|/ a dscore=1 |>\n<|\
    \ a dscore=1 |>\n<code>", "  let even = 0;\n  let odd = 0;\n  for (let i = 0;\
    \ i < lst.length; i++) {\n    if (i % 2 === 0) {\n      even += lst[i];\n    }\
    \ else {\n      odd += lst[i];\n    }\n  }\n  return even + odd;\n}\n", "  return\
    \ lst.filter((val, index) => index % 2 === 1).reduce((acc, val) => acc + val)\n\
    }\n", "  const evens = lst.filter((item, idx) => idx % 2 === 0);\n  const sumOdd\
    \ = evens.reduce((acc, val) => {\n    return acc + val;\n  }, 0);\n\n  return\
    \ sumOdd;\n}\n", "  return lst.reduce((a, b) => {\n    return a + b - a % b;\n\
    \  });\n}\n", "  if (lst.length <= 0) {\n    return 0\n  }\n  for (let i = 0;\
    \ i < lst.length; i += 2) {\n    if (lst[i] % 2 === 0) {\n      return lst[i]\n\
    \    }\n  }\n}\n", "  if (lst && lst.length) {\n    let evenSum = 0;\n    for\
    \ (let i = 0; i < lst.length; ++i) {\n      if (i % 2 === 1) {\n        evenSum\
    \ += lst[i];\n      }\n    }\n    return evenSum;\n  }\n  return 0;\n}\n", " \
    \ if (lst.length <= 0) {\n    return 0;\n  }\n\n  let evensum = 0;\n  for (let\
    \ i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      evensum += lst[i];\n\
    \    }\n  }\n  return evensum;\n}\n", "  const evenIndex = lst.findIndex(\n  \
    \  n => n % 2 === 0\n  );\n  if (evenIndex > -1) {\n    return lst.reduce((acc,\
    \ curr) => {\n      return acc + curr;\n    }, 0);\n  }\n  return -1;\n}\n", " \
    \ return lst.sort((a, b) => {\n    const c = Math.abs(b) - Math.abs(a);\n    return\
    \ c === 1 ? (Math.abs(a) - Math.abs(b)) : c;\n  }).find((x) => x % 2 === 1);\n\
    }\n", "    let sum = 0;\n    lst.forEach((val, index) => {\n        if (index\
    \ % 2 !== 0) {\n            sum += val;\n        }\n    });\n    return sum;\n\
    }", "  if (lst.length === 0) {\n    return 0;\n  }\n  const oddElements = [];\n\
    \  const evenElements = [];\n  lst.forEach((item, index) => {\n    if (index %\
    \ 2 === 0) {\n      evenElements.push(item);\n    } else {\n      oddElements.push(item);\n\
    \    }\n  });\n  const result = oddElements.reduce((acc, cur) => acc + cur);\n\
    \  return evenElements.reduce((acc, cur) => acc + cur, result);\n}\n\nconst tests\
    \ = [\n  {\n    description: \"Empty List\",\n    givenList: [],\n    expected:\
    \ 0,\n  },\n  {\n    description: \"Small List\",\n    givenList: [1],\n    expected:\
    \ 1,\n  },\n  {\n    description: \"Big List\",\n    givenList: [2, 3, 4, 5],\n\
    \    expected: 3,\n  },\n];\n\ndescribe(\"Problem 9\", () => {\n  tests.forEach((test)\
    \ => {\n    const input = test.givenList;\n    const expected = test.expected;\n\
    \    const actual = solution(input);\n    it(test.description, () => {\n     \
    \ expect(actual).toEqual(expected);\n    });\n  });\n});\n", "    // Your code\
    \ here\n    return 0\n}", "  let evenNumbers = 0;\n  let oddNumbers = 0;\n  for\
    \ (let num of lst) {\n    if (num % 2 === 0) {\n      evenNumbers += num;\n  \
    \  } else {\n      oddNumbers += num;\n    }\n  }\n  return oddNumbers;\n}\n",
  "  var sum = 0;\n  for (var i = 0; i < lst.length; i++) {\n    if (i % 2 == 1) {\n\
    \      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "  return lst.reduce((prev,\
    \ curr) => prev + Math.ceil(curr % 2), 0);\n}\n", "  return lst.filter((_, i)\
    \ => i % 2 === 0).reduce((a, b) => a + b, 0);\n}\n\nexport { solution };\n", " \
    \ let sum = 0;\n\n  for (let i = 0; i < lst.length; ++i) {\n    if (i % 2 ===\
    \ 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n", "    let evenSum\
    \ = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] % 2 !== 0){\n\
    \            evenSum += lst[i];\n        }\n    }\n    return evenSum;\n}\n",
  "  return lst.filter(x => x % 2 === 1).reduce((sum, val) => sum + val);\n}\n", " \
    \ var even = 0;\n  var odd = 0;\n  for (var i = 0; i < lst.length; i++) {\n  \
    \  if (lst[i] % 2 === 0) {\n      even += lst[i];\n    } else {\n      odd +=\
    \ lst[i];\n    }\n  }\n  return even + odd;\n}\n", "  return arr => lst.filter(i\
    \ => i % 2 === 1).reduce((acc, val) => acc + val, 0);\n}\n", "    var sum = 0;\n\
    \    var evenCount = 0;\n    var oddCount = 0;\n    var even = lst[0];\n    for(var\
    \ i = 1; i < lst.length; i++) {\n        if(lst[i] % 2 == 0) {\n            evenCount\
    \ += 1;\n            if(lst[i] > even) {\n                sum += even;\n     \
    \           even = lst[i];\n            }\n        } else {\n            oddCount\
    \ += 1;\n            if(lst[i] > even) {\n                sum += even;\n     \
    \           even = lst[i];\n            }\n        }\n    }\n    sum += even;\n\
    \    return sum;\n}\n</code>\n<|/ a tags=javascript |>\n<| a dscore=0 tags=javascript\
    \ |>\n<code>\nvar sumOdd = function(array){\n    var total = 0;\n    for(var i\
    \ = 0; i < array.length; i++){\n        if(i % 2 == 0){\n            total +=\
    \ array[i];\n        }\n    }\n    return total;\n};\n</code>\n<|/ a |>\n<| c\
    \ |>\nCode dumps do not make for good answers. You should explain *how* and *why*\
    \ this solves their problem. I recommend reading, \"[How do I write a good answer?\"\
    ](http://stackoverflow.com/help/how-to-answer)\n<|/ c |>\n<| a tags=javascript\
    \ |>\nThis code sums all numbers in even position and subtracts those from odd\
    \ position in an array. \n\n<code>", "    return lst.filter(x => x % 2 === 1).reduce((a,\
    \ b) => a + b, 0);\n}\n", "    return lst.filter((num, idx) => idx % 2 == 1).reduce((a,\
    \ b) => a + b)\n}\n", "  return lst.findIndex(item => item % 2 === 0)\n    ? lst.find(item\
    \ => item % 2 === 1)\n    : 0;\n}\n", "  const sum = 0;\n  for (let i = 0; i <\
    \ lst.length; i += 2) {\n    sum += lst[i];\n  }\n  return sum;\n}\n", "    return\
    \ lst.filter(function(n: number): boolean {\n        return n % 2 !== 0;\n   \
    \ }).reduce(function(acc: number, curr: number): number {\n        return acc\
    \ + curr;\n    }, 0);\n}\n", "  let sum = 0;\n  lst.forEach((item, index) => {\n\
    \    if (index % 2 === 0) {\n      sum += item;\n    }\n  });\n  return sum;\n\
    }\n</code>\n<|/ a tags=typescript,javascript,arrays |>\n<| a |>\n<code>\nconst\
    \ input = [1, 2, 3, 4, 5];\n\nlet sum = input.reduce((sum, currentValue) => \n\
    \    sum += currentValue,\n    0\n);\n\nconsole.log(sum);\n</code>\n<|/ a tags=typescript,javascript,arrays\
    \ dscore=2 |>\n<| a tags=typescript,javascript,arrays |>\n<code>\nconst solution\
    \ = (input) => {\n    let total = 0;\n    let oddSum = 0;\n    for (let i = 0;\
    \ i < input.length; i++) {\n        if (i === 0 || input[i] % 2 !== 0) {\n   \
    \         total += input[i];\n        } else {\n            oddSum += input[i];\n\
    \        }\n    }\n    return oddSum;\n}\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\nYou can use the array reduce method and the modulus operator to achieve\
    \ this.\n<code>\nconst solution = (arr) => {\n    const sum = arr.reduce((acc,\
    \ val) => {\n        return acc + (val % 2 ? val : 0);\n    }, 0);\n    return\
    \ sum;\n}\n</code>\n<|/ a tags=typescript,javascript,arrays |>\n<| a dscore=1\
    \ |>\n<code>\nconst solution = (arr) => {\n  let sum = 0;\n  for(var i = 0; i\
    \ < arr.length; i++){\n    if(i % 2 === 0){\n      sum += arr[i];\n    }\n  }\n\
    \  return sum;\n}\n</code>\n<|/ a tags=typescript,javascript,arrays |>\n<| a tags=typescript,javascript,arrays\
    \ |>\nUsing Array.prototype.reduce and ES6 syntax.\n<code>", "  lst.sort((a, b)\
    \ => a - b)\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i\
    \ % 2 !== 0) {\n      sum += lst[i]\n    }\n  }\n  return sum\n}\n\nconst test1\
    \ = () => solution([5, 8, 7, 1]) === 12\nconst test2 = () => solution([3, 3, 3,\
    \ 3, 3]) === 9\nconst test3 = () => solution([30, 13, 24, 321]) === 0\nconst test4\
    \ = () => solution([5, 8, 7, 3, 1]) === 12\nconst test5 = () => solution([5, 8,\
    \ 7, 3, 8, 7, 3, 1, 1]) === 12\nconst test6 = () => solution([5, 8, 7, 3, 8])\
    \ === 0\n\nexport { solution, test1, test2, test3, test4, test5, test6 }\n\n<|/\
    \ file filename=sumOddsOnEvens.ts ext=.ts source=gitlab |>\n<| c |>\nYour solution\
    \ works because you are adding elements together before sorting the array. If\
    \ you change `sum+=lst[i]` to `sum += Math.abs(lst[i] - lst[i >> 1])` it won't\
    \ work as expected.\n<|/ c |>\n<| c |>\nI think I got it. Sort the list first\
    \ and then add the elements that don't have an even index starting from the middle\
    \ of the list until we reach the middle. If we ever reach the middle of the list,\
    \ that means we've added every number to the sum and can add it to the sum.\n\
    <|/ c |>\n<| c |>\nI see, you're right, your code is correct. I just used `sort`\
    \ here to simplify the code. My code doesn't work unless I sort the list. So in\
    \ my solution I sort the list first, and then only iterate over each element once.\
    \ That's why I sort it first.\n<|/ c |>\n<| c |>\nAh right, I just didn't see\
    \ it you were sorting the array first. You are also right that it only needs to\
    \ be sorted once. I was thinking of a different problem. Sorry about that.\n<|/\
    \ c |>\n<| a tags=algorithm,javascript dscore=0 |>\n<code>", "  lst.sort((a, b)\
    \ => a - b)\n\n  let sum: number = -Infinity\n  lst.forEach((val, i, arr) => {\n\
    \    if (i % 2 === 0) {\n      sum += val\n    }\n  })\n\n  return sum\n}\n",
  "  if (lst.length < 2) return 0\n\n  let evenSum = 0\n  let oddSum = 0\n\n  for\
    \ (let i = 0; i < lst.length; i++) {\n    if (i % 2 == 0) evenSum += lst[i]\n\
    \    else oddSum += lst[i]\n  }\n  return evenSum + oddSum\n}\n</code>\n<|/ a\
    \ |>\n<| c |>\nThis answer is missing its educational explanation.\n<|/ c |>\n\
    <| a tags=javascript,algorithm,arrays,performance |>\nThe code below is for Python\n\
    <code>\ndef solution(arr):\n    oddSum = 0\n    evenSum = 0\n    for i in range(len(arr)):\n\
    \        if i % 2 != 0:\n            oddSum += arr[i]\n        else:\n       \
    \     evenSum += arr[i]\n    return oddSum + evenSum\n\nif __name__ == '__main__':\n\
    \    print(solution([5, 8, 7, 1]))\n</code>\n<|/ a dscore=1 |>\n<| a |>\n<code>\n\
    const solution = (arr) => {\n    let sumEven = 0; let sumOdd = 0;\n    for(let\
    \ i = 0; i < arr.length; i++){\n        if(arr[i] % 2 === 0){\n            sumEven\
    \ = sumEven + arr[i];\n        }\n        else{\n            sumOdd = sumOdd +\
    \ arr[i];\n        }\n    }\n    return sumEven + sumOdd;\n};\n\nconsole.log(solution([5,\
    \ 8, 7, 1]));\n</code>\n<|/ a tags=javascript,algorithm,arrays,performance dscore=0\
    \ |>\n<| c |>\nWhile this code may solve the question, [including an explanation](https://meta.stackexchange.com/q/114762)\
    \ of how and why this solves the problem would really help to improve the quality\
    \ of your post, and probably result in more up-votes. Remember that you are answering\
    \ the question for readers in the future, not just the person asking now. Please\
    \ [edit] your answer to add explanations and give an indication of what limitations\
    \ and assumptions apply.\n<|/ c |>\n<| a dscore=0 tags=javascript,algorithm,arrays,performance\
    \ |>\nThe fastest code for this would be:\n\n<code>", "  const len = lst.length;\n\
    \  if (len === 0) return 0;\n  let sum = 0;\n  for (let i = 0; i < len; i++) {\n\
    \    const num = lst[i];\n    if (num % 2 === 1) sum += num;\n  }\n  return sum;\n\
    }\n", "  let oddsum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i\
    \ % 2 == 1) {\n      oddsum += lst[i];\n    }\n  }\n  return oddsum;\n}\n", " \
    \ if (lst.length < 2) return 0;\n  let evenSum = 0;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    if (i % 2 === 0) {\n      evenSum += lst[i];\n    }\n  }\n  return\
    \ evenSum;\n}\n", "  let sumOddIndex = 0;\n  for (let i = 0; i < lst.length; i++)\
    \ {\n    if (lst[i] % 2 === 1) {\n      sumOddIndex += i + 1;\n    }\n  }\n  return\
    \ lst.slice(0, sumOddIndex).reduce((sum, num) => sum + num, 0);\n}\n", "    //\
    \ Base case\n    if (lst.length === 0) {\n        return 0\n    }\n\n    // Recursive\
    \ case\n    const oddEvenIndex = (index: number) => {\n        if (index === 0\
    \ || index === lst.length - 1) {\n            return index\n        }\n      \
    \  return index + 1\n    }\n\n    const nums: number[] = []\n\n    lst.reduce((prev,\
    \ cur) => {\n        nums[prev] = (prev & 1) === 0 ? cur : prev + cur\n      \
    \  return prev + 1\n    }, 0) // start from index 0\n\n    const result = nums.reduce((prev,\
    \ cur) => {\n        return prev + nums[cur] // sum from index + 1\n    }, 0)\n\
    \n    return result\n}\n", "  let evenSum = 0;\n  lst.forEach((val, index) =>\
    \ {\n    if (index % 2 === 0) {\n      evenSum += val;\n    }\n  });\n  return\
    \ evenSum;\n}\n", "  return lst.filter(function (el, i) { return i % 2 === 1;\
    \ })\n    .reduce(function (acc, val) { return acc + val; });\n}\n", "  let sum\
    \ = 0;\n  for (let i = 0; i < lst.length; i += 2) {\n    sum += lst[i];\n  }\n\
    \  return sum;\n}\n</code>\n<|/ a tags=javascript,typescript |>\n<| a dscore=1\
    \ |>\n<code>\nvar arr = [5, 8, 7, 1, 10, 10, 10, 11, 20, 102, 9, 33, 15, 19, 100];\n\
    \    ", "    return lst.filter(x => x % 2 === 1).reduce((a, b) => a + b, 0);\n\
    }\n</code>\n<|/ a dscore=5 |>\n<| c |>\nwhy not use `reduceRight` instead of `reduce`\
    \ ?\n<|/ c |>\n<| a tags=arrays,javascript,algorithm,math |>\nHere you go:\n\n\
    <code>", "  let even: number = 0;\n  for (let i = 2; i <= lst.length; i++) {\n\
    \    if (lst[i] % 2 == 0) {\n      even += lst[i];\n    }\n  }\n\n  return even;\n\
    }\n", "  // write your code in JavaScript (Node.js 8.9.4)\n  const evenPos = lst.filter((n,\
    \ index) => n % 2 === 0).reduce((acc, cur, index, arr) => {\n    return acc +\
    \ ((index + 1) % 2 === 0 ? cur : 0)\n  }, 0)\n  return evenPos === 0 ? 0 : evenPos\n\
    }\n", "  lst = lst.sort((a, b) => a - b)\n  let evenSum = 0\n  let oddSum = 0\n\
    \  for (let i = 0, len = lst.length; i < len; i++) {\n    if (i % 2 === 0) {\n\
    \      evenSum += lst[i]\n    } else {\n      oddSum += lst[i]\n    }\n  }\n \
    \ return evenSum + oddSum\n}\n", "  let evenSum = 0;\n  let oddSum = 0;\n  for\
    \ (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      evenSum +=\
    \ lst[i];\n    } else {\n      oddSum += lst[i];\n    }\n  }\n  return oddSum;\n\
    }\n</code>\n<|/ a |>\n<| c |>\nThis is the correct answer. It doesn't require\
    \ looping the array\n<|/ c |>\n<| a dscore=5 |>\nThis is how you can solve this\
    \ problem in O(N)\n<code>", "    // Write your code in JavaScript (Node.js 8.9.4)\n\
    \    \n    return lst.filter((v) => v % 2 === 0).reduce((prev, v) => prev + v,\
    \ 0);\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3,\
    \ 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));</code>\n<|/ a tags=javascript\
    \ |>\n<| a dscore=1 |>\nYou can use .reduce() on array:\n\n<code>\nconst input\
    \ = [5, 8, 7, 1];\n\nconst output = input.reduce((acc, val) => {\n  if (val &\
    \ 1) {\n    return acc + val;\n  }\n  return acc;\n}, 0);\n\nconsole.log(output);</code>\n\
    <|/ a tags=javascript |>\n<| a dscore=0 tags=javascript |>\n<code>\nconst solution\
    \ = arr => arr.reduce((a, b) => a + (b === 0 ? b : 1), 0);\nconsole.log(solution([5,\
    \ 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\nconsole.log(solution([30,\
    \ 13, 24, 321]));</code>\n<|/ a |>\n<| a tags=javascript |>\n<code>", "  let evenSum\
    \ = 0;\n  let oddSum = 0;\n\n  for (let i = 0; i < lst.length; i++) {\n    if\
    \ (lst[i] % 2 === 0) {\n      evenSum += lst[i];\n    } else {\n      oddSum +=\
    \ lst[i];\n    }\n  }\n\n  return oddSum;\n}\n</code>\n<|/ a dscore=0 tags=arrays,javascript\
    \ |>\n<| a |>\nI did this in two lines. You can optimize your solution by not\
    \ using 2 loops.\n\n<code>\nvar myArray = [1, 4, 8, 5, 6, 2];\n\nvar evenSum =\
    \ myArray.reduce(function(acc, curr){\n  return acc += curr;\n}, 0);\n\nconsole.log(evenSum)</code>\n\
    <|/ a tags=arrays,javascript dscore=0 |>\n<| a tags=arrays,javascript |>\n<code>",
  "  if (lst.length < 2)\n    return 0\n  let odd: number[] = []\n  for (let i = 0;\
    \ i < lst.length; i++)\n    if (lst[i] % 2 != 0)\n      odd.push(lst[i])\n  odd.sort((a:\
    \ number, b: number) => a - b)\n  let even: number[] = []\n  for (let i = 0; i\
    \ < odd.length; i++)\n    if (odd[i] % 2 == 0)\n      even.push(odd[i])\n  even.sort((a:\
    \ number, b: number) => a - b)\n  let count = 0\n  for (let i = 0; i < even.length;\
    \ i++) {\n    if (even[i] > lst[even.length - 1])\n      break\n    count += even[i]\n\
    \  }\n  return count\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
