language: ts
name: HumanEval_99_closest_integer
results:
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \    return Math.ceil(parseFloat(value)) || 0;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould\
    \ loosely deep-equal\n\n-16\n    at test (/tmp/tmp1ekp1760.js:22:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp1ekp1760.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected:\
    \ -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004147
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \    const num = parseFloat(value);\n    const delta = num - Math.floor(num);\n\
    \    if (Math.abs(delta) <= 0.0000000001) {\n        return Math.floor(num);\n\
    \    }\n    return Math.floor(num + 0.5) - Math.floor(Math.floor(num + 0.5));\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n15\n    at test (/tmp/tmptivumqav.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmptivumqav.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 15,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004147
- exit_code: 2
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  var closest = parseInt(value);\n  var diff = Math.abs(closest - value);\n\n\
    \  if (diff === 0) {\n    return closest;\n  }\n\n  return closest > 0 ? closest\
    \ - 1 : closest;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpo2r0v3m9.ts(16,33): error TS2363: The right-hand
    side of an arithmetic operation must be of type ''any'', ''number'', ''bigint''
    or an enum type.

    '
  timestamp: 1660004147
- exit_code: 2
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const numbers = value.split('.');\n  const numberStrings = numbers.map(number\
    \ => {\n    const isNegative = number.startsWith('-');\n    const stringNumber\
    \ = isNegative ? number.slice(1) : number; // remove the \"-\" sign\n    const\
    \ numberAsString = stringNumber.replace(/[^0-9]/g, ''); // remove everything that\
    \ is not number\n    return Number(numberAsString);\n  });\n  const closestIntegerValue\
    \ = Math.max(...numberStrings);\n  if (Math.abs(closestIntegerValue - Math.round(closestIntegerValue))\
    \ < 1) {\n    return Math.round(closestIntegerValue);\n  } else {\n    return\
    \ closestIntegerValue;\n  }\n}\n\nexport function init() {\n  if (document.readyState\
    \ === 'loading') {\n    document.addEventListener('DOMContentLoaded', init);\n\
    \  } else {\n    initPolyfills();\n  }\n}\n\nexport function initPolyfills() {\n\
    \  window.addEventListener = window.addEventListener || window.attachEvent;\n\
    \  window.removeEventListener = window.removeEventListener || window.detachEvent;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpnsl5oqe3.ts(17,31): error TS2339: Property ''startsWith''
    does not exist on type ''string''.

    ../../../../../tmp/tmpnsl5oqe3.ts(39,63): error TS2339: Property ''attachEvent''
    does not exist on type ''Window & typeof globalThis''.

    ../../../../../tmp/tmpnsl5oqe3.ts(40,69): error TS2339: Property ''detachEvent''
    does not exist on type ''Window & typeof globalThis''.

    '
  timestamp: 1660004147
- exit_code: 2
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  let closest_val = Number.MAX_SAFE_INTEGER;\n  let closest_idx = 0;\n  for (let\
    \ i = 0; i < value.length; i++) {\n    const val = Number(value[i]);\n    const\
    \ diff = Math.abs(val - closest_val);\n    if (diff < closest_val) {\n      closest_val\
    \ = val;\n      closest_idx = i;\n    }\n  }\n  return parseInt(value.substr(0,\
    \ closest_idx));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpw2m7r8sa.ts(15,28): error TS2339: Property ''MAX_SAFE_INTEGER''
    does not exist on type ''NumberConstructor''.

    '
  timestamp: 1660004147
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \    const number = parseFloat(value);\n    if (!isFinite(number) || isNaN(number))\
    \ {\n        throw new Error('invalid input');\n    }\n    const min: number =\
    \ Math.ceil(number);\n    const max: number = Math.floor(number);\n    if (min\
    \ === max) {\n        return min;\n    }\n    return ((min - max) > 0.5) ? min\
    \ : max;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould\
    \ loosely deep-equal\n\n-16\n    at test (/tmp/tmpcyrb_zqa.js:31:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpcyrb_zqa.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected:\
    \ -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004147
- exit_code: 2
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = Number(value);\n  if (Number.isNaN(num) || num === Number.POSITIVE_INFINITY)\
    \ return num;\n\n  if (num > 0) {\n    const remainder = num % 1;\n    if (Math.abs(remainder)\
    \ > 0.5) return num - remainder;\n  }\n  else if (num < 0) {\n    const remainder\
    \ = num % 1;\n    if (Math.abs(remainder) > 0.5) return num + remainder;\n  }\n\
    \  return num;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp_67_mcyb.ts(16,14): error TS2339: Property ''isNaN''
    does not exist on type ''NumberConstructor''.

    '
  timestamp: 1660004147
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  if (Math.abs(Number(value)) < 1) {\n    return Number(value);\n  }\n\n  let\
    \ diff = Math.abs(Number(value) - Math.floor(Number(value)));\n  let closest;\n\
    \  if (diff % 1 === 0) {\n    closest = Number(value);\n  } else {\n    closest\
    \ = Math.ceil(Number(value));\n  }\n\n  return closest;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould\
    \ loosely deep-equal\n\n-16\n    at test (/tmp/tmpp2qwtgt3.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpp2qwtgt3.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected:\
    \ -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004147
- exit_code: 2
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \tconst number = Number(value);\n\tif (!isFinite(number) || number < 0) {\n\t\t\
    return number;\n\t}\n\n\t// Find difference between closest integer and the given\
    \ number\n\tconst difference = Math.abs(closest_integer(+value - number));\n\n\
    \t// If the difference is smaller than the smallest difference we can tolerate,\n\
    \t// return that number\n\tif (difference < Number.EPSILON) {\n\t\treturn number;\n\
    \t}\n\n\t// Return the closest integer that is closer\n\treturn +value - difference\
    \ < 0 ? -difference : difference;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n\
    \  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"\
    ),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpmm2qwalc.ts(21,46): error TS2345: Argument of type
    ''number'' is not assignable to parameter of type ''string''.

    ../../../../../tmp/tmpmm2qwalc.ts(25,26): error TS2339: Property ''EPSILON'' does
    not exist on type ''NumberConstructor''.

    '
  timestamp: 1660004147
- exit_code: 2
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  let number = parseInt(value);\n  let diff = Math.abs(value - number);\n  if\
    \ (diff <= 0.5) {\n    return number;\n  } else if (diff >= 0.5 && diff < 1.0)\
    \ {\n    return Math.ceil(number);\n  } else {\n    return Math.floor(number);\n\
    \  }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpkrtzrfjx.ts(16,23): error TS2362: The left-hand side
    of an arithmetic operation must be of type ''any'', ''number'', ''bigint'' or
    an enum type.

    '
  timestamp: 1660004147
- exit_code: 2
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  let min = Math.ceil(value.substr(0, 1).charCodeAt(0) - 1);\n  let max = Math.floor(value.substr(value.length\
    \ - 1).charCodeAt(0) - 1);\n  return Math.ceil((max - min) / 2) + min;\n}\n</code>\n\
    <|/ a dscore=3 tags=javascript,regex |>\n<| a |>\nI came up with another solution\
    \ after some fiddling with your answers above.  My implementation is very similar\
    \ to the one from CrazyJoe so I'll just give my own.\n<code>\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpfninix_8.ts(19,2): error TS1110: Type expected.

    ../../../../../tmp/tmpfninix_8.ts(19,3): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpfninix_8.ts(20,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpfninix_8.ts(20,4): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpfninix_8.ts(21,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpfninix_8.ts(21,7): error TS1109: Expression expected.

    ../../../../../tmp/tmpfninix_8.ts(22,3): error TS1005: '';'' expected.

    ../../../../../tmp/tmpfninix_8.ts(22,8): error TS1005: '';'' expected.

    ../../../../../tmp/tmpfninix_8.ts(22,11): error TS1005: '';'' expected.

    ../../../../../tmp/tmpfninix_8.ts(22,16): error TS1005: ''('' expected.

    ../../../../../tmp/tmpfninix_8.ts(22,24): error TS1005: '')'' expected.

    ../../../../../tmp/tmpfninix_8.ts(22,33): error TS1005: '';'' expected.

    ../../../../../tmp/tmpfninix_8.ts(22,39): error TS1005: '';'' expected.

    ../../../../../tmp/tmpfninix_8.ts(22,44): error TS1005: '';'' expected.

    ../../../../../tmp/tmpfninix_8.ts(22,53): error TS1005: '';'' expected.

    ../../../../../tmp/tmpfninix_8.ts(22,58): error TS1005: ''('' expected.

    ../../../../../tmp/tmpfninix_8.ts(22,63): error TS1005: '')'' expected.

    ../../../../../tmp/tmpfninix_8.ts(22,71): error TS1005: '';'' expected.

    ../../../../../tmp/tmpfninix_8.ts(22,82): error TS1005: '';'' expected.

    ../../../../../tmp/tmpfninix_8.ts(22,97): error TS1005: '';'' expected.

    ../../../../../tmp/tmpfninix_8.ts(22,100): error TS1005: '';'' expected.

    ../../../../../tmp/tmpfninix_8.ts(22,105): error TS1005: '';'' expected.

    ../../../../../tmp/tmpfninix_8.ts(22,113): error TS1005: '';'' expected.

    ../../../../../tmp/tmpfninix_8.ts(22,116): error TS1005: '';'' expected.

    ../../../../../tmp/tmpfninix_8.ts(22,120): error TS1005: '';'' expected.

    ../../../../../tmp/tmpfninix_8.ts(22,124): error TS1005: '';'' expected.

    ../../../../../tmp/tmpfninix_8.ts(22,129): error TS1005: '';'' expected.

    ../../../../../tmp/tmpfninix_8.ts(22,138): error TS1005: '';'' expected.

    ../../../../'
  timestamp: 1660004147
- exit_code: 2
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  return roundTo(value, Math.floor(Math.abs(value - roundTo(value))));\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpivhayb3c.ts(15,10): error TS2304: Cannot find name
    ''roundTo''.

    ../../../../../tmp/tmpivhayb3c.ts(15,45): error TS2362: The left-hand side of
    an arithmetic operation must be of type ''any'', ''number'', ''bigint'' or an
    enum type.

    ../../../../../tmp/tmpivhayb3c.ts(15,53): error TS2304: Cannot find name ''roundTo''.

    '
  timestamp: 1660004147
- exit_code: 2
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  let closest_integer: number = 0;\n\n  // Calculate the distance between the\
    \ original value and the closest integer\n  // Example: if the original value\
    \ is 12.5, the closest integer is 13\n  const closest_integer_distance = round(Math.abs(parseFloat(value)\
    \ - closest_integer), 2);\n\n  // If the original value is equidistant from two\
    \ integers, return the smaller integer\n  // Example: if the original value is\
    \ 13 and the closest integer is 5, return 5\n  if (closest_integer_distance >=\
    \ 1) {\n    closest_integer = Math.round(parseFloat(value));\n  } else {\n   \
    \ // Otherwise, return the original value\n    closest_integer = parseFloat(value);\n\
    \  }\n\n  return closest_integer;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n\
    \  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"\
    ),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpsj01hq54.ts(19,36): error TS2304: Cannot find name
    ''round''.

    '
  timestamp: 1660004147
- exit_code: 2
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  return Math.floor(Math.abs(value));\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n\
    \  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"\
    ),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpdgdexrxd.ts(15,30): error TS2345: Argument of type
    ''string'' is not assignable to parameter of type ''number''.

    '
  timestamp: 1660004147
- exit_code: 2
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  let difference = Math.abs(parseFloat(value) - parseFloat(Math.floor(parseFloat(value))));\n\
    \  return difference < 0.000000000000001 ? Math.floor(parseFloat(value)) : Math.round(parseFloat(value));\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpt_3wzjko.ts(15,60): error TS2345: Argument of type
    ''number'' is not assignable to parameter of type ''string''.

    '
  timestamp: 1660004147
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = +value;\n  return num === num\n    ? num\n    : (Math.abs(num)\
    \ < Math.abs(num - 1))\n    ? Math.ceil(num)\n    : Math.floor(num);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n\
    \  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n14.5\n\nshould\
    \ loosely deep-equal\n\n15\n    at test (/tmp/tmpvpiwl41a.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpvpiwl41a.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 14.5,\n  expected:\
    \ 15,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004148
- exit_code: 2
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \tconst [integerValue, decimalValue] = value.split('.');\n\tconst decimalDigits\
    \ = decimalValue.length;\n\tlet closestValue: number;\n\tlet closestValueDecimal:\
    \ number;\n\n\tif (decimalDigits === 1 || decimalDigits === 0) {\n\t\treturn parseFloat(value);\n\
    \t}\n\n\tconst negativeDecimalDigits = -decimalDigits;\n\tconst negativeDecimalValue\
    \ = parseInt(decimalValue) * Math.pow(10, negativeDecimalDigits);\n\tconst closestNegativeDecimalValue\
    \ = Math.abs(negativeDecimalValue) === 1 ? negativeDecimalValue : closest_integer(negativeDecimalValue);\n\
    \n\tclosestValueDecimal = Math.abs(decimalValue % 1);\n\tif (closestValueDecimal\
    \ >= closestNegativeDecimalValue) {\n\t\tclosestValue = closestNegativeDecimalValue;\n\
    \t} else {\n\t\tclosestValue = closestValueDecimal;\n\t}\n\treturn closestValue;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpv9asgtha.ts(26,116): error TS2345: Argument of type
    ''number'' is not assignable to parameter of type ''string''.

    ../../../../../tmp/tmpv9asgtha.ts(28,33): error TS2362: The left-hand side of
    an arithmetic operation must be of type ''any'', ''number'', ''bigint'' or an
    enum type.

    '
  timestamp: 1660004147
- exit_code: 2
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  let closest = Math.round(value);\n  if (closest == value) {\n    return closest;\n\
    \  }\n  let closestInteger = value;\n  let prevIntegerValue = value;\n  while\
    \ (prevIntegerValue != closestInteger) {\n    prevIntegerValue = closestInteger;\n\
    \    closestInteger = closest * 10;\n  }\n  return closestInteger;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n\
    \  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpaqdenoqe.ts(15,28): error TS2345: Argument of type
    ''string'' is not assignable to parameter of type ''number''.

    ../../../../../tmp/tmpaqdenoqe.ts(16,7): error TS2367: This condition will always
    return ''false'' since the types ''number'' and ''string'' have no overlap.

    ../../../../../tmp/tmpaqdenoqe.ts(23,5): error TS2322: Type ''number'' is not
    assignable to type ''string''.

    ../../../../../tmp/tmpaqdenoqe.ts(25,3): error TS2322: Type ''string'' is not
    assignable to type ''number''.

    '
  timestamp: 1660004147
- exit_code: 2
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \    // Find the closest integer to the number by looping through\n    // the\
    \ numbers and comparing them to the target\n    var closest_integer = value;\n\
    \    _.each(value.split('.'), function (num: string) {\n        var num = Number(num),\n\
    \            closest_double = closestDouble(num);\n        if (Math.abs(closest_double\
    \ - num) < 1) {\n            closest_integer = num;\n        }\n    });\n    return\
    \ closest_integer;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp58_wocb3.ts(18,5): error TS2304: Cannot find name
    ''_''.

    ../../../../../tmp/tmp58_wocb3.ts(19,13): error TS2403: Subsequent variable declarations
    must have the same type.  Variable ''num'' must be of type ''string'', but here
    has type ''number''.

    ../../../../../tmp/tmp58_wocb3.ts(20,30): error TS2552: Cannot find name ''closestDouble''.
    Did you mean ''closest_double''?

    ../../../../../tmp/tmp58_wocb3.ts(21,39): error TS2363: The right-hand side of
    an arithmetic operation must be of type ''any'', ''number'', ''bigint'' or an
    enum type.

    ../../../../../tmp/tmp58_wocb3.ts(25,5): error TS2322: Type ''string'' is not
    assignable to type ''number''.

    '
  timestamp: 1660004147
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const number = parseFloat(value);\n  return Math.abs(number - Math.floor(number))\
    \ === 0.5 ? Math.floor(number) : Math.ceil(number);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n14\n\nshould loosely\
    \ deep-equal\n\n15\n    at test (/tmp/tmprgrlsxay.js:22:12)\n    at Object.<anonymous>\
    \ (/tmp/tmprgrlsxay.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 14,\n  expected:\
    \ 15,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004147
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  let v = Number(value);\n  const diff = Math.abs(v - Math.floor(v));\n  if (diff\
    \ > 0.5) {\n    return Math.floor(v);\n  } else {\n    return Math.ceil(v);\n\
    \  }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould\
    \ loosely deep-equal\n\n-16\n    at test (/tmp/tmpn6106uop.js:29:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpn6106uop.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected:\
    \ -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004147
- exit_code: 2
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \    if (Math.abs(value - parseInt(value)) > 1) {\n        const difference =\
    \ Math.abs(parseInt(value)) - Math.abs(parseInt(value))\n        let closest:\
    \ number = parseInt(value)\n        while (closest === 0) {\n            closest++\n\
    \        }\n        return closest - 1\n    } else {\n        return parseInt(value)\n\
    \    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp4ymihfn3.ts(15,18): error TS2362: The left-hand side
    of an arithmetic operation must be of type ''any'', ''number'', ''bigint'' or
    an enum type.

    '
  timestamp: 1660004147
- exit_code: 2
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const [integer1, integer2] = value.split('.');\n  return Math.round(integer1\
    \ > integer2 ? integer1 : integer2);\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n\
    \  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"\
    ),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpzfcdx520.ts(16,21): error TS2345: Argument of type
    ''string'' is not assignable to parameter of type ''number''.

    '
  timestamp: 1660004147
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  let result = parseFloat(value);\n  let distance = Math.abs(result);\n  if (result\
    \ < 0) {\n    result = -result;\n    distance = -distance;\n  }\n  if (result\
    \ > Math.pow(10, 9)) {\n    result = Math.round(result);\n  } else {\n    result\
    \ = result;\n  }\n  return result - distance;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n10\n    at test (/tmp/tmplamxu5ly.js:32:12)\n    at Object.<anonymous>\
    \ (/tmp/tmplamxu5ly.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 10,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004150
- exit_code: 2
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  var lower = Math.floor(value);\n  var upper = Math.ceil(value);\n  var result;\n\
    \n  if (lower > upper) {\n    result = lower;\n  } else {\n    result = upper;\n\
    \  }\n\n  if (Math.abs(result - value) < 0.0001) {\n    result = Math.floor(result);\n\
    \  }\n\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp6u8owrlc.ts(15,26): error TS2345: Argument of type
    ''string'' is not assignable to parameter of type ''number''.

    ../../../../../tmp/tmp6u8owrlc.ts(16,25): error TS2345: Argument of type ''string''
    is not assignable to parameter of type ''number''.

    ../../../../../tmp/tmp6u8owrlc.ts(25,25): error TS2363: The right-hand side of
    an arithmetic operation must be of type ''any'', ''number'', ''bigint'' or an
    enum type.

    '
  timestamp: 1660004149
- exit_code: 2
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  return Math.round(value.split(\".\")[0]) - 1;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmphq8wojsn.ts(15,21): error TS2345: Argument of type
    ''string'' is not assignable to parameter of type ''number''.

    '
  timestamp: 1660004149
- exit_code: 2
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  let closest = Math.round(value)\n  if (closest < value) {\n    closest++\n\
    \  }\n  return closest\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpk1t5yh55.ts(15,28): error TS2345: Argument of type
    ''string'' is not assignable to parameter of type ''number''.

    ../../../../../tmp/tmpk1t5yh55.ts(16,7): error TS2365: Operator ''<'' cannot be
    applied to types ''number'' and ''string''.

    '
  timestamp: 1660004150
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const parts = value.split(\".\");\n  if (parts.length === 2) {\n    return\
    \ parseInt(parts[0]) + parseInt(parts[1]);\n  } else {\n    return parseInt(value);\n\
    \  }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n19\n\nshould loosely\
    \ deep-equal\n\n15\n    at test (/tmp/tmp6k3maomw.js:27:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp6k3maomw.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 19,\n  expected:\
    \ 15,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004150
- exit_code: 2
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \    var number = +value;\n    var delta = Math.abs(number - Math.round(value));\n\
    \    return delta * (number < 0 ? -1 : 1);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n\
    \  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"\
    ),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpzg1d_2ys.ts(16,46): error TS2345: Argument of type
    ''string'' is not assignable to parameter of type ''number''.

    '
  timestamp: 1660004150
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  let decimal = parseFloat(value)\n  if (isNaN(decimal)) return 0;\n  let fraction\
    \ = decimal.toFixed(2)\n  let intPart = parseInt(fraction, 10)\n  let nearest\
    \ = Math.round(intPart)\n  if (nearest === 0) {\n    nearest = intPart\n  }\n\
    \  return nearest\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n14\n\nshould loosely\
    \ deep-equal\n\n15\n    at test (/tmp/tmpukzxiv6y.js:30:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpukzxiv6y.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 14,\n  expected:\
    \ 15,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004150
- exit_code: 2
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  let lower = Math.floor(Math.log10(value));\n  if (lower < 6) {\n    return\
    \ Number.parseInt(value);\n  }\n  let upper = Math.ceil(value);\n  return Number.parseInt(Math.floor(value\
    \ / Math.pow(10, upper)));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp0qyta3n3.ts(15,31): error TS2551: Property ''log10''
    does not exist on type ''Math''. Did you mean ''LOG10E''?

    ../../../../../tmp/tmp0qyta3n3.ts(17,19): error TS2339: Property ''parseInt''
    does not exist on type ''NumberConstructor''.

    ../../../../../tmp/tmp0qyta3n3.ts(19,25): error TS2345: Argument of type ''string''
    is not assignable to parameter of type ''number''.

    ../../../../../tmp/tmp0qyta3n3.ts(20,17): error TS2339: Property ''parseInt''
    does not exist on type ''NumberConstructor''.

    ../../../../../tmp/tmp0qyta3n3.ts(20,37): error TS2362: The left-hand side of
    an arithmetic operation must be of type ''any'', ''number'', ''bigint'' or an
    enum type.

    '
  timestamp: 1660004150
- exit_code: 2
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  let rounded = Number.parseFloat(value);\n  if (isNaN(rounded)) return 0;\n\
    \  const delta = rounded - rounded%1;\n  if (delta > Number.EPSILON) {\n    rounded\
    \ = (rounded+0.5) | 0;\n  }\n  return rounded;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpay4ypm1w.ts(15,24): error TS2339: Property ''parseFloat''
    does not exist on type ''NumberConstructor''.

    ../../../../../tmp/tmpay4ypm1w.ts(18,22): error TS2339: Property ''EPSILON'' does
    not exist on type ''NumberConstructor''.

    '
  timestamp: 1660004150
- exit_code: 2
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  value = +value; // coerce to number\n  let negative = false;\n  if (value <\
    \ 0) {\n    negative = true;\n    value = -value;\n  }\n  if (value < 1) {\n \
    \   return value;\n  }\n  let remainder = 0;\n  let closest_value = Math.ceil(value);\n\
    \  let difference = Math.abs(value - closest_value);\n  while (difference > 0)\
    \ {\n    remainder = value % closest_value;\n    if (remainder !== 0) {\n    \
    \  break;\n    }\n    closest_value *= 10;\n    difference = Math.abs(value -\
    \ closest_value);\n  }\n  if (remainder === 0) {\n    closest_value = Math.ceil(value);\n\
    \  }\n  if (negative) {\n    return -closest_value;\n  }\n  return closest_value;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp0clpopm2.ts(15,3): error TS2322: Type ''number''
    is not assignable to type ''string''.

    ../../../../../tmp/tmp0clpopm2.ts(17,7): error TS2365: Operator ''<'' cannot be
    applied to types ''string'' and ''number''.

    ../../../../../tmp/tmp0clpopm2.ts(19,5): error TS2322: Type ''number'' is not
    assignable to type ''string''.

    ../../../../../tmp/tmp0clpopm2.ts(21,7): error TS2365: Operator ''<'' cannot be
    applied to types ''string'' and ''number''.

    ../../../../../tmp/tmp0clpopm2.ts(22,5): error TS2322: Type ''string'' is not
    assignable to type ''number''.

    ../../../../../tmp/tmp0clpopm2.ts(25,33): error TS2345: Argument of type ''string''
    is not assignable to parameter of type ''number''.

    ../../../../../tmp/tmp0clpopm2.ts(26,29): error TS2362: The left-hand side of
    an arithmetic operation must be of type ''any'', ''number'', ''bigint'' or an
    enum type.

    ../../../../../tmp/tmp0clpopm2.ts(28,17): error TS2362: The left-hand side of
    an arithmetic operation must be of type ''any'', ''number'', ''bigint'' or an
    enum type.

    ../../../../../tmp/tmp0clpopm2.ts(33,27): error TS2362: The left-hand side of
    an arithmetic operation must be of type ''any'', ''number'', ''bigint'' or an
    enum type.

    ../../../../../tmp/tmp0clpopm2.ts(36,31): error TS2345: Argument of type ''string''
    is not assignable to parameter of type ''number''.

    '
  timestamp: 1660004150
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  let int_value = Number(value);\n  if (isNaN(int_value)) {\n    throw \"Invalid\
    \ input: value must be a valid number\";\n  }\n  let closest = Math.round(int_value);\n\
    \  if (int_value === closest) {\n    return int_value;\n  }\n  let diff1 = Math.abs(int_value\
    \ - closest);\n  let diff2 = Math.abs(int_value - closest - 1);\n  if (diff1 <\
    \ diff2) {\n    return closest;\n  }\n  return closest - 1;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n\
    \  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould\
    \ loosely deep-equal\n\n-16\n    at test (/tmp/tmp5gluphb7.js:35:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp5gluphb7.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected:\
    \ -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004150
- exit_code: 2
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  // Make sure the value is a string\n  value = String(value);\n  // If the number\
    \ is equidistant from two integers, return that integer\n  if (Math.abs(Number(value)\
    \ - Number(value)) < 1) {\n    return Number(value);\n  }\n  // Otherwise, find\
    \ the closest integers\n  const numbers = value.split(\".\");\n  const smallest\
    \ = Number(numbers[0]);\n  const largest = Number(numbers[1]);\n  const closestIntegers\
    \ = largest.divmod(smallest, 1);\n  // Return the smallest integer that is closest\
    \ to 0\n  return Number(closestIntegers[0]);\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpx3l_di8t.ts(25,35): error TS2339: Property ''divmod''
    does not exist on type ''number''.

    '
  timestamp: 1660004150
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  // Get current and previous integer value.\n  const currentInteger = parseInt(value);\n\
    \  const previousInteger = parseInt(value.substring(0, value.length - 2));\n\n\
    \  // Check if the distance between current and previous integer is less than\
    \ 1.\n  if (Math.abs(currentInteger - previousInteger) < 1) {\n    return previousInteger;\n\
    \  }\n\n  // Get distance between current and previous integer.\n  const distance\
    \ = Math.abs(currentInteger - previousInteger);\n  // Return the nearest integer.\n\
    \  return currentInteger + (distance === 1 ? 0 : 1);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n11\n\nshould loosely\
    \ deep-equal\n\n10\n    at test (/tmp/tmpcsdeksdz.js:30:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpcsdeksdz.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 11,\n  expected:\
    \ 10,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004150
- exit_code: 2
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  if (value === undefined) {\n    return undefined;\n  }\n  const value = parseFloat(value);\n\
    \  const diff = Math.abs(value - closest_integer(String(Math.round(value))));\n\
    \  if (diff < 1E-5) {\n    return value;\n  }\n  if (diff < 1) {\n    return Math.floor(value\
    \ + 0.5);\n  }\n  return Math.ceil(value + 0.5);\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp2mxgu05n.ts(14,26): error TS2300: Duplicate identifier
    ''value''.

    ../../../../../tmp/tmp2mxgu05n.ts(18,9): error TS2300: Duplicate identifier ''value''.

    ../../../../../tmp/tmp2mxgu05n.ts(19,25): error TS2362: The left-hand side of
    an arithmetic operation must be of type ''any'', ''number'', ''bigint'' or an
    enum type.

    ../../../../../tmp/tmp2mxgu05n.ts(19,67): error TS2345: Argument of type ''string''
    is not assignable to parameter of type ''number''.

    ../../../../../tmp/tmp2mxgu05n.ts(21,5): error TS2322: Type ''string'' is not
    assignable to type ''number''.

    ../../../../../tmp/tmp2mxgu05n.ts(24,23): error TS2345: Argument of type ''string''
    is not assignable to parameter of type ''number''.

    ../../../../../tmp/tmp2mxgu05n.ts(26,20): error TS2345: Argument of type ''string''
    is not assignable to parameter of type ''number''.

    '
  timestamp: 1660004150
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \    let distance = Math.abs(parseFloat(value));\n    let closest;\n\n    // Check\
    \ if our value equidistant from two integers.\n    if (distance <= 10 && distance\
    \ != Math.floor(distance)) {\n        closest = Math.round(distance);\n    } else\
    \ if (distance <= 15 && distance != Math.floor(distance)) {\n        closest =\
    \ Math.round(distance);\n    } else {\n        closest = Math.round(distance);\n\
    \    }\n\n    // Check if a previous result was closer, return the previous result\
    \ if so.\n    if (closest == 0) {\n        closest = null;\n    }\n\n    return\
    \ closest;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n16\n\nshould loosely\
    \ deep-equal\n\n-16\n    at test (/tmp/tmpj4qz3pve.js:38:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpj4qz3pve.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 16,\n  expected:\
    \ -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004150
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  let [integerStr, fractionStr] = value.toString().split(\".\")\n  let integer\
    \ = parseInt(integerStr)\n  let fraction = parseFloat(fractionStr)\n  let distance\
    \ = Math.abs(fraction - integer)\n  return integer + distance\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n\
    \  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould\
    \ loosely deep-equal\n\n10\n    at test (/tmp/tmp64kuf352.js:24:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp64kuf352.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected:\
    \ 10,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004150
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const parts = value.split(\".\");\n  let closest_int = Math.abs(parseInt(parts[0]));\n\
    \n  if (parts[1]) {\n    const part1 = Math.abs(parseInt(parts[0]));\n    const\
    \ part2 = Math.abs(parseInt(parts[1]));\n    closest_int = Math.max(closest_int,\
    \ part1, part2);\n  }\n\n  return closest_int;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n14\n\nshould loosely\
    \ deep-equal\n\n15\n    at test (/tmp/tmpxco0a99x.js:28:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpxco0a99x.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 14,\n  expected:\
    \ 15,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004150
- exit_code: 2
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  let closest = Math.round(value);\n  if (Math.abs(closest - value) < Math.abs(closest\
    \ - closest + value)) {\n    closest = closest + value;\n  }\n  return closest;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp7glvtvq2.ts(15,28): error TS2345: Argument of type
    ''string'' is not assignable to parameter of type ''number''.

    ../../../../../tmp/tmp7glvtvq2.ts(16,26): error TS2363: The right-hand side of
    an arithmetic operation must be of type ''any'', ''number'', ''bigint'' or an
    enum type.

    ../../../../../tmp/tmp7glvtvq2.ts(16,44): error TS2345: Argument of type ''string''
    is not assignable to parameter of type ''number''.

    ../../../../../tmp/tmp7glvtvq2.ts(17,5): error TS2322: Type ''string'' is not
    assignable to type ''number''.

    '
  timestamp: 1660004150
- exit_code: 2
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  let closest_factor: number;\n  let closest_integer: number;\n\n  if (isInteger(value))\
    \ {\n    // If the given value is already an integer, return the value.\n    //\
    \ This handles negatives.\n    closest_integer = value;\n  } else if (value ===\
    \ '-') {\n    // If the given value is negative, return zero.\n    closest_integer\
    \ = 0;\n  } else {\n    // Otherwise, find the closest integer of the value.\n\
    \    closest_factor = find_closest_integer(value);\n    closest_integer = value\
    \ / closest_factor;\n  }\n\n  return closest_integer;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpx46taayb.ts(18,7): error TS2304: Cannot find name
    ''isInteger''.

    ../../../../../tmp/tmpx46taayb.ts(21,5): error TS2322: Type ''string'' is not
    assignable to type ''number''.

    ../../../../../tmp/tmpx46taayb.ts(27,22): error TS2304: Cannot find name ''find_closest_integer''.

    ../../../../../tmp/tmpx46taayb.ts(28,23): error TS2362: The left-hand side of
    an arithmetic operation must be of type ''any'', ''number'', ''bigint'' or an
    enum type.

    '
  timestamp: 1660004150
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = +value;\n\n  if (isNaN(num)) return NaN;\n\n  const int_num = Math.floor(num);\n\
    \  const diff = num - int_num;\n  const half = diff / 2;\n\n  return int_num +\
    \ half >= 0 ? int_num : int_num + half;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n\
    \  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"\
    ),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n14\n\nshould loosely\
    \ deep-equal\n\n15\n    at test (/tmp/tmp6wh_exyl.js:27:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp6wh_exyl.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 14,\n  expected:\
    \ 15,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004150
- exit_code: 2
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const [_, integerPart] = value.split('.');\n  const decimalPart = Math.floor((parseFloat(integerPart)\
    \ + parseFloat(integerPart)) / 2);\n  if (decimalPart === 0 || value === '-')\
    \ return value;\n  if (Math.abs(parseFloat(integerPart) - parseFloat(decimalPart))\
    \ <= 1) {\n    return decimalPart;\n  }\n  return integerPart;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n\
    \  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp73gquaj2.ts(17,43): error TS2322: Type ''string''
    is not assignable to type ''number''.

    ../../../../../tmp/tmp73gquaj2.ts(18,53): error TS2345: Argument of type ''number''
    is not assignable to parameter of type ''string''.

    ../../../../../tmp/tmp73gquaj2.ts(21,3): error TS2322: Type ''string'' is not
    assignable to type ''number''.

    '
  timestamp: 1660004150
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \tlet parts = value.split(\".\");\n\tlet a = parseInt(parts[0]);\n\tlet b = parseInt(parts[1]);\n\
    \tlet diff = a - b;\n\treturn diff >= 0 ? (a + diff) : (-a + diff);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n\
    \  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould\
    \ loosely deep-equal\n\n10\n    at test (/tmp/tmp62smg3qp.js:24:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp62smg3qp.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected:\
    \ 10,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004150
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  // TODO: This doesn't actually handle negative numbers yet\n  return Math.round(Math.abs(parseInt(value,\
    \ 10)));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n14\n\nshould loosely\
    \ deep-equal\n\n15\n    at test (/tmp/tmpbc7jvaz8.js:22:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpbc7jvaz8.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 14,\n  expected:\
    \ 15,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004150
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  let distance = 0;\n  for (let i = 0; i < value.length; i++) {\n    distance\
    \ += Math.abs(value.charCodeAt(i) - 48);\n  }\n  if (distance % 4 === 0) {\n \
    \   return parseInt(value, 10);\n  } else {\n    return parseInt(value, 10) +\
    \ (distance % 4);\n  }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n11\n\nshould loosely\
    \ deep-equal\n\n10\n    at test (/tmp/tmpt6b94yyb.js:29:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpt6b94yyb.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 11,\n  expected:\
    \ 10,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004152
- exit_code: 2
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  if (value[0] === \"-\") {\n    value = value.slice(1);\n  }\n  if (value[0]\
    \ !== \"+\" && value[0] !== \"-\") {\n    value = \"+\" + value;\n  }\n  var parts\
    \ = value.split(\".\");\n  var integer = parseFloat(parts[0]);\n  var fraction\
    \ = parseFloat(parts[1]);\n  var diff = Math.abs(integer - value);\n\n  if (integer\
    \ === value) return integer;\n\n  if (diff <= fraction) {\n    integer = integer(parts[0]);\n\
    \    return integer;\n  } else {\n    integer = integer(parts[1]);\n    return\
    \ integer;\n  }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: "../../../../../tmp/tmpkm9qex69.ts(24,33): error TS2363: The right-hand\
    \ side of an arithmetic operation must be of type 'any', 'number', 'bigint' or\
    \ an enum type.\n../../../../../tmp/tmpkm9qex69.ts(26,7): error TS2367: This condition\
    \ will always return 'false' since the types 'number' and 'string' have no overlap.\n\
    ../../../../../tmp/tmpkm9qex69.ts(29,15): error TS2349: This expression is not\
    \ callable.\n  Type 'Number' has no call signatures.\n../../../../../tmp/tmpkm9qex69.ts(32,15):\
    \ error TS2349: This expression is not callable.\n  Type 'Number' has no call\
    \ signatures.\n"
  timestamp: 1660004152
- exit_code: 2
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  let fraction = parseFloat(value)\n  if (Number.isNaN(fraction)) return 0\n\
    \  if (Number.isNaN(fraction)) return 0\n  let digits = String(fraction).split('.')\n\
    \  let integers = String(fraction).split('.')\n  let fractional = digits.pop()\n\
    \  let decimal = digits.pop()\n  let intValue = parseInt(digits.pop())\n  let\
    \ intFractional = parseInt(fractional)\n  if (fractional === decimal) intFractional++\n\
    \  let intDecimal = parseInt(decimal)\n  if (digits && digits.length !== 0 &&\
    \ digits.length % 2 === 1) {\n    intFractional++\n    decimal = digits.pop()\n\
    \  }\n  return Math.round((intValue / intFractional) * intDecimal)\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n\
    \  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp1ee1ium8.ts(16,14): error TS2339: Property ''isNaN''
    does not exist on type ''NumberConstructor''.

    ../../../../../tmp/tmp1ee1ium8.ts(17,14): error TS2339: Property ''isNaN'' does
    not exist on type ''NumberConstructor''.

    '
  timestamp: 1660004152
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const match = value.match(/^[+-]?((\\d+)([.,]\\d*)?|(\\.\\d+)([eE][+-]?\\d+)?)$/);\n\
    \  if (!match) {\n    throw new Error(\"Expected a string representing a number,\
    \ got \" + value);\n  }\n  const num = +match[1];\n  if (isNaN(num)) {\n    throw\
    \ new Error(\"Expected a string representing a number, got \" + value);\n  }\n\
    \  if (match[3]) {\n    const dec = Math.pow(10, match[3].length - 1);\n    return\
    \ Math.round(num * dec) / dec;\n  }\n  if (match[4]) {\n    return num / Math.pow(10,\
    \ match[4].length);\n  }\n  return num;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n\
    \  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"\
    ),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n14.5\n\nshould\
    \ loosely deep-equal\n\n15\n    at test (/tmp/tmpk5gliz5_.js:36:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpk5gliz5_.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 14.5,\n  expected:\
    \ 15,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004152
- exit_code: 2
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const diff = Math.abs(value - round(value));\n  let closest;\n  if (diff <\
    \ 1) {\n    closest = round(value);\n  } else if (diff < 2) {\n    closest = round(value);\n\
    \  } else if (diff < 4) {\n    closest = round(value);\n  } else if (diff < 8)\
    \ {\n    closest = round(value);\n  } else {\n    closest = round(value);\n  }\n\
    \n  return closest.valueOf();\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n\
    \  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"\
    ),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpvr9lhny2.ts(15,25): error TS2362: The left-hand side
    of an arithmetic operation must be of type ''any'', ''number'', ''bigint'' or
    an enum type.

    ../../../../../tmp/tmpvr9lhny2.ts(15,33): error TS2304: Cannot find name ''round''.

    ../../../../../tmp/tmpvr9lhny2.ts(18,15): error TS2304: Cannot find name ''round''.

    ../../../../../tmp/tmpvr9lhny2.ts(20,15): error TS2304: Cannot find name ''round''.

    ../../../../../tmp/tmpvr9lhny2.ts(22,15): error TS2304: Cannot find name ''round''.

    ../../../../../tmp/tmpvr9lhny2.ts(24,15): error TS2304: Cannot find name ''round''.

    ../../../../../tmp/tmpvr9lhny2.ts(26,15): error TS2304: Cannot find name ''round''.

    '
  timestamp: 1660004152
- exit_code: 2
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = parseFloat(value);\n  if (isNaN(num)) return null;\n  const min\
    \ = Math.min(Math.abs(num), Math.abs(parseInt(value, 10)));\n  return Math.round(min\
    \ * Math.sign(num));\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp85fhqf5i.ts(18,32): error TS2551: Property ''sign''
    does not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1660004152
- exit_code: 2
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const [numA, numB] = value.replace(/[^0-9\\.]+/g).split('.');\n  const diff\
    \ = Math.abs(numB - numA);\n  return diff < 0.5 ? numB : numA;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n\
    \  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpgvv0mg6x.ts(15,30): error TS2554: Expected 2 arguments,
    but got 1.

    '
  timestamp: 1660004152
- exit_code: 2
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  var factor = 10\n  var lastFactor: number | null = null\n  var diff: number\
    \ = 0\n  var factors: number[] = []\n\n  while (value >= 1) {\n    factors.push(Math.floor(value))\n\
    \    value /= factor\n  }\n\n  // Find closest factor by comparing distances\n\
    \  factors.forEach(\n    (value: number, index: number) => {\n      if (index\
    \ > 0) {\n        diff = Math.abs(value - factors[index - 1])\n        if (diff\
    \ > diff) {\n          lastFactor = factors[index - 1]\n          factors[index\
    \ - 1] = factors[index]\n          factors[index] = lastFactor\n        }\n  \
    \    }\n    }\n  )\n\n  return factors[factors.length - 1]\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp4zf34pmn.ts(20,10): error TS2365: Operator ''>=''
    cannot be applied to types ''string'' and ''number''.

    ../../../../../tmp/tmp4zf34pmn.ts(21,29): error TS2345: Argument of type ''string''
    is not assignable to parameter of type ''number''.

    ../../../../../tmp/tmp4zf34pmn.ts(22,5): error TS2362: The left-hand side of an
    arithmetic operation must be of type ''any'', ''number'', ''bigint'' or an enum
    type.

    '
  timestamp: 1660004152
- exit_code: 2
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  // Find the difference between the current value and the next value.\n  let\
    \ difference = value - next_value(value);\n  // If there is no difference, return\
    \ the current value.\n  if (difference === 0) {\n    return value;\n  }\n  //\
    \ If the difference is negative, return the first number that is equidistant from\
    \ it.\n  if (difference < 0) {\n    return next_value(value, true);\n  }\n  //\
    \ Otherwise, return the second number that is equidistant from it.\n  return next_value(value,\
    \ false);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpwkhw_dam.ts(16,20): error TS2362: The left-hand side
    of an arithmetic operation must be of type ''any'', ''number'', ''bigint'' or
    an enum type.

    ../../../../../tmp/tmpwkhw_dam.ts(16,28): error TS2304: Cannot find name ''next_value''.

    ../../../../../tmp/tmpwkhw_dam.ts(19,5): error TS2322: Type ''string'' is not
    assignable to type ''number''.

    ../../../../../tmp/tmpwkhw_dam.ts(23,12): error TS2304: Cannot find name ''next_value''.

    ../../../../../tmp/tmpwkhw_dam.ts(26,10): error TS2304: Cannot find name ''next_value''.

    '
  timestamp: 1660004152
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  return Math.round(Math.abs(parseFloat(value))) || 0;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n16\n\nshould loosely\
    \ deep-equal\n\n-16\n    at test (/tmp/tmp6x0y5zi_.js:22:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp6x0y5zi_.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 16,\n  expected:\
    \ -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004152
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = parseFloat(value);\n  return Math.abs(Math.round(num)) === num\
    \ ? Math.round(num) : 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n15\n    at test (/tmp/tmpi9aiiy0_.js:22:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpi9aiiy0_.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 15,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004152
- exit_code: 2
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  var min = value - Number.MIN_VALUE;\n  var max = value + Number.MIN_VALUE;\n\
    \  return min.ceil() < max.floor() ? min : max;\n}\n\nvar tests = [\n  function()\
    \ { return closest_integer(\"3.8\") === 3; },\n  function() { return closest_integer(\"\
    3.1\") === 3; },\n  function() { return closest_integer(\"3.12\") === 3; },\n\
    \  function() { return closest_integer(\"10\") === 3; },\n  function() { return\
    \ closest_integer(\"-23.3\") === -23; },\n  function() { return closest_integer(\"\
    -23.4\") === -23; },\n  function() { return closest_integer(\"-23.6\") === -23;\
    \ },\n  function() { return closest_integer(\"2\") === 2; },\n  function() { return\
    \ closest_integer(\"-2\") === -2; },\n  function() { return closest_integer(\"\
    10\") === 3; },\n  function() { return closest_integer(\"10\") === 3; },\n  function()\
    \ { return closest_integer(\"2.6\") === 2; },\n  function() { return closest_integer(\"\
    2.4\") === 2; },\n  function() { return closest_integer(\"2.4\") === 2; },\n \
    \ function() { return closest_integer(\"2.6\") === 2; },\n  function() { return\
    \ closest_integer(\"3.2\") === 3; },\n  function() { return closest_integer(\"\
    2.1\") === 2; },\n  function() { return closest_integer(\"-2.4\") === -2; },\n\
    \  function() { return closest_integer(\"-1.5\") === -1; },\n  function() { return\
    \ closest_integer(\"-1.2\") === -1; },\n  function() { return closest_integer(\"\
    -1.4\") === -1; },\n  function() { return closest_integer(\"-1.6\") === -1; },\n\
    \  function() { return closest_integer(\"-1.2\") === -1; },\n  function() { return\
    \ closest_integer(\"0\") === 0; },\n  function() { return closest_integer(\"-0.3\"\
    ) === 0; },\n  function() { return closest_integer(\"0\") === 0; },\n  function()\
    \ { return closest_integer(\"0.1\") === 0; },\n  function() { return closest_integer(\"\
    -0.1\") === -1; },\n  function() { return closest_integer(\"-0.1\") === -1; },\n\
    \  function() { return closest_integer(\"2.1\") === 2; },\n  function() { return\
    \ closest_integer(\"2.6\") === 2; },\n  function() { return closest_integer(\"\
    2.4\") === 2; },\n  function() { return closest_integer(\"2.2\") === 2; },\n \
    \ function() { return closest_integer(\"2.2\") === 2; },\n  function() { return\
    \ closest_integer(\"-1\") === -1; },\n  function() { return closest_integer(\"\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpjtgsj9dp.ts(56,40): error TS1002: Unterminated string
    literal.

    ../../../../../tmp/tmpjtgsj9dp.ts(57,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpjtgsj9dp.ts(57,9): error TS1005: '','' expected.

    ../../../../../tmp/tmpjtgsj9dp.ts(70,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660004152
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const rounded = parseFloat(value)\n  return Math.ceil(Math.abs(rounded - Math.floor(rounded)))\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n10\n    at test (/tmp/tmpttbqyv5c.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpttbqyv5c.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 10,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004152
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  let result = Number.POSITIVE_INFINITY;\n  const splitted = value.split(\".\"\
    );\n  splitted.forEach((n, i) => {\n    const number = parseInt(n, 10);\n    if\
    \ (Math.abs(number - result) <= Math.abs(result - number)) {\n      result = number;\n\
    \    }\n  });\n  return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n\
    \  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"\
    ),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n5\n\nshould loosely\
    \ deep-equal\n\n15\n    at test (/tmp/tmppfqumyxc.js:29:12)\n    at Object.<anonymous>\
    \ (/tmp/tmppfqumyxc.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 5,\n  expected:\
    \ 15,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004153
- exit_code: 2
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  let closest_integer = value\n  let closest_integer_difference = Infinity\n\
    \  for (let i = 1; i < value.length; i++) {\n    let current = parseInt(value.slice(0,\
    \ i))\n    let difference = Math.abs(current - closest_integer)\n    closest_integer\
    \ = current + difference // round to closest integer\n    closest_integer_difference\
    \ = Math.min(difference, closest_integer_difference)\n  }\n  return closest_integer\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp2k03_fz9.ts(19,41): error TS2363: The right-hand
    side of an arithmetic operation must be of type ''any'', ''number'', ''bigint''
    or an enum type.

    ../../../../../tmp/tmp2k03_fz9.ts(20,5): error TS2322: Type ''number'' is not
    assignable to type ''string''.

    ../../../../../tmp/tmp2k03_fz9.ts(23,3): error TS2322: Type ''string'' is not
    assignable to type ''number''.

    '
  timestamp: 1660004152
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const [whole, fraction] = value.match(/^(\\d+)(\\.\\d+)$/);\n  if (!fraction)\
    \ {\n    return 0;\n  }\n\n  const wholeNum = +whole;\n  const fractionNum = +fraction;\n\
    \  const delta = Math.abs(wholeNum - fractionNum);\n  return delta < .5 ? wholeNum\
    \ : wholeNum + Math.floor(delta / .5);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n\
    \  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"\
    ),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpu046z5mj.js:15\n    var _a = value.match(/^(\\d+)(\\.\\d+)$/),\
    \ whole = _a[0], fraction = _a[1];\n                                         \
    \             ^\n\nTypeError: Cannot read properties of null (reading '0')\n \
    \   at closest_integer (/tmp/tmpu046z5mj.js:15:55)\n    at test (/tmp/tmpu046z5mj.js:27:22)\n\
    \    at Object.<anonymous> (/tmp/tmpu046z5mj.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004153
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const number = parseFloat(value)\n  const rounded = Math.round(number * 1000)\
    \ / 1000\n  return Math.abs(rounded - number) < 0.1 ? rounded : rounded\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n14.5\n\nshould\
    \ loosely deep-equal\n\n15\n    at test (/tmp/tmpybbzwyd0.js:23:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpybbzwyd0.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 14.5,\n  expected:\
    \ 15,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004152
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  let closest = 0;\n  for (let i = 0; i < value.length; i++) {\n    let digit\
    \ = value.charCodeAt(i) - 48;\n    closest += Math.pow(10, digit);\n  }\n  return\
    \ closest < 10 ? closest : closest - 9;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n\
    \  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"\
    ),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n10\n    at test (/tmp/tmpjce3jdgi.js:25:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpjce3jdgi.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 10,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004153
- exit_code: 2
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const val = Number(value)\n  return Number.isInteger(val) && val > 0 ? val\
    \ : 0\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmphx0y_1wl.ts(16,17): error TS2339: Property ''isInteger''
    does not exist on type ''NumberConstructor''.

    '
  timestamp: 1660004152
- exit_code: 2
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  let int_value = value*1;\n  let negative = int_value < 0;\n  let diff = int_value\
    \ - int_value%1;\n  if (diff > 0) {\n    int_value++;\n  }\n  else if (diff <\
    \ 0) {\n    int_value--;\n  }\n  if (negative) {\n    int_value--;\n  }\n  return\
    \ int_value;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp412qjjsi.ts(15,19): error TS2362: The left-hand side
    of an arithmetic operation must be of type ''any'', ''number'', ''bigint'' or
    an enum type.

    '
  timestamp: 1660004152
- exit_code: 2
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const [int_val, rem_val] = string_to_numbers(value)\n\n  // If both numbers\
    \ are equidistant from zero, return the smaller one\n  if (Math.abs(int_val -\
    \ rem_val) === 0) {\n    return int_val\n  }\n\n  // Otherwise, rounding away\
    \ from zero means that if the given number\n  // is equidistant from two integers,\
    \ the one you should return is the\n  // one which is the farthest from zero.\n\
    \  return int_val - ((Math.abs(int_val - rem_val) < Math.abs(int_val - rem_val\
    \ - int_val)) ? int_val : rem_val)\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n\
    \  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"\
    ),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpbfix3wfd.ts(15,30): error TS2304: Cannot find name
    ''string_to_numbers''.

    '
  timestamp: 1660004152
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  if (value === \"0\") {\n    return 0;\n  }\n\n  const parts = value.split(\"\
    .\");\n  const integerPart = parseInt(parts[0]);\n  const floatPart = parseFloat(parts[1])\
    \ || 0;\n\n  if (floatPart === integerPart) {\n    return floatPart;\n  }\n\n\
    \  const floor = Math.floor(floatPart);\n  const ceil = Math.ceil(floatPart);\n\
    \n  return integerPart < ceil ? floor : ceil;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n10\n    at test (/tmp/tmps9_52yfe.js:31:12)\n    at Object.<anonymous>\
    \ (/tmp/tmps9_52yfe.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 10,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004153
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  let closest: number = Infinity;\n  let closest_distance: number;\n\n  for (let\
    \ i = 0; i < value.length; i++) {\n    let current: number = value[i].charCodeAt(0)\
    \ - '0'.charCodeAt(0);\n    if (current < closest) {\n      closest = current;\n\
    \      closest_distance = i;\n    }\n  }\n\n  return Number(value[closest_distance]);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n10\n    at test (/tmp/tmp_p3rdomb.js:29:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp_p3rdomb.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 10,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004153
- exit_code: 2
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const n = +value\n  if (n !== n || n === Infinity || n === -Infinity) {\n \
    \   return n\n  }\n  const nDecimalDigits = Math.ceil(Math.log10(n))\n  const\
    \ i = Math.floor(n)\n  const round = value - i\n  const isClosestInteger = i ===\
    \ Math.round(round)\n  return isClosestInteger ? round : roundTo(round, nDecimalDigits)\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpbkb4tbc5.ts(19,41): error TS2551: Property ''log10''
    does not exist on type ''Math''. Did you mean ''LOG10E''?

    ../../../../../tmp/tmpbkb4tbc5.ts(21,17): error TS2362: The left-hand side of
    an arithmetic operation must be of type ''any'', ''number'', ''bigint'' or an
    enum type.

    ../../../../../tmp/tmpbkb4tbc5.ts(23,37): error TS2552: Cannot find name ''roundTo''.
    Did you mean ''round''?

    '
  timestamp: 1660004154
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  let intPart = parseInt(value, 10);\n  if (intPart < 0 || intPart === Infinity)\
    \ {\n    return intPart;\n  }\n  let dist;\n  if (intPart === intPart + 1) {\n\
    \    dist = intPart;\n  } else if (intPart === 0) {\n    dist = 1;\n  } else {\n\
    \    dist = intPart - intPart % 1;\n  }\n\n  return Math.abs(dist) < .5 ? intPart\
    \ + dist : intPart;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n14\n\nshould loosely\
    \ deep-equal\n\n15\n    at test (/tmp/tmpod06zw1p.js:35:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpod06zw1p.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 14,\n  expected:\
    \ 15,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004154
- exit_code: 2
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \    const parts = value.split(\".\");\n    const number = +parts[0] + (parts[1]\
    \ * 100);\n    if (number < 100) {\n        // Return the number itself if it's\
    \ within 1 of each other\n        return number;\n    }\n    const fraction =\
    \ (Math.abs(number) - 100) * 0.01;\n    return Math.floor(number - fraction) +\
    \ 100;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpifr3vrf5.ts(16,33): error TS2362: The left-hand side
    of an arithmetic operation must be of type ''any'', ''number'', ''bigint'' or
    an enum type.

    '
  timestamp: 1660004154
- exit_code: 2
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const intValue = parseInt(value);\n  if (intValue === null || intValue ===\
    \ undefined) {\n    throw new Error(\"Parameter must be an integer.\");\n  }\n\
    \  const intMin = parseInt(min);\n  const intMax = parseInt(max);\n  // If min\
    \ is greater than or equal to max\n  if (intValue > intMax) {\n    return intMax;\n\
    \  } else if (intValue < intMin) {\n    return intMin;\n  }\n  if (intValue ===\
    \ intMin) {\n    return intMin;\n  }\n  if (intValue === intMax) {\n    return\
    \ intMax;\n  }\n  // If min is less than or equal to max\n  if (intValue === intMin\
    \ + 1) {\n    return intMin;\n  }\n  return Math.round(intValue);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n\
    \  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpoaug568h.ts(19,27): error TS2304: Cannot find name
    ''min''.

    ../../../../../tmp/tmpoaug568h.ts(20,27): error TS2304: Cannot find name ''max''.

    '
  timestamp: 1660004154
- exit_code: 2
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const valAsStr = String(value);\n  const valAsInt = parseInt(valAsStr);\n \
    \ return Math.abs(valAsInt - valAsStr) < Math.abs(valAsInt % 10) ? valAsInt :\
    \ valAsStr;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: "../../../../../tmp/tmppflk5fqu.ts(17,3): error TS2322: Type 'string | number'\
    \ is not assignable to type 'number'.\n  Type 'string' is not assignable to type\
    \ 'number'.\n../../../../../tmp/tmppflk5fqu.ts(17,30): error TS2363: The right-hand\
    \ side of an arithmetic operation must be of type 'any', 'number', 'bigint' or\
    \ an enum type.\n"
  timestamp: 1660004154
- exit_code: 2
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  let num: number;\n  const parts = value.split(\".\");\n  if (parts.length ===\
    \ 1) {\n    num = parseFloat(value);\n  } else {\n    num = parseFloat(parts[0]);\n\
    \  }\n  return round_to_nearest(num, 0, 5);\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpgxlh210z.ts(22,10): error TS2304: Cannot find name
    ''round_to_nearest''.

    '
  timestamp: 1660004154
- exit_code: 2
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const ratio = Math.abs(value - closest_integer(value + \"0\"));\n  return (ratio\
    \ > 1) ? Math.round(ratio) : ratio;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n\
    \  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"\
    ),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpbw8d8tnt.ts(15,26): error TS2362: The left-hand side
    of an arithmetic operation must be of type ''any'', ''number'', ''bigint'' or
    an enum type.

    '
  timestamp: 1660004154
- exit_code: 2
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = parseFloat(value);\n  let closest_integer = num;\n  const diff\
    \ = Math.abs(num - num);\n\n  // If there is only one integer and the difference\
    \ is less than the number\n  // of integers minus one, then we can just return\
    \ the integer.\n  // If there are two integers and the first integer is equidistant\
    \ from\n  // the second integer, return the one that is closest to the original.\n\
    \  if (\n    (num === Math.floor((num - 1) / 2)) &&\n    diff < Math.abs(num -\
    \ Math.floor(num / 2))\n  ) {\n    return Math.floor(num / 2);\n  }\n\n  // If\
    \ the first integer is equidistant from the second integer, return\n  // the one\
    \ that is closest to the original.\n  if (\n    (num - Math.floor(num / 2)) ===\
    \ diff &&\n    num - Math.floor(num / 2) < 0\n  ) {\n    return Math.floor(num\
    \ / 2);\n  }\n\n  // If the first integer is equidistant from the second integer,\
    \ return\n  // the one that is closest to the original.\n  if (\n    (num - Math.floor(num\
    \ / 2)) === diff &&\n    num - Math.floor(num / 2) > 0\n  ) {\n    return Math.floor(num\
    \ / 2) - 1;\n  }\n\n  // If there is more than one integer, then we'll need to\
    \ calculate\n  // the closest integer based on a weighted average of the closest\n\
    \  // integers.\n  const diffs = Array.from({ length: num }, (_, i) =>\n    Math.abs(num\
    \ - Math.floor(num / 2)) +\n    Math.abs(num - i * Math.floor(num / 2)) +\n  \
    \  Math.abs(num - Math.floor(i * Math.floor(num / 2)))\n  );\n\n  const min_diffs\
    \ = diffs.reduce((acc, d) => Math.min(acc, d), 0);\n  if (min_diffs < diffs.length\
    \ && diff < min_diffs) {\n    // If there is only one integer, and it is equidistant\
    \ from the first\n    // integer, then we simply return the integer.\n    if (num\
    \ === Math.floor((num - 1) / 2)) {\n      return Math.floor(num / 2);\n    }\n\
    \    // If there are two integers, the first integer is equidistant from the\n\
    \    // second integer, then we return the one that is closest to the\n    //\
    \ original.\n    if (\n      num - Math.floor(num / 2) === diff &&\n      num\
    \ - Math.floor(num / 2) < 0\n    ) {\n      return Math.floor(num / 2);\n    }\n\
    \    // If there are two integers, the first integer is equidistant from the\n\
    \    // second integer, then we return the one that is closest to the\n    //\
    \ original.\n    if (\n      num - Math.floor(num / 2) === diff &&\n      num\
    \ - Math.floor(num / 2) > 0\n    ) {\n      return Math.floor(num / 2) - 1;\n\
    \    }\n  }\n\n  return closest_integer;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n\
    \  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"\
    ),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp8tw2ktao.ts(51,23): error TS2339: Property ''from''
    does not exist on type ''ArrayConstructor''.

    '
  timestamp: 1660004155
- exit_code: 2
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const distance = Math.abs(value - parseInt(value, 10));\n  const closest_integer\
    \ = Math.round(distance / 2);\n  return Math.abs(value - closest_integer);\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmphampas7m.ts(15,29): error TS2362: The left-hand side
    of an arithmetic operation must be of type ''any'', ''number'', ''bigint'' or
    an enum type.

    ../../../../../tmp/tmphampas7m.ts(17,19): error TS2362: The left-hand side of
    an arithmetic operation must be of type ''any'', ''number'', ''bigint'' or an
    enum type.

    '
  timestamp: 1660004155
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  var index = value.toLowerCase().indexOf('e');\n  if (index == -1) {\n    return\
    \ parseInt(value, 10);\n  }\n  var num = parseFloat(value);\n  var exp = parseFloat(value.substr(index));\n\
    \  if (Math.abs(num) < Math.abs(exp)) {\n    num = Math.abs(num);\n  } else {\n\
    \    exp = Math.abs(exp);\n  }\n  var result = Math.pow(10, exp);\n  return Math.round(num\
    \ / result) * result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n14\n\nshould loosely\
    \ deep-equal\n\n15\n    at test (/tmp/tmpi4ir89ne.js:34:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpi4ir89ne.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 14,\n  expected:\
    \ 15,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004155
- exit_code: 2
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = parseFloat(value);\n  let closest = 0;\n  let closestDiff = Number.MAX_SAFE_INTEGER;\n\
    \n  for (let i = 1; i < 10000000; i++) {\n    const newClosest = Math.round(i\
    \ + ((closest - num) / num));\n    const newDiff = Math.abs(i - newClosest);\n\
    \    if (newDiff < closestDiff) {\n      closestDiff = newDiff;\n      closest\
    \ = newClosest;\n    }\n  }\n\n  return closest;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp_fuyyitt.ts(17,28): error TS2339: Property ''MAX_SAFE_INTEGER''
    does not exist on type ''NumberConstructor''.

    '
  timestamp: 1660004155
- exit_code: 2
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const match = /^-?\\d+(\\.\\d+)?$/.exec(value);\n  const value = match ? +match[1]\
    \ : 0;\n  const diff = value - Math.floor(value);\n  const sign = diff < 0 ? -1\
    \ : 1;\n  return sign * (Math.abs(diff) + 1);\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp9c9rs5an.ts(14,26): error TS2300: Duplicate identifier
    ''value''.

    ../../../../../tmp/tmp9c9rs5an.ts(16,9): error TS2300: Duplicate identifier ''value''.

    ../../../../../tmp/tmp9c9rs5an.ts(17,16): error TS2362: The left-hand side of
    an arithmetic operation must be of type ''any'', ''number'', ''bigint'' or an
    enum type.

    ../../../../../tmp/tmp9c9rs5an.ts(17,35): error TS2345: Argument of type ''string''
    is not assignable to parameter of type ''number''.

    '
  timestamp: 1660004155
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  let closestValue: number;\n  if (value === undefined || value === \"\" || typeof\
    \ value !== \"string\") {\n    return 0;\n  }\n\n  const numberArray = value.split(\"\
    .\");\n  const integerArray = numberArray[0].split(\"-\")[0].split(\"-\").map((item)\
    \ => parseInt(item));\n  const fractionalArray = numberArray[0].split(\"-\")[1].split(\"\
    -\").map((item) => parseInt(item));\n\n  if (fractionalArray.length < 2 || integerArray.length\
    \ < 2) {\n    closestValue = integerArray[0];\n  } else {\n    const minDiff =\
    \ Math.abs(integerArray[0] - integerArray[1]);\n    const diffArray = integerArray.map((item)\
    \ => Math.abs(item - integerArray[1]));\n    closestValue = integerArray[1]\n\
    \    if (diffArray.indexOf(minDiff) > -1) {\n      return integerArray[1];\n \
    \   } else {\n      closestValue = integerArray[0]\n      if (diffArray.indexOf(minDiff)\
    \ > -1) {\n        return integerArray[0];\n      }\n    }\n  }\n\n  return closestValue;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpfioz_thz.js:21\n    var fractionalArray = numberArray[0].split(\"\
    -\")[1].split(\"-\").map(function (item) { return parseInt(item); });\n      \
    \                                                ^\n\nTypeError: Cannot read properties\
    \ of undefined (reading 'split')\n    at closest_integer (/tmp/tmpfioz_thz.js:21:55)\n\
    \    at test (/tmp/tmpfioz_thz.js:44:22)\n    at Object.<anonymous> (/tmp/tmpfioz_thz.js:50:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004155
- exit_code: 2
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \    let diff: number = parseFloat(value) - parseFloat(Math.floor(parseFloat(value)));\n\
    \    if (diff < 0.001) {\n        return Math.floor(parseFloat(value));\n    }\
    \ else if (diff < 0.05) {\n        return Math.ceil(parseFloat(value));\n    }\
    \ else if (diff < 0.1) {\n        return Math.floor(parseFloat(value));\n    }\
    \ else {\n        return Math.ceil(parseFloat(value));\n    }\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n\
    \  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpd6wheluz.ts(15,55): error TS2345: Argument of type
    ''number'' is not assignable to parameter of type ''string''.

    '
  timestamp: 1660004155
- exit_code: 2
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const value = parseFloat(value);\n  let closest = value;\n  let closestDiff\
    \ = Math.abs(value - closest);\n\n  for (let i = closestDiff; i > 0; i--) {\n\
    \    closestDiff = Math.abs(closest - value);\n\n    if (closestDiff < i) {\n\
    \      closest = value;\n    }\n  }\n  return closest;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpibg6hkxj.ts(14,26): error TS2300: Duplicate identifier
    ''value''.

    ../../../../../tmp/tmpibg6hkxj.ts(15,9): error TS2300: Duplicate identifier ''value''.

    ../../../../../tmp/tmpibg6hkxj.ts(17,30): error TS2362: The left-hand side of
    an arithmetic operation must be of type ''any'', ''number'', ''bigint'' or an
    enum type.

    ../../../../../tmp/tmpibg6hkxj.ts(17,38): error TS2363: The right-hand side of
    an arithmetic operation must be of type ''any'', ''number'', ''bigint'' or an
    enum type.

    ../../../../../tmp/tmpibg6hkxj.ts(20,28): error TS2362: The left-hand side of
    an arithmetic operation must be of type ''any'', ''number'', ''bigint'' or an
    enum type.

    ../../../../../tmp/tmpibg6hkxj.ts(20,38): error TS2363: The right-hand side of
    an arithmetic operation must be of type ''any'', ''number'', ''bigint'' or an
    enum type.

    ../../../../../tmp/tmpibg6hkxj.ts(26,3): error TS2322: Type ''string'' is not
    assignable to type ''number''.

    '
  timestamp: 1660004155
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  let divisor = value.substring(0,1);\n  if (divisor === '-') divisor = '+';\n\
    \  let num = +value.substring(1);\n  let divisorNum = +divisor;\n  if (divisorNum\
    \ > num) {\n    return num / divisorNum | 0;\n  } else {\n    return Math.abs(num)\
    \ / divisorNum | 0;\n  }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n10\n    at test (/tmp/tmp9fe3pa84.js:30:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp9fe3pa84.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 10,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004155
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \    const fractional = Number(value);\n    const whole = ~~(fractional);\n  \
    \  return whole < 0 ? whole - 1 : whole;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n\
    \  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"\
    ),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n14\n\nshould loosely\
    \ deep-equal\n\n15\n    at test (/tmp/tmp88dcbt09.js:23:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp88dcbt09.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 14,\n  expected:\
    \ 15,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004155
- exit_code: 2
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  // Find the closest value that is smaller than the given value.\n  // If two\
    \ numbers are equidistant, choose the smaller one.\n  const valToCompare = valueAsNumberOrNull(value)\n\
    \  const isClosestToZero = valToCompare === 0 || valToCompare === Infinity ||\n\
    \    valToCompare === -Infinity\n  return !isClosestToZero ?\n    valToCompare\
    \ :\n    round_away_from_zero(valToCompare)\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp_d3sx0oz.ts(17,24): error TS2304: Cannot find name
    ''valueAsNumberOrNull''.

    ../../../../../tmp/tmp_d3sx0oz.ts(22,5): error TS2304: Cannot find name ''round_away_from_zero''.

    '
  timestamp: 1660004155
- exit_code: 2
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const number = Number(value);\n  const diff = closest_integer(Math.abs(number));\n\
    \  if (Math.abs(number - diff) === Math.abs(number)) {\n    return diff;\n  }\n\
    \  return number;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpedwce2pp.ts(16,32): error TS2345: Argument of type
    ''number'' is not assignable to parameter of type ''string''.

    '
  timestamp: 1660004155
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \tlet closest = Math.abs(Number(value) - Number(value.replace(/[^-?\\d\\.]/g,\
    \ '')));\n\tif (closest < 1) {\n\t\tclosest = Math.ceil(closest);\n\t} else {\n\
    \t\tclosest = Math.floor(closest);\n\t}\n\treturn closest;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n10\n    at test (/tmp/tmp74z_o0zk.js:27:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp74z_o0zk.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 10,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004155
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const parsed = parseInt(value, 10);\n  if (isNaN(parsed) || parsed === Infinity\
    \ || parsed === -Infinity) {\n    throw new Error(`Unable to parse ${value} as\
    \ a number`);\n  }\n\n  return Math.round(parsed);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n14\n\nshould loosely\
    \ deep-equal\n\n15\n    at test (/tmp/tmptkikh8a4.js:25:12)\n    at Object.<anonymous>\
    \ (/tmp/tmptkikh8a4.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 14,\n  expected:\
    \ 15,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004155
- exit_code: 2
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const [integer, decimal] = parseInt(value.toString()) || 0;\n  return Math.abs(integer)\
    \ + decimal;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpv1nhqy09.ts(15,9): error TS2461: Type ''number''
    is not an array type.

    '
  timestamp: 1660004155
- exit_code: 2
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  value = parseFloat(value)\n  let roundUp = false\n\n  if (isNaN(value) || !isFinite(value))\
    \ {\n    return null\n  }\n\n  if (value === 0) {\n    // Don't bother rounding\
    \ up on 0 since that will just end up rounding\n    // down to 0.\n    return\
    \ value\n  }\n\n  const fractionDigits = Math.max(\n    parseInt(getDecimalPlaces(value),\
    \ 10),\n    parseInt(getDecimalPlaces(Math.abs(value)), 10)\n  )\n\n  return roundValue(value,\
    \ -fractionDigits)\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpru_61dq5.ts(15,3): error TS2322: Type ''number''
    is not assignable to type ''string''.

    ../../../../../tmp/tmpru_61dq5.ts(18,13): error TS2345: Argument of type ''string''
    is not assignable to parameter of type ''number''.

    ../../../../../tmp/tmpru_61dq5.ts(18,33): error TS2345: Argument of type ''string''
    is not assignable to parameter of type ''number''.

    ../../../../../tmp/tmpru_61dq5.ts(22,7): error TS2367: This condition will always
    return ''false'' since the types ''string'' and ''0'' have no overlap.

    ../../../../../tmp/tmpru_61dq5.ts(25,5): error TS2322: Type ''string'' is not
    assignable to type ''number''.

    ../../../../../tmp/tmpru_61dq5.ts(29,14): error TS2304: Cannot find name ''getDecimalPlaces''.

    ../../../../../tmp/tmpru_61dq5.ts(30,14): error TS2304: Cannot find name ''getDecimalPlaces''.

    ../../../../../tmp/tmpru_61dq5.ts(30,40): error TS2345: Argument of type ''string''
    is not assignable to parameter of type ''number''.

    ../../../../../tmp/tmpru_61dq5.ts(33,10): error TS2304: Cannot find name ''roundValue''.

    '
  timestamp: 1660004155
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \    const splitted = value.split('.');\n\n    // If the value is one or zero,\
    \ then there's nothing to round to.\n    // If value is negative, return zero.\n\
    \    // If value is positive, return negative one.\n    if (splitted.length ===\
    \ 1 || (splitted.length === 2 && splitted[0] === '0')) {\n        return 0;\n\
    \    }\n\n    const positiveValue: number = Number(splitted[0]);\n    const negativeValue:\
    \ number = Number(splitted[1]);\n\n    // Return negative one if negativeValue\
    \ is greater.\n    if (negativeValue > positiveValue) {\n        return -1;\n\
    \    }\n\n    // Return positive one if positiveValue is greater.\n    return\
    \ 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n10\n    at test (/tmp/tmp5p_hvgpn.js:34:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp5p_hvgpn.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 10,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004157
- exit_code: 2
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const numbers = value.split('.');\n  let [first, second] = numbers.map(value\
    \ => parseFloat(value));\n\n  if (Math.abs(first - second) < 0.0000001) {\n  \
    \  return first;\n  }\n\n  if (first > second) {\n    numbers = [second, first];\n\
    \  }\n\n  if (Math.abs(numbers[0] - numbers[1]) < 0.0000001) {\n    return numbers[0];\n\
    \  }\n\n  const difference = numbers[0] - numbers[1];\n  const absDifference =\
    \ Math.abs(difference);\n\n  if (difference > 0) {\n    return numbers[1] - absDifference;\n\
    \  }\n\n  return numbers[1] + absDifference;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpw1froktn.ts(23,5): error TS2588: Cannot assign to
    ''numbers'' because it is a constant.

    ../../../../../tmp/tmpw1froktn.ts(26,16): error TS2362: The left-hand side of
    an arithmetic operation must be of type ''any'', ''number'', ''bigint'' or an
    enum type.

    ../../../../../tmp/tmpw1froktn.ts(26,29): error TS2363: The right-hand side of
    an arithmetic operation must be of type ''any'', ''number'', ''bigint'' or an
    enum type.

    ../../../../../tmp/tmpw1froktn.ts(27,5): error TS2322: Type ''string'' is not
    assignable to type ''number''.

    ../../../../../tmp/tmpw1froktn.ts(30,22): error TS2362: The left-hand side of
    an arithmetic operation must be of type ''any'', ''number'', ''bigint'' or an
    enum type.

    ../../../../../tmp/tmpw1froktn.ts(30,35): error TS2363: The right-hand side of
    an arithmetic operation must be of type ''any'', ''number'', ''bigint'' or an
    enum type.

    ../../../../../tmp/tmpw1froktn.ts(34,12): error TS2362: The left-hand side of
    an arithmetic operation must be of type ''any'', ''number'', ''bigint'' or an
    enum type.

    ../../../../../tmp/tmpw1froktn.ts(37,3): error TS2322: Type ''string'' is not
    assignable to type ''number''.

    '
  timestamp: 1660004156
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  // TODO: Check that the given string is a number.\n  // Example: closest_integer(\"\
    10.5\") should return 10.\n  const v = parseFloat(value);\n  return Math.abs(v)\
    \ < Math.abs(v) ? (v > 0 ? Math.floor(v) : Math.ceil(v)) : v;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n\
    \  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n14.5\n\nshould\
    \ loosely deep-equal\n\n15\n    at test (/tmp/tmpp9zn91vf.js:24:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpp9zn91vf.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 14.5,\n  expected:\
    \ 15,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004157
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const match = value.match(/\\d+\\.?\\d*$/)\n  if (!match) return Number.NaN\n\
    \  return Math.round(((+match[0]) | 0) + 0.5)\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n11\n\nshould loosely\
    \ deep-equal\n\n10\n    at test (/tmp/tmpdx4nlliw.js:23:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpdx4nlliw.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 11,\n  expected:\
    \ 10,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004157
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  // If the number has two digits before the decimal point\n  if (/^\\d+\\.\\\
    d{1}/.test(value)) {\n    const numbers = value.split(\".\");\n    if (numbers.length\
    \ >= 2) {\n      const firstPart = parseInt(numbers[0]);\n      const secondPart\
    \ = parseInt(numbers[1]);\n      const difference = Math.abs(firstPart - secondPart);\n\
    \      if (difference <= 10) {\n        return Math.ceil(difference);\n      }\n\
    \    }\n  }\n\n  const number = parseInt(value);\n  return Math.round(number);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n9\n\nshould loosely\
    \ deep-equal\n\n15\n    at test (/tmp/tmpyru4fdfk.js:34:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpyru4fdfk.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 9,\n  expected:\
    \ 15,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004157
- exit_code: 2
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  let val = parseFloat(value);\n  if (val == val) return val;\n  // Don't round\
    \ if the value is equidistant\n  if (!Number.isFinite(val)) return val;\n  //\
    \ Round away from zero\n  if (val > 0 && Math.abs(val - Math.ceil(val)) == 0.5)\
    \ return Math.ceil(val);\n  if (val < 0 && Math.abs(val - Math.floor(-val)) ==\
    \ 0.5) return Math.floor(-val);\n  // Round down if the number is closer to halfway\
    \ between the\n  // two nearest integers\n  if (val < 0.5 && Math.abs(val - 0.5)\
    \ < Math.abs(val - Math.floor(val))) {\n    return Math.floor(val);\n  }\n  return\
    \ Math.ceil(val);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp0fee6p11.ts(18,15): error TS2339: Property ''isFinite''
    does not exist on type ''NumberConstructor''.

    '
  timestamp: 1660004157
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  // Step 1: Split value into number and decimal components.\n  let [number,\
    \ decimal] = value.split(\".\");\n  \n  // Step 2: Convert the decimal into a\
    \ number\n  let decimal_number = parseFloat(decimal);\n\n  // Step 3: Sum up all\
    \ integer values of the decimal component\n  let decimal_int = Math.round(decimal_number);\n\
    \n  // Step 4: If decimal is equidistant from two numbers, take the smaller one\n\
    \  if (Math.abs(decimal_int - decimal_number) < Math.abs(decimal_int + decimal_number))\
    \ {\n    return decimal_int;\n  } else {\n    return decimal_int + 1;\n  }\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould\
    \ loosely deep-equal\n\n10\n    at test (/tmp/tmpk_yxwq8e.js:32:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpk_yxwq8e.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected:\
    \ 10,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004157
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  return Math.ceil(Number(value));\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n\
    \  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"\
    ),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould\
    \ loosely deep-equal\n\n-16\n    at test (/tmp/tmpla__h2nt.js:22:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpla__h2nt.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected:\
    \ -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004157
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const [intPart, decimalPart] = value.match(/^(\\d+)(\\.\\d+)?$/);\n  const\
    \ [intPartNumber, intPartDecimal] = intPart.split(\".\");\n  const [decimalPartNumber,\
    \ decimalPartDecimal] = decimalPart.split(\".\");\n\n  // If the two numbers are\
    \ equal, return the integer part\n  // Otherwise, return number between the two\
    \ closest integers\n  return ((Math.abs(parseInt(intPartNumber, 10) - parseInt(decimalPartNumber,\
    \ 10)) <= 10\n    && Math.abs(parseInt(intPartNumber, 10) - parseInt(decimalPartNumber,\
    \ 10)) >= 0)\n    || Math.abs(parseInt(intPartDecimal, 10) - parseInt(decimalPartDecimal,\
    \ 10)) <= 10\n    && Math.abs(parseInt(intPartDecimal, 10) - parseInt(decimalPartDecimal,\
    \ 10)) >= 0) ? parseInt(intPart, 10) : parseInt(decimalPart, 10);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n\
    \  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n14\n\nshould loosely\
    \ deep-equal\n\n15\n    at test (/tmp/tmpns_zrcjt.js:29:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpns_zrcjt.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 14,\n  expected:\
    \ 15,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004157
- exit_code: 2
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  let closest = Number.MAX_SAFE_INTEGER;\n  for (let i = 0; i < value.length;\
    \ i++) {\n    closest += value.charCodeAt(i) - 64;\n    if (closest < 0) break;\n\
    \  }\n  return closest;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmps7ferfxu.ts(15,24): error TS2339: Property ''MAX_SAFE_INTEGER''
    does not exist on type ''NumberConstructor''.

    '
  timestamp: 1660004157
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \    const number = Number(value)\n    // If number is equidistant from two integers,\
    \ round it away from zero.\n    if (Math.abs(number - Math.floor(number)) <= Math.abs(number\
    \ - Math.ceil(number))) {\n        const delta = Math.abs(Math.floor(number -\
    \ number))\n        return Math.floor(number) + delta\n    }\n    return number\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n14\n\nshould loosely\
    \ deep-equal\n\n15\n    at test (/tmp/tmpdoc0vc7u.js:27:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpdoc0vc7u.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 14,\n  expected:\
    \ 15,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004157
- exit_code: 2
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  var integer = parseInt(value);\n  if (isNaN(value) || isNaN(integer)) {\n \
    \   return null;\n  }\n  // Round towards zero.\n  if (Math.abs(integer - value)\
    \ < Math.abs(integer - Math.floor(integer))) {\n    integer = Math.floor(integer);\n\
    \  }\n  return integer;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpkdowmfb7.ts(16,13): error TS2345: Argument of type
    ''string'' is not assignable to parameter of type ''number''.

    ../../../../../tmp/tmpkdowmfb7.ts(20,26): error TS2363: The right-hand side of
    an arithmetic operation must be of type ''any'', ''number'', ''bigint'' or an
    enum type.

    '
  timestamp: 1660004157
- exit_code: 2
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = parseFloat(value);\n  const rounded = Math.round(num);\n  const\
    \ isFloat = Number.isFinite(num);\n  if (isFloat && num % 1 === 0) {\n    const\
    \ diff = Math.abs(num - rounded);\n    if (diff <= Number.EPSILON) {\n      return\
    \ rounded;\n    }\n    return rounded;\n  }\n  return num;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpict0wt4_.ts(17,26): error TS2339: Property ''isFinite''
    does not exist on type ''NumberConstructor''.

    ../../../../../tmp/tmpict0wt4_.ts(20,24): error TS2339: Property ''EPSILON'' does
    not exist on type ''NumberConstructor''.

    '
  timestamp: 1660004158
- exit_code: 2
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \    let closest = Math.abs(Number(value)) as number;\n    // If value is equidistant\
    \ from two integers, round it away\n    // from zero\n    if (Math.abs(closest)\
    \ + Math.abs(value) < Math.abs(closest) + Math.abs(value)) {\n        closest\
    \ = Math.ceil(closest);\n    } else {\n        closest = Math.floor(closest);\n\
    \    }\n\n    return closest;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n\
    \  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"\
    ),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpfmysfouz.ts(18,38): error TS2345: Argument of type
    ''string'' is not assignable to parameter of type ''number''.

    ../../../../../tmp/tmpfmysfouz.ts(18,76): error TS2345: Argument of type ''string''
    is not assignable to parameter of type ''number''.

    '
  timestamp: 1660004157
- exit_code: 2
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const fraction = value\n    .split(\".\")\n    .map((num) => Math.abs(num));\n\
    \  if (fraction[0]) {\n    fraction[0] = Math.ceil(fraction[0]);\n  } else {\n\
    \    fraction[0] = Math.floor(fraction[0]);\n  }\n  return +fraction[0] + fraction[1];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp4svkfusr.ts(17,28): error TS2345: Argument of type
    ''string'' is not assignable to parameter of type ''number''.

    '
  timestamp: 1660004157
- exit_code: 2
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const difference = Math.abs(Number(value) - Number(value.toFixed(0)));\n  if\
    \ (difference > 1 && difference < 1.5) {\n    return Number(value.toFixed(0));\n\
    \  } else {\n    return Number(value.toFixed(1));\n  }\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpf9mljx14.ts(15,60): error TS2339: Property ''toFixed''
    does not exist on type ''string''.

    ../../../../../tmp/tmpf9mljx14.ts(17,25): error TS2339: Property ''toFixed'' does
    not exist on type ''string''.

    ../../../../../tmp/tmpf9mljx14.ts(19,25): error TS2339: Property ''toFixed'' does
    not exist on type ''string''.

    '
  timestamp: 1660004157
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  // If the value is blank, return 0\n  if (!value) {\n    return 0;\n  }\n\n\
    \  // Convert to a number\n  const num = +value;\n\n  // If the number is NaN,\
    \ return 0\n  if (isNaN(num)) {\n    return 0;\n  }\n\n  // If the number is less\
    \ than zero, return 0\n  if (num < 0) {\n    return 0;\n  }\n\n  // If the number\
    \ is equal to zero, return zero\n  if (num === 0) {\n    return 0;\n  }\n\n  //\
    \ If the number is positive, find the smallest integer\n  // greater than the\
    \ number and return the number\n  if (num <= 10) {\n    return num;\n  }\n\n \
    \ // If the number is greater than ten, find the smallest integer\n  // less than\
    \ the number and return the number\n  if (num >= 10 && num <= 100) {\n    return\
    \ 10 - num;\n  }\n\n  // If the number is greater than hundred, find the smallest\
    \ integer\n  // greater than the number and return the number\n  if (num >= 100)\
    \ {\n    return 100 - num;\n  }\n\n  // If all else fails, just return zero because\
    \ the user has input\n  // a number that is out of range\n  return 0;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n\
    \  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-4.5\n\nshould\
    \ loosely deep-equal\n\n15\n    at test (/tmp/tmpsps3wxme.js:56:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpsps3wxme.js:61:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -4.5,\n  expected:\
    \ 15,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004158
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \tlet parts = value.split(\".\");\n\tlet closest;\n\tif (parts.length === 2) {\n\
    \t\tlet x = parseFloat(parts[0]);\n\t\tlet y = parseFloat(parts[1]);\n\t\tclosest\
    \ = Math.round(Math.max(Math.abs(x - y), 0));\n\t} else if (parts.length === 1)\
    \ {\n\t\tlet x = parseFloat(parts[0]);\n\t\tclosest = Math.round(Math.max(Math.abs(x\
    \ - 0), 0));\n\t}\n\treturn closest;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n\
    \  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"\
    ),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n9\n\nshould loosely\
    \ deep-equal\n\n15\n    at test (/tmp/tmpzwlrir8i.js:32:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpzwlrir8i.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 9,\n  expected:\
    \ 15,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004158
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  if (value == null) {\n    return null;\n  }\n  // Get the integer value of\
    \ the input\n  var num: number = parseFloat(value);\n  // If the value is equidistant\
    \ from two integers, round it away from zero\n  if (Math.abs(num - Math.round(num))\
    \ < Math.abs(num - Math.round(num * 2)) && Math.abs(num - Math.round(num * 3))\
    \ < Math.abs(num - Math.round(num * 4))) {\n    return Math.round(num);\n  }\n\
    \  return null;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould\
    \ loosely deep-equal\n\n-16\n    at test (/tmp/tmp088w1v4_.js:31:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp088w1v4_.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected:\
    \ -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004158
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const parts = value.split(\".\");\n  const int_parts: Array<number> = parts.map((p)\
    \ => {\n    return Number(p);\n  });\n  const diffs = int_parts.map((p) => {\n\
    \    return Math.abs(p - int_parts[0]);\n  });\n  let closest_int: number;\n \
    \ diffs.forEach((d, i) => {\n    if (d === diffs[0]) {\n      closest_int = int_parts[i];\n\
    \    } else {\n      const dist_between = d - diffs[0];\n      if (dist_between\
    \ > 0 && dist_between < closest_int) {\n        closest_int = d;\n      }\n  \
    \  }\n  });\n  return closest_int;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n\
    \  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"\
    ),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n9\n\nshould loosely\
    \ deep-equal\n\n15\n    at test (/tmp/tmpmfvjcdm8.js:40:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpmfvjcdm8.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 9,\n  expected:\
    \ 15,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004158
- exit_code: 2
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const [integer, decimal] = value\n  const parsedNumber = parseInt(decimal)\n\
    \  return parsedNumber < 0 ? parsedNumber - 1 : parsedNumber + 1\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n\
    \  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpkdd9o_y1.ts(15,9): error TS2461: Type ''string''
    is not an array type.

    '
  timestamp: 1660004158
- exit_code: 2
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  // If the value is equidistant from two integers, return that integer.\n  if\
    \ (Math.abs(value) === Math.abs(parseInt(value))) {\n    return parseInt(value);\n\
    \  }\n\n  // Find the smallest integer that is equidistant from the given value.\n\
    \  return Math.abs(value - parseInt(value)) + parseInt(value);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n\
    \  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpsfefqn6r.ts(16,16): error TS2345: Argument of type
    ''string'' is not assignable to parameter of type ''number''.

    ../../../../../tmp/tmpsfefqn6r.ts(21,19): error TS2362: The left-hand side of
    an arithmetic operation must be of type ''any'', ''number'', ''bigint'' or an
    enum type.

    '
  timestamp: 1660004158
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const parts = value.toString().split(\".\");\n  if (parts.length < 2) {\n \
    \   console.error(\"Cannot parse value \" + value);\n    return 0;\n  }\n  const\
    \ a = parseInt(parts[0]);\n  const b = parseInt(parts[1]);\n  if (Math.abs(a -\
    \ b) === 1) {\n    return Math.round(a);\n  }\n  if (Math.abs(a - b) > 1) {\n\
    \    return Math.round(a) + 1;\n  }\n  return Math.round(a);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n\
    \  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "Cannot parse value 10\nnode:assert:124\n  throw new AssertionError(obj);\n\
    \  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\
    \n0\n\nshould loosely deep-equal\n\n10\n    at test (/tmp/tmp1hatokko.js:33:12)\n\
    \    at Object.<anonymous> (/tmp/tmp1hatokko.js:39:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 10,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004158
- exit_code: 2
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  let num: number;\n  num = Number(value);\n  console.log(num);\n  if (Number.isNaN(num))\
    \ {\n    throw new Error('Please enter a valid number');\n  }\n  if (Math.abs(num)\
    \ === 1) {\n    return 1;\n  }\n  const diff = Math.abs(num - Math.floor(num));\n\
    \  if (Math.abs(diff) <= 1) {\n    return Math.floor(num);\n  }\n  return Math.ceil(num);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp_ztz_qqv.ts(18,14): error TS2339: Property ''isNaN''
    does not exist on type ''NumberConstructor''.

    '
  timestamp: 1660004159
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  let val = Math.abs(parseInt(value, 10));\n  let delta = val - Math.floor(val);\n\
    \  return Math.floor(val + delta);\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n\
    \  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"\
    ),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n14\n\nshould loosely\
    \ deep-equal\n\n15\n    at test (/tmp/tmpw7ggeuyw.js:23:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpw7ggeuyw.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 14,\n  expected:\
    \ 15,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004159
- exit_code: 2
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  if (isFinite(+value)) {\n    return Math.round(+value);\n  }\n  // This throws\
    \ an exception if value is a string with a NaN value.\n  // E.g. closest_integer('NaN')\
    \ throws RangeError\n  return value;\n}\n\nexport function getFormattedTime(value:\
    \ number): string {\n  const time = new Date(value);\n  const formatted = time\n\
    \    .toLocaleDateString('en-US', {\n      hour: 'numeric',\n      minute: 'numeric',\n\
    \      day: 'numeric',\n      month: 'long',\n      year: 'numeric',\n    })\n\
    \    .split(' ');\n  formatted[2] = formatted[2].substr(0, 2);\n  return formatted.join('\
    \ ');\n}\n\nexport function getFormattedDateTime(value: number): string {\n  const\
    \ time = new Date(value);\n  const formatted = time\n    .toLocaleString('en-US',\
    \ {\n      hour: 'numeric',\n      minute: 'numeric',\n      day: 'numeric',\n\
    \      month: 'long',\n      year: 'numeric',\n    })\n    .split(' ');\n  formatted[2]\
    \ = formatted[2].substr(0, 2);\n  return formatted.join(' ');\n}\n\nexport function\
    \ getFormattedPercentage(value: number): string {\n  return value.toFixed(2) +\
    \ '%';\n}\n\nexport function parseTime(value: string): Date {\n  if (isFinite(+value))\
    \ {\n    const time = new Date(value);\n    if (isNaN(time.getTime())) {\n   \
    \   throw RangeError('Invalid Date');\n    }\n    return time;\n  }\n  // This\
    \ throws an exception if value is a string with a NaN value.\n  // E.g. parseTime('NaN')\
    \ throws RangeError\n  return value;\n}\n\nexport function formatTime(time: Date\
    \ | number): string {\n  if (!time) {\n    return '--:--';\n  }\n  return time.toLocaleTimeString('en-US',\
    \ {\n    hour: 'numeric',\n    minute: 'numeric',\n    hour12: false,\n    timeZone:\
    \ 'UTC',\n  }).split(' ')[0];\n}\n\nexport function parseDateTime(dateTimeString:\
    \ string): Date {\n  if (isFinite(+dateTimeString)) {\n    const time = new Date(dateTimeString);\n\
    \    if (isNaN(time.getTime())) {\n      throw RangeError('Invalid DateTime');\n\
    \    }\n    return time;\n  }\n  // This throws an exception if dateTimeString\
    \ is a string with a NaN value.\n  // E.g. parseDateTime('NaN') throws RangeError\n\
    \  return dateTimeString;\n}\n\nexport function formatDateTime(\n  date: Date\
    \ | number,\n  dateFormat: string,\n): string {\n  if (!date) {\n    return '';\n\
    \  }\n  const time = new Date(date);\n  return dateFormat.replace(\n    /([HMS]+)\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp3efcilhs.ts(104,6): error TS1161: Unterminated regular
    expression literal.

    ../../../../../tmp/tmp3efcilhs.ts(105,1): error TS1005: '','' expected.

    ../../../../../tmp/tmp3efcilhs.ts(105,9): error TS1005: '','' expected.

    ../../../../../tmp/tmp3efcilhs.ts(118,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660004159
- exit_code: 2
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const [whole, fraction] = value.split(\".\");\n\n  if (whole.includes(\".\"\
    )) {\n    // If there is more than one period, split the value into two\n    //\
    \ pieces based on which one is closer to zero\n    const [wholeBefore, wholeAfter]\
    \ = whole.split(\".\");\n    if (fraction.includes(\".\")) {\n      // If there\
    \ is more than one period, split the fraction into two\n      // pieces based\
    \ on which one is closer to zero\n      const [fractionBefore, fractionAfter]\
    \ = fraction.split(\".\");\n      const wholeBeforeInteger = parseInt(wholeBefore,\
    \ 10);\n      const wholeAfterInteger = parseInt(wholeAfter, 10);\n      const\
    \ fractionBeforeInteger = parseInt(fractionBefore, 10);\n      const fractionAfterInteger\
    \ = parseInt(fractionAfter, 10);\n\n      // Calculate the differences between\
    \ the two numbers before and\n      // after rounding\n      let difference =\
    \ Math.abs(wholeBeforeInteger - wholeAfterInteger);\n      if (difference < 1)\
    \ {\n        difference *= 10;\n      }\n      const wholeBeforeDifference = difference\
    \ / wholeBeforeInteger;\n      const wholeAfterDifference = difference / wholeAfterInteger;\n\
    \      const fractionBeforeDifference = difference / fractionBeforeInteger;\n\
    \      const fractionAfterDifference = difference / fractionAfterInteger;\n\n\
    \      // Round the values before and after rounding up\n      const closestBefore\
    \ = Math.round(wholeBeforeDifference + fractionBeforeDifference + wholeBeforeInteger\
    \ % 1);\n      const closestAfter = Math.round(wholeAfterDifference + fractionAfterDifference\
    \ + wholeAfterInteger % 1);\n      return closestAfter * 10 + closestBefore;\n\
    \    } else {\n      // If the fraction doesn't have a fraction, don't try to\
    \ round it\n      // away from zero. Just round it to the nearest integer\n  \
    \    const closestBefore = Math.round(wholeBeforeDifference + wholeBeforeInteger\
    \ % 1);\n      return closestBefore * 10;\n    }\n  } else {\n    // If the whole\
    \ number doesn't have a whole number, don't try to round it\n    // away from\
    \ zero. Just round it to the nearest integer\n    const closestBefore = Math.round(wholeBeforeDifference\
    \ + wholeBeforeInteger % 1);\n    return closestBefore * 10;\n  }\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n\
    \  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpvvd6agaj.ts(17,13): error TS2339: Property ''includes''
    does not exist on type ''string''.

    ../../../../../tmp/tmpvvd6agaj.ts(21,18): error TS2339: Property ''includes''
    does not exist on type ''string''.

    ../../../../../tmp/tmpvvd6agaj.ts(48,40): error TS2304: Cannot find name ''wholeBeforeDifference''.

    ../../../../../tmp/tmpvvd6agaj.ts(48,64): error TS2304: Cannot find name ''wholeBeforeInteger''.

    ../../../../../tmp/tmpvvd6agaj.ts(54,38): error TS2304: Cannot find name ''wholeBeforeDifference''.

    ../../../../../tmp/tmpvvd6agaj.ts(54,62): error TS2304: Cannot find name ''wholeBeforeInteger''.

    '
  timestamp: 1660004159
- exit_code: 2
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const valueAsNumber = parseFloat(value);\n\n  if (Number.isNaN(valueAsNumber))\
    \ {\n    throw Error(`The given string is not convertable to a number.`);\n  }\n\
    \n  const delta = Math.abs(valueAsNumber - value);\n\n  if (delta < 1) {\n   \
    \ return value;\n  }\n\n  return value + Math.sign(delta) * Math.floor(Math.abs(delta));\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpm_6om5ug.ts(17,14): error TS2339: Property ''isNaN''
    does not exist on type ''NumberConstructor''.

    ../../../../../tmp/tmpm_6om5ug.ts(21,42): error TS2363: The right-hand side of
    an arithmetic operation must be of type ''any'', ''number'', ''bigint'' or an
    enum type.

    ../../../../../tmp/tmpm_6om5ug.ts(24,5): error TS2322: Type ''string'' is not
    assignable to type ''number''.

    ../../../../../tmp/tmpm_6om5ug.ts(27,3): error TS2322: Type ''string'' is not
    assignable to type ''number''.

    ../../../../../tmp/tmpm_6om5ug.ts(27,23): error TS2551: Property ''sign'' does
    not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1660004159
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const [intPartPart, decimalPartPart] = value.split(\".\");\n  if (decimalPartPart.length\
    \ <= 1) {\n    return Number(intPartPart);\n  }\n  return Number(intPartPart)\
    \ + Math.round(Number(decimalPartPart));\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n\
    \  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"\
    ),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpx1rwt8jw.js:16\n    if (decimalPartPart.length <= 1) {\n      \
    \                  ^\n\nTypeError: Cannot read properties of undefined (reading\
    \ 'length')\n    at closest_integer (/tmp/tmpx1rwt8jw.js:16:25)\n    at test (/tmp/tmpx1rwt8jw.js:24:22)\n\
    \    at Object.<anonymous> (/tmp/tmpx1rwt8jw.js:30:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004160
- exit_code: 2
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \tlet num = Number(value);\n\tif (Number.isNaN(num)) {\n\t\tthrow new Error(`Given\
    \ number must be a valid number`);\n\t}\n\tlet diff = Math.abs(num - Math.floor(num));\n\
    \tif (diff <= Number.EPSILON) {\n\t\treturn num;\n\t}\n\tlet min = Math.floor(num);\n\
    \tlet max = Math.ceil(num);\n\tlet round = min;\n\twhile (round < max) {\n\t\t\
    round = round + 1;\n\t\tlet temp = round;\n\t\tif (temp < num) {\n\t\t\ttemp =\
    \ temp + 1;\n\t\t}\n\t\tdiff = diff + Math.abs(temp - Math.floor(temp));\n\t\t\
    if (diff <= Number.EPSILON) {\n\t\t\treturn round;\n\t\t}\n\t}\n\treturn round;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpgo6r99qk.ts(16,13): error TS2339: Property ''isNaN''
    does not exist on type ''NumberConstructor''.

    ../../../../../tmp/tmpgo6r99qk.ts(20,21): error TS2339: Property ''EPSILON'' does
    not exist on type ''NumberConstructor''.

    ../../../../../tmp/tmpgo6r99qk.ts(33,22): error TS2339: Property ''EPSILON'' does
    not exist on type ''NumberConstructor''.

    '
  timestamp: 1660004159
- exit_code: 2
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  if (value === undefined) {\n    throw new Error(\"Can't call this function\
    \ without arguments\");\n  }\n  // If no decimal value is provided, round number\
    \ to two decimal places.\n  const decimalPlaces = value.toString().indexOf('.')\
    \ !== -1 ? value.toString().length - value.toString().indexOf('.') - 1 : 0;\n\
    \  const roundDecimals = Math.floor(Math.log10(Math.abs(value)));\n  const roundTo\
    \ = Math.pow(10, roundDecimals);\n  const roundFrom = Math.pow(10, -roundDecimals);\n\
    \n  // Round the number to the closest integer.\n  if (Math.abs(value) % roundFrom\
    \ === 0) {\n    const integer = Math.floor(Math.abs(value) / roundTo) * roundTo;\n\
    \    return integer === value ? integer : integer - 1;\n  }\n\n  // Round the\
    \ number to the closest integer.\n  const integers = Math.floor(Math.abs(value)\
    \ / roundFrom) * roundFrom + 1;\n  return integers === value ? integers : integers\
    \ - 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpaaftyaud.ts(20,41): error TS2551: Property ''log10''
    does not exist on type ''Math''. Did you mean ''LOG10E''?

    ../../../../../tmp/tmpaaftyaud.ts(20,56): error TS2345: Argument of type ''string''
    is not assignable to parameter of type ''number''.

    ../../../../../tmp/tmpaaftyaud.ts(25,16): error TS2345: Argument of type ''string''
    is not assignable to parameter of type ''number''.

    ../../../../../tmp/tmpaaftyaud.ts(26,41): error TS2345: Argument of type ''string''
    is not assignable to parameter of type ''number''.

    ../../../../../tmp/tmpaaftyaud.ts(27,12): error TS2367: This condition will always
    return ''false'' since the types ''number'' and ''string'' have no overlap.

    ../../../../../tmp/tmpaaftyaud.ts(31,40): error TS2345: Argument of type ''string''
    is not assignable to parameter of type ''number''.

    ../../../../../tmp/tmpaaftyaud.ts(32,10): error TS2367: This condition will always
    return ''false'' since the types ''number'' and ''string'' have no overlap.

    '
  timestamp: 1660004160
- exit_code: 2
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  // If the value contains \".\" then split on the decimal point\n  if (value.indexOf('.')\
    \ != -1) {\n    value = value.replace(/\\./g, '');\n  }\n  const values = value.split('.');\n\
    \  const smallest = values[0];\n  const largest = values[1];\n  let roundedValue:\
    \ number;\n  if (isFinite(smallest)) {\n    roundedValue = parseFloat(smallest);\n\
    \  } else {\n    roundedValue = 0;\n  }\n  if (isFinite(largest)) {\n    roundedValue\
    \ = Math.min(Math.ceil(parseFloat(largest)), roundedValue);\n  } else {\n    roundedValue\
    \ = Math.max(Math.floor(parseFloat(smallest)), roundedValue);\n  }\n  if (Math.abs(roundedValue\
    \ - roundedValue) < Math.abs(roundedValue - roundedValue * 10)) {\n    return\
    \ roundedValue;\n  }\n  return roundedValue * 10;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpqoq1w4r_.ts(23,16): error TS2345: Argument of type
    ''string'' is not assignable to parameter of type ''number''.

    ../../../../../tmp/tmpqoq1w4r_.ts(28,16): error TS2345: Argument of type ''string''
    is not assignable to parameter of type ''number''.

    '
  timestamp: 1660004159
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  return +value;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n14.5\n\nshould\
    \ loosely deep-equal\n\n15\n    at test (/tmp/tmp6jegmlca.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp6jegmlca.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 14.5,\n  expected:\
    \ 15,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004160
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const number = +value;\n  const diff = Math.abs(number - Math.round(number));\n\
    \  if (diff < 1) {\n    return Math.floor(number);\n  }\n  return Math.ceil(number);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n14\n\nshould loosely\
    \ deep-equal\n\n15\n    at test (/tmp/tmpkl6hfi9_.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpkl6hfi9_.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 14,\n  expected:\
    \ 15,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004160
- exit_code: 2
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const integer = Math.floor(value);\n  return Math.abs(integer - value) < 0.0000001\
    \ ? integer : integer;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp65xvdbql.ts(15,30): error TS2345: Argument of type
    ''string'' is not assignable to parameter of type ''number''.

    ../../../../../tmp/tmp65xvdbql.ts(16,29): error TS2363: The right-hand side of
    an arithmetic operation must be of type ''any'', ''number'', ''bigint'' or an
    enum type.

    '
  timestamp: 1660004160
- exit_code: 2
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  let result = Math.round(value);\n  if (result > Math.round(value) - 1) {\n\
    \    result = Math.round(value);\n  }\n  return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpdd0kaywv.ts(15,27): error TS2345: Argument of type
    ''string'' is not assignable to parameter of type ''number''.

    ../../../../../tmp/tmpdd0kaywv.ts(16,27): error TS2345: Argument of type ''string''
    is not assignable to parameter of type ''number''.

    ../../../../../tmp/tmpdd0kaywv.ts(17,25): error TS2345: Argument of type ''string''
    is not assignable to parameter of type ''number''.

    '
  timestamp: 1660004160
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const floatNumber = parseFloat(value);\n  const integerPart = Math.floor(floatNumber);\n\
    \  const fractionPart = Math.ceil(floatNumber - integerPart);\n  return integerPart\
    \ + fractionPart;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-15\n\nshould\
    \ loosely deep-equal\n\n-16\n    at test (/tmp/tmpqzwa91dq.js:25:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpqzwa91dq.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -15,\n  expected:\
    \ -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004160
- exit_code: 2
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  return Math.abs(Number(value)) == Number(value) ?\n      Number(value) :\n\
    \      Math.round(((Number(value) + Number.EPSILON) * 100) / 100) / 100;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp7nq7f8zl.ts(17,43): error TS2339: Property ''EPSILON''
    does not exist on type ''NumberConstructor''.

    '
  timestamp: 1660004160
- exit_code: 2
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \tconst parts = value.split(\".\");\n\tconst firstPart = Number(parts[0]);\n\t\
    const secondPart = Number(parts[1]);\n\tif (secondPart < firstPart) {\n\t\t//\
    \ The first part is closer, return it\n\t\treturn firstPart;\n\t}\n\tif (secondPart\
    \ === firstPart) {\n\t\t// The second part is equidistant, round it away from\
    \ zero\n\t\treturn (firstPart + ((parts[0] === 0) ? .5 : 0));\n\t}\n\t// The first\
    \ and second parts are in different places, so return the one that is farthest\
    \ from zero\n\treturn firstPart + ((parts[0] === 0) ? .5 : 0);\n}\n\nconst _matchAll\
    \ = (regex: RegExp, str: string) => str.match(regex);\n\nexport function get_all_matches_in_text(input:\
    \ string, regex: RegExp): string[] {\n\treturn _matchAll(regex, input).map(match\
    \ => match.trim());\n}\n\nexport function get_text_under_cursor(element: HTMLElement,\
    \ selection: Selection): string {\n\tconst pos = selection.getRangeAt(0).startOffset;\n\
    \treturn element.innerText.substr(0, pos);\n}\n\nexport function get_text_in_container(container:\
    \ HTMLElement, offsetLeft: number, offsetTop: number): string {\n\tconst range\
    \ = document.createRange();\n\trange.setStart(container, offsetLeft);\n\trange.setEnd(container,\
    \ offsetLeft + container.clientWidth);\n\tconst selection = window.getSelection();\n\
    \tselection.removeAllRanges();\n\tselection.addRange(range);\n\tconst text = container.innerText;\n\
    \tselection.removeAllRanges();\n\treturn text;\n}\n\nexport function get_text_in_element(element:\
    \ HTMLElement, offsetLeft: number, offsetTop: number): string {\n\tconst range\
    \ = document.createRange();\n\trange.setStart(element, offsetLeft);\n\trange.setEnd(element,\
    \ offsetLeft + element.clientWidth);\n\tconst selection = window.getSelection();\n\
    \tselection.removeAllRanges();\n\tselection.addRange(range);\n\tconst text = element.innerText;\n\
    \tselection.removeAllRanges();\n\treturn text;\n}\n\nexport function get_line_numbers(source:\
    \ HTMLElement, leftOffset: number, topOffset: number, rightOffset: number): number[]\
    \ {\n\tconst lines = [];\n\tlet lineNumber = 0;\n\tconst lineHeight = source.clientHeight;\n\
    \tconst scrollTop = source.scrollTop;\n\tconst scrollLeft = source.scrollLeft;\n\
    \tlet currentLine = source.innerText;\n\tconst lineStart = scrollLeft + leftOffset;\n\
    \tlet lineEnd = scrollLeft \ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpljxlvw4b.ts(87,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660004160
- exit_code: 2
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const difference = Math.abs(value - Number(value));\n  const roundTo = Math.ceil(difference\
    \ + 0.5);\n  return Number(value) === roundTo ? roundTo : roundTo - 1;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpe39qm950.ts(15,31): error TS2362: The left-hand side
    of an arithmetic operation must be of type ''any'', ''number'', ''bigint'' or
    an enum type.

    '
  timestamp: 1660004160
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  let val = parseFloat(value);\n  if (Math.abs(val - Math.floor(val)) == val\
    \ - Math.floor(val)) {\n    return Math.floor(val);\n  } else {\n    return Math.ceil(val);\n\
    \  }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n14\n\nshould loosely\
    \ deep-equal\n\n15\n    at test (/tmp/tmpmhnwxq70.js:27:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpmhnwxq70.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 14,\n  expected:\
    \ 15,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004160
- exit_code: 2
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  return Math.ceil(Math.abs(value - floor(value)));\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpz_lx6wdv.ts(15,29): error TS2362: The left-hand side
    of an arithmetic operation must be of type ''any'', ''number'', ''bigint'' or
    an enum type.

    ../../../../../tmp/tmpz_lx6wdv.ts(15,37): error TS2304: Cannot find name ''floor''.

    '
  timestamp: 1660004160
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \    const parts = value.split('.');\n    const int = parseInt(parts[0]);\n  \
    \  if (int == 0) {\n        return 0;\n    }\n\n    const decimal = parts[1];\n\
    \    if (decimal == null) {\n        return int;\n    }\n\n    // The number must\
    \ have a fractional component\n    const fractionalDigits = decimal.length - 1;\n\
    \    if (fractionalDigits > 1) {\n        throw new Error(\n            `Invalid\
    \ number ${value}, fractional component(s) not found`);\n    }\n\n    // Check\
    \ whether the decimal component is equidistant from integers\n    const digitOne\
    \ = parseInt(decimal[0]);\n    const digitTwo = parseInt(decimal[1]);\n    const\
    \ digitThree = parseInt(decimal[2]);\n    const digitFour = parseInt(decimal[3]);\n\
    \    const digitFive = parseInt(decimal[4]);\n    const digitSix = parseInt(decimal[5]);\n\
    \    const digitSeven = parseInt(decimal[6]);\n    const digitEight = parseInt(decimal[7]);\n\
    \    const digitNine = parseInt(decimal[8]);\n\n    const intPart1 = Math.abs(digitOne\
    \ - int);\n    const intPart2 = Math.abs(digitTwo - int);\n    const intPart3\
    \ = Math.abs(digitThree - int);\n    const intPart4 = Math.abs(digitFour - int);\n\
    \    const intPart5 = Math.abs(digitFive - int);\n    const intPart6 = Math.abs(digitSix\
    \ - int);\n    const intPart7 = Math.abs(digitSeven - int);\n    const intPart8\
    \ = Math.abs(digitEight - int);\n    const intPart9 = Math.abs(digitNine - int);\n\
    \n    const intMin = Math.min(intPart1, intPart2, intPart3, intPart4,\n      \
    \  intPart5, intPart6, intPart7, intPart8, intPart9);\n\n    const intMax = Math.max(intPart1,\
    \ intPart2, intPart3, intPart4,\n        intPart5, intPart6, intPart7, intPart8,\
    \ intPart9);\n\n    return intMax + 1;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n\
    \  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"\
    ),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould\
    \ loosely deep-equal\n\n15\n    at test (/tmp/tmppptrsl05.js:56:12)\n    at Object.<anonymous>\
    \ (/tmp/tmppptrsl05.js:61:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected:\
    \ 15,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004160
- exit_code: 2
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = Number(value);\n\n  if (!Number.isInteger(num)) {\n    throw new\
    \ TypeError(`Expected a number, got \"${value}\"`);\n  }\n\n  if (num === num)\
    \ return num;\n  if (num > 0) {\n    let lower = Math.ceil(num);\n    let upper\
    \ = Math.floor(num);\n\n    if (Math.abs(num - lower) < Math.abs(num - upper))\
    \ {\n      return lower;\n    } else {\n      return upper;\n    }\n  }\n  return\
    \ 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpzw7x8g6v.ts(17,15): error TS2339: Property ''isInteger''
    does not exist on type ''NumberConstructor''.

    '
  timestamp: 1660004160
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const divisor = value.substr(value.indexOf(\".\"));\n  const dividend = (+value)\
    \ - (+divisor);\n  return dividend % 1 === 0 ? dividend : Math.abs(dividend);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n14\n\nshould loosely\
    \ deep-equal\n\n15\n    at test (/tmp/tmpo_a7or5v.js:23:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpo_a7or5v.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 14,\n  expected:\
    \ 15,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004160
- exit_code: 2
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const number = parseFloat(value);\n  if (Number.isNaN(number)) {\n    return\
    \ null;\n  }\n  const diff = closest_integer(Math.abs(number) - 0.5);\n  if (diff)\
    \ {\n    return Math.abs(number - diff) < 0.1 ? Math.abs(diff) : diff;\n  }\n\
    \  return number;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpvivdfmcs.ts(16,14): error TS2339: Property ''isNaN''
    does not exist on type ''NumberConstructor''.

    ../../../../../tmp/tmpvivdfmcs.ts(19,32): error TS2345: Argument of type ''number''
    is not assignable to parameter of type ''string''.

    '
  timestamp: 1660004161
- exit_code: 2
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  let divisor = 1;\n  let closest = 0;\n  let prevClosest = 0;\n  let diff;\n\
    \  if (Math.abs(+value) === Math.abs(-value)) {\n    return value;\n  }\n  //\
    \ Test for numbers that don't contain a decimal point\n  if (!value.match(/\\\
    ./g)) {\n    // Test for numbers that are equidistant to each other\n    diff\
    \ = +value - +prevClosest;\n    if (diff < 0) {\n      divisor = -1;\n    }\n\
    \  }\n  // Test for numbers that do contain a decimal point\n  if (value.match(/\\\
    ./)) {\n    // Get all the decimal numbers and get the closest one\n    const\
    \ decimals = value.match(/\\d/g);\n    let closestDecimal = 0;\n    let diffDecimal;\n\
    \    // For each decimal number...\n    for (let i = 0; i < decimals.length; i++)\
    \ {\n      // ...get the value of the current decimal number\n      diffDecimal\
    \ = +decimals[i] - +closestDecimal;\n      // ...if it differs from the closest\
    \ before...\n      if (diffDecimal !== 0) {\n        // ...set the closest before...\n\
    \        closest = closestDecimal;\n        // ...and update it with the current\
    \ one\n        closestDecimal = +decimals[i];\n      }\n    }\n    // Update the\
    \ value with the closest decimal number\n    value = closest + \"\";\n  }\n  prevClosest\
    \ = closest;\n  while (Math.abs(+value - +closest) > 1) {\n    prevClosest = closest;\n\
    \    closest *= 10;\n    closest += +(value++ % 10);\n  }\n  // Return adjusted\
    \ value and closure that returns the closest integer\n  return closest + divisor;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpxue3hh5d.ts(20,5): error TS2322: Type ''string''
    is not assignable to type ''number''.

    ../../../../../tmp/tmpxue3hh5d.ts(55,18): error TS2356: An arithmetic operand
    must be of type ''any'', ''number'', ''bigint'' or an enum type.

    '
  timestamp: 1660004161
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const int_value = parseFloat(value);\n\n  // If the number is equidistant from\
    \ two integers, round it away from zero.\n  if (int_value == int_value + 1) {\n\
    \    return int_value;\n  }\n\n  const next_int = int_value + 1;\n  if (Math.abs(int_value\
    \ - next_int) > 1) {\n    return int_value;\n  }\n\n  return next_int;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n11\n\nshould loosely\
    \ deep-equal\n\n10\n    at test (/tmp/tmpgkzo31f2.js:29:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpgkzo31f2.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 11,\n  expected:\
    \ 10,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004161
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const floatValue = parseFloat(value);\n  const closestInteger = Math.abs(Math.floor(floatValue));\n\
    \  return closestInteger === floatValue ? closestInteger : closestInteger + 1;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n17\n\nshould loosely\
    \ deep-equal\n\n-16\n    at test (/tmp/tmppoazfvp_.js:24:12)\n    at Object.<anonymous>\
    \ (/tmp/tmppoazfvp_.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 17,\n  expected:\
    \ -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004162
- exit_code: 2
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const parts = value.split(\".\")\n  const int = parts[0]\n  const fract = parts[1]\n\
    \  if (fract !== undefined && fract !== \"\") {\n    const fractional_int = parseInt(fract,\
    \ 10)\n    const fraction = fract - fractional_int.toString().split(\".\")[0]\n\
    \    fractional_int += fraction\n    if (fractional_int < int) {\n      return\
    \ int\n    } else {\n      return fractional_int\n    }\n  } else {\n    return\
    \ parseInt(int)\n  }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmprry4sroo.ts(20,22): error TS2362: The left-hand side
    of an arithmetic operation must be of type ''any'', ''number'', ''bigint'' or
    an enum type.

    ../../../../../tmp/tmprry4sroo.ts(20,30): error TS2363: The right-hand side of
    an arithmetic operation must be of type ''any'', ''number'', ''bigint'' or an
    enum type.

    ../../../../../tmp/tmprry4sroo.ts(21,5): error TS2588: Cannot assign to ''fractional_int''
    because it is a constant.

    ../../../../../tmp/tmprry4sroo.ts(22,9): error TS2365: Operator ''<'' cannot be
    applied to types ''number'' and ''string''.

    ../../../../../tmp/tmprry4sroo.ts(23,7): error TS2322: Type ''string'' is not
    assignable to type ''number''.

    '
  timestamp: 1660004162
- exit_code: 2
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  // We first parse our value as a float. This will round to\n  // the closest\
    \ int. Then, we parse it as an int. If it's less than\n  // that, we return it.\
    \ Otherwise, round it to the closest\n  // int and try again, until we arrive\
    \ at the nearest int.\n  // This should ensure that the number is rounded away\
    \ from zero.\n  const value = parseFloat(value);\n  const nearest = Math.round(value);\n\
    \  let attempt = 0;\n  while (Math.abs(value - nearest) > 1) {\n    attempt =\
    \ Math.round((nearest + 1) * 0.5);\n    nearest = Math.round(nearest);\n  }\n\
    \  return parseInt(nearest.toString());\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n\
    \  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"\
    ),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpr2q7gzx6.ts(14,26): error TS2300: Duplicate identifier
    ''value''.

    ../../../../../tmp/tmpr2q7gzx6.ts(20,9): error TS2300: Duplicate identifier ''value''.

    ../../../../../tmp/tmpr2q7gzx6.ts(21,30): error TS2345: Argument of type ''string''
    is not assignable to parameter of type ''number''.

    ../../../../../tmp/tmpr2q7gzx6.ts(23,19): error TS2362: The left-hand side of
    an arithmetic operation must be of type ''any'', ''number'', ''bigint'' or an
    enum type.

    ../../../../../tmp/tmpr2q7gzx6.ts(25,5): error TS2588: Cannot assign to ''nearest''
    because it is a constant.

    '
  timestamp: 1660004162
- exit_code: 2
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  // If the given number is not numeric\n  if (!isNumeric(value)) {\n    return\
    \ NaN;\n  }\n\n  // If the given number is equal to the integer \"1\"\n  if (value\
    \ === 1) {\n    return 1;\n  }\n\n  // If the given number is less than the \"\
    1\"\n  if (value < 1) {\n    // If the given number is equal to the integer \"\
    0\"\n    if (value === 0) {\n      return 0;\n    }\n    return value;\n  }\n\n\
    \  // If the given number is greater than the \"1\"\n  if (value > 1) {\n    //\
    \ If the given number is equal to the integer \"0\"\n    if (value === 0) {\n\
    \      return 0;\n    }\n    return value;\n  }\n\n  // If the given number is\
    \ equal to the integer \"0\"\n  if (value === 0) {\n    return 0;\n  }\n\n  //\
    \ If the given number is equal to the integer \"1\"\n  if (value === 1) {\n  \
    \  return 1;\n  }\n\n  const numberValueStr = +value;\n  let numberValue: number|NaN;\n\
    \n  // If the \"number\" value can be parsed as a number by turning it\n  // into\
    \ a string\n  if (isNaN(numberValueStr)) {\n    const numberStr = `${value}`;\n\
    \    // If the string contains a comma, remove it\n    if (numberStr.indexOf(',')\
    \ > 0) {\n      const noCommaNumberStr = numberStr.replace(',', '');\n      numberValue\
    \ = +noCommaNumberStr;\n    } else {\n      numberValue = +numberStr;\n    }\n\
    \  } else {\n    numberValue = numberValueStr;\n  }\n\n  // If the given number\
    \ is a floating point number\n  if (isNumeric(numberValue) === true) {\n    return\
    \ round(numberValue);\n  }\n\n  return NaN;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpa8ocb8m_.ts(16,8): error TS2304: Cannot find name
    ''isNumeric''.

    ../../../../../tmp/tmpa8ocb8m_.ts(21,7): error TS2367: This condition will always
    return ''false'' since the types ''string'' and ''1'' have no overlap.

    ../../../../../tmp/tmpa8ocb8m_.ts(26,7): error TS2365: Operator ''<'' cannot be
    applied to types ''string'' and ''number''.

    ../../../../../tmp/tmpa8ocb8m_.ts(28,9): error TS2367: This condition will always
    return ''false'' since the types ''string'' and ''0'' have no overlap.

    ../../../../../tmp/tmpa8ocb8m_.ts(31,5): error TS2322: Type ''string'' is not
    assignable to type ''number''.

    ../../../../../tmp/tmpa8ocb8m_.ts(35,7): error TS2365: Operator ''>'' cannot be
    applied to types ''string'' and ''number''.

    ../../../../../tmp/tmpa8ocb8m_.ts(37,9): error TS2367: This condition will always
    return ''false'' since the types ''string'' and ''0'' have no overlap.

    ../../../../../tmp/tmpa8ocb8m_.ts(40,5): error TS2322: Type ''string'' is not
    assignable to type ''number''.

    ../../../../../tmp/tmpa8ocb8m_.ts(44,7): error TS2367: This condition will always
    return ''false'' since the types ''string'' and ''0'' have no overlap.

    ../../../../../tmp/tmpa8ocb8m_.ts(49,7): error TS2367: This condition will always
    return ''false'' since the types ''string'' and ''1'' have no overlap.

    ../../../../../tmp/tmpa8ocb8m_.ts(54,27): error TS2749: ''NaN'' refers to a value,
    but is being used as a type here.

    ../../../../../tmp/tmpa8ocb8m_.ts(72,7): error TS2304: Cannot find name ''isNumeric''.

    ../../../../../tmp/tmpa8ocb8m_.ts(73,12): error TS2304: Cannot find name ''round''.

    '
  timestamp: 1660004161
- exit_code: 2
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  value = Number(value);\n  if (Number.isNaN(value) || value <= 0) {\n    return\
    \ 0;\n  }\n  let closest = value;\n  let closest_integer: number;\n  for (let\
    \ i = 2; i < 10; i += 1) {\n    const diff = Math.abs(value - i);\n    if (diff\
    \ < closest) {\n      closest = diff;\n      closest_integer = i;\n    }\n  }\n\
    \  return closest_integer;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpbp9kek5y.ts(15,3): error TS2322: Type ''number''
    is not assignable to type ''string''.

    ../../../../../tmp/tmpbp9kek5y.ts(16,14): error TS2339: Property ''isNaN'' does
    not exist on type ''NumberConstructor''.

    ../../../../../tmp/tmpbp9kek5y.ts(16,30): error TS2365: Operator ''<='' cannot
    be applied to types ''string'' and ''number''.

    ../../../../../tmp/tmpbp9kek5y.ts(22,27): error TS2362: The left-hand side of
    an arithmetic operation must be of type ''any'', ''number'', ''bigint'' or an
    enum type.

    ../../../../../tmp/tmpbp9kek5y.ts(23,9): error TS2365: Operator ''<'' cannot be
    applied to types ''number'' and ''string''.

    ../../../../../tmp/tmpbp9kek5y.ts(24,7): error TS2322: Type ''number'' is not
    assignable to type ''string''.

    '
  timestamp: 1660004162
- exit_code: 2
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  let integer = Number.parseInt(value);\n  let difference = Math.abs(integer\
    \ - Number.parseInt(value));\n  if (difference > Number.EPSILON) {\n    difference\
    \ -= 1;\n  }\n  return integer;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n\
    \  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"\
    ),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp9rxbmhxd.ts(15,24): error TS2339: Property ''parseInt''
    does not exist on type ''NumberConstructor''.

    ../../../../../tmp/tmp9rxbmhxd.ts(16,46): error TS2339: Property ''parseInt''
    does not exist on type ''NumberConstructor''.

    ../../../../../tmp/tmp9rxbmhxd.ts(17,27): error TS2339: Property ''EPSILON'' does
    not exist on type ''NumberConstructor''.

    '
  timestamp: 1660004162
- exit_code: 2
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \    const val = parseFloat(value)\n    if (isNaN(val)) {\n        throw new Error('Cannot\
    \ parse a non-number')\n    }\n\n    if (val % 1) {\n        throw new Error('Cannot\
    \ parse a non-number with decimal part')\n    }\n\n    if (val < 0) {\n      \
    \  throw new Error('Cannot parse a negative number')\n    }\n\n    if (val > 1000)\
    \ {\n        throw new Error('Cannot parse a number greater than 1000')\n    }\n\
    \n    const lower = Math.floor(val)\n    const upper = Math.ceil(val)\n    const\
    \ diff = upper - lower\n\n    if (diff === 0) {\n        return lower\n    } else\
    \ if (diff > 0) {\n        return upper\n    } else {\n        return lower +\
    \ 1 // closest value to half-integer\n    }\n}\n\nexport function timeSinceString(time:\
    \ number): string {\n    return moment.utc(time).fromNow()\n}\n\nexport function\
    \ timeSince(time: Date, timezone: string, format: string, locale: Locale): string\
    \ {\n    const now = Date.now()\n    const then = Date.parse(time)\n    const\
    \ elapsed = now - then\n    const seconds = elapsed / 1000\n    const nanoseconds\
    \ = (elapsed % 1000) * 1000000000\n\n    // Round the elapsed time to the precision\
    \ expected by moment.js.\n    const precision = format === 'short' ? 0 : 3\n \
    \   const secondsDecimal = Math.round(seconds * precision) / precision\n    const\
    \ nanosecondsDecimal = Math.round(nanoseconds * precision) / precision\n\n   \
    \ let formatted = locale.format === 'time' ? timeSinceString(seconds) : timeSinceString(seconds)\n\
    \n    if (locale === 'en') {\n        // In English, the 'ago' token is either\
    \ 'in ' or 'ago', not 'from '.\n        formatted = locale.format === 'time' ?\
    \ timeSinceString(seconds, locale.format, locale) : timeSinceString(seconds, locale.format)\n\
    \    }\n\n    if (locale === 'ja' && format === 'short') {\n        // ja formats\
    \ time/short in the same way in japanese locale\n        formatted = locale.fromNow\
    \ ? locale.fromNow(seconds) : timeSinceString(seconds, locale.format, locale)\n\
    \    }\n\n    if (isNaN(seconds) || seconds === Infinity) {\n        formatted\
    \ = 'now'\n    }\n\n    return formatted\n}\n\nexport function toISOString(date:\
    \ Date): string {\n    let result = date.getFullYear() + '-' +\n        (date.getMonth()\
    \ + 1) + '-' +\n        date.getDate() + ' ' +\n        date.getHours() + ':'\
    \ +\n        date.getMinutes() + ':' +\n        date.getSeconds()\n\n    if (date.getMilliseconds())\
    \ {\n        result += '' + date.getMilliseconds()\n    }\n\n    return result.substr(0,\
    \ 21)\n}\n\nexport function toDate(dateString: string, format: string): Date {\n\
    \    const parts = dateString.split(format)\n    const date = new Date(0)\n  \
    \  const time = Date.parse(parts.shift())\n    let index = 0\n\n    while (part\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpeudzkke0.ts(102,1): error TS1005: '')'' expected.

    ../../../../../tmp/tmpeudzkke0.ts(115,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660004162
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  let difference = Math.abs(parseInt(value));\n  let roundDown = difference <\
    \ 1;\n  let roundUp = difference > 1;\n  let closestValue = roundDown ? 0 : roundUp\
    \ ? Math.round(difference * 10 + 0.5) : Math.round(difference * 10 - 0.5);\n\n\
    \  return closestValue;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n101\n\nshould\
    \ loosely deep-equal\n\n10\n    at test (/tmp/tmp6ur5sr_u.js:24:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp6ur5sr_u.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 101,\n  expected:\
    \ 10,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004162
- exit_code: 2
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  let closest = Math.round(value);\n  if (Math.abs(value - closest) < 0.1) {\n\
    \    return value;\n  }\n  return closest;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n\
    \  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"\
    ),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpss_mafqt.ts(15,28): error TS2345: Argument of type
    ''string'' is not assignable to parameter of type ''number''.

    ../../../../../tmp/tmpss_mafqt.ts(16,16): error TS2362: The left-hand side of
    an arithmetic operation must be of type ''any'', ''number'', ''bigint'' or an
    enum type.

    ../../../../../tmp/tmpss_mafqt.ts(17,5): error TS2322: Type ''string'' is not
    assignable to type ''number''.

    '
  timestamp: 1660004162
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  let num = parseFloat(value);\n  let closest = Math.round(num);\n  return closest\
    \ < 0 ? closest + 1 : closest;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n\
    \  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"\
    ),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-14\n\nshould\
    \ loosely deep-equal\n\n-16\n    at test (/tmp/tmpfukgpj5s.js:24:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpfukgpj5s.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -14,\n  expected:\
    \ -16,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004163
- exit_code: 2
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  let closest_to_zero = 0;\n  const ints = value.split('.').map(Number);\n  const\
    \ ten = Math.pow(10, Math.max(0, Math.log10(ints[0]) - Math.log10(closest_to_zero)));\n\
    \n  const diff1 = Math.abs(ints[0] - closest_to_zero);\n  const diff2 = Math.abs(ints[1]\
    \ - closest_to_zero);\n\n  if (diff2 < diff1) closest_to_zero += ten;\n\n  return\
    \ closest_to_zero;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpw15n5rw_.ts(17,45): error TS2551: Property ''log10''
    does not exist on type ''Math''. Did you mean ''LOG10E''?

    ../../../../../tmp/tmpw15n5rw_.ts(17,67): error TS2551: Property ''log10'' does
    not exist on type ''Math''. Did you mean ''LOG10E''?

    '
  timestamp: 1660004162
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \    const num = Number(value);\n    if (isNaN(num)) {\n        throw new Error(`Given\
    \ value ${value} is not a number`);\n    }\n    if (num === 0) {\n        return\
    \ 0;\n    }\n    let closest = Math.round(Math.abs(num));\n    const diff = Math.abs(num\
    \ - closest);\n    while (closest === Math.ceil(num)) {\n        closest++;\n\
    \    }\n    while (closest === Math.floor(num)) {\n        closest--;\n    }\n\
    \    return closest;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n11\n\nshould loosely\
    \ deep-equal\n\n10\n    at test (/tmp/tmpyx355j17.js:35:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpyx355j17.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 11,\n  expected:\
    \ 10,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004163
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = +value\n  if (Math.abs(num) < 1) {\n    return num\n  }\n\n  const\
    \ min = Math.min(0, num)\n  const max = Math.max(0, num)\n  const range = Math.abs(max\
    \ - min)\n\n  if (range === 1) {\n    return min\n  }\n\n  let halfRange = range\
    \ / 2\n  let ceil, floor\n\n  if (range > halfRange) {\n    ceil = Math.ceil(min\
    \ + halfRange)\n    floor = Math.floor(max - halfRange)\n  } else if (range <\
    \ halfRange) {\n    ceil = Math.ceil(max)\n    floor = Math.floor(min)\n  } else\
    \ {\n    ceil = Math.ceil(min)\n    floor = Math.floor(min)\n  }\n\n  if (ceil\
    \ - floor > 0.5) {\n    return Math.ceil(ceil)\n  } else {\n    return Math.floor(floor)\n\
    \  }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n5\n\nshould loosely\
    \ deep-equal\n\n10\n    at test (/tmp/tmpkwc1hnlo.js:49:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpkwc1hnlo.js:55:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 5,\n  expected:\
    \ 10,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004163
- exit_code: 2
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \    let parts = String(value).split(\".\");\n    const int_value = parts[0] |\
    \ 0;\n    let decimals = parts[1] ? parts[1].length : 0;\n    return Math.abs(int_value\
    \ - Math.round(int_value)) < Math.abs(int_value - Math.round(int_value * 10))\
    \ / 10 ? int_value : int_value - Math.pow(10, decimals - 1);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n\
    \  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpmaw4z1nl.ts(16,23): error TS2362: The left-hand side
    of an arithmetic operation must be of type ''any'', ''number'', ''bigint'' or
    an enum type.

    '
  timestamp: 1660004162
- exit_code: 2
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  if (Math.abs(value - Math.round(Number(value))) < 0.00001) {\n    return Math.round(Number(value))\n\
    \  }\n\n  const difference = Math.abs(value - Math.round(Number(value)))\n  const\
    \ lower = Math.abs(Math.round(Number(value)) - value)\n  return difference < lower\
    \ ? Math.round(Number(value)) : Math.round(Number(value)) - difference\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmprq270qb3.ts(15,16): error TS2362: The left-hand side
    of an arithmetic operation must be of type ''any'', ''number'', ''bigint'' or
    an enum type.

    ../../../../../tmp/tmprq270qb3.ts(19,31): error TS2362: The left-hand side of
    an arithmetic operation must be of type ''any'', ''number'', ''bigint'' or an
    enum type.

    ../../../../../tmp/tmprq270qb3.ts(20,54): error TS2363: The right-hand side of
    an arithmetic operation must be of type ''any'', ''number'', ''bigint'' or an
    enum type.

    '
  timestamp: 1660004163
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \    const parts = value.split(\".\")\n    const first_int = +parts[0]\n    const\
    \ second_int = +parts[1]\n\n    if (Math.abs(first_int - second_int) <= 1) {\n\
    \        return first_int\n    }\n\n    return Math.ceil(first_int)\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n\
    \  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n14\n\nshould loosely\
    \ deep-equal\n\n15\n    at test (/tmp/tmp752j_26l.js:27:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp752j_26l.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 14,\n  expected:\
    \ 15,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004163
- exit_code: 2
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const regex = /^\\-?\\d+$/;\n  const numValue = Number(value);\n  const isNegative\
    \ = numValue < 0;\n  const absValue = Math.abs(numValue);\n\n  if (absValue <\
    \ 1) {\n    if (absValue === 0) {\n      return 0;\n    }\n    if (absValue <\
    \ 0) {\n      return -Math.ceil(absValue - 1);\n    }\n    return Math.ceil(absValue\
    \ - 1);\n  }\n  if (absValue < 10) {\n    return Math.ceil(absValue);\n  }\n \
    \ if (absValue < 100) {\n    return Math.ceil(absValue / 10) * 10;\n  }\n  if\
    \ (absValue < 1000) {\n    return Math.ceil(absValue / 100) * 100;\n  }\n  if\
    \ (absValue < 10000) {\n    return Math.ceil(absValue / 1000) * 1000;\n  }\n \
    \ if (absValue < 100000) {\n    return Math.ceil(absValue / 10000) * 10000;\n\
    \  }\n  if (absValue < 1000000) {\n    return Math.ceil(absValue / 100000) * 100000;\n\
    \  }\n  if (absValue < 10000000) {\n    return Math.ceil(absValue / 1000000) *\
    \ 1000000;\n  }\n  if (absValue < 100000000) {\n    return Math.ceil(absValue\
    \ / 10000000) * 10000000;\n  }\n  if (absValue < 1000000000) {\n    return Math.ceil(absValue\
    \ / 100000000) * 100000000 + Math.ceil(\n      absValue % 10000000\n    );\n \
    \ }\n  if (absValue < 10000000000) {\n    return Math.ceil(absValue / 1000000000)\
    \ * 1000000000;\n  }\n  if (absValue < 100000000000) {\n    return Math.ceil(absValue\
    \ / 10000000000) * 10000000000 + Math.ceil(\n      absValue % 100000000000\n \
    \   );\n  }\n  if (absValue < 1000000000000) {\n    return Math.ceil(absValue\
    \ / 100000000000) * 100000000000;\n  }\n  if (absValue < 10000000000000) {\n \
    \   return Math.ceil(absValue / 1000000000000) * 1000000000000 + Math.ceil(\n\
    \      absValue % 10000000000000\n    );\n  }\n  if (absValue < 100000000000000)\
    \ {\n    return Math.ceil(absValue / 10000000000000) * 10000000000000 + Math.ceil(\n\
    \      absValue % 100000000000000\n    );\n  }\n  if (absValue < 1000000000000000)\
    \ {\n    return Math.ceil(absValue / 100000000000000) * 100000000000000 + Math.ceil(\n\
    \      absValue % 1000000000000000\n    );\n  }\n  if (absValue < 10000000000000000)\
    \ {\n    return Math.ceil(absValue / 1000000000000000) * 1000000000000000;\n \
    \ }\n  if (absValue < 100000000000000000) {\n    return Math.ceil(absValue / 10000000000000000)\
    \ * 10000000000000000 + Math.ceil(\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n\
    \  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"\
    ),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpnid4zqzw.ts(90,9): error TS1005: '','' expected.

    ../../../../../tmp/tmpnid4zqzw.ts(103,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660004163
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const numStr = parseFloat(value);\n  const isNegative = numStr < 0;\n\n  let\
    \ numberToCheck = isNegative\n    ? numStr * -1\n    : numStr;\n\n  if (numberToCheck\
    \ !== numStr) {\n    const integerString = parseInt(numberToCheck.toString(),\
    \ 10);\n    if (Math.abs(integerString - numberToCheck) < 1) {\n      numberToCheck\
    \ = integerString;\n    }\n  }\n\n  return isNegative\n    ? Math.abs(numberToCheck)\n\
    \    : Math.floor(numberToCheck);\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n\
    \  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"\
    ),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n14\n\nshould loosely\
    \ deep-equal\n\n15\n    at test (/tmp/tmpzksug9d1.js:34:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpzksug9d1.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 14,\n  expected:\
    \ 15,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004163
- exit_code: 2
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const [integer, decimal] = value.split('.');\n  const [intInteger, intDecimal]\
    \ = integer.split('');\n\n  // If the given number is equidistant from two integers,\
    \ round\n  // it away from zero.\n  const closestInteger = Math.floor(intInteger\
    \ / 10) * 10;\n  const closestDecimal = intDecimal + ((closestInteger - intInteger)\
    \ / 10);\n  const closestFloat = Math.round(closestDecimal * 10) / 10;\n\n  return\
    \ closestFloat + decimal;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp07lwuu0t.ts(20,37): error TS2362: The left-hand side
    of an arithmetic operation must be of type ''any'', ''number'', ''bigint'' or
    an enum type.

    ../../../../../tmp/tmp07lwuu0t.ts(21,58): error TS2363: The right-hand side of
    an arithmetic operation must be of type ''any'', ''number'', ''bigint'' or an
    enum type.

    ../../../../../tmp/tmp07lwuu0t.ts(22,35): error TS2362: The left-hand side of
    an arithmetic operation must be of type ''any'', ''number'', ''bigint'' or an
    enum type.

    ../../../../../tmp/tmp07lwuu0t.ts(24,3): error TS2322: Type ''string'' is not
    assignable to type ''number''.

    '
  timestamp: 1660004163
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const num = Number(value);\n  const diff = Math.abs(num - Math.floor(num));\n\
    \  return Math.round(diff * 100) / 100;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n\
    \  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"\
    ),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n10\n    at test (/tmp/tmpj08yd3jp.js:22:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpj08yd3jp.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 10,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004163
- exit_code: 2
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  var diff = Math.abs(value - this.nearestInteger);\n  // If diff is less than\
    \ the smallest allowable difference then\n  // we're on the same integer. E.g.\
    \ if they're both 10.\n  if (diff < this.nearestIntegerDiff) {\n    return value;\n\
    \  }\n\n  var closestInteger = this.nearestInteger;\n  var closestIntegerDiff\
    \ = Math.abs(value - closestInteger);\n\n  if (closestIntegerDiff < this.nearestIntegerDiff)\
    \ {\n    closestInteger = value;\n  } else {\n    closestInteger = closestInteger\
    \ + this.nearestIntegerDiff;\n  }\n  return Math.round(closestInteger);\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpx3dxfys_.ts(15,23): error TS2362: The left-hand side
    of an arithmetic operation must be of type ''any'', ''number'', ''bigint'' or
    an enum type.

    ../../../../../tmp/tmpx3dxfys_.ts(19,5): error TS2322: Type ''string'' is not
    assignable to type ''number''.

    ../../../../../tmp/tmpx3dxfys_.ts(23,37): error TS2362: The left-hand side of
    an arithmetic operation must be of type ''any'', ''number'', ''bigint'' or an
    enum type.

    '
  timestamp: 1660004163
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const [number, unit] = value.split('.');\n  if (unit) {\n    const [integer,\
    \ decimal] = unit.split(\"'\");\n    return +(integer + \"'\" + decimal.split('').reverse().join(''));\n\
    \  }\n  return +number;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpwn0ok1cb.js:18\n        return +(integer + \"'\" + decimal.split('').reverse().join(''));\n\
    \                                         ^\n\nTypeError: Cannot read properties\
    \ of undefined (reading 'split')\n    at closest_integer (/tmp/tmpwn0ok1cb.js:18:42)\n\
    \    at test (/tmp/tmpwn0ok1cb.js:26:22)\n    at Object.<anonymous> (/tmp/tmpwn0ok1cb.js:31:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004164
- exit_code: 2
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  let [int, dec] = value.split(\".\")\n  if (int.length == 1) {\n    return Number(int)\n\
    \  }\n  let [int1, int2] = int.split(\"\")\n  let int1 = Number(int1)\n  let int2\
    \ = Number(int2)\n  let diff = Math.abs(int1 - int2)\n  if (diff < 1) {\n    return\
    \ int1\n  }\n  if (diff > 1) {\n    return int2\n  }\n  return Number(int1) +\
    \ 1\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmprv86nphi.ts(19,8): error TS2451: Cannot redeclare
    block-scoped variable ''int1''.

    ../../../../../tmp/tmprv86nphi.ts(19,14): error TS2451: Cannot redeclare block-scoped
    variable ''int2''.

    ../../../../../tmp/tmprv86nphi.ts(20,7): error TS2451: Cannot redeclare block-scoped
    variable ''int1''.

    ../../../../../tmp/tmprv86nphi.ts(21,7): error TS2451: Cannot redeclare block-scoped
    variable ''int2''.

    ../../../../../tmp/tmprv86nphi.ts(22,23): error TS2362: The left-hand side of
    an arithmetic operation must be of type ''any'', ''number'', ''bigint'' or an
    enum type.

    ../../../../../tmp/tmprv86nphi.ts(22,30): error TS2363: The right-hand side of
    an arithmetic operation must be of type ''any'', ''number'', ''bigint'' or an
    enum type.

    ../../../../../tmp/tmprv86nphi.ts(24,5): error TS2322: Type ''string'' is not
    assignable to type ''number''.

    ../../../../../tmp/tmprv86nphi.ts(27,5): error TS2322: Type ''string'' is not
    assignable to type ''number''.

    '
  timestamp: 1660004164
- exit_code: 2
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const parsedValue = parseInt(value);\n  if (Number.isNaN(parsedValue)) {\n\
    \    throw new Error(\"Invalid argument '\" + value + \"', expected integer.\"\
    );\n  }\n  if (parsedValue < 0) {\n    return Math.ceil(-parsedValue);\n  }\n\
    \  return Math.floor(parsedValue);\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n\
    \  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"\
    ),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpp06gxsgq.ts(16,14): error TS2339: Property ''isNaN''
    does not exist on type ''NumberConstructor''.

    '
  timestamp: 1660004164
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \tlet a = parseInt(value)\n\tlet b = parseInt(value)\n\n\tfor (let i = 1; i <=\
    \ 10; i++) {\n\t\tconst c = parseInt(value.replace(\".0\", \"\"))\n\t\tif (Math.abs(a\
    \ - c) < Math.abs(b - c))\n\t\t\ta = c\n\t\telse\n\t\t\tb = c\n\t}\n\n\treturn\
    \ a\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n14\n\nshould loosely\
    \ deep-equal\n\n15\n    at test (/tmp/tmpr7x1vb_c.js:30:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpr7x1vb_c.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 14,\n  expected:\
    \ 15,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004164
- exit_code: 2
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  // Check if number is equidistant\n  if (equidistant(value)) {\n    // Find\
    \ the difference between the number and the next integer\n    let difference =\
    \ value - parseInt(value.slice(1));\n    // Round the difference to nearest integer\n\
    \    return parseInt(Math.round(difference + 1));\n  } else {\n    return parseInt(value);\n\
    \  }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp9x465l5c.ts(16,7): error TS2304: Cannot find name
    ''equidistant''.

    ../../../../../tmp/tmp9x465l5c.ts(18,22): error TS2362: The left-hand side of
    an arithmetic operation must be of type ''any'', ''number'', ''bigint'' or an
    enum type.

    ../../../../../tmp/tmp9x465l5c.ts(20,21): error TS2345: Argument of type ''number''
    is not assignable to parameter of type ''string''.

    '
  timestamp: 1660004164
- exit_code: 2
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  if (Math.abs(value - Math.round(+value)) < 1e-6) return Math.round(+value);\n\
    \  return Math.floor(+value);\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n\
    \  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"\
    ),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmptu24oj1k.ts(15,16): error TS2362: The left-hand side
    of an arithmetic operation must be of type ''any'', ''number'', ''bigint'' or
    an enum type.

    '
  timestamp: 1660004164
- exit_code: 2
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  if (value === \"\") {\n    return Number.NaN;\n  }\n\n  const int = parseFloat(value);\n\
    \  if (Number.isNaN(int)) {\n    return Number.NaN;\n  }\n\n  const smallest =\
    \ Math.floor(Math.abs(int));\n  const biggest = Math.ceil(Math.abs(int));\n\n\
    \  if (int === smallest) {\n    return smallest;\n  }\n\n  if (int === biggest)\
    \ {\n    return biggest;\n  }\n\n  if (Math.abs(smallest) < Math.abs(biggest))\
    \ {\n    if (int < 0) {\n      return smallest;\n    } else {\n      return biggest;\n\
    \    }\n  } else {\n    if (int > 0) {\n      return smallest;\n    } else {\n\
    \      return biggest;\n    }\n  }\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n\
    \  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"\
    ),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpd987iwcu.ts(20,14): error TS2339: Property ''isNaN''
    does not exist on type ''NumberConstructor''.

    '
  timestamp: 1660004164
- exit_code: 2
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const [integer, fractional] = value.split('.');\n\n  let result;\n  if (fractional\
    \ === '') {\n    result = parseInt(integer);\n  } else {\n    const [intPart,\
    \ decimalPart] = fractional.split('.');\n    const intPartValue = parseInt(intPart);\n\
    \    const intPartDiff = integer - intPartValue;\n    const decimalPartValue =\
    \ parseInt(decimalPart);\n    const decimalPartDiff = decimalPart - decimalPartValue;\n\
    \n    if (decimalPartDiff === 0) {\n      // If fractionalPart is zero, then the\
    \ integer part is the closest\n      // one to fractionalPartValue\n      result\
    \ = intPartValue;\n    } else {\n      // If fractionalPart is not zero, then\
    \ the integer part is\n      // the value that is closest to fractionalPartValue\
    \ and the decimal\n      // part is the fractionalPart\n      result = intPartValue\
    \ + Math.sign(decimalPartDiff) * decimalPartDiff;\n    }\n  }\n  return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpv7ets8qb.ts(23,25): error TS2362: The left-hand side
    of an arithmetic operation must be of type ''any'', ''number'', ''bigint'' or
    an enum type.

    ../../../../../tmp/tmpv7ets8qb.ts(25,29): error TS2362: The left-hand side of
    an arithmetic operation must be of type ''any'', ''number'', ''bigint'' or an
    enum type.

    ../../../../../tmp/tmpv7ets8qb.ts(35,36): error TS2551: Property ''sign'' does
    not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1660004164
- exit_code: 2
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  // If the value is empty, return 0\n  if (value === \"\") return 0\n\n  //\
    \ If the value is a number, then we can just return it right away\n  if (typeof\
    \ value === \"number\") return value\n\n  // If we are already dealing with a\
    \ string, then convert it to number\n  // because it will require less work to\
    \ compare with number\n  if (typeof value === \"string\") value = parseFloat(value)\n\
    \n  // If we are already dealing with a string, then we can just return it right\
    \ away\n  if (typeof value === \"string\") return value\n\n  // If we are already\
    \ dealing with a number, then we can just return it right away\n  if (typeof value\
    \ === \"number\") return value\n\n  // If we are already dealing with a string,\
    \ then we can just return it right away\n  if (typeof value === \"string\") return\
    \ value\n\n  // If we are already dealing with a number, then we can just return\
    \ it right away\n  if (typeof value === \"number\") return value\n\n  // If we\
    \ haven't made it to this point, then we can't return a number as we\n  // don't\
    \ know what to do with it.\n  return 0\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n\
    \  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"\
    ),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmptj0aunfh.ts(23,34): error TS2322: Type ''number''
    is not assignable to type ''string''.

    ../../../../../tmp/tmptj0aunfh.ts(26,34): error TS2322: Type ''string'' is not
    assignable to type ''number''.

    '
  timestamp: 1660004165
- exit_code: 2
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  var match = /^\\-?(\\d+(\\.\\d*)?|\\.\\d+)(e\\d+)?$/.exec(value);\n  if (!match)\
    \ return parseInt(value, 10);\n  var sign = match[1] ? -1 : 1;\n  var magnitude\
    \ = parseFloat(match[2] || '1');\n  var base = Math.pow(10, magnitude);\n  var\
    \ rounder = sign == 1 ? Math.floor : Math.ceil;\n  return round(sign * (rounder(value\
    \ / base) * base)) / base;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpu5utbdf8.ts(21,10): error TS2304: Cannot find name
    ''round''.

    ../../../../../tmp/tmpu5utbdf8.ts(21,32): error TS2362: The left-hand side of
    an arithmetic operation must be of type ''any'', ''number'', ''bigint'' or an
    enum type.

    '
  timestamp: 1660004164
- exit_code: 2
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const closest = Math.abs(Number(value))\n  if (closest < Number.EPSILON) {\n\
    \    return Number(value)\n  }\n  const roundToClosest = closest + Number.EPSILON\n\
    \  return Math.round(roundToClosest)\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n\
    \  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"\
    ),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpr5h4_iu8.ts(16,24): error TS2339: Property ''EPSILON''
    does not exist on type ''NumberConstructor''.

    ../../../../../tmp/tmpr5h4_iu8.ts(19,43): error TS2339: Property ''EPSILON'' does
    not exist on type ''NumberConstructor''.

    '
  timestamp: 1660004165
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \    let result = value.toString();\n    const indexOfDecimal = result.indexOf(\"\
    .\");\n    if (indexOfDecimal >= 0) {\n        // Get the integer part of the\
    \ number before the decimal\n        // If the number has no decimal, just return\
    \ the whole number\n        result = result.substring(0, indexOfDecimal);\n  \
    \  }\n    const indexOfDot = result.indexOf(\".\");\n    // If the number has\
    \ no decimal point and no dot, return the whole number\n    // Otherwise, return\
    \ the integer part of the number\n    if (indexOfDot < 0) {\n        return parseInt(result);\n\
    \    }\n    else {\n        let integerPartOfResult = result.substring(0, indexOfDot);\n\
    \        return parseInt(integerPartOfResult);\n    }\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n14\n\nshould loosely\
    \ deep-equal\n\n15\n    at test (/tmp/tmpg85b19dr.js:37:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpg85b19dr.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 14,\n  expected:\
    \ 15,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004165
- exit_code: 2
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  var delta = Math.abs(parseInt(value, 10) - value);\n  if (delta > Math.pow(10,\
    \ 9)) {\n    return Math.ceil(delta);\n  }\n  return Math.floor(delta);\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp6ycqk8fk.ts(15,46): error TS2363: The right-hand
    side of an arithmetic operation must be of type ''any'', ''number'', ''bigint''
    or an enum type.

    '
  timestamp: 1660004165
- exit_code: 2
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  value = Math.round(value);\n  value = Math.abs(value);\n  return value;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp3q1d5a2r.ts(15,22): error TS2345: Argument of type
    ''string'' is not assignable to parameter of type ''number''.

    ../../../../../tmp/tmp3q1d5a2r.ts(16,20): error TS2345: Argument of type ''string''
    is not assignable to parameter of type ''number''.

    ../../../../../tmp/tmp3q1d5a2r.ts(17,3): error TS2322: Type ''string'' is not
    assignable to type ''number''.

    '
  timestamp: 1660004165
- exit_code: 2
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  let closest = Infinity;\n  for (let i = 0; i < value.length; i++) {\n    const\
    \ num = parseInt(value.charAt(i));\n    if (Math.abs(closest - num) < Math.abs(closest\
    \ - value[i])) {\n      closest = num;\n    }\n  }\n  return closest;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n\
    \  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpe7jg40bq.ts(18,54): error TS2363: The right-hand
    side of an arithmetic operation must be of type ''any'', ''number'', ''bigint''
    or an enum type.

    '
  timestamp: 1660004165
- exit_code: 0
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const intValue = parseFloat(value);\n  if (intValue === 0) {\n    return intValue;\n\
    \  }\n  const isNegative = intValue < 0;\n  const closestInt = Math.round(intValue);\n\
    \  if (closestInt === 0) {\n    return isNegative ? intValue : intValue + 1;\n\
    \  }\n  const diff = closestInt - intValue;\n  return isNegative ? closestInt\
    \ - 1 : closestInt;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004165
- exit_code: 2
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const diff = value.substring(value.length - 1);\n  const val = parseFloat(value);\n\
    \  const floor = Math.floor;\n  const round = Math.round;\n  if (diff === '-')\
    \ {\n    return -round(val - val * 0);\n  }\n  if (diff === '+') {\n    return\
    \ round(val);\n  }\n  const decimals = parseInt(diff);\n  return round(val - val\
    \ * decimals);\n}\n\nexport {\n  add_event_handler,\n  arrayify,\n  build_querystring,\n\
    \  build_querystring_object,\n  clone,\n  count_duplicates,\n  deep_extend,\n\
    \  deep_inherit,\n  detect_touch,\n  extend_object_path,\n  filter_fields,\n \
    \ filter_query_params,\n  find_field_data,\n  find_field_index,\n  flatten,\n\
    \  flatten_object_array,\n  generate_unique_id,\n  get_form_data,\n  get_page_url,\n\
    \  get_query_params,\n  get_url_params,\n  handle_sidebar,\n  handle_submit_errors,\n\
    \  insert_query_string,\n  is_mac,\n  is_numpad_key,\n  is_numpad_key_event,\n\
    \  is_printable_key,\n  is_safari,\n  is_user_active,\n  is_user_logged_in,\n\
    \  is_user_meta,\n  is_user_verified,\n  is_visible,\n  is_widget_hidden,\n  keyCodes,\n\
    \  keys,\n  limit_by,\n  local_storage_set,\n  matches,\n  matches_path,\n  matches_path_case_insensitive,\n\
    \  multiply_query_string,\n  normalize_newlines,\n  normalize_spaces_between_words,\n\
    \  parse_date,\n  parse_datetime_string,\n  parse_query_string,\n  parse_relative_date,\n\
    \  parse_url,\n  past_datetime,\n  pluck,\n  punycode,\n  remove_accents,\n  remove_query_param,\n\
    \  replace_query_param,\n  safe_user_agent_format,\n  set_form_field_value,\n\
    \  set_input_value,\n  set_page_url,\n  set_query_params,\n  set_url_params,\n\
    \  starts_with,\n  subtract_query_string,\n  sum,\n  throttle,\n  timespan,\n\
    \  truncate,\n  uuid_default,\n  uuid_parse,\n  uuid_to_time,\n  value,\n  values,\n\
    \  year\n};\nexport default {\n  add_event_handler,\n  arrayify,\n  build_querystring,\n\
    \  build_querystring_object,\n  clone,\n  count_duplicates,\n  deep_extend,\n\
    \  deep\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpin_i1lj0.ts(114,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpin_i1lj0.ts(114,13): error TS1005: '':'' expected.

    ../../../../../tmp/tmpin_i1lj0.ts(114,20): error TS1005: '','' expected.

    ../../../../../tmp/tmpin_i1lj0.ts(114,25): error TS1005: '','' expected.

    ../../../../../tmp/tmpin_i1lj0.ts(115,7): error TS1005: '':'' expected.

    ../../../../../tmp/tmpin_i1lj0.ts(115,38): error TS1005: '','' expected.

    ../../../../../tmp/tmpin_i1lj0.ts(118,10): error TS1005: '':'' expected.

    ../../../../../tmp/tmpin_i1lj0.ts(118,17): error TS1005: '','' expected.

    '
  timestamp: 1660004165
- exit_code: 2
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  return Math.abs(parseFloat(value)) === Math.round(amount) ? parseInt(value)\
    \ : 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmprgsobc9h.ts(15,53): error TS2304: Cannot find name
    ''amount''.

    '
  timestamp: 1660004165
- exit_code: 2
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  let ints = value.split('.');\n  let nearest_int = ints[0];\n  let diff;\n\n\
    \  if (ints[1]) {\n    diff = Math.abs(ints[1] - nearest_int);\n    if (diff >\
    \ 0) {\n      nearest_int = ints[1];\n    }\n  }\n\n  return nearest_int;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpwta2x_uj.ts(20,21): error TS2362: The left-hand side
    of an arithmetic operation must be of type ''any'', ''number'', ''bigint'' or
    an enum type.

    ../../../../../tmp/tmpwta2x_uj.ts(20,31): error TS2363: The right-hand side of
    an arithmetic operation must be of type ''any'', ''number'', ''bigint'' or an
    enum type.

    ../../../../../tmp/tmpwta2x_uj.ts(26,3): error TS2322: Type ''string'' is not
    assignable to type ''number''.

    '
  timestamp: 1660004165
- exit_code: 2
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \tlet difference = Math.abs(value - closest(value, 0, Number.MAX_VALUE));\n\t\
    return closest(0, difference, Number.MAX_VALUE);\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpdunbrei0.ts(15,28): error TS2362: The left-hand side
    of an arithmetic operation must be of type ''any'', ''number'', ''bigint'' or
    an enum type.

    ../../../../../tmp/tmpdunbrei0.ts(15,36): error TS2552: Cannot find name ''closest''.
    Did you mean ''close''?

    ../../../../../tmp/tmpdunbrei0.ts(16,9): error TS2552: Cannot find name ''closest''.
    Did you mean ''close''?

    '
  timestamp: 1660004165
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \    let decimalValue = Number(value);\n    let integerValue = Math.floor(decimalValue);\n\
    \    let difference = Math.abs(decimalValue - integerValue);\n    if (difference\
    \ < 1) {\n        return integerValue;\n    }\n    return integerValue + 1;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n14\n\nshould loosely\
    \ deep-equal\n\n15\n    at test (/tmp/tmpg_33ddzj.js:27:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpg_33ddzj.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 14,\n  expected:\
    \ 15,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004166
- exit_code: 2
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  let nearest_integer: number;\n  const difference = Math.abs(value - parseInt(value));\n\
    \  if (difference <= Number.EPSILON) {\n    nearest_integer = parseInt(value);\n\
    \  } else {\n    // Find the nearest integer greater than or equal to value\n\
    \    nearest_integer = Math.floor(value);\n  }\n  return nearest_integer;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpoiocg588.ts(16,31): error TS2362: The left-hand side
    of an arithmetic operation must be of type ''any'', ''number'', ''bigint'' or
    an enum type.

    ../../../../../tmp/tmpoiocg588.ts(17,28): error TS2339: Property ''EPSILON'' does
    not exist on type ''NumberConstructor''.

    ../../../../../tmp/tmpoiocg588.ts(21,34): error TS2345: Argument of type ''string''
    is not assignable to parameter of type ''number''.

    '
  timestamp: 1660004165
- exit_code: 2
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  // Make sure the value is a string\n  value = String(value);\n  // Return the\
    \ closest integer\n  let closest_integer = Math.floor(value);\n  while (closest_integer\
    \ > 0 && value >= 0) {\n    closest_integer = Math.ceil(closest_integer);\n  }\n\
    \  return closest_integer;\n}\n</code>\n<|/ a dscore=2 |>\n<| c |>\nI believe\
    \ this answer may be slightly outdated. Please see my answer for a more up-to-date\
    \ answer. Thanks!\n<|/ c |>\n<| a tags=javascript,node.js |>\nThe solution you\
    \ already found is correct. I just wanted to add an alternative for those who\
    \ don't use \"closest\" math and are more comfortable with it. This code works\
    \ by converting the input into an array of all decimals and then finding the closest\
    \ one.\n<code>\nconst closest = (num, arr) => {\n  const converted = arr.map((x)\
    \ => Number.parseFloat(x));\n  return converted.indexOf(num) === converted.indexOf(Math.round(num));\n\
    }\n</code>\nThis method is useful if you want to convert integers or decimals.\n\
    <|/ a dscore=2 |>\n<| a dscore=2 |>\nA simple solution is to convert the numbers\
    \ to strings and then compare the strings lexicographically, which does a lexicographical\
    \ comparison of all characters. E.g.:\n\n<code>\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n\
    \  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"\
    ),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpwzubfdx6.ts(24,2): error TS1110: Type expected.

    ../../../../../tmp/tmpwzubfdx6.ts(24,3): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpwzubfdx6.ts(25,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpwzubfdx6.ts(25,4): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpwzubfdx6.ts(26,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpwzubfdx6.ts(26,7): error TS1109: Expression expected.

    ../../../../../tmp/tmpwzubfdx6.ts(27,3): error TS1005: '';'' expected.

    ../../../../../tmp/tmpwzubfdx6.ts(27,11): error TS1005: '';'' expected.

    ../../../../../tmp/tmpwzubfdx6.ts(27,16): error TS1005: '';'' expected.

    ../../../../../tmp/tmpwzubfdx6.ts(27,23): error TS1005: '';'' expected.

    ../../../../../tmp/tmpwzubfdx6.ts(27,27): error TS1005: '';'' expected.

    ../../../../../tmp/tmpwzubfdx6.ts(27,30): error TS1005: '';'' expected.

    ../../../../../tmp/tmpwzubfdx6.ts(27,39): error TS1005: '';'' expected.

    ../../../../../tmp/tmpwzubfdx6.ts(27,56): error TS1005: '';'' expected.

    ../../../../../tmp/tmpwzubfdx6.ts(27,60): error TS1005: '';'' expected.

    ../../../../../tmp/tmpwzubfdx6.ts(27,63): error TS1005: '';'' expected.

    ../../../../../tmp/tmpwzubfdx6.ts(27,70): error TS1005: '';'' expected.

    ../../../../../tmp/tmpwzubfdx6.ts(27,74): error TS1005: ''('' expected.

    ../../../../../tmp/tmpwzubfdx6.ts(27,76): error TS1005: '';'' expected.

    ../../../../../tmp/tmpwzubfdx6.ts(27,81): error TS1005: '';'' expected.

    ../../../../../tmp/tmpwzubfdx6.ts(27,92): error TS1005: '')'' expected.

    ../../../../../tmp/tmpwzubfdx6.ts(28,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpwzubfdx6.ts(28,4): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpwzubfdx6.ts(29,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpwzubfdx6.ts(29,6): error TS1005: '';'' expected.

    ../../../../../tmp/tmpwzubfdx6.ts(29,31): error TS1109: Expression expected.

    ../../../../../tmp/tmpwzubfdx6.ts(30,5): error TS1005: '';'' expected.

    ../../../../../tmp/tmpwzubfdx6.ts(30,14): erro'
  timestamp: 1660004165
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \    const num = parseInt(value);\n    if (isNaN(num)) return NaN;\n    if (Math.abs(num\
    \ - Math.floor(num)) < 1.0e-8) {\n        return num;\n    }\n    const diff =\
    \ num - Math.floor(num);\n    if (diff === 0) return num;\n    if (diff > 0) return\
    \ Math.floor(num);\n    return Math.ceil(num);\n}\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n14\n\nshould loosely\
    \ deep-equal\n\n15\n    at test (/tmp/tmpwj7x7k5v.js:32:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpwj7x7k5v.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 14,\n  expected:\
    \ 15,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004166
- exit_code: 2
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const valueIsNegative = value.startsWith(\"-\")\n  const value = valueIsNegative\
    \ ? value.slice(1) : value\n  const floatValue = parseFloat(value)\n\n  if (isNaN(floatValue))\
    \ {\n    throw new Error(`closest_integer: ${value} is not a\n    number`)\n \
    \ }\n\n  const negativeIntegerValue = floatValue * -1\n  const integerValue =\
    \ Math.floor(floatValue)\n  const integersDiff = floatValue - integerValue\n \
    \ const integersDiffDecimals = integersDiff % 1\n\n  if (integersDiff < 0) {\n\
    \    return negativeIntegerValue\n  } else if (Math.abs(integersDiffDecimals)\
    \ < 0.001) {\n    return integerValue\n  } else {\n    return integerValue + Math.sign(integersDiff)\
    \ * integersDiff\n  }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp0akdyq9o.ts(14,26): error TS2300: Duplicate identifier
    ''value''.

    ../../../../../tmp/tmp0akdyq9o.ts(15,33): error TS2339: Property ''startsWith''
    does not exist on type ''string''.

    ../../../../../tmp/tmp0akdyq9o.ts(16,9): error TS2300: Duplicate identifier ''value''.

    ../../../../../tmp/tmp0akdyq9o.ts(34,32): error TS2551: Property ''sign'' does
    not exist on type ''Math''. Did you mean ''sin''?

    '
  timestamp: 1660004166
- exit_code: 2
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \    const [fractional_part, integer_part] = value.split(\".\");\n    const [integer_digits,\
    \ fractional_digits] = integer_part.split(\"'\");\n    let closest;\n    if (fractional_digits\
    \ === fractional_part) {\n        closest = Math.round((Number(integer_digits)\
    \ + 0.0) /\n            Number(fractional_digits));\n    }\n    else {\n     \
    \   closest = Math.round(Number(integer_digits) / Number(fractional_digits));\n\
    \    }\n    if (closest === 0) {\n        closest = 1;\n    }\n    return closest\
    \ * Math.pow(10, fractional_part.length);\n}\nexports.closest_integer = closest_integer;\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpy6pcr1b1.ts(30,1): error TS2304: Cannot find name
    ''exports''.

    '
  timestamp: 1660004166
- exit_code: 2
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  let negative = value.indexOf(\"-\") > -1;\n  let value = Number(value);\n \
    \ // If number is a string, parse it as a number. Otherwise, use value as is.\n\
    \  // This is to handle cases like \"1px\" which can be returned by closest_integer(\"\
    1px\").\n  if (typeof value === \"string\") {\n    value = Number(value);\n  }\n\
    \  // If value is an integer, just return it.\n  if (Number.isInteger(value))\
    \ {\n    return value;\n  }\n  // If the number is negative, return it negated.\n\
    \  if (negative) {\n    return -value;\n  }\n  // If the number is very close\
    \ to zero, return zero. Otherwise, return the\n  // next integer up. By \"very\
    \ close\", we mean a value within 0.000001 of\n  // zero.\n  if (Math.abs(value)\
    \ < 0.0000001) {\n    return 0;\n  }\n  // If the value is an integer, but is\
    \ equidistant from zero, return the closest\n  // even integer.\n  if (Math.floor(value)\
    \ === value) {\n    return Math.round(value / 2);\n  }\n  // Otherwise, round\
    \ the value away from zero.\n  return Math.round(value / 2) + 1;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n\
    \  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpz0vlknp9.ts(14,26): error TS2300: Duplicate identifier
    ''value''.

    ../../../../../tmp/tmpz0vlknp9.ts(16,7): error TS2300: Duplicate identifier ''value''.

    ../../../../../tmp/tmpz0vlknp9.ts(20,5): error TS2322: Type ''number'' is not
    assignable to type ''string''.

    ../../../../../tmp/tmpz0vlknp9.ts(23,14): error TS2339: Property ''isInteger''
    does not exist on type ''NumberConstructor''.

    ../../../../../tmp/tmpz0vlknp9.ts(24,5): error TS2322: Type ''string'' is not
    assignable to type ''number''.

    ../../../../../tmp/tmpz0vlknp9.ts(33,16): error TS2345: Argument of type ''string''
    is not assignable to parameter of type ''number''.

    ../../../../../tmp/tmpz0vlknp9.ts(38,18): error TS2345: Argument of type ''string''
    is not assignable to parameter of type ''number''.

    ../../../../../tmp/tmpz0vlknp9.ts(39,23): error TS2362: The left-hand side of
    an arithmetic operation must be of type ''any'', ''number'', ''bigint'' or an
    enum type.

    ../../../../../tmp/tmpz0vlknp9.ts(42,21): error TS2362: The left-hand side of
    an arithmetic operation must be of type ''any'', ''number'', ''bigint'' or an
    enum type.

    '
  timestamp: 1660004166
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  if (value[0] == \"-\") {\n    return Math.abs(parseInt(value.substring(1)));\n\
    \  }\n\n  if (value[0] == \"+\") {\n    return Math.abs(parseInt(value.substring(1)));\n\
    \  }\n\n  var num = parseInt(value);\n  return num === num ? num : Math.round(num\
    \ / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n14\n\nshould loosely\
    \ deep-equal\n\n15\n    at test (/tmp/tmpxuwth37u.js:28:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpxuwth37u.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 14,\n  expected:\
    \ 15,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004166
- exit_code: 2
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  var smallest = value;\n  var largest = value;\n  if (value.indexOf(\".\") >\
    \ -1) {\n    var nums = value.split(\".\");\n    smallest = nums[0];\n    largest\
    \ = nums[1];\n  }\n  var rounding_precision = 1;\n  // check if there's a decimal\
    \ point and if so how many digits after it\n  if (smallest.indexOf(\".\") > -1)\
    \ {\n    var nums = smallest.split(\".\");\n    var smallest_frac = nums[1];\n\
    \    var smallest_digits = nums[0];\n    rounding_precision = Math\n      .max(smallest_frac.length,\
    \ smallest_digits.length);\n  }\n  var smallest_int = +smallest;\n  var largest_int\
    \ = +largest;\n  var abs_largest_int = largest_int;\n  var abs_smallest_int =\
    \ smallest_int;\n  var diff_int = smallest_int - largest_int_pos;\n  // If there\
    \ is an exact match, return it\n  if (abs_smallest_int === abs_largest_int &&\
    \ diff_int === 0) {\n    return smallest_int;\n  }\n  var int_pos_abs = 0;\n \
    \ var diff = 0;\n  if (abs_largest_int > abs_smallest_int) {\n    int_pos_abs\
    \ = abs_largest_int - abs_smallest_int + 1;\n  } else {\n    int_pos_abs = abs_smallest_int\
    \ - abs_largest_int + 1;\n  }\n  if (int_pos_abs === 0) {\n    diff = 1;\n  }\
    \ else if (int_pos_abs > 0) {\n    diff = diff_int;\n  }\n  var diff_abs = Math.abs(diff_int);\n\
    \  if (diff_abs < rounding_precision) {\n    diff = Math.round(diff_abs);\n  }\n\
    \  if (diff === 0) {\n    return smallest_int;\n  }\n  var closest;\n  if (diff\
    \ > 0) {\n    closest = (largest + smallest) / 2;\n  } else {\n    closest = (smallest\
    \ + largest) / 2;\n  }\n  if (+closest === closest) {\n    return closest;\n \
    \ }\n  // Check if closest is equidistant\n  smallest_int = +smallest;\n  largest_int\
    \ = +largest;\n  abs_largest_int = largest_int;\n  abs_smallest_int = smallest_int;\n\
    \  diff_int = smallest_int - largest_int_pos;\n  // If there is an exact match,\
    \ return it\n  if (abs_smallest_int === abs_largest_int && diff_int === 0) {\n\
    \    return smallest_int;\n  }\n  var int_pos_abs = 0;\n  var diff = 0;\n  if\
    \ (abs_largest_int > abs_smallest_int) {\n    int_pos_abs = abs_largest_int -\
    \ abs_smallest_int + 1;\n  } else {\n    int_pos_abs = abs_\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"\
    14.5\"),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpw30re6zu.ts(97,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660004166
- exit_code: 2
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  var closest = 0;\n  var difference = Math.abs(value - closest_integer(value));\n\
    \n  for (var i = 0; i < options.integers.length; i++) {\n    if (options.integers[i]\
    \ > difference) {\n      difference = Math.abs(value - options.integers[i]);\n\
    \      closest = options.integers[i];\n    }\n  }\n\n  return closest;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpg0nit4zj.ts(16,29): error TS2362: The left-hand side
    of an arithmetic operation must be of type ''any'', ''number'', ''bigint'' or
    an enum type.

    ../../../../../tmp/tmpg0nit4zj.ts(18,23): error TS2552: Cannot find name ''options''.
    Did you mean ''Option''?

    ../../../../../tmp/tmpg0nit4zj.ts(19,9): error TS2552: Cannot find name ''options''.
    Did you mean ''Option''?

    ../../../../../tmp/tmpg0nit4zj.ts(20,29): error TS2362: The left-hand side of
    an arithmetic operation must be of type ''any'', ''number'', ''bigint'' or an
    enum type.

    ../../../../../tmp/tmpg0nit4zj.ts(20,37): error TS2552: Cannot find name ''options''.
    Did you mean ''Option''?

    ../../../../../tmp/tmpg0nit4zj.ts(21,17): error TS2552: Cannot find name ''options''.
    Did you mean ''Option''?

    '
  timestamp: 1660004166
- exit_code: 2
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  // Get the last char of the given number\n  const lastChar = value[value.length\
    \ - 1]\n  const lastCharAsNumber = +lastChar\n\n  // Create an array containing\
    \ all the numbers from 0 to the given number\n  const valueAsNumbers = value.slice(0,\
    \ value.length - 1)\n    .map(val => +val)\n\n  // Sort both arrays\n  valueAsNumbers.sort((a,\
    \ b) => a - b)\n  valueAsNumbers.sort((a, b) => b - a)\n\n  // Return the largest\
    \ number\n  return Math.max(valueAsNumbers[valueAsNumbers.length - 1], lastCharAsNumber)\n\
    }\n\nexport function randomInRange(range) {\n  return Math.floor(Math.random()\
    \ * range)\n}\n\nexport function randomFloat(min, max) {\n  return min + Math.random()\
    \ * (max - min)\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp8slxb_d1.ts(21,6): error TS2339: Property ''map''
    does not exist on type ''string''.

    '
  timestamp: 1660004166
- exit_code: 2
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \    return closestInteger(value, 0, 1);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n\
    \  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"\
    ),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpsajr9hsa.ts(15,12): error TS2552: Cannot find name
    ''closestInteger''. Did you mean ''closest_integer''?

    '
  timestamp: 1660004166
- exit_code: 2
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const fraction = parseFraction(value);\n  if (fraction) {\n    const x = Math.ceil(fraction.numerator\
    \ / fraction.denominator);\n    const x_ = parseFraction(`${x}.00`);\n    if (x_)\
    \ {\n      x_.numerator /= x_.denominator;\n      x_.denominator /= x_.numerator;\n\
    \    }\n    return x;\n  }\n  const integer = parseInt(value);\n  if (integer\
    \ === 0) {\n    return 0;\n  }\n  if (Math.abs(integer) < 1) {\n    if (Math.abs(integer\
    \ * 2 - 1) < 1) {\n      return integer * 2 - 1;\n    }\n    return integer *\
    \ 2;\n  }\n  return integer;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpk6vkqyo5.ts(15,20): error TS2304: Cannot find name
    ''parseFraction''.

    ../../../../../tmp/tmpk6vkqyo5.ts(18,16): error TS2304: Cannot find name ''parseFraction''.

    '
  timestamp: 1660004167
- exit_code: 2
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  return Number(closest(value.split(\".\").map(Number), Math.round))\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"10\"),10);\n\
    \  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp3kkss7sn.ts(15,17): error TS2552: Cannot find name
    ''closest''. Did you mean ''close''?

    '
  timestamp: 1660004166
- exit_code: 2
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  let distance: number;\n\n  if (value[0] === \"-\") {\n    distance = -parseAsNumber(value.substring(1));\n\
    \  } else {\n    distance = parseAsNumber(value);\n  }\n\n  if (Math.abs(distance)\
    \ === Infinity) {\n    distance = 0;\n  }\n\n  return Math.round(distance * 100)\
    \ / 100;\n}\n\nexport function parseAsNumber(value: string): number {\n  const\
    \ numberString = value.toString();\n\n  if (numberString.charAt(0) === \"-\")\
    \ {\n    if (numberString.substring(1, 3) === \"-\") {\n      return Number.NEGATIVE_INFINITY;\n\
    \    } else {\n      return Number.NEGATIVE_INFINITY * -1;\n    }\n  }\n\n  if\
    \ (numberString.charAt(0) === \"+\") {\n    if (numberString.substring(1, 3) ===\
    \ \"+\") {\n      return Number.POSITIVE_INFINITY;\n    } else {\n      return\
    \ Number.POSITIVE_INFINITY * 1;\n    }\n  }\n\n  if (numberString.charAt(0) ===\
    \ \"0\") {\n    const numberString = numberString.substring(1);\n\n    if (numberString.length\
    \ === 1) {\n      return 0;\n    } else {\n      const parsedNumber = parseInt(numberString,\
    \ 10);\n\n      if (isNaN(parsedNumber)) {\n        return NaN;\n      }\n\n \
    \     return parsedNumber;\n    }\n  }\n\n  if (numberString.length === 1) {\n\
    \    const parsedNumber = parseInt(numberString, 10);\n\n    if (isNaN(parsedNumber))\
    \ {\n      return NaN;\n    }\n\n    return parsedNumber;\n  }\n\n  if (numberString.length\
    \ === 0) {\n    return NaN;\n  }\n\n  return NaN;\n}\n\nexport function parseAsFloat(value:\
    \ string): number {\n  const floatString = value.toString().trim();\n\n  if (floatString.indexOf(\"\
    e\") !== -1) {\n    const [mantissa, exponent] = floatString.split(\"e\");\n\n\
    \    if (exponent === \"\") {\n      return NaN;\n    }\n\n    return parseFloat(mantissa)\
    \ * Math.pow(10, -exponent);\n  }\n\n  if (floatString.indexOf(\".\") !== -1)\
    \ {\n    const [mantissa, exponent] = floatString.split(\".\");\n\n    if (exponent\
    \ === \"\") {\n      return NaN;\n    }\n\n    return parseFloat(mantissa) * Math.pow(10,\
    \ exponent);\n  }\n\n  return parseFloat(floatString);\n}\n\nexport function parseAsInteger(value:\
    \ string): number {\n  const intString = value.toString().trim();\n\n  if (intString.indexOf(\"\
    .\") !== -1) {\n    const [mantissa, exponent] = intString.split(\".\");\n\n \
    \   if (exponent === \"\") {\n      return NaN;\n    }\n\n    return parseInt(mantissa)\
    \ * Math.pow(10, exponent);\n  }\n\n  return parseInt(intString);\n}\n\nexport\
    \ function parseAsBoolean(value: string): boolean {\n  return value === \"true\"\
    \ || value === \"false\" || value === \"1\" || value === \"0\";\n}\n\nexport function\
    \ parseDate(value: string): Date {\n  return \ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = closest_integer;\n\
    \  assert.deepEqual(candidate(\"10\"),10);\n  assert.deepEqual(candidate(\"14.5\"\
    ),15);\n  assert.deepEqual(candidate(\"-15.5\"),-16);\n  assert.deepEqual(candidate(\"\
    15.3\"),15);\n  assert.deepEqual(candidate(\"0\"),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmplbrpm_jf.ts(143,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660004167
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  const [integer1, integer2] = value.split('.');\n  return Math.abs(+integer1\
    \ + (+integer2) / 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould\
    \ loosely deep-equal\n\n10\n    at test (/tmp/tmpumq75q80.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpumq75q80.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected:\
    \ 10,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004167
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  let number: number = Number(value)\n  let decimal: number = Math.abs(number\
    \ % 1)\n  while (decimal !== 0) {\n    decimal = Math.floor(decimal)\n    if (decimal\
    \ % 2 === 1) {\n      number = number - (decimal / 2)\n    }\n  }\n  return number\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n14.5\n\nshould\
    \ loosely deep-equal\n\n15\n    at test (/tmp/tmp8v35r3iq.js:29:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp8v35r3iq.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 14.5,\n  expected:\
    \ 15,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004167
- exit_code: 1
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  if (value === \"-0\") {\n    return 0;\n  }\n  const num = parseFloat(value);\n\
    \  if (!isNaN(num)) {\n    return Math.floor(num);\n  }\n  if (value[0] === \"\
    -\") {\n    return -Math.abs(closest_integer(value.substr(1)));\n  }\n  return\
    \ null;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n14\n\nshould loosely\
    \ deep-equal\n\n15\n    at test (/tmp/tmpdev10jfo.js:31:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpdev10jfo.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 14,\n  expected:\
    \ 15,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660004167
- exit_code: 2
  program: "//Create a function that takes a value (string) representing a number\n\
    // and returns the closest integer to it. If the number is equidistant\n// from\
    \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
    10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
    \ from zero means that if the given number is equidistant\n// from two integers,\
    \ the one you should return is the one that is the\n// farthest from zero. For\
    \ example closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"\
    -14.5\") should return -15.\nfunction closest_integer(value: string): number {\n\
    \  var number = +value;\n  if (Number.isNaN(number)) {\n    return 0;\n  }\n\n\
    \  if (number === parseInt(number, 10)) return number;\n  if (number === Math.round(number))\
    \ return Math.round(number);\n\n  var remainder = number % 1;\n  if (Math.abs(remainder)\
    \ >= 1) {\n    return remainder;\n  }\n\n  return Math.round(Math.abs(number)\
    \ * 100) / 100;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = closest_integer;\n  assert.deepEqual(candidate(\"\
    10\"),10);\n  assert.deepEqual(candidate(\"14.5\"),15);\n  assert.deepEqual(candidate(\"\
    -15.5\"),-16);\n  assert.deepEqual(candidate(\"15.3\"),15);\n  assert.deepEqual(candidate(\"\
    0\"),0);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpdtlmn1i3.ts(16,14): error TS2339: Property ''isNaN''
    does not exist on type ''NumberConstructor''.

    ../../../../../tmp/tmpdtlmn1i3.ts(20,27): error TS2345: Argument of type ''number''
    is not assignable to parameter of type ''string''.

    '
  timestamp: 1660004167
