language: ts
name: HumanEval_55_fib
results:
- exit_code: 0
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n\tif (n === 0)\
    \ {\n\t\treturn 0;\n\t}\n\tif (n === 1) {\n\t\treturn 1;\n\t}\n\treturn fib(n\
    \ - 1) + fib(n - 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n\
    \  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n \
    \ assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977970
- exit_code: 0
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  if (n < 0) return\
    \ NaN;\n  if (n <= 2) return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977970
- exit_code: 0
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  if (n < 0) {\n\
    \    throw new TypeError(`fib(${n}) -> NaN`);\n  }\n  if (n < 1 || n === 1) {\n\
    \    return n;\n  }\n  return fib(n - 1) + fib(n - 2);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977970
- exit_code: 0
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n    if (n < 0)\
    \ throw RangeError(`fib cannot take negative numbers`);\n    if (n === 0) return\
    \ 0;\n    if (n === 1) return 1;\n    return fib(n - 1) + fib(n - 2);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977970
- exit_code: 1
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  // If n is negative\
    \ return -1. If n is 0 return 0.\n  return n < 0 ? -1 : n < 1 ? 0 : fib(n - 1)\
    \ + fib(n - 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n\
    \  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n \
    \ assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-55\n\nshould\
    \ loosely deep-equal\n\n55\n    at test (/tmp/tmpezq5a6uy.js:15:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpezq5a6uy.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -55,\n  expected:\
    \ 55,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977970
- exit_code: 0
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  return n < 2\n\
    \    ? n\n    : fib(n-2) + fib(n-1);\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fib;\n \
    \ assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n \
    \ assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977970
- exit_code: 0
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n    if (n === 0)\
    \ {\n        return 0;\n    } else if (n === 1) {\n        return 1;\n    } else\
    \ {\n        return fib(n - 1) + fib(n - 2);\n    }\n}\n\nconst fibonacciFunction\
    \ = fib;\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n\
    \  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n \
    \ assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977970
- exit_code: 1
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  if (n < 2) return\
    \ 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fib;\n\
    \  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n89\n\nshould loosely\
    \ deep-equal\n\n55\n    at test (/tmp/tmpp9ls9xjy.js:16:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpp9ls9xjy.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 89,\n  expected:\
    \ 55,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977970
- exit_code: 0
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  if (n < 2)\n\
    \    return n;\n  return fib(n - 1) + fib(n - 2);\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977970
- exit_code: 1
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  if (n < 2) {\n\
    \    return 1;\n  }\n  return fib(n - 2) + fib(n - 1);\n}\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n89\n\nshould loosely\
    \ deep-equal\n\n55\n    at test (/tmp/tmp0pm74wc5.js:17:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp0pm74wc5.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 89,\n  expected:\
    \ 55,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977970
- exit_code: 1
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  if (n <= 1) return\
    \ 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fib;\n\
    \  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n89\n\nshould loosely\
    \ deep-equal\n\n55\n    at test (/tmp/tmpjsh_6p8z.js:16:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpjsh_6p8z.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 89,\n  expected:\
    \ 55,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977970
- exit_code: 0
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  if (n < 2) {\n\
    \    return n;\n  }\n  return fib(n - 1) + fib(n - 2);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977916
- exit_code: 0
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n\tif (n < 2) {\n\
    \t\treturn n;\n\t} else {\n\t\treturn fib(n - 1) + fib(n - 2);\n\t}\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977970
- exit_code: 1
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  if (n < 2) return\
    \ 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fib;\n\
    \  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n89\n\nshould loosely\
    \ deep-equal\n\n55\n    at test (/tmp/tmpp9ls9xjy.js:16:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpp9ls9xjy.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 89,\n  expected:\
    \ 55,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977970
- exit_code: 0
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  if (n < 2) {\n\
    \    return n;\n  }\n  return fib(n - 1) + fib(n - 2);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977916
- exit_code: 0
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  if (n < 2) return\
    \ n;\n  return fib(n - 1) + fib(n - 2);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fib;\n\
    \  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977970
- exit_code: 1
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  if (n < 2) {\n\
    \    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n89\n\nshould loosely\
    \ deep-equal\n\n55\n    at test (/tmp/tmpgvce8txo.js:17:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpgvce8txo.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 89,\n  expected:\
    \ 55,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977970
- exit_code: 1
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  if (n < 2) {\n\
    \    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n89\n\nshould loosely\
    \ deep-equal\n\n55\n    at test (/tmp/tmpgvce8txo.js:17:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpgvce8txo.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 89,\n  expected:\
    \ 55,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977970
- exit_code: 2
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  let prev = [0,\
    \ 1];\n  let next = [0, 1];\n  for (let i = 2; i <= n; i++) {\n    next[i] = next[i\
    \ - 1] + prev[i - 1];\n    prev = next;\n    next = next[i] - prev[i - 1];\n \
    \ }\n  return next[n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n\
    \  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n \
    \ assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpwt_6jqeq.ts(14,5): error TS2322: Type ''number''
    is not assignable to type ''number[]''.

    '
  timestamp: 1659977970
- exit_code: 0
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n\tif (n <= 0) {\n\
    \t\treturn 0;\n\t}\n\tif (n <= 2) {\n\t\treturn 1;\n\t}\n\treturn fib(n - 1) +\
    \ fib(n - 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n\
    \  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n \
    \ assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977970
- exit_code: 1
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n\treturn n < 2\
    \ ? 1 : fib(n - 1) + fib(n - 2)\n}\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n\
    \  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n \
    \ assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n89\n\nshould loosely\
    \ deep-equal\n\n55\n    at test (/tmp/tmpyubvci8g.js:14:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpyubvci8g.js:20:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 89,\n  expected:\
    \ 55,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977970
- exit_code: 1
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n\tif (n < 2) return\
    \ 1;\n\treturn fib(n - 1) + fib(n - 2);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fib;\n\
    \  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n89\n\nshould loosely\
    \ deep-equal\n\n55\n    at test (/tmp/tmp_9d1anie.js:16:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp_9d1anie.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 89,\n  expected:\
    \ 55,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977970
- exit_code: 0
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n\tif (n === 0)\
    \ {\n\t\treturn 0;\n\t}\n\tif (n === 1 || n === 2) {\n\t\treturn 1;\n\t}\n\treturn\
    \ fib(n - 1) + fib(n - 2);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n\
    \  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n \
    \ assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977970
- exit_code: 1
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n    if (n < 2)\
    \ {\n        return 1;\n    }\n    return fib(n - 1) + fib(n - 2);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n89\n\nshould loosely\
    \ deep-equal\n\n55\n    at test (/tmp/tmp341wsbuy.js:17:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp341wsbuy.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 89,\n  expected:\
    \ 55,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977971
- exit_code: 1
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  if (n < 2) return\
    \ 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\nconst a1 = 1;\nconst a2 = 2;\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n89\n\nshould loosely\
    \ deep-equal\n\n55\n    at test (/tmp/tmpdxstrw11.js:18:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpdxstrw11.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 89,\n  expected:\
    \ 55,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977970
- exit_code: 2
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  if (n < 0) throw\
    \ new RangeError('Not a valid index');\n  return function*(): Iterator<number>\
    \ {\n    let a = 0, b = 1\n    for (let i = 0; i < n; i += 1) {\n      yield a\
    \ + b\n      a, b = b, a + b\n    }\n  }\n}\n</code>\nThen we can use it in any\
    \ way we like.\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n\
    \  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n \
    \ assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpgbv_mpy_.ts(18,2): error TS1110: Type expected.

    ../../../../../tmp/tmpgbv_mpy_.ts(18,3): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpgbv_mpy_.ts(19,6): error TS1005: '';'' expected.

    ../../../../../tmp/tmpgbv_mpy_.ts(19,9): error TS1005: '';'' expected.

    ../../../../../tmp/tmpgbv_mpy_.ts(19,13): error TS1005: '';'' expected.

    ../../../../../tmp/tmpgbv_mpy_.ts(19,17): error TS1005: '';'' expected.

    ../../../../../tmp/tmpgbv_mpy_.ts(19,27): error TS1005: '';'' expected.

    ../../../../../tmp/tmpgbv_mpy_.ts(19,31): error TS1005: '';'' expected.

    ../../../../../tmp/tmpgbv_mpy_.ts(19,34): error TS1005: '';'' expected.

    ../../../../../tmp/tmpgbv_mpy_.ts(20,1): error TS1003: Identifier expected.

    ../../../../../tmp/tmpgbv_mpy_.ts(21,9): error TS1005: '';'' expected.

    '
  timestamp: 1659977970
- exit_code: 1
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  if (n < 2) {\n\
    \    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n89\n\nshould loosely\
    \ deep-equal\n\n55\n    at test (/tmp/tmpgvce8txo.js:17:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpgvce8txo.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 89,\n  expected:\
    \ 55,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977970
- exit_code: 2
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n\tif (n < 0 ||\
    \ n >= MAX_PRIORITY) {\n\t\treturn Infinity;\n\t}\n\tlet memo: number[];\n\treturn\
    \ (memo[n] = memo[n] || fib(n - 1) + fib(n - 2));\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpt2ury810.ts(9,20): error TS2304: Cannot find name
    ''MAX_PRIORITY''.

    '
  timestamp: 1659977970
- exit_code: 1
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  if (n === 0)\
    \ {\n    return n;\n  }\n  return fib(n - 1) + fib(n - 2);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp_h5_kyzo.js:9\n    if (n === 0) {\n    ^\n\nRangeError: Maximum\
    \ call stack size exceeded\n    at fib (/tmp/tmp_h5_kyzo.js:9:5)\n    at fib (/tmp/tmp_h5_kyzo.js:12:12)\n\
    \    at fib (/tmp/tmp_h5_kyzo.js:12:12)\n    at fib (/tmp/tmp_h5_kyzo.js:12:12)\n\
    \    at fib (/tmp/tmp_h5_kyzo.js:12:12)\n    at fib (/tmp/tmp_h5_kyzo.js:12:12)\n\
    \    at fib (/tmp/tmp_h5_kyzo.js:12:12)\n    at fib (/tmp/tmp_h5_kyzo.js:12:12)\n\
    \    at fib (/tmp/tmp_h5_kyzo.js:12:12)\n    at fib (/tmp/tmp_h5_kyzo.js:12:12)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977973
- exit_code: 0
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n\tif (n <= 0) {\n\
    \t\treturn 0;\n\t}\n\tif (n === 1) {\n\t\treturn 1;\n\t}\n\treturn fib(n - 1)\
    \ + fib(n - 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n\
    \  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n \
    \ assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977973
- exit_code: 0
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n    if (n < 2)\
    \ {\n        return n;\n    }\n    return fib(n - 1) + fib(n - 2);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977916
- exit_code: 2
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  if (n < 2) {\
    \ return 0; }\n  return fib(n - 1) + fib(n - 2);\n}\n\ndeclare class LodashFantasyLand\
    \ {\n  fantasyland: typeof LodashFantasyLand;\n  fantasyland(o: LodashFantasyLand):\
    \ LodashFantasyLand;\n}\n\ndeclare function fantasyland<T>(\n  o: _.List<T>,\n\
    \  path?: string | string[],\n  defaultValue?: T\n): LodashFantasyLand;\n\ndeclare\
    \ namespace LodashFantasyLand {\n  type ArrayPath =\n    | string\n    | ReadonlyArray<string>\n\
    \    | ((from: number, to: number) => number);\n\n  type ObjectPath =\n    | string\n\
    \    | ReadonlyArray<string>\n    | number\n    | ((path: string, value: any)\
    \ => any);\n\n  type Path =\n    | ArrayPath\n    | ObjectPath\n    | (string\
    \ | string[]);\n\n  type Indexer = { [key: string]: any };\n\n  interface LodashFantasyLand<T>\
    \ extends _.LoDashStatic {\n    all: typeof all;\n    all<T>(predicate: _.ValueIteratee<T>):\
    \ LodashFantasyLand.Array<T>;\n    all<T>(\n      predicate: _.ValueIteratee<T>,\n\
    \      collection: _.List<T>\n    ): boolean;\n\n    any(predicate: _.ValueIteratee<T>):\
    \ LodashFantasyLand.Array<T>;\n    any<T>(\n      predicate: _.ValueIteratee<T>,\n\
    \      collection: _.List<T>\n    ): boolean;\n\n    collect: typeof collect;\n\
    \n    collect<T>(\n      iteratee: _.MemoVoidIteratorCapped<T, _.List<T> | null\
    \ | undefined>\n    ): LodashFantasyLand.Array<T>;\n\n    collect<T>(\n      iteratee:\
    \ _.MemoVoidIteratorCapped<T, _.List<T> | null | undefined>,\n      collection:\
    \ _.List<T>\n    ): T[];\n\n    contains(value): LodashFantasyLand.Array<T>;\n\
    \    contains<T>(\n      value: T,\n      fromIndex: number\n    ): LodashFantasyLand.Array<T>;\n\
    \n    containsWith(\n      customizer: _.ValueOrCustomizer<T, boolean>,\n    \
    \  value\n    ): LodashFantasyLand.Array<T>;\n    containsWith<T>(\n      customizer:\
    \ _.ValueOrCustomizer<T, boolean>,\n      value: T,\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpulir7ky4.ts(81,9): error TS1003: Identifier expected.

    ../../../../../tmp/tmpulir7ky4.ts(94,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659977972
- exit_code: 0
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  if (n < 2) {\n\
    \    return n;\n  }\n\n  return fib(n - 1) + fib(n - 2);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977973
- exit_code: 1
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  if (n < 2) {\n\
    \    return 1;\n  }\n  return fib(n - 2) + fib(n - 1);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n89\n\nshould loosely\
    \ deep-equal\n\n55\n    at test (/tmp/tmp3fd9pbo0.js:17:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp3fd9pbo0.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 89,\n  expected:\
    \ 55,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977973
- exit_code: 1
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  if (n < 2) return\
    \ 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\nconst fibonacci = fib;\n\ninterface\
    \ FibFunction {\n  (n: number): number;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fib;\n\
    \  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n89\n\nshould loosely\
    \ deep-equal\n\n55\n    at test (/tmp/tmpxn5_drl1.js:17:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpxn5_drl1.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 89,\n  expected:\
    \ 55,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977973
- exit_code: 1
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  if (n < 2) {\n\
    \    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n89\n\nshould loosely\
    \ deep-equal\n\n55\n    at test (/tmp/tmpgvce8txo.js:17:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpgvce8txo.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 89,\n  expected:\
    \ 55,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977970
- exit_code: 1
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  if (n < 2) {\n\
    \    return 1;\n  }\n\n  return fib(n - 1) + fib(n - 2);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n89\n\nshould loosely\
    \ deep-equal\n\n55\n    at test (/tmp/tmp_8pxizqp.js:17:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp_8pxizqp.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 89,\n  expected:\
    \ 55,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977973
- exit_code: 1
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  if (n < 0) throw\
    \ new Error(`n (${n}) is not a natural number`);\n  if (n < 1) return 1;\n  return\
    \ fib(n - 1) + fib(n - 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n\
    \  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n \
    \ assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpuaanldyj.js:10\n        throw new Error(\"n (\" + n + \") is not\
    \ a natural number\");\n        ^\n\nError: n (-1) is not a natural number\n \
    \   at fib (/tmp/tmpuaanldyj.js:10:15)\n    at fib (/tmp/tmpuaanldyj.js:13:25)\n\
    \    at fib (/tmp/tmpuaanldyj.js:13:12)\n    at fib (/tmp/tmpuaanldyj.js:13:12)\n\
    \    at fib (/tmp/tmpuaanldyj.js:13:12)\n    at fib (/tmp/tmpuaanldyj.js:13:12)\n\
    \    at fib (/tmp/tmpuaanldyj.js:13:12)\n    at fib (/tmp/tmpuaanldyj.js:13:12)\n\
    \    at fib (/tmp/tmpuaanldyj.js:13:12)\n    at fib (/tmp/tmpuaanldyj.js:13:12)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977973
- exit_code: 2
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  if (n < 2) {\
    \ return n; }\n  return fib(n-2) + fib(n-1);\n}\n\nexport const fib = fib;\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpfyhr7wb0.ts(8,10): error TS2300: Duplicate identifier
    ''fib''.

    ../../../../../tmp/tmpfyhr7wb0.ts(13,14): error TS2300: Duplicate identifier ''fib''.

    '
  timestamp: 1659977973
- exit_code: 0
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  if (n <= 0) {\n\
    \    return 0;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  return fib(n - 2)\
    \ + fib(n - 1);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n\
    \  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n \
    \ assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977973
- exit_code: 2
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  if (n < 2) return\
    \ n;\n  let a = 1;\n  let b = 1;\n  let prev = 0;\n  for (let i = 0; i < n; i++)\
    \ {\n    const next = a;\n    a += b;\n    b = prev + next;\n    prev = b;\n \
    \ }\n  return b;\n}\n\nconst _: any = typeof require === 'function' ? require('underscore')\
    \ : void 0;\n_.fib = fib;\n\nconst _ = typeof require === 'function' ? require('underscore')\
    \ : void 0;\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n\
    \  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n \
    \ assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp8jkmzz7z.ts(22,7): error TS2451: Cannot redeclare
    block-scoped variable ''_''.

    ../../../../../tmp/tmp8jkmzz7z.ts(25,7): error TS2451: Cannot redeclare block-scoped
    variable ''_''.

    '
  timestamp: 1659977973
- exit_code: 2
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n    if (n < 2)\
    \ {\n        return n;\n    }\n    let first = 1;\n    let second = 0;\n    let\
    \ result;\n    for (let i = 3; n >= i; i += 2) {\n        result = first + second;\n\
    \        first = second;\n        second = result;\n    }\n    return result;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\nI know this isn't what you were\
    \ asking for, but here it is anyway.\n<code>\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fib;\n\
    \  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmppellu7f6.ts(22,2): error TS1110: Type expected.

    ../../../../../tmp/tmppellu7f6.ts(22,3): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmppellu7f6.ts(23,2): error TS1109: Expression expected.

    ../../../../../tmp/tmppellu7f6.ts(23,4): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmppellu7f6.ts(24,2): error TS1109: Expression expected.

    ../../../../../tmp/tmppellu7f6.ts(24,6): error TS1005: '';'' expected.

    ../../../../../tmp/tmppellu7f6.ts(24,16): error TS1109: Expression expected.

    ../../../../../tmp/tmppellu7f6.ts(25,3): error TS1005: '';'' expected.

    ../../../../../tmp/tmppellu7f6.ts(25,8): error TS1005: '';'' expected.

    ../../../../../tmp/tmppellu7f6.ts(25,13): error TS1005: '';'' expected.

    ../../../../../tmp/tmppellu7f6.ts(25,16): error TS1005: '';'' expected.

    ../../../../../tmp/tmppellu7f6.ts(25,67): error TS1002: Unterminated string literal.

    ../../../../../tmp/tmppellu7f6.ts(27,9): error TS1005: '';'' expected.

    '
  timestamp: 1659977973
- exit_code: 0
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  if (n < 0) return\
    \ NaN;\n  if (n <= 2) return 1;\n  return fib(n - 1) + fib(n - 2);\n}\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977973
- exit_code: 1
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  if (n < 0) {\n\
    \    throw new Error(\"fib() argument must be non-negative\");\n  }\n\n  if (n\
    \ < 2) {\n    return 0;\n  }\n\n  return fib(n - 1) + fib(n - 2);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n55\n    at test (/tmp/tmpfwdn8jhl.js:20:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpfwdn8jhl.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 55,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977973
- exit_code: 0
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n\tif (n < 2) return\
    \ n;\n\treturn fib(n - 1) + fib(n - 2);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fib;\n\
    \  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977973
- exit_code: 0
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n    if (n < 2)\
    \ { return n; }\n    return fib(n-2) + fib(n-1);\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977973
- exit_code: 1
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  if (n < 2) {\n\
    \    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n89\n\nshould loosely\
    \ deep-equal\n\n55\n    at test (/tmp/tmpgvce8txo.js:17:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpgvce8txo.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 89,\n  expected:\
    \ 55,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977970
- exit_code: 1
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  if (n < 2) {\n\
    \    return 1;\n  }\n\n  return fib(n - 1) + fib(n - 2);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n89\n\nshould loosely\
    \ deep-equal\n\n55\n    at test (/tmp/tmp_8pxizqp.js:17:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp_8pxizqp.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 89,\n  expected:\
    \ 55,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977973
- exit_code: 0
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  if (n < 0) return\
    \ 0;\n  if (n === 1 || n === 2) return 1;\n  return fib(n - 1) + fib(n - 2);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977973
- exit_code: 1
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n\t// Fibonacci\
    \ numbers are repeated in pairs, so we add them up here.\n\tlet fib1: number =\
    \ 1;\n\tlet fib2: number = 1;\n\tlet fib3: number = 1;\n\tlet fib4: number = 1;\n\
    \tlet fib5: number = 1;\n\n\twhile (fib1 < n) {\n\t\tlet fib6 = fib2 * fib3;\n\
    \t\tfib5 = fib2 * fib4;\n\t\tfib4 = fib2 * fib5;\n\t\tfib3 = fib2 * fib6;\n\t\t\
    fib2 = fib2 * fib5;\n\t\tfib1 = fib1 + fib6;\n\t}\n\treturn fib1;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n10\n\nshould loosely\
    \ deep-equal\n\n55\n    at test (/tmp/tmp6evvv06o.js:28:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp6evvv06o.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 10,\n  expected:\
    \ 55,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977973
- exit_code: 1
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  if (n < 2) return\
    \ 1;\n  if (n < 5) return fib(n - 1) + fib(n - 2);\n  return fib(n - 2) + fib(n\
    \ - 5);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n\
    \  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n \
    \ assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n13\n\nshould loosely\
    \ deep-equal\n\n55\n    at test (/tmp/tmpy5wpl4aw.js:18:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpy5wpl4aw.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 13,\n  expected:\
    \ 55,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977973
- exit_code: 2
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  // Return Fibonacci\
    \ numbers, F(0-indexed).\n  // F(0) = 0, F(1) = 1, F(n) = F(n - 1) + F(n - 2),\
    \ where F(0) = 1 and F(1) = 1.\n  if (n < 2) {\n    return 1;\n  }\n  return fibHelper(0,\
    \ n) + fibHelper(1, n - 1);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n\
    \  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n \
    \ assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpv1ojzbpu.ts(14,10): error TS2304: Cannot find name
    ''fibHelper''.

    ../../../../../tmp/tmpv1ojzbpu.ts(14,28): error TS2304: Cannot find name ''fibHelper''.

    '
  timestamp: 1659977973
- exit_code: 1
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  if (n < 0 ||\
    \ n > 100) {\n    throw new Error(`Invalid argument - fibonacci(${n})`)\n  }\n\
    \  let result: number\n  result = n < 2 ? 1 : fib(n - 1) + fib(n - 2)\n  return\
    \ result\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n\
    \  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n \
    \ assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n89\n\nshould loosely\
    \ deep-equal\n\n55\n    at test (/tmp/tmp29fr7vb9.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp29fr7vb9.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 89,\n  expected:\
    \ 55,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977973
- exit_code: 0
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  if (n < 2) {\n\
    \    return n;\n  }\n\n  return fib(n - 1) + fib(n - 2);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977973
- exit_code: 1
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  if (n <= 0) {\n\
    \    throw new Error('Fibonacci sequence not defined for negative numbers');\n\
    \  }\n  return [1, 1, 2, (1 + n) * 2 % 3, (1 - (1 - n)) * 3 % 5, (2 - (2 - n))\
    \ * 5 % 7]\n    .slice(n - 1, n)\n    .reduce(function(prev, cur) {\n      return\
    \ prev + cur;\n    });\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n\
    \  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n \
    \ assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpkwx1tnwk.js:14\n        .reduce(function (prev, cur) {\n      \
    \   ^\n\nTypeError: Reduce of empty array with no initial value\n    at Array.reduce\
    \ (<anonymous>)\n    at fib (/tmp/tmpkwx1tnwk.js:14:10)\n    at test (/tmp/tmpkwx1tnwk.js:21:22)\n\
    \    at Object.<anonymous> (/tmp/tmpkwx1tnwk.js:27:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977973
- exit_code: 2
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  // Using cached\
    \ fibonacci number as an initial value\n  const fib1 = [1, 1];\n  const fib2 =\
    \ [\n    1,\n    1,\n  ];\n  for (let i = 0; i < n - 1; ++i) {\n    fib2 = [\n\
    \      fib1[0] + fib2[0],\n      fib1[1] + fib2[1],\n    ];\n  }\n  return fib2[n];\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpmdr25wv3.ts(16,5): error TS2588: Cannot assign to
    ''fib2'' because it is a constant.

    '
  timestamp: 1659977973
- exit_code: 1
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  if (n < 2) return\
    \ 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fib;\n\
    \  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n89\n\nshould loosely\
    \ deep-equal\n\n55\n    at test (/tmp/tmpp9ls9xjy.js:16:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpp9ls9xjy.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 89,\n  expected:\
    \ 55,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977970
- exit_code: 0
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  if (n === 0)\
    \ {\n    return 0;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  return fib(n\
    \ - 1) + fib(n - 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n\
    \  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n \
    \ assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821488
- exit_code: 0
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  if (n < 2) {\n\
    \    return 1;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  if (n === 3) {\n\
    \    return 2;\n  }\n  return fib(n - 1) + fib(n - 2);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977975
- exit_code: 1
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  if (n < 2) return\
    \ 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fib;\n\
    \  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n89\n\nshould loosely\
    \ deep-equal\n\n55\n    at test (/tmp/tmpp9ls9xjy.js:16:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpp9ls9xjy.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 89,\n  expected:\
    \ 55,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977970
- exit_code: 2
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  if (n < 0 ||\
    \ n <= 1) return 0;\n  if (n > 1 && isFibonacci((n - 2) / 2)) return 1;\n  return\
    \ fib(n - 1) + fib(n - 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n\
    \  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n \
    \ assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp1jc461q2.ts(10,16): error TS2304: Cannot find name
    ''isFibonacci''.

    '
  timestamp: 1659977975
- exit_code: 2
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  if (n < 0 ||\
    \ n >= MAX_M) {\n    throw new RangeError(\"Invalid argument to fib.  n: ${n}\"\
    )\n  }\n  if (n === 0) return 0\n  if (n === 1) return 1\n  let fib1 = fib(n -\
    \ 1)\n  let fib2 = fib(n - 2)\n  return fib1 + fib2\n}\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpu6wpcrl4.ts(9,21): error TS2304: Cannot find name
    ''MAX_M''.

    '
  timestamp: 1659977975
- exit_code: 0
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  if (n < 2) {\n\
    \    return n;\n  }\n  return fib(n-1) + fib(n-2);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977975
- exit_code: 1
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  if (n < 2) {\n\
    \    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n89\n\nshould loosely\
    \ deep-equal\n\n55\n    at test (/tmp/tmpgvce8txo.js:17:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpgvce8txo.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 89,\n  expected:\
    \ 55,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977970
- exit_code: 1
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  // Calculate\
    \ the Fibonacci sequence. \n  // If n is less than or equal to 1, return 1.\n\
    \  if (n < 1) {\n    return 1;\n  }\n  // If n is greater than or equal to 2,\
    \ return 1.\n  if (n >= 2) {\n    return 1;\n  }\n  // Calculate Fibonacci sequence.\n\
    \  let a = 0; // First term.\n  let b = 1; // Second term.\n  for (let i = 0;\
    \ i < n; i++) {\n    const next = a;\n    a = a + b;\n    b = next;\n  }\n  return\
    \ a;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n\
    \  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n \
    \ assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n55\n    at test (/tmp/tmpx5sg8ocr.js:31:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpx5sg8ocr.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ 55,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977975
- exit_code: 0
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n    if (n < 0)\
    \ {\n        throw new Error('The argument must be greater than 0.');\n    }\n\
    \    if (n === 1 || n === 2) {\n        return 1;\n    }\n    return fib(n - 1)\
    \ + fib(n - 2);\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n\
    \  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n \
    \ assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977975
- exit_code: 2
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  if (n < 0) return\
    \ undefined;\n  if (n < 1) return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n\
    const memoize = (fn: (...args: any[]) => any, cache: any = Object.create(null)):\
    \ Function {\n  return function(...args: any[]) {\n    if (cache.hasOwnProperty(args[0]))\
    \ {\n      return cache[args[0]];\n    } else {\n      const result = fn(...args);\n\
    \      cache[args[0]] = result;\n      return result;\n    }\n  };\n};\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpzp0f3sfy.ts(14,91): error TS1005: ''=>'' expected.

    '
  timestamp: 1659977975
- exit_code: 1
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  if (n < 2) {\n\
    \    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n}\n\ndeclare const isEven:\
    \ (val: number) => boolean;\n\ndeclare const isEvenStrict: (val: number) => boolean;\n\
    \ndeclare const isEvenClass: (val: number) => boolean;\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n89\n\nshould loosely\
    \ deep-equal\n\n55\n    at test (/tmp/tmphcr3ymdp.js:17:12)\n    at Object.<anonymous>\
    \ (/tmp/tmphcr3ymdp.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 89,\n  expected:\
    \ 55,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977975
- exit_code: 2
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  if (n < 0) throw\
    \ new RangeError(\"Invalid argument\");\n  if (n < 2) return 1;\n  return fib(n\
    \ - 1) + fib(n - 2);\n}\nexport = fib;\n\n},{}],12:[function(require,module,exports){\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp24s4iv8m.ts(15,1): error TS1128: Declaration or statement
    expected.

    ../../../../../tmp/tmp24s4iv8m.ts(15,2): error TS1128: Declaration or statement
    expected.

    ../../../../../tmp/tmp24s4iv8m.ts(15,5): error TS1128: Declaration or statement
    expected.

    ../../../../../tmp/tmp24s4iv8m.ts(15,6): error TS1128: Declaration or statement
    expected.

    ../../../../../tmp/tmp24s4iv8m.ts(15,9): error TS1005: '';'' expected.

    ../../../../../tmp/tmp24s4iv8m.ts(29,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659977975
- exit_code: 2
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  return isNegativeZero(n)\
    \ ? 0 :\n    isNegativeOne(n - 2) ? 1 :\n    isNegativeTwo(n - 3) ? 2 :\n    isNegativeThree(n\
    \ - 5) ? 3 :\n    isNegativeFour(n - 7) ? 4 :\n    isNegativeFive(n - 11) ? 5\
    \ :\n    isNegativeSix(n - 13) ? 6 :\n    isNegativeSeven(n - 15) ? 7 :\n    isNegativeEight(n\
    \ - 18) ? 8 :\n    isNegativeNine(n - 21) ? 9 :\n    isNegativeTen(n - 24) ? 10\
    \ :\n    isNegativeEleven(n - 27) ? 11 :\n    isNegativeThirteen(n - 30) ? 12\
    \ :\n    isNegativeFourteen(n - 33) ? 13 :\n    isNegativeFifteen(n - 36) ? 14\
    \ :\n    isNegativeSixteen(n - 39) ? 15 :\n    isNegativeSeventeen(n - 42) ? 16\
    \ :\n    isNegativeEighteen(n - 45) ? 17 :\n    isNegativeNineteen(n - 48) ? 18\
    \ :\n    isPositiveZero(n - 52) ? 0 :\n    isPositiveOne(n - 55) ? 1 :\n    isPositiveTwo(n\
    \ - 58) ? 2 :\n    isPositiveThree(n - 61) ? 3 :\n    isPositiveFour(n - 64) ?\
    \ 4 :\n    isPositiveFive(n - 67) ? 5 :\n    isPositiveSix(n - 70) ? 6 :\n   \
    \ isPositiveSeven(n - 73) ? 7 :\n    isPositiveEight(n - 76) ? 8 :\n    isPositiveNine(n\
    \ - 79) ? 9 :\n    isPositiveTen(n - 82) ? 10 :\n    isPositiveEleven(n - 85)\
    \ ? 11 :\n    isPositiveThirteen(n - 88) ? 12 :\n    isPositiveFourteen(n - 91)\
    \ ? 13 :\n    isPositiveFifteen(n - 94) ? 14 :\n    isPositiveSixteen(n - 97)\
    \ ? 15 :\n    isPositiveSeventeen(n - 100) ? 16 :\n    isPositiveEighteen(n -\
    \ 103) ? 17 :\n    isPositiveNineteen(n - 106) ? 18 :\n    isNegativeOne(n - 130)\
    \ ? 0 :\n    isNegativeTwo(n - 131) ? 1 :\n    isNegativeThree(n - 132) ? 2 :\n\
    \    isNegativeFour(n - 133) ? 3 :\n    isNegativeFive(n - 134) ? 4 :\n    isNegativeSix(n\
    \ - 135) ? 5 :\n    isNegativeSeven(n - 136) ? 6 :\n    isNegativeEight(n - 137)\
    \ ? 7 :\n    isNegativeNine(n - 138) ? 8 \ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fib;\n \
    \ assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n \
    \ assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpweqjuab_.ts(56,1): error TS1005: '':'' expected.

    ../../../../../tmp/tmpweqjuab_.ts(69,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659977975
- exit_code: 1
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n    if (n < 2)\
    \ return 1;\n    return fib(n-2) + fib(n-1);\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n89\n\nshould loosely\
    \ deep-equal\n\n55\n    at test (/tmp/tmpczdfbe0h.js:16:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpczdfbe0h.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 89,\n  expected:\
    \ 55,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977975
- exit_code: 2
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  if (n === 0)\
    \ {\n    return 0;\n  } else if (n === 1) {\n    return 1;\n  }\n\n  return fib(n\
    \ - 1) + fib(n - 2);\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nI really want to\
    \ see the code of fibonacci as you wrote it. It is a nice way to calculate fibonacci\
    \ in O(1) time with dynamic programming\n<|/ c |>\n<| c |>\nthank you! I didn't\
    \ think about it at all.\n<|/ c |>\n<| c |>\nNo worries. You had this comment\
    \ in another answer: *... you were missing a pair of parentheses around your Math.pow(2,n)\
    \ line ...*\n<|/ c |>\n<| a dscore=0 |>\nThe other answers use iterative methods\
    \ to calculate large values of n. In your case, the maximum value of n you're\
    \ likely to encounter exceeds the limit of the JavaScript data type BigInt. So\
    \ a recursive method would be more appropriate.\n<code>\nconst fib = n => {\n\
    \  if (n <= 1) return n\n  else return fib(n - 1) + fib(n - 2)\n}\n</code>\nA\
    \ recursive method will calculate n only once (assuming the base cases are met).\
    \ So n can be calculated as an integer, which can only hold up to 9223372036854775807.\
    \ The above solution can be modified to return the result as an array of fib values\
    \ as an array.\n<code>\nconst fibArray = n => {\n  const result = []\n  if (n\
    \ <= 1) return n\n  else result.push(fib(n - 1))\n  result.push(fib(n - 2))\n\
    \  return result\n}\n</code>\nA recursive method will calculate each value in\
    \ its current stack frame, so the result will be calculated on the fly when it\
    \ is called recursively. While recursive methods offer a lot of flexibility for\
    \ solving problems, they also have a high overhead (stack frames). For this reason,\
    \ iterative methods are generally preferred.\n<|/ a tags=fibonacci,javascript\
    \ |>\n<| c |>\n*This answer is not the fastest method of calculating fibonacci\
    \ with dynamic programming.* -- I believe it is the fastest method for calculating\
    \ fibonacci since it uses dynamic programming. It does have an overhead of several\
    \ function calls for each function call. For large numbers the overhead becomes\
    \ prohibitive, but for small ones the recursion will take less time than a loop.\
    \ So the method you posted is far better than this one.\n<|/ c |>\n<| c |>\nThank\
    \ you for the clarification\n<|/ c \ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n\
    \  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n \
    \ assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpbubmfgx7.ts(17,2): error TS1110: Type expected.

    ../../../../../tmp/tmpbubmfgx7.ts(17,3): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpbubmfgx7.ts(18,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpbubmfgx7.ts(18,4): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpbubmfgx7.ts(19,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpbubmfgx7.ts(19,7): error TS1109: Expression expected.

    ../../../../../tmp/tmpbubmfgx7.ts(20,3): error TS1005: '';'' expected.

    ../../../../../tmp/tmpbubmfgx7.ts(20,10): error TS1005: '';'' expected.

    ../../../../../tmp/tmpbubmfgx7.ts(20,15): error TS1005: '';'' expected.

    ../../../../../tmp/tmpbubmfgx7.ts(20,18): error TS1005: '';'' expected.

    ../../../../../tmp/tmpbubmfgx7.ts(20,22): error TS1005: '';'' expected.

    ../../../../../tmp/tmpbubmfgx7.ts(20,26): error TS1005: '';'' expected.

    ../../../../../tmp/tmpbubmfgx7.ts(20,31): error TS1005: '';'' expected.

    ../../../../../tmp/tmpbubmfgx7.ts(20,34): error TS1005: '';'' expected.

    ../../../../../tmp/tmpbubmfgx7.ts(20,51): error TS1005: '';'' expected.

    ../../../../../tmp/tmpbubmfgx7.ts(20,57): error TS1005: '';'' expected.

    ../../../../../tmp/tmpbubmfgx7.ts(20,64): error TS1005: '';'' expected.

    ../../../../../tmp/tmpbubmfgx7.ts(20,67): error TS1005: '';'' expected.

    ../../../../../tmp/tmpbubmfgx7.ts(20,69): error TS1005: '';'' expected.

    ../../../../../tmp/tmpbubmfgx7.ts(20,74): error TS1005: '';'' expected.

    ../../../../../tmp/tmpbubmfgx7.ts(20,78): error TS1005: '';'' expected.

    ../../../../../tmp/tmpbubmfgx7.ts(20,81): error TS1005: '';'' expected.

    ../../../../../tmp/tmpbubmfgx7.ts(20,91): error TS1005: '';'' expected.

    ../../../../../tmp/tmpbubmfgx7.ts(20,109): error TS1005: '';'' expected.

    ../../../../../tmp/tmpbubmfgx7.ts(20,114): error TS1005: '';'' expected.

    ../../../../../tmp/tmpbubmfgx7.ts(20,119): error TS1005: ''('' expected.

    ../../../../../tmp/tmpbubmfgx7.ts(20,127): error TS1005: '')'' expected.

    ../../../../../tmp/tmpbubmfgx7.ts(21,2): error TS1109: Expression expected.

    ../../../'
  timestamp: 1659977975
- exit_code: 2
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  // Using cached\
    \ value for performance.\n  if (n <= 0 || n === 1 || MathLib.isNaN(n)) {\n   \
    \ return n;\n  }\n  // Make fib(n) to start from 1.\n  n--;\n  return MathLib.fib(n\
    \ - 1) + MathLib.fib(n - 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n\
    \  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n \
    \ assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpk5mxtqen.ts(10,28): error TS2304: Cannot find name
    ''MathLib''.

    ../../../../../tmp/tmpk5mxtqen.ts(15,10): error TS2304: Cannot find name ''MathLib''.

    ../../../../../tmp/tmpk5mxtqen.ts(15,31): error TS2304: Cannot find name ''MathLib''.

    '
  timestamp: 1659977975
- exit_code: 2
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  // https://en.wikipedia.org/wiki/Fermat_primality_test#Naive_methods\n\
    \  if (n < 2) {\n    return 1;\n  }\n\n  // Make sure n is an integer otherwise\
    \ we get an infinite loop.\n  n = parseInt(n);\n\n  // A number greater than or\
    \ equal to 3 does not have a Fibonacci number.\n  if (n < 3) {\n    return 1;\n\
    \  }\n\n  // If the number is already a Fibonacci number then return it.\n  if\
    \ (n === 1 || n === 2) {\n    return n;\n  }\n\n  // Set up initial Fibonacci\
    \ numbers.\n  const a = 1;\n  const b = 1;\n\n  // Calculate Fibonacci numbers.\n\
    \  while (true) {\n    const c = a + b;\n    if (c > n) {\n      return c;\n \
    \   }\n    a = b;\n    b = c;\n  }\n}\n</code>\n<|/ a dscore=2 |>\n<| a |>\nThis\
    \ is a simple solution which does not require recursion.\n<code>\nlet fib = (n:\
    \ number): number => n < 2 ? 1 : fib(n-2) + fib(n-1);\n</code>\n<|/ a tags=fibonacci,javascript\
    \ dscore=2 |>\n<| c |>\nDoesn't work for n = 2, it returns 2 instead of 1\n<|/\
    \ c |>\n<| c |>\nFixed the issue. Thanks for noticing.\n<|/ c |>\n<| a tags=fibonacci,javascript\
    \ |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n\
    \  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n \
    \ assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpt5p60l9o.ts(41,2): error TS1110: Type expected.

    ../../../../../tmp/tmpt5p60l9o.ts(41,3): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpt5p60l9o.ts(42,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpt5p60l9o.ts(42,4): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpt5p60l9o.ts(43,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpt5p60l9o.ts(43,7): error TS1109: Expression expected.

    ../../../../../tmp/tmpt5p60l9o.ts(44,6): error TS1005: '';'' expected.

    ../../../../../tmp/tmpt5p60l9o.ts(44,9): error TS1005: '';'' expected.

    ../../../../../tmp/tmpt5p60l9o.ts(44,11): error TS1005: '';'' expected.

    ../../../../../tmp/tmpt5p60l9o.ts(44,18): error TS1005: '';'' expected.

    ../../../../../tmp/tmpt5p60l9o.ts(44,27): error TS1005: '';'' expected.

    ../../../../../tmp/tmpt5p60l9o.ts(44,33): error TS1005: '';'' expected.

    ../../../../../tmp/tmpt5p60l9o.ts(44,38): error TS1005: '';'' expected.

    ../../../../../tmp/tmpt5p60l9o.ts(44,42): error TS1005: '';'' expected.

    ../../../../../tmp/tmpt5p60l9o.ts(44,50): error TS1005: '';'' expected.

    ../../../../../tmp/tmpt5p60l9o.ts(45,1): error TS1003: Identifier expected.

    ../../../../../tmp/tmpt5p60l9o.ts(46,5): error TS1005: '';'' expected.

    ../../../../../tmp/tmpt5p60l9o.ts(47,2): error TS1110: Type expected.

    ../../../../../tmp/tmpt5p60l9o.ts(47,3): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpt5p60l9o.ts(48,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpt5p60l9o.ts(48,4): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpt5p60l9o.ts(49,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpt5p60l9o.ts(49,7): error TS1109: Expression expected.

    ../../../../../tmp/tmpt5p60l9o.ts(50,6): error TS1005: '';'' expected.

    ../../../../../tmp/tmpt5p60l9o.ts(50,50): error TS1002: Unterminated string literal.

    ../../../../../tmp/tmpt5p60l9o.ts(51,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpt5p60l9o.ts(51,4): error TS1161: Unterminat'
  timestamp: 1659977975
- exit_code: 1
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  if (n <= 1 ||\
    \ n < 2) {\n    return 0;\n  }\n  return fib(n - 1) + fib(n - 2);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n55\n    at test (/tmp/tmpoe019asf.js:17:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpoe019asf.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 55,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977976
- exit_code: 2
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  if (n < 2) {\n\
    \    return 1;\n  }\n  return fibHelper(n, n - 1, 1);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpdqgaeck6.ts(12,10): error TS2304: Cannot find name
    ''fibHelper''.

    '
  timestamp: 1659977975
- exit_code: 1
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  if (n < 2) {\n\
    \    return 1;\n  } else if (n > 2) {\n    return fib(n - 1) + fib(n - 2);\n \
    \ } else {\n    return fib(n - 1) + fib(n - 2);\n  }\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n89\n\nshould loosely\
    \ deep-equal\n\n55\n    at test (/tmp/tmp28fz2g_e.js:22:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp28fz2g_e.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 89,\n  expected:\
    \ 55,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977976
- exit_code: 0
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  if (n < 2) {\n\
    \    return n;\n  }\n\n  return fib(n - 1) + fib(n - 2);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977973
- exit_code: 2
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  if (n < 2) return\
    \ n;\n  return fib(n-1) + fib(n-2);\n}\n\n<|/ file filename=mathHelpers.ts ext=.ts\
    \ |>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n\
    \  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n \
    \ assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpeiouha71.ts(13,3): error TS1110: Type expected.

    ../../../../../tmp/tmpeiouha71.ts(13,4): error TS1161: Unterminated regular expression
    literal.

    '
  timestamp: 1659977975
- exit_code: 1
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  // if (n <= 2)\
    \ {\n  //   return 1;\n  // }\n  // return fib(n - 1) + fib(n - 2);\n  // return\
    \ fib(n-2) + fib(n - 3);\n  let fib_table: number[] = [];\n  let fib1: number\
    \ = 0;\n  let fib2: number = 0;\n  let fib3: number = 0;\n  for (let i = 0; i\
    \ <= n; i++) {\n    fib1 = fib2;\n    fib2 = fib3;\n    fib3 = fib1 + fib2;\n\
    \    fib_table.push(fib3);\n  }\n  return fib_table[n];\n}\n\nexport function\
    \ fibonacci(n: number): number {\n  if (n <= 2) {\n    return 1;\n  }\n  return\
    \ fibonacci(n - 1) + fibonacci(n - 2);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fib;\n\
    \  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n55\n    at test (/tmp/tmp9yrmg40b.js:38:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp9yrmg40b.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 55,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977976
- exit_code: 0
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n\tif (n < 2) {\n\
    \t\treturn n;\n\t}\n\n\treturn fib(n - 1) + fib(n - 2);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977976
- exit_code: 1
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  if (n <= 2) {\n\
    \    return n;\n  }\n  return fib(n - 1) + fib(n - 2);\n}\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n89\n\nshould loosely\
    \ deep-equal\n\n55\n    at test (/tmp/tmpl38_d6as.js:17:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpl38_d6as.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 89,\n  expected:\
    \ 55,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977976
- exit_code: 1
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  if (n < 2) return\
    \ 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fib;\n\
    \  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n89\n\nshould loosely\
    \ deep-equal\n\n55\n    at test (/tmp/tmpp9ls9xjy.js:16:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpp9ls9xjy.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 89,\n  expected:\
    \ 55,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977970
- exit_code: 0
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n    if (n < 2)\
    \ {\n        return n;\n    }\n    return fib(n - 1) + fib(n - 2);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977916
- exit_code: 1
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n    if (n < 2)\
    \ return 1;\n    if (n < 4) return fib(n-2) + fib(n-1);\n    return fib(n-2) +\
    \ fib(n-1) + fib(n-2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n\
    \  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n \
    \ assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n427\n\nshould\
    \ loosely deep-equal\n\n55\n    at test (/tmp/tmpdbj5ofz1.js:18:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpdbj5ofz1.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 427,\n  expected:\
    \ 55,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977976
- exit_code: 0
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n    if (n < 0)\
    \ throw new RangeError(\"Out of range\");\n    if (n === 0 || n === 1) return\
    \ n;\n    return fib(n - 1) + fib(n - 2);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fib;\n\
    \  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977976
- exit_code: 0
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  return n < 2\
    \ ? n : fib(n - 1) + fib(n - 2);\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fib;\n \
    \ assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n \
    \ assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977926
- exit_code: 0
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  if (n < 2) {\
    \ return n; }\n  return fib(n - 1) + fib(n - 2);\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977977
- exit_code: 1
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  if (n < 2) {\n\
    \    return 1;\n  } else if (n <= 7) {\n    return fib(n - 1) + fib(n - 2);\n\
    \  } else {\n    return fib(n - 2) + fib(n - 3);\n  }\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n42\n\nshould loosely\
    \ deep-equal\n\n55\n    at test (/tmp/tmpzeujwrng.js:22:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpzeujwrng.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 42,\n  expected:\
    \ 55,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977977
- exit_code: 0
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  if (n === 0)\
    \ {\n    return 0;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  return fib(n\
    \ - 1) + fib(n - 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n\
    \  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n \
    \ assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821488
- exit_code: 1
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  if (n < 2) {\n\
    \    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n89\n\nshould loosely\
    \ deep-equal\n\n55\n    at test (/tmp/tmpgvce8txo.js:17:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpgvce8txo.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 89,\n  expected:\
    \ 55,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977970
- exit_code: 0
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  if (n < 2) {\n\
    \    return n;\n  }\n  return fib(n - 1) + fib(n - 2);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977916
- exit_code: 0
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  if (n < 2) return\
    \ n;\n  return fib(n-2) + fib(n-1);\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fib;\n \
    \ assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n \
    \ assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977978
- exit_code: 1
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  if (n < 2) return\
    \ 1;\n  if (n === 2) return 2;\n  return fib(n - 1) + fib(n - 2);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n89\n\nshould loosely\
    \ deep-equal\n\n55\n    at test (/tmp/tmpjbj1gzcs.js:18:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpjbj1gzcs.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 89,\n  expected:\
    \ 55,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977978
- exit_code: 1
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  if (n < 2) return\
    \ 1;\n  return fib(n-2) + fib(n-1);\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fib;\n \
    \ assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n \
    \ assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n89\n\nshould loosely\
    \ deep-equal\n\n55\n    at test (/tmp/tmpz_7oxsi6.js:16:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpz_7oxsi6.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 89,\n  expected:\
    \ 55,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977978
- exit_code: 0
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  if (n < 2) {\n\
    \    return n;\n  }\n  return fib(n - 1) + fib(n - 2);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977916
- exit_code: 1
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  if (n < 2) {\n\
    \    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n89\n\nshould loosely\
    \ deep-equal\n\n55\n    at test (/tmp/tmpgvce8txo.js:17:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpgvce8txo.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 89,\n  expected:\
    \ 55,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977970
- exit_code: 0
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  if (n < 2) {\n\
    \    return n;\n  }\n  return fib(n - 1) + fib(n - 2);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977916
- exit_code: 0
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  if (n < 2) {\n\
    \    return n;\n  }\n  return fib(n - 1) + fib(n - 2);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977916
- exit_code: 2
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  if (n < 0) throw\
    \ new TypeError(\"The first argument to `fib` must be a non-negative integer.\"\
    );\n  if (n < 1) throw new TypeError(\"The first argument to `fib` must be a positive\
    \ integer.\");\n  return (0, _util.math)(function* () {\n    let prev = [0, 1];\n\
    \    const next = [1];\n    let idx = 0;\n    while (idx < n) {\n      yield prev[idx\
    \ % 2];\n      prev[idx % 2] = next[idx % 2];\n      next[idx % 2] = prev[idx\
    \ % 2] + prev[idx % 2 + 1] + next[idx % 2];\n      idx++;\n    }\n  });\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: 'error TS2318: Cannot find global type ''IterableIterator''.

    ../../../../../tmp/tmp82k0n53t.ts(11,11): error TS2695: Left side of comma operator
    is unused and has no side effects.

    ../../../../../tmp/tmp82k0n53t.ts(11,14): error TS2304: Cannot find name ''_util''.

    '
  timestamp: 1659977978
- exit_code: 1
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  if (n < 2) return\
    \ 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fib;\n\
    \  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n89\n\nshould loosely\
    \ deep-equal\n\n55\n    at test (/tmp/tmpp9ls9xjy.js:16:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpp9ls9xjy.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 89,\n  expected:\
    \ 55,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977970
- exit_code: 0
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n\tif (n < 2) {\n\
    \t\treturn n;\n\t}\n\treturn fib(n - 1) + fib(n - 2);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977978
- exit_code: 1
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  if (n < 2) return\
    \ 1;\n  if (n < 3) return fib(n - 1) + fib(n - 2);\n  return fib(n - 1) + fib(n\
    \ - 2) + fib(n - 3) + fib(n - 4);\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fib;\n \
    \ assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n \
    \ assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n457\n\nshould\
    \ loosely deep-equal\n\n55\n    at test (/tmp/tmpvfxhmpsh.js:18:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpvfxhmpsh.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 457,\n  expected:\
    \ 55,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977978
- exit_code: 0
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n\tif (n <= 2) return\
    \ 1;\n\treturn fib(n - 1) + fib(n - 2);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fib;\n\
    \  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977978
- exit_code: 0
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  if (n < 2) return\
    \ n;\n  return fib(n - 1) + fib(n - 2);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fib;\n\
    \  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977970
- exit_code: 1
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n\tif (n < 2) {\n\
    \t\treturn 1;\n\t}\n\treturn fib(n - 1) + fib(n - 2);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n89\n\nshould loosely\
    \ deep-equal\n\n55\n    at test (/tmp/tmp72i1mh9h.js:17:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp72i1mh9h.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 89,\n  expected:\
    \ 55,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977978
- exit_code: 1
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  // Calculate\
    \ the Fibonacci number:\n  // 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...\n \
    \ const [a, b,] = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 100];\n  return n\
    \ > 1 ? fib(n-1) + a : a;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n\
    \  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n \
    \ assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n55\n    at test (/tmp/tmp83f2chkc.js:17:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp83f2chkc.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 55,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977978
- exit_code: 1
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  if (n < 2) {\n\
    \    return 1;\n  }\n\n  return fib(n - 1) + fib(n - 2);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n89\n\nshould loosely\
    \ deep-equal\n\n55\n    at test (/tmp/tmp_8pxizqp.js:17:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp_8pxizqp.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 89,\n  expected:\
    \ 55,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977973
- exit_code: 1
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  if (n < 2) return\
    \ 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fib;\n\
    \  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n89\n\nshould loosely\
    \ deep-equal\n\n55\n    at test (/tmp/tmpp9ls9xjy.js:16:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpp9ls9xjy.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 89,\n  expected:\
    \ 55,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977970
- exit_code: 0
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n\tif (n < 2) {\n\
    \t\treturn n;\n\t}\n\treturn fib(n - 1) + fib(n - 2);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977978
- exit_code: 0
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  if (n < 2) {\n\
    \    return n;\n  }\n  return fib(n - 1) + fib(n - 2);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977916
- exit_code: 1
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  if (n < 2) {\
    \ return 1; }\n  return fib(n - 1) + fib(n - 2);\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n89\n\nshould loosely\
    \ deep-equal\n\n55\n    at test (/tmp/tmpj1ouzmnd.js:17:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpj1ouzmnd.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 89,\n  expected:\
    \ 55,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977978
- exit_code: 2
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  // Base case:\n\
    \  if (n < 2) return 1;\n\n  // Calculate Fibonacci numbers:\n  let a, b = 1;\n\
    \  for (let i = 2; i <= n; i++) {\n    (a, b) = ([b, a + b]);\n  }\n  return a;\n\
    }\n</code>\n<|/ a tags=recursion,javascript,fibonacci,algorithm dscore=5 |>\n\
    <| c |>\nThe above example is incorrect due to unintended assignment of `a` and\
    \ `b`\n<|/ c |>\n<| a dscore=5 |>\n<code>\nlet n = 3;\nlet fibonacci = (n) =>\
    \ n < 2 ? 1 : fibonacci(n - 1) + fibonacci(n - 2);\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpwqo874ff.ts(19,2): error TS1110: Type expected.

    ../../../../../tmp/tmpwqo874ff.ts(19,3): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpwqo874ff.ts(20,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpwqo874ff.ts(20,4): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpwqo874ff.ts(21,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpwqo874ff.ts(21,7): error TS1109: Expression expected.

    ../../../../../tmp/tmpwqo874ff.ts(22,5): error TS1005: '';'' expected.

    ../../../../../tmp/tmpwqo874ff.ts(22,11): error TS1005: '';'' expected.

    ../../../../../tmp/tmpwqo874ff.ts(22,19): error TS1005: '';'' expected.

    ../../../../../tmp/tmpwqo874ff.ts(22,22): error TS1005: '';'' expected.

    ../../../../../tmp/tmpwqo874ff.ts(22,32): error TS1005: '';'' expected.

    ../../../../../tmp/tmpwqo874ff.ts(22,36): error TS1005: '';'' expected.

    ../../../../../tmp/tmpwqo874ff.ts(22,39): error TS1005: '';'' expected.

    ../../../../../tmp/tmpwqo874ff.ts(22,50): error TS1005: '';'' expected.

    ../../../../../tmp/tmpwqo874ff.ts(22,61): error TS1005: '';'' expected.

    ../../../../../tmp/tmpwqo874ff.ts(22,68): error TS1005: '';'' expected.

    ../../../../../tmp/tmpwqo874ff.ts(23,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpwqo874ff.ts(23,4): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpwqo874ff.ts(24,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpwqo874ff.ts(24,6): error TS1005: '';'' expected.

    ../../../../../tmp/tmpwqo874ff.ts(24,16): error TS1109: Expression expected.

    ../../../../../tmp/tmpwqo874ff.ts(26,5): error TS1005: '';'' expected.

    '
  timestamp: 1659977978
- exit_code: 0
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  return n < 2\
    \ ? n : fib(n-1) + fib(n-2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n\
    \  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n \
    \ assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977978
- exit_code: 2
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n    if (n < 0)\
    \ return NaN; // not defined for negative numbers\n    if (n < 2) return 0;  //\
    \ not defined for 0 or 1 arguments\n    if (n === 1) return 1;\n    return fib(n\
    \ - 1) + fib(n - 2);\n}\n\nexport function createReactiveState<State>(fn: (prevState:\
    \ State, props: State, ...args: any[]) => State) {\n    const initialState: State\
    \ = null;\n    let isFirstUpdate = true;\n    let currentState: State;\n\n   \
    \ const setCurrentState = newState => {\n        if (isFirstUpdate) {\n      \
    \      currentState = newState;\n            isFirstUpdate = false;\n        }\
    \ else {\n            currentState = getStateFromChanges(fn(currentState, props,\
    \ ...args));\n        }\n    };\n\n    const getStateFromChanges = changeState\
    \ => {\n        const newState = changeState === undefined ? initialState : changeState;\n\
    \        if (isChanged(currentState, newState)) {\n            currentState =\
    \ newState;\n        }\n        return currentState;\n    };\n\n    const isChanged\
    \ = (oldState, newState) => {\n        if (oldState === newState) return true;\n\
    \        if (oldState === undefined || newState === undefined) return false;\n\
    \        if (oldState === null || newState === null) return false;\n        if\
    \ (oldState.length !== newState.length) return false;\n        for (let i = 0;\
    \ i < oldState.length; i++) {\n            if (oldState[i] !== newState[i]) return\
    \ false;\n        }\n        return true;\n    };\n\n    return { getState: setCurrentState,\
    \ setState };\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n\
    \  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n \
    \ assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpvb4nd4_k.ts(25,65): error TS2304: Cannot find name
    ''props''.

    ../../../../../tmp/tmpvb4nd4_k.ts(25,75): error TS2304: Cannot find name ''args''.

    ../../../../../tmp/tmpvb4nd4_k.ts(48,41): error TS18004: No value exists in scope
    for the shorthand property ''setState''. Either declare one or provide an initializer.

    '
  timestamp: 1659977978
- exit_code: 0
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  if (n < 2) {\n\
    \    return n;\n  }\n  return fib(n - 1) + fib(n - 2);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977916
- exit_code: 0
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  // Return Fibonacci\
    \ number for given n.\n  if (n < 2) {\n    return n;\n  }\n\n  return fib(n-2)\
    \ + fib(n-1);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n\
    \  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n \
    \ assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977978
- exit_code: 0
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n    if (n < 2)\
    \ {\n        return n;\n    }\n    return fib(n-1) + fib(n-2);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977978
- exit_code: 0
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  if (n < 2) {\
    \ return n; }\n  return fib(n - 1) + fib(n - 2);\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977977
- exit_code: 1
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  let isFirst =\
    \ true;\n  let nextNumber = 1;\n  let prevNumber = 1;\n  for (let i = 0; i < n;\
    \ i += 1) {\n    if (isFirst) {\n      nextNumber = prevNumber + 1;\n      isFirst\
    \ = false;\n    } else {\n      nextNumber = nextNumber + prevNumber;\n    }\n\
    \    prevNumber = nextNumber;\n  }\n  return nextNumber;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1024\n\nshould\
    \ loosely deep-equal\n\n55\n    at test (/tmp/tmp0457wser.js:27:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp0457wser.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1024,\n  expected:\
    \ 55,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977978
- exit_code: 0
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  if (n < 2) {\n\
    \    return n;\n  }\n  return fib(n - 1) + fib(n - 2);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977916
- exit_code: 1
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  if (n < 2) {\n\
    \    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n89\n\nshould loosely\
    \ deep-equal\n\n55\n    at test (/tmp/tmpgvce8txo.js:17:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpgvce8txo.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 89,\n  expected:\
    \ 55,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977970
- exit_code: 0
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  if (n < 2) {\n\
    \    return n;\n  }\n  return fib(n - 1) + fib(n - 2);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977916
- exit_code: 0
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  if (n < 2) return\
    \ n;\n  return fib(n-1) + fib(n-2);\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fib;\n \
    \ assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n \
    \ assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977978
- exit_code: 0
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n\tif (n < 2) {\n\
    \t\treturn n;\n\t} else if (n === 2) {\n\t\treturn 1;\n\t} else {\n\t\treturn\
    \ fib(n - 1) + fib(n - 2);\n\t}\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fib;\n \
    \ assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n \
    \ assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977978
- exit_code: 0
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  if (n < 2) {\n\
    \    return n;\n  }\n  return fib(n - 1) + fib(n - 2);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977916
- exit_code: 1
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  if (n <= 1) return\
    \ 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fib;\n\
    \  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n89\n\nshould loosely\
    \ deep-equal\n\n55\n    at test (/tmp/tmpjsh_6p8z.js:16:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpjsh_6p8z.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 89,\n  expected:\
    \ 55,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977970
- exit_code: 1
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n    if (n < 0)\
    \ throw RangeError(\"fib() expects number in range [0 - 1]\");\n    if (n <= 2)\
    \ {\n        return 1;\n    }\n    let a: number = 1, b: number = 1, c: number,\
    \ d: number = 0, y: number = 0;\n    for (let i: number = 2; i <= n; i++) {\n\
    \        y = a;\n        a = b;\n        b = c;\n        c = a + b;\n        d\
    \ = y + c;\n    }\n    return d;\n}\n\nexport function timeIt<T>(func: () => T,\
    \ times: number): T[] {\n    const t: T[] = [];\n    for (let i = 0; i < times;\
    \ i++) {\n        t.push(func());\n    }\n    return t;\n}\n\nexport function\
    \ getRandomInt(max: number): number {\n    return Math.floor(Math.random() * max);\n\
    }\n\nexport function getRandomIntFromInterval(min: number, max: number): number\
    \ {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould\
    \ loosely deep-equal\n\n55\n    at test (/tmp/tmpwm1aradz.js:45:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpwm1aradz.js:51:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected:\
    \ 55,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977978
- exit_code: 0
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  // Return Fibonacci\
    \ number using recursion\n  if (n === 0 || n === 1) {\n    return n;\n  }\n\n\
    \  return fib(n - 1) + fib(n - 2);\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fib;\n \
    \ assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n \
    \ assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977978
- exit_code: 1
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  if (n < 2) {\n\
    \    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n89\n\nshould loosely\
    \ deep-equal\n\n55\n    at test (/tmp/tmpgvce8txo.js:17:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpgvce8txo.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 89,\n  expected:\
    \ 55,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977970
- exit_code: 1
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  // Make sure\
    \ we return a number if we can't fib.\n  if (n < 0 || n > 15 || n === Infinity)\
    \ return NaN;\n\n  const { length } = fibonacci;\n  // Start index at -1 to start\
    \ counting from the last item.\n  const start = n === 0 ? length - 1 : n - 1;\n\
    \  // Use cached result if available.\n  if (n < length && fibonacci[n] !== undefined)\
    \ {\n    return fibonacci[n];\n  }\n\n  // Otherwise recurse and populate.\n \
    \ if (n <= start) {\n    return fibonacci[start] = fib(n - 1);\n  }\n\n  return\
    \ fibonacci[start] = fib(n - 2) + fib(n - 1);\n}\n\nconst fibonacci: number[]\
    \ = [];\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n\
    \  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n \
    \ assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nNaN\n\nshould\
    \ loosely deep-equal\n\n55\n    at test (/tmp/tmp3_ivdjqg.js:29:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp3_ivdjqg.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: NaN,\n  expected:\
    \ 55,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977978
- exit_code: 1
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  if (n < 2) return\
    \ 1;\n  return fib(n - 1) + fib(n - 2);\n}\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fib;\n \
    \ assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n \
    \ assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n89\n\nshould loosely\
    \ deep-equal\n\n55\n    at test (/tmp/tmpmbgpg7rc.js:16:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpmbgpg7rc.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 89,\n  expected:\
    \ 55,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977980
- exit_code: 2
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  if (n < 2) {\
    \ return n; }\n  return fib(n - 1) + fib(n - 2);\n}\n\ndeclare const fib: typeof\
    \ fib;\nexport { fib as fib };\n\ndeclare module \"lodash\" {\n  declare var noConflict():\
    \ typeof _;\n  declare function noop(...args: any[]): void;\n  declare function\
    \ identity<T>(value: T): T;\n  declare function constant<T>(value: T): () => T;\n\
    \  declare function property(path: Array<string> | string): Function;\n  declare\
    \ function propertyOf(object: Object): (path: Array<string> | string) => Function;\n\
    \  declare function matcher(source: Object): (...args: any[]) => boolean;\n  declare\
    \ function matchesProperty(path: Array<string> | string): Function;\n  declare\
    \ function method(path: Array<string> | string): Function;\n  declare function\
    \ methodOf(object: Object): (path: Array<string> | string) => Function;\n  declare\
    \ function mixin<T: Function>(fns: Array<T | { [key: string]: Function }>): T;\n\
    \  declare function noConflict(): typeof _;\n  declare function noop(...args:\
    \ any[]): void;\n  declare function nthArg(n: number): Function;\n  declare function\
    \ over<T>(fn: Function): Function;\n  declare function overEvery<T>(fn: Function):\
    \ Function;\n  declare function overSome<T>(fn: Function): Function;\n  declare\
    \ function property(path: Array<string> | string): Function;\n  declare function\
    \ propertyOf(object: Object): (path: Array<string> | string) => Function;\n  declare\
    \ function range(start: number, end: number, step?: number): Array<number>;\n\
    \  declare function range(stop: number, step?: number): Array<number>;\n  declare\
    \ function rangeRight(start: number, end: number, step?: number): Array<number>;\n\
    \  declare function rangeRight(stop: number, step?: number): Array<number>;\n\
    \  declare function runInContext(context: string, context?: Object): any;\n  declare\
    \ function stubArray<T>(): Array<T>;\n  declare function stubFalse(): false;\n\
    \  declare function stubObject<T>(): Object;\n  declare function stubString():\
    \ \"\";\n  declare function stubTrue(): true;\n  declare function times(n: number,\
    \ ...rest: Array<void>): Array<number>;\n  declare function times<T>(n: number,\
    \ iteratee: (i: number) => T): Array<T>;\n  declare function toPath(value: any):\
    \ Array<string>;\n  declare function uniqueId(prefix: string): string;\n  declare\
    \ function unescape(str: string): string;\n  declare function uniqueId\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpumrvq5jz.ts(17,25): error TS1005: '','' expected.

    ../../../../../tmp/tmpumrvq5jz.ts(17,37): error TS1005: ''=>'' expected.

    ../../../../../tmp/tmpumrvq5jz.ts(27,27): error TS1005: '','' expected.

    ../../../../../tmp/tmpumrvq5jz.ts(52,1): error TS1005: ''('' expected.

    ../../../../../tmp/tmpumrvq5jz.ts(65,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659977980
- exit_code: 1
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n\tif (n <= 0) {\n\
    \t\tthrow new Error('Not a Fibonacci number')\n\t} else if (n === 1 || n === 2)\
    \ {\n\t\treturn n\n\t} else {\n\t\treturn fib(n-2) + fib(n-1)\n\t}\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n89\n\nshould loosely\
    \ deep-equal\n\n55\n    at test (/tmp/tmpdr2fwhw6.js:22:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpdr2fwhw6.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 89,\n  expected:\
    \ 55,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977980
- exit_code: 1
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  if (n < 0) {\n\
    \    throw new Error(`fib ${n} -> ${n}`);\n  }\n  if (n === 0) {\n    return 1;\n\
    \  }\n  if (n === 1) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n89\n\nshould loosely\
    \ deep-equal\n\n55\n    at test (/tmp/tmpzl1vrg0u.js:23:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpzl1vrg0u.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 89,\n  expected:\
    \ 55,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977980
- exit_code: 0
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  if (n < 2) return\
    \ n;\n  return fib(n - 1) + fib(n - 2);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fib;\n\
    \  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977970
- exit_code: 2
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  if (n < 0) return\
    \ 0;\n  if (n <= 1) return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\nconst nr\
    \ = Math.log2(n);\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n\
    \  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n \
    \ assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpl1o19sqe.ts(14,17): error TS2551: Property ''log2''
    does not exist on type ''Math''. Did you mean ''LOG2E''?

    ../../../../../tmp/tmpl1o19sqe.ts(14,22): error TS2304: Cannot find name ''n''.

    '
  timestamp: 1659977980
- exit_code: 1
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  if (n < 2) return\
    \ 1;\n  if (n < 5) return fib(n - 1) + fib(n - 2);\n  return Math.pow(fib(n -\
    \ 2), n);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n\
    \  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n \
    \ assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nInfinity\n\nshould\
    \ loosely deep-equal\n\n55\n    at test (/tmp/tmp8pwq1dke.js:18:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp8pwq1dke.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: Infinity,\n\
    \  expected: 55,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977980
- exit_code: 1
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  if (n < 2) {\n\
    \    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n89\n\nshould loosely\
    \ deep-equal\n\n55\n    at test (/tmp/tmpgvce8txo.js:17:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpgvce8txo.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 89,\n  expected:\
    \ 55,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977970
- exit_code: 0
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n\tif (n <= 2) {\n\
    \t\treturn 1;\n\t}\n\n\treturn fib(n-1) + fib(n-2);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977980
- exit_code: 0
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  if (n < 2) return\
    \ n;\n  return fib(n - 1) + fib(n - 2);\n}\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fib;\n \
    \ assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n \
    \ assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977981
- exit_code: 0
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  if (n < 0) return\
    \ -1\n  if (n <= 2) return 1\n  return fib(n - 1) + fib(n - 2)\n}\n\nconst maxIteration\
    \ = 5\nconst fibonacciNumbers = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55]\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977981
- exit_code: 2
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  if (n === 0)\
    \ {\n    return 0;\n  }\n\n  if (n === 1) {\n    return 1;\n  }\n\n  return fib(n\
    \ - 1) + fib(n - 2);\n}\n```\n\nThe first line says \"declare a function that\
    \ will take a single argument that is a number\". The next line shows \"declare\
    \ a constant called fib. The next line says \"declare a function that will take\
    \ a single argument, n, which is a number\". The next line shows \"declare a variable\
    \ called n and assign it the value 0. The next line shows \"declare a variable\
    \ called n and assign it the value 1\". The last line shows \"call the function\
    \ fib with the argument n\". The next line shows \"return the value of calling\
    \ fib with the argument n\". The third line shows \"declare a variable called\
    \ n and assign it the value 2\". The fourth line shows \"call the function fib\
    \ with the argument n\". The fifth line shows \"return the value of calling fib\
    \ with the argument n\". That is the whole thing about functions - they take arguments,\
    \ do something to them, and return a value.\n\nThe second line says \"declare\
    \ a constant called fib. The second line says \"declare a function that will take\
    \ a single argument, n, which is a number\". The second line shows \"declare a\
    \ variable called n and assign it the value 0. The second line shows \"declare\
    \ a variable called n and assign it the value 1\". The second line shows \"call\
    \ the function fib with the argument n\". The second line shows \"return the value\
    \ of calling fib with the argument n\". The second line shows \"declare a variable\
    \ called n and assign it the value 2\". The second line shows \"call the function\
    \ fib with the argument n\". The second line shows \"return the value of calling\
    \ fib with the argument n\". The second line shows \"declare a variable called\
    \ n and assign it the value 3\". The second line shows \"call the function fib\
    \ with the argument n\". The second line shows \"return the value of calling fib\
    \ with the argument n\".\n\nThe third line says \"declare a constant called fib.\
    \ The third line says \"declare a function that will take a single argument, n,\
    \ which is a number\". The third line shows \"declare a variable called n and\
    \ assign it the value 0. The third line shows \"declare a variable called n and\
    \ assign it the value 1\". The third line shows \"call the function fib with the\
    \ argument n\". The third line shows \"return the value of calling fib with the\
    \ argument n\". The third line shows \"declare a variable called n and assign\
    \ it the value 2\". The third line shows \"call the function fib with the argument\
    \ n\". The third line shows \"return the value of calling fib with the argument\
    \ n\". The third line shows \"declare a variable called n and assign it the value\
    \ 3\". The third line shows \"call the function fib \ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpf51t137_.ts(39,8): error TS1160: Unterminated template
    literal.

    '
  timestamp: 1659977980
- exit_code: 1
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  let a: number\
    \ = 0;\n  let b: number = 1;\n  for (let i = 3; i <= n; i++) {\n    a = b;\n \
    \   b = a + b;\n  }\n  return b;\n}\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n\
    \  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n \
    \ assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n256\n\nshould\
    \ loosely deep-equal\n\n55\n    at test (/tmp/tmpi47y7wcp.js:20:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpi47y7wcp.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 256,\n  expected:\
    \ 55,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977981
- exit_code: 1
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  if (n < 2) {\n\
    \    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n89\n\nshould loosely\
    \ deep-equal\n\n55\n    at test (/tmp/tmpgvce8txo.js:17:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpgvce8txo.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 89,\n  expected:\
    \ 55,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977970
- exit_code: 0
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  if (n < 2) {\n\
    \    return n;\n  }\n  return fib(n - 1) + fib(n - 2);\n}\n\nconst _fib = (n:\
    \ number) => fib(n);\nconst fib42 = _fib(42);\n\nconsole.log(\"fib(42):\", fib42);\
    \ // 55\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n\
    \  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n \
    \ assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'fib(42): 267914296

    '
  timestamp: 1659977985
- exit_code: 0
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  if (n < 2) {\n\
    \    return n;\n  }\n  return fib(n - 1) + fib(n - 2);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977916
- exit_code: 0
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n\tif (n < 2) {\n\
    \t\treturn n;\n\t}\n\treturn fib(n - 1) + fib(n - 2);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977978
- exit_code: 1
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n    if (n === 0)\
    \ {\n        return 0;\n    }\n\n    return fib(n - 1) + fib(n - 2);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmppp8kbjk9.js:9\n    if (n === 0) {\n    ^\n\nRangeError: Maximum\
    \ call stack size exceeded\n    at fib (/tmp/tmppp8kbjk9.js:9:5)\n    at fib (/tmp/tmppp8kbjk9.js:12:12)\n\
    \    at fib (/tmp/tmppp8kbjk9.js:12:12)\n    at fib (/tmp/tmppp8kbjk9.js:12:12)\n\
    \    at fib (/tmp/tmppp8kbjk9.js:12:12)\n    at fib (/tmp/tmppp8kbjk9.js:12:12)\n\
    \    at fib (/tmp/tmppp8kbjk9.js:12:12)\n    at fib (/tmp/tmppp8kbjk9.js:12:12)\n\
    \    at fib (/tmp/tmppp8kbjk9.js:12:12)\n    at fib (/tmp/tmppp8kbjk9.js:12:12)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977980
- exit_code: 0
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  if (n <= 2) {\n\
    \    return 1;\n  }\n\n  return fib(n-1) + fib(n-2);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977981
- exit_code: 1
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  if (n < 0) throw\
    \ new TypeError('n must be a non-negative number');\n  if (n === 0 || n === 1)\
    \ return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n89\n\nshould loosely\
    \ deep-equal\n\n55\n    at test (/tmp/tmpv39n5w7i.js:18:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpv39n5w7i.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 89,\n  expected:\
    \ 55,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977981
- exit_code: 0
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  if (n < 2) {\n\
    \    return n;\n  }\n  return fib(n - 1) + fib(n - 2);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977916
- exit_code: 0
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n\treturn n < 2\
    \ ? n : fib(n - 1) + fib(n - 2);\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fib;\n \
    \ assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n \
    \ assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977981
- exit_code: 1
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  if (n < 2) return\
    \ 1;\n  if (n < 5) return fib(n - 1) + fib(n - 2);\n  return fib(n - 1) + fib(n\
    \ - 2) + fib(n - 3) + fib(n - 4);\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fib;\n \
    \ assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n \
    \ assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n287\n\nshould\
    \ loosely deep-equal\n\n55\n    at test (/tmp/tmp_y06wkfy.js:18:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp_y06wkfy.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 287,\n  expected:\
    \ 55,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977981
- exit_code: 0
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  if (n < 2) {\n\
    \    return n;\n  }\n\n  return fib(n - 1) + fib(n - 2);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977973
- exit_code: 2
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  if (n < 2) {\
    \ return n; }\n  return fib(n-2) + fib(n-1);\n}\n\ndeclare var fib: typeof _;\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpa8_hi2_q.ts(8,10): error TS2300: Duplicate identifier
    ''fib''.

    ../../../../../tmp/tmpa8_hi2_q.ts(13,13): error TS2300: Duplicate identifier ''fib''.

    ../../../../../tmp/tmpa8_hi2_q.ts(13,25): error TS2304: Cannot find name ''_''.

    '
  timestamp: 1659977980
- exit_code: 1
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n\tif (n <= 2) {\n\
    \t\treturn n;\n\t} else if (n === 3) {\n\t\treturn 1;\n\t} else if (n === 5) {\n\
    \t\treturn 1;\n\t} else if (n === 10) {\n\t\treturn 2;\n\t} else {\n\t\treturn\
    \ fib(n - 2) + fib(n - 1);\n\t}\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fib;\n \
    \ assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n \
    \ assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n55\n    at test (/tmp/tmpg5ax0zbx.js:28:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpg5ax0zbx.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 55,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977981
- exit_code: 1
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  if (n < 2) {\n\
    \    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n89\n\nshould loosely\
    \ deep-equal\n\n55\n    at test (/tmp/tmpgvce8txo.js:17:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpgvce8txo.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 89,\n  expected:\
    \ 55,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977970
- exit_code: 1
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  if (n < 2) {\n\
    \    return 1;\n  }\n\n  return fib(n - 1) + fib(n - 2);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n89\n\nshould loosely\
    \ deep-equal\n\n55\n    at test (/tmp/tmp_8pxizqp.js:17:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp_8pxizqp.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 89,\n  expected:\
    \ 55,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977973
- exit_code: 0
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  if (n < 2) {\n\
    \    return n;\n  }\n\n  return fib(n - 1) + fib(n - 2);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977973
- exit_code: 2
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  if (n < 0) throw\
    \ new Error(\"fib(n) not implemented\");\n\n  if (n < 2) return 1;\n  return fibHelper(n\
    \ - 1) + fibHelper(n - 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n\
    \  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n \
    \ assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpcwa70e2i.ts(12,10): error TS2304: Cannot find name
    ''fibHelper''.

    ../../../../../tmp/tmpcwa70e2i.ts(12,29): error TS2304: Cannot find name ''fibHelper''.

    '
  timestamp: 1659977981
- exit_code: 1
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  if (n < 2) {\n\
    \    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n89\n\nshould loosely\
    \ deep-equal\n\n55\n    at test (/tmp/tmpgvce8txo.js:17:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpgvce8txo.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 89,\n  expected:\
    \ 55,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977970
- exit_code: 2
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  // Fibonacci\
    \ Number.\n  // Returns 0 if we are at the last Fibonacci number.\n  return n\
    \ < 2\n    ? n\n    : fib(n-1) + fib(n-2);\n}\n\ndeclare const _default: (...args:\
    \ any[]) => number;\nexport default _default;\n\n},{}],183:[function(require,module,exports){\n\
    \"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value:\
    \ true\n});\nexports.default = void 0;\n\nvar _curry = _interopRequireDefault(require(\"\
    ./curry.js\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n\
    \  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n \
    \ assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpixpqiqt5.ts(19,1): error TS1128: Declaration or statement
    expected.

    ../../../../../tmp/tmpixpqiqt5.ts(19,2): error TS1128: Declaration or statement
    expected.

    ../../../../../tmp/tmpixpqiqt5.ts(19,5): error TS1128: Declaration or statement
    expected.

    ../../../../../tmp/tmpixpqiqt5.ts(19,6): error TS1128: Declaration or statement
    expected.

    ../../../../../tmp/tmpixpqiqt5.ts(19,10): error TS1005: '';'' expected.

    ../../../../../tmp/tmpixpqiqt5.ts(42,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659977981
- exit_code: 1
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n\tif (n < 2) {\n\
    \t\treturn 1;\n\t}\n\treturn fib(n - 1) + fib(n - 2);\n}\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n89\n\nshould loosely\
    \ deep-equal\n\n55\n    at test (/tmp/tmpq13isfeu.js:17:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpq13isfeu.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 89,\n  expected:\
    \ 55,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977981
- exit_code: 1
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  if (n < 2) return\
    \ 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fib;\n\
    \  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n89\n\nshould loosely\
    \ deep-equal\n\n55\n    at test (/tmp/tmpp9ls9xjy.js:16:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpp9ls9xjy.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 89,\n  expected:\
    \ 55,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977970
- exit_code: 0
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  if (n < 2) {\n\
    \    return n;\n  }\n  return fib(n - 1) + fib(n - 2);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977916
- exit_code: 2
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n    if (n < 0)\
    \ {\n        throw new ArgumentOutOfRangeError();\n    }\n    if (n < 1) {\n \
    \       return n;\n    }\n    if (n === 1 || n === 2) {\n        return 1;\n \
    \   }\n    return fib(n - 1) + fib(n - 2);\n}\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fib;\n\
    \  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpz3azrfed.ts(10,19): error TS2304: Cannot find name
    ''ArgumentOutOfRangeError''.

    '
  timestamp: 1659977981
- exit_code: 1
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  if (n < 2) {\n\
    \    return 1;\n  }\n  return fib(n-2) + fib(n-1);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n89\n\nshould loosely\
    \ deep-equal\n\n55\n    at test (/tmp/tmpeevco4kw.js:17:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpeevco4kw.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 89,\n  expected:\
    \ 55,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977982
- exit_code: 2
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  if (n < 0 ||\
    \ n > 100) {\n    throw new RangeError('Expected a number between 0 and 100');\n\
    \  }\n\n  const prev = 0;\n  let curr = 1;\n  let next = 1;\n  let max = Math.max(prev,\
    \ curr);\n\n  while (next < max) {\n    prev = curr;\n    curr = next;\n    next\
    \ = curr + (prev - curr) * fibonacci[n - 1];\n  }\n\n  return curr;\n}\n\nconsole.log(fib(10));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpfh9vhbrc.ts(19,5): error TS2588: Cannot assign to
    ''prev'' because it is a constant.

    ../../../../../tmp/tmpfh9vhbrc.ts(21,35): error TS2304: Cannot find name ''fibonacci''.

    '
  timestamp: 1659977982
- exit_code: 2
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  if (n < 0) return\
    \ 0;\n  if (n === 1) return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n</code>\n\
    <|/ a dscore=4 tags=algorithm,javascript |>\n<| c |>\nI wonder if there's a more\
    \ \"efficient\" method of doing this (maybe with a simple mathematical trick).\
    \ My gut tells me that a recursive call can make this very inefficient. Also,\
    \ it's not a simple fibonacci sequence to calculate as shown. Try `fib(10000)`,\
    \ for example...\n<|/ c |>\n<| c |>\nYou can avoid calling `fib` recursively in\
    \ case `n<1` by memoizing: `const fibn = memoize(fib);` and then doing `fibn(n)`.\
    \ Note that `memoize` requires a memoization function of some kind, here it returns\
    \ `memo[input]` if it exists, otherwise it does the computation and stores it\
    \ in `memo[input]`.\n<|/ c |>\n<| a |>\nAn efficient way to calculate the nth\
    \ Fibonacci number is by using the following formula:\nF(n) = F(n-1) + F(n-2)\
    \ + O(1)\nThe O(1) complexity can be achieved by using a hash table.\n<|/ a tags=algorithm,javascript\
    \ dscore=4 |>\n<| a dscore=4 |>\n<code>\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fib;\n \
    \ assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n \
    \ assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpl08bilo2.ts(13,2): error TS1110: Type expected.

    ../../../../../tmp/tmpl08bilo2.ts(13,3): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpl08bilo2.ts(14,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpl08bilo2.ts(14,4): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpl08bilo2.ts(15,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpl08bilo2.ts(15,7): error TS1109: Expression expected.

    ../../../../../tmp/tmpl08bilo2.ts(16,3): error TS1005: '';'' expected.

    ../../../../../tmp/tmpl08bilo2.ts(16,10): error TS1005: '';'' expected.

    ../../../../../tmp/tmpl08bilo2.ts(16,13): error TS1005: ''('' expected.

    ../../../../../tmp/tmpl08bilo2.ts(16,18): error TS1005: '')'' expected.

    ../../../../../tmp/tmpl08bilo2.ts(16,182): error TS1005: '';'' expected.

    ../../../../../tmp/tmpl08bilo2.ts(16,184): error TS1005: '';'' expected.

    ../../../../../tmp/tmpl08bilo2.ts(16,188): error TS1005: '';'' expected.

    ../../../../../tmp/tmpl08bilo2.ts(16,190): error TS1005: '';'' expected.

    ../../../../../tmp/tmpl08bilo2.ts(16,197): error TS1005: '';'' expected.

    ../../../../../tmp/tmpl08bilo2.ts(16,207): error TS1005: '';'' expected.

    ../../../../../tmp/tmpl08bilo2.ts(16,216): error TS1005: '';'' expected.

    ../../../../../tmp/tmpl08bilo2.ts(16,219): error TS1005: '';'' expected.

    ../../../../../tmp/tmpl08bilo2.ts(16,243): error TS1005: '';'' expected.

    ../../../../../tmp/tmpl08bilo2.ts(16,257): error TS1109: Expression expected.

    ../../../../../tmp/tmpl08bilo2.ts(16,261): error TS1005: ''('' expected.

    ../../../../../tmp/tmpl08bilo2.ts(16,268): error TS1005: '';'' expected.

    ../../../../../tmp/tmpl08bilo2.ts(17,3): error TS1110: Type expected.

    ../../../../../tmp/tmpl08bilo2.ts(17,4): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpl08bilo2.ts(18,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpl08bilo2.ts(18,7): error TS1109: Expression expected.

    ../../../../../tmp/tmpl08bilo2.ts(19,5): error TS1005: '';'' expected.

    ../../../../../tmp/tmpl08bilo2.ts'
  timestamp: 1659977982
- exit_code: 2
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  // We want to\
    \ limit fib(N) < N, but JS doesn't have this concept.\n  // So instead we map\
    \ [0, N-1] to [0, 2N-1], where N can be any number.\n  // For [0, N-1] we return\
    \ N for N <= 0, and 2 * N for N > 0.\n  // This results in [0, N] being mapped\
    \ to [0, 2 * N] and [0, N - 1]\n  // being mapped to [0, 2 * N - 1].\n  // For\
    \ example, fib(3) would be 8.\n  let retVal = 0;\n  let isPositive = isPositiveNumber;\n\
    \  if (n < 0) {\n    n = 2 * n + 1;\n    isPositive = (n: number) => n === 0;\n\
    \  }\n  while (n) {\n    // Add n to retVal if isPositive(n)\n    if (isPositive(n))\
    \ {\n      retVal += n;\n    }\n    // Remove n from n if isPositive(n)\n    n\
    \ = isPositive(n) ? n - 1 : 0;\n  }\n  return retVal;\n}\n</code>\n<|/ a |>\n\
    <| c |>\nHi Amadan! I was looking for a recursive solution, so your second example\
    \ was very helpful.  How would you do that with a recursive function?\n<|/ c |>\n\
    <| c |>\nThanks for the reply! This was very helpful.  How would you convert this\
    \ to a recursive function?\n<|/ c |>\n<| c |>\nThis solution won't work for `fib(9)`,\
    \ because it's `2 * 9` which exceeds the max value of `fib(8) + fib(7)`. So you'd\
    \ need to have a separate `isPositive(number | undefined)` that tests for `undefined`.\n\
    <|/ c |>\n<| c |>\nThis is also the answer to [this](https://stackoverflow.com/questions/60501803/how-to-solve-this-number-is-fibonacci-sequence-problem-in-javascript)\
    \ question, for which you got it wrong.\n<|/ c |>\n<| c |>\nHi, I have updated\
    \ the answer so that it can handle fib(9)\n<|/ c |>\n<| a dscore=5 tags=fibonacci,fibonacci-number,javascript,recursion\
    \ |>\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n\
    \  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n \
    \ assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp1_4aimtq.ts(31,2): error TS1110: Type expected.

    ../../../../../tmp/tmp1_4aimtq.ts(31,3): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmp1_4aimtq.ts(32,2): error TS1109: Expression expected.

    ../../../../../tmp/tmp1_4aimtq.ts(32,4): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmp1_4aimtq.ts(33,2): error TS1109: Expression expected.

    ../../../../../tmp/tmp1_4aimtq.ts(33,7): error TS1109: Expression expected.

    ../../../../../tmp/tmp1_4aimtq.ts(34,4): error TS1005: '';'' expected.

    ../../../../../tmp/tmp1_4aimtq.ts(34,12): error TS1005: '';'' expected.

    ../../../../../tmp/tmp1_4aimtq.ts(34,14): error TS1005: '';'' expected.

    ../../../../../tmp/tmp1_4aimtq.ts(34,18): error TS1005: '';'' expected.

    ../../../../../tmp/tmp1_4aimtq.ts(34,26): error TS1005: '';'' expected.

    ../../../../../tmp/tmp1_4aimtq.ts(34,30): error TS1005: ''('' expected.

    ../../../../../tmp/tmp1_4aimtq.ts(34,32): error TS1005: '';'' expected.

    ../../../../../tmp/tmp1_4aimtq.ts(34,42): error TS1005: '';'' expected.

    ../../../../../tmp/tmp1_4aimtq.ts(34,55): error TS1005: '')'' expected.

    ../../../../../tmp/tmp1_4aimtq.ts(34,60): error TS1005: '';'' expected.

    ../../../../../tmp/tmp1_4aimtq.ts(34,67): error TS1005: '';'' expected.

    ../../../../../tmp/tmp1_4aimtq.ts(34,75): error TS1005: '';'' expected.

    ../../../../../tmp/tmp1_4aimtq.ts(34,79): error TS1005: '';'' expected.

    ../../../../../tmp/tmp1_4aimtq.ts(34,84): error TS1005: '';'' expected.

    ../../../../../tmp/tmp1_4aimtq.ts(34,98): error TS1005: '';'' expected.

    ../../../../../tmp/tmp1_4aimtq.ts(34,104): error TS1005: '';'' expected.

    ../../../../../tmp/tmp1_4aimtq.ts(34,108): error TS1005: '';'' expected.

    ../../../../../tmp/tmp1_4aimtq.ts(34,116): error TS1005: '';'' expected.

    ../../../../../tmp/tmp1_4aimtq.ts(34,121): error TS1005: ''('' expected.

    ../../../../../tmp/tmp1_4aimtq.ts(34,123): error TS1005: '')'' expected.

    ../../../../../tmp/tmp1_4aimtq.ts(34,133): error TS1005: '';'' expected.

    ../../../../../tmp/tmp1_4aimtq.ts(34,141): error TS1003: Identifier expected.

    ../..'
  timestamp: 1659977983
- exit_code: 1
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  if (n < 2) return\
    \ 1;\n  if (n < 3) return fib(n + 1) * fib(n - 1);\n  return fib(n - 1) * fib(n\
    \ - 2) + 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n\
    \  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n \
    \ assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpj9s5hs72.js:9\n    if (n < 2)\n    ^\n\nRangeError: Maximum call\
    \ stack size exceeded\n    at fib (/tmp/tmpj9s5hs72.js:9:5)\n    at fib (/tmp/tmpj9s5hs72.js:13:12)\n\
    \    at fib (/tmp/tmpj9s5hs72.js:12:16)\n    at fib (/tmp/tmpj9s5hs72.js:13:12)\n\
    \    at fib (/tmp/tmpj9s5hs72.js:12:16)\n    at fib (/tmp/tmpj9s5hs72.js:13:12)\n\
    \    at fib (/tmp/tmpj9s5hs72.js:12:16)\n    at fib (/tmp/tmpj9s5hs72.js:13:12)\n\
    \    at fib (/tmp/tmpj9s5hs72.js:12:16)\n    at fib (/tmp/tmpj9s5hs72.js:13:12)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977983
- exit_code: 0
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  if (n < 2) {\n\
    \    return 1;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  return fib(n - 1)\
    \ + fib(n - 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n\
    \  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n \
    \ assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977983
- exit_code: 2
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  if (n < 2) return\
    \ 1;\n  return fib(n - 1) + fib(n - 2);\n}\n```\n*/\nexport function fib(n: number):\
    \ number;\n\nexport function fib(n: number, memo?: number[]): number;\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp070f85j1.ts(31,8): error TS1160: Unterminated template
    literal.

    '
  timestamp: 1659977983
- exit_code: 1
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n\tif (n < 2) return\
    \ 1;\n\tif (n === 2) return 2;\n\treturn fib(n - 1) + fib(n - 2);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n89\n\nshould loosely\
    \ deep-equal\n\n55\n    at test (/tmp/tmp2sj1rb55.js:18:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp2sj1rb55.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 89,\n  expected:\
    \ 55,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977983
- exit_code: 0
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n\tif (n < 2) return\
    \ n;\n\treturn fib(n - 1) + fib(n - 2);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fib;\n\
    \  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977973
- exit_code: 0
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  if (n < 0) return\
    \ 0;\n  if (n === 0 || n === 1) return n;\n  return fib(n - 1) + fib(n - 2);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977983
- exit_code: 2
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  if (n < 2) {\n\
    \    return 1;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  return fib(n - 1)\
    \ + fib(n - 2);\n}\n</code>\n<|/ a tags=recursion,fibonacci,algorithm,performance\
    \ |>\n<| a dscore=2 |>\nHere is an implementation for Java. It is recursive and\
    \ it should be fast enough (unless you are doing this in some sort of a time critical).\n\
    <code>\npublic class Fib {\n\n    private static long f(int n) {\n        return\
    \ n < 2 ? 1 : n < 4 ? 1 : f(n - 1) + f(n - 2);\n    }\n\n    public static void\
    \ main(String[] args) {\n        System.out.println(f.invoke(5));\n    }\n\n}\n\
    </code>\n<|/ a tags=recursion,fibonacci,algorithm,performance |>\n<| c |>\nthis\
    \ has a huge space leak.  You need to return something.  You aren't supposed to\
    \ call a method recursively.\n<|/ c |>\n<| a tags=recursion,fibonacci,algorithm,performance\
    \ |>\nAn alternative algorithm that could be used is this: \n<code>\nF(n) = Fib(2*n-1)+1\n\
    </code>\nWhere Fib(2*n-1) is the nth Fibonacci number and 1 is included.\n<|/\
    \ a dscore=2 |>\n<| c |>\n`f(n) = fib(n-1) + fib(n-2) + 1` works just as well,\
    \ though it's much slower\n<|/ c |>\n<| c |>\n, that is a very good point. Thanks\
    \ for pointing that out. Though I did say it could be used as an alternative algorithm.\n\
    <|/ c |>\n<| c |>\nI think you should edit your answer to include that alternative\
    \ solution.\n<|/ c |>\n<| a |>\n<code>\ndef fib(n):\nif n<0: \n    return -1 \n\
    if n==0: \n    return 0 \nif n==1: \n    return 1 \nreturn fib(n-1) + fib(n-2)\n\
    </code>\n<|/ a dscore=2 tags=recursion,fibonacci,algorithm,performance |>\n<|\
    \ c |>\nCode only answers can generally be improved by adding some explanation\
    \ of how and why they work.  Code only answers tend to get deleted or even downvoted\
    \ very quickly, which is not good for future readers who are looking for a solution\
    \ to a similar problem.\n<|/ c |>\n<| c |>\nThe code in this answer is a recursive\
    \ solution, why do you think it is a \"code only answer\"?\n<|/ c |>\n<| a tags=recursion,fibonacci,algorithm,performance\
    \ |>\n<code>\nint fibon\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n\
    \  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n \
    \ assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpixrbun_4.ts(17,2): error TS1110: Type expected.

    ../../../../../tmp/tmpixrbun_4.ts(17,3): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpixrbun_4.ts(18,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpixrbun_4.ts(18,4): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpixrbun_4.ts(19,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpixrbun_4.ts(19,6): error TS1005: '';'' expected.

    ../../../../../tmp/tmpixrbun_4.ts(19,16): error TS1109: Expression expected.

    ../../../../../tmp/tmpixrbun_4.ts(20,6): error TS1005: '';'' expected.

    ../../../../../tmp/tmpixrbun_4.ts(20,9): error TS1005: '';'' expected.

    ../../../../../tmp/tmpixrbun_4.ts(20,12): error TS1005: '';'' expected.

    ../../../../../tmp/tmpixrbun_4.ts(20,27): error TS1005: '';'' expected.

    ../../../../../tmp/tmpixrbun_4.ts(20,31): error TS1005: ''('' expected.

    ../../../../../tmp/tmpixrbun_4.ts(20,40): error TS1005: '';'' expected.

    ../../../../../tmp/tmpixrbun_4.ts(20,43): error TS1005: '';'' expected.

    ../../../../../tmp/tmpixrbun_4.ts(20,53): error TS1005: '')'' expected.

    ../../../../../tmp/tmpixrbun_4.ts(20,57): error TS1005: '';'' expected.

    ../../../../../tmp/tmpixrbun_4.ts(20,60): error TS1005: '';'' expected.

    ../../../../../tmp/tmpixrbun_4.ts(20,67): error TS1005: '';'' expected.

    ../../../../../tmp/tmpixrbun_4.ts(20,70): error TS1005: '';'' expected.

    ../../../../../tmp/tmpixrbun_4.ts(20,75): error TS1005: '';'' expected.

    ../../../../../tmp/tmpixrbun_4.ts(20,90): error TS1005: '','' expected.

    ../../../../../tmp/tmpixrbun_4.ts(20,94): error TS1005: '','' expected.

    ../../../../../tmp/tmpixrbun_4.ts(20,98): error TS1005: '','' expected.

    ../../../../../tmp/tmpixrbun_4.ts(20,104): error TS1005: '','' expected.

    ../../../../../tmp/tmpixrbun_4.ts(20,117): error TS1005: '','' expected.

    ../../../../../tmp/tmpixrbun_4.ts(20,122): error TS1005: '','' expected.

    ../../../../../tmp/tmpixrbun_4.ts(20,125): error TS1005: '','' expected.

    ../../../../../tmp/tmpixrbun_4.ts(20,127): error TS1005: '','' expected.

    ../../../../../'
  timestamp: 1659977983
- exit_code: 2
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  if (n < 0 ||\
    \ n >= MAX_CANVAS_SIZE) {\n    return -1;\n  }\n  return fibs[n - 2];\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpw7sk2bu3.ts(9,21): error TS2304: Cannot find name
    ''MAX_CANVAS_SIZE''.

    ../../../../../tmp/tmpw7sk2bu3.ts(12,10): error TS2552: Cannot find name ''fibs''.
    Did you mean ''fib''?

    '
  timestamp: 1659977983
- exit_code: 1
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  if (n < 2) {\n\
    \    return 1;\n  }\n  return fib(n + 1) + fib(n);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpso2eues3.js:9\n    if (n < 2) {\n    ^\n\nRangeError: Maximum call\
    \ stack size exceeded\n    at fib (/tmp/tmpso2eues3.js:9:5)\n    at fib (/tmp/tmpso2eues3.js:12:12)\n\
    \    at fib (/tmp/tmpso2eues3.js:12:12)\n    at fib (/tmp/tmpso2eues3.js:12:12)\n\
    \    at fib (/tmp/tmpso2eues3.js:12:12)\n    at fib (/tmp/tmpso2eues3.js:12:12)\n\
    \    at fib (/tmp/tmpso2eues3.js:12:12)\n    at fib (/tmp/tmpso2eues3.js:12:12)\n\
    \    at fib (/tmp/tmpso2eues3.js:12:12)\n    at fib (/tmp/tmpso2eues3.js:12:12)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977983
- exit_code: 0
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  if (n < 2) return\
    \ n;\n  return fib(n - 1) + fib(n - 2);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fib;\n\
    \  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977970
- exit_code: 1
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  if (n < 2) {\n\
    \    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n89\n\nshould loosely\
    \ deep-equal\n\n55\n    at test (/tmp/tmpgvce8txo.js:17:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpgvce8txo.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 89,\n  expected:\
    \ 55,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977970
- exit_code: 0
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  if (n < 2) {\n\
    \    return n;\n  }\n  return fib(n - 1) + fib(n - 2);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977916
- exit_code: 0
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  if (n < 2) {\n\
    \    return n;\n  }\n  return fib(n - 1) + fib(n - 2);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977916
- exit_code: 2
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  // return function\
    \ fib(num) { return fibHelper(num, fibonacci(num)); }\n  return fibonacci(n);\n\
    }\n</code>\n<|/ a |>\n<| c |>\nthanks for the help! I will try out this method\n\
    <|/ c |>\n<| c |>\nWhy do we need a memoization? Isn't this gonna take the same\
    \ time as just calculating the Fibonacci number? I mean it wont be any faster\
    \ but just slower, no?\n<|/ c |>\n<| c |>\nMemoization saves computation time\
    \ on repeated computations i.e. fib(10) is called only once. If you call fib(1000)\
    \ that would be 1000x. So, this saves computation time on repeated calls.\n<|/\
    \ c |>\n<| c |>\nYeah I get that, but in this case, it doesnt take much computation\
    \ time right? It just needs to do the calculation once. But then again, that's\
    \ exactly what memoization is for?\n<|/ c |>\n<| c |>\nMemoization saves the values\
    \ so that subsequent calls can be made to the same values. If you call fib(10)\
    \ thrice with memoization, it will save computation time for the first call and\
    \ then for the subsequent calls. But, it doesn't mean that fib(10) is the same\
    \ as fib(10) and fib(10) is same as fib(10).\n<|/ c |>\n<| a tags=memoization,javascript\
    \ dscore=1 |>\nYou can use an object to store your memoized results, and you only\
    \ need one helper function, which can either access the object directly, or create\
    \ a new one.\n<code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n\
    \  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n \
    \ assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpvbkw05vk.ts(12,2): error TS1110: Type expected.

    ../../../../../tmp/tmpvbkw05vk.ts(12,3): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpvbkw05vk.ts(13,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpvbkw05vk.ts(13,4): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpvbkw05vk.ts(14,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpvbkw05vk.ts(14,7): error TS1109: Expression expected.

    ../../../../../tmp/tmpvbkw05vk.ts(15,8): error TS1005: '';'' expected.

    ../../../../../tmp/tmpvbkw05vk.ts(15,12): error TS1005: ''('' expected.

    ../../../../../tmp/tmpvbkw05vk.ts(15,16): error TS1005: '';'' expected.

    ../../../../../tmp/tmpvbkw05vk.ts(15,22): error TS1005: '';'' expected.

    ../../../../../tmp/tmpvbkw05vk.ts(15,24): error TS1005: '')'' expected.

    ../../../../../tmp/tmpvbkw05vk.ts(15,29): error TS1005: '';'' expected.

    ../../../../../tmp/tmpvbkw05vk.ts(15,33): error TS1005: ''{'' expected.

    ../../../../../tmp/tmpvbkw05vk.ts(15,37): error TS1005: '';'' expected.

    ../../../../../tmp/tmpvbkw05vk.ts(15,42): error TS1005: '';'' expected.

    ../../../../../tmp/tmpvbkw05vk.ts(16,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpvbkw05vk.ts(16,4): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpvbkw05vk.ts(17,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpvbkw05vk.ts(17,7): error TS1109: Expression expected.

    ../../../../../tmp/tmpvbkw05vk.ts(18,5): error TS1005: '';'' expected.

    ../../../../../tmp/tmpvbkw05vk.ts(18,11): error TS1005: '';'' expected.

    ../../../../../tmp/tmpvbkw05vk.ts(18,16): error TS1005: '')'' expected.

    ../../../../../tmp/tmpvbkw05vk.ts(18,18): error TS1005: '';'' expected.

    ../../../../../tmp/tmpvbkw05vk.ts(18,34): error TS1005: '':'' expected.

    ../../../../../tmp/tmpvbkw05vk.ts(18,158): error TS1002: Unterminated string literal.

    ../../../../../tmp/tmpvbkw05vk.ts(19,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpvbkw05vk.ts(19,4): error TS1161: Unterminated regular expression
    literal'
  timestamp: 1659977983
- exit_code: 1
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  if (n < 0) throw\
    \ new Error(\"negative numbers not allowed!\");\n  return ((n < 2)\n    ? 1\n\
    \    : fib(n - 2)) + fib(n - 1);\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fib;\n \
    \ assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n \
    \ assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp5n_i7hi5.js:10\n        throw new Error(\"negative numbers not\
    \ allowed!\");\n        ^\n\nError: negative numbers not allowed!\n    at fib\
    \ (/tmp/tmp5n_i7hi5.js:10:15)\n    at fib (/tmp/tmp5n_i7hi5.js:13:25)\n    at\
    \ fib (/tmp/tmp5n_i7hi5.js:13:11)\n    at fib (/tmp/tmp5n_i7hi5.js:13:11)\n  \
    \  at fib (/tmp/tmp5n_i7hi5.js:13:11)\n    at fib (/tmp/tmp5n_i7hi5.js:13:11)\n\
    \    at fib (/tmp/tmp5n_i7hi5.js:13:11)\n    at test (/tmp/tmp5n_i7hi5.js:18:22)\n\
    \    at Object.<anonymous> (/tmp/tmp5n_i7hi5.js:24:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977983
- exit_code: 1
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  if (n < 2) {\n\
    \    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n89\n\nshould loosely\
    \ deep-equal\n\n55\n    at test (/tmp/tmpgvce8txo.js:17:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpgvce8txo.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 89,\n  expected:\
    \ 55,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977970
- exit_code: 2
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  // See https://github.com/jshint/jshint/issues/734\n\
    \  if (!n || (n <= 0)) {\n    return 0;\n  }\n  // Example of Fibonacci sequence:\
    \ https://en.wikipedia.org/wiki/Fibonacci_number#Example_of_Fibonacci_number\n\
    \  if (n === 1) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n}\n\n\
    const fib2 = n=>fib(n-2) + fib(n-1);\n\nconst fib3 = n=>fib(n-1)*fib(n-2) + fib(n-3)\n\
    \nconst fib4 = (n) => fib(n-2) * (fib(n-3)) + fib(n-4);\n</cell>\n<cell>\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpzbc0t_dj.ts(25,2): error TS1110: Type expected.

    ../../../../../tmp/tmpzbc0t_dj.ts(25,3): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpzbc0t_dj.ts(27,9): error TS1005: '';'' expected.

    '
  timestamp: 1659977983
- exit_code: 0
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  if (n < 2) {\n\
    \    return n;\n  }\n\n  return fib(n - 1) + fib(n - 2);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977973
- exit_code: 2
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  if (n < 2) return\
    \ n;\n  return fib(n - 1) + fib(n - 2);\n}\n\nconst fib_seq: number[] = fib(1_000_000);\n\
    \nconst fib_seq2: number[] = fib(1_000_000);\n\nconst fib_seq3: number[] = fib(1_000_000);\n\
    \nconst fib_seq4: number[] = fib(1_000_000);\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fib;\n\
    \  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpt53oq1fr.ts(13,7): error TS2322: Type ''number''
    is not assignable to type ''number[]''.

    ../../../../../tmp/tmpt53oq1fr.ts(15,7): error TS2322: Type ''number'' is not
    assignable to type ''number[]''.

    ../../../../../tmp/tmpt53oq1fr.ts(17,7): error TS2322: Type ''number'' is not
    assignable to type ''number[]''.

    ../../../../../tmp/tmpt53oq1fr.ts(19,7): error TS2322: Type ''number'' is not
    assignable to type ''number[]''.

    '
  timestamp: 1659977983
- exit_code: 0
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  return n < 2\
    \ ? n : fib(n - 1) + fib(n - 2)\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fib;\n \
    \ assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n \
    \ assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977983
- exit_code: -1
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  let isFibbing\
    \ = false;\n  let previousFibNumber = -1;\n  let currentFibNumber = -1;\n  if\
    \ (n < 2) {\n    return previousFibNumber;\n  }\n  currentFibNumber = 1;\n  previousFibNumber\
    \ = 1;\n  while (n > 0) {\n    currentFibNumber = previousFibNumber + currentFibNumber;\n\
    \    isFibbing = previousFibNumber + currentFibNumber === n;\n    if (isFibbing)\
    \ {\n      break;\n    }\n    previousFibNumber = currentFibNumber;\n  }\n  return\
    \ currentFibNumber;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n\
    \  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n \
    \ assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n\
    }\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659977998
- exit_code: 1
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  if (n < 2) return\
    \ 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = fib;\n\
    \  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n89\n\nshould loosely\
    \ deep-equal\n\n55\n    at test (/tmp/tmpp9ls9xjy.js:16:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpp9ls9xjy.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 89,\n  expected:\
    \ 55,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977970
- exit_code: 2
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  if (n < 0 ||\
    \ n >= FIB_LIMIT) {\n    throw new Error(\"fib() called with \" + n + \" argument;\
    \ must be between 0 and \" + FIB_LIMIT);\n  }\n  if (n === 1 || n === 2) {\n \
    \   return 1;\n  }\n  return fib(n - 2) + fib(n - 1);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpkf68gcej.ts(9,21): error TS2304: Cannot find name
    ''FIB_LIMIT''.

    ../../../../../tmp/tmpkf68gcej.ts(10,86): error TS2304: Cannot find name ''FIB_LIMIT''.

    '
  timestamp: 1659977983
- exit_code: 2
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  if (n < 0) throw\
    \ new Error('negative number')\n  if (n === 0 || n === 1) return 1\n  return fib(n\
    \ - 1) + fib(n - 2)\n}\n\nexport default function fib(num: number): number {\n\
    \  return typeof num === 'number' ? num : fib(String(num))\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpx7u6rdcs.ts(8,10): error TS2393: Duplicate function
    implementation.

    ../../../../../tmp/tmpx7u6rdcs.ts(14,25): error TS2393: Duplicate function implementation.

    ../../../../../tmp/tmpx7u6rdcs.ts(15,46): error TS2345: Argument of type ''string''
    is not assignable to parameter of type ''number''.

    '
  timestamp: 1659977983
- exit_code: 2
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  if (n < 2) return\
    \ 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\nconst _cache = new Map<string, string[]>();\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpyv183usu.ts(13,20): error TS2583: Cannot find name
    ''Map''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1659977983
- exit_code: 2
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n    if (n < 2)\
    \ return 1;\n    return fib(n - 1) + fib(n - 2);\n}\n</code>\n<|/ a dscore=4 |>\n\
    <| c |>\nYes. I was just looking for a solution like this one. My first thought\
    \ was to create a `BigInt` class which would have a `number` member which would\
    \ be `const BigInt(n): BigInt => { return BigInt(n); }`. I know it's redundant,\
    \ but I just wanted to try it out.\n<|/ c |>\n<| a dscore=4 |>\nHere's a one-liner:\n\
    <code>\nlet fib = ((n: number) => n < 2 ? 1 : fib(n-1) + fib(n-2))(10);\n</code>\n\
    <|/ a tags=fibonacci,javascript,recursion |>\n<| a tags=fibonacci,javascript,recursion\
    \ |>\nThe most obvious way is to pass the numbers from last two calls as arguments.\n\
    <code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n\
    \  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n \
    \ assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp_n2cm_zl.ts(12,2): error TS1110: Type expected.

    ../../../../../tmp/tmp_n2cm_zl.ts(12,3): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmp_n2cm_zl.ts(13,2): error TS1109: Expression expected.

    ../../../../../tmp/tmp_n2cm_zl.ts(13,4): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmp_n2cm_zl.ts(14,2): error TS1109: Expression expected.

    ../../../../../tmp/tmp_n2cm_zl.ts(14,7): error TS1109: Expression expected.

    ../../../../../tmp/tmp_n2cm_zl.ts(15,8): error TS1005: '';'' expected.

    ../../../../../tmp/tmp_n2cm_zl.ts(15,12): error TS1005: '';'' expected.

    ../../../../../tmp/tmp_n2cm_zl.ts(15,17): error TS1005: '';'' expected.

    ../../../../../tmp/tmp_n2cm_zl.ts(15,25): error TS1005: '';'' expected.

    ../../../../../tmp/tmp_n2cm_zl.ts(15,29): error TS1005: ''('' expected.

    ../../../../../tmp/tmp_n2cm_zl.ts(15,31): error TS1005: '';'' expected.

    ../../../../../tmp/tmp_n2cm_zl.ts(15,40): error TS1005: '';'' expected.

    ../../../../../tmp/tmp_n2cm_zl.ts(15,45): error TS1005: '')'' expected.

    ../../../../../tmp/tmp_n2cm_zl.ts(15,50): error TS1005: '';'' expected.

    ../../../../../tmp/tmp_n2cm_zl.ts(15,58): error TS1005: '';'' expected.

    ../../../../../tmp/tmp_n2cm_zl.ts(15,64): error TS1005: '';'' expected.

    ../../../../../tmp/tmp_n2cm_zl.ts(15,72): error TS1005: '';'' expected.

    ../../../../../tmp/tmp_n2cm_zl.ts(15,76): error TS1005: '';'' expected.

    ../../../../../tmp/tmp_n2cm_zl.ts(15,79): error TS1005: '';'' expected.

    ../../../../../tmp/tmp_n2cm_zl.ts(15,86): error TS1005: '';'' expected.

    ../../../../../tmp/tmp_n2cm_zl.ts(15,97): error TS1005: '';'' expected.

    ../../../../../tmp/tmp_n2cm_zl.ts(15,109): error TS1005: ''{'' expected.

    ../../../../../tmp/tmp_n2cm_zl.ts(15,115): error TS1005: '';'' expected.

    ../../../../../tmp/tmp_n2cm_zl.ts(15,120): error TS1005: '';'' expected.

    ../../../../../tmp/tmp_n2cm_zl.ts(15,131): error TS1005: '';'' expected.

    ../../../../../tmp/tmp_n2cm_zl.ts(15,138): error TS1005: '';'' expected.

    ../../../../../tmp/tmp_n2cm_zl.ts(15,144): error TS1005: '';'' expected.

    ../../../../.'
  timestamp: 1659977983
- exit_code: 2
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  if (n < 2) {\n\
    \    return 1;\n  }\n\n  return fib(n - 1) + fib(n - 2);\n}\n\nmodule.exports\
    \ = fib;\n\n},{}],113:[function(require,module,exports){\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpzqctpy8n.ts(18,1): error TS1128: Declaration or statement
    expected.

    ../../../../../tmp/tmpzqctpy8n.ts(18,2): error TS1128: Declaration or statement
    expected.

    ../../../../../tmp/tmpzqctpy8n.ts(18,5): error TS1128: Declaration or statement
    expected.

    ../../../../../tmp/tmpzqctpy8n.ts(18,6): error TS1128: Declaration or statement
    expected.

    ../../../../../tmp/tmpzqctpy8n.ts(18,10): error TS1005: '';'' expected.

    ../../../../../tmp/tmpzqctpy8n.ts(32,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659977984
- exit_code: 1
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  if (n < 0 ||\
    \ n == 1 || n == 2) {\n    return 0;\n  }\n  return fib(n - 1) + fib(n - 2);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n55\n    at test (/tmp/tmpv5i0wyq1.js:17:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpv5i0wyq1.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 55,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977984
- exit_code: 2
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  if (n <= 0) return\
    \ 0;\n  if (n === 1 || n === 2) return 1;\n  return fib(n - 1) + fib(n - 2);\n\
    }\nfib.toString = () => 'undefined';\n\nexport const fibonacci: Fib = {\n  toString:\
    \ () => 'undefined',\n  valueOf: () => 0,\n  max: n => Math.max(Math.sqrt(n),\
    \ 0),\n  min: n => Math.min(n, 0),\n  sum: n => fibonacci(n - 1) + fibonacci(n\
    \ - 2),\n  avg: n => fibonacci(n - 1) / 2,\n  median: fib\n};\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpwz6ee6r3.ts(15,25): error TS2304: Cannot find name
    ''Fib''.

    '
  timestamp: 1659977984
