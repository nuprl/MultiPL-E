language: ts
name: HumanEval_31_is_prime
results:
- exit_code: 2
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) return false;\n  if (n < 4) return true;\n  if (!(n\
    \ & 1) && n != 2) return false;\n  // if n is a power of two...\n  // if n is\
    \ evenly divisible by 2, then it's prime (2 isn't prime since it only factors\
    \ odd numbers)\n  // if n is evenly divisible by 3, then it's prime (3 isn't prime\
    \ since it only factors even numbers)\n  // if n is evenly divisible by 5, then\
    \ it's prime (5 isn't prime since it only factors odd numbers)\n  // if n is evenly\
    \ divisible by 15, then it's prime (15 isn't prime since it only factors even\
    \ numbers)\n  // if n is evenly divisible by 31, then it's prime (31 isn't prime\
    \ since it only factors odd numbers)\n  // if n is evenly divisible by 51, then\
    \ it's prime (51 isn't prime since it only factors even numbers)\n  // if n is\
    \ evenly divisible by 101, then it's prime (101 isn't prime since it only factors\
    \ odd numbers)\n  // if n is evenly divisible by 201, then it's prime (201 isn't\
    \ prime since it only factors even numbers)\n  // if n is evenly divisible by\
    \ 501, then it's prime (501 isn't prime since it only factors odd numbers)\n \
    \ // if n is evenly divisible by 1001, then it's prime (1001 isn't prime since\
    \ it only factors even numbers)\n  // if n is evenly divisible by 2001, then it's\
    \ prime (2001 isn't prime since it only factors odd numbers)\n  // if n is evenly\
    \ divisible by 5001, then it's prime (5001 isn't prime since it only factors even\
    \ numbers)\n  // if n is evenly divisible by 10001 (= 10^3), then it's prime (10001\
    \ isn't prime since it only factors odd numbers)\n  // if n is evenly divisible\
    \ by 20001 (= 10^6), then it's prime (20001 isn't prime since it only factors\
    \ even numbers)\n  // if n is evenly divisible by 50001 (= 10^9), then it's prime\
    \ (50001 isn't prime since it only factors odd numbers)\n  // if n is evenly divisible\
    \ by 100001 (= 10^12), then it's prime (100001 isn't prime since it only factors\
    \ even numbers)\n  // if n is evenly divisible by 200001 (= 10^15), then it's\
    \ prime (\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp3sokdtak.ts(59,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659977845
- exit_code: 2
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n  const m = BigInt(Math.sqrt(n));\n  if (n < 2) {\n    return false;\n\
    \  }\n  for (let i = 2; i <= m; i++) {\n    if (n % i === 0) {\n      return false;\n\
    \    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp8xzcxshz.ts(17,13): error TS2304: Cannot find name
    ''BigInt''.

    '
  timestamp: 1659977845
- exit_code: 2
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n  for (let factor = 2; factor < n; factor++) {\n    if (n % factor\
    \ === 0) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n<|/ file ext=.ts\
    \ source=gitlab |>\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpyi1p96w3.ts(26,3): error TS1110: Type expected.

    ../../../../../tmp/tmpyi1p96w3.ts(26,4): error TS1161: Unterminated regular expression
    literal.

    '
  timestamp: 1659977845
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n  // Only take odd numbers.\n  if (n % 2 == 0) return false;\n\n\
    \  // If we passed the number 2, then it must be prime.\n  if (n == 2) return\
    \ true;\n\n  // Check all the even numbers for divisibility.\n  for (var i = 3;\
    \ i <= Math.sqrt(n); i += 2) {\n    if (n % i == 0) {\n      return false;\n \
    \   }\n  }\n\n  // If we got here, all numbers were prime, so return true.\n \
    \ return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpsp4ivoy4.js:41:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpsp4ivoy4.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977845
- exit_code: 2
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n\tvar d = bigInt(Math.sqrt(n));\n\tfor (var i = 2; i <= bigInt(Math.sqrt(n));\
    \ i++) {\n\t\tif (n % i == 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpftyncr21.ts(17,10): error TS2304: Cannot find name
    ''bigInt''.

    ../../../../../tmp/tmpftyncr21.ts(18,23): error TS2304: Cannot find name ''bigInt''.

    '
  timestamp: 1659977845
- exit_code: 2
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n\tvar prime: boolean = (0 !== n);\n\tfor(var i = 0; i < primes.length;\
    \ ++i)\n\t\tif(primes[i] === n)\n\t\t\tbreak;\n\treturn prime;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp9gj6uiqi.ts(18,21): error TS2552: Cannot find name
    ''primes''. Did you mean ''prime''?

    ../../../../../tmp/tmp9gj6uiqi.ts(19,6): error TS2552: Cannot find name ''primes''.
    Did you mean ''prime''?

    '
  timestamp: 1659977845
- exit_code: 2
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n    if (n < 2) return false;\n    // Sieve of Eratosthenes to test\
    \ if n is prime\n    const a = Math.trunc(Math.sqrt(n)); // Finds the next integer\
    \ with non-zero remainder\n    for (let i = 2; i <= a; ++i) {\n        if (n %\
    \ i === 0) return false;\n    }\n    return true;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp645siux5.ts(19,20): error TS2339: Property ''trunc''
    does not exist on type ''Math''.

    '
  timestamp: 1659977845
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n  if (n === 0 || n === 1) return false;\n  if (n === 2) return true;\n\
    \  if (n % 2 == 0 || n % 3 == 0) return false;\n  if (n % 5 == 0) return true;\n\
    \  if (n % 7 == 0) return false;\n\n  // Divisor found with successive odd numbers.\n\
    \  const divisors: number[] = [];\n  for (let i = 3; i * i <= n; i += 2) {\n \
    \   if (n % i == 0 || n % (i + 2) == 0) return false;\n    divisors.push(i);\n\
    \  }\n\n  return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp_wg2hzkk.js:49:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp_wg2hzkk.js:53:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977845
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n    if (n < 1) {\n        throw new Error(`is_prime: Parameter ${n}\
    \ must be >= 1.`);\n    }\n    for (let i = 2; i < n; ++i) {\n        if (n %\
    \ i === 0) {\n            return false;\n        }\n    }\n    return true;\n\
    }\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpfdni5n_d.js:36:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpfdni5n_d.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977845
- exit_code: 2
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) return false;\n  if (n < 3) return true;\n\n  // http://stackoverflow.com/questions/3939823/quicker-way-to-find-prime-numbers-in-javascript\n\
    \  // http://stackoverflow.com/questions/10197931/primality-test-with-javascript\n\
    \  if (!isPrimeHelper(n)) return false;\n\n  var s = Math.floor(Math.sqrt(n));\n\
    \  var f = true;\n  for (var i = 3; i <= s; i += 2) {\n    if (n % i === 0) return\
    \ false;\n  }\n  return f;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpr4ixlqey.ts(22,8): error TS2304: Cannot find name
    ''isPrimeHelper''.

    '
  timestamp: 1659977845
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n    if (n < 3) {\n        return false;\n    }\n    for (let i =\
    \ 2; i < Math.sqrt(n); i++) {\n        if (n % i === 0) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpo56i_mlm.js:35:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpo56i_mlm.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977845
- exit_code: 2
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n  const max_prime = Math.sqrt(n);\n  if(n == 1) return false;\n \
    \ for(const factor of factorize(n)) {\n    if(factor > max_prime) return false;\n\
    \  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpctjh9p44.ts(19,23): error TS2304: Cannot find name
    ''factorize''.

    '
  timestamp: 1659977845
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n\tif(n == 1) return false;\n\tlet div: number = Math.ceil(n/2);\n\
    \tlet isprime: boolean;\n\tfor(let i=2; i<=div; i++) {\n\t\tisprime = (n % i ==\
    \ 0);\n\t\tif(isprime == false) return false;\n\t}\n\treturn true;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp8dmkfdxk.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp8dmkfdxk.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977845
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false\n  }\n\n  // Skip even numbers that\
    \ are not primes.\n  if (!(n & 1)) {\n    return false\n  }\n\n  // Skip even\
    \ numbers that are not composites.\n  var x = n - 1\n  while (x > 2) {\n    if\
    \ (!(x & 1)) {\n      return false\n    }\n\n    x >>= 1\n  }\n\n  return true\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpqwaydt1m.js:38:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpqwaydt1m.js:51:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977845
- exit_code: 2
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n\tlet primes = Primes();\n\tfor (let i = 2; i < n; i++) {\n\t\tif\
    \ (primes.has(i)) return true;\n\t}\n\treturn false;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp55rq78r2.ts(17,15): error TS2552: Cannot find name
    ''Primes''. Did you mean ''primes''?

    '
  timestamp: 1659977845
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n    if (n === 2) {\n        return true\n    }\n    if (n === 1 ||\
    \ n % 2 === 0) {\n        return false\n    }\n    if (n % n % 2 === 0) {\n  \
    \      return true\n    }\n    for (let i = 3; i * i <= n; i += 2) {\n       \
    \ if (n % i === 0) {\n            return false\n        }\n    }\n    return true\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp3t4m83q3.js:46:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp3t4m83q3.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977845
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 1) {\n    return false;\n  }\n\n  // Make sure n is a prime\
    \ by checking that all its factors are also primes.\n  for (let i = 2; i < n;\
    \ i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n\n  return\
    \ true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmptxhuvkyj.js:37:12)\n    at\
    \ Object.<anonymous> (/tmp/tmptxhuvkyj.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977845
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n  if (n % 2 == 0 || n % 3 == 0 || n % 5 == 0 || n % 7 == 0)\n   \
    \ return false\n  else return is_prime(n - 2) || is_prime(n - 1) && n % 2 == 0\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp2oia72k2.js:26:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp2oia72k2.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977845
- exit_code: 2
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n    let prime: boolean = !isNaN(Number(n)) && isFinite(n) && n >\
    \ 1 && is_even(n - 1) && n % 2 === 0;\n    return prime;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpmydbur1k.ts(17,71): error TS2304: Cannot find name
    ''is_even''.

    '
  timestamp: 1659977845
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n    if (n < 2) {\n        return false;\n    }\n    let x: number;\n\
    \    for (let y = 2; y * y < n; y++) {\n        x = n / y;\n        if (x % y\
    \ === 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpgpze7xkp.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpgpze7xkp.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977845
- exit_code: 2
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n  let result = true;\n  if (n < 2) {\n    result = false;\n  }\n\
    \  else if (n <= 3) {\n    result = false;\n  }\n  else if (n % 2 == 0) {\n  \
    \  result = false;\n  }\n  else if (n % 3 == 0) {\n    result = false;\n  }\n\
    \  else {\n    for (let i = 5; (i * i) <= n; i++) {\n      if (n % i == 0) {\n\
    \        result = false;\n      }\n    }\n  }\n  return result;\n}\n</code>\n\
    <|/ a tags=c#,primes,.net |>\n<| c |>\n`Math.Sqrt(n)` is not a good way to determine\
    \ if `n` is prime. `Math.Sqrt(n)` is very slow and should not be used for this.\n\
    <|/ c |>\n<| c |>\nYeah, I know. `Math.Sqrt(n)` is just a quick and dirty way\
    \ to test if `n` is prime. It should be `Math.Sqrt(n) < n`. But I never used this\
    \ method in production code before. I just used it for this example.\n<|/ c |>\n\
    <| c |>\n`Math.Sqrt(n)` is slow and should not be used for this.\n<|/ c |>\n<|\
    \ a |>\nHere is a quick program to check a number if it is a prime or not. You\
    \ can modify it to suit your need.\n<code>\nusing System;\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpsqv3spk_.ts(39,2): error TS1110: Type expected.

    ../../../../../tmp/tmpsqv3spk_.ts(39,3): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpsqv3spk_.ts(40,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpsqv3spk_.ts(40,4): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpsqv3spk_.ts(41,7): error TS1110: Type expected.

    ../../../../../tmp/tmpsqv3spk_.ts(42,16): error TS1005: '';'' expected.

    ../../../../../tmp/tmpsqv3spk_.ts(42,19): error TS1005: '';'' expected.

    ../../../../../tmp/tmpsqv3spk_.ts(42,23): error TS1005: '';'' expected.

    ../../../../../tmp/tmpsqv3spk_.ts(42,25): error TS1005: '';'' expected.

    ../../../../../tmp/tmpsqv3spk_.ts(42,30): error TS1005: '';'' expected.

    ../../../../../tmp/tmpsqv3spk_.ts(42,34): error TS1005: '';'' expected.

    ../../../../../tmp/tmpsqv3spk_.ts(42,37): error TS1005: '';'' expected.

    ../../../../../tmp/tmpsqv3spk_.ts(42,47): error TS1005: '';'' expected.

    ../../../../../tmp/tmpsqv3spk_.ts(42,50): error TS1005: ''('' expected.

    ../../../../../tmp/tmpsqv3spk_.ts(42,54): error TS1005: '')'' expected.

    ../../../../../tmp/tmpsqv3spk_.ts(42,57): error TS1005: '';'' expected.

    ../../../../../tmp/tmpsqv3spk_.ts(42,64): error TS1003: Identifier expected.

    ../../../../../tmp/tmpsqv3spk_.ts(42,79): error TS1005: '';'' expected.

    ../../../../../tmp/tmpsqv3spk_.ts(42,82): error TS1005: '';'' expected.

    ../../../../../tmp/tmpsqv3spk_.ts(42,87): error TS1005: '';'' expected.

    ../../../../../tmp/tmpsqv3spk_.ts(42,92): error TS1005: '';'' expected.

    ../../../../../tmp/tmpsqv3spk_.ts(42,96): error TS1005: '';'' expected.

    ../../../../../tmp/tmpsqv3spk_.ts(42,103): error TS1005: '';'' expected.

    ../../../../../tmp/tmpsqv3spk_.ts(42,107): error TS1005: '';'' expected.

    ../../../../../tmp/tmpsqv3spk_.ts(42,110): error TS1005: '';'' expected.

    ../../../../../tmp/tmpsqv3spk_.ts(42,115): error TS1005: '';'' expected.

    ../../../../../tmp/tmpsqv3spk_.ts(42,119): error TS1005: ''('' expected.

    ../../../../../tmp/tmpsqv3spk_.ts(43,1): error TS1003: Identifier expected.

    ../../../../'
  timestamp: 1659977845
- exit_code: 2
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n  if (!is_number(n)) {\n    throw new TypeError('is_prime: Expected\
    \ a number');\n  }\n  if (n === 0 || !isInteger(n)) {\n    return false;\n  }\n\
    \  if (n < 2 || n > 100) {\n    return false;\n  }\n  var i = n | 0;\n  while\
    \ (i == 0 || is_even(i)) {\n    if (!is_prime(i)) {\n      return false;\n   \
    \ }\n    i += 2;\n  }\n  return true;\n}\ndeclare function is_probably_prime(n:\
    \ number): boolean;\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmph4g355s5.ts(17,8): error TS2304: Cannot find name
    ''is_number''.

    ../../../../../tmp/tmph4g355s5.ts(20,19): error TS2304: Cannot find name ''isInteger''.

    ../../../../../tmp/tmph4g355s5.ts(27,20): error TS2304: Cannot find name ''is_even''.

    '
  timestamp: 1659977845
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n    let x: boolean = (n > 1);\n    for (let i = 2; i <= Math.sqrt(n);\
    \ i++) {\n        if (n % i == 0)\n            return false;\n    }\n    return\
    \ x;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977845
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n  let sqrt: number = Math.sqrt(n);\n  for (let i = 2; i <= sqrt;\
    \ ++i) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpv6l9eh9f.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpv6l9eh9f.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977847
- exit_code: 2
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n  const SCRATCH_THRESHOLD = 3; // Number of tries before giving up\n\
    \n  // Make sure n is an integer\n  n = Math.floor(n / 1);\n\n  // Make sure n\
    \ is odd\n  if (!is_odd(n)) {\n    return false;\n  }\n\n  // Make sure n <= 100\n\
    \  if (n >= 100) {\n    return false;\n  }\n\n  // If the number is less than\
    \ or equal to 2\n  if (n === 2) {\n    return true;\n  }\n\n  // If n is a multiple\
    \ of 3, return true\n  if (n % 3 === 0) {\n    return true;\n  }\n\n  // If n\
    \ is a multiple of 11, return true\n  if (n % 11 === 0) {\n    return true;\n\
    \  }\n\n  // If n is a multiple of 13, return true\n  if (n % 13 === 0) {\n  \
    \  return true;\n  }\n\n  // If n is divisible by 5, return true\n  if (n % 5\
    \ === 0) {\n    return true;\n  }\n\n  // If n is divisible by 3, return true\n\
    \  if (n % 3 === 0) {\n    return true;\n  }\n\n  // If n is divisible by 7, return\
    \ true\n  if (n % 7 === 0) {\n    return true;\n  }\n\n  // If n is divisible\
    \ by 11, return true\n  if (n % 11 === 0) {\n    return true;\n  }\n\n  // If\
    \ n is divisible by 13, return true\n  if (n % 13 === 0) {\n    return true;\n\
    \  }\n\n  // If n is divisible by 17, return true\n  if (n % 17 === 0) {\n   \
    \ return true;\n  }\n\n  // If n is divisible by 19, return true\n  if (n % 19\
    \ === 0) {\n    return true;\n  }\n\n  // If n is divisible by 23, return true\n\
    \  if (n % 23 === 0) {\n    return true;\n  }\n\n  // If n is divisible by 31,\
    \ return true\n  if (n % 31 === 0) {\n    return true;\n  }\n\n  // If n is divisible\
    \ by 33, return true\n  if (n % 33 === 0) {\n    return true;\n  }\n\n  // If\
    \ n is divisible by 43, return true\n  if (n % 43 === 0) {\n    return true;\n\
    \  }\n\n  // If n is divisible by 47, return true\n  if (n % 47 === 0) {\n   \
    \ return true;\n  }\n\n  // If n is divisible by 53, return true\n  if (n % 53\
    \ === 0) {\n    return true;\n  }\n\n  // If n is divisible by 57, return true\n\
    \  if (n % 57 === 0) {\n    return true;\n  }\n\n  // If n is divisible by 61,\
    \ return true\n  if (n % 61 === 0) {\n    return true;\n  }\n\n  // If n is divisible\
    \ by 67, then return true\n  if (n % 67 === 0) {\n    return true;\n  }\n\n  //\
    \ If n is divisible by 71, return true\n  if (n % 71 === 0) {\n    return true;\n\
    \  }\n\n  // If n is divisible by 73, return true\n  if (n % 73 === 0) {\n   \
    \ return true;\n  }\n\n  // If n is divisible by 79, return true\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpydhyzxxw.ts(164,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659977847
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n  // Test up to square root of n to see whether n is prime.\n  var\
    \ i = 42;\n  while (i * i <= n) {\n    if (n % i == 0) return false;\n    i +=\
    \ 42;\n  }\n  return n > 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpp17woamh.js:29:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpp17woamh.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977847
- exit_code: 2
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n    if (n <= 1) {\n        return false\n    }\n    if (n === 2)\
    \ {\n        return true\n    }\n    let d = n - 1\n    while (n % d === 0) {\n\
    \        n /= d\n    }\n    if (n === 1) {\n        return false\n    }\n    if\
    \ (n % 2 === 0) {\n        return false\n    }\n    let d = (3 * n) + 1\n    while\
    \ (n % d === 0) {\n        n /= d\n    }\n    return n % 2 === 0\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmppakl2ft7.ts(23,9): error TS2451: Cannot redeclare
    block-scoped variable ''d''.

    ../../../../../tmp/tmppakl2ft7.ts(33,9): error TS2451: Cannot redeclare block-scoped
    variable ''d''.

    '
  timestamp: 1659977848
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n    // return n === 2\n    // return n % 2 === 0 && n !== 2 && n\
    \ !== 4;\n    return (n === 2 && n % 2 === 0) || n % 2 === 0;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpd_try7v_.js:24:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpd_try7v_.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977848
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n\tlet sqrtn = Math.floor(Math.sqrt(n))\n\tfor (let i = 2; i <= sqrtn;\
    \ i++) {\n\t\tif (n % i == 0) return false\n\t}\n\treturn true\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpeb25evdf.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpeb25evdf.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977848
- exit_code: 2
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n  let sqrtn = Math.sqrt(n);\n  let primes = [2];\n  for (let i =\
    \ 3; i <= sqrtn; i += 2) {\n    if (n % i === 0) {\n      primes.push(i);\n  \
    \  }\n  }\n  return primes.includes(n);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpqwtnbsjg.ts(24,17): error TS2339: Property ''includes''
    does not exist on type ''number[]''.

    '
  timestamp: 1659977847
- exit_code: 2
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n    const SMALL = 137;\n    const BIG = 5421;\n\n    if (n <= 1 ||\
    \ n % 1 !== 0 || Math.floor(Math.log(n) / Math.LN2) !== Math.floor(Math.log2(n)\
    \ / Math.LN2)) {\n        throw new RangeError(`n is not a positive integer`);\n\
    \    }\n    if (n < SMALL || n < BIG) {\n        // return false;\n    }\n\n \
    \   const sqrt = Math.floor(Math.sqrt(n));\n\n    for (let i = 1; i < sqrt; i++)\
    \ {\n        if (n % i === 0) {\n            return false;\n        }\n    }\n\
    \n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp_f4obhl3.ts(20,89): error TS2551: Property ''log2''
    does not exist on type ''Math''. Did you mean ''LOG2E''?

    '
  timestamp: 1659977847
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n    // Special cases.\n    if (n <= 1) {\n        return false;\n\
    \    }\n    if (n === 2) {\n        return true;\n    }\n    // Trial division\
    \ test for primality. Performs O(n) operations.\n    for (let i = 2; i < Math.sqrt(n);\
    \ i++) {\n        if (n % i === 0) {\n            return false;\n        }\n \
    \   }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpqggutanx.js:40:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpqggutanx.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977848
- exit_code: 2
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n    return n % 2 === 0 && is_factor(n, 3);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpbipaki7r.ts(17,27): error TS2304: Cannot find name
    ''is_factor''.

    '
  timestamp: 1659977848
- exit_code: 2
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n\tif (n % 2 === 0 || n % 3 === 0 || n % 5 === 0 || n % 7 === 0 ||\
    \ n % 11 === 0 || n % 13 === 0 || n % 17 === 0 || n % 19 === 0 || n % 23 === 0\
    \ || n % 29 === 0 || n % 37 === 0 || n % 53 === 0 || n % 59 === 0 || n % 67 ===\
    \ 0 || n % 71 === 0 || n % 79 === 0 || n % 89 === 0 || n % 97 === 0 || n % 101\
    \ === 0 || n % 103 === 0 || n % 105 === 0 || n % 107 === 0 || n % 109 === 0 ||\
    \ n % 111 === 0 || n % 113 === 0 || n % 115 === 0 || n % 117 === 0 || n % 121\
    \ === 0 || n % 127 || n % 131 === 0 || n % 135 === 0 || n % 137 === 0 || n % 139\
    \ === 0 || n % 143 === 0 || n % 147 || n % 151 === 0 || n % 155 === 0 || n % 157\
    \ || n % 163 === 0 || n % 167 || n % 173 || n % 179 === 0 || n % 183 || n % 191\
    \ === 0 || n % 193 || n % 195 || n % 199 === 0)\n\t\treturn false;\n\tlet primes:\
    \ Array<number> = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53,\
    \ 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137,\
    \ 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199];\n\tif (n %\
    \ 103 === 0 || n % 105 === 0 || n % 107 === 0 || n % 109 === 0)\n\t\treturn false;\n\
    \tlet m = Math.sqrt(n);\n\tif (primes[2] <= m)\n\t\treturn false;\n\tif (primes[4]\
    \ <= m)\n\t\treturn false;\n\tif (primes[6] <= m)\n\t\treturn false;\n\tif (primes[8]\
    \ <= m)\n\t\treturn false;\n\tif (primes[10] <= m)\n\t\treturn false;\n\tif (primes[12]\
    \ <= m)\n\t\treturn false;\n\tif (primes[14] <= m)\n\t\treturn false;\n\tif (primes[16]\
    \ <= m)\n\t\treturn false;\n\tif (primes[18] <= m)\n\t\treturn false;\n\tif (primes[20]\
    \ <= m)\n\t\treturn false;\n\tif (primes[22] <= m)\n\t\treturn false;\n\tif (primes[24]\
    \ <= m)\n\t\treturn false;\n\tif (primes[26] <= m)\n\t\treturn false;\n\tif (primes[28]\
    \ <= m)\n\t\treturn false;\n\tif (primes[30] <= m)\n\t\treturn false;\n\tif (primes[32]\
    \ <= m)\n\t\treturn false;\n\tif (primes[34] <= m)\n\t\treturn false;\n\tif (primes[36]\
    \ <= \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp6xgv8b_n.ts(58,9): error TS1005: '')'' expected.

    ../../../../../tmp/tmp6xgv8b_n.ts(79,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659977848
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return\
    \ true;\n  }\n\n  // If n is less than 2, then there will always be only one prime\
    \ number.\n  // It is the only even number that is not prime\n  // Therefore,\
    \ return false if n is even and true otherwise\n  if (n === 2) {\n    return false;\n\
    \  }\n\n  // Test all the numbers from 2 to the limit using a for loop\n  for\
    \ (let i = 2; i <= n; i++) {\n    // If i is even, then the number is not prime\n\
    \    if (i % 2 === 0) {\n      return false;\n    }\n    // If the number is divisible\
    \ by some number i, then it is not prime\n    // The only even number that is\
    \ divisible by all other even numbers is 2\n    if (i % 2 === 0) {\n      return\
    \ false;\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp_btj4_hx.js:47:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp_btj4_hx.js:60:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977848
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n\tif (n < 2) return false;\n\n\t// Trial division algorithm from\
    \ https://en.wikipedia.org/wiki/Trial_division\n\tlet div2 = Math.floor(Math.sqrt(n));\n\
    \tlet result = 1;\n\tfor (let i = 3; i <= div2; i += 2) {\n\t\tif (n % i === 0)\
    \ {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmptftrt8fb.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmptftrt8fb.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977848
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n\n  // If n is less than\
    \ two, then\n  // a. it's not prime, and\n  // b. it's prime.\n  if (n < 2) {\n\
    \    return true;\n  }\n\n  // If n even, then\n  // a. If it's even, then\n \
    \ //   a. If it's prime, return true\n  //   b. Otherwise, if it's divisible by\
    \ 2, return false\n  // b. If it's odd, then\n  //   a. If it's prime, return\
    \ false\n  //   b. If it's divisible by 2, return true\n  // c. Otherwise, return\
    \ false\n\n  if (n % 2 == 0) {\n    if (n % 2 === 0) {\n      return false;\n\
    \    } else if (is_prime(n / 2)) {\n      return true;\n    } else {\n      return\
    \ is_prime(n / 2);\n    }\n  }\n\n  if (n % 2 !== 0) {\n    return false;\n  }\n\
    \n  // n % 2 != 0\n  if (is_prime(n / 2)) {\n    return false;\n  }\n\n  return\
    \ true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpy0j00el3.js:58:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpy0j00el3.js:71:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977848
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n    if (n < 2) {\n        return false;\n    }\n    if (n === 2)\
    \ {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n\
    \    }\n    let m = Math.sqrt(n);\n    for (let i = 2; i <= m; i++) {\n      \
    \  if (n % i === 0) {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977848
- exit_code: 2
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n  let isPrime = true;\n  let isPrimeNum = parseInt(n / 2);\n  while\
    \ (isPrimeNum % 2 == 0) {\n    isPrime = true;\n    n -= isPrimeNum * 2;\n   \
    \ isPrimeNum = parseInt(n / 2);\n  }\n  while (isPrimeNum != 1 && isPrimeNum !=\
    \ n) {\n    isPrime = false;\n    n -= isPrimeNum;\n    isPrimeNum = parseInt(n\
    \ / 2);\n  }\n  return isPrime;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpafysjuw2.ts(18,29): error TS2345: Argument of type
    ''number'' is not assignable to parameter of type ''string''.

    ../../../../../tmp/tmpafysjuw2.ts(22,27): error TS2345: Argument of type ''number''
    is not assignable to parameter of type ''string''.

    ../../../../../tmp/tmpafysjuw2.ts(27,27): error TS2345: Argument of type ''number''
    is not assignable to parameter of type ''string''.

    '
  timestamp: 1659977848
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n    const max_prime: number = Math.sqrt(n);\n    for (let i: number\
    \ = 1; i < max_prime; i += 1) {\n        if (n % i === 0) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpvcysxp5z.js:29:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpvcysxp5z.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977848
- exit_code: 2
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n  // TODO: Remove div by zero check (replace with Math.trunc when\
    \ available)\n  if (n === 0) return false;\n  if (n % 2 === 0) return n === 1;\n\
    \n  for (let i = 4; i <= Math.trunc(n * Math.sqrt(n)); i += 2) {\n    if (n %\
    \ i === 0) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpvv20zkfs.ts(21,29): error TS2339: Property ''trunc''
    does not exist on type ''Math''.

    '
  timestamp: 1659977848
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n    console.assert(n > 0);\n    console.assert(n % 2 == 0);\n\n \
    \   let root2 = Math.floor(Math.sqrt(n));\n    console.assert(root2 > 0);\n\n\
    \    let nPrime = 1;\n    let k = 2;\n    while (nPrime < root2) {\n        if\
    \ (n % k == 0) {\n            nPrime++;\n        }\n        k++;\n    }\n\n  \
    \  return nPrime == root2;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpngl25123.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpngl25123.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977848
- exit_code: 2
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n\t// https://en.wikipedia.org/wiki/Primality_test#Primality_of_one_number\n\
    \t// https://en.wikipedia.org/wiki/Primality_test#Primality_of_two_numbers\n\t\
    // https://en.wikipedia.org/wiki/Primality_test#Primality_of_a_triple_number\n\
    \t// https://en.wikipedia.org/wiki/Primality_test#Primality_of_a_quadrillion_number\n\
    \tlet n: number = Number(n);\n\tlet i: number;\n\tlet j: number;\n\tlet s: number;\n\
    \tlet test: number;\n\tlet test2: number;\n\tlet test3: number;\n\tlet test4:\
    \ number;\n\tif (n < 1) {\n\t\treturn false;\n\t}\n\tfor (i = 2; i <= n / 2; i++)\
    \ {\n\t\tfor (j = 2; j <= 2 * i; j++) {\n\t\t\ts = j - i;\n\t\t\tif (s !== 0)\
    \ {\n\t\t\t\ttest = pow(s, n);\n\t\t\t\tif (test % 1 === 0) {\n\t\t\t\t\ttest2\
    \ = pow(s, n - 1);\n\t\t\t\t\tif (test2 % 1 === 0) {\n\t\t\t\t\t\ttest3 = pow(s,\
    \ n - 2);\n\t\t\t\t\t\tif (test3 % 1 === 0) {\n\t\t\t\t\t\t\ttest4 = pow(s, n\
    \ - 3);\n\t\t\t\t\t\t\tif (test4 % 1 === 0) {\n\t\t\t\t\t\t\t\treturn true;\n\t\
    \t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\
    return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpa9bm_v6m.ts(16,19): error TS2300: Duplicate identifier
    ''n''.

    ../../../../../tmp/tmpa9bm_v6m.ts(21,6): error TS2300: Duplicate identifier ''n''.

    ../../../../../tmp/tmpa9bm_v6m.ts(36,12): error TS2304: Cannot find name ''pow''.

    ../../../../../tmp/tmpa9bm_v6m.ts(38,14): error TS2304: Cannot find name ''pow''.

    ../../../../../tmp/tmpa9bm_v6m.ts(40,15): error TS2304: Cannot find name ''pow''.

    ../../../../../tmp/tmpa9bm_v6m.ts(42,16): error TS2304: Cannot find name ''pow''.

    '
  timestamp: 1659977848
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n    if (n <= 1) {\n        return false;\n    }\n\n    if (n ===\
    \ 2) {\n        return true;\n    }\n\n    var i = Math.floor(Math.sqrt(n));\n\
    \    var t = true;\n    if (n % 2 === 0 || n % 3 === 0) {\n        return true;\n\
    \    }\n\n    for (var j = 3; j * j <= i; j += 2) {\n        t = !t;\n    }\n\n\
    \    return t;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpsw0n8eww.js:36:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpsw0n8eww.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977848
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n\tif (n === 1) return false;\n\tif (n <= 3) return n === 2;\n\tconst\
    \ max_sqrt_n = Math.sqrt(n);\n\tlet n_whole: number, n_factor: number;\n\tfor\
    \ (n_whole = 0, n_factor = 2; n_factor < max_sqrt_n; n_whole++, n_factor++) {\n\
    \t\tif (n % n_factor === 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmplq5zas0a.js:38:12)\n    at\
    \ Object.<anonymous> (/tmp/tmplq5zas0a.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977848
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n  n = n % 2 == 0 ? 3 : n % 2 == 1 ? 5 : 3;\n  for (let i = 2; i <\
    \ Math.sqrt(n); i++) {\n    if (n % i == 0) {\n      return false;\n    }\n  }\n\
    \  return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpml4e25zp.js:28:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpml4e25zp.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977848
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n\tif(n<2) return false\n\tfor(let i=2; i<=Math.sqrt(n); i++) {\n\t\
    \tif(n%i===0) return false\n\t}\n\treturn true\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977850
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n    let factors: number[] = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29,\
    \ 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    for (let i\
    \ = 0; i < factors.length; i++) {\n        if (n % factors[i] === 0) {\n     \
    \       return false;\n        }\n    }\n    return true;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpb8573l19.js:30:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpb8573l19.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977850
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n  // Ensure number is > 0.\n  if (n < 0) return false;\n\n  // If\
    \ the number is equal to 1, then we know it is prime since the\n  // first 2 numbers\
    \ are primes. Otherwise, only 2 numbers are prime.\n  if (n === 1) return true;\n\
    \n  // If the number is evenly divisible by 2, then it is prime.\n  if (n % 2\
    \ === 0) return false;\n\n  // If the number is evenly divisible by 3, then it\
    \ is a prime.\n  if (n % 3 === 0) return true;\n\n  // If the number is evenly\
    \ divisible by 5, then it is prime.\n  if (n % 5 === 0) return false;\n\n  //\
    \ If any number is evenly divisible by numbers less than 7, then it\n  // is prime.\n\
    \  if (n % 7 === 0) return true;\n\n  // If number is oddly divisible by 2, then\
    \ it is prime.\n  if (n % 2 === 1) return false;\n\n  // If number is oddly divisible\
    \ by 3, then it is a prime.\n  if (n % 3 === 1) return true;\n\n  // If number\
    \ is oddly divisible by 5, then it is prime.\n  if (n % 5 === 1) return false;\n\
    \n  // If number is oddly divisible by 7, then it is prime.\n  if (n % 7 === 1)\
    \ return true;\n\n  // Otherwise, it is composite.\n  return false;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpdbw67uw7.js:56:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpdbw67uw7.js:69:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977850
- exit_code: 2
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n  const sieve: Set<number> = new Set([2]);\n\n  for (let i = 3; i\
    \ <= Math.sqrt(n); i += 1) {\n    if (sieve.has(i)) {\n      continue;\n    }\n\
    \n    if (n % i === 0) {\n      return false;\n    }\n\n    sieve.add(i);\n  }\n\
    \n  return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpa7ahpu5f.ts(17,16): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    ../../../../../tmp/tmpa7ahpu5f.ts(17,34): error TS2583: Cannot find name ''Set''.
    Do you need to change your target library? Try changing the `lib` compiler option
    to es2015 or later.

    '
  timestamp: 1659977850
- exit_code: 2
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n  var limit: number = Math.ceil(Math.sqrt(n));\n  var factors: number[]\
    \ = [];\n  for (var i = 2; i <= limit; i++) {\n    factors.push(i);\n  }\n  for\
    \ (var i = factors.length - 1; i >= 0; i--) {\n    if (n % factors[i] !== 0 ||\
    \ n !== 1 / factors[i]) return false;\n  }\n  return true;\n}\n</code>\n<|/ a\
    \ dscore=4 tags=primes,javascript,prime-factoring |>\n<| a |>\n<code>\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpne_e2h6_.ts(27,2): error TS1110: Type expected.

    ../../../../../tmp/tmpne_e2h6_.ts(27,3): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpne_e2h6_.ts(28,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpne_e2h6_.ts(28,4): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpne_e2h6_.ts(29,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpne_e2h6_.ts(29,7): error TS1109: Expression expected.

    ../../../../../tmp/tmpne_e2h6_.ts(31,9): error TS1005: '';'' expected.

    '
  timestamp: 1659977850
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n    if (n <= 1) {\n        return false;\n    }\n    if (n < 3) {\n\
    \        return true;\n    }\n    if (n % 2 == 0) {\n        if (n < 2) {\n  \
    \          return false;\n        }\n        if (n % 4 == 0) {\n            return\
    \ true;\n        }\n    } else {\n        if (n % 4 == 0) {\n            return\
    \ false;\n        }\n    }\n    var m = Math.sqrt(n);\n    for (var i = 5; i *\
    \ i <= n; i += 6) {\n        if (n % i == 0) {\n            return false;\n  \
    \      }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpm1kbysy1.js:47:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpm1kbysy1.js:61:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977850
- exit_code: 2
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n  if (!is_number(n)) {\n    throw new Error(\"is_prime expects a\
    \ number\");\n  }\n  const p = n - 1;\n  var t = new Array(p + 1);\n  for (var\
    \ i = p; --i >= 0;) {\n    t[i] = i & 1;\n  }\n  for (var i = 1; i < p; ++i) {\n\
    \    if (t[i] === 0) {\n      return false;\n    }\n  }\n  return true;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpjhbwhcxs.ts(17,8): error TS2304: Cannot find name
    ''is_number''.

    '
  timestamp: 1659977850
- exit_code: 2
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n  let max_divisor = sqrt(n);\n  for (let d = 2; d <= max_divisor;\
    \ d++) {\n    if (n % d == 0) {\n      return false;\n    }\n  }\n  return true;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpu0ibfn8b.ts(17,21): error TS2304: Cannot find name
    ''sqrt''.

    '
  timestamp: 1659977850
- exit_code: 2
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 1) {\n    return false;\n  }\n  const i = new BigInt(2);\n\
    \  while (true) {\n    if (BigInt(Math.pow(i.toString(), n)) === BigInt(n)) {\n\
    \      return true;\n    }\n    if (n <= i) {\n      return false;\n    }\n  \
    \  i = i.multiply(BigInt(i)).add(BigInt(1));\n  }\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmppuij2f1a.ts(20,17): error TS2304: Cannot find name
    ''BigInt''.

    ../../../../../tmp/tmppuij2f1a.ts(22,9): error TS2304: Cannot find name ''BigInt''.

    ../../../../../tmp/tmppuij2f1a.ts(22,47): error TS2304: Cannot find name ''BigInt''.

    ../../../../../tmp/tmppuij2f1a.ts(28,5): error TS2588: Cannot assign to ''i''
    because it is a constant.

    ../../../../../tmp/tmppuij2f1a.ts(28,20): error TS2304: Cannot find name ''BigInt''.

    ../../../../../tmp/tmppuij2f1a.ts(28,35): error TS2304: Cannot find name ''BigInt''.

    '
  timestamp: 1659977850
- exit_code: 2
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n    let prime_numbers = primes\n    // Return false if n is 0 (which\
    \ is not prime)\n    if (n === 0 || n === 1) {\n        return false\n    }\n\n\
    \    // Use Eratosthenes' method for fast probable prime number check\n    if\
    \ (n <= 5) {\n        return prime_numbers[n] === true\n    }\n\n    // Check\
    \ if n is an integer > 3\n    if (n <= Math.sqrt(n)) {\n        return false\n\
    \    }\n\n    // Check all numbers from 2 to sqrt(n) to see if any divides n\n\
    \    for (let i = 2; i <= Math.sqrt(n); i++) {\n        if (n % i === 0) {\n \
    \           return false\n        }\n    }\n\n    return true\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpw4w6nqbn.ts(17,25): error TS2304: Cannot find name
    ''primes''.

    '
  timestamp: 1659977850
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n  let i = 2\n  while (i < n && n % i == 0) {\n    i++\n  }\n  return\
    \ n % i != 0\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpf83hku_q.js:26:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpf83hku_q.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977850
- exit_code: 2
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n    if (n === 1 || n === 3) {\n        return true;\n    }\n\n  \
    \  // Test for divisibility by 2, 3, 5, and 7.\n    // The first factor of n is\
    \ either 1 or n-1.\n    // If it is a multiple of those and is not divisible by\
    \ those, then n is prime.\n    for (let i = 1; i <= Math.sqrt(n); i++) {\n   \
    \     if ((n % i) === 0 && (n % i !== 0) || (n % (i + 1)))) {\n            return\
    \ false;\n        }\n    }\n\n    return true;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmprp1qnncg.ts(25,61): error TS1109: Expression expected.

    '
  timestamp: 1659977850
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n    // Returns true if given number is prime or false otherwise.\n\
    \    if (n < 2 || n !== Math.sqrt(n)) {\n        return false;\n    }\n\n    const\
    \ root = (n - 1) | 0;\n    let prev: number | undefined;\n\n    for (let i = 3;\
    \ i <= root; i += 2) {\n        if (n % i === 0) {\n            return false;\n\
    \        }\n\n        prev = i;\n    }\n\n    return n === prev ? true : false;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp8kzweode.js:35:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp8kzweode.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977850
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n  if (n === 1) {\n    return false\n  }\n  if (n === 2) {\n    return\
    \ true\n  }\n  const root2 = Math.sqrt(n)\n  for (let i = 3; i <= root2; i +=\
    \ 2) {\n    if (n % i === 0) {\n      return false\n    }\n  }\n  return true\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp8vvoufv5.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp8vvoufv5.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977850
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n  let result = true;\n\n  // Check for small numbers (2 <= n < 21).\n\
    \  if (n === 0) return false;\n  if (n === 1) return true;\n  if (n < 2 || n >\
    \ Math.sqrt(n)) return false;\n\n  // Check for even numbers.\n  if (n % 2 ===\
    \ 0) return false;\n\n  // Check wheter n is a prime using the Sieve method.\n\
    \  for (let i = 3; i * i <= n; i += 2) {\n    if (n % i === 0) return false;\n\
    \  }\n\n  return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp3wsv9v4o.js:39:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp3wsv9v4o.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977850
- exit_code: 2
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n  if (n <= 1) {\n    return false\n  }\n\n  // Optimized Primality\
    \ Test.\n  if (n <= 6) {\n    for (var i = 2; i <= Math.sqrt(n); ++i) {\n    \
    \  if (n % i === 0) {\n        return false\n      }\n    }\n    return true\n\
    \  }\n\n  // Sieve up to a number.\n  var max = (n >= 50) ? n : n + 5\n\n  var\
    \ sieve = new Array(max)\n  var i\n  for (i = 3; i <= max; i += 2) {\n    sieve[i]\
    \ = 1\n  }\n  for (i = max; i-- > 0;) {\n    if (sieve[i] == 0) {\n      for (var\
    \ j = i; j < max; ++j) {\n        sieve[j] = 0\n      }\n      break\n    }\n\
    \  }\n  return true\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp8x8gmx6o.ts(35,7): error TS2403: Subsequent variable
    declarations must have the same type.  Variable ''i'' must be of type ''number'',
    but here has type ''any''.

    '
  timestamp: 1659977850
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 3) return n === 2;\n  // Trial division algorithm that\
    \ returns 'false' if the number is prime and 'true' if it isn't.\n  // http://en.wikipedia.org/wiki/Primality_test#Trial_division_algorithm_.28Java.2C_Python.2C_Google_.28Google_29\n\
    \  const a = 2;\n  const b = Math.sqrt(n);\n  for (let i = 0; i < b + 1; i++)\
    \ {\n    if (n % i == 0) return false;\n  }\n  return true;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpmk4cwh8r.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpmk4cwh8r.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977851
- exit_code: 2
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n  // Check all the known primes <= n\n  for (let p = 1; p < N; p++)\
    \ {\n    if (n === p || n !== p && n % p === 0) {\n      return true;\n    }\n\
    \  }\n\n  return false;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmprj09b14_.ts(18,23): error TS2552: Cannot find name
    ''N''. Did you mean ''n''?

    '
  timestamp: 1659977850
- exit_code: 2
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n    // We start by defining the prime-test function as\n    // a\
    \ function, which will take in a single number and\n    // return true or false:\n\
    \    // isPrime(number)\n    // And then we'll use the fact that if we have some\
    \ number\n    // which divides into the number 'n', then that number\n    // is\
    \ prime too:\n    // isPrime(n/n)\n    // We can take advantage of this and start\
    \ defining\n    // two variables named 'prime' and 'composite',\n    // which\
    \ will have as its values true or false:\n    // prime = true\n    // composite\
    \ = false\n    // We can then start defining the function 'isPrime':\n    // isPrime(number)\
    \ {\n    //     // First, we'll need to define the 'prime' variable:\n    // \
    \    prime = true\n    //     // Then we'll need to check to see if the number\
    \ passed is even,\n    //     // and if so, set the variable 'composite' to false:\n\
    \    //     if (number % 2 === 0) {\n    //         composite = false\n    //\
    \     }\n    //     // Now we'll need a simple 'for' loop to iterate through\n\
    \    //     // the 'number' variable:\n    //     for (let i = 0; i < number;\
    \ i += 1) {\n    //         // If the variable 'composite' is still true, then\n\
    \    //         // the number is not prime:\n    //         if (composite) {\n\
    \    //             return false\n    //         }\n    //         // Otherwise,\
    \ the number is prime, so we'll set 'prime'\n    //         // to false and exit\
    \ the loop:\n    //         composite = true\n    //     }\n    //     // Finally,\
    \ we'll return the 'prime' variable, which will\n    //     // be true if we exit\
    \ the loop, and false otherwise:\n    //     return prime\n    // }\n    // As\
    \ we can see, the definition of 'isPrime' is fairly straightforward,\n    // so\
    \ we'll not go into too much detail about this function\n    // at this point.\
    \ However, as we have seen above, we can use\n    // a similar technique to define\
    \ an 'isComposite' function,\n    // which takes in a single number, and determines\
    \ if the\n    // number is composite:\n    // isComposite(number)\n    // We'll\
    \ use a similar technique to define 'isPrime':\n    // isPrime(number) {\n   \
    \ //     // First, we'll need to define the 'prime' variable:\n    //     prime\
    \ = true\n    //     // Then we'll need to check to see if the number passed is\
    \ even,\n    //     // and if so, set the variable 'composite' to false:\n   \
    \ //     if (number % 2 === 0) {\n    //         composite = false\n    //   \
    \  }\n    //     // Now we'll need a \ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpejcgu8a_.ts(93,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659977850
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n  var sieve: Array<number> = Array(n + 1);\n  \n  // Ensure that\
    \ the sieve is non-decreasing\n  sieve[0] = n;\n  for (var i = 1; i < n; ++i)\
    \ {\n    if (sieve[i] === 0) {\n      for (var j = i * i; j < n; j += i) {\n \
    \       sieve[j] = 2;\n      }\n    }\n  }\n  \n  // Check n\n  for (var i = 2;\
    \ i < n; ++i) {\n    if (sieve[i] === 0) return false;\n  }\n  \n  return true;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpsnhn2uho.js:37:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpsnhn2uho.js:51:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977851
- exit_code: 2
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n\n  if (n === 2) {\n    return\
    \ true;\n  }\n\n  var sqrt_n = Math.sqrt(n);\n  for (var i = 0; i < primes.length;\
    \ i++) {\n    var p = primes[i];\n    if (p < sqrt_n) {\n      if (p > 1 && n\
    \ % p === 0) {\n        return false;\n      }\n    } else if (p > 1 && n % p\
    \ === 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpdl34md10.ts(26,23): error TS2304: Cannot find name
    ''primes''.

    ../../../../../tmp/tmpdl34md10.ts(27,13): error TS2304: Cannot find name ''primes''.

    '
  timestamp: 1659977850
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) { return false; }\n  if (n === 2) { return true; }\n\
    \  // Trial division with isqrt computes better than integer division.\n  var\
    \ a = Math.floor(n), d, r = n - a, rr = Math.round(r / 2), l = Math.ceil(r * 1.4);\n\
    \  while (r > 0) { d = r; r = rr; rr = l % r; }\n  if (n !== 1) {\n    if (d %\
    \ 2 === 1) { return false; }\n    if (n % (d - 1) === 0) { return false; }\n \
    \ }\n  return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpeikpjb0u.js:43:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpeikpjb0u.js:57:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977851
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n    let i = 2; // Prime numbers start with 2\n    while( i < n )\
    \ {\n        if( n % i === 0 ) {\n            return false;\n        }\n     \
    \   i += 1;\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpa5s5bt_f.js:35:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpa5s5bt_f.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977850
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n  const limit = Math.sqrt(n);\n  for (let i = 2; i < limit; i++)\
    \ {\n    if (n % i === 0) return false;\n  }\n  return true;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpqeoprimv.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpqeoprimv.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977852
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n    if (n === 1) {\n        return false;\n    }\n    // Skip even\
    \ numbers, as they have no factors other than 2.\n    if (n % 2 === 0 && n > 2)\
    \ {\n        return false;\n    }\n    for (let i = 2; i < n; i++) {\n       \
    \ if (n % i === 0) {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977853
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    // 2 is prime since it is congruent to 1 and\
    \ a coprime to 3\n    return n === 2;\n  }\n  if (n % 2 === 0 || n % 3 === 0)\
    \ {\n    // n is congruent to 1 or 3, or is coprime\n    return false;\n  }\n\
    \  let i = parseInt(Math.sqrt(n).toFixed(6), 10);\n  // i is congruent to 1 or\
    \ 3, or is coprime to 5\n  for (let j = 2; j < i; j++) {\n    if (n % j === 0\
    \ && (n % j + i !== 0 || n % (j + i) !== 0)) {\n      return false;\n    }\n \
    \ }\n  return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977852
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n  let sqrt_n = Math.floor(Math.sqrt(n));\n  let prime_candidates:\
    \ number[] = [];\n  for (let i = 2; i <= sqrt_n; i++) {\n    if (n % i === 0)\
    \ {\n      return false;\n    }\n    if (n < 1) {\n      return false;\n    }\n\
    \  }\n\n  return prime_candidates.every((v) => v === n);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4sl8_sn6.js:38:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp4sl8_sn6.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977853
- exit_code: 2
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n    if (n === 1) {\n        return false;\n    }\n    if (n <= 3)\
    \ {\n        return true;\n    }\n    if (n % 2 == 0 || n % 3 == 0) {\n      \
    \  return false;\n    }\n    const m = Math.sqrt(n);\n    let rounds = 4;\n  \
    \  while (!is_prime(m)) {\n        m *= 2;\n        if (rounds == 0) {\n     \
    \       return false;\n        }\n        rounds--;\n    }\n    return true;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmphs7phyiz.ts(29,9): error TS2588: Cannot assign to
    ''m'' because it is a constant.

    '
  timestamp: 1659977852
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n    if (n < 2) {\n        return false\n    }\n    if (n === 2 ||\
    \ n === 3) {\n        return true\n    }\n    if (n % 2 === 0 || n % 3 === 0)\
    \ {\n        return false\n    }\n    let i = (n - 2) / 3\n    while (i > 0) {\n\
    \        if (n % i === 0) {\n            return false\n        }\n        i >>=\
    \ 1\n    }\n    return true\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpg49y3ov6.js:39:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpg49y3ov6.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977852
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) { return false;\
    \ }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp62xcib7h.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp62xcib7h.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977853
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n    const primes: number[] = [2];\n    const factor: number[] = [n];\n\
    \    let i: number;\n    for (i = 2; primes[i] * primes[i] <= n; i++) {\n    \
    \    for (let j = 2; primes[j] * primes[j] <= n; j++) {\n            if (!(n %\
    \ primes[j])) {\n                factor.push(primes[j]);\n                break;\n\
    \            }\n        }\n    }\n    return factor.length == n;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpftl2ta6j.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpftl2ta6j.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977853
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n  var is_prime: boolean;\n  // Special case: if it's greater than\
    \ 1, then it's prime!\n  if (n <= 1) {\n    is_prime = false;\n  }\n  // It's\
    \ not prime if it's a multiple of the only even number\n  else if (n % 2 == 0)\
    \ {\n    is_prime = false;\n  }\n  // Check every number from 3 to half the number\
    \ - 1\n  else {\n    for (var i = 3; i <= Math.floor(Math.sqrt(n)); i += 2) {\n\
    \      if (n % i == 0) {\n        is_prime = false;\n        break;\n      }\n\
    \    }\n  }\n  // Return whether or not the number was prime\n  return is_prime;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\ntrue\n    at test (/tmp/tmpz8ibjtm1.js:42:12)\n \
    \   at Object.<anonymous> (/tmp/tmpz8ibjtm1.js:55:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977853
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n    if (n < 2) { return false; }\n    if (n === 2) { return true;\
    \ }\n\n    let i = Math.floor(Math.sqrt(n));\n\n    for (let d = 2; d * d <= n;\
    \ d++) { if (n % d === 0) return false; }\n\n    return true;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977853
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n    if (n <= 1) {\n        return false;\n    }\n\n    let root =\
    \ Math.sqrt(n);\n    for (let i = 2; i <= root; i++) {\n        if (n % i ===\
    \ 0) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977853
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n  if (n <= 1) {\n    throw new Error(`is_prime: n must be positive`);\n\
    \  }\n  for (let i = 2; i <= Math.sqrt(n); ++i) {\n    if (n % i === 0) {\n  \
    \    return false;\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmp_yaexwc4.js:18\n        throw new Error(\"is_prime: n must be positive\"\
    );\n        ^\n\nError: is_prime: n must be positive\n    at is_prime (/tmp/tmp_yaexwc4.js:18:15)\n\
    \    at test (/tmp/tmp_yaexwc4.js:36:22)\n    at Object.<anonymous> (/tmp/tmp_yaexwc4.js:44:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977853
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n    if (n <= 1) {\n        return false;\n    }\n    const sqrt =\
    \ Math.sqrt(n);\n    for (let i = 1; i < sqrt; i++) {\n        if (n % i === 0)\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpr47nrbnc.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpr47nrbnc.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977853
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n\t// From https://en.wikipedia.org/wiki/Primality_test#Primality_of_a_number\n\
    \tif (n < 4) return true;\n\tif (n % 2 == 0) return false;\n\n\tlet m: number\
    \ = Math.sqrt(n);\n\tlet c: number = m;\n\n\twhile (true) {\n\t\tif (c % 2 ==\
    \ 0) return false;\n\t\tc--;\n\t\tlet d: number = c / 2;\n\t\tif (d * d > n) return\
    \ true;\n\t\tm += 1;\n\t}\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp8ful5_de.js:43:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp8ful5_de.js:51:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977853
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n    let prime: boolean = true;\n    for (let i = 1; i < Math.sqrt(n);\
    \ i++) {\n        if (n % i == 0) {\n            prime = false;\n        }\n \
    \   }\n    return prime;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpu3r79km0.js:29:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpu3r79km0.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977853
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n    if (n < 2) {\n        return false;\n    }\n    if (n % 2 ==\
    \ 0) {\n        return false;\n    }\n    var sqrt_n = Math.sqrt(n);\n    for\
    \ (var i = 3; i <= sqrt_n; i += 2) {\n        if (n % i == 0) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977853
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n    if (n < 2)\n        return false;\n    if (n < 61)\n        return\
    \ true;\n\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n        if (n % i ===\
    \ 0)\n            return false;\n    }\n    return true;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpq2hsj53w.js:30:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpq2hsj53w.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977853
- exit_code: 2
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n    return is_prime_impl(n, 0);\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp8xkune98.ts(17,12): error TS2304: Cannot find name
    ''is_prime_impl''.

    '
  timestamp: 1659977853
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n    let i = 2\n    while (i < n) {\n        if (n % i === 0) {\n\
    \            return false\n        }\n        i++\n    }\n    return true\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpyjyw4pr2.js:35:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpyjyw4pr2.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977853
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n  if (n <= 1) return false;\n  if (n == 2) return true;\n  if (n\
    \ % 2 == 0) return false;\n  if (n % 3 == 0) return false;\n  for (let i = 5;\
    \ i * i <= n; i += 6) {\n    if (n % i == 0) return false;\n  }\n  return true;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp1b8g49aq.js:45:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp1b8g49aq.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977853
- exit_code: 2
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n    // Don't check negative numbers; they're not primes.\n    if\
    \ (n < 0) return false;\n    // Don't consider composite numbers that are not\
    \ factors of `2`; they aren't primes.\n    if (n % 2 === 0) return false;\n  \
    \  // Don't consider composite numbers that are not factors of `3`; they aren't\
    \ primes.\n    if (n % 3 === 0) return false;\n\n    // Test if all multiples\
    \ of 3 or 5 are prime\n    const limit = sqrt(n) - 1;\n    for (let i = 2; i <=\
    \ limit; i += 2) {\n        if (n % i === 0) return false;\n    }\n\n    // Test\
    \ if all multiples of 7 are prime\n    const limit2 = sqrt(n) - 3;\n    for (let\
    \ i = 7; i <= limit2; i += 7) {\n        if (n % i === 0) return false;\n    }\n\
    \n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpms97dr99.ts(25,19): error TS2304: Cannot find name
    ''sqrt''.

    ../../../../../tmp/tmpms97dr99.ts(31,20): error TS2304: Cannot find name ''sqrt''.

    '
  timestamp: 1659977853
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) return false;\n  if (n < 4) return n === 2;\n  if (n\
    \ % 2 === 0) return n === 3;\n  if (n % 3 === 0) return n === 5;\n  if (n % 5\
    \ === 0) return n === 11;\n  if (n % 7 === 0) return n === 13;\n  return false;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpno7eru_s.js:35:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpno7eru_s.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977853
- exit_code: 2
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n\tconst sqrt: number = Math.sqrt(n);\n\tconst f: number = 1;\n\t\
    let i: number;\n\tlet d: number;\n\t\n\tfor(i = 0; i < sqrt; i++) {\n\t\td = (n\
    \ % f) + f;\n\t\tif (d < 2 || d == n) return false; \n\t\tf = d;\n\t}\n\treturn\
    \ true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpqudj860o.ts(25,3): error TS2588: Cannot assign to
    ''f'' because it is a constant.

    '
  timestamp: 1659977853
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n  if (n === 1) {\n    return false;\n  }\n  const sq = Math.sqrt(n);\n\
    \  for (let i = 2; i <= sq; ++i) {\n    if (n % i === 0) {\n      return false;\n\
    \    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977855
- exit_code: 2
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2 || n % 2 == 0) { return false; }\n  var sqrt_n = Math.sqrt(n);\n\
    \  for (var i = 0; i < primes.length; ++i) {\n    var m = primes[i];\n    if (m\
    \ <= sqrt_n) { return false; } // primes are only even numbers\n    if (m > sqrt_n)\
    \ { break; }\n    if (n % m === 0) { return false; }\n  }\n  return true;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpl3z73oe4.ts(19,23): error TS2304: Cannot find name
    ''primes''.

    ../../../../../tmp/tmpl3z73oe4.ts(20,13): error TS2304: Cannot find name ''primes''.

    '
  timestamp: 1659977855
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n    if (n < 2) {\n        return false;\n    }\n    let i = Math.floor(Math.sqrt(n));\n\
    \    if (n % 2 === 0) {\n        return n !== 2;\n    }\n    if (n === 2) {\n\
    \        return true;\n    }\n    while (i < n) {\n        if (n % i === 0) {\n\
    \            return false;\n        }\n        i += 1;\n    }\n    return true;\n\
    }\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp23i2g8pb.js:38:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp23i2g8pb.js:52:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977855
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 1 || n < 3) {\n    return false;\n  }\n  const a = n %\
    \ 6 === 0 ? 3 : n % 6 === 1 ? 3 : n % 6 === 2 ? 2 : 1;\n  for (let i = 5; i *\
    \ i <= n; i += 6) {\n    if (n % i === 0 || n % (i + 2) === 0) {\n      return\
    \ false;\n    }\n  }\n  return n === 1;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpgp1kx93f.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpgp1kx93f.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977855
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n  const num1 = Math.sqrt(n);\n  let num2: number = 0;\n  let result:\
    \ boolean = false;\n\n  for (let i = 3; i <= num1; i += 2) {\n    num2 = n * i\
    \ - 1;\n    if (num2 > num1) {\n      break;\n    }\n    if (n % i === 0) {\n\
    \      result = true;\n      break;\n    }\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpt87erlxe.js:36:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpt87erlxe.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977855
- exit_code: 2
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) return false;\n  let i = 2;\n  while (i < n) if (n %\
    \ i == 0) return false;\n  return true;\n}\n</code>\n<|/ a |>\n<| c |>\nI love\
    \ this solution, although it's really overkill for many problems.  It's very easy\
    \ to compute composite numbers, however.  For example `is_prime(17)` returns `true`.\n\
    <|/ c |>\n<| c |>\nIt also returns `true` for primes over 2^32 (~4.5e9). If you\
    \ want to check a number as a \"composite\" number that doesn't take up too much\
    \ memory (say less than half an hour), you can do this: \n`function isPrime(number):\
    \ boolean\n{\n    let i = 2;\n    let isPrime = true;\n    do \n    {\n      \
    \  if (number % i == 0) \n        {\n            isPrime = false;\n          \
    \  break;\n        }\n        i++;\n    } while (i <= Math.sqrt(number));\n  \
    \  return isPrime;\n}`\n<|/ c |>\n<| c |>\nYes, I see your point about it being\
    \ a bit overkill, however, my point is that this solution is extremely simple\
    \ and easily understandable, and I believe that my solution should be as fast\
    \ as possible. I can't think of a faster solution than this one.\n<|/ c |>\n<|\
    \ c |>\nThe accepted answer doesn't work. Try `is_prime(21)` it returns `true`,\
    \ when it shouldn't.\n<|/ c |>\n<| a dscore=5 |>\nHere's a one-liner that uses\
    \ Javascript's isPrime() method to test if a number is prime:\n<code>\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpqwkury5z.ts(22,2): error TS1110: Type expected.

    ../../../../../tmp/tmpqwkury5z.ts(22,3): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpqwkury5z.ts(23,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpqwkury5z.ts(23,4): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpqwkury5z.ts(24,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpqwkury5z.ts(24,7): error TS1109: Expression expected.

    ../../../../../tmp/tmpqwkury5z.ts(25,3): error TS1005: '';'' expected.

    ../../../../../tmp/tmpqwkury5z.ts(25,8): error TS1005: '';'' expected.

    ../../../../../tmp/tmpqwkury5z.ts(25,13): error TS1005: '';'' expected.

    ../../../../../tmp/tmpqwkury5z.ts(25,32): error TS1005: '';'' expected.

    ../../../../../tmp/tmpqwkury5z.ts(25,34): error TS1005: '';'' expected.

    ../../../../../tmp/tmpqwkury5z.ts(25,76): error TS1005: '';'' expected.

    ../../../../../tmp/tmpqwkury5z.ts(25,78): error TS1005: '';'' expected.

    ../../../../../tmp/tmpqwkury5z.ts(25,83): error TS1005: '';'' expected.

    ../../../../../tmp/tmpqwkury5z.ts(25,88): error TS1005: '';'' expected.

    ../../../../../tmp/tmpqwkury5z.ts(25,91): error TS1005: '';'' expected.

    ../../../../../tmp/tmpqwkury5z.ts(25,99): error TS1005: '';'' expected.

    ../../../../../tmp/tmpqwkury5z.ts(25,109): error TS1005: '';'' expected.

    ../../../../../tmp/tmpqwkury5z.ts(25,132): error TS1005: '';'' expected.

    ../../../../../tmp/tmpqwkury5z.ts(25,155): error TS1005: '';'' expected.

    ../../../../../tmp/tmpqwkury5z.ts(26,1): error TS1003: Identifier expected.

    ../../../../../tmp/tmpqwkury5z.ts(26,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpqwkury5z.ts(26,4): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpqwkury5z.ts(27,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpqwkury5z.ts(27,7): error TS1109: Expression expected.

    ../../../../../tmp/tmpqwkury5z.ts(28,4): error TS1005: '';'' expected.

    ../../../../../tmp/tmpqwkury5z.ts(28,9): error TS1005: '';'' expected.

    ../../../../../tmp/tmpqwkury5z.ts(28,24'
  timestamp: 1659977855
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 1) {\n    throw new Error(`n should be positive.`);\n \
    \ }\n\n  const sqrt5 = Math.sqrt(5);\n  const sqrt31 = Math.sqrt(31);\n  const\
    \ sqrt3 = 31;\n\n  if (n === 2) {\n    return true;\n  }\n\n  if (n % 2 === 0)\
    \ {\n    return false;\n  }\n\n  let i;\n\n  for (i = 3; i <= sqrt31; i = i +\
    \ 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n\n  for (i =\
    \ 3; i <= sqrt5; i = i + 2) {\n    if (n % i === 0) {\n      return false;\n \
    \   }\n  }\n\n  return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpo02uv1oz.js:51:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpo02uv1oz.js:59:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977855
- exit_code: 2
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n  // We only need to handle odd numbers; the even numbers will be\n\
    \  // marked as composite above. The implementation below uses the Sieve of Eratosthenes.\n\
    \  if (n % 2 === 0) {\n    return false;\n  }\n  const sieve = new Array<number>([...Array(n).keys()].map((i)\
    \ => +i));\n  for (let i = 3; i < Math.sqrt(n); i += 2) {\n    if (sieve[i] ===\
    \ 0) {\n      for (let j = 0; j < i; j++) {\n        sieve[j] = 1;\n      }\n\
    \    }\n  }\n  return primes.find((i) => i === n) ? false : sieve[n];\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: "../../../../../tmp/tmp644wjxkr.ts(22,35): error TS2769: No overload matches\
    \ this call.\n  Overload 1 of 3, '(arrayLength: number): number[]', gave the following\
    \ error.\n    Argument of type 'number[]' is not assignable to parameter of type\
    \ 'number'.\n  Overload 2 of 3, '(...items: number[]): number[]', gave the following\
    \ error.\n    Argument of type 'number[]' is not assignable to parameter of type\
    \ 'number'.\n../../../../../tmp/tmp644wjxkr.ts(22,48): error TS2339: Property\
    \ 'keys' does not exist on type 'any[]'.\n../../../../../tmp/tmp644wjxkr.ts(30,10):\
    \ error TS2304: Cannot find name 'primes'.\n"
  timestamp: 1659977855
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) { return false; }\n  if (n === 2) { return true; }\n\
    \n  let i = 2;\n  let t;\n\n  while (i <= n) {\n    t = i;\n    i = i + 1;\n\n\
    \    // Skip even numbers.\n    if ( t % 2 ) { continue; }\n\n    // Check if\
    \ we can divide evenly into the number.\n    if ( n % i ) {\n      return false;\n\
    \    }\n  }\n\n  return true;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpyx07oa0x.js:43:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpyx07oa0x.js:56:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977855
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n    if (n === 1) return false;\n    if (n === 2) return true;\n \
    \   if (n % 2 == 0 || n % 3 == 0) return false;\n    if (n < 3) return true;\n\
    \    if (n < 5) return false;\n    if (n % 10 === Math.floor(n % 10)) return false;\n\
    \    if (n % 10 == 1 && n % 100 != 11) return false;\n    if (n % 10 == 1 && n\
    \ % 100 == 11) return true;\n    if (n % 10 == 0 && n % 100 != 11) return false;\n\
    \    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpz4ytd971.js:41:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpz4ytd971.js:54:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977855
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n  let prime: boolean;\n  for (let i = 2; i <= Math.sqrt(n); i++)\
    \ {\n    if (n % i === 0) {\n      prime = false;\n      break;\n    } else {\n\
    \      prime = true;\n    }\n  }\n  return prime;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\nfalse\n    at test (/tmp/tmp99dv8auv.js:38:12)\n\
    \    at Object.<anonymous> (/tmp/tmp99dv8auv.js:46:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977855
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n  if (n === 1)\n    return false;\n\n  if (n % 2 === 0)\n    return\
    \ false;\n\n  // Trial by division.\n  for (let i = 3; i * i <= n; i += 2)\n \
    \   if (n % i === 0)\n      return false;\n\n  return true;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977855
- exit_code: 2
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n\t// https://stackoverflow.com/questions/10964818/why-is-1000-faster-than-7-500\n\
    \t// https://stackoverflow.com/questions/1479577/what-is-the-fastest-way-to-implement-an-integer-eratosthenes-function\n\
    \tlet d = n - 1;\n\tlet w = sqrt(d);\n\twhile (d % w == 0) {\n\t\td /= w;\n\t\t\
    w--;\n\t}\n\twhile (w-- > 1 && d % w == 0) {\n\t\td /= w;\n\t}\n\treturn d ==\
    \ 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpahfw93qw.ts(20,10): error TS2304: Cannot find name
    ''sqrt''.

    '
  timestamp: 1659977855
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n    if (n === 2 || n === 3) {\n        return true;\n    }\n\n  \
    \  if (n % 2 === 0) {\n        return false;\n    }\n\n    let sqrtN = Math.sqrt(n);\n\
    \n    for (let i = 5; i <= sqrtN; i += 5) {\n        if (n % i === 0) {\n    \
    \        return false;\n        }\n    }\n\n    return true;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpipdoo2z4.js:40:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpipdoo2z4.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977855
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n    let i = 2;\n    while (i < n) {\n        if (n % i === 0) {\n\
    \            return false;\n        }\n        i += 1;\n    }\n    return true;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpnxt9lve8.js:35:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpnxt9lve8.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977855
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n    const sqrtn = Math.sqrt(n);\n    for (let i = 2; i <= sqrtn;\
    \ i++) {\n        if (n % i === 0) {\n            return false;\n        }\n \
    \   }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpcl5upxvp.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpcl5upxvp.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977856
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n  // Returns true if n is prime, and false otherwise.\n  // https://en.wikipedia.org/wiki/Primality_test#Naive_methods\n\
    \  const NUMBER_OF_PRIMES_TO_TEST = 100000;\n  // Returns true if n is prime.\n\
    \  // Returns false if n is composite.\n  // Note that both is_prime and is_composite\
    \ are functions with time complexity O(1).\n  for (let i = 2; i <= NUMBER_OF_PRIMES_TO_TEST;\
    \ i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpntuif736.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpntuif736.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977855
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n  n = Number(n);\n  if (n < 2) {\n    return false;\n  }\n  for (let\
    \ i = 2; i < n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n \
    \ }\n  return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977855
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n  // See http://primes.utm.edu/lists/small/100003.txt\n  if (n <\
    \ 1373653) {\n    return n >= 2;\n  }\n\n  // See http://primes.utm.edu/lists/small/simpletest.txt\n\
    \  if (n < 25326001) {\n    return n == 1;\n  }\n\n  // See http://www.jera.com/techinfo/jtns/freeman.html\n\
    \  if (n < 34155001) {\n    return n == 1;\n  }\n\n  // See http://www.cs.berkeley.edu/~wkahan/numinv.html\n\
    \  if (n < 341550001) {\n    return false;\n  }\n\n  // See http://mathworld.wolfram.com/PrimeCountingFunction.html\n\
    \  if (n >= 1373653) {\n    return true;\n  }\n\n  // See http://primes.utm.edu/lists/small/fizzbuzz.html\n\
    \  if (n % 2 == 0) {\n    return n % 100 == 0;\n  }\n\n  return false;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp20ve_i7n.js:46:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp20ve_i7n.js:60:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977855
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n    if (n < 2) {\n        // 1 is not prime, 2 is prime, and any\
    \ odd number is prime\n        return true\n    } else if (n <= 3) {\n       \
    \ // 2 and 3 are prime\n        return false\n    } else if (n % 2 == 0) {\n \
    \       // 2 and 3 are not prime\n        return false\n    } else if (n % 3 ==\
    \ 0) {\n        // 3 is prime\n        return true\n    } else {\n        // n\
    \ > 3 is not prime (including 4)\n        return false\n    }\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpc2m7c98u.js:42:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpc2m7c98u.js:55:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977856
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n  if (n === 0 || n === 1) {\n    return false;\n  }\n\n  let m =\
    \ n === 1 ? 4 : Math.min(Math.floor(Math.sqrt(n)), 15);\n  n = n - 1;\n  while\
    \ (n) {\n    if (m % n === 0 || n === 0) {\n      return false;\n    }\n    m\
    \ = Math.floor(m / n);\n    n = n - 1;\n  }\n  return true;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpgtirq_j1.js:35:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpgtirq_j1.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977856
- exit_code: 2
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n    if (n < 2) { return false; }\n    if (n < 5) { return true; }\n\
    \    if (n === 5) { return true; }\n    if (n === 13) { return true; }\n    const\
    \ sqrtn = Math.sqrt(n);\n    for (let i = 6; i <= sqrtn; i += 6) {\n        if\
    \ (n % i === 0) {\n            return false;\n        }\n    }\n    return n >\
    \ 1;\n}\n</code>\n<|/ a tags=typescript,primes,javascript,factors dscore=0 |>\n\
    <| a tags=typescript,primes,javascript,factors dscore=0 |>\n<code>\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp8x10va5m.ts(29,2): error TS1110: Type expected.

    ../../../../../tmp/tmp8x10va5m.ts(29,3): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmp8x10va5m.ts(30,2): error TS1109: Expression expected.

    ../../../../../tmp/tmp8x10va5m.ts(30,4): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmp8x10va5m.ts(31,2): error TS1109: Expression expected.

    ../../../../../tmp/tmp8x10va5m.ts(31,6): error TS1005: '';'' expected.

    ../../../../../tmp/tmp8x10va5m.ts(31,48): error TS1005: '';'' expected.

    ../../../../../tmp/tmp8x10va5m.ts(31,58): error TS1109: Expression expected.

    ../../../../../tmp/tmp8x10va5m.ts(33,9): error TS1005: '';'' expected.

    '
  timestamp: 1659977855
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n    const sqrt2: number = Math.sqrt(n);\n    for (let i: number =\
    \ 2; i * i <= sqrt2; i++) {\n        if (n % i == 0) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmppa8suq3_.js:28:12)\n    at\
    \ Object.<anonymous> (/tmp/tmppa8suq3_.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977856
- exit_code: 2
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n  // Only need to check up to square root of number\n  // (which\
    \ should give approximately the primes).\n  for (var i = 0; i < Sqrt(n); ++i)\n\
    \    if (n % i === 0) return false;\n  return true;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpr7pobd8t.ts(19,23): error TS2304: Cannot find name
    ''Sqrt''.

    '
  timestamp: 1659977857
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n  // Return true if n is prime, and false otherwise.\n  // >>> is_prime(6)\n\
    \  // false\n  // >>> is_prime(101)\n  // true\n  // >>> is_prime(11)\n  // true\n\
    \  // >>> is_prime(13441)\n  // true\n  // >>> is_prime(61)\n  // true\n  // >>>\
    \ is_prime(4)\n  // false\n  // >>> is_prime(1)\n  // false\n  if (n <= 1) {\n\
    \    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2\
    \ == 0) {\n    return false;\n  }\n\n  var i = 3;\n  while (i < Math.sqrt(n))\
    \ {\n    if (n % i == 0) {\n      return false;\n    }\n    i += 2;\n  }\n\n \
    \ return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977857
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) return false;\n  if (n == 2) return true;\n  if (n %\
    \ 2 == 0) return false;\n  if (n % 3 == 0) return true;\n  for (let i = 3; i *\
    \ i <= n; i += 2) {\n    if (n % i == 0) return false;\n  }\n  return true;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977857
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n\tif (n < 2) { return false; }\n\n\tfor (let i = 2; i <= Math.sqrt(n);\
    \ i++) {\n\t\tif (n % i === 0) { return false; }\n\t}\n\n\treturn true;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977857
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n    if (n < 2) {\n        return false\n    }\n    const max_divisor\
    \ = 2\n    for (let i = 3; i <= max_divisor; i += 2) {\n        if (n % i ===\
    \ 0) {\n            return false\n        }\n    }\n    return true\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmprz0t0o6q.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmprz0t0o6q.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977858
- exit_code: 2
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n  // Coerce n to a positive integer.\n  const int_n = Math.trunc(n);\n\
    \n  // Trial powers of 2\n  for (let i = 2; i < int_n; i++) {\n    // If current\
    \ number is divisible by i, then it is prime.\n    if (int_n % i === 0) {\n  \
    \    return false;\n    }\n  }\n\n  // Return true if given n is a prime number.\n\
    \  return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpt_ar1tlp.ts(18,22): error TS2339: Property ''trunc''
    does not exist on type ''Math''.

    '
  timestamp: 1659977857
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n  if (n <= 1) return false;\n  if (n <= 3) return n === 2;\n  if\
    \ (n % 2 == 0 || n % 3 == 0) return false;\n\n  const m = Math.sqrt(n);\n  const\
    \ k = Math.floor(m);\n\n  // Use Sieve of Eratosthenes for range of primes up\
    \ to n\n  for (let i = 4; i <= k; ++i) {\n    if (n % i === 0 || n % (i + 2) ===\
    \ 0) return false;\n  }\n\n  return true;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977858
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) return false;\n\n  // if n has no factors, it is prime.\n\
    \  for (let i = 0; i < n; i++) {\n    if (n % i === 0) return false;\n  }\n\n\
    \  return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpm4wlj2zy.js:30:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpm4wlj2zy.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977858
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n    // return n !== 1 && (n !== 0 && (n % 2 !== 0 || n % 3 !== 0))\n\
    \    return n !== 1 && (n % 2 !== 0 || n % 3 !== 0);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpn2j8wac6.js:28:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpn2j8wac6.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977858
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n    n -= 1;\n    let m = Math.floor(Math.sqrt(n));\n    for (let\
    \ i = 2; i <= m; i++) {\n        if (n % i == 0) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpqizox3fe.js:29:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpqizox3fe.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977858
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n\t// See https://github.com/facebook/immutable-js/issues/341\n\t\
    const SMALL_NUMBER = 1e-10;\n\n\tif (n < 2) {\n\t\treturn false;\n\t}\n\tif (n\
    \ === 2) {\n\t\treturn true;\n\t}\n\tif (n % 2 === 0 || n === 3) {\n\t\treturn\
    \ false;\n\t}\n\t// Test if n is perfect, up to sqrt\n\tconst limit = Math.floor(Math.sqrt(n));\n\
    \tlet i = 2;\n\tlet s = 0;\n\twhile (i <= limit) {\n\t\ts += i;\n\t\tif (n % i\
    \ === 0) {\n\t\t\treturn false;\n\t\t}\n\t\ti++;\n\t}\n\treturn s <= n - 1 &&\
    \ n !== 4;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977858
- exit_code: 2
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) return false;\n  if (n < 4) return n === 2;\n  if (n\
    \ % 2 === 0) return false;\n  if (n % 4 === 0) return true;\n  if (n % 6 === 0)\
    \ return n !== 2;\n\n  // Check all the numbers of form 6n+1 or 6n-1\n  for (let\
    \ i = 3; i <= Math.sqrt(n); i += 6) {\n    if (n % i === 0) return false;\n  }\n\
    \n  return true;\n}\n\nconst primes: Set<number> = new Set<number>();\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpeuzh9ez6.ts(31,15): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    ../../../../../tmp/tmpeuzh9ez6.ts(31,33): error TS2583: Cannot find name ''Set''.
    Do you need to change your target library? Try changing the `lib` compiler option
    to es2015 or later.

    '
  timestamp: 1659977858
- exit_code: 2
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n    if (n < 2) {\n        return false\n    }\n    let s: number\
    \ = Math.sqrt(n)\n    for (let i = 3; i <= s; i += 2) {\n        if (n % i ===\
    \ 0) {\n            return false\n        }\n    }\n    return true\n}\n</code>\n\
    <|/ a tags=javascript,primes,algorithm |>\n<| c |>\nThis code is not fast enough\
    \ for me, it takes too long to calculate prime numbers. I need a faster solution.\n\
    <|/ c |>\n<| c |>\nThanks, I made an edit after benchmarking my code. Although\
    \ I should note that I had to remove a couple of unnecessary `var` declarations.\n\
    <|/ c |>\n<| a tags=javascript,primes,algorithm dscore=3 |>\nHere is my take on\
    \ this, the code is pretty straightforward, it only contains one loop and a couple\
    \ of variables:\n<code>\nvar primes = [2];\n\nfor (var p = 3; p <= Math.sqrt(12);\
    \ p++) {\n  if (primes.indexOf(p) < 0) {\n    for (var i = 2; i <= p; i++) {\n\
    \      if (p % i == 0) {\n        primes.push(i);\n      }\n    }\n  }\n}\n\n\
    console.log(primes);\n</code>\nIt basically uses the Sieve of Eratosthenes.\n\
    <|/ a |>\n<| c |>\nIt is not fast enough for me, because it calculates all primes\
    \ up to 11 and then checks if it can be divided by any number between 2 and 11.\n\
    <|/ c |>\n<| c |>\nIt is very fast indeed. It calculates all primes up to `Math.sqrt(12)`.\
    \ The first prime it encounters is `3`, that's why it gets skipped.\n<|/ c |>\n\
    <| c |>\nThe first prime it encounters has to be at least `3` because it's a prime\
    \ number. You're using some kind of sieve for sure, I'm just saying it doesn't\
    \ work for numbers above `12` because `Math.sqrt(12)` can be `13` which can't\
    \ be divided by `3`.\n<|/ c |>\n<| c |>\nYou're right, I fixed my answer.\n<|/\
    \ c |>\n<| a tags=javascript,primes,algorithm dscore=2 |>\nI wrote a very fast\
    \ implementation to check whether a number is prime. \n<code>\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpb5jhi5zy.ts(28,2): error TS1110: Type expected.

    ../../../../../tmp/tmpb5jhi5zy.ts(28,3): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpb5jhi5zy.ts(29,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpb5jhi5zy.ts(29,4): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpb5jhi5zy.ts(30,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpb5jhi5zy.ts(30,7): error TS1109: Expression expected.

    ../../../../../tmp/tmpb5jhi5zy.ts(31,6): error TS1005: '';'' expected.

    ../../../../../tmp/tmpb5jhi5zy.ts(31,11): error TS1005: '';'' expected.

    ../../../../../tmp/tmpb5jhi5zy.ts(31,14): error TS1005: '';'' expected.

    ../../../../../tmp/tmpb5jhi5zy.ts(31,18): error TS1005: '';'' expected.

    ../../../../../tmp/tmpb5jhi5zy.ts(31,23): error TS1005: '';'' expected.

    ../../../../../tmp/tmpb5jhi5zy.ts(31,30): error TS1005: '';'' expected.

    ../../../../../tmp/tmpb5jhi5zy.ts(31,34): error TS1005: ''('' expected.

    ../../../../../tmp/tmpb5jhi5zy.ts(31,41): error TS1005: '';'' expected.

    ../../../../../tmp/tmpb5jhi5zy.ts(31,47): error TS1005: '';'' expected.

    ../../../../../tmp/tmpb5jhi5zy.ts(31,51): error TS1005: '')'' expected.

    ../../../../../tmp/tmpb5jhi5zy.ts(31,56): error TS1005: '';'' expected.

    ../../../../../tmp/tmpb5jhi5zy.ts(31,59): error TS1005: '';'' expected.

    ../../../../../tmp/tmpb5jhi5zy.ts(31,69): error TS1005: '';'' expected.

    ../../../../../tmp/tmpb5jhi5zy.ts(31,75): error TS1005: '';'' expected.

    ../../../../../tmp/tmpb5jhi5zy.ts(31,86): error TS1005: '';'' expected.

    ../../../../../tmp/tmpb5jhi5zy.ts(31,91): error TS1005: '';'' expected.

    ../../../../../tmp/tmpb5jhi5zy.ts(31,93): error TS1005: '';'' expected.

    ../../../../../tmp/tmpb5jhi5zy.ts(31,100): error TS1005: '';'' expected.

    ../../../../../tmp/tmpb5jhi5zy.ts(32,1): error TS1003: Identifier expected.

    ../../../../../tmp/tmpb5jhi5zy.ts(32,2): error TS1109: Expression expected.

    ../../../../../tmp/tmpb5jhi5zy.ts(32,4): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmpb5jhi5zy.ts(33,2): error TS1'
  timestamp: 1659977858
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n  const sqrt: number = Math.sqrt(n);\n  for (let x: number = 2; x\
    \ < sqrt; x++) {\n    if (n % x === 0) {\n      return false;\n    }\n  }\n  return\
    \ true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp1uujmyl7.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp1uujmyl7.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977858
- exit_code: 2
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n  return n % 2 == 0 || n % 3 == 0 || is_even(n) || is_odd(n);\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpctyn5otp.ts(17,38): error TS2304: Cannot find name
    ''is_even''.

    ../../../../../tmp/tmpctyn5otp.ts(17,52): error TS2304: Cannot find name ''is_odd''.

    '
  timestamp: 1659977858
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n        if (n % i\
    \ === 0) return false;\n    }\n\n    return true;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpwtf7eaxr.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpwtf7eaxr.js:40:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977858
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) return false;\n\
    \  }\n  return n > 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977858
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n\n  if (n === 2) {\n    return\
    \ true;\n  }\n\n  // If n is not evenly divisible by 3, then it can only be prime\n\
    \  // if one of its factors is 3. We don't want to have to check the\n  // square\
    \ root, but it's not hard to do so. This algorithm is of a\n  // computational\
    \ complexity of O(sqrt(n)) and O(sqrt(n)) in time and\n  // space. The following\
    \ is a simple optimization which gives a fast\n  // result for numbers that are\
    \ prime.\n  if (n % 3 === 0) {\n    for (let i = 3; i <= Math.sqrt(n); i += 2)\
    \ {\n      if (n % i === 0) {\n        return false;\n      }\n    }\n    return\
    \ true;\n  }\n\n  // If n is divisible by any number other than 3, then it cannot\n\
    \  // be prime. n is prime if one of its factors is 3 or more.\n  // For example,\
    \ 29 is prime because 2 \xD7 29 = 29.\n  for (let i = 3; i <= Math.sqrt(n); i\
    \ += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n\n  return\
    \ true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp089z__iq.js:50:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp089z__iq.js:64:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977858
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n  let maxI: number = Math.sqrt(n);\n  for (let i: number = 0; i <\
    \ maxI; i++) {\n    if (n % i == 0) {\n      return false;\n    }\n  }\n  return\
    \ n > 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp5shkqe_s.js:29:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp5shkqe_s.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977858
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n    if (n < 2) return false;\n    if (n < 4) return true;\n\n   \
    \ var s: number = n;\n    var i: number;\n\n    for (i = 2; i <= Math.sqrt(s);\
    \ i++) {\n        if (s % i === 0) return false;\n    }\n\n    return true;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977858
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n    const sqrt: number = Math.sqrt(n);\n    if (n < 2) {\n      \
    \  return false;\n    }\n    if (n === 2) {\n        return true;\n    }\n   \
    \ if (n <= 3) {\n        return false;\n    }\n    for (let i = 5; i <= sqrt;\
    \ i++) {\n        if (n % i === 0) {\n            return false;\n        }\n \
    \   }\n    return true;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp_khy9fc5.js:37:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp_khy9fc5.js:51:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977858
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n    if (n < 2) {\n        return false\n    }\n\n    // if less than\
    \ or equal to 2 then its a composite number\n    if (n === 2) {\n        return\
    \ true\n    }\n\n    var i = 2\n    var m = 1\n\n    while (i < n) {\n       \
    \ if (n % i === 0) {\n            m = m * i\n        }\n\n        i++\n    }\n\
    \n    if (m === 1) {\n        return false\n    }\n\n    // if greater than 2\
    \ then its not a prime number\n    if (m > 2) {\n        return true\n    }\n\n\
    \    // if n is odd then it is even\n    return n % 2 === 0\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpv59f9i20.js:45:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpv59f9i20.js:59:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977858
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n  const sqrt: number = Math.sqrt(n);\n  if (n % 2 == 0) {\n    return\
    \ false;\n  }\n  for (let i = 3; i <= sqrt; i += 2) {\n    if (n % i == 0) {\n\
    \      return false;\n    }\n  }\n  return true;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpugzsara4.js:37:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpugzsara4.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977858
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n\tif (n < 2) return false;\n\tif (n % 2 == 0) return n == 2;\n\t\
    let r = Math.floor(Math.sqrt(n));\n\tfor (let i = 3; i * i <= n; i += 2) {\n\t\
    \tif (n % i == 0) return false;\n\t}\n\treturn true;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977859
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n  const max: number = Math.sqrt(n);\n  for (let i: number = 2; i\
    \ <= max; i += 1) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n\
    \  return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpdero_rys.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpdero_rys.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977860
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n  if (n <= 1) return false;\n  if (n === 2) return true;\n  // Test\
    \ if n is evenly divisible by each of the numbers 2..20\n  for (let i = 2; i <=\
    \ Math.sqrt(n); ++i) {\n    if (n % i === 0) return false;\n  }\n  return true;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977860
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n    if (n < 2)\n        return false;\n    if (n < 10)\n        return\
    \ true;\n    if (n % 2 == 0 || n % 3 == 0)\n        return false;\n    var i =\
    \ 5\n    while (i >= 1 && (n % i == 0 || n % (i - 1) == 0))\n        --i;\n  \
    \  return i != 1;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpolxh_7ir.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpolxh_7ir.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977860
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n  //Should use trial division to speed up primality tests.\n  //https://en.wikipedia.org/wiki/Primality_test#Primality_trial.\n\
    \  //If the number is 1, then return true.\n  //If the number is greater or equal\
    \ than 1, then loop through\n  //the numbers starting from 3 to sqrt(n) to check\
    \ for prime\n  //numbers. If the current number is evenly divisible by a\n  //number\
    \ greater than 1, then it is not prime.\n  if (n <= 1) {\n    return true;\n \
    \ }\n\n  for (let i = 2; i <= Math.sqrt(n); ++i) {\n    if (n % i === 0) {\n \
    \     return false;\n    }\n  }\n\n  return true;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpnu5x7w21.js:43:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpnu5x7w21.js:51:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977860
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n  if (n === 1) {\n    return false;\n  }\n\n  // http://en.wikipedia.org/wiki/Primality_test#Naive_methods\n\
    \  // If n <= 2 then return true.\n  if (n < 2) {\n    return true;\n  }\n\n \
    \ // If a <= 11 or n % 2 === 0 then n cannot be prime\n  // If n < 11 then n cannot\
    \ be prime if n % 2 === 0\n  // For all other values of n n can be tested for\
    \ primality\n  if (n < 11) {\n    return (n % 2 === 0);\n  }\n\n  // If n > 11\
    \ then n cannot be prime if n % 11 === 0\n  if (n > 11) {\n    return (n % 11\
    \ === 0);\n  }\n\n  // The prime number factors of n are 1, 2, 3, 5, 7, 11, 13,\
    \ and 29.\n  // See http://en.wikipedia.org/wiki/Prime_number\n  var i = 1;\n\
    \  var is_prime = true;\n  var check = 2;\n\n  // Check potential divisors up\
    \ to sqrt(n)\n  for (; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n   \
    \   is_prime = false;\n      break;\n    }\n\n    // If we reached sqrt(n) then\
    \ there is no remainder\n    if (i === Math.sqrt(n)) {\n      break;\n    }\n\n\
    \    // If we have found a number that isn't prime then give up\n    if (check\
    \ === n) {\n      break;\n    }\n\n    // If we had found a number that isn't\
    \ prime, but we haven't reached it\n    // yet, then give up\n    if (check ===\
    \ n) {\n      continue;\n    }\n\n    // If the number is prime, then all smaller\
    \ factors must be larger than\n    // the square root of the number. For example,\
    \ the number 13 has factors 2, 3, 5.\n    // The first factor of 13 is 2, so it\
    \ can be tested as being greater than the square root of 13.\n    // The second\
    \ factor of 13 is also greater than the square root of 13 so the number cannot\
    \ be prime and we can continue checking for the next factor.\n    if (check %\
    \ i === 0) {\n      is_prime = false;\n      break;\n    }\n  }\n\n  return is_prime;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmptlmmg0s1.js:73:12)\n    at\
    \ Object.<anonymous> (/tmp/tmptlmmg0s1.js:87:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977860
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n    if (n < 2) {\n        return false;\n    }\n    // Special case:\
    \ 1 or 0 => false\n    if (n === 1 || n === 0) {\n        return false;\n    }\n\
    \    // Use Sieve of Eratosthenes to test if n is prime.\n    const limit: number\
    \ = Math.sqrt(n);\n    for (let i: number = 2; i < limit; i++) {\n        if (n\
    \ % i === 0) {\n            return false;\n        }\n    }\n    return true;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp5tiokzck.js:41:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp5tiokzck.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977860
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2)\n    return false;\n\n  for (let i = 2; i <= Math.sqrt(n);\
    \ i++) {\n    if (n % i == 0)\n      return false;\n  }\n\n  return true;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977861
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2)\n    return false;\n  if (n === 2)\n    return true;\n\
    \  if (n % 2 == 0)\n    return false;\n  if (n % 3 == 0)\n    return false;\n\
    \  for (var i = 3; i * i <= n; i += 2)\n    if (n % i == 0)\n      return false;\n\
    \  return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977860
- exit_code: 2
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n    if (n <= 1) return false;\n    if (n === 2) return true;\n  \
    \  if (n % 2 == 0) return false;\n    if (n % 3 == 0) return true;\n    if (n\
    \ % 5 == 0) return false;\n    if (n % 7 == 0) return false;\n\n    return primes.some(p\
    \ => n % p === 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpjrdrbcse.ts(24,12): error TS2304: Cannot find name
    ''primes''.

    '
  timestamp: 1659977860
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) return false;\n  if (n < 3) return true;\n\n  const\
    \ sqrt = Math.sqrt(n);\n  let num_minus_one_half = n - 1;\n\n  for (let divisor\
    \ = 2; divisor <= sqrt; ++divisor) {\n    if (n % divisor == 0) return false;\n\
    \n    if (n % divisor == num_minus_one_half) return false;\n  }\n  return true;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977860
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n    // return Math.floor(Math.sqrt(n)) != n && (n % 1 || n != 1 ||\
    \ !is_prime(Math.floor(Math.sqrt(n))));\n    return !(n % 1 || n != 1 || !is_prime(Math.floor(Math.sqrt(n))));\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp49fvs0sx.js:24:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp49fvs0sx.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977860
- exit_code: 2
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n    let i = 1;\n\n    if (n % 2 == 0) {\n        return false;\n\
    \    }\n\n    for (; i <= Math.sqrt(n); i++) {\n        if (n % i == 0) {\n  \
    \          return false;\n        }\n    }\n\n    return true;\n}\n</code>\n<|/\
    \ a dscore=1 |>\n<| a |>\nHere is my solution to check if a number is prime:\n\
    <code>\npublic static boolean isPrime(long n) {\n    long nMinus1 = n - 1;\n \
    \   long max = (long) Math.sqrt(n);\n    for (int i = 0; i <= max; i += 2) {\n\
    \        if (nMinus1 % i == 0) {\n            return false;\n        }\n    }\n\
    \    return true;\n}\n</code>\n<|/ a dscore=1 tags=java |>\n<| a tags=java |>\n\
    <code>\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp0q6o3ty7.ts(31,2): error TS1110: Type expected.

    ../../../../../tmp/tmp0q6o3ty7.ts(31,3): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmp0q6o3ty7.ts(32,2): error TS1109: Expression expected.

    ../../../../../tmp/tmp0q6o3ty7.ts(32,4): error TS1161: Unterminated regular expression
    literal.

    ../../../../../tmp/tmp0q6o3ty7.ts(33,2): error TS1109: Expression expected.

    ../../../../../tmp/tmp0q6o3ty7.ts(33,7): error TS1109: Expression expected.

    ../../../../../tmp/tmp0q6o3ty7.ts(34,6): error TS1005: '';'' expected.

    ../../../../../tmp/tmp0q6o3ty7.ts(34,9): error TS1005: '';'' expected.

    ../../../../../tmp/tmp0q6o3ty7.ts(34,12): error TS1005: '';'' expected.

    ../../../../../tmp/tmp0q6o3ty7.ts(34,21): error TS1005: '';'' expected.

    ../../../../../tmp/tmp0q6o3ty7.ts(34,24): error TS1005: '';'' expected.

    ../../../../../tmp/tmp0q6o3ty7.ts(34,30): error TS1005: '';'' expected.

    ../../../../../tmp/tmp0q6o3ty7.ts(34,33): error TS1005: ''('' expected.

    ../../../../../tmp/tmp0q6o3ty7.ts(34,35): error TS1005: '')'' expected.

    ../../../../../tmp/tmp0q6o3ty7.ts(34,42): error TS1005: '';'' expected.

    ../../../../../tmp/tmp0q6o3ty7.ts(34,45): error TS1005: '';'' expected.

    ../../../../../tmp/tmp0q6o3ty7.ts(36,8): error TS1005: '';'' expected.

    ../../../../../tmp/tmp0q6o3ty7.ts(36,23): error TS1005: '';'' expected.

    ../../../../../tmp/tmp0q6o3ty7.ts(36,36): error TS1005: '','' expected.

    ../../../../../tmp/tmp0q6o3ty7.ts(36,39): error TS1005: '';'' expected.

    ../../../../../tmp/tmp0q6o3ty7.ts(37,10): error TS1005: '';'' expected.

    ../../../../../tmp/tmp0q6o3ty7.ts(38,10): error TS1005: '';'' expected.

    ../../../../../tmp/tmp0q6o3ty7.ts(38,23): error TS1005: '';'' expected.

    ../../../../../tmp/tmp0q6o3ty7.ts(39,14): error TS1005: '';'' expected.

    ../../../../../tmp/tmp0q6o3ty7.ts(39,29): error TS1005: '')'' expected.

    ../../../../../tmp/tmp0q6o3ty7.ts(39,37): error TS1005: '';'' expected.

    ../../../../../tmp/tmp0q6o3ty7.ts(46,2): error TS1110: Type expected.

    ../../../../../tmp/tmp0q6o3ty7.ts(46,3): error TS1161: Unterminated regular expression
    lite'
  timestamp: 1659977860
- exit_code: 2
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n    let d = getDivisors(n);\n    return d.length === 1 && d[0] ===\
    \ n;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpv0m2ms37.ts(17,13): error TS2304: Cannot find name
    ''getDivisors''.

    '
  timestamp: 1659977860
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) return false;\n  if (n % 2 === 0) return false;\n  if\
    \ (n < 7) return true;\n  if (n < 9) return false;\n  if (n % 10 === 0) return\
    \ false;\n  if (n % 12 === 0) return true;\n  return is_prime(n - 2);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpba2d0_mh.js:35:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpba2d0_mh.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977860
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n    if (n < 2) {\n        return false;\n    }\n    if (n < 7) {\n\
    \        return true;\n    }\n    const root = Math.floor(n ** 0.5);\n    for\
    \ (let i = 2; i <= root; i++) {\n        if (n % i === 0) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpminothlm.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpminothlm.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977861
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n    const max: number = Math.ceil(Math.sqrt(n));\n\n    for (let\
    \ i: number = 1; i <= max; i += 1) {\n        if (n % i === 0) {\n           \
    \ return false;\n        }\n    }\n\n    return true;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpd49c20__.js:29:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpd49c20__.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977861
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n\n  // Check from 1 to n-1\
    \ (rather than 0 to n-1) since it's faster\n  for (let i = 1; i <= n; i++) {\n\
    \    if (n % i === 0) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp0s04oove.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp0s04oove.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977861
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) return false;\n  if (n < 9) return true;\n  if (n %\
    \ 2 == 0) return false;\n  if (n % 3 == 0) return true;\n  if (n % 5 == 0) return\
    \ false;\n  for (let i = 6; i <= Math.sqrt(n); i++) {\n    if (n % i == 0) return\
    \ false;\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpmt3f4uha.js:36:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpmt3f4uha.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977861
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n  const limit = (Math.sqrt(n) + 1) >> 0;\n  for (let i = 2; i <=\
    \ limit; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return\
    \ true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmphbyj0nwe.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmphbyj0nwe.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977861
- exit_code: 2
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n  // Fast return for 0 and 1.\n  if (n < 2) return n === 0\n  //\
    \ Check odd and even numbers for primality (in the latter case, we assume\n  //\
    \ that n != 1 and n != 0).\n  if (n % 2 === 0 && n % 3 === 0) return false\n \
    \ if (n % 4 === 0) return n !== 0\n  // If we get here, n is prime. Use Sieve\
    \ of Eratosthenes for the primality test.\n  let i = 5\n  let primes = []\n  for\
    \ (let factor = 2; factor < n; factor++) {\n    if (n % factor === 0 && n !==\
    \ 1 && n !== 0) primes.push(factor)\n    if (n % (factor - 1) === 0) i = i + factor\n\
    \  }\n  return i === primes.length\n}\n\nconst prime_numbers_2 = [\n  2, 3, 5,\n\
    \  7, 11, 13, 17,\n  19, 23, 29, 31,\n  37, 41, 43, 47,\n  53, 59, 61, 67,\n \
    \ 71, 73, 79, 83, 89,\n  97, 101, 103, 107,\n  109, 113, 127, 131,\n  137, 139,\
    \ 149, 151, 157,\n  163, 167, 173, 179, 181,\n  191, 193, 197, 199, 211,\n  223,\
    \ 227, 229, 233,\n  239, 241, 251, 257, 263,\n  269, 271, 277, 281, 283,\n  293,\
    \ 307, 311, 313, 317,\n  331, 337, 347, 349, 353,\n  359, 367, 373, 379, 383,\n\
    \  389, 397, 401, 409, 419,\n  421, 431, 433, 439, 443,\n  449, 457, 461, 463,\
    \ 467,\n  479, 487, 491, 499, 503,\n  509, 521, 523, 541,\n  547, 557, 563, 569,\n\
    \  571, 577, 587, 593, 599,\n  601, 607, 613, 617, 619,\n  621, 631, 641, 643,\
    \ 647,\n  653, 659, 661, 673, 677,\n  683, 691, 701, 709, 719,\n  727, 733, 739,\
    \ 743,\n  751, 757, 761, 769, 773,\n  787, 797, 809, 811, 821,\n  823, 827, 829,\
    \ 839, 853,\n  857, 859, 863, 877, 881,\n  88\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmptk04bf3x.ts(68,1): error TS1005: '','' expected.

    ../../../../../tmp/tmptk04bf3x.ts(68,9): error TS1005: '','' expected.

    '
  timestamp: 1659977861
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n  // special cases\n  if (n === 2) {\n    return false\n  }\n  if\
    \ (n === 3) {\n    return true\n  }\n  if (n % 2 === 0 || n % 3 === 0) {\n   \
    \ return false\n  }\n  // numbers other than 1, 3, 5 are also prime.\n  if (n\
    \ % 10 === 0 || n % 12 === 0 || n % 14 === 0 || n % 16 === 0 ||\n      n % 18\
    \ === 0) {\n    return false\n  }\n  // test numbers up to 130000\n  if (n ===\
    \ 130000) {\n    return true\n  }\n  if (n === 130005) {\n    return false\n \
    \ }\n  if (n === 130006) {\n    return false\n  }\n  if (n === 130008) {\n   \
    \ return false\n  }\n  if (n === 130009) {\n    return false\n  }\n  if (n ===\
    \ 130016) {\n    return false\n  }\n  return true\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpnc8kqkcb.js:62:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpnc8kqkcb.js:70:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977861
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n    if (n < 2) {\n        return false;\n    }\n    if (n === 2)\
    \ {\n        return true;\n    }\n    if (n % 2 === 0) {\n        return false;\n\
    \    }\n    let max_check = (Math.floor(Math.sqrt(n)) | 0) + 1;\n    // Primality\
    \ check\n    for (let i = 3; i < max_check; i = i + 2) {\n        if (n % i ===\
    \ 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977861
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n\n  if (n === 2) {\n    return\
    \ true;\n  }\n\n  if (n % 2 === 0) {\n    return false;\n  }\n\n  const sieve:\
    \ number[] = [];\n  for (let i = 5; i <= Math.sqrt(n); i += 6) {\n    sieve.push(i);\n\
    \  }\n\n  for (let i = 0; i < sieve.length; i++) {\n    if (sieve[i] === n) {\n\
    \      return true;\n    }\n  }\n\n  return false;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpjtm2n6gn.js:41:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpjtm2n6gn.js:54:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977862
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n  return n % 2 === 0 && n % 7 !== 0 || n % 5 === 0 || n % 11 ===\
    \ 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp6az6hz9h.js:22:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp6az6hz9h.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977862
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n    if (n <= 1) {\n        return false;\n    }\n    for (let i =\
    \ 2; i <= Math.sqrt(n); i++) {\n        if (n % i === 0) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977862
- exit_code: -1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n    if (n < 2) {\n        return false\n    }\n    if (n === 2) {\n\
    \        return true\n    }\n    if (n % 2 === 0) {\n        return false\n  \
    \  }\n    let result: boolean\n    for (let i = 5; true; i *= 2) {\n        if\
    \ (n % i === 0) {\n            result = false\n            break\n        }\n\
    \    }\n    return result\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659977877
- exit_code: 2
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n  // We require this function be called with n >= 2 to ensure that\
    \ n >= 2 is always true.\n  // This means n must be an integer.\n  is_prime.is_prime_is_true\
    \ = true;\n  if (n < 2) {\n    is_prime.is_prime_is_true = false;\n    return\
    \ false;\n  }\n\n  // We require this function be called with n >= 2 to ensure\
    \ that n >= 2 is always true.\n  // This means n must be an integer.\n  // >>>\
    \ is_prime(11)\n  // true\n  // >>> is_prime(13441)\n  // true\n  // >>> is_prime(61)\n\
    \  // true\n  // >>> is_prime(4)\n  // false\n  // >>> is_prime(1)\n  // false\n\
    \  if (n <= 3) {\n    is_prime.is_prime_is_true = true;\n    return false;\n \
    \ }\n\n  // We can immediately return if n is divisible by 3 or 5.\n  // >>> is_prime(2)\n\
    \  // true\n  // >>> is_prime(6)\n  // true\n  // >>> is_prime(8)\n  // false\n\
    \  // >>> is_prime(7)\n  // false\n  // >>> is_prime(11)\n  // true\n  // >>>\
    \ is_prime(12)\n  // false\n  // >>> is_prime(14)\n  // true\n  if (n % 6 ===\
    \ 0 && n % 7 === 0) {\n    is_prime.is_prime_is_true = true;\n    return true;\n\
    \  }\n\n  // We can skip even numbers and return if n is divisible by 5 (6).\n\
    \  // >>> is_prime(6)\n  // true\n  // >>> is_prime(8)\n  // false\n  // >>> is_prime(9)\n\
    \  // true\n  // >>> is_prime(101)\n  // true\n  // >>> is_prime(111)\n  // true\n\
    \  // >>> is_prime(13441)\n  // true\n  // >>> is_prime(14441)\n  // true\n  //\
    \ >>> is_prime(61)\n  // true\n  // >>> is_prime(14)\n  // false\n  // >>> is_prime(15)\n\
    \  // false\n  if (n % 5 === 0 || n % 7 === 0) {\n    is_prime.is_prime_is_true\
    \ = true;\n    return false;\n  }\n\n  // We can skip even numbers and return\
    \ if n is divisible by 7 (8).\n  // >>> is_prime(8)\n  // true\n  // >>> is_prime(10)\n\
    \  // false\n  // >>> is_prime(15)\n  // false\n  if (n % 7 === 0) {\n    is_prime.is_prime_is_true\
    \ = true;\n    return false;\n  }\n\n  // We can skip even numbers and return\
    \ if n is divisible by 11 (12).\n  // >>> is_prime(12)\n  // true\n  // >>> is_prime(13)\n\
    \  // false\n  // >>> is_prime(18)\n  // true\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp0nk9ubst.ts(128,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659977863
- exit_code: 2
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n  const sieve = new Uint32Array([2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107,\
    \ 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193,\
    \ 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281,\
    \ 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383,\
    \ 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479,\
    \ 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593,\
    \ 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683,\
    \ 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809,\
    \ 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911,\
    \ 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]);\n\n  const len\
    \ = n;\n  let num_factors = 0;\n\n  for (let i = 0; i < len; i++) {\n    let i2\
    \ = n - i;\n    let j = n + 1 - i;\n\n    while (j % 2 === 0) {\n      j--;\n\
    \    }\n\n    if (sieve[j] === 1) {\n      num_factors++;\n    }\n  }\n\n  return\
    \ num_factors > 1 && is_square(len);\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpt71lqt7x.ts(35,29): error TS2304: Cannot find name
    ''is_square''.

    '
  timestamp: 1659977862
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n  const sqrtn = Math.floor(Math.sqrt(n));\n\
    \  for (var i = 0; i < sqrtn; ++i) {\n    if (n % i === 0) {\n      return false;\n\
    \    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpb1su0m_i.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpb1su0m_i.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977863
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n  if (n === 1) {\n    return false;\n  }\n  // http://en.wikipedia.org/wiki/Primality_test#Naive_Bisection_method\n\
    \  // Sieve of Eratosthenes algorithm is O(n).\n  const sqrt_n = Math.sqrt(n);\n\
    \  for (let i = 2; i <= sqrt_n; i++) {\n    if (n % i === 0) {\n      return false;\n\
    \    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977863
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n  let primes: number[] = [];\n  for (let i = 2; i < n; ++i) {\n \
    \   if (!primes[i]) {\n      for (let j = 2; j < i; ++j) {\n        if (!primes[j]\
    \ && j % i === 0) {\n          primes.push(j);\n        }\n      }\n    }\n  }\n\
    \  return primes.indexOf(n) !== -1;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp4zxrw561.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp4zxrw561.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977863
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n  if (n === 2) {\n    return\
    \ true;\n  }\n\n  for (let x = 2; x <= Math.floor(Math.sqrt(n)); ++x) {\n    if\
    \ (n % x === 0) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977863
- exit_code: 2
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n    if (n <= 1) return false;\n\n    // If the number is less than\
    \ 3, then it is not prime.\n    if (n < 3) return true;\n\n    // Sieve of Eratosthenes\
    \ is a prime number theorem that states that\n    // all primes up to the n-th\
    \ power can only be obtained by using\n    // simple prime factorization of n.\
    \ So, if the given number is less\n    // than or equal to n, the number is not\
    \ prime and we return false.\n    if (n <= Sieve.Eratosthenes.prime_numbers.length)\
    \ return false;\n\n    // For n > 4, the number is not prime.\n    if (Sieve.Eratosthenes.prime_numbers[n\
    \ - 1] !== 2) return false;\n\n    for (let i = Sieve.Eratosthenes.prime_numbers[n\
    \ - 1]; i <= Math.sqrt(n); i++) {\n        if (n % i === 0) return false;\n  \
    \  }\n\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmps7oro_6z.ts(26,14): error TS2304: Cannot find name
    ''Sieve''.

    ../../../../../tmp/tmps7oro_6z.ts(29,9): error TS2304: Cannot find name ''Sieve''.

    ../../../../../tmp/tmps7oro_6z.ts(31,18): error TS2304: Cannot find name ''Sieve''.

    '
  timestamp: 1659977863
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n  if (n === 1 || n === 2) return false;\n  const limit: number =\
    \ Math.floor(Math.sqrt(n));\n  for (let i: number = 0; i < limit; ++i) {\n   \
    \ if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp1vhcui_p.js:31:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp1vhcui_p.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977863
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n    const LIMIT: number = 11 / 2;\n    if (n === 1) return false;\n\
    \    else if (n % 2 === 0) return (n !== 1);\n    else if (n % 3 === 0) return\
    \ (n !== 1);\n    else if (n % 5 === 0) return (n !== 1);\n    else if (n % 7\
    \ === 0) return (n !== 1);\n    else if (n % 11 !== 0) return (n !== 1);\n   \
    \ else if (n % 13 !== 0) return (n !== 1);\n    else if (n % 17 === 0) return\
    \ (n !== 1);\n    return true;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpv1xoznfq.js:39:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpv1xoznfq.js:53:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977863
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) return false;\n  if (n & 1) return false;\n  const max_divisor\
    \ = (n / 2) as number;\n  // n is not divisible by 2\n  for (let i = 3; i * i\
    \ <= n; i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n \
    \ return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpzzlaejhh.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpzzlaejhh.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977863
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n  const root2 = Math.ceil(Math.sqrt(n));\n  for (let i = 2; i <=\
    \ root2; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return\
    \ true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpb3mf16gj.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpb3mf16gj.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977863
- exit_code: 2
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) { return false; }\n  if (n & 1 === 0 || n <= 5) { return\
    \ true; }\n  for (let i = 2; i <= Math.sqrt(n); i += 2) { if (n % i === 0 || n\
    \ !== (n | i)) { return false; } }\n  return true;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpunmr82yg.ts(18,11): error TS2363: The right-hand
    side of an arithmetic operation must be of type ''any'', ''number'', ''bigint''
    or an enum type.

    ../../../../../tmp/tmpunmr82yg.ts(18,11): error TS2367: This condition will always
    return ''false'' since the types ''1'' and ''0'' have no overlap.

    '
  timestamp: 1659977863
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n    // A quick & dirty prime number test.\n    if (n <= 1) {\n  \
    \      return false;\n    }\n    for (let i = 2; i <= Math.sqrt(n); ++i) {\n \
    \       if (n % i === 0) {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977863
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n  // This implementation is more efficient than the one in the original\
    \ Sieve of Eratosthenes algorithm.\n  const s = n >> 1;\n  const d = n - 1;\n\n\
    \  for (let i = 2; i <= n; ++i) {\n    if (s % i === 0) return false;\n  }\n\n\
    \  if (d <= 1) {\n    for (let i = 1; i <= n; ++i) {\n      if (n % i === 0) return\
    \ false;\n    }\n    return true;\n  }\n\n  do {\n    if (n % 2 === 0) {\n   \
    \   return false;\n    }\n  } while (n !== 1);\n  return true;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpt47r6wcw.js:42:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpt47r6wcw.js:55:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977863
- exit_code: 2
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n    // Don't go above the square root of our max value.\n    if (n\
    \ > Math.sqrt(primes.max)) {\n        return false;\n    }\n\n    let factors:\
    \ number[] = [];\n\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n        if\
    \ (n % i === 0) {\n            factors.push(i);\n        }\n    }\n\n    if (factors.length\
    \ === 0 || factors.length >= primes.max) {\n        return false;\n    }\n\n \
    \   for (let p of factors) {\n        if (p > 1) {\n            return false;\n\
    \        }\n    }\n\n    return true;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpnkav7qhf.ts(18,23): error TS2304: Cannot find name
    ''primes''.

    ../../../../../tmp/tmpnkav7qhf.ts(30,51): error TS2304: Cannot find name ''primes''.

    '
  timestamp: 1659977863
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n    let i = 1;\n    while (i < n) {\n        if (n % i === 0) {\n\
    \            return false;\n        }\n        i += 1;\n    }\n    return true;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpwiucknhb.js:30:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpwiucknhb.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977863
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n\tif (n < 2) {\n\t\treturn false;\n\t}\n\n\tvar i = Math.floor(n);\n\
    \tif (n === i || n === i - 1 || n % i === 0) {\n\t\treturn false;\n\t}\n\n\tfor\
    \ (var y = 2; y < i; y++) {\n\t\tif (n % y === 0) {\n\t\t\treturn false;\n\t\t\
    }\n\t}\n\n\treturn true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmp0gyf9q_u.js:35:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp0gyf9q_u.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977864
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) return false;\n  if (n < 3) return true;\n\n  for (let\
    \ i = 2; i <= Math.sqrt(n); ++i) {\n    if (n % i == 0) return false;\n  }\n\n\
    \  return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977864
- exit_code: 0
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false\n  }\n\n  for (let i = 2; i * i\
    \ <= n; ++i) {\n    if (n % i === 0) {\n      return false\n    }\n  }\n\n  return\
    \ true\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977864
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n  if (n <= 1) return false;\n\n  for (let x = 2; x < n / 2; x++)\
    \ {\n    if (n % x === 0) return false;\n  }\n\n  return true;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp8pi1vsfb.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp8pi1vsfb.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977865
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n    // Return false if the number is NaN.\n    if (n !== n) return\
    \ false;\n\n    // Return true if the number is even.\n    // >>> is_prime(2)\n\
    \    // false\n    // >>> is_prime(4)\n    // true\n    if (n % 2 === 0) return\
    \ false;\n\n    // Return true if the number is odd.\n    // >>> is_prime(3)\n\
    \    // true\n    // >>> is_prime(5)\n    // true\n    if (n % 2 === 1) return\
    \ true;\n\n    // Return true if the number is in the range [2, 30].\n    // >>>\
    \ is_prime(30)\n    // true\n    // >>> is_prime(32)\n    // true\n    if (n <\
    \ 31 && n % 2 === 0) return true;\n    if (n < 59 && n % 2 === 1) return true;\n\
    \n    // Return true if the number is in the range [31, 59].\n    // >>> is_prime(36)\n\
    \    // true\n    // >>> is_prime(37)\n    // true\n    if (n % 10 !== 0 || n\
    \ % 2 === 1) return false;\n    for (let i = 3; i * i <= n; i += 2) {\n      \
    \  if (n % i === 0) return false;\n    }\n    return true;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpxzmuswju.js:65:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpxzmuswju.js:73:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977865
- exit_code: 2
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n    if (n < 2) {\n        return false;\n    }\n    // Special case:\
    \ number is not prime\n    if (n === 2) {\n        return true;\n    }\n    //\
    \ Special case: number is even\n    if (n % 2 === 0) {\n        return false;\n\
    \    }\n    // Special case: number is odd\n    if (n === 1) {\n        return\
    \ false;\n    }\n    // Non-deterministic algorithm: test only odd factors\n \
    \   let d = fast_prime_table[n];\n    for (let k = n - 1; k >= 2; k--) {\n   \
    \     // Test for divisibility by current number\n        if (d % k === 0) {\n\
    \            return false;\n        }\n        // Test for divisibility by next\
    \ smaller number\n        d = fast_prime_table[k];\n    }\n    return true;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmptdedmhjb.ts(33,13): error TS2304: Cannot find name
    ''fast_prime_table''.

    ../../../../../tmp/tmptdedmhjb.ts(40,13): error TS2304: Cannot find name ''fast_prime_table''.

    '
  timestamp: 1659977864
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n    // return n==1 || (n==3 && !is_prime(n-5)) && (n==5 && !is_prime(n-7))\n\
    \    // return n==1 || (n==2 && is_prime(n-2)) || (n==3 && is_prime(n-3))\n  \
    \  // return n%2==0 && n%3==0 && !is_prime(n-4) && !is_prime(n-5)\n    // return\
    \ (n%2==0 || n%3==0)\n    if (n%2==0 || n%3==0) {\n        return false;\n   \
    \ } else {\n        for (let i=5; i*i<=n; i++) {\n            if (n%i==0 || n%(i+1)==0)\n\
    \                return false;\n        }\n        return true;\n    }\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpt6vgmmvx.js:41:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpt6vgmmvx.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977865
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n    const maxIv = Math.floor(n ** 0.5);\n    for (let i = 1; i <\
    \ maxIv; i++) {\n        const isPrime = n % i === 0;\n        if (isPrime) {\n\
    \            return true;\n        }\n    }\n\n    return false;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpg0hnv3df.js:29:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpg0hnv3df.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977865
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n    if (n <= 1) return false;\n    if (n === 2) return true;\n\n\
    \    // TODO: Use Sieve of Eratosthenes\n    for (let i = 2; i < Math.sqrt(n);\
    \ i++) {\n        if (n % i === 0) return false;\n    }\n\n    return true;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp389ge31m.js:36:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp389ge31m.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977865
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n  let max_exponent: number = 1000000007;\n  let max_dividend: number\
    \ = Math.pow(max_exponent, n);\n  let i: number = 1;\n  let d: number = 1;\n \
    \ let s: number = 0;\n\n  while (i <= max_exponent) {\n    d = Math.floor(Math.pow(n,\
    \ i) / max_dividend);\n    s = Math.pow(d, i);\n\n    if (n % d == 0) {\n    \
    \  s = 1;\n      break;\n    }\n\n    i++;\n  }\n\n  return s == 1;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpufa7bnt7.js:36:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpufa7bnt7.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977865
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n    // 0 is not prime\n    if (n < 2) return false;\n\n    // 1 is\
    \ not prime\n    if (n === 2) return false;\n\n    // 2 is prime\n    if (n ===\
    \ 3) return true;\n\n    // See if there's a factor by which to test.\n    //\
    \ If none, it's not prime.\n    const factors: number[] = [];\n    for (let i\
    \ = 2; i <= Math.sqrt(n); i++) {\n        if (n % i === 0) {\n            factors.push(i);\n\
    \        }\n    }\n\n    return factors.length < 2;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_prime;\n  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp85fw25d9.js:39:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp85fw25d9.js:53:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977865
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n\tif (n < 2 || n % 2 == 0 || n % 3 == 0) {\n\t\treturn false;\n\t\
    }\n\n\tlet i = 5; // Prime number\n\tlet p = Math.sqrt(n);\n\tlet t;\n\n\twhile\
    \ (i <= p) {\n\t\tt = (n % i == 0) && (i % 2 == 0 || i % 3 == 0);\n\t\tif (t)\
    \ {\n\t\t\treturn false; // number is composite\n\t\t}\n\t\ti += i;\n\t}\n\treturn\
    \ true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmppucdrknj.js:45:12)\n    at\
    \ Object.<anonymous> (/tmp/tmppucdrknj.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977865
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n  // Make sure n has a positive sign. \n  if (n < 0) return false;\n\
    \  // Return true if n is prime. \n  // NOTE: n is assumed to be positive and\
    \ is greater than 1.\n  if (n === 1) return true;\n  // Initialize n to its square\
    \ root (n approaches 1 or sqrt(n) rapidly). \n  // This makes the following 'for'\
    \ loop go O(n) instead of O(n2).\n  let x = Math.sqrt(n);\n  // Start our sieve\
    \ loop. \n  for (let i = 2; i <= x; i++) \n    if (n % i === 0) return false;\n\
    \  return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpxzzdffnm.js:42:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpxzzdffnm.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977865
- exit_code: 2
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n    // 1. If n is less than 2 or is NaN, return false\n    if (n\
    \ < 2 || isNaN(n)) {\n        return false;\n    }\n    // 2. If n \u2265 2 or\
    \ is +Infinity or -Infinity, return true\n    if (n >= 2) {\n        return true;\n\
    \    }\n    // 3. If n \u2264 1 or is \u22121 or is not an integer, return false\n\
    \    if (n < 1 || n % 1 !== 0 || n == Math.floor(n)) {\n        return false;\n\
    \    }\n    // 4. If n is greater than the Mersenne number, return true\n    if\
    \ (n > Math.sqrt(n)) {\n        return true;\n    }\n    // 5. If n is a composite\
    \ number, return true\n    if (n === 1) {\n        return true;\n    }\n    //\
    \ 6. If n is equal 2, return true\n    if (n === 2) {\n        return true;\n\
    \    }\n    // 7. If n is an integer with only 2 bits, return true\n    if (n\
    \ % 2 == 0) {\n        return n == 2;\n    }\n    // 8. If n is an integer with\
    \ only 1 bit and 1 \u2260 0, return false\n    if (n % 1 == 0) {\n        return\
    \ false;\n    }\n    // 9. Let A be the smallest positive integer such that 2^k\
    \ \u2264 n \u2264 2^A and 2^k \u2264 2n\u22121 \u2264 n\u2212A \u2264 2^n. Let\
    \ Fn be the lucky number whose prime factorization is n\u2212A. Then, given an\
    \ odd number P and an even number Q, which of the following is true?\n    if (n\
    \ % 3 == 0 && !(n % 5 == 0 && n % 7 == 0)) {\n        return true;\n    }\n  \
    \  // 10. If P is less than Q, then P is even and Q is odd.\n    if (p < q) {\n\
    \        return true;\n    }\n    // 11. If P is greater than Q, then P is odd\
    \ and Q is even.\n    if (p > q) {\n        return false;\n    }\n    // 12. Let\
    \ a = 3n + 1. If no remainder is found such that a = k, then a = 3k + 1.\n   \
    \ var a = 3 * (n + 1) - 2;\n    // 13. Let b = n \u2212 1 \xD7 a. Let c = 0. Let\
    \ d = 2. While b is greater than or equal to 1,\n    while (b >= 1) {\n      \
    \  c = Math.floor((b - a) / 2);\n        if (n % a == 0) {\n            // Not\
    \ divisible by any smaller prime factor\n            if (c % 2 === 0) {\n    \
    \            return false;\n            }\n        }\n        a = c;\n       \
    \ b = c - (n % a) - 1;\n    }\n    // 14. If a = 1 \xD7 2 \xD7 3 \xD7 ... \xD7\
    \ n\u22121, and k = 2 \xD7 n\uFFFD\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = is_prime;\n\
    \  assert.deepEqual(candidate(6),false);\n  assert.deepEqual(candidate(101),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(13441),true);\n\
    \  assert.deepEqual(candidate(61),true);\n  assert.deepEqual(candidate(4),false);\n\
    \  assert.deepEqual(candidate(1),false);\n  assert.deepEqual(candidate(5),true);\n\
    \  assert.deepEqual(candidate(11),true);\n  assert.deepEqual(candidate(17),true);\n\
    \  assert.deepEqual(candidate(85),false);\n  assert.deepEqual(candidate(77),false);\n\
    \  assert.deepEqual(candidate(255379),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp_42kwud7.ts(97,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659977865
- exit_code: 2
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n  if (n < 2) {\n    return false;\n  }\n  if (n !== Math.round(n)\
    \ || n <= 1) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n \
    \ }\n  // Test if n is greater than the half of the largest prime factor of (2\
    \ ^ n) - 1.\n  const limit = BigInt(2) ** (BigInt(n) - BigInt(1)) - 1;\n  for\
    \ (let i = 2; i <= limit; i++) {\n    if (n % i === 0) {\n      return false;\n\
    \    }\n  }\n  return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpij7rplqu.ts(27,17): error TS2304: Cannot find name
    ''BigInt''.

    ../../../../../tmp/tmpij7rplqu.ts(27,31): error TS2304: Cannot find name ''BigInt''.

    ../../../../../tmp/tmpij7rplqu.ts(27,43): error TS2304: Cannot find name ''BigInt''.

    '
  timestamp: 1659977865
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n    if (n < 2) {\n        return false;\n    }\n    var sqrtMinus1\
    \ = Math.floor(Math.sqrt(n));\n    for (var i = 0; i < sqrtMinus1; ++i) {\n  \
    \      if (n % i === 0) {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmplr9ze97y.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmplr9ze97y.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977865
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n    var i: number;\n    for (i = 2; i <= Math.sqrt(n); i++) {\n \
    \       if (n % i === 0) {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpe7z7wa0z.js:34:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpe7z7wa0z.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977865
- exit_code: 1
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n  // If the number is evenly divisible by any number less than 2,\
    \ it is NOT a prime\n  if (n % 2 === 0 && (n % 4 !== 0 || n % 8 !== 0 || n % 16\
    \ !== 0)) {\n    return false;\n  }\n  // Check all the numbers between 2 to n\
    \ \u2212 1, inclusive\n  for (let m = 2; m <= n; m++) {\n    // If n is divisible\
    \ by m then n is definitely NOT prime\n    if (n % m === 0) {\n      return false;\n\
    \    }\n  }\n  // If we got here, all numbers were tried\n  return true;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpzutc8ljm.js:35:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpzutc8ljm.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659977865
- exit_code: 2
  program: "//Return true if a given number is prime, and false otherwise.\n// >>>\
    \ is_prime(6)\n// false\n// >>> is_prime(101)\n// true\n// >>> is_prime(11)\n\
    // true\n// >>> is_prime(13441)\n// true\n// >>> is_prime(61)\n// true\n// >>>\
    \ is_prime(4)\n// false\n// >>> is_prime(1)\n// false\nfunction is_prime(n: number):\
    \ boolean {\n  let prime_numbers = [\n    3,\n    7,\n    11,\n    13,\n    17,\n\
    \    19,\n    23,\n    29,\n    31,\n    37,\n    41,\n    43,\n    47,\n    59,\n\
    \    61,\n    67,\n    71,\n    73,\n    79,\n    83,\n    89,\n    97,\n    101,\n\
    \    103,\n    107,\n    109,\n    113,\n    127,\n    131,\n    137,\n    139,\n\
    \    143,\n    149,\n    151,\n    157,\n    163,\n    167,\n    173,\n    179,\n\
    \    181,\n    191,\n    193,\n    197,\n    199,\n    211,\n    223,\n    227,\n\
    \    229,\n    233,\n    239,\n    241,\n    251,\n    257,\n    263,\n    269,\n\
    \    271,\n    277,\n    281,\n    283,\n    293,\n    307,\n    311,\n    313,\n\
    \    317,\n    331,\n    337,\n    347,\n    349,\n    353,\n    359,\n    367,\n\
    \    373,\n    379,\n    383,\n    389,\n    397,\n    401,\n    409,\n    419,\n\
    \    421,\n    431,\n    433,\n    439,\n    443,\n    449,\n    457,\n    461,\n\
    \    463,\n    467,\n    479,\n    487,\n    491,\n    499,\n    503,\n    509,\n\
    \    521,\n    523,\n    541,\n    547,\n    553,\n    561,\n    571,\n    577,\n\
    \    587,\n    593,\n    599,\n    601,\n    607,\n    613,\n    617,\n    619,\n\
    \    631,\n    641,\n    643,\n    647,\n    653,\n    659,\n    661,\n    673,\n\
    \    677,\n    683,\n    691,\n    701,\n    709,\n    719,\n    727,\n    733,\n\
    \    739,\n    743,\n    \ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
    \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
    \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
    \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
    \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
    \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpswzt7yzc.ts(148,9): error TS1005: '','' expected.

    ../../../../../tmp/tmpswzt7yzc.ts(169,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659977865
