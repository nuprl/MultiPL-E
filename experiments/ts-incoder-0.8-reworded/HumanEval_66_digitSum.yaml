name: HumanEval_66_digitSum
language: ts
prompt: "//Task\n// Write a function that takes a string as input and returns the\
  \ sum of the upper characters only'\n// ASCII codes.\n// Examples:\n// >>> digitSum(\"\
  \")\n// 0\n// >>> digitSum(\"abAB\")\n// 131\n// >>> digitSum(\"abcCd\")\n// 67\n\
  // >>> digitSum(\"helloE\")\n// 69\n// >>> digitSum(\"woArBld\")\n// 131\n// >>>\
  \ digitSum(\"aAaaaXa\")\n// 153\nfunction digitSum(s: string): number {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = digitSum;\n  assert.deepEqual(candidate(\"\"),0);\n\
  \  assert.deepEqual(candidate(\"abAB\"),131);\n  assert.deepEqual(candidate(\"abcCd\"\
  ),67);\n  assert.deepEqual(candidate(\"helloE\"),69);\n  assert.deepEqual(candidate(\"\
  woArBld\"),131);\n  assert.deepEqual(candidate(\"aAaaaXa\"),153);\n  assert.deepEqual(candidate(\"\
  \ How are yOu?\"),151);\n  assert.deepEqual(candidate(\"You arE Very Smart\"),327);\n\
  }\n\ntest();"
completions: ["  let sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const\
    \ code = s.charCodeAt(i);\n    sum += code - '0';\n  }\n  return sum;\n}\n", " \
    \ const res = 0;\n  for (let i = s.length - 1; i >= 0; i--) {\n    const c = s.charCodeAt(i);\n\
    \    if (c >= '0' && c <= '9') {\n      res += (c - '0');\n    }\n  }\n  return\
    \ res;\n}\n", "  if (s.length === 0) {\n    return 0;\n  }\n\n  const sum = 0;\n\
    \  for (let i = 0; i < s.length; i += 1) {\n    if (s[i] >= 'a' && s[i] <= 'z')\
    \ {\n      sum += s[i] - 'a' + 1;\n    } else {\n      sum += s[i];\n    }\n \
    \ }\n\n  return sum;\n}\n", "  if (s.length === 0) {\n    return 0;\n  }\n  const\
    \ str = s.toUpperCase();\n  const re = new RegExp(`^(.)(.)(.)(.)(.)(.*)$`);\n\
    \  const match = re.exec(str);\n  const res = 0;\n  let i = 0;\n  while (i < match.length\
    \ - 1) {\n    res += match[i + 4] - '0';\n    i += 4;\n  }\n  return res + match[i\
    \ + 4] == 'A' ? res - 9 : res;\n}\n", "  return s.split('').map(function (c: string)\
    \ {\n    return c.charCodeAt(0) - 'A'.charCodeAt(0);\n  }).reduce(function (a,\
    \ b) {\n    return a + b;\n  }, 0);\n}\n", "  const result = 0;\n  const charsStr\
    \ = s.split('');\n  charsStr.forEach(char => { result += getCode(char)});\n  return\
    \ result;\n}", "  const chars = s.split('');\n  let sum = 0;\n  for (let i = 0,\
    \ len = chars.length; i < len; i++) {\n    if (chars[i].charCodeAt(0) > 96 &&\
    \ chars[i].charCodeAt(0) < 123) {\n      sum += chars[i].charCodeAt(0) - 48;\n\
    \    } else {\n      sum += chars[i].charCodeAt(0);\n    }\n  }\n  return sum;\n\
    }\n", "  const sum = 0;\n  const list = s.split('');\n  for (const char of list)\
    \ {\n    if (char >= 'a' && char <= 'z') {\n      sum += char - 'a' + 10;\n  \
    \  } else {\n      sum += char;\n    }\n  }\n  return sum;\n}\n", "  const result\
    \ = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charCodeAt(i);\n\
    \    result += char >= 65 && char <= 90 ? char - 65 : char - 97;\n  }\n  return\
    \ result;\n}\n", "    let sum = 0;\n    let code = 0;\n\n    for (let i = 0; i\
    \ < s.length; i++) {\n        if (code.match(/[A-Z]/)) {\n            sum += code.toString(10).match(/[A-Z]+/)[0].length;\n\
    \        }\n        code = s.charCodeAt(i);\n    }\n\n    return sum;\n}\n", " \
    \ const isLowerCase = s => s.length <= 1;\n  const letters = Array.from(s).filter(Boolean).map(c\
    \ => c.toLowerCase());\n  const result = 0;\n  for (let i = 0; i < letters.length;\
    \ i++) {\n    const letterCode = letters[i].charCodeAt(0);\n    const index =\
    \ letterCode - 'a'.charCodeAt(0);\n    result += index % 26;\n  }\n  return isLowerCase(s)\n\
    \    ? result - 32\n    : result;\n}\n", "    let result = \"\";\n    for (let\
    \ i = 0; i < s.length; i++) {\n        const char = s.charAt(i);\n        const\
    \ code = char.charCodeAt(0);\n        if (code > 47 && code < 58) {\n        \
    \    result += char;\n        }\n    }\n    return +result;\n}\n</code>\n<|/ a\
    \ |>\n<| a dscore=0 |>\n<code>\npublic static int sumDigits(String s) {\n    int\
    \ sum = 0;\n    for (char c : s.toCharArray()) {\n        if ((int) c >= 48 &&\
    \ (int) c <= 57) {\n            sum += (int) c;\n        }\n    }\n    return\
    \ sum;\n}\n</code>\n<|/ a tags=math,algorithm,java |>\n<| a dscore=0 tags=math,algorithm,java\
    \ |>\n<code>\nString input = \"helloE\";\nint sum = 0;\nfor (int i = 0; i < input.length();\
    \ i++) {\n    if (input.charAt(i) >= 'a' && input.charAt(i) <= 'z') {\n      \
    \  int value = (int) input.charAt(i) - 'a' + 10;\n        sum += value;\n    }\n\
    }\nSystem.out.println(sum);\n</code>\n<|/ a |>\n<| a dscore=0 |>\n<code>\npublic\
    \ static int digitSum(String s) {\n    int sum = 0;\n    for (int i = 0; i < s.length();\
    \ i++) {\n        if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z') {\n          \
    \  sum += s.charAt(i) - 'a' + 10;\n        }\n    }\n    return sum;\n}\n</code>\n\
    <|/ a tags=math,algorithm,java |>\n<| a |>\n<code>\npublic static long sum(String\
    \ s) {\n    long sum = 0;\n    for (int i = 0; i < s.length(); i++) {\n      \
    \  sum = sum + ((int) s.charAt(i) - '0' + 10);\n    }\n    return sum;\n}\n</code>\n\
    <|/ a dscore=0 tags=math,algorithm,java |>\n<| a dscore=0 |>\n<code>\npublic static\
    \ void main(String[] args) {\n        String str=\"Hello5\";\n        char c;\n\
    \        for(int i=0;i<str.length();i++)\n        {\n            c=str.charAt(i);\n\
    \            int num=c-'0';\n            System.out.println(num);\n          \
    \  sum+=num;\n        }\n        System.out.println(sum);\n    }\n</code>\n<|/\
    \ a tags=math,algorithm,java |>\n<| c |>\nThis may work, but it's an extremely\
    \ unreliable solution and is very bad practice. `String` doesn't define `length()`\
    \ so `str.lenght()` is going to throw a compiler error. `String` doesn't define\
    \ `charAt()` so `str.charAt(i)` is going to throw a compiler error. `String` doesn't\
    \ define `sum", "  return s.split('').reduce((sum, char) => {\n    return sum\
    \ + char.charCodeAt(0) - 'A'.charCodeAt(0);\n  }, 0);\n}\n", "    let total =\
    \ 0;\n    for (let i = 0; i < (s.length); i++) {\n        const charCode = s.charCodeAt(i);\n\
    \        if (charCode >= \"0\" && charCode <= \"9\") {\n            total += charCode\
    \ - \"0\";\n        } else {\n            total += charCode - \"a\".charCodeAt(0);\n\
    \        }\n    }\n    return total;\n}\n", "  let result = 0;\n  for (let i =\
    \ 0; i < s.length; i++) {\n    if (s[i] >= 'A' && s[i] <= 'Z') {\n      result\
    \ += s[i] - 'A' + 10;\n    } else {\n      result += s[i];\n    }\n  }\n  return\
    \ result;\n}\n", "  var sum = 0;\n  var i = 0;\n  while (i < s.length) {\n   \
    \ if (s[i].charCodeAt(0) >= 48 && s[i].charCodeAt(0) <= 57) {\n      sum += s[i].charCodeAt(0);\n\
    \    }\n    i++;\n  }\n  return sum;\n}\n", "  let sum = 0\n  for (let char of\
    \ s) {\n    sum += char.charCodeAt(0) & 47\n  }\n  return sum\n}\n", "  let result\
    \ = 0\n  s.split('').map((c) => {\n    result += (c.charCodeAt(0) - 'a'.charCodeAt(0))\
    \ * (c.charCodeAt(0) - 'a'.charCodeAt(0))\n  })\n  return result\n}\n", "  let\
    \ sum = 0;\n  for (let c of s) {\n    if (c.toUpperCase() === c) sum += c.charCodeAt();\n\
    \  }\n  return sum;\n}\n", "  let total = 0;\n  for (let i = 0; i < s.length;\
    \ i++) {\n    total += s.charCodeAt(i) - 64;\n  }\n  return total;\n}\n", "  const\
    \ chars = s.replace(/[^\\d]/g, '').toUpperCase().split('');\n  let sum = 0;\n\
    \  for (let i = 0, len = chars.length; i < len; i++) {\n    const code = chars[i].charCodeAt(0);\n\
    \    sum += code >= 65 ? code - 65 + 10 : code - 97 + 10;\n  }\n  return sum;\n\
    }", "  if (s.length === 0) {\n    return 0;\n  }\n\n  let sum = 0;\n  for (let\
    \ i = 0; i < s.length; i++) {\n    const charCode = s.charCodeAt(i);\n    if (charCode\
    \ >= 48 && charCode <= 57) {\n      sum += charCode - 48;\n    } else {\n    \
    \  sum += charCode;\n    }\n  }\n\n  return sum;\n}\n", "  return s.split('').filter(function\
    \ (x) {\n    return x >= 'a' && x <= 'z';\n  }).reduce(function (acc, x) {\n \
    \   return acc + x.charCodeAt(0) - 64;\n  }, 0);\n}\n", "  let sum = 0;\n  for\
    \ (let i = 0; i < s.length; i++) {\n    const digit = s.charCodeAt(i) - 64;\n\
    \    sum += digit;\n  }\n  return sum;\n}\n", "  if (s.length === 0) {\n    return\
    \ 0;\n  }\n  let sum = 0;\n  for (let c of s) {\n    if (c.toUpperCase() !== c.toLowerCase())\
    \ {\n      sum -= c.charCodeAt(0);\n    }\n  }\n  return sum;\n}\n", "  return\
    \ s.split('').map(c => c.charCodeAt(0) - 64).reduce((acc, x) => acc + x, 0);\n\
    }", "  return s.split('').map(c => c.charCodeAt(0) - 64).reduce((prev, curr) =>\
    \ prev + curr);\n}\n", "  let sum = 0\n  for (let c of s) {\n    const charcode\
    \ = c.charCodeAt(0)\n    if (charcode > 96 && charcode < 123) sum += charcode\
    \ - 64\n    else if (charcode > 64 && charcode < 91) sum += charcode - 96\n  \
    \  else sum += charcode\n  }\n  return sum\n}", "    let sum = 0\n    for (let\
    \ i = 0; i < s.length; i++) {\n        sum += Number(s.charAt(i)) >= 64 ? s.charCodeAt(i)\
    \ - 64 : s.charCodeAt(i)\n    }\n    return sum\n}\n", "  let result = 0;\n  for\
    \ (const char of s) {\n    if (char >= 'A' && char <= 'Z') {\n      result +=\
    \ char - 'A' + 10;\n    }\n  }\n  return result;\n}\n", "  let sum = 0;\n  for\
    \ (let i = 0; i < s.length; i++) {\n    sum += getUpperCharASCII(s[i]);\n  }\n\
    \  return sum;\n}\n", "  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n\
    \    const code = s.charCodeAt(i);\n    if (code < 65 || code > 90) break;\n \
    \   else sum += code - 65;\n  }\n  return sum;\n}\n", "    let result = 0\n  \
    \  for (let c of s) {\n        let code = c.charCodeAt(0)\n        if (code <\
    \ '0' || code > '9') {\n            continue\n        }\n        result += code\
    \ - '0'\n    }\n    return result\n}\n", "  if (s.length === 0) {\n    return\
    \ 0\n  }\n  const charCodes = s.split('')\n  return charCodes.reduce((acc, c)\
    \ => ((acc += c >= 'A' && c <= 'Z') ? acc + c.charCodeAt(0) - 'A'.charCodeAt(0)\
    \ : acc), 0)\n}\n", "  const sum = 0;\n  for (let i = 0; i < s.length; i++) {\n\
    \    const c = s[i];\n    if (isUpperCase(c)) {\n      sum += c.charCodeAt(0)\
    \ - 32;\n    } else {\n      sum += c.charCodeAt(0);\n    }\n  }\n  return sum;\n\
    }\n", "  const result = s.split('').map(char => char.charCodeAt(0) - 64).reduce((acc,\
    \ cur) => acc + cur);\n  return result >= 0 ? result : 0;\n}\n", "\tlet sum =\
    \ 0;\n\tfor (let i = 0; i < s.length; i++) {\n\t\tsum += toDigit(s[i]);\n\t}\n\
    \treturn sum;\n}\n", "  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n\
    \    const char = s.charAt(i);\n    if (char >= 'A' && char <= 'Z') {\n      sum\
    \ += char.charCodeAt(0) - 65;\n    }\n  }\n  return sum;\n}\n", "  if (s.length\
    \ === 0) {\n    return 0;\n  }\n\n  let digits = '';\n  for (let i = 0; i < s.length;\
    \ i++) {\n    const char = s.charAt(i);\n    const upperCharCode = char.charCodeAt(0);\n\
    \    if (upperCharCode >= 48 && upperCharCode <= 57) {\n      digits += char;\n\
    \    }\n  }\n\n  return Number(digits);\n}\n", "  return s.split('').filter(d\
    \ => d.toUpperCase() !== d.toLowerCase()).reduce((prev, cur) => (prev += cur),\
    \ 0);\n}\n", "  const n = s.split('')\n  let sum = 0\n  for(let i = 0; i < n.length;\
    \ i++) {\n    sum += (n[i].charCodeAt(0) - 'A'.charCodeAt(0))\n  }\n  return sum\n\
    }\n", "  return digitSum_0(s);\n}", "    let total = 0;\n    for (let i = 0; i\
    \ < s.length; i++) {\n        const ascii = s.charCodeAt(i); // Ascii code of\
    \ the character to sum.\n        // ASCII codes start at 48.\n        // The sum\
    \ will ignore anything above that.\n        // Examples: abAB => 131\n       \
    \ //             abcCd => 67\n        //             helloE => 69\n        //\
    \             woArBld => 131\n        //             aAaaaXa => 153\n        if\
    \ (ascii >= 48 && ascii <= 57) {\n            total += ascii - 48;\n        }\
    \ else {\n            console.log(`Not a valid char: ${s[i]} at index ${i}`);\n\
    \        }\n    }\n    return total;\n}", "  // TODO: Your code here\n  return\
    \ 0\n}\n", "  return s.match(/[A-Z]+/).reduce((acc, str) => acc + str.length,\
    \ 0);\n}\n", "  if (s.length === 0) return 0\n  const digits = s.replace(/^[0-9]*/g,\
    \ '') // remove all digits at beginning\n  const sum = digits.reduce((a, b) =>\
    \ a + b.charCodeAt(0) - '0'.charCodeAt(0), 0)\n  return sum\n}", "\tlet sum =\
    \ 0;\n\tfor (let i = 0; i < s.length; i += 1) {\n\t\tsum += s.charCodeAt(i) -\
    \ 64;\n\t}\n\treturn sum;\n}\n", "  const sum = 0\n  for (let i = 0; i < s.length;\
    \ i++) {\n    const charCode = s.charCodeAt(i)\n    if (charCode >= 'A'.charCodeAt()\
    \ && charCode <= 'Z'.charCodeAt() && charCode >= 'a'.charCodeAt() && charCode\
    \ <= 'z'.charCodeAt() + 1) {\n      sum += charCode - 'A'.charCodeAt(0)\n    }\n\
    \  }\n  return sum\n}\n", "  let sum = 0;\n  for (let i = 0; i < s.length; i++)\
    \ {\n    const code = s.charCodeAt(i);\n    if (code >= 'A'.charCodeAt() && code\
    \ <= 'Z'.charCodeAt()) {\n      sum += code - 'A'.charCodeAt();\n    } else {\n\
    \      sum += code - 'a'.charCodeAt();\n    }\n  }\n  return sum;\n}\n", "  s\
    \ += ''; // ensure string is a string\n  let sum = 0;\n\n  for (let i = 0; i <\
    \ s.length; i++) {\n    if (s.charCodeAt(i) > 64 && s.charCodeAt(i) < 91) {\n\
    \      sum += s.charCodeAt(i) - 64;\n    }\n  }\n\n  return sum;\n}\n", "  let\
    \ sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s.charAt(i) >=\
    \ 'A' && s.charAt(i) <= 'Z') {\n      sum += (s.charCodeAt(i) - 'A' + 1);\n  \
    \  } else {\n      sum += s.charCodeAt(i);\n    }\n  }\n  return sum;\n}\n", " \
    \ return s.split('').map(c => c.charCodeAt(0)).filter(c => c >= 48 && c <= 57).reduce((a,b)\
    \ => a + b);\n}", "    let result = 0;\n    for (let i = 0; i < s.length; i +=\
    \ 1) {\n        const char = s.charAt(i);\n        if (char.match(/[a-z]/)) {\n\
    \            const value = char.charCodeAt(0) - 96;\n            result += value;\n\
    \        }\n    }\n    return result;\n}\n", "  let result = 0;\n  for (let i\
    \ = s.length - 1; i >= 0; i--) {\n    result += s.charCodeAt(i) - 64;\n  }\n \
    \ return result;\n}", "  // ASCII codes are counted from 0 so ignore any non-digit.\n\
    \  // A non-digit character will cause the sum to add 0 so ignore it.\n  // Add\
    \ 0 to the sum and continue adding digits to the sum.\n  for (let i = 0; i < s.length;\
    \ ++i) {\n    const code = s.charCodeAt(i)\n    // A digit character will cause\
    \ the sum to add its ASCII code value.\n    if (code >= 48 && code <= 57) {\n\
    \      s += code\n      continue\n    }\n    // A non-digit character will cause\
    \ the sum to add 0.\n    s += 0\n  }\n  return s\n}\n", "    return s.split('').reduce((acc,\
    \ c) => acc + (c.charCodeAt(0) - 'A'.charCodeAt(0)) + 0, 0);\n}\n", "  s += \"\
    \";\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    const n = s.charCodeAt(i);\n\
    \    if (n >= 48 && n <= 57) {\n      sum += n;\n    }\n  }\n  return sum;\n}\n",
  "  let sArr = s.split(\"\");\n  let sum = 0;\n  for (let i = 0; i < sArr.length;\
    \ i++) {\n    if (/[A-Z]/.test(sArr[i])) sum += sArr[i].charCodeAt(0) - \"A\"\
    .charCodeAt(0);\n  }\n  return sum;\n}\n", "  const sum = 0\n  for (let i = 0;\
    \ i < s.length; i++) {\n    if (s[i].match(/[A-Z]/)) {\n      sum += s[i].charCodeAt(0)\
    \ - 'A'.charCodeAt(0)\n    }\n  }\n  return sum\n}\n", "  return s.split(\"\"\
    ).reduce((acc, char) => acc + Math.max(...char.match(/[A-Z]/igu)), 0);\n}\n",
  "  if (!s) {\n    return 0;\n  }\n  const chars = s.replace(/\\W/g, \"\").split(\"\
    \");\n  return chars.reduce((acc, item) => (item.charCodeAt(0) + acc), 0);\n}\n",
  "  let total = 0;\n  for (let i = 0; i < s.length; i++) {\n    const val = s.charCodeAt(i);\n\
    \    if (val > 48 && val < 57) {\n      total += val - 48;\n    }\n  }\n  return\
    \ total;\n}\n", "  let total = 0;\n  for (let i = 0; i < s.length; i++) {\n  \
    \  const letter = s[i];\n    if (letter >= 'a' && letter <= 'z') {\n      total\
    \ += letter - 'a' + 10;\n    } else {\n      total += letter - '0';\n    }\n \
    \ }\n  return total;\n}\n", "  // Return the sum of the digits of its input string.\n\
    \  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].match(/[A-Z]/g))\
    \ {\n      sum += s[i].charCodeAt(0) - 64;\n    }\n  }\n  return sum;\n}\n", " \
    \   const str = s.toLowerCase();\n    const sum = 0;\n    for (let i = 0; i <\
    \ str.length; i++) {\n        sum += str.charCodeAt(i);\n    }\n    return sum;\n\
    }\n", "  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] >=\
    \ 'a' && s[i] <= 'z') {\n      sum += (s[i] - 'a') + 10;\n    } else if (s[i]\
    \ >= 'A' && s[i] <= 'Z') {\n      sum += (s[i] - 'A') + 10;\n    } else {\n  \
    \    sum += s[i].charCodeAt(0);\n    }\n  }\n  return sum;\n}\n", "  let count\
    \ = 0;\n  for (let i = 0; i < s.length; i++) {\n    count += s.charCodeAt(i) -\
    \ 96;\n  }\n  return count;\n}\n", "  return s.split('').map(d => d.charCodeAt(0)\
    \ - 64).reduce((sum, num) => sum + num, 0);\n}\n", "  return s.split('').map(e\
    \ => e.charCodeAt(0) - 'A'.charCodeAt(0)).reduce((acc, curr) => acc + curr, 0);\n\
    }\n", "  let sum = 0;\n  for (let i = s.length - 1; i >= 0; --i) {\n    if (s[i]\
    \ >= 'A' && s[i] <= 'Z') {\n      sum += (s[i] - 'A') + 1;\n    }\n  }\n  return\
    \ sum;\n}\n", "  let total = 0;\n  for (let i = 0; i < s.length; i++) {\n    const\
    \ c = s.charAt(i);\n    if (c >= 'a' && c <= 'z') {\n      total += c - 'a' +\
    \ 10;\n    } else {\n      total += c.charCodeAt(0) - '0';\n    }\n  }\n  return\
    \ total;\n}\n", "  const sum: number = 0;\n  for (let i = 0; i <= s.length; i\
    \ += 1) {\n    const c: number = s.charCodeAt(i) - 'A'.charCodeAt(0);\n    if\
    \ (c >= 0) {\n      sum += c;\n    }\n  }\n  return sum;\n}\n", "  return Number(s)\n\
    \    .toString(10)\n    .toUpperCase()\n    .match(/[A-Z]+/g)\n    .reduce((sum,\
    \ s) => sum += digitValue(s), 0);\n}\n", "  const result: number[] = [];\n  let\
    \ prev = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    result.push(digitSum(prev,\
    \ s[i]));\n    prev = s[i];\n  }\n  return result.length ? Math.max(...result)\
    \ : 0;\n}\n", "  let res = 0;\n  for (let i = 1; i < s.length; i++) {\n    const\
    \ c = s.charCodeAt(i);\n    if (c >= 64 && c <= 91) res += c - 64;\n  }\n  return\
    \ res;\n}\n", "  let result = 0;\n  for (let i = 0; i < s.length; i++) {\n   \
    \ if (s.charCodeAt(i) > 96 && s.charCodeAt(i) < 123) {\n      result += s.charCodeAt(i);\n\
    \    }\n  }\n  return result;\n}\n", "  let result = 0;\n  let length = s.length;\n\
    \  for (let i = 0; i < length; i++) {\n    const char = s[i];\n    const code\
    \ = char.charCodeAt(0);\n    if (code >= 'A'.charCodeAt() && code <= 'Z'.charCodeAt())\
    \ {\n      result += code - 'A'.charCodeAt() + 10;\n    } else {\n      result\
    \ += code - '0'.charCodeAt() + 10;\n    }\n  }\n  return result;\n}\n", "  //\
    \ Convert string to array\n  const arr = s.toLowerCase().split('');\n  let total\
    \ = 0;\n  for (let i = 0; i < arr.length; i++) {\n    const value = arr[i];\n\
    \    // Get current ASCII code for the character\n    const asciiCode = value.charCodeAt(0);\n\
    \    // Get total ASCII code for the current character\n    const sum = asciiCode\
    \ + sum;\n    // Update total sum for current ASCII code\n    total = sum;\n \
    \ }\n  return total;\n}\n", "  let total = 0;\n  for (let c of s) {\n    if (c\
    \ >= 'A' && c <= 'Z') {\n      total += c - 'A' + 1;\n    } else {\n      total\
    \ += c >= 'a' && c <= 'z' ? c - 'a' + 1 : c >= 'A' && c <= 'Z' ? c - 'A' + 1 :\
    \ 0;\n    }\n  }\n  return total;\n}\n", "  let num = 0;\n  for(let i = 0; i <\
    \ s.length; i++){\n    num += getUppperCharCodeValue(s.charCodeAt(i));\n  }\n\
    \  return num;\n}\n", "  const re = /[A-Z]/g;\n  const sum = 0;\n\n  let match;\n\
    \n  while (match = re.exec(s)) {\n    sum += match[0].length;\n  }\n\n  return\
    \ sum;\n}\n", "\tlet sum = 0;\n\tfor (let i = 0; i < s.length; i++)\n\t\tsum +=\
    \ (s.charCodeAt(i) - '0'.charCodeAt(0)) * (s.charCodeAt(i) - '0'.charCodeAt(0));\n\
    \treturn sum;\n}\n", "    let sum = 0\n    for (let i = 0; i < s.length; i +=\
    \ 1) {\n        const char = s.charCodeAt(i)\n        if (char > 48 && char <\
    \ 58) {\n            sum += char\n        }\n    }\n    return sum\n}\n", "  \
    \  let sum = 0;\n    for (let i = 0; i < s.length; i++) {\n        let c = s.charCodeAt(i);\n\
    \        if (c >= 48 && c <= 57) {\n            sum += c - 48;\n        }\n  \
    \  }\n    return sum;\n}\n", "  let result = 0;\n  for (let char of s) {\n   \
    \ if (char >= '0' && char <= '9') {\n      result += char - '0';\n    }\n  }\n\
    \  return result;\n}\n", "  let len = s.length;\n  let result = s.split('').map((x,\
    \ i) => x > 'A' ? x - 'A' : x - '0').filter(x => x !== '0').length;\n  return\
    \ result > len ? len : result;\n}\n", "  let result = 0\n  let char = ''\n  for\
    \ (let i = 0; i < s.length; i++) {\n    char = s[i]\n    if (char > '9') {\n \
    \     char = (char - '0') // ascii code\n    } else {\n      char = char.toUpperCase()\
    \ // ascii code uppercase\n    }\n    result += char\n  }\n  return result\n}\n",
  "  if (!s) return 0;\n  return s.split('').filter(function (x) {\n    return x.charCodeAt(0)\
    \ > 96;\n  }).join('');\n}\n", "  let sum = 0;\n  for (let char of s) {\n    if\
    \ (char >= 'A' && char <= 'Z') sum += char - 'A' + 'a';\n  }\n  return sum;\n\
    }\n", "  return s.split('').map(char => char.charCodeAt(0) & 0xF).reduce((acc,\
    \ val) => acc + val, 0);\n}\n", "  let len = s.length;\n  let result = s.split('').map((c:\
    \ string, idx: number) => {\n    return c.charCodeAt(0) - 'A'.charCodeAt(0) +\
    \ idx * len;\n  }).reduce(\n    (acc: number, num: number) => acc + num,\n   \
    \ 0\n  );\n  return result;\n}\n", "  let result = 0.0;\n  for (let i = 0; i <\
    \ s.length; ++i) {\n    if (s.charCodeAt(i) > 64 && s.charCodeAt(i) < 91) result\
    \ += s.charCodeAt(i) - 64;\n    else result += s.charCodeAt(i);\n  }\n  return\
    \ result;\n}\n", "    return sum(...s.match(/\\d+/g).map(Number));\n}\n", "  const\
    \ chars = s.split('');\n  const sum = chars.reduce((acc, curr) => {\n    const\
    \ code = curr.charCodeAt(0);\n    const sum = code + acc;\n    return sum > 9\
    \ ? sum : sum;\n  }, 0);\n  return sum;\n}", "  return sumArr(digits(s), x =>\
    \ x > 9 ? x - 'A' + 10 : x - '0');\n}\n", "  let sum = 0;\n  for (let i = 0; i\
    \ < s.length; i++) {\n    sum += s.charCodeAt(i) - 64;\n  }\n  return sum;\n}\n",
  "  // Add all the charcters in the string to get the sum of their ASCII code\n \
    \ let sum = 0;\n  for (let c of s) {\n    sum += c.charCodeAt(0);\n  }\n\n  return\
    \ sum;\n}\n", "  // Sum the ASCII codes of the characters\n  let total = 0;\n\
    \  for (let i = 0; i < s.length; i++) {\n    total += s.charCodeAt(i) - '0';\n\
    \  }\n  return total;\n}\n", "  let codes: number[] = []\n  for (const c of s)\
    \ {\n    const code = c.charCodeAt(0)\n    if (code >= 48 && code <= 57) {\n \
    \     codes.push(code)\n    }\n  }\n  return codes.reduce((a, b) => a + b)\n}\n",
  "  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += toDigit(s[i]);\n\
    \  }\n  return sum;\n}\n", "  // We use the pattern /[^\\d]+/ to find all characters\
    \ that are not numbers (letters)\n  // or digits (\\d). We subtract the sum of\
    \ those from s.charCodeAt(0) to get the sum of the\n  // digits that are not digits.\n\
    \  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    const charCode =\
    \ s.charCodeAt(i);\n    if (charCode > 47 && charCode < 58) {\n      sum += charCode\
    \ - 48;\n    } else {\n      sum += charCode - 55;\n    }\n  }\n  return sum;\n\
    }\n", "  let sum = 0\n  for (let i = 0; i < s.length; i++) {\n    const char =\
    \ s[i]\n    if (char >= '0' && char <= '9') {\n      sum += char - '0'\n    }\n\
    \  }\n  return sum\n}\n", "  let sum = 0;\n  for (let i = 0; i < s.length; i++)\
    \ {\n    const c = s.charCodeAt(i);\n    if (c >= 'A' && c <= 'Z') {\n      sum\
    \ += (c - 'A');\n    } else if (c >= 'a' && c <= 'z') {\n      sum += (c - 'a');\n\
    \    } else {\n      sum += 0;\n    }\n  }\n  return sum;\n}\n", "  return s.reduce((prev,\
    \ curr) => {\n    const { charCode, length } = curr;\n    if (length > 0 && charCode\
    \ >= 'A' && charCode <= 'Z') {\n      prev += charCode - 'A' + 1;\n    }\n\n \
    \   return prev;\n  }, 0);\n}\n", "  return s.split('').map(d => String.fromCharCode(d.charCodeAt(0)\
    \ - 'A'.charCodeAt(0) + 1)).reduce((acc, c) => acc + c, 0);\n}\n", "  const sum\
    \ = 0\n  for (let i = 0; i < s.length; i++) {\n    if (\n      !isDigit(s.charCodeAt(i))\
    \ ||\n      s[i] === \"_\" ||\n      s.charCodeAt(i) < 33 ||\n      s.charCodeAt(i)\
    \ > 126\n    ) {\n      return 0\n    }\n    if (s.charCodeAt(i) < 33) {\n   \
    \   sum += s.charCodeAt(i) - 48\n    } else {\n      sum += s.charCodeAt(i) -\
    \ 55\n    }\n  }\n  return sum\n}\n", "  let sum = 0\n  for (let i = 0; i < s.length;\
    \ ++i) {\n    const c = s.charCodeAt(i)\n    sum += c >= 'A' && c <= 'Z' ? c -\
    \ 'A' : c >= 'a' && c <= 'z' ? c - 'a' + 10 : 0\n  }\n  return sum\n}\n", "  let\
    \ n = 0\n  for (let i = 0; i < s.length; i++) {\n    const str = s.charAt(i)\n\
    \    if (str >= '0' && str <= '9') {\n      n += str - '0'\n    }\n  }\n  return\
    \ n\n}\n", "  // Only change code below this line\n\n  // Change this line\n \
    \ var sum = 0; // initialize sum\n  for (var i = 0; i < s.length; i++) {\n   \
    \ var ascii = s[i]; // get ascii code of current character \n    var sum = 0;\
    \ // reset sum\n    if (ascii > 65 && ascii < 90) // if ascii code is > 'A' &&\
    \ < 'Z'\n      sum++; // add 1 to sum\n    if (ascii > 90 && ascii < 97) // if\
    \ ascii code is > 'a' && < 'z'\n      sum++; // add 1 to sum\n    if (ascii >\
    \ 122 && ascii < 126) // if ascii code is > '1' && < '9'\n      sum++; // add\
    \ 1 to sum\n    sum += ascii; // add ascii code to sum\n  }\n  return sum; //\
    \ add sum of ascii code to sum\n}\n\nconst testCases = [\n  \"\",\n  \"abAB\"\
    ,\n  \"abcCd\",\n  \"helloE\",\n  \"woArBld\",\n  \"aAaaaXa\",\n];\n", "  let\
    \ sum = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const currentChar =\
    \ s[i];\n    if (currentChar >= 'A' && currentChar <= 'Z') {\n      sum += currentChar\
    \ - 'A' + 10;\n    }\n  }\n  return sum;\n}\n", "  let sum = 0;\n  for (let i\
    \ = 0; i < s.length; ++i) {\n    const char = s.charAt(i);\n    if (char.match(/[a-z]/)\
    \ && char.match(/[A-Z]/)) {\n      sum += char.charCodeAt(0) - 48;\n    } else\
    \ {\n      sum += char.charCodeAt(0);\n    }\n  }\n  return sum;\n}\n", "  let\
    \ total = 0;\n  for (let i = 0; i < s.length; i++) {\n    const code = s.charCodeAt(i);\n\
    \    total += code - '0'.charCodeAt(0);\n  }\n  return total;\n}\n", "  s += '';\n\
    \n  let result = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const char\
    \ = s.charAt(i);\n    const code = char.charCodeAt(0);\n    result += code + code\
    \ % 10;\n  }\n\n  return result;\n}\n", "  let sum = 0;\n  for (let i = 0; i <\
    \ s.length; i++) {\n    let code = s.charCodeAt(i);\n    sum += code >= 65 &&\
    \ code <= 90 ? code - 65 : code;\n  }\n  return sum;\n}", "  let result = 1\n\
    \  for (let i = 0; i < s.length; i++) {\n    const value = s.charCodeAt(i)\n \
    \   const max = value + value\n    if (max > 9) {\n      result *= 10\n      result\
    \ += value\n    } else {\n      result *= max\n    }\n  }\n  return result\n}\n",
  "  return _sum(s.split('').map(function(c) {\n    return c.charCodeAt(0) - 'a'.charCodeAt(0);\n\
    \  }));\n}\n", "  if (s.length === 0) {\n    return 0\n  }\n  let result = 0\n\
    \  for (let c of s) {\n    result += c.charCodeAt(0) - 'A'.charCodeAt(0)\n  }\n\
    \  return result\n}\n", "  const sum = 0;\n  for (let i = 0; i < s.length; i +=\
    \ 1) {\n    sum += getCode(s[i]) - 96;\n  }\n  return sum;\n}\n", "  // Remove\
    \ non-digit characters and convert string to array.\n  const arr: Array<number>\
    \ = s.match(/[\\d]+/g).map(i => parseInt(i));\n  return arr.reduce((prev, curr)\
    \ => prev + curr);\n}\n", "  let sum = 0;\n  for (let i = 0; i < s.length; i++)\
    \ {\n    sum += toAscii(s[i]);\n  }\n  return sum;\n}\n", "  if (s.trim() ===\
    \ '') return 0\n  let sum = 0\n  for (let i = s.length - 1; i >= 0; i--) {\n \
    \   const code = s.charCodeAt(i)\n    if (code >= 'A'.charCodeAt(0) && code <=\
    \ 'Z'.charCodeAt(0)) sum += code - 'A'.charCodeAt(0)\n    else break\n  }\n  return\
    \ sum\n}\n", "  return s.split('').map(c => c.charCodeAt(0) - 48).reduce((a, b)\
    \ => a + b)\n}\n", "  return sum(s, digitSumR);\n}\n", "    return s.split(\"\"\
    ).reduce((prev, curr, i) => {\n        // console.log(`[${curr}] ${prev}`);\n\
    \        return prev + Math.pow(curr, i);\n    }, 0);\n}\n", "  const digitSumArr\
    \ = s.split(\"\").map(\n    (val) => val.charCodeAt(0) - 64\n  )\n\n  return digitSumArr.reduce((totalSum,\
    \ val) => totalSum + val)\n}\n", "  return s.split('')\n    .map(c => c >= 'a'\
    \ && c <= 'z' ? c + 10 : c >= 'A' && c <= 'Z' ? c + 10 : 0)\n    .reduce((sum,\
    \ c) => sum + c, 0)\n}\n", "  let sum = 0;\n  for (let i = 0; i < s.length; i++)\
    \ {\n    const code = s.charCodeAt(i);\n    if (code < 65) {\n      sum += code;\n\
    \    } else if (code < 90) {\n      sum += code - 55;\n    } else {\n      sum\
    \ += code - 87;\n    }\n  }\n  return sum;\n}\n", "  return s.split('').map(x\
    \ => x.charCodeAt(0) - 64).reduce((acc, x) => acc + x, 0);\n}\n</code>\n<|/ a\
    \ dscore=2 |>\n<| c |>\nThanks for this. It works perfectly. Had to change it\
    \ to `s.split('').map(x => x.charCodeAt(0) - 'A'.charCodeAt(0)).join('')` but\
    \ that is a small change I feel I can work out myself. Also thanks for the other\
    \ answers. Was able to learn quite a bit with this one.\n<|/ c |>\n<| a dscore=1\
    \ |>\nThis can be done using Regex groups and backreference:\n\n<code>\nconst\
    \ input = \"aAaaaXa\"\nconst output = input.replace(/([a-z])([A-Z])/g, (match,\
    \ p1, p2) => {\n  return p1 + p2;\n});\n\nconsole.log(output);</code>\n\nThe regex\
    \ matches a single character which is followed by a character in the range A-Z.\n\
    The match function receives a function which receives the whole match and must\
    \ return a modified version of the match.\nHere, we are returning a new match\
    \ which is the concatenation of the letters before the match (p1) and the letters\
    \ after the match (p2).\nNote that you can replace the + with a space in the return\
    \ statement if you just want to replace them with a single space.\n<|/ a tags=javascript,regex\
    \ |>\n<| a dscore=1 |>\nYou can use this:\n<code>\nvar input = \"aAaaaXa\";\n\
    var output = input.replace(/([A-Z])(?!\\1)/g, \"$1\");\n</code>\nOutput:\n<code>\n\
    aAaXa\n</code>\n<|/ a tags=javascript,regex |>\n<| a dscore=1 |>\nYou can use\
    \ regex for this:\n<code>\nvar myregexp = /(.)\\1{2,}/g;\nvar str=\"aAaaaXa\"\
    ;\nconsole.log(str.replace(myregexp, \"$1\"));\n</code>\nOutput: aAaXa\nSee RegEx101\
    \ Demo\n<|/ a tags=javascript,regex |>\n<| a tags=javascript,regex |>\n<code>\n\
    var input = \"aAaaaXa\";\nvar output = input.replace(/([a-z])([A-Z])/g, (match,\
    \ p1, p2) => {\n  return p1 + p2;\n});\n\nconsole.log(output);</code>\n<|/ a dscore=0\
    \ |>\n<| a |>\nA simpler solution would be to just add a space after the uppercase\
    \ letter:\n\n<code>", "  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n\
    \    const c = s.charCodeAt(i);\n    if (c >= 48 && c <= 57) {\n      sum += c;\n\
    \    }\n  }\n  return sum;\n}\n", "    let sum = 0;\n    for (let i = 0; i <=\
    \ s.length - 2; ++i) {\n        const currentChar = s.charAt(i);\n        const\
    \ nextChar = s.charAt(i + 1);\n        const nextNextChar = s.charAt(i + 2);\n\
    \        if (currentChar === \"A\" && nextChar === \"Z\" && nextNextChar !== \"\
    Z\") {\n            sum += currentChar - \"A\"; // A is 65\n        }\n    }\n\
    \    return sum;\n}\n", "  const result = 0\n  for (let i = 0; i < s.length; i++)\
    \ {\n    const code = s.charCodeAt(i)\n    if (code >= 48 && code <= 57) result\
    \ += (code - 48)\n  }\n  return result\n}\n", "  if (s === '') {\n    return 0;\n\
    \  }\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += (s.charCodeAt(i)\
    \ - '0'.charCodeAt(0));\n  }\n  return sum;\n}\n", "    let sum = 0;\n    for\
    \ (let i = 0; i < s.length; ++i) {\n        const char = s[i];\n        sum +=\
    \ char.charCodeAt(0) - 65;\n    }\n    return sum;\n}\n</code>\n<|/ a dscore=0\
    \ tags=algorithm,javascript |>\n<| c |>\nThank you very much!!! This was very\
    \ helpful to me! :)\n<|/ c |>\n<| a dscore=0 |>\nI assume that you want to do\
    \ this in Javascript? \nIf that's the case, here's a quick solution, although\
    \ I'm sure there's a better way to do it:\n<code>", "  let sum = 0;\n  for (let\
    \ i = 0; i < s.length; i++) {\n    const char = s[i].toUpperCase();\n    sum +=\
    \ char.charCodeAt(0) - 64;\n  }\n  return sum;\n}\n", "  let result = 0;\n\n \
    \ for (let i = 0; i < s.length; ++i) {\n    const char = s.charAt(i);\n\n    if\
    \ (char === char.toUpperCase()) {\n      result += char.charCodeAt(0) - \"A\"\
    .charCodeAt(0);\n    }\n  }\n\n  return result;\n}\n", "  let sum = 0\n  for (let\
    \ c of s) {\n    if (c.match(/[a-z]/) && c.match(/[A-Z]/)) {\n      sum += c.charCodeAt(0)\
    \ - 64\n    }\n  }\n  return sum\n}\n", "  return s.split('').reduce((prev, next)\
    \ => {\n    return prev + parseInt(next, 10);\n  }, 0);\n}\n", "  return s.match(/[A-Z]/g).reduce((a,\
    \ c) => a + c.charCodeAt(0), 0);\n}", "  let sum = 0;\n  for (let i = 0; i < s.length;\
    \ i++) {\n    const ch = s.charCodeAt(i);\n    if (ch > 47 && ch < 58) {\n   \
    \   sum += ch;\n    } else {\n      sum += ch - 48;\n    }\n  }\n  return sum;\n\
    }\n", "\tlet counter = 0;\n\tfor (let i = 0; i < s.length; ++i) {\n\t\tconst c\
    \ = s.charCodeAt(i);\n\t\tif (c >= 48 && c <= 57)\n\t\t\tcounter += c - 48;\n\t\
    }\n\treturn counter;\n}\n", "  return s\n    .split('')\n    .reduce(\n      (prev,\
    \ current) => (prev + current.charCodeAt(0)),\n      0\n    )\n}\n", "  let sum\
    \ = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const code = s.charCodeAt(i);\n\
    \    if (code >= 'a'.charCodeAt() && code <= 'z'.charCodeAt()) {\n      sum +=\
    \ code - 'a'.charCodeAt();\n    } else {\n      sum += code;\n    }\n  }\n  return\
    \ sum;\n}\n", "    return s.split('').map(s => s.charCodeAt(0) - 'a'.charCodeAt(0)\
    \ + 10).reduce(\n        (total, num) => total + num,\n        0\n    );\n}\n",
  "  return s.split(\"\").reduce((previous, current) => previous + (current.charCodeAt(0)\
    \ - 64), 0);\n}\nconst task7: Task<string> = { title: \"Task 7\", description:\
    \ \"Write a function that takes a string as input and returns the sum of the upper\
    \ characters only'ASCII codes.\", solution: digitSum };\n", "  let res = 0;\n\
    \  for (let i = 0; i < s.length; ++i) {\n    const ch = s.charAt(i);\n    if (ch.match(/^[A-Z0-9]+$/))\
    \ {\n      res += ch.charCodeAt(0) - 48;\n    } else {\n      break;\n    }\n\
    \  }\n  return res;\n}\n", "  if (s.length === 0) {\n    return 0;\n  }\n  let\
    \ sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    const c = s[i];\n    if\
    \ (c.toUpperCase() !== c) {\n      continue;\n    }\n    sum += c.charCodeAt(0);\n\
    \  }\n  return sum;\n}\n", "  return s.split('').reduce((acc, c) => {\n    const\
    \ charCode = c.charCodeAt(0);\n    if (charCode >= 48 && charCode <= 57) {\n \
    \     return acc + charCode - 48;\n    }\n    return acc;\n  }, 0);\n}\n", " \
    \ // Find the length of the string\n  const len = s.length;\n  // Initialise the\
    \ sum to 0\n  let sum = 0;\n  // Loop over each character in the string\n  for\
    \ (let i = 0; i < len; i++) {\n    // Grab the character at the index i\n    const\
    \ char = s[i];\n    // Get the ascii code for the character\n    const code =\
    \ char.charCodeAt(0);\n    // If the character is an upper case letter, add its\
    \ ascii code to the sum\n    if (char >= \"A\" && char <= \"Z\") {\n      sum\
    \ += code;\n    }\n  }\n  // Return the sum\n  return sum;\n}\n", "  let sum =\
    \ 0;\n  for (let i = 0; i < s.length; i++) {\n    const char = s[i].charCodeAt(0);\n\
    \    if (char >= 65 && char <= 90) {\n      sum += char - 65;\n    } else if (char\
    \ >= 97 && char <= 122) {\n      sum += char - 97;\n    }\n  }\n  return sum;\n\
    }\n", "  let sum = 0;\n  for (let char of s) {\n    if (char >= \"a\" && char\
    \ <= \"z\") {\n      sum += char - \"a\";\n    } else {\n      sum += char;\n\
    \    }\n  }\n  return sum;\n}\n", "    const digitMap = {\n        '0': 0,\n \
    \       '1': 1,\n        '2': 2,\n        '3': 3,\n        '4': 4,\n        '5':\
    \ 5,\n        '6': 6,\n        '7': 7,\n        '8': 8,\n        '9': 9,\n   \
    \ };\n    let sum = 0;\n    let num = 0;\n    const length = s.length;\n    for\
    \ (let i = 0; i < length; i++) {\n        num = digitMap[s[i]] + num;\n      \
    \  if (num > 9) {\n            sum++;\n            num = 0;\n        }\n    }\n\
    \    return sum;\n}\n", "  return sum(s.split('').map((char) => char.charCodeAt(0)\
    \ - 'A'.charCodeAt(0)));\n}\n", "  let total: number = 0;\n  for (let i = 0; i\
    \ < s.length; i++) {\n    const charCode = s[i].charCodeAt(0);\n    if (charCode\
    \ >= 65 && charCode <= 90) {\n      total += charCode - 65;\n    } else if (charCode\
    \ >= 97 && charCode <= 122) {\n      total += charCode - 97;\n    } else {\n \
    \     total++;\n    }\n  }\n  return total;\n}\n", "  let sum = 0\n  let chars\
    \ = s.split(\"\")\n  chars.forEach((char: string) => {\n    let code: number =\
    \ char.charCodeAt(0)\n    if (code >= 48 && code <= 57) {\n      sum += code\n\
    \    }\n  })\n  return sum\n}\n", "  let sum = 0;\n  for (let c of s) {\n    sum\
    \ += c.codePointAt(0);\n  }\n  return sum;\n}\n", "    let sum = 0;\n    for (let\
    \ i = 0; i < s.length; i++) {\n        const char = s[i];\n        const code\
    \ = char.charCodeAt(0);\n        if (char === char.toUpperCase()) { // upper\n\
    \            sum += code - 32;\n        } else {\n            sum += code;\n \
    \       }\n    }\n    return sum;\n}", "    return s.split('').map(char => char.charCodeAt(0)\
    \ - 'a'.charCodeAt(0) + 1).reduce((a,b) => a + b, 0);\n}\n", "  return s.split('').filter(d\
    \ => d.charCodeAt(0) >= 48 && d.charCodeAt(0) <= 57).reduce((acc, d) => acc +\
    \ d.charCodeAt(0), 0);\n}\n", "  const sum = 0;\n  for (let i = 0; i < s.length;\
    \ i += 1) {\n    const c = s.charCodeAt(i);\n    if (c >= 'A' && c <= 'Z') {\n\
    \      sum += (c - 'A');\n    } else {\n      sum += c;\n    }\n  }\n  return\
    \ sum;\n}\n", "  return s.length ? s.match(/\\d+/g).reduce((t, tNum) => t + +tNum,\
    \ 0) : 0\n}\n", "    let result = 0\n    for (let i = 0; i < s.length; i++) {\n\
    \        let n = s.charCodeAt(i)\n        if (n < 48 || n > 57) {\n          \
    \  return NaN\n        }\n        result += n\n    }\n    return result\n}\n",
  "  let digits = '';\n  for (let i = 0; i < s.length; i += 1) {\n    digits += s.charAt(i).charCodeAt(0);\n\
    \  }\n  return digitSumFromNumber(digits);\n}\n", "  // your code goes here\n\
    \  let res = 0;\n  for (let c of s) {\n    res = Math.max(res, c.charCodeAt(0)\
    \ - 64);\n  }\n  return res;\n}\n", "  let res = 0;\n  for (let i = 0; i < s.length;\
    \ ++i) {\n    const code = s.charCodeAt(i);\n    if (code >= 48 && code <= 57)\
    \ ++res;\n  }\n  return res;\n}\n", "  let total = 0;\n  let chars = s[0];\n \
    \ for (let i = 1, len = s.length; i < len; i++) {\n    const code = s.charCodeAt(i);\n\
    \    const char = s.charAt(i);\n    if (char >= 'a' && char <= 'z') {\n      chars\
    \ = chars + char;\n    } else {\n      chars = chars + char.charCodeAt(0) - 32;\n\
    \    }\n  }\n  return total + chars.length;\n}\n", "  let result = 0;\n  for (let\
    \ i = 0; i < s.length; i++) {\n    result += toUpperCode(s[i]);\n  }\n  return\
    \ result;\n}\n", "  return s.length * digitSum_aux(s.toLowerCase())\n}\n", " \
    \   let total = 0;\n    for (let i = 0; i < s.length; i++) {\n        const char\
    \ = s.charAt(i);\n        if (char >= '0' && char <= '9') {\n            total\
    \ += char - '0';\n        }\n    }\n    return total;\n}\n", "  let sum = 0;\n\
    \  let upper = 0;\n  for (let i = 0; i < s.length; i++) {\n    const c = s.charCodeAt(i);\n\
    \    sum += c >= 65 && c <= 90 ? (c) - 65 : 0;\n    upper += c >= 95 && c <= 122\
    \ ? (c) - 95 : 0;\n  }\n  return sum + upper;\n}\n", "  let sum = 0;\n  for (let\
    \ i = 0; i < s.length; i += 1) {\n    const n = s.charCodeAt(i) - \"a\".charCodeAt(0);\n\
    \    sum += n * (n % 2) * Math.pow(10, s.length - i - 1);\n  }\n  return sum;\n\
    }\n", "  let sum = 0\n  for (let i = 0; i < s.length; i++) {\n    const c = s.charCodeAt(i)\n\
    \    if (c >= 48 && c <= 90) sum += c - 48\n  }\n  return sum\n}\n", "  return\
    \ s.match(/[\\d]+/g).reduce((acc, val) => acc + parseInt(val), 0);\n}\n</code>\n\
    Playground\n<|/ a dscore=2 |>\n<| c |>\nThank you. Very helpful. Works perfectly\
    \ :)\n<|/ c |>\n<| c |>\nGlad to help you, enjoy coding :)\n<|/ c |>\n<| c |>\n\
    I have another question. How can I get rid of the \"?\" from the output when there\
    \ are multiple characters in the string? For instance if there are multiple numbers\
    \ in the string. Something like: 12222 => 222.\n<|/ c |>\n<| c |>\nSure, add another\
    \ condition to the `if`: `if (char === '0' || char === '1' || char === '2' ||\
    \ char === '3' || char === '4' || char === '5' || char === '6' || char === '7'\
    \ || char === '8' || char === '9') return parseInt(char, 10);`\n<|/ c |>\n<| c\
    \ |>\nJust wanted to follow up with this! :)\n<|/ c |>\n<| a dscore=0 |>\n<code>",
  "  var sum = 0;\n  for (var i = s.length - 1; i >= 0; i--) {\n    if (s.charAt(i)\
    \ >= 'a' && s.charAt(i) <= 'z') {\n      sum += (s.charAt(i) - 'a' + 10);\n  \
    \  } else {\n      sum += s.charAt(i);\n    }\n  }\n  return sum;\n}\n</code>\n\
    <|/ a dscore=1 |>\n<| a |>\nAs others have pointed out, this problem can be solved\
    \ with regular expressions. However, as you are new to regular expressions, I\
    \ thought it might be useful to introduce you to an alternative approach.\nA more\
    \ powerful approach is to use string manipulation to solve this problem. Since\
    \ you are looking for the sum of ASCII values, a regular expression is appropriate.\n\
    I start with a string called s, which in this case contains the string \"AAbBcCd\"\
    :\n<code>\nvar s = \"AAbBcCd\";\n</code>\nTo find the sum of the uppercase letters,\
    \ I use the expression [A-Z]. We could use that expression in a replace method,\
    \ but here is a more \"traditional\" approach:\n<code>\nvar uppercase_letters_only\
    \ = s.replace( /[A-Z]/g, \"\" );\n</code>\nIn this expression, [A-Z] will match\
    \ all uppercase letters, and I replace them with nothing. The result will be \"\
    AbBcCd\".\nTo get the sum of ASCII values, we can convert the uppercase_letters_only\
    \ variable into a number, and get the sum using the + operator:\n<code>\nvar sum\
    \ = ( +uppercase_letters_only );\n</code>\nThe expression above converts the string\
    \ into a number, which is then used as the sum.\n<code>\nconsole.log( sum );\n\
    </code>\nConsole log result:\n\n<code>\n67\n</code>\n<|/ a tags=javascript dscore=1\
    \ |>\n<| c |>\nNo need to use `replace` with `sum = (+uppercase_letters_only)`,\
    \ just do `sum += +uppercase_letters_only;`\n<|/ c |>\n<| c |>\nThanks Matias!\
    \ I was looking for a more in-depth explanation, but your example is exactly what\
    \ I was looking for. Thank you very much!\n<|/ c |>\n<| a tags=javascript dscore=1\
    \ |>\nTo answer your question \"How can I make this code so that it works?\",\
    \ I'll give a hint.\nThe code above can be broken down to several functions. For\
    \ example, we can break down digitSum function into a series of steps:\n\nCheck\
    \ if the argument is a string\nCheck if the argument is an empty string\nGet the\
    \ length\n\nSo the most simple solution would be:\n<code>", "  let digits = '';\n\
    \  for (let i = 0; i < s.length; i += 1) {\n    digits += s.charAt(i).charCodeAt(0)\
    \ - 'A'.charCodeAt(0);\n  }\n  return digits;\n}\n", "    const total = 0;\n \
    \   for (let i = 0; i < s.length; i += 1) {\n        const chr = s.charCodeAt(i);\n\
    \        // If the character is a letter or a digit, add it to the total\n   \
    \     if (chr > 47 && chr < 58) {\n            total += chr;\n        } else {\n\
    \            console.log(chr, chr.toUpperCase(), total);\n            throw \"\
    error\";\n        }\n    }\n    return total;\n}\n", "  let sum: number = null;\n\
    \  for (let i = 0; i < s.length; i += 1) {\n    const char = s.charAt(i);\n  \
    \  const digit = char.charCodeAt(0) - 'a'.charCodeAt(0);\n    sum += digit;\n\
    \  }\n  return sum;\n}\n", "  let sum = 0;\n  for (let i = 0; i <= s.length -\
    \ 1; i++) {\n    sum += Math.pow(16, i) * s.charCodeAt(i) - 96;\n  }\n  return\
    \ sum;\n}", "  let sum = 0;\n  for (let i = 0; i < s.length; i++){\n    let char\
    \ = s[i];\n    if (char >= '0' && char <= '9') sum += char - '0';\n    else if\
    \ (char >= 'A' && char <= 'Z') sum += char - 'A' + 10;\n  }\n  return sum;\n}\n",
  "  return s.split('').reduce((acc, cur) => acc + cur, 0);\n}\n", "  var sum = 0;\n\
    \  for (var i = 0; i < s.length; i++)\n    sum += getDigitValue(s.charAt(i));\n\
    \  return sum;\n}\n", "  if (s == \"\") {\n    return 0;\n  }\n  const result\
    \ = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    const c = s.charCodeAt(i);\n\
    \    if (c >= 48 && c <= 57) {\n      result += c - 48;\n    } else {\n      result\
    \ += c;\n    }\n  }\n  return result;\n}\n", "  let total = 0;\n  for (const i\
    \ of s) {\n    if (i.match(/[A-Z]/)) {\n      total += i.charCodeAt(0) - 96;\n\
    \    }\n  }\n  return total;\n}\n", "  // Write your code here\n  return 0\n}\n",
  "  // Your code here\n  return 0;\n}\n", "  const len = s.length\n  const ret =\
    \ 0\n  for (let i = 0; i < len; i++) {\n    const code = s.charCodeAt(i)\n   \
    \ if (code > 57 && code < 65) {\n      ret += 1\n    } else if (code < 48 || code\
    \ > 57) {\n      ret += 0\n    }\n  }\n  return ret\n}\n", "  return s.split('').map(c\
    \ => c.charCodeAt(0) - 48).reduce((acc, cur) => acc + cur);\n}\n", "  return sum(s.split('').reduce((prev,\
    \ curr) => prev + +curr, 0));\n}\n", "  let total = 0;\n  for (let i = 0; i <\
    \ s.length; i++) {\n    const num = s.charCodeAt(i) - 'a'.charCodeAt(0);\n   \
    \ total += num * Math.pow(26, s.length - i - 1);\n  }\n  return total;\n}\n",
  "  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i)\
    \ > 64 ? 1 : 0;\n  }\n  return sum;\n}\n", "  return s.split('').map(function(char)\
    \ {\n    return char.charCodeAt(0) - 64;\n  }).reduce(function(acc, curr) {\n\
    \    return acc + curr;\n  }, 0);\n}\n", "  return parseInt(s.split('').sort().join(''),\
    \ 10)\n}\n", "  let code = 0;\n  let sum = 0;\n  for (let i = 0; i < s.length;\
    \ i += 1) {\n    if (s[i].toLowerCase() === 'a' || s[i].toLowerCase() === 'e'\
    \ || s[i].toLowerCase() === 'i' || s[i].toLowerCase() === 'o' || s[i].toLowerCase()\
    \ === 'u') {\n      sum += Number(s[i]);\n    }\n  }\n  return sum;\n}\n", " \
    \ let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (i > 0 && s.charAt(i)\
    \ === s.charAt(i - 1)) { sum += s.charCodeAt(i - 1); }\n    sum += s.charCodeAt(i);\n\
    \  }\n  return sum;\n}\n", "  if (s.length === 0) {\n    return 0;\n  }\n\n  const\
    \ sum = 0;\n  let index = 0;\n  while (index < s.length) {\n    sum += s.charCodeAt(index++)\
    \ - '0';\n  }\n\n  return sum;\n}\n", "  var sum = 0;\n  var len = s.length;\n\
    \  for (var i = 0; i < len; i++) {\n    var c = s.charCodeAt(i);\n    if (c >=\
    \ 65 && c <= 90) {\n      sum += c - 65;\n    } else if (c >= 97 && c <= 122)\
    \ {\n      sum += c - 97;\n    }\n  }\n  return sum;\n}\n", "  let result = 0;\n\
    \  for (let i = 0; i < s.length; i++) {\n    if (s.charCodeAt(i) > 64 && s.charCodeAt(i)\
    \ < 91) {\n      result += s.charCodeAt(i) - 96;\n    } else {\n      result +=\
    \ s.charCodeAt(i);\n    }\n  }\n  return result;\n}\n", "    let sum = 0;\n  \
    \  for (let i = 0; i < s.length; i += 1) {\n        sum += (s.charCodeAt(i) -\
    \ 'A'.charCodeAt(0)) % 10;\n    }\n    return sum;\n}", "  let sum = 0;\n  for\
    \ (let i = 0; i < s.length; i += 1) {\n    sum += s.charCodeAt(i);\n  }\n  return\
    \ sum;\n}\n", "    return s.split('').map(function (i): number { return i.charCodeAt(0)\
    \ - (i.charCodeAt(1) - 'A'.charCodeAt(0)); } ).reduce(function (acc: number, curr:\
    \ number): number { return acc + curr; }, 0);\n}", "  let total = 0;\n  for (let\
    \ i = 0; i < s.length; i++) {\n    total += s.charCodeAt(i) > 96 ? s.charCodeAt(i)\
    \ - 96 : s.charCodeAt(i);\n  }\n  return total;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
