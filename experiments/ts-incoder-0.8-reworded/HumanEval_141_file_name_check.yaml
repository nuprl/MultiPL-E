name: HumanEval_141_file_name_check
language: ts
prompt: "//Create a function which takes a string representing a file's name, and\
  \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
  // A file's name is considered to be valid if and only if all the following conditions\
  \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in the\
  \ file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring\
  \ before the dot should not be empty, and it starts with a letter from \n// the\
  \ latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should\
  \ be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// >>> file_name_check(\"\
  example.txt\")\n// \"Yes\"\n// >>> file_name_check(\"1example.dll\")\n// \"No\"\n\
  function file_name_check(file_name: string): string {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = file_name_check;\n  assert.deepEqual(candidate(\"\
  example.txt\"),\"Yes\");\n  assert.deepEqual(candidate(\"1example.dll\"),\"No\"\
  );\n  assert.deepEqual(candidate(\"s1sdf3.asd\"),\"No\");\n  assert.deepEqual(candidate(\"\
  K.dll\"),\"Yes\");\n  assert.deepEqual(candidate(\"MY16FILE3.exe\"),\"Yes\");\n\
  \  assert.deepEqual(candidate(\"His12FILE94.exe\"),\"No\");\n  assert.deepEqual(candidate(\"\
  _Y.txt\"),\"No\");\n  assert.deepEqual(candidate(\"?aREYA.exe\"),\"No\");\n  assert.deepEqual(candidate(\"\
  /this_is_valid.dll\"),\"No\");\n  assert.deepEqual(candidate(\"this_is_valid.wow\"\
  ),\"No\");\n  assert.deepEqual(candidate(\"this_is_valid.txt\"),\"Yes\");\n  assert.deepEqual(candidate(\"\
  this_is_valid.txtexe\"),\"No\");\n  assert.deepEqual(candidate(\"#this2_i4s_5valid.ten\"\
  ),\"No\");\n  assert.deepEqual(candidate(\"@this1_is6_valid.exe\"),\"No\");\n  assert.deepEqual(candidate(\"\
  this_is_12valid.6exe4.txt\"),\"No\");\n  assert.deepEqual(candidate(\"all.exe.txt\"\
  ),\"No\");\n  assert.deepEqual(candidate(\"I563_No.exe\"),\"Yes\");\n  assert.deepEqual(candidate(\"\
  Is3youfault.txt\"),\"Yes\");\n  assert.deepEqual(candidate(\"no_one#knows.dll\"\
  ),\"Yes\");\n  assert.deepEqual(candidate(\"1I563_Yes3.exe\"),\"No\");\n  assert.deepEqual(candidate(\"\
  I563_Yes3.txtt\"),\"No\");\n  assert.deepEqual(candidate(\"final..txt\"),\"No\"\
  );\n  assert.deepEqual(candidate(\"final132\"),\"No\");\n  assert.deepEqual(candidate(\"\
  _f4indsartal132.\"),\"No\");\n  assert.deepEqual(candidate(\".txt\"),\"No\");\n\
  \  assert.deepEqual(candidate(\"s.\"),\"No\");\n}\n\ntest();"
completions: ["\tlet file_name = file_name.replace(/\\./g,\"\");\n\tlet re = /^[0-9]{1,3}$/;\n\
    \t\n\tif(!re.test(file_name)) {\n\t\treturn \"No\";\n\t}\n\n\tlet file_name_sub\
    \ = file_name.substring(0, file_name.lastIndexOf(\".\"));\n\tlet file_name_sub_re\
    \ = /^[a-zA-Z]+$/;\n\t\n\tif(!file_name_sub_re.test(file_name_sub)) {\n\t\treturn\
    \ \"No\";\n\t}\n\n\tlet file_name_sub_re = /^[^\\.]+$/g;\n\n\tlet file_name_sub_check\
    \ = file_name.match(file_name_sub_re);\n\t\n\tif(file_name_sub_check === null)\
    \ {\n\t\treturn \"No\";\n\t}\n\t\n\treturn \"Yes\";\n}\n", "\treturn file_name\
    \ === '' ? 'No' : file_name.split('.').length == 1 ? 'Yes' : file_name.match(/^[a-zA-Z]+$/)\
    \ ? 'Yes' : 'No';\n}\n", "    if (file_name.match(/^\\d{3}\\.[a-zA-Z]{1}$/) !==\
    \ null) {\n        if (file_name.indexOf(\".\") !== -1) {\n            while (file_name.indexOf(\"\
    .\") !== -1) {\n                let first_char = file_name.charAt(0);\n      \
    \          let last_char = file_name.charAt(file_name.length - 1);\n         \
    \       if (first_char.length <= 2 || last_char.length <= 2) {\n             \
    \       return \"No\";\n                }\n                let first_char = first_char.toUpperCase();\n\
    \                let last_char = last_char.toUpperCase();\n                if\
    \ (first_char.match(/[^a-zA-Z]$/) !== null || last_char.match(/[^a-zA-Z]$/) !==\
    \ null) {\n                    return \"No\";\n                }\n           \
    \ }\n        }\n        return \"Yes\";\n    }\n    return \"No\";\n}\n</code>\n\
    <|/ a |>\n<| a dscore=0 tags=javascript |>\nTo check whether a string is in a\
    \ given list, you can use the method indexOf.\n<code>\nvar file_name = \"1.txt\"\
    ;\nvar file_extensions = [\"txt\", \"exe\", \"dll\"];\nvar valid_file_name = false;\n\
    for (var i=0; i < file_extensions.length; i++) {\n    var index = file_name.lastIndexOf(\"\
    .\") + 1;\n    var ext = file_extensions[i];\n    if (index >= 0 && index < file_name.length\
    \ && file_extensions[i].indexOf(file_name.substring(index, index + ext.length),\
    \ 0) === 0) {\n        valid_file_name = true;\n        break;\n    }\n}\n</code>\n\
    <|/ a |>\n<| a tags=javascript |>\n<code>", "\tlet re = /^.\\d[a-z][a-z]$/i;\n\
    \tlet match = re.exec(file_name);\n\tif (match === null) return \"No\";\n\tlet\
    \ length = file_name.length;\n\tif (length >= 3 && length <= 5) return \"Yes\"\
    ;\n\tif (length > 3 && length < 6) return \"No\";\n\tif (file_name.substring(0,1).indexOf('.')\
    \ === -1) {\n\t\tif (file_name.substring(0,1) === \"\" || file_name.substring(0,1)\
    \ === \"/\") return \"No\";\n\t\treturn \"No\";\n\t}\n\tlet file_extension = file_name.substring(file_name.lastIndexOf('.')\
    \ + 1).toLowerCase();\n\tif (file_extension === \"txt\" || file_extension ===\
    \ \"exe\" || file_extension === \"dll\") return \"Yes\";\n\treturn \"No\";\n}",
  "    if (file_name.length > 3) {\n        return \"No\";\n    }\n    let regExp\
    \ = /^([a-zA-Z])[a-z]*$/;\n    if (regExp.test(file_name.substring(0, 1)) == false\
    \ ||\n        regExp.test(file_name.substring(1, file_name.length)) == false)\
    \ {\n        return \"No\";\n    }\n    if (file_name.substring(0,1) == '.') {\n\
    \        return \"No\";\n    }\n    if (file_name.substring(0,1) != '\\0' &&\n\
    \        file_name.substring(0,1) != '\\0' &&\n        file_name.substring(0,1)\
    \ != '\\0' &&\n        file_name.substring(0,1) != '\\0' &&\n        file_name.substring(0,1)\
    \ != '\\0' &&\n        file_name.substring(0,1) != '\\0' &&\n        file_name.substring(0,1)\
    \ != '\\0' &&\n        file_name.substring(0,1) != '\\0' &&\n        file_name.substring(0,1)\
    \ != '\\0' &&\n        file_name.substring(0,1) != '\\0' &&\n        file_name.substring(0,1)\
    \ != '\\0' &&\n        file_name.substring(0,1) != '\\0' &&\n        file_name.substring(0,1)\
    \ != '\\0' &&\n        file_name.substring(0,1) != '\\0' &&\n        file_name.substring(0,1)\
    \ != '\\0' &&\n        file_name.substring(0,1) != '\\0' &&\n        file_name.substring(0,1)\
    \ != '\\0' &&\n        file_name.substring(0,1) != '\\0') {\n        return \"\
    No\";\n    }\n    if (file_name.substring(0,1) != '\\0' &&\n        file_name.substring(0,1)\
    \ != '\\0' &&\n        file_name.substring(0,1) != '\\0' &&\n        file_name.substring(0,1)\
    \ != '\\0' &&\n        file_name.substring(0,1) != '\\0' &&\n        file_name.substring(0,1)\
    \ != '\\0' &&\n        file_name.substring(0,1) != '\\0' &&\n        file_name.substring(0,1)\
    \ != '\\0' &&\n        file_name.substring(0,1) != '\\0' &&\n        file_name.substring(0,1)\
    \ != '\\0' &&\n        file_name.substring(0,1) != '\\0' &&\n        file_name.substring(0,1)\
    \ != '\\0' &&\n        file_name.substring(0,1) != '\\0' &&\n        file_name.substring(0,1)\
    \ != '\\0' &&\n        file_name.substring(0,1) != '\\0' &&\n        file_name.substring(0,1)\
    \ != '\\0' &&\n        file_name.substring(0,1) != '\\0' &&\n        file_name.substring(0,1)\
    \ != '\\0' &&\n        file_name.substring(0,1) != '\\0' &&\n        file_name.substring(0,1)\
    \ != '\\0' &&\n        file_name.substring(0,1) != '\\0' &&\n        file_name.substring(0,",
  "\tif (file_name.length > MAX_FILE_NAME_LENGTH) {\n\t\treturn \"No\"\n\t} else if\
    \ (file_name.indexOf('.') != -1) {\n\t\tif (file_name.substring(0, file_name.indexOf('.')).trim()\
    \ == '' \n\t\t\t\t|| file_name.substring(0, file_name.indexOf('.')).trim().split('').length\
    \ == 0 \n\t\t\t\t|| file_name.substring(0, file_name.indexOf('.')).trim().split('').reduce((acc:\
    \ any, curr: any) => {\n\t\t\t\t\treturn acc + (curr == \".\") ? true : false\n\
    \t\t\t\t}) != true {\n\t\t\treturn \"No\"\n\t\t}\n\t\tif (['txt', 'exe', 'dll'].find((name:\
    \ string) => {\n\t\t\treturn file_name.substring(file_name.indexOf('.') + 1).split('.')[file_name.substring(file_name.indexOf('.')\
    \ + 1).split('.').length - 1].toLowerCase() == name\n\t\t}) == undefined) {\n\t\
    \t\treturn \"No\"\n\t\t}\n\t} else {\n\t\tif (file_name.substring(0, 1).trim()\
    \ == '0' || file_name.substring(0, 1).trim() == '9') {\n\t\t\treturn \"No\"\n\t\
    \t}\n\t\tif (['txt', 'exe', 'dll'].find((name: string) => {\n\t\t\treturn file_name.substring(file_name.indexOf('.')\
    \ + 1).split('.')[file_name.substring(file_name.indexOf('.') + 1).split('.').length\
    \ - 1].toLowerCase() == name\n\t\t}) == undefined) {\n\t\t\treturn \"No\"\n\t\t\
    }\n\t\tif (file_name.substring(0, 1).trim().split('').reduce((acc: any, curr:\
    \ any) => {\n\t\t\treturn acc + (curr == \".\") ? true : false\n\t\t}) != true)\
    \ {\n\t\t\treturn \"No\"\n\t\t}\n\t\tif (file_name.substring(0, 1).trim().split('').reduce((acc:\
    \ any, curr: any) => {\n\t\t\treturn acc + (curr == \".\") ? true : false\n\t\t\
    }) != true) {\n\t\t\treturn \"No\"\n\t\t}\n\t\tif (file_name.substring(0, 1).trim().split('').reduce((acc:\
    \ any, curr: any) => {\n\t\t\treturn acc + (curr == \".\") ? true : false\n\t\t\
    }) != true) {\n\t\t\treturn \"No\"\n\t\t}\n\t}\n\treturn \"Yes\"\n}\n", "    file_name_pattern\
    \ = /[^0-9\\.]+\\.[^0-9\\.]+$/g;\n    file_name_result = file_name_pattern.exec(file_name);\n\
    \    if (file_name_result == null) {\n        return \"No\";\n    } else {\n \
    \       return \"Yes\";\n    }\n}\n", "\tconst name_regex = new RegExp('^[0-9]{1,3}[a-z][a-z][a-z].*\\\
    .(txt|exe|dll)$');\n\treturn name_regex.test(file_name) ? \"Yes\" : \"No\";\n}",
  "    const dotIndex = file_name.indexOf('.');\n    if (dotIndex < 0) return 'No';\n\
    \    if (file_name.length < 3 || file_name.substring(0, 1) !== 'a' || \n     \
    \   file_name.substring(0, 1) !== 'b' || \n        file_name.substring(0, 1) !==\
    \ 'c' || \n        file_name.substring(0, 1) !== 'd' || \n        file_name.substring(0,\
    \ 1) !== 'e' || \n        file_name.substring(0, 1) !== 'f' || \n        file_name.substring(0,\
    \ 1) !== 'g' || \n        file_name.substring(0, 1) !== 'h' || \n        file_name.substring(0,\
    \ 1) !== 'i' || \n        file_name.substring(0, 1) !== 'j' || \n        file_name.substring(0,\
    \ 1) !== 'k' || \n        file_name.substring(0, 1) !== 'l' || \n        file_name.substring(0,\
    \ 1) !== 'm' || \n        file_name.substring(0, 1) !== 'n' || \n        file_name.substring(0,\
    \ 1) !== 'o' || \n        file_name.substring(0, 1) !== 'p' || \n        file_name.substring(0,\
    \ 1) !== 'q' || \n        file_name.substring(0, 1) !== 'r' || \n        file_name.substring(0,\
    \ 1) !== 's' || \n        file_name.substring(0, 1) !== 't' || \n        file_name.substring(0,\
    \ 1) !== 'u' || \n        file_name.substring(0, 1) !== 'v' || \n        file_name.substring(0,\
    \ 1) !== 'w' || \n        file_name.substring(0, 1) !== 'x' || \n        file_name.substring(0,\
    \ 1) !== 'y' || \n        file_name.substring(0, 1) !== 'z' || \n        file_name.substring(0,\
    \ 1) !== 'A' || \n        file_name.substring(0, 1) !== 'B' || \n        file_name.substring(0,\
    \ 1) !== 'C' || \n        file_name.substring(0, 1) !== 'D' || \n        file_name.substring(0,\
    \ 1) !== 'E' || \n        file_name.substring(0, 1) !== 'F' || \n        file_name.substring(0,\
    \ 1) !== 'G' || \n        file_name.substring(0, 1) !== 'H' || \n        file_name.substring(0,\
    \ 1) !== 'I' || \n        file_name.substring(0, 1) !== 'J' || \n        file_name.substring(0,\
    \ 1) !== 'K' || \n        file_name.substring(0, 1) !== 'L' || \n        file_name.substring(0,\
    \ 1) !== 'M' || \n        file_name.substring(0, 1) !== 'N' || \n        file_name.substring(0,\
    \ 1) !== 'O' || \n        file_name.substring(0, 1) !== 'P' || \n        file_name.substring(0,\
    \ 1) !== 'Q' || \n        file_name.substring(0, 1) !== 'R' || \n        file_name.substring(0,\
    \ 1) !== 'S' || \n        file_name.substring(0, 1) !== 'T' || \n        file_name.substring(0,\
    \ 1) !== 'U' || \n        file_name.substring(0, 1) !== 'V' || \n        file_name.substring(0,\
    \ 1) !== 'W' || \n        file_name.substring(0, 1) !== 'X' || \n        file_name.substring(0,\
    \ 1) !== 'Y' || \n        file_name.substring(0, 1) !== 'Z') return 'No';\n  \
    \  const dotBefore = file_name.substring(0, dotIndex);\n    if (dotBefore.length ",
  "  let valid: boolean = true;\n  let file_name_split: string[] = file_name.split('.');\n\
    \  if (file_name_split.length > 2) {\n    valid = false;\n  }\n  for (let i =\
    \ 0; i < file_name_split.length; i++) {\n    if (file_name_split[i].match(/^[0-9]+$/)\
    \ == null) {\n      valid = false;\n      break;\n    }\n  }\n  if (file_name_split[0].length\
    \ == 0) {\n    valid = false;\n  }\n  if (file_name_split[1].length == 0) {\n\
    \    valid = false;\n  }\n  if (file_name_split[0].length > 2 && file_name_split[1].match(/^[a-zA-Z]+$/)\
    \ == null) {\n    valid = false;\n  }\n  return valid ? \"Yes\" : \"No\";\n}",
  "    const reg = /^(?!.*?[0-9].*?\\.)[a-zA-Z]+\\.(?:txt|exe|dll)$/\n    return reg.test(file_name)\
    \ ? \"Yes\" : \"No\"\n}\n\n", "  let valid = true;\n  let i = 0;\n  while (i <\
    \ file_name.length && valid == true) {\n    const charCode = file_name.charCodeAt(i);\n\
    \    if (charCode < 48 || charCode > 57) {\n      valid = false;\n      continue;\n\
    \    }\n    if (charCode == 46) {\n      valid = false;\n      continue;\n   \
    \ }\n    if (file_name.charAt(i) == '.') {\n      i++;\n      if (i == file_name.length)\
    \ {\n        valid = false;\n      }\n      const charCodeAfterDot = file_name.charCodeAt(i);\n\
    \      if ((charCodeAfterDot < 48 || charCodeAfterDot > 57) &&\n          charCodeAfterDot\
    \ != 46 &&\n          charCodeAfterDot != 47 &&\n          charCodeAfterDot !=\
    \ 65 &&\n          charCodeAfterDot != 66 &&\n          charCodeAfterDot != 97\
    \ &&\n          charCodeAfterDot != 65 &&\n          charCodeAfterDot != 97) {\n\
    \        valid = false;\n      }\n      continue;\n    }\n    if (file_name.charAt(i)\
    \ >= 'a' && file_name.charAt(i) <= 'z') {\n      i++;\n      continue;\n    }\n\
    \    if (file_name.charAt(i) >= 'A' && file_name.charAt(i) <= 'Z') {\n      i++;\n\
    \      continue;\n    }\n    if (file_name.charAt(i) == '_') {\n      i++;\n \
    \     continue;\n    }\n    if (file_name.charAt(i) == '-') {\n      i++;\n  \
    \    if (i == file_name.length) {\n        valid = false;\n      }\n      const\
    \ charCodeBeforeDash = file_name.charCodeAt(i);\n      if ((charCodeBeforeDash\
    \ >= 48 && charCodeBeforeDash <= 57) ||\n          charCodeBeforeDash == 46) {\n\
    \        i++;\n        continue;\n      }\n      valid = false;\n      continue;\n\
    \    }\n    i++;\n  }\n  return valid ? \"Yes\" : \"No\";\n}\n", "    var valid\
    \ = true;\n    if (file_name.indexOf('..') != -1) {\n        valid = false;\n\
    \    }\n    if (file_name.indexOf('.') != -1) {\n        var substr = file_name.substring(0,\
    \ file_name.lastIndexOf('.'));\n        if (substr.indexOf('..') != -1) {\n  \
    \          valid = false;\n        }\n        if (!substr.match(/^[a-zA-Z]+/))\
    \ {\n            valid = false;\n        }\n    }\n    var parts = file_name.split(\"\
    .\");\n    if (parts.length != 3) {\n        valid = false;\n    }\n    if (parts[1].indexOf('..')\
    \ != -1) {\n        valid = false;\n    }\n    if (!parts[1].match(/^[0-9]{3}$/))\
    \ {\n        valid = false;\n    }\n    if (parts[0].length > 3) {\n        valid\
    \ = false;\n    }\n    if (parts[2].length > 3) {\n        valid = false;\n  \
    \  }\n    if (parts[1].indexOf(parts[2]) != -1) {\n        valid = false;\n  \
    \  }\n    return valid ? \"Yes\" : \"No\";\n}\n", "  const regEx = /\\d+\\.\\\
    w+/;\n  const regEx2 = /[^\\d.]/;\n  \n  let valid: boolean;\n  \n  if (file_name.match(regEx)\
    \ && file_name.match(regEx2) && !file_name.includes('.')) {\n    valid = true;\n\
    \  }\n  else {\n    valid = false;\n  }\n  \n  if (valid) {\n    return \"Yes\"\
    ;\n  }\n  else {\n    return \"No\";\n  }\n}\n</code>\n<|/ q dscore=1 |>\n<| c\
    \ |>\nIt might help to explain what you're trying to do. How will you know when\
    \ to terminate a program? Why should `f()` be running in the background? What\
    \ is your program's function?\n<|/ c |>\n<| c |>\nThe program will ask the user\
    \ for input, and it will print an answer based on its input.\n<|/ c |>\n<| c |>\n\
    I guess you want to know how to make a program with two functions that do two\
    \ different things depending on how they were called - one running in the background\
    \ and one not. Is that right?\n<|/ c |>\n<| c |>\nYes that's right\n<|/ c |>\n\
    <| c |>\nI'll post an answer shortly\n<|/ c |>\n<| a tags=typescript,javascript,node.js\
    \ dscore=0 |>\nYour function f() is always running in the background. You just\
    \ need to add some code to make it run in the background.\nYou could do this by\
    \ simply calling f() in your backgroundProcess() function, but you might not want\
    \ to do this, as it would run the function in the background, whereas you probably\
    \ want to do things in order before running f() in the background.\nSo what you\
    \ can do instead is add an argument to f() to tell it whether to run in the background\
    \ or not.\nHere's what you can do:\n<code>", "    var file_name = file_name.toLowerCase();\n\
    \n    if (file_name.includes(\".\")) {\n        if (file_name.split(\".\").length\
    \ > 2) {\n            return \"No\";\n        }\n\n        var file_name = file_name.split(\"\
    .\")[0];\n        var is_valid = true;\n        for (var i=0; i<file_name.length;\
    \ i++) {\n            if (file_name[i] < '0' || file_name[i] > '9') {\n      \
    \          is_valid = false;\n                break;\n            }\n        }\n\
    \n        if (!is_valid) {\n            return \"No\";\n        }\n    }\n\n \
    \   var is_valid = true;\n    for (var i=0; i<file_name.length; i++) {\n     \
    \   if (file_name[i] < 'a' || file_name[i] > 'z') {\n            is_valid = false;\n\
    \            break;\n        }\n    }\n\n    if (!is_valid) {\n        return\
    \ \"No\";\n    }\n\n    if (file_name.charAt(0) == '.') {\n        var is_valid\
    \ = true;\n        for (var i=0; i<file_name.length; i++) {\n            if (file_name[i]\
    \ < 'a' || file_name[i] > 'z') {\n                is_valid = false;\n        \
    \        break;\n            }\n        }\n\n        if (!is_valid) {\n      \
    \      return \"No\";\n        }\n\n        file_name_check = file_name.substr(1);\n\
    \        for (var i=0; i<file_name.length; i++) {\n            if (file_name[i]\
    \ < 'a' || file_name[i] > 'z') {\n                is_valid = false;\n        \
    \        break;\n            }\n        }\n\n        if (!is_valid) {\n      \
    \      return \"No\";\n        }\n    } else {\n        var is_valid = true;\n\
    \        for (var i=0; i<file_name.length; i++) {\n            if (file_name[i]\
    \ < '0' || file_name[i] > '9') {\n                is_valid = false;\n        \
    \        break;\n            }\n        }\n\n        if (!is_valid) {\n      \
    \      return \"No\";\n        }\n    }\n\n    if (file_name_check == \"txt\"\
    \ || file_name_check == \"exe\" || file_name_check == \"dll\") {\n        return\
    \ \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\n", "    \n    let\
    \ result = \"\";\n\n    let dot_position = file_name.indexOf('.');\n    let dot_before\
    \ = file_name.slice(0, dot_position);\n    \n    if (dot_before == '') {\n   \
    \     result = 'No'\n    } else {\n        let dots_allowed = ['txt', 'exe', 'dll'];\n\
    \        let dot_after = file_name.slice(dot_position + 1);\n        if (dot_after\
    \ != dot_after && dots_allowed.indexOf(dot_after) == -1) {\n            result\
    \ = 'No'\n        } else {\n            if (dot_after != dot_after && dots_allowed.indexOf(dot_after)\
    \ == -1) {\n                result = 'No'\n            }\n        }\n    }\n\n\
    \    if (file_name.match(/[0-9]{3}/g) != null) {\n        result = 'No'\n    }\n\
    \n    if (result == 'Yes') {\n        return \"Yes\"\n    }\n    else {\n    \
    \    return \"No\"\n    }\n}\n", "    var res = file_name.match(/^[0-9]{3}\\.\\\
    w+$/);\n    var res = file_name.match(/^[A-Za-z]{3}\\.\\w+$/);\n    if(res) {\n\
    \        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\n", "\t\
    var valid: boolean = false;\n\tvar file_name_length: number = file_name.length;\n\
    \tif (file_name_length < 3) {\n\t\treturn \"Yes\";\n\t}\n\tif (file_name.indexOf('.')\
    \ != -1) {\n\t\tif (file_name.substring(0, 1) != \"\") {\n\t\t\treturn \"No\"\
    ;\n\t\t}\n\t\tif (file_name.substring(file_name.lastIndexOf('.')) == \"\") {\n\
    \t\t\treturn \"No\";\n\t\t}\n\t\tvar invalid_characters: boolean = false;\n\t\t\
    for (var i = 0; i <= file_name.length - 1; i++) {\n\t\t\tif (file_name.substring(i)\
    \ != \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\") {\n\t\t\t\tinvalid_characters\
    \ = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (invalid_characters) {\n\t\t\
    \treturn \"No\";\n\t\t}\n\t}\n\treturn \"Yes\";\n}\n", "    let result = false;\
    \ // To indicate if the file's name contains invalid chars.\n    let dotPos =\
    \ file_name.indexOf(\".\");\n    // If the file's name doesn't contain dot.\n\
    \    if (dotPos < 0) {\n        // Get the file's name without last dot '.' and\
    \ check if the last char is number\n        // or alphabetical.\n        let dotPos2\
    \ = file_name.lastIndexOf(\".\");\n        if (dotPos2 > dotPos && file_name.substr(dotPos\
    \ + 1, 1) >= '0' \n            && file_name.substr(dotPos + 1, 1) <= '9') {\n\
    \            result = \"Yes\";\n        } else {\n            result = \"No\"\
    ;\n        }\n    } else {\n        // If the file's name does contain dot.\n\
    \        if (dotPos == 0) {\n            // Get the file's name without last dot,\
    \ and check if the first char is \n            // alphabetical.\n            let\
    \ dotPos2 = file_name.lastIndexOf(\".\");\n            if (dotPos2 > dotPos &&\
    \ file_name.substr(0, 1) >= 'A' && \n                file_name.substr(0, 1) <=\
    \ 'Z') {\n                result = \"Yes\";\n            } else {\n          \
    \      result = \"No\";\n            }\n        } else {\n            // If the\
    \ file's name contains more than three dots.\n            if (file_name.substr(dotPos\
    \ + 1, 3) > 3) {\n                result = \"No\";\n            } else {\n   \
    \             // If the file's name contains more than three dots and the substring\
    \ \n                // before the dot doesn't start with alphabetical letter.\n\
    \                if (file_name.substr(0, 1) < 'A') {\n                    result\
    \ = \"No\";\n                } else {\n                    result = \"Yes\";\n\
    \                }\n            }\n        }\n    }\n    return result;\n}\n",
  "  var result = file_name.match(/^[0-9]+\\.\\w+$/);\n  if (result != null && result.length\
    \ > 0) {\n    var prefix = result[0].substring(0, 1);\n    if (prefix != 'a' &&\
    \ prefix != 'A' && prefix != 'b' && prefix != 'B' && prefix != 'c' && prefix !=\
    \ 'C' && prefix != 'd' && prefix != 'D' && prefix != 'e' && prefix != 'E' && prefix\
    \ != 'f' && prefix != 'F' && prefix != 'g' && prefix != 'G' && prefix != 'h' &&\
    \ prefix != 'H' && prefix != 'i' && prefix != 'I' && prefix != 'j' && prefix !=\
    \ 'J' && prefix != 'k' && prefix != 'K' && prefix != 'l' && prefix != 'L' && prefix\
    \ != 'm' && prefix != 'M' && prefix != 'n' && prefix != 'N' && prefix != 'o' &&\
    \ prefix != 'O' && prefix != 'p' && prefix != 'P' && prefix != 'q' && prefix !=\
    \ 'Q' && prefix != 'r' && prefix != 'R' && prefix != 's' && prefix != 'S' && prefix\
    \ != 't' && prefix != 'T' && prefix != 'u' && prefix != 'U' && prefix != 'v' &&\
    \ prefix != 'V' && prefix != 'w' && prefix != 'W' && prefix != 'x' && prefix !=\
    \ 'X' && prefix != 'y' && prefix != 'Y' && prefix != 'z' && prefix != 'Z') {\n\
    \      return \"No\";\n    }\n  }\n  return \"Yes\";\n}\n", "    const min_three_digits\
    \ = \"00000000\";\n    const first_dot_allowed = \".\";\n    const before_empty\
    \ = file_name.substr(0, 1);\n    const after_dots = [\"txt\", \"exe\", \"dll\"\
    ];\n    let invalid_cases = [];\n    let valid_cases = [];\n    if (file_name.search(/^\\\
    d+$/) !== -1) {\n        // if file name is all digits, return \"No\"\n      \
    \  invalid_cases.push(file_name);\n    }\n    if (file_name.search(/^\\.$/) !==\
    \ -1) {\n        // if file name contains just one dot, return \"No\"\n      \
    \  invalid_cases.push(file_name);\n    }\n    if (file_name.search(/^[^.]*$/)\
    \ !== -1) {\n        // if file name contains no dot and no other letters, return\
    \ \"No\"\n        invalid_cases.push(file_name);\n    }\n    if (file_name.search(/^[^a-zA-Z]*$/)\
    \ !== -1) {\n        // if file name contains no letter, return \"No\"\n     \
    \   invalid_cases.push(file_name);\n    }\n    if (file_name.search(/^.[a-zA-Z]/)\
    \ !== -1) {\n        // if file name contains at least one of the letters in 'after_dots',\
    \ \n        // return \"No\"\n        invalid_cases.push(file_name);\n    }\n\
    \    if (before_empty.length === 0) {\n        // if file name contains no letter\
    \ and no other letters, return \"No\"\n        invalid_cases.push(file_name);\n\
    \    }\n    if (after_dots.indexOf(file_name.substr(file_name.length - 3)) < 0)\
    \ {\n        // if file name does not end with one of 'after_dots', return \"\
    No\"\n        invalid_cases.push(file_name);\n    }\n    if (invalid_cases.length\
    \ === 0) {\n        // if all the conditions above are met, return \"Yes\"\n \
    \       valid_cases.push(file_name);\n    }\n    if (valid_cases.length === 0)\
    \ {\n        // if all the conditions above are met but 'valid_cases' is still\
    \ empty,\n        // return \"No\"\n        invalid_cases.push(file_name);\n \
    \   }\n    const is_valid = invalid_cases.every(file_name => file_name !== \"\"\
    );\n    if (!is_valid) {\n        return \"No\";\n    } else {\n        return\
    \ \"Yes\";\n    }\n}\n", "  let index = 0;\n  const index2 = file_name.indexOf('.',\
    \ index);\n  const index3 = file_name.indexOf('.', index2);\n  const index4 =\
    \ file_name.indexOf('.', index3);\n\n  if (index2 > index3 && index4 === -1) {\n\
    \    return 'No';\n  } else if (index2 > index3 && index4 !== -1) {\n    return\
    \ 'No';\n  } else if (index3 > index2 && index4 === -1) {\n    return 'No';\n\
    \  } else {\n    return 'Yes';\n  }\n}\n", "    var dot: number = file_name.lastIndexOf('.');\n\
    \    if(dot === -1){\n        return \"No\";\n    }\n    var substring_start:\
    \ number = dot+1;\n    var substring_end: number = file_name.length-1;\n    if(substring_start\
    \ === 0 || substring_start > 2 || (substring_start > 2 &&\n        file_name.substr(0,\
    \ 1).toLowerCase() !== 'a' && file_name.substr(0, 1).toLowerCase() !== 'b' &&\n\
    \        file_name.substr(0, 1).toLowerCase() !== 'c' && file_name.substr(0, 1).toLowerCase()\
    \ !== 'd' &&\n        file_name.substr(0, 1).toLowerCase() !== 'e' && file_name.substr(0,\
    \ 1).toLowerCase() !== 'f' &&\n        file_name.substr(0, 1).toLowerCase() !==\
    \ 'g' && file_name.substr(0, 1).toLowerCase() !== 'h' &&\n        file_name.substr(0,\
    \ 1).toLowerCase() !== 'i' && file_name.substr(0, 1).toLowerCase() !== 'j' &&\n\
    \        file_name.substr(0, 1).toLowerCase() !== 'k' && file_name.substr(0, 1).toLowerCase()\
    \ !== 'l' &&\n        file_name.substr(0, 1).toLowerCase() !== 'm' && file_name.substr(0,\
    \ 1).toLowerCase() !== 'n' &&\n        file_name.substr(0, 1).toLowerCase() !==\
    \ 'o' && file_name.substr(0, 1).toLowerCase() !== 'p' &&\n        file_name.substr(0,\
    \ 1).toLowerCase() !== 'q' && file_name.substr(0, 1).toLowerCase() !== 'r' &&\n\
    \        file_name.substr(0, 1).toLowerCase() !== 's' && file_name.substr(0, 1).toLowerCase()\
    \ !== 't' &&\n        file_name.substr(0, 1).toLowerCase() !== 'u' && file_name.substr(0,\
    \ 1).toLowerCase() !== 'v' &&\n        file_name.substr(0, 1).toLowerCase() !==\
    \ 'w' && file_name.substr(0, 1).toLowerCase() !== 'x' &&\n        file_name.substr(0,\
    \ 1).toLowerCase() !== 'y' && file_name.substr(0, 1).toLowerCase() !== 'z')){\n\
    \        return \"No\";\n    }\n    if(substring_end === 0 || substring_end >\
    \ 3 || (substring_end > 3 &&\n        file_name.substr(substring_end).toLowerCase()\
    \ !== 'txt' && file_name.substr(substring_end).toLowerCase() !== 'exe' &&\n  \
    \      file_name.substr(substring_end).toLowerCase() !== 'dll')){\n        return\
    \ \"No\";\n    }\n    return \"Yes\";\n}\n", "  \n  // Check if the input string\
    \ has two digits ('0'-'9').\n  if (file_name.search(/^\\d{1,2}$/g) == -1) return\
    \ \"No\";\n  \n  // Check if there is a dot ('.') in the file's name.\n  const\
    \ file_array = file_name.split('.');\n  if (file_array.length != 2) return \"\
    No\";\n\n  // Check if the first substring before the dot should not be empty.\n\
    \  if (file_array[0].length == 0 || (file_array[0].length != 1 \n    && file_array[0].search(/^[a-z]/)\
    \ == -1)) return \"No\";\n\n  // Check if the second substring after the dot should\
    \ be one of these: ['txt', 'exe', 'dll'].\n  const valid_extensions = ['txt',\
    \ 'exe', 'dll'];\n  if (file_array[1] != undefined && valid_extensions.indexOf(file_array[1])\
    \ == -1) return \"No\";\n\n  // Everything is OK.\n  return \"Yes\";\n}\n", " \
    \   if (file_name.length < 3 || file_name.split(\".\")[0].length == 0 || file_name.split(\"\
    .\")[1].length == 0) {\n        return \"No\";\n    } else {\n        return \"\
    Yes\";\n    }\n}\n</code>\nThe code above checks whether a file name can be created\
    \ using the given constraints. If it cannot, it returns \"No\". It uses this as\
    \ a helper function:\n<code>", "  // TODO: Replace this with the implementation\
    \ of the file_name_is_valid function defined above\n  var file_name_length = 0;\n\
    \  var dot_count = 0;\n  var start_letter = false;\n\n  var file_name_temp = file_name.split('.');\n\
    \  file_name_temp = file_name_temp.filter(Boolean);\n  \n  if(file_name_temp.length\
    \ > 0){\n    file_name_length = file_name_temp.length;\n    dot_count = file_name_temp.length\
    \ - 1;\n    start_letter = true;\n  }\n\n  var start_letter_temp_2 = false;\n\n\
    \  if(dot_count > 3){\n    return \"No\";\n  }\n\n  for(var i = 0;i < file_name_temp.length;i++){\n\
    \    if(file_name_temp[i].length > 0){\n      if(!start_letter){\n        start_letter\
    \ = true;\n      }\n      if(start_letter){\n        start_letter_temp_2 = true;\n\
    \      }\n    }else{\n      if(start_letter_temp_2){\n        start_letter_temp_2\
    \ = false;\n      }\n    }\n  }\n\n  if(file_name_temp.length > 3 && start_letter\
    \ == true && start_letter_temp_2 == true){\n    return \"Yes\";\n  }else{\n  \
    \  return \"No\";\n  }\n}\n", "    let digits: string;\n    \n    if (file_name.length\
    \ < 3) {\n        return \"No\";\n    }\n    digits = file_name.substring(0, file_name.indexOf(\"\
    .\"));\n    if (!(/^[0-9a-zA-Z]+$/.test(digits))) {\n        return \"No\";\n\
    \    }\n    \n    let file_name = file_name.substring(1, file_name.length);\n\
    \    \n    let dot_file_name = file_name.split(\".\")[0];\n    if (dot_file_name.length\
    \ === 0) {\n        return \"No\";\n    }\n    \n    if (dot_file_name.length\
    \ <= 1) {\n        return \"No\";\n    }\n    \n    let first_letter = dot_file_name.charAt(0);\n\
    \    if (!(/^[a-z]+$/.test(first_letter))) {\n        return \"No\";\n    }\n\
    \    \n    let file_types = ['exe', 'dll', 'txt'];\n    for (let i = 0; i < file_types.length;\
    \ i++) {\n        if (dot_file_name.indexOf(file_types[i]) > -1) {\n         \
    \   return \"Yes\";\n        }\n    }\n    return \"No\";\n}\n", "    var num_digits\
    \ = file_name.match(/\\D/g).length;\n    var num_dots = file_name.match(/\\./g).length;\n\
    \    if (num_digits > 3 || num_dots > 1 || file_name.match(/^[a-z]/i) == null\
    \ \n            || file_name.match(/^[a-z]/i) == null || file_name.match(/^[a-z]/i)\
    \ == null \n            || file_name.match(/[a-z]/i) == null || file_name.match(/[a-z]/i)\
    \ == null \n            || file_name.match(/[a-z]/i) == null \n            ||\
    \ file_name.match(/[a-z]/i) == null || file_name.match(/[a-z]/i) == null \n  \
    \          || file_name.match(/[a-z]/i) == null \n            || file_name.match(/[a-z]/i)\
    \ == null \n            || file_name.match(/[a-z]/i) == null \n            ||\
    \ file_name.match(/[a-z]/i) == null \n            || file_name.match(/[a-z]/i)\
    \ == null) {\n        return \"No\";\n    }\n    return \"Yes\";\n}", "\tif (file_name.length()\
    \ > MAX_FILE_NAME_LENGTH) {\n\t\treturn \"No\";\n\t}\n\tlet last_char_index: number\
    \ = file_name.length - 1;\n\tlet dot_index: number = file_name.lastIndexOf(\"\
    .\");\n\tif (dot_index < 0) {\n\t\treturn \"No\";\n\t}\n\tif (file_name.substring(last_char_index\
    \ - 1, dot_index).length !== 1) {\n\t\treturn \"No\";\n\t}\n\tif (file_name.substring(dot_index\
    \ - 1, dot_index).length > MAX_DOTS_IN_NAME_THAT_ENDS_WITH_BLANK) {\n\t\treturn\
    \ \"No\";\n\t}\n\tlet last_char: number = file_name.charCodeAt(last_char_index\
    \ - 1);\n\tlet is_letter: boolean = (last_char <= AZ && AZ <= ZA || last_char\
    \ >= 97 && last_char <= 122);\n\tif (dot_index > 0 && file_name.substring(dot_index\
    \ - 1, dot_index).length === 0 && !is_letter) {\n\t\treturn \"No\";\n\t}\n\tif\
    \ (file_name.substring(0, dot_index + 1).indexOf(\".\") !== -1 && !is_letter)\
    \ {\n\t\treturn \"No\";\n\t}\n\treturn \"Yes\";\n}\n", "    const regex = /^[0-9]{3}\\\
    .[a-z][a-z]+$/i;\n    if (!regex.test(file_name)) return \"No\";\n    const first_char\
    \ = file_name.charAt(0);\n    const last_char = file_name.charAt(file_name.length-1);\n\
    \    if (first_char === \".\" || last_char === \".\") return \"No\";\n    if (first_char.match(/^[a-z]/i)\
    \ == null || last_char.match(/^[a-z]/i) == null) \n        return \"No\";\n  \
    \  return \"Yes\";\n}\n", "   //Return the result of the 'file_name_check' function\
    \ you just implemented.\n   return file_name_checkImpl(file_name);\n}\n", "  let\
    \ flag = false;\n  let n = file_name.split(\".\");\n  let num_files = n.length;\n\
    \  if (num_files > 2 && n.every(i => i.match(/^[0-9].[0-9]$/))) flag = true;\n\
    \  if (num_files > 1 && n[num_files - 1].match(/^[A-Za-z].*$/)) flag = true;\n\
    \  if (flag) return \"Yes\";\n  else return \"No\";\n}\n\n", "    // Get the file's\
    \ name\n    const file_name_without_extension = file_name.substring(0, file_name.length\
    \ - 4);\n\n    // Check whether there should not be more than three digits in\
    \ the file's name\n    const regExp = new RegExp(\"^[0-9]{1,3}$\");\n    if (regExp.test(file_name_without_extension))\
    \ {\n        return \"No\";\n    }\n\n    // Check whether the file's name contains\
    \ exactly one dot '.'\n    if (file_name.indexOf(\".\") > -1) {\n        return\
    \ \"No\";\n    }\n\n    // Check the substring before the dot should not be empty,\
    \ and it starts with a letter from the latin alphapet ('a'-'z' and 'A'-'Z')\n\
    \    if (file_name.indexOf(\".\") > -1 && file_name.substring(0, file_name.indexOf(\"\
    .\") - 1).trim().length == 0 && file_name.substring(0, file_name.indexOf(\".\"\
    ) - 1).match(/^[a-ZA-Z]$/) == null) {\n        return \"No\";\n    }\n\n    //\
    \ Check the substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    if (file_name.indexOf(\".\") > -1 && file_name.substring(file_name.indexOf(\"\
    .\") + 1, file_name.length).trim().length != 3 && file_name.substring(file_name.indexOf(\"\
    .\") + 1, file_name.length).trim().split(\".\").filter((item) => { return item\
    \ == \"txt\" || item == \"exe\" || item == \"dll\" }) == null || file_name.substring(file_name.indexOf(\"\
    .\") + 1, file_name.length).trim().split(\".\").filter((item) => { return item\
    \ == \"txt\" || item == \"exe\" || item == \"dll\" }).length != 3) {\n       \
    \ return \"No\";\n    }\n\n    // Return the file's name is valid string\n   \
    \ return \"Yes\";\n}\n</code>\n<|/ a dscore=2 |>\n<| a tags=javascript,regex |>\n\
    Here is my solution:\n<code>", "\tvar num_digits: number;\n\tvar dot: number;\n\
    \tvar num_dots: number;\n\tvar has_dot: boolean;\n\tvar has_letter: boolean;\n\
    \tvar check: string;\n\t\n\tnum_digits = file_name.length;\n\tif (num_digits >\
    \ 3) {\n\t\treturn \"No\";\n\t}\n\t\n\tdot = file_name.indexOf(\".\");\n\tif (dot\
    \ >= 0) {\n\t\tnum_dots = file_name.length - dot;\n\t\tif (num_dots == 1) {\n\t\
    \t\thas_dot = true;\n\t\t} else {\n\t\t\thas_dot = false;\n\t\t}\n\t\thas_letter\
    \ = false;\n\t\tcheck = file_name.substr(0, dot);\n\t\tif (check.length == 0)\
    \ {\n\t\t\thas_letter = true;\n\t\t} else if (check.indexOf(\"a\") > -1 || check.indexOf(\"\
    A\") > -1) {\n\t\t\thas_letter = true;\n\t\t} else {\n\t\t\thas_letter = false;\n\
    \t\t}\n\t\t\n\t\t\n\t\tif (has_letter && has_dot) {\n\t\t\t\n\t\t\tif (check.length\
    \ < 2 || check.substr(0, 1) < \"a\" || check.substr(0, 1) > \"z\") {\n\t\t\t\t\
    return \"No\";\n\t\t\t}\n\t\t\t\n\t\t\tif (check.length < 3 || check.substr(1,\
    \ 1) < \"a\" || check.substr(1, 1) > \"z\") {\n\t\t\t\treturn \"No\";\n\t\t\t\
    }\n\t\t\t\n\t\t\treturn \"Yes\";\n\t\t}\n\t\t\n\t\tif (has_dot || num_dots ==\
    \ 2) {\n\t\t\treturn \"No\";\n\t\t}\n\t\t\n\t\tif (num_dots == 3) {\n\t\t\treturn\
    \ \"Yes\";\n\t\t}\n\t}\n\t\n\treturn \"No\";\n}\n", "    // Start by checking\
    \ the length of the file's name\n    let file_length: number = file_name.length;\n\
    \    if (file_length > 3) {\n        return \"No\";\n    }\n    // If no dot exists,\
    \ return 'No'\n    if (file_name.indexOf(\".\") < 0) {\n        return \"No\"\
    ;\n    }\n    // Get rid of the dot from the file's name\n    file_name = file_name.substring(0,\
    \ file_name.indexOf(\".\"));\n    // Get the first character of the file's name\n\
    \    const first_character = file_name.charAt(0);\n    // If first_character is\
    \ not 'a', return 'No'\n    if (first_character != 'a' && first_character != 'A'\
    \ && first_character != 'z' && first_character != 'Z') {\n        return \"No\"\
    ;\n    }\n    // Check if the first character in the file's name starts with a\
    \ letter from the latin alphabet\n    if (first_character == 'a' || first_character\
    \ == 'A') {\n        if (file_name.charAt(1) >= 'a' && file_name.charAt(1) <=\
    \ 'z') {\n            return \"Yes\";\n        } else {\n            return \"\
    No\";\n        }\n    } else {\n        if (file_name.charAt(1) >= 'A' && file_name.charAt(1)\
    \ <= 'Z') {\n            return \"Yes\";\n        } else {\n            return\
    \ \"No\";\n        }\n    }\n}\n", "    let regEx = /^[1-9][0-9]{1,3}(\\.txt|\\\
    .exe|\\.dll)$/i;\n    let isCorrectFileName = regEx.test(file_name);\n    let\
    \ isInvalidFileName = regEx.test(file_name);\n    \n    if(isCorrectFileName &&\
    \ isInvalidFileName) {\n        return \"Yes\";\n    } else if(isCorrectFileName)\
    \ {\n        return \"No\";\n    } else {\n        return \"Error\";\n    }\n\
    }\n</code>\n<|/ a |>\n<| a tags=function,typescript,javascript,validation dscore=1\
    \ |>\nHere is some code which would return Yes or No:\n<code>", "  var num_digits:\
    \ number = file_name.split('.').length;\n  if (num_digits > 3) {\n    return \"\
    No\";\n  }\n  var num_digits_before: number = file_name.split('.')[0].split('').length;\n\
    \  var valid_start: boolean = \n      (file_name.substring(0,1).toLowerCase()\
    \ >= 'a' && \n       file_name.substring(0,1).toLowerCase() <= 'z') ||\n     \
    \ (file_name.substring(0,1).toLowerCase() >= 'A' && \n       file_name.substring(0,1).toLowerCase()\
    \ <= 'Z');\n  if (!valid_start) {\n    return \"No\";\n  }\n  var valid_end =\
    \ (file_name.substring(file_name.indexOf('.') + 1).\n                  toLowerCase()\
    \ === 'exe' || file_name.\n                  substring(file_name.indexOf('.')\
    \ + 1).\n                  toLowerCase() === 'dll');\n  if (!valid_end) {\n  \
    \  return \"No\";\n  }\n  return \"Yes\";\n}\n", "    // Declare and initialize\
    \ variables\n    var isOK = false;\n    var first_digit: number = file_name.substring(0,\
    \ 1);\n    var last_digit: number = file_name.substring(file_name.length - 1);\n\
    \    var dot_index: int;\n    var dot_string: string;\n\n    // Check if there\
    \ are more than 3 digits in file_name\n    if (file_name.length > 3) {\n     \
    \   return \"No\";\n    }\n\n    // Check if there are only 1 '.'\n    if (file_name.indexOf('.')\
    \ != -1) {\n        // Get the position of the '.'\n        dot_index = file_name.indexOf('.');\n\
    \        // Get the substring before '.'\n        dot_string = file_name.substring(0,\
    \ dot_index);\n        // Check if dot_string starts with a letter from the latin\
    \ alphabet\n        if (!(dot_string.match(/[A-z]/)) && !(dot_string.match(/[A-z]/)))\
    \ {\n            return \"No\";\n        }\n    }\n\n    // Check that the file's\
    \ name does not start with '0' or '1'\n    if (!(first_digit == 0) && !(first_digit\
    \ == 1)) {\n        return \"No\";\n    }\n\n    // Check that the file's name\
    \ does not end with 'txt', 'exe', 'dll'\n    if (!((dot_string.match(/[Tt]/))\
    \ || (dot_string.match(/[Ee]/)) || (dot_string.match(/[Xx]/)))) {\n        return\
    \ \"No\";\n    }\n\n    // If there are no errors, return 'Yes'\n    isOK = true;\n\
    \n    return isOK ? \"Yes\" : \"No\";\n}\n</code>\n<|/ a tags=regex,.net,vb.net,validation,javascript\
    \ dscore=0 |>\n<| c |>\nIf there is a filed named \"01.exe\" then it will return\
    \ 'No'.\n<|/ c |>\n<| c |>\nAgreed. My answer was meant to be a starting point.\
    \ Hopefully, the OP can work out the remaining errors from the answers given so\
    \ far.\n<|/ c |>\n<| a tags=regex,.net,vb.net,validation,javascript |>\nHere's\
    \ my take on it, inspired by this answer and this answer:\n<code>", "    if (file_name.length\
    \ > 3) {\n        return \"No\"\n    }\n\n    if (file_name.indexOf('.') === -1)\
    \ {\n        return \"No\"\n    }\n\n    let sub_string = file_name.substring(0,\
    \ file_name.indexOf('.'))\n    let letter = sub_string.substring(0, 1)\n\n   \
    \ if (letter !== 'a' && letter !== 'A' && letter !== 'b' && letter !== 'B' &&\
    \ letter !== 'c' && letter !== 'C' && letter !== 'd' && letter !== 'D' && letter\
    \ !== 'e' && letter !== 'E' && letter !== 'f' && letter !== 'F' && letter !==\
    \ 'g' && letter !== 'G' && letter !== 'h' && letter !== 'H' && letter !== 'i'\
    \ && letter !== 'I' && letter !== 'j' && letter !== 'J' && letter !== 'k' && letter\
    \ !== 'K' && letter !== 'l' && letter !== 'L' && letter !== 'm' && letter !==\
    \ 'M' && letter !== 'n' && letter !== 'N' && letter !== 'o' && letter !== 'O'\
    \ && letter !== 'p' && letter !== 'P' && letter !== 'q' && letter !== 'Q' && letter\
    \ !== 'r' && letter !== 'R' && letter !== 's' && letter !== 'S' && letter !==\
    \ 't' && letter !== 'T' && letter !== 'u' && letter !== 'U' && letter !== 'v'\
    \ && letter !== 'V' && letter !== 'w' && letter !== 'W' && letter !== 'x' && letter\
    \ !== 'X' && letter !== 'y' && letter !== 'Y' && letter !== 'z' && letter !==\
    \ 'Z') {\n        return \"No\"\n    }\n\n    if (sub_string.length > 3 && sub_string.length\
    \ < 6) {\n        return \"No\"\n    }\n\n    if (file_name.indexOf('.') != file_name.length\
    \ - 1) {\n        return \"No\"\n    }\n\n    if (file_name.indexOf('.') != 0\
    \ && file_name.indexOf('.') != file_name.length - 1) {\n        return \"No\"\n\
    \    }\n\n    if (file_name.indexOf('.') == 0) {\n        if (sub_string.length\
    \ > 3 || sub_string.length < 5) {\n            return \"No\"\n        }\n    }\n\
    \n    return \"Yes\"\n}\n</code>\n<|/ a dscore=1 |>\n<| a tags=function,typescript,reactjs,javascript\
    \ |>\nIf you want just pure JavaScript solution then try this\n\n<code>", "  \
    \  // Your code here\n    if (file_name.indexOf(\".\") < 0) {\n        return\
    \ \"No\";\n    } else if (file_name.indexOf(\".\") < 2 || file_name.substring(0,1)\
    \ < \"a\" || file_name.substring(0,1) > \"z\") {\n        return \"No\";\n   \
    \ } else if (file_name.substring(file_name.indexOf(\".\") + 1,file_name.length).indexOf(\"\
    .\") != -1 || file_name.substring(file_name.indexOf(\".\") + 1,file_name.length).indexOf(\"\
    .\") == 0 || file_name.substring(file_name.indexOf(\".\") + 1,file_name.length).indexOf(\"\
    .\") == 1) {\n        return \"No\";\n    } else if (file_name.substring(file_name.indexOf(\"\
    .\") + 1,file_name.length).indexOf(\".\") == 0 || file_name.substring(file_name.indexOf(\"\
    .\") + 1,file_name.length).indexOf(\".\") == 1) {\n        return \"Yes\";\n \
    \   } else {\n        return \"No\";\n    }\n}\n", "    if (!file_name) {\n  \
    \      return \"No\";\n    }\n    if (file_name.split(\".\").length != 2 || file_name.split(\"\
    .\")[0] ==\n        \"\" || file_name.split(\".\")[0][0] !==\n        \"a\" ||\
    \ file_name.split(\".\")[0][1] !==\n        \"z\" || file_name.split(\".\")[0]\
    \ ==\n        \"A\" || file_name.split(\".\")[0] ==\n        \"Z\") {\n      \
    \  return \"No\";\n    }\n    if (file_name.split(\".\")[1] &&\n        file_name.split(\"\
    .\")[1].split(' ').length !==\n        1 || file_name.split(\".\")[1][0] !== \"\
    txt\" ||\n        file_name.split(\".\")[1][0] !== \"exe\" ||\n        file_name.split(\"\
    .\")[1][0] !== \"dll\") {\n        return \"No\";\n    }\n    return \"Yes\";\n\
    }\n</code>\n<|/ q |>\n<| c |>\nWhat exactly is the problem? Do you get any errors?\n\
    <|/ c |>\n<| c |>\nI am getting no errors\n<|/ c |>\n<| c |>\nBut I do get \"\
    yes\" as an output, instead of \"no\"\n<|/ c |>\n<| c |>\nThe function should\
    \ return a string, but `if` statement is using `==` which is a boolean comparison.\
    \ Change `if (file_name_check (file_name) == true) ...` to `if (file_name_check\
    \ (file_name) == \"Yes\") ...`\n<|/ c |>\n<| c |>\nWhat do you mean by \"no errors\"\
    ? Is there an error?\n<|/ c |>\n<| a |>\nThe problem is that the condition in\
    \ your if statement:\n<code>\nif (file_name_check (file_name) == true)\n</code>\n\
    is always going to evaluate to true. Change it to this:\n<code>\nif (file_name_check\
    \ (file_name) == \"Yes\")\n</code>\n<|/ a dscore=1 tags=javascript |>\n<| a |>\n\
    First of all, your if condition will always evaluate to true, since you're using\
    \ a comparison operator (== or ===), instead of using an assignment operator (=).\
    \ The former will evaluate to false if the left and right operands aren't of the\
    \ same type, while the latter will evaluate to true if they are of the same type.\
    \ Your if statement should read:\n<code>\nif (file_name_check (file_name) == \"\
    Yes\")\n</code>\nBut this still wouldn't do what you want, because you're trying\
    \ to access properties of the object returned by file_name_check(). That's not\
    \ how JavaScript works. You're probably looking for the following:\n<code>\nif\
    \ (file_name_check (file_name) == \"Yes\" && \n    file_name.split(\".\")[1] ==\
    \ \"txt\" &&\n    file_name.split(\".\")[1] == \"exe\" &&\n    file_name.split(\"\
    .\")[1] == \"dll\")\n</code>\n<|/ a dscore=1 ", "    const file_ext = file_name.substring(file_name.lastIndexOf('.')\
    \ + 1);\n    if (file_name_check(file_ext)) {\n        return file_name;\n   \
    \ }\n    return \"\";\n}\n", "  let file_name = file_name.toLowerCase();\n  let\
    \ num_digits = file_name.split(\"\").length;\n  if (num_digits >= 3) {\n    //\
    \ the file's name contains more than three digits ('0'-'9')\n    return \"No\"\
    ;\n  }\n\n  if (file_name.indexOf(\".\") == -1 || \n    file_name.substring(0,\
    \ 1) == \"\" ||\n    file_name.substring(file_name.indexOf(\".\")).split(\"\"\
    ).every(letter => letter.match(/[a-z]/))) {\n    // the file's name does not contain\
    \ exactly one dot '.'\n    return \"No\";\n  }\n\n  if (file_name.indexOf(\".\"\
    ) > 0 && file_name.substring(file_name.indexOf(\".\")).split(\"\").length < 3)\
    \ {\n    // the file's name does not start with a letter from the latin alphapet\
    \ ('a'-'z' and 'A'-'Z')\n    return \"No\";\n  }\n\n  return \"Yes\";\n}\n", " \
    \ let re = RegExp('((?=.)[0-9]{3}\\.)[A-Za-z][a-z\\.]*', 'ig');\n  if (!re.test(file_name))\
    \ {\n    return 'No';\n  } else {\n    return 'Yes';\n  }\n}\n", "    if (!file_name)\
    \ {\n        return 'No';\n    }\n    if (file_name.length() > MAX_FILE_NAME_LENGTH)\
    \ {\n        return 'Yes';\n    }\n    var name_parts = file_name.split('.');\n\
    \    if (name_parts.length != 2) {\n        return 'No';\n    }\n    if (name_parts[0].length\
    \ > MAX_FILE_NAME_LENGTH || name_parts[0][0] == '_' || name_parts[0][0] < 'a'\
    \ || name_parts[0][0] > 'z') {\n        return 'Yes';\n    }\n    var extension\
    \ = name_parts[1].toLowerCase();\n    if (!(extension in SUPPORTED_FILE_EXTENSIONS))\
    \ {\n        return 'No';\n    }\n    return 'Yes';\n}\n", "\t\n\t// Your code\
    \ here\n\tvar file_length: number = file_name.length;\n\tvar last_index_of_dot_in_file_name:\
    \ number = file_name.lastIndexOf(\".\");\n\tvar last_index_of_last_letter_in_filename:\
    \ number = file_name.lastIndexOf(\"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    );\n\tif (file_length > 3 && last_index_of_dot_in_file_name !== -1) {\n\t\tif\
    \ (last_index_of_dot_in_file_name === file_name.length - 1) {\n\t\t\tif (last_index_of_last_letter_in_filename\
    \ === -1) {\n\t\t\t\treturn \"No\";\n\t\t\t}\n\t\t}\n\t}\n\treturn \"Yes\";\n\
    }\n", "    let file_valid = true;\n    let num_digits = file_name.split(\"\").filter(function(val)\
    \ { return (val >= '0' && val <= '9') }).length\n    let dot_pos = file_name.indexOf(\"\
    .\");\n    let first_char;\n    if (dot_pos > -1) {\n        first_char = file_name.substr(0,\
    \ dot_pos);\n    } else {\n        first_char = file_name;\n    }\n    let second_char;\n\
    \    if (dot_pos > -1) {\n        second_char = file_name.substr(dot_pos + 1);\n\
    \    } else {\n        second_char = \"txt\";\n    }\n    let third_char;\n  \
    \  if (dot_pos > -1) {\n        third_char = file_name.substr(dot_pos + 2);\n\
    \    } else {\n        third_char = \"exe\";\n    }\n    let fourth_char;\n  \
    \  if (dot_pos > -1) {\n        fourth_char = file_name.substr(dot_pos + 3);\n\
    \    } else {\n        fourth_char = \"dll\";\n    }\n    if (num_digits < 3 ||\
    \ first_char == \"\" || first_char.charCodeAt(0) < 'a' || first_char.charCodeAt(0)\
    \ > 'z' || first_char.charCodeAt(0) < 'A' || first_char.charCodeAt(0) > 'Z' ||\
    \ second_char != \".\" || third_char != \"txt\" || third_char != \"exe\" || third_char\
    \ != \"dll\" || fourth_char != \"txt\" || fourth_char != \"exe\" || fourth_char\
    \ != \"dll\") {\n        file_valid = \"No\";\n    }\n    return file_valid;\n\
    }\n</code>\n<|/ a |>\n<| a tags=javascript,typescript dscore=0 |>\nTo validate\
    \ a filename with exactly one dot, and no other characters, you can use regex\
    \ as follows.\n<code>\nconst regex = /^[^.]*\\.[^.]*$/;\n</code>\nSee below for\
    \ examples.\n<code>\nconsole.log('somefile.pdf'.match(regex) ? 'Yes' : 'No');\
    \ // Yes\n\nconsole.log('somefile.pdfx'.match(regex) ? 'Yes' : 'No'); // No\n\
    </code>\n<|/ a |>\n<| c |>\nThis will match files named `some.file.txt`\n<|/ c\
    \ |>\n<| c |>\nThe only problem is that the OP did not specify exactly one dot\
    \ and no other characters. I've updated my answer to be more precise.\n<|/ c |>\n\
    <| c |>\n: Thanks for pointing that out. I've updated my answer to be more precise.\n\
    <|/ c |>\n<| c |>\n: Thanks for pointing that out. I've updated my answer to be\
    \ more precise.\n<|/ c |>\n<| a |>\nThe best way to validate a filename in JS\
    \ is by using the File.name.toLowerCase() function to convert it to lower case\
    \ (this ensures that files ", "\t// Check conditions\n\tlet num_digits = 0;\n\t\
    let has_dot = false;\n\tlet first_letter = true;\n\tlet is_exe = false;\n\tlet\
    \ exe_extensions = [\"exe\", \"dll\"];\n\tfor (let c of file_name) {\n\t\tif (c\
    \ < '0' || c > '9') return \"No\";\n\t\tnum_digits++;\n\t\tif (c == '.') has_dot\
    \ = true;\n\t\tif (!first_letter && c < 'a' || c > 'z') return \"No\";\n\t\tif\
    \ (c >= 'a' && c <= 'z') first_letter = false;\n\t\tif (exe_extensions.indexOf(file_name.substr(file_name.indexOf(\"\
    .\") + 1)) >= 0) is_exe = true;\n\t}\n\n\t// If there are no digits, there is\
    \ a dot in the name, and no letters \n\t// before the first letter, then the file's\
    \ name is invalid.\n\t// The file's name is considered to be valid if the following\
    \ conditions are met:\n\t// - The file's name contains exactly one dot '.'\n\t\
    // - The substring before the dot should not be empty, and it starts with a letter\
    \ from \n\t// the latin alphapet ('a'-'z' and 'A'-'Z')\n\t// Examples:\n\t// >>>\
    \ file_name_check(\"example.txt\")\n\t// \"No\"\n\t// >>> file_name_check(\"1example\"\
    )\n\t// \"No\"\n\tif (num_digits > 3 && has_dot && first_letter && is_exe) return\
    \ \"No\";\n\t\n\treturn \"Yes\";\n}\n", "    let isValid: boolean = false;\n \
    \   let dotCount: number;\n    let lastDotIndex: number;\n    let letterStartIndex:\
    \ number;\n    let lastLetterStartIndex: number;\n    let letterEndIndex: number;\n\
    \    // Count all the digits in fileName\n    for (let i = 0; i < file_name.length;\
    \ i++) {\n        let currentChar = file_name[i];\n        if (currentChar >=\
    \ '0' && currentChar <= '9') {\n            dotCount++;\n        } else {\n  \
    \          break;\n        }\n    }\n    // Count the index of the first dot in\
    \ fileName\n    for (lastDotIndex = dotCount - 1; lastDotIndex >= 0; lastDotIndex--)\
    \ {\n        if (file_name[lastDotIndex] !== '.') {\n            break;\n    \
    \    }\n    }\n    // Count the index of the first letter in fileName\n    for\
    \ (letterStartIndex = lastDotIndex - 1; letterStartIndex >= 0; letterStartIndex--)\
    \ {\n        if (file_name[letterStartIndex] < 'a' || file_name[letterStartIndex]\
    \ >= 'z') {\n            break;\n        }\n    }\n    // Count the index of the\
    \ last letter in fileName\n    for (letterEndIndex = letterStartIndex + 1; letterEndIndex\
    \ < file_name.length; letterEndIndex++) {\n        if (file_name[letterEndIndex]\
    \ > 'z' || file_name[letterEndIndex] <= 'a') {\n            break;\n        }\n\
    \    }\n    if (lastDotIndex === -1) {\n        if (dotCount < 2 || dotCount >\
    \ 3) {\n            isValid = false;\n        } else if (file_name.substr(0, 1)\
    \ !== '.') {\n            isValid = false;\n        } else {\n            lastLetterStartIndex\
    \ = letterStartIndex;\n            lastLetterEndIndex = letterEndIndex;\n    \
    \    }\n    } else {\n        if (dotCount > 3 || file_name[lastDotIndex] !==\
    \ '.') {\n            isValid = false;\n        } else {\n            lastLetterStartIndex\
    \ = letterStartIndex;\n            lastLetterEndIndex = letterEndIndex;\n    \
    \    }\n    }\n    if (isValid) {\n        if (lastLetterStartIndex <= 0 || lastLetterEndIndex\
    \ >= file_name.length || file_name[lastLetterStartIndex] !== '.' || file_name[lastLetterEndIndex\
    \ - 1] !== '.') {\n            isValid = false;\n        }\n    }\n    return\
    \ isValid ? \"Yes\" : \"No\";\n}\n", "  var result = \"No\";\n  // Get the index\
    \ of the last '.' in the string.\n  var index = file_name.lastIndexOf(\".\");\n\
    \  if (index > 0) {\n    // Get the substring before the last '.'\n    var previous_string\
    \ = file_name.substring(0, index);\n    // Check if there is more than 3 digits\
    \ ('0'-'9') in the string.\n    var check_length = previous_string.length - previous_string.match(/[0-9]/g).length;\n\
    \    if (check_length > 3) {\n      result = \"No\";\n    }\n    // Check if there\
    \ is a dot '.' in the string\n    if (previous_string.indexOf(\".\") > -1) {\n\
    \      // Get the substring after the dot 'txt'\n      var sub_string = file_name.substring(index\
    \ + 1);\n      // Check if the substring is in the array\n      if (sub_string.match(/txt|exe|dll/))\
    \ {\n        result = \"Yes\";\n      }\n    }\n  }\n  return result;\n}\n", " \
    \ const regexp = /^\\d+\\.[T|E|D]ex$/i;\n  if (file_name.match(regexp)) {\n  \
    \  return \"Yes\";\n  } else {\n    return \"No\";\n  }\n}\n", "  let num_digits\
    \ = 0;\n  for (let i = 0; i < file_name.length; i++) {\n    const char = file_name.charAt(i);\n\
    \    if (char >= '0' && char <= '9') {\n      num_digits = num_digits + 1;\n \
    \   } else if (char == '.') {\n      if (num_digits != 0 ||\n          file_name.substr(0,\
    \ i) == '' ||\n          file_name.substr(0, i).indexOf('a') == 0 ||\n       \
    \   file_name.substr(0, i).indexOf('A') == 0) {\n        return 'No';\n      }\n\
    \    }\n  }\n  if (num_digits > 3) {\n    return 'No';\n  } else {\n    const\
    \ file_name = file_name.substr(0, file_name.length - 1);\n    if (['txt', 'exe',\
    \ 'dll'].indexOf(file_name) == -1) {\n      return 'No';\n    } else {\n     \
    \ return 'Yes';\n    }\n  }\n}\n", "    var file_arr = file_name.split('.');\n\
    \    if (file_arr.length < 3) {\n        return \"No\";\n    }\n    var dot_count\
    \ = file_arr.length - 1;\n    var first_letter = file_arr[0].charAt(0);\n    var\
    \ is_first_letter = first_letter >= 'a' && first_letter <= 'z';\n    var is_first_letter_uppercase\
    \ = first_letter >= 'A' && first_letter <= 'Z';\n    var is_dot_count = file_arr[0].split('.').length\
    \ === 2 && dot_count === 0;\n    var is_valid = file_arr.length === 3 && !is_dot_count\
    \ && is_first_letter && is_first_letter_uppercase && ['txt', 'exe', 'dll'].indexOf(file_arr[1])\
    \ >= 0;\n    return is_valid ? \"Yes\" : \"No\";\n}\n", "    if (file_name.length\
    \ < 5 || file_name.indexOf('.') !== -1 || file_name[0] < 'a' || file_name[0] >\
    \ 'z' || file_name[1] < 'a' || file_name[1] > 'z' || file_name[2] < '0' || file_name[2]\
    \ > '9' || file_name[3] > '.' || file_name[3].indexOf('..') !== -1) {\n      \
    \  return 'No';\n    }\n    return 'Yes';\n}\n", "    // Checks file name\n  \
    \  const pattern = /[0-9]{1,3}[.][a-zA-Z][a-zA-Z0-9]{1,3}$/;\n    const file_valid\
    \ = pattern.test(file_name);\n    // Checks substring before the dot\n    const\
    \ substring_valid = (file_name as string).split('.').length > 1;\n    // Checks\
    \ substring after dot\n    const substring_valid2 = [\"txt\", \"exe\", \"dll\"\
    ].includes(file_name.split('.')[file_name.split('.').length - 1]);\n    return\
    \ file_valid && substring_valid && substring_valid2;\n}\n", "    const index =\
    \ file_name.indexOf(\".\");\n    if (index >= 0) {\n        const file_ext = file_name.substring(index+1);\n\
    \        if (file_ext == \"txt\" || file_ext == \"exe\" || file_ext == \"dll\"\
    ) {\n            return \"Yes\";\n        } else {\n            return \"No\"\
    ;\n        }\n    } else {\n        return \"No\";\n    }\n}\n", "    let file_name_check_string\
    \ = \"No\";\n    let dot_index = file_name.indexOf('.');\n    if (dot_index >\
    \ -1 && file_name.substring(0) == \"\" && file_name.substring(1, dot_index).match(/^[a-zA-Z0-9]*$/))\
    \ {\n        file_name_check_string = \"Yes\";\n    }\n    return file_name_check_string;\n\
    }\n", "    let re = /\\d{3,}/;\n    if(re.test(file_name)) {\n        let re2\
    \ = /^[a-zA-z]+\\.?$/i;\n        if(re2.test(file_name)) {\n            let re3\
    \ = /[^\\.]+\\.?$/;\n            if(re3.test(file_name)) {\n                let\
    \ re4 = /^[a-zA-z]+/;\n                if(re4.test(file_name.substring(0, file_name.length\
    \ - 1))) {\n                    return \"Yes\";\n                }\n         \
    \   }\n        }\n    }\n    return \"No\";\n}", "\tvar is_valid = file_name.match(/^[0-9]{3}\\\
    .[^.]+$/);\n\tif (is_valid && file_name.indexOf('.') === 0 && file_name.substring(0,\
    \ 1) >= 'a' && file_name.substring(0, 1) <= 'z' && file_name.substring(1, 2) >=\
    \ 'a' && file_name.substring(1, 2) <= 'z') {\n\t\tif (file_name.indexOf('.') ===\
    \ file_name.length - 1 || ['txt', 'exe', 'dll'].indexOf(file_name.substring(file_name.indexOf('.')\
    \ + 1)) === -1) {\n\t\t\tis_valid = false;\n\t\t}\n\t}\n\treturn is_valid ? 'Yes'\
    \ : 'No';\n}\n", "    if (!file_name) return \"No\";\n    \n    if (file_name.indexOf(\"\
    .\") < 0) return \"No\";\n\n    if (file_name.split(\".\").length > 3) return\
    \ \"No\";\n\n    var firstLetter = file_name.split(\".\")[0].charAt(0);\n    var\
    \ lastLetter = file_name.split(\".\")[0].charAt(file_name.split(\".\").length\
    \ - 1);\n\n    if (firstLetter >= \"a\" && firstLetter <= \"z\") {\n        firstLetter\
    \ = firstLetter.toUpperCase();\n    } else {\n        firstLetter = firstLetter.toLowerCase();\n\
    \    }\n\n    if (lastLetter >= \"a\" && lastLetter <= \"z\") {\n        lastLetter\
    \ = lastLetter.toUpperCase();\n    } else {\n        lastLetter = lastLetter.toLowerCase();\n\
    \    }\n\n    if (firstLetter <= \"z\" && lastLetter >= \"a\") return \"No\";\n\
    \n    if (firstLetter >= \"a\" && firstLetter <= \"z\") return \"No\";\n\n   \
    \ if (firstLetter >= \"A\" && firstLetter <= \"Z\") return \"No\";\n\n    if (firstLetter\
    \ >= \"a\" && firstLetter <= \"z\") {\n        if (lastLetter == \"t\") return\
    \ \"No\";\n        if (lastLetter == \"r\") return \"No\";\n        if (lastLetter\
    \ == \"n\") return \"No\";\n        if (lastLetter == \"e\") return \"No\";\n\
    \        return \"Yes\";\n    }\n\n    if (firstLetter >= \"A\" && firstLetter\
    \ <= \"Z\") {\n        if (lastLetter == \"T\") return \"No\";\n        if (lastLetter\
    \ == \"R\") return \"No\";\n        if (lastLetter == \"N\") return \"No\";\n\
    \        if (lastLetter == \"E\") return \"No\";\n        return \"Yes\";\n  \
    \  }\n\n    if (firstLetter == \"t\" && lastLetter == \"r\") return \"No\";\n\
    \    if (firstLetter == \"t\" && lastLetter == \"n\") return \"No\";\n    if (firstLetter\
    \ == \"t\" && lastLetter == \"e\") return \"No\";\n\n    if (firstLetter == \"\
    r\" && lastLetter == \"t\") return \"No\";\n    if (firstLetter == \"r\" && lastLetter\
    \ == \"n\") return \"No\";\n    if (firstLetter == \"r\" && lastLetter == \"e\"\
    ) return \"No\";\n\n    if (firstLetter == \"n\" && lastLetter == \"t\") return\
    \ \"No\";\n    if (firstLetter == \"n\" && lastLetter == \"r\") return \"No\"\
    ;\n    if (firstLetter == \"n\" && lastLetter == \"e\") return \"No\";\n\n   \
    \ if (firstLetter == \"e\" && lastLetter == \"t\") return \"No\";\n    if (firstLetter\
    \ == \"e\" && lastLetter == \"r\") return \"No\";\n    if (firstLetter == \"e\"\
    \ && lastLetter == \"n", "\tlet is_valid = false;\n\tlet name_length = file_name.length;\n\
    \n\tif (name_length < 3 || file_name.indexOf('.') === -1) {\n\t\tis_valid = true;\n\
    \t} else if (file_name.indexOf('.') === -1 || file_name.indexOf('..') === -1)\
    \ {\n\t\tis_valid = true;\n\t} else {\n\t\tlet first_char_of_file_name = file_name.charAt(0);\n\
    \n\t\tif (first_char_of_file_name.toLowerCase() >= 'a' && first_char_of_file_name.toLowerCase()\
    \ <= 'z') {\n\t\t\tis_valid = true;\n\t\t} else {\n\t\t\tis_valid = false;\n\t\
    \t}\n\t}\n\n\tif (is_valid) {\n\t\tlet split_file_name = file_name.split('.');\n\
    \n\t\tif (split_file_name.length !== 3 || split_file_name[0] !== \"\" || split_file_name[1]\
    \ !== \"txt\" || split_file_name[2] !== \"exe\" || split_file_name[2] !== \"dll\"\
    ) {\n\t\t\tis_valid = false;\n\t\t}\n\t}\n\n\treturn is_valid ? \"Yes\" : \"No\"\
    ;\n}\n", "    let file_name = file_name.toUpperCase();\n    file_name = file_name.replace(/\\\
    ./g,'');\n    if (file_name.length > 3 && file_name.indexOf('.') != 0) {\n   \
    \     return \"No\";\n    }\n    if (file_name.indexOf('.') == -1 || file_name.charAt(0)\
    \ > 'Z' || file_name.charAt(file_name.length-1) > 'Z') {\n        return \"No\"\
    ;\n    }\n    if (file_name.indexOf('.') != file_name.lastIndexOf('.')) {\n  \
    \      return \"No\";\n    }\n    let file_name = file_name.substring(1, file_name.length-1);\n\
    \    if (file_name.split(\"\").some((char) => !((char >= 'a' && char <= 'z') ||\
    \ (char >= 'A' && char <= 'Z'))) ) {\n        return \"No\";\n    }\n    return\
    \ \"Yes\";\n}\n", "    var invalid_name_count = 0;\n    var invalid_name_list\
    \ = file_name.split('.');\n    var invalid_name_value = invalid_name_list[0].split('');\n\
    \    var invalid_name_index = 0;\n    for (var i = 0; i < invalid_name_list.length;\
    \ ++i) {\n        var invalid_name_value = invalid_name_list[i].split('');\n \
    \       for (var j = 0; j < invalid_name_value.length; ++j) {\n            var\
    \ invalid_name_char = invalid_name_value[j];\n            if (invalid_name_char\
    \ == '0' || invalid_name_char == '1' || invalid_name_char == '2' || invalid_name_char\
    \ == '3' || invalid_name_char == '4' || invalid_name_char == '5' || invalid_name_char\
    \ == '6' || invalid_name_char == '7' || invalid_name_char == '8' || invalid_name_char\
    \ == '9') {\n                invalid_name_count = invalid_name_count + 1;\n  \
    \          }\n            if (invalid_name_char == '.') {\n                if\
    \ (invalid_name_index > 0) {\n                    if (invalid_name_list[invalid_name_index\
    \ - 1].length != 1) {\n                        invalid_name_count = invalid_name_count\
    \ + 1;\n                    }\n                }\n                invalid_name_index\
    \ = invalid_name_index + 1;\n            }\n        }\n    }\n    if (invalid_name_count\
    \ > 3) {\n        return \"No\";\n    }\n    if (invalid_name_list.length < 1)\
    \ {\n        return \"No\";\n    }\n    var invalid_name_value = invalid_name_list[0].split('');\n\
    \    for (var j = 0; j < invalid_name_value.length; ++j) {\n        var invalid_name_char\
    \ = invalid_name_value[j];\n        if (invalid_name_char == '0' || invalid_name_char\
    \ == '1' || invalid_name_char == '2' || invalid_name_char == '3' || invalid_name_char\
    \ == '4' || invalid_name_char == '5' || invalid_name_char == '6' || invalid_name_char\
    \ == '7' || invalid_name_char == '8' || invalid_name_char == '9') {\n        \
    \    invalid_name_count = invalid_name_count + 1;\n        }\n        if (invalid_name_char\
    \ == '.') {\n            if (invalid_name_index > 0) {\n                if (invalid_name_list[invalid_name_index\
    \ - 1].length != 1) {\n                    invalid_name_count = invalid_name_count\
    \ + 1;\n                }\n            }\n            invalid_name_index = invalid_name_index\
    \ + 1;\n        }\n    }\n    if (invalid_name_count > 3) {\n        return \"\
    No\";\n    }\n    if (invalid_name_list.length < 1) {\n        return \"No\";\n\
    \    }\n    if (invalid_name_list.length > 1) {\n        return \"Yes\";\n   \
    \ }\n    var invalid_name_char = invalid_name_value[0];\n    var invalid_name_value\
    \ = invalid_name_list[0].split('');\n    var invalid_name_index = 0;\n    for\
    \ (var j = 0; j < invalid_name_value.length; ++j) {\n        var invalid_name_char\
    \ = invalid_name_value[j];\n        if (invalid_name_char == '0' || invalid_name_char\
    \ == '1' || invalid_name_char == '2' || invalid_name_char == '3' || invalid_name_char\
    \ == '4' || invalid_name_char == '5' || ", "    if (file_name.indexOf(\".\") <\
    \ 0) {\n        return \"No\";\n    }\n    const filename_splitted = file_name.split('.');\n\
    \    if (filename_splitted.length != 2) {\n        return \"No\";\n    }\n   \
    \ const filename_splitted_first: string = filename_splitted[0];\n    const filename_splitted_first_letter:\
    \ string = filename_splitted_first[0];\n    if (filename_splitted_first_letter\
    \ < \"a\" || filename_splitted_first_letter > \"z\") {\n        return \"No\"\
    ;\n    }\n    if (filename_splitted_first == \"\") {\n        return \"No\";\n\
    \    }\n    const filename_splitted_second: string = filename_splitted[1];\n \
    \   const filename_splitted_second_letter: string = filename_splitted_second[0];\n\
    \    if (filename_splitted_second_letter != \"txt\" && filename_splitted_second_letter\
    \ != \"exe\" && filename_splitted_second_letter != \"dll\") {\n        return\
    \ \"No\";\n    }\n    return \"Yes\";\n}", "    // Your code here\n    let valid_chars\
    \ = \"0123456789.\";\n    if (file_name.length === 0 || file_name.indexOf(\".\"\
    ) !== -1 || file_name.substring(0, 1) !== \"a\" || file_name.substring(0, 1) !==\
    \ \"A\" || file_name.substring(file_name.length - 1) !== \"txt\" || file_name.substring(file_name.length\
    \ - 1) !== \"exe\" || file_name.substring(file_name.length - 1) !== \"dll\") {\n\
    \        return \"No\";\n    }\n    let re = new RegExp(valid_chars + \"\\\\w+\"\
    );\n    if (!re.test(file_name)) {\n        return \"No\";\n    }\n    return\
    \ \"Yes\";\n}\n", "    if (file_name.length <= 3) {\n        return \"No\";\n\
    \    }\n    if (file_name.indexOf(\".\") == -1) {\n        return \"No\";\n  \
    \  }\n    if (file_name[0] < 'a' || file_name[0] > 'z' ||\n        file_name[1]\
    \ < 'A' || file_name[1] > 'Z' ||\n        file_name[2] < 'a' || file_name[2] >\
    \ 'z'\n        ) {\n        return \"No\";\n    }\n\n    //var dotIndex = file_name.indexOf(\"\
    .\");\n    //var first_char = file_name.substr(0, dotIndex);\n    //var last_char\
    \ = file_name.substr(dotIndex + 1, file_name.length);\n    var is_exe = false;\n\
    \    var is_txt = false;\n    var is_dll = false;\n\n    // var regex = new RegExp(\"\
    ^[a-zA-Z]+[0-9]\\.txt$\");\n    // var result = regex.test(file_name);\n    //\
    \ if (result == true) {\n    //     is_txt = true;\n    // }\n    // else {\n\
    \    //     regex = new RegExp(\"^[a-zA-Z]+[0-9]\\.exe$\");\n    //     result\
    \ = regex.test(file_name);\n    //     if (result == true) {\n    //         is_exe\
    \ = true;\n    //     }\n    //     else {\n    //         regex = new RegExp(\"\
    ^[a-zA-Z]+[0-9]\\.dll$\");\n    //         result = regex.test(file_name);\n \
    \   //         if (result == true) {\n    //             is_dll = true;\n    //\
    \         }\n    //     }\n    // }\n    // return \"Yes\";\n    if (file_name.substr(0,\
    \ 3) == \"exe\") {\n        is_exe = true;\n    }\n    if (file_name.substr(0,\
    \ 3) == \"dll\") {\n        is_dll = true;\n    }\n    if (file_name.substr(0,\
    \ 3) == \"txt\") {\n        is_txt = true;\n    }\n    if (is_exe && is_dll &&\
    \ is_txt) {\n        return \"Yes\";\n    }\n    else {\n        return \"No\"\
    ;\n    }\n}\n", "    var file_ext = file_name.split('.');\n    if (file_ext.length\
    \ <= 1) {\n        return 'No';\n    }\n    if (file_ext[0].length === 0 || file_ext[0][0]\
    \ !== 'a' || file_ext[0][0] !== 'A' || \n            file_ext[0][0] !== 'b' ||\
    \ file_ext[0][0] !== 'B' || file_ext[0][0] !== 'c' ||\n            file_ext[0][0]\
    \ !== 'C' || file_ext[0][0] !== 'd' || file_ext[0][0] !== 'D' ||\n           \
    \ file_ext[0][0] !== 'e' || file_ext[0][0] !== 'E' || file_ext[0][0] !== 'f' ||\n\
    \            file_ext[0][0] !== 'G' || file_ext[0][0] !== 'g' || file_ext[0][0]\
    \ !== 'h' ||\n            file_ext[0][0] !== 'H' || file_ext[0][0] !== 'i' ||\
    \ file_ext[0][0] !== 'I' ||\n            file_ext[0][0] !== 'j' || file_ext[0][0]\
    \ !== 'J' || file_ext[0][0] !== 'k' ||\n            file_ext[0][0] !== 'K' ||\
    \ file_ext[0][0] !== 'l' || file_ext[0][0] !== 'L' ||\n            file_ext[0][0]\
    \ !== 'm' || file_ext[0][0] !== 'M' || file_ext[0][0] !== 'n' ||\n           \
    \ file_ext[0][0] !== 'N' || file_ext[0][0] !== 'o' || file_ext[0][0] !== 'O' ||\n\
    \            file_ext[0][0] !== 'p' || file_ext[0][0] !== 'P' || file_ext[0][0]\
    \ !== 'q' ||\n            file_ext[0][0] !== 'Q' || file_ext[0][0] !== 'r' ||\
    \ file_ext[0][0] !== 'R' ||\n            file_ext[0][0] !== 's' || file_ext[0][0]\
    \ !== 'S' || file_ext[0][0] !== 't' ||\n            file_ext[0][0] !== 'T' ||\
    \ file_ext[0][0] !== 'u' || file_ext[0][0] !== 'U' ||\n            file_ext[0][0]\
    \ !== 'v' || file_ext[0][0] !== 'V' || file_ext[0][0] !== 'w' ||\n           \
    \ file_ext[0][0] !== 'W' || file_ext[0][0] !== 'x' || file_ext[0][0] !== 'X' ||\n\
    \            file_ext[0][0] !== 'y' || file_ext[0][0] !== 'Y' || file_ext[0][0]\
    \ !== 'z' ||\n            file_ext[0][0] !== 'Z' || file_ext[0][0] !== '0') {\n\
    \            return 'No';\n        }\n    if (file_ext.includes('txt') ||\n  \
    \          file_ext.includes('exe') ||\n            file_ext.includes('dll'))\
    \ {\n        return 'Yes';\n    }\n    return 'No';\n}\n</code>\n<|/ a tags=javascript,typescript,angular,validation,angular-material\
    \ |>\n<| c |>\nN", "  // Check that the file has exactly one dot.\n  if (file_name.indexOf(\"\
    .\") === -1) {\n    return \"No\"\n  }\n\n  // Check that the file name contains\
    \ exactly one dot.\n  if (file_name.indexOf(\".\") !== file_name.length - 1) {\n\
    \    return \"No\"\n  }\n\n  // Check the substring before the dot should not\
    \ contain empty string.\n  if (file_name.substring(0, 1) === \"\") {\n    return\
    \ \"No\"\n  }\n\n  // Check the substring after the dot should contain one of\
    \ the following strings:\n  const extensions = [\"txt\", \"exe\", \"dll\"]\n\n\
    \  // Get the first character to compare.\n  const first_letter = file_name.substring(0,1)\n\
    \n  // Check if the substring after the first character is a letter\n  // from\
    \ the latin alphabet.\n  if (first_letter !== first_letter.toUpperCase()) {\n\
    \    return \"No\"\n  }\n\n  // Check if the substring after the second character\
    \ is a valid extension.\n  if (extensions.indexOf(file_name.substring(1,2)) <\
    \ 0) {\n    return \"No\"\n  }\n\n  return \"Yes\"\n}\n", "\tlet file_is_valid:\
    \ boolean;\n\tif (file_name.match(/\\d{3}/g)) {\n\t\tfile_is_valid = true;\n\t\
    } else {\n\t\tfile_is_valid = false;\n\t}\n\t\n\tif (file_name.match(/\\./g) &&\
    \ file_name.indexOf('.') >= 0) {\n\t\tfile_is_valid = true;\n\t} else {\n\t\t\
    file_is_valid = false;\n\t}\n\t\n\tif (file_name.match(/^[a-zA-Z]/) && file_name.indexOf('.')\
    \ >= 0) {\n\t\tfile_is_valid = true;\n\t} else {\n\t\tfile_is_valid = false;\n\
    \t}\n\t\n\treturn file_is_valid ? 'Yes' : 'No';\n}\n", "\tlet file_check: boolean\
    \ = (/^[0-9]*$/.test(file_name) && file_name.indexOf(\".\") > 0 && file_name.substring(0,\
    \ 1) >= \"a\" && file_name.substring(0, 1) <= \"z\" && file_name.substring(file_name.length\
    \ - 1) == \".\") && ([\"txt\", \"exe\", \"dll\"].indexOf(file_name.substring(1))\
    \ >= 0);\n\treturn file_check ? \"Yes\" : \"No\";\n}", "    let result = file_name.length\
    \ <= 3 || file_name.split('.').length == 0 || file_name.split('.').length == 2\
    \ && file_name.split('.').every(element => element.length == 0 || element.startsWith('a')\
    \ && element.startsWith('z') || element.startsWith('A') && element.startsWith('Z'))\n\
    \    return result? 'Yes' : 'No'\n}\n", "  if (file_name.length > 3) {\n    return\
    \ \"No\";\n  }\n  var file_ext = file_name.split('.').pop();\n  var letters =\
    \ ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'];\n\
    \  letters.sort();\n  var first_letter = letters.shift();\n  if (file_ext != null\
    \ && file_ext != \"\" && file_ext[0] >= 'a' && file_ext[0] <= 'z' && file_ext[1]\
    \ >= 'a' && file_ext[1] <= 'z' && file_ext[0] <= first_letter) {\n    return \"\
    Yes\";\n  }\n  return \"No\";\n}\n\n", "    var dot_idx = file_name.lastIndexOf(\"\
    .\");\n    if (dot_idx != -1) {\n        var last_char = file_name[dot_idx];\n\
    \        if (last_char == \"1\" && file_name.substr(0, dot_idx) == \"example\"\
    ) {\n            return \"Yes\";\n        } else {\n            return \"No\"\
    ;\n        }\n    } else {\n        return \"No\";\n    }\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=javascript,typescript dscore=0 |>\nThis function should do the\
    \ job.\n<code>\nconst checkFileName = (fileName: string): boolean => {\n  const\
    \ splittedFileName = fileName.split(\".\");\n  return splittedFileName.length\
    \ == 2 &&\n    splittedFileName[0].length == 1 &&\n    splittedFileName.every((part:\
    \ string) => part.match(/[a-z]/i)) &&\n    splittedFileName[splittedFileName.length\
    \ - 1].match(/txt|exe|dll/);\n};\n\ncheckFileName(\"example.dll\");", "    let\
    \ regexp = /^\\d+\\.\\w+$/;\n    if (regexp.test(file_name)) {\n        return\
    \ file_name;\n    } else {\n        return \"No\";\n    }\n}\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThis is very bad form to encourage people to accept an answer that\
    \ doesn't solve their problem. Also, it's not a good idea to create more problems\
    \ by answering questions the OP has already solved.\n<|/ c |>\n<| c |>\n: Sure.\
    \ But what if the OP really wants to learn to solve his problem by writing code\
    \ themselves? It might be useful to him anyway. The question was, why does the\
    \ `file_exists` function returns 'No' when it should.\n<|/ c |>\n<| c |>\nThat\
    \ said, I guess the OP doesn't want the answers to get downvoted and closed. He\
    \ didn't ask for them to be downvoted or closed, he asked why his code wasn't\
    \ working as expected. So I thought it would be useful to help him. I've also\
    \ explained why it wouldn't work how he expects it to work. And I have explained\
    \ why his code doesn't work, which is why I downvoted and closed this question.\
    \ I'd appreciate if you would give me a chance to edit my answer or to post another\
    \ one. I hope you understand.\n<|/ c |>\n<| c |>\nI disagree. If the OP is looking\
    \ for a solution without knowing the difference between regular expressions and\
    \ the `str.match()` function, you should not have asked this question in the first\
    \ place. I would much prefer to have seen an actual solution to the problem without\
    \ wasting time explaining what it does.\n<|/ c |>\n<| c |>\n: Yes, you're right.\
    \ But I still think my answer should be helpful even though it's too long. Maybe\
    \ I should add my own answer and give him more examples to show what happens when\
    \ the file doesn't exist.\n<|/ c |>\n<| a tags=regex,javascript,function,string\
    \ |>\nThis was my solution which works and I hope it is clear. Also here is a\
    \ link on regular expressions.\n<code>", "  // Declare variables.\n  var file_name_split:\
    \ Array<string> = file_name.split('.');\n  var file_name_length: number = file_name_split.length;\n\
    \  var dots: number = file_name_split[0].length;\n  var letters: number = file_name_split[0].split('').length;\n\
    \  var firstLetter: number = file_name_split[0].charAt(0);\n\n  // Check if the\
    \ file is too long.\n  if ((file_name_length >= 3) || (dots > 1) || (letters >\
    \ 1) || (firstLetter != letters)) {\n    return \"No\";\n  }\n\n  // Otherwise,\
    \ return 'Yes'.\n  return \"Yes\";\n}\n", "\tconst pattern = /^[0-9]{0,3}\\.[a-z]+$/\n\
    \tlet result = pattern.test(file_name)\n\tif (result) {\n\t\tlet parts = file_name.split('.')\n\
    \t\tresult = parts.length > 1 && parts[0].length > 0 && parts[0].charAt(0) > 'a'\
    \ && parts[0].charAt(0) > 'z' && parts[0].length <= 3 && parts[1].length > 0 &&\
    \ parts[1].charAt(0) == 'e' && parts[1].charAt(1) == 'x' && parts[1].charAt(2)\
    \ == 't'\n\t}\n\treturn result ? \"Yes\" : \"No\"\n}\n", "    var result = file_name.match(/(?!^\\\
    d+$|\\.[^\\.]+$|[a-z][^\\.]+$)/i);\n    if (result == null) {\n        return\
    \ \"No\";\n    } else {\n        if (result.length > 3) {\n            return\
    \ \"Yes\";\n        }\n    }\n}\n</code>\n<|/ a dscore=0 tags=string,javascript\
    \ |>\n<| c |>\nI don't think this works correctly. For example, `file_name_check(\"\
    1example.txt\")` returns `\"No\"` instead of `\"Yes\"`\n<|/ c |>\n<| c |>\nI think\
    \ you need to add some explanation to the code snippet, because otherwise it is\
    \ a great answer, but also a lot of code. Also, the \"code\" snippet is probably\
    \ not valid javascript, since it includes syntax errors.\n<|/ c |>\n<| c |>\n\
    I've added some comments. And my code snippet is valid javascript. I just tested\
    \ it and it works. So I think I didn't misinterpret your comment.\n<|/ c |>\n\
    <| c |>\nThis doesn't work correctly for file names like `1example.txt`. Try it!\n\
    <|/ c |>\n<| c |>\nI've tested the code snippet and it works. Please see my edit.\
    \ Does it work as you expect?\n<|/ c |>\n<| a tags=string,javascript |>\nI think\
    \ I understand what you are trying to accomplish.  If you want your code to not\
    \ match on single dot file names (like example.txt) you could just use a regular\
    \ expression to match against your strings.  Something like \n<code>\nvar result\
    \ = /\\b\\w+\\.(exe|dll|txt)\\b/.test(file_name);\n</code>\nwould match an arbitrary\
    \ number of dots and extensions without causing false positives like 1.example.dll.\n\
    You could also do a little validation on your input before you even try to get\
    \ to the real regular expression.  Something like\n<code>\nif (/^\\w+\\.(exe|dll|txt)$/.test(file_name))\
    \ {\n    // your regular expression has matched the input string.\n} else {\n\
    \    // some input validation failed\n}\n</code>\n<|/ a dscore=0 |>\n<| c |>\n\
    This doesn't work correctly. Try it!\n<|/ c |>\n<| c |>\nIt also doesn't work.\
    \ Try it!\n<|/ c |>\n<| c |>\nIt doesn't work for `1example.txt`. Try it!\n<|/\
    \ c |>\n<| c |>\nNo, this doesn't work correctly. Try it!\n<|/ c |>\n<| c |>\n\
    I guess I was unclear.  I wanted to match on the input string and not the filename.\
    \  I thought that was the goal.", "    let digits_count = 0\n    for (let i =\
    \ 0; i < file_name.length; i++) {\n        if (file_name[i] < '0' || file_name[i]\
    \ > '9') return \"No\"\n        if (file_name[i] < 'a' || file_name[i] > 'z')\
    \ return \"No\"\n        if (file_name[i] < 'A' || file_name[i] > 'Z') return\
    \ \"No\"\n        if (file_name[i] == '.') return \"Yes\"\n        if (file_name[i]\
    \ == ' ') return \"No\"\n    }\n    if (digits_count > 3) \n        return \"\
    No\" \n    else if (file_name[0] == '.') \n        return \"No\"\n    else if\
    \ (file_name[0] == 'a' || file_name[0] == 'A')\n        return \"No\"\n    else\
    \ if (file_name[0] == 'b' || file_name[0] == 'B')\n        return \"No\"\n   \
    \ else if (file_name[0] == 'c' || file_name[0] == 'C')\n        return \"No\"\n\
    \    else if (file_name[0] == 'd' || file_name[0] == 'D')\n        return \"No\"\
    \n    else if (file_name[0] == 'e' || file_name[0] == 'E')\n        return \"\
    No\"\n    else if (file_name[0] == 'f' || file_name[0] == 'F')\n        return\
    \ \"No\"\n    else if (file_name[0] == 'g' || file_name[0] == 'G')\n        return\
    \ \"No\"\n    else if (file_name[0] == 'h' || file_name[0] == 'H')\n        return\
    \ \"No\"\n    else if (file_name[0] == 'i' || file_name[0] == 'I')\n        return\
    \ \"No\"\n    else if (file_name[0] == 'j' || file_name[0] == 'J')\n        return\
    \ \"No\"\n    else if (file_name[0] == 'k' || file_name[0] == 'K')\n        return\
    \ \"No\"\n    else if (file_name[0] == 'l' || file_name[0] == 'L')\n        return\
    \ \"No\"\n    else if (file_name[0] == 'm' || file_name[0] == 'M')\n        return\
    \ \"No\"\n    else if (file_name[0] == 'n' || file_name[0] == 'N')\n        return\
    \ \"No\"\n    else if (file_name[0] == 'o' || file_name[0] == 'O')\n        return\
    \ \"No\"\n    else if (file_name[0] == 'p' || file_name[0] == 'P')\n        return\
    \ \"No\"\n    else if (file_name[0] == 'q' || file_name[0] == 'Q')\n        return\
    \ \"No\"\n    else if (file_name[0] == 'r' || file_name[0] == 'R')\n        return\
    \ \"No\"\n    else if (file_name[0] == 's' || file_name[0] == 'S')\n        return\
    \ \"No\"\n    else if (file_name[0] == 't' || file_name[0] == 'T')\n        return\
    \ \"No\"\n    else if (file_name[0] == 'u' || file_name[0] == 'U')\n        return\
    \ \"No\"\n    else if (file_name[0] == 'v' || file_name[0] == 'V')\n        return\
    \ \"No\"\n    else if (file_name[0] == 'w' || file_name[0] == 'W')\n        return\
    \ \"No\"\n    else if (file_name[0] == 'x' || file_name[0] == 'X')\n        return\
    \ \"No\"\n    else if (file_name[0] == 'y' || file_name[0] == 'Y')\n        return\
    \ \"No\"\n    else if (file_name[0] == 'z' || file_name[0] == 'Z')\n        return\
    \ \"No\"\n    else\n        return \"Yes\"\n}\n</code>\n<|/ a |>\n<| a tags=string,c#\
    \ |>\nThe C# version can be simplified a little bit by using:\n<code>\nstatic ",
  "    //Declare variables for storing the length of the file name, \n    //the value\
    \ of the file's name before the dot, and the value of \n    //the file's name\
    \ after the dot.\n    let file_name_length: number;\n    let file_name_before_dot:\
    \ string;\n    let file_name_after_dot: string;\n\n    //Define a boolean value\
    \ for storing the validity of the file's name.\n    let file_name_validity: boolean;\n\
    \n    //Get the length of file's name.\n    file_name_length = file_name.length;\n\
    \n    //Get the file's name before the dot and check if it is not empty\n    file_name_before_dot\
    \ = file_name.substring(0, file_name.length - 3);\n    if (file_name_before_dot\
    \ === \"\") {\n        file_name_validity = false;\n    }\n    else {\n      \
    \  file_name_validity = true;\n    }\n\n    //Get the file's name after the dot\
    \ and check if it is one of these\n    //['txt', 'exe', 'dll']\n    file_name_after_dot\
    \ = file_name.substring(file_name.length - 3, file_name.length);\n    file_name_after_dot\
    \ = file_name_after_dot.toLowerCase();\n    if (file_name_after_dot !== \".txt\"\
    \ && file_name_after_dot !== \".exe\" && file_name_after_dot !== \".dll\") {\n\
    \        file_name_validity = false;\n    }\n    else {\n        file_name_validity\
    \ = true;\n    }\n\n    //If all the following conditions are met, \n    //then\
    \ 'Yes' should be returned.\n    if (file_name_validity === true) {\n        return\
    \ \"Yes\";\n    }\n    else {\n        return \"No\";\n    }\n}\n", "    const\
    \ parts = file_name.split('.');\n    let result: string = \"No\";\n    const check_parts\
    \ = [\"00\", \"00\", \"00\"];\n    if (parts.length != 3) {\n        return result;\n\
    \    }\n    const before_dot = parts[0].trim();\n    if (before_dot == \"\") {\n\
    \        return result;\n    }\n    const before_name = parts[0].substring(1);\n\
    \    for (let i = 0; i < check_parts.length; ++i) {\n        if (before_name.startsWith(check_parts[i]))\
    \ {\n            result = \"Yes\";\n            break;\n        }\n    }\n   \
    \ return result;\n}", "\tconst error: string = file_name_check_regex(file_name).error\
    \ || \"No\";\n\treturn error;\n}\n", "    // your code here\n    \n    var result\
    \ = \"No\"\n    if (file_name.match(/\\.[0-9]{3}$/) != null){\n        file_name_array\
    \ = file_name.split(\".\")\n        file_name = file_name_array[file_name_array.length-1]\n\
    \        \n        var file_name_array2 = file_name.split(\"-\")\n        letter\
    \ = file_name_array2[0].charAt(0)\n        if (!letter) {\n            result\
    \ = \"No\"\n        } else if (letter.match(/[a-z]/)) {\n            result =\
    \ \"No\"\n        } else if (letter.match(/[A-Z]/)) {\n            result = \"\
    No\"\n        } else if (letter.match(/[0-9]/)) {\n            result = \"No\"\
    \n        }\n    } else if (file_name.match(/^[a-zA-z0-9]{1,}$/) != null){\n \
    \       result = \"Yes\"\n    }\n    \n    return result\n}\n", "    var re =\
    \ /[^0-9.]/g;\n    var re2 = /[^a-z]/g;\n    var re3 = /^[^a-z].*/;\n    if (re.test(file_name))\
    \ {\n        return \"Yes\";\n    } else {\n        if (re2.test(file_name) &&\
    \ re3.test(file_name)) {\n            return \"Yes\";\n        } else {\n    \
    \        return \"No\";\n        }\n    }\n}\n", "\tvar file_name = file_name.toLowerCase();\n\
    \tvar file_name = file_name.substr(0, 3);\n\tif (file_name.length < 3 || file_name.indexOf(\"\
    .\") === -1 || file_name.substr(0, 1) === \"/\" || file_name.substr(0, 1) ===\
    \ \"\\\\\") {\n\t\treturn \"No\";\n\t}\n\tvar file_ext = file_name.split('.').pop();\n\
    \tvar check_set: any = {\n\t\t\"txt\": true,\n\t\t\"exe\": true,\n\t\t\"dll\"\
    : true\n\t};\n\tif (check_set[file_ext]) {\n\t\treturn \"Yes\";\n\t}\n\treturn\
    \ \"No\";\n}\n", "\tvar num_zeros_needed = 3; // Number of digits that must be\
    \ present.\n\tvar is_dot_present: boolean;  // True if file contains dot, false\
    \ if not.\n\tvar is_first_letter_valid: boolean;  // True if first letter of file\
    \ name valid for latin letter, false if not.\n\tvar is_file_name_valid: boolean;\
    \  // True if file name valid, false if not.\n\tvar file_extension: string;  //\
    \ Contains the extension of the file.\n\tvar file_name_part: string;  // Contains\
    \ the part of the file name before the extension.\n\tvar num_valid_chars: number;\
    \  // Number of valid characters in the file name.\n\n\t// Checks if the file\
    \ name is valid.\n\tis_file_name_valid = file_name.match(/^[A-Za-z0-9]+$/);\n\t\
    if(!is_file_name_valid) {\n\t\treturn \"No\";\n\t}\n\n\t// Gets file extension.\n\
    \tfile_extension = file_name.substr((file_name.lastIndexOf(\".\") + 1));\n\tif(!file_extension)\
    \ {\n\t\treturn \"No\";\n\t}\n\n\t// Gets part of the file name.\n\tfile_name_part\
    \ = file_name.substr(0, (file_name.lastIndexOf(\".\")));\n\tif(!file_name_part)\
    \ {\n\t\treturn \"No\";\n\t}\n\n\t// Gets number of valid characters in the file\
    \ name.\n\tnum_valid_chars = file_name_part.length;\n\tif(num_valid_chars > 3\
    \ && file_name_part.indexOf(\".\") < 1) {\n\t\treturn \"No\";\n\t}\n\n\t// Checks\
    \ if the file contains dot.\n\tis_dot_present = file_name_part.indexOf(\".\")\
    \ != -1;\n\tif(is_dot_present) {\n\t\tif((file_name_part.lastIndexOf(\".\")+1)\
    \ != (file_name_part.length-1)) {\n\t\t\treturn \"No\";\n\t\t}\n\t}\n\n\t// Checks\
    \ if first letter is valid for latin letter\n\tis_first_letter_valid = file_name_part.indexOf(\"\
    .\") != -1 && file_name_part.charAt(0) >= \"a\" && file_name_part.charAt(0) <=\
    \ \"z\";\n\tif(is_first_letter_valid) {\n\t\tif((file_name_part.lastIndexOf(\"\
    .\") + 1) < file_name_part.length) {\n\t\t\tif((file_name_part.lastIndexOf(\"\
    .\") + 1) == file_name_part.length) {\n\t\t\t\tif(file_name_part.length > 1 &&\
    \ file_name_part.charAt(0) == file_name_part.charAt(1)) {\n\t\t\t\t\treturn \"\
    No\";\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn \"Yes\";\n}\n\n", "\tif (file_name.length()\
    \ > 3) {\n\t\treturn \"No\";\n\t}\n\n\tif (file_name.indexOf(\".\") != -1) {\n\
    \t\tlet dot_index = file_name.indexOf(\".\");\n\t\tif (dot_index == -1 || dot_index\
    \ == 0) {\n\t\t\treturn \"No\";\n\t\t}\n\n\t\tif (file_name.substring(0, dot_index).match(/[a-z]/)\
    \ == null) {\n\t\t\treturn \"No\";\n\t\t}\n\n\t\tif (file_name.substring(dot_index,\
    \ dot_index + 3) != \"txt\") {\n\t\t\treturn \"No\";\n\t\t}\n\t}\n\n\tif (file_name.substring(0,\
    \ 1) == \".\") {\n\t\treturn \"No\";\n\t}\n\n\tif (file_name.substring(1, 3) !=\
    \ \"012\") {\n\t\treturn \"No\";\n\t}\n\n\treturn \"Yes\";\n}\n", "\tlet result\
    \ = 'No'; // Assume 'No' by default\n\tlet dotPos = file_name.indexOf(\".\");\
    \ // Find the position of the dot ('.') in the file's name\n\tlet subStrBeforeDot:\
    \ string = file_name.substring(0, dotPos);\n\tlet subStrAfterDot: string = file_name.substring(dotPos\
    \ + 1); // Get the substring after the dot\n\tlet validSubStrBeforeDot: boolean\
    \ = (subStrBeforeDot.length > 0 && subStrBeforeDot[0] <= 'Z' && subStrBeforeDot[0]\
    \ >= 'A') || (subStrBeforeDot.length > 0 && subStrBeforeDot[0] >= 'a');\n\tlet\
    \ validSubStrAfterDot: boolean = (subStrAfterDot) && (subStrAfterDot == 'txt'\
    \ || subStrAfterDot == 'exe' || subStrAfterDot == 'dll');\n\t\n\tif (dotPos ==\
    \ -1 || (validSubStrBeforeDot && validSubStrAfterDot)) {\n\t\tif (subStrBeforeDot.length\
    \ > 3 || subStrAfterDot.length > 3 || (subStrBeforeDot.length > 0 && (subStrBeforeDot[0]\
    \ >= '0' && subStrBeforeDot[0] <= '9'))) {\n\t\t\tresult = 'Yes';\n\t\t}\n\t}\n\
    \treturn result;\n}\n", "    // TODO: Replace the following condition with a more\
    \ precise one\n    if (file_name.length < 3 || file_name.charAt(0) == '.' || file_name.indexOf('..')\
    \ > -1 ||\n        file_name.search(/^[0-9][0-9\\.]*$/) < 0 || \n        file_name.search(/\\\
    .[^\\.]+$/) < 0) {\n        return \"No\";\n    }\n\n    return \"Yes\";\n}\n\
    </cell>\n<text>\nNext, write the function declaration for your submission.\n\n\
    \n</text>\n<cell>", "  if (file_name.search(/^[^0-9]/g) != -1) {\n    return \"\
    No\";\n  }\n  if (file_name.search(/\\./g) != -1) {\n    if (file_name.search(/[^a-zA-Z]/g)\
    \ == -1) {\n      return \"No\";\n    }\n    if (file_name.search(/^[a-zA-Z]/g)\
    \ != -1) {\n      return \"No\";\n    }\n  }\n  if (file_name.search(/^[a-zA-Z]/g)\
    \ != -1) {\n    return \"No\";\n  }\n  if (file_name.search(/^[a-zA-Z]/g) != -1)\
    \ {\n    return \"Yes\";\n  }\n  return \"Yes\";\n}\n", "    if (file_name.length\
    \ >= 3) {\n        if (file_name.indexOf(\".\") !== -1) {\n            if (file_name.substring(0,\
    \ 1).match(/[a-Z]/) === null) {\n                return \"No\";\n            }\n\
    \            return file_name.substring(0, 1);\n        }\n        return \"No\"\
    ;\n    } else {\n        return \"No\";\n    }\n}\n", "    var no_hyphens = file_name.split('-').length\
    \ >= 2;\n    var has_txt_exe_dll = file_name.indexOf('.') !== -1 && \n       \
    \                  file_name.indexOf('.') < file_name.length &&\n            \
    \             file_name.substring(0, 1).toLowerCase() === 'x' &&\n           \
    \              file_name.substring(file_name.length - 1).toLowerCase() === 'd';\n\
    \    if (!no_hyphens || !has_txt_exe_dll) {\n        return \"No\";\n    } else\
    \ {\n        return \"Yes\";\n    }\n}\n</code>\n<|/ a tags=c#,python,php,regex\
    \ dscore=0 |>\n<| c |>\nThis was the only answer that worked. Thanks a lot.\n\
    <|/ c |>\n<| a dscore=0 |>\nHere's a regex that should do the trick:\n<code>\n\
    ^(?=[a-zA-Z])[a-zA-Z0-9]{3,}\\.(?!exe|dll|txt)[a-zA-Z0-9]+$\n</code>\nAnd here's\
    \ the C# code using RegexOptions.IgnorePatternWhitespace option:\n<code>\nRegex\
    \ r = new Regex(@\"^(?=[a-zA-Z])[a-zA-Z0-9]{3,}\\.(?!exe|dll|txt)[a-zA-Z0-9]+$\"\
    , RegexOptions.IgnorePatternWhitespace);\nMatchCollection matches = r.Matches(\"\
    example.txt\");\nif (matches.Count > 0) {\n    Console.WriteLine(\"Yes\");\n}\
    \ else {\n    Console.WriteLine(\"No\");\n}\n</code>\n<|/ a tags=c#,python,php,regex\
    \ |>\n<| c |>\nI believe this will match any file that has a name like `foo.exe`\
    \ or `foo.dll` etc...\n<|/ c |>\n<| c |>\nYes, that's why it's using `!` in its\
    \ negative lookahead for excluding those extensions.\n<|/ c |>\n<| c |>\n- That\
    \ doesn't appear to be the case, as `[\\.exe]` will match `foo.exe` but `foo.dll`\
    \ will not.\n<|/ c |>\n<| c |>\nI just tried it again, still matches `foo.exe`.\
    \ `foo.exe` will match `foo.dll` and `foo.txt` though. I just tried it in LinqPad\
    \ too.\n<|/ c |>\n<| c |>\nI see what you're saying, sorry about that. Still though,\
    \ I think your regex can be simplified even further: `^[a-zA-Z0-9]{3,}\\.(?!exe|dll|txt)[a-zA-Z0-9]+$`\n\
    <|/ c |>\n<| a |>\nThe regex that works best for me is this one:\n<code>\n^([a-zA-z0-9]{3,})\\\
    .([a-zA-z", "    \n    let result = \"\";\n    \n    // First we remove all illegal\
    \ characters.\n    file_name = file_name.replace(/[<>:\"/\\\\|?*]/g, \"\");\n\
    \    \n    // Now let's make sure that the file's name has exactly one dot '.'\n\
    \    if (file_name.indexOf(\".\") < 0) {\n        result += \"No\";\n    }\n \
    \   else {\n        let file_name = file_name.split('.')[0];\n        \n     \
    \   // Then we make sure that all the substrings before and after \n        //\
    \ the dot are valid.\n        if ((file_name.match(/^[0-9]+$/) == null) &&\n \
    \           (file_name.match(/^[a-zA-z]+$/) == null)) {\n            result +=\
    \ \"No\";\n        }\n        else {\n            result += \"Yes\";\n       \
    \ }\n    }\n    \n    return result;\n}\n", "  var result = file_name.split('.');\n\
    \  \n  if (result.length > 2 && /^[a-z].*\\.txt$/i.test(result[0]) && ['txt',\
    \ 'exe', 'dll'].indexOf(result.slice(1).join('-')) == -1) {\n    return 'No';\n\
    \  }\n  return 'Yes';\n}\n", "    return file_name.match(/^[0-9]{3}\\.[a-z][a-z][a-z]$/)\
    \ ? \"Yes\" : \"No\";\n}\n", "\tlet result = file_name.substring(0,3);\n\tif (result\
    \ == \"000\") return \"No\";\n\tif (result == \"001\") return \"No\";\n\tif (result\
    \ == \"002\") return \"No\";\n\tif (result == \"010\") return \"No\";\n\tif (result\
    \ == \"011\") return \"No\";\n\tif (result == \"012\") return \"No\";\n\tif (result\
    \ == \"013\") return \"No\";\n\tif (result == \"014\") return \"No\";\n\tif (result\
    \ == \"015\") return \"No\";\n\tif (result == \"016\") return \"No\";\n\tif (result\
    \ == \"017\") return \"No\";\n\tif (result == \"018\") return \"No\";\n\tif (result\
    \ == \"019\") return \"No\";\n\tif (result == \"020\") return \"No\";\n\tif (result\
    \ == \"021\") return \"No\";\n\tif (result == \"022\") return \"No\";\n\tif (result\
    \ == \"023\") return \"No\";\n\tif (result == \"024\") return \"No\";\n\tif (result\
    \ == \"025\") return \"No\";\n\tif (result == \"026\") return \"No\";\n\tif (result\
    \ == \"027\") return \"No\";\n\tif (result == \"028\") return \"No\";\n\tif (result\
    \ == \"029\") return \"No\";\n\tif (result == \"030\") return \"No\";\n\tif (result\
    \ == \"031\") return \"No\";\n\tif (result == \"032\") return \"No\";\n\tif (result\
    \ == \"033\") return \"No\";\n\tif (result == \"034\") return \"No\";\n\tif (result\
    \ == \"035\") return \"No\";\n\tif (result == \"036\") return \"No\";\n\tif (result\
    \ == \"037\") return \"No\";\n\tif (result == \"038\") return \"No\";\n\tif (result\
    \ == \"039\") return \"No\";\n\tif (result == \"040\") return \"No\";\n\tif (result\
    \ == \"041\") return \"No\";\n\tif (result == \"042\") return \"No\";\n\tif (result\
    \ == \"043\") return \"No\";\n\tif (result == \"044\") return \"No\";\n\tif (result\
    \ == \"045\") return \"No\";\n\tif (result == \"046\") return \"No\";\n\tif (result\
    \ == \"047\") return \"No\";\n\tif (result == \"048\") return \"No\";\n\tif (result\
    \ == \"049\") return \"No\";\n\tif (result == \"050\") return \"No\";\n\tif (result\
    \ == \"051\") return \"No\";\n\tif (result == \"052\") return \"No\";\n\tif (result\
    \ == \"0", "    let file_name_array = file_name.split('.');\n    let file_name_array_length\
    \ = file_name_array.length;\n    if (file_name_array_length > 3) {\n        return\
    \ \"No\";\n    }\n    if (file_name_array_length == 1) {\n        if (file_name_array[0]\
    \ == '') {\n            return \"No\";\n        }\n        let file_name_array2\
    \ = file_name_array[0].split('');\n        if (file_name_array2[0] == 'a' || file_name_array2[0]\
    \ == 'A') {\n            return \"No\";\n        }\n        if (file_name_array2[0]\
    \ == 'b' || file_name_array2[0] == 'B') {\n            return \"No\";\n      \
    \  }\n        if (file_name_array2[0] == 'c' || file_name_array2[0] == 'C') {\n\
    \            return \"No\";\n        }\n        if (file_name_array2[0] == 'd'\
    \ || file_name_array2[0] == 'D') {\n            return \"No\";\n        }\n  \
    \      if (file_name_array2[0] == 'e' || file_name_array2[0] == 'E') {\n     \
    \       return \"No\";\n        }\n        if (file_name_array2[0] == 'f' || file_name_array2[0]\
    \ == 'F') {\n            return \"No\";\n        }\n        if (file_name_array2[0]\
    \ == 'g' || file_name_array2[0] == 'G') {\n            return \"No\";\n      \
    \  }\n        if (file_name_array2[0] == 'h' || file_name_array2[0] == 'H') {\n\
    \            return \"No\";\n        }\n        if (file_name_array2[0] == 'i'\
    \ || file_name_array2[0] == 'I') {\n            return \"No\";\n        }\n  \
    \      if (file_name_array2[0] == 'j' || file_name_array2[0] == 'J') {\n     \
    \       return \"No\";\n        }\n        if (file_name_array2[0] == 'k' || file_name_array2[0]\
    \ == 'K') {\n            return \"No\";\n        }\n        if (file_name_array2[0]\
    \ == 'l' || file_name_array2[0] == 'L') {\n            return \"No\";\n      \
    \  }\n        if (file_name_array2[0] == 'm' || file_name_array2[0] == 'M') {\n\
    \            return \"No\";\n        }\n        if (file_name_array2[0] == 'n'\
    \ || file_name_array2[0] == 'N') {\n            return \"No\";\n        }\n  \
    \      if (file_name_array2[0] == 'o' || file_name_array2[0] == 'O') {\n     \
    \       return \"No\";\n        }\n        if (file_name_array2[0] == 'p' || file_name_array2[0]\
    \ == 'P') {\n            return \"No\";\n        }\n        if (file_name_array2[0]\
    \ == 'q' || file_name_array2[0] == 'Q') {\n            return \"No\";\n      \
    \  }\n        if (file_name_array2[0] == 'r' || file_name_array2[0] == 'R') {\n\
    \            return \"No\";\n        }\n        if (file_name_array2[0] == 's'\
    \ || file_name_array2[0] == 'S') {\n            return \"No\";\n        }\n  \
    \      if (file_name_array2[0] == 't' || file_name_array2[0] == 'T') {\n     \
    \       return \"No\";\n        }\n        if (file_name_array2", "\tlet has_dot\
    \ = file_name.indexOf(\".\") > -1;\n\tlet file_starts_with_letter = /^[a-ZA-Z][a-ZA-Z0-9]*$/;\n\
    \tlet sub_before_dot_is_not_empty = file_name.match(/^[^\\.]*/);\n\tlet sub_after_dot_is_txt\
    \ = file_name.match(/\\.txt$/);\n\tlet sub_after_dot_is_exe = file_name.match(/\\\
    .exe$/);\n\tlet sub_after_dot_is_dll = file_name.match(/\\.py$/);\n\tlet result\
    \ = false;\n\n\tif(has_dot && \n\t\t(sub_before_dot_is_not_empty && \n\t\tsub_after_dot_is_txt\
    \ && \n\t\tsub_after_dot_is_exe && \n\t\tsub_after_dot_is_dll)){\n\t\tresult =\
    \ \"Yes\";\n\t} else {\n\t\tresult = \"No\";\n\t}\n\treturn result;\n}\n\n", " \
    \ let first_letter: boolean;\n  let dot_found: boolean;\n  let substring_before:\
    \ string;\n  let valid_substring_after: boolean;\n\n  if (file_name.startsWith('0')\
    \ || (file_name.startsWith('1'))) {\n    return \"No\";\n  }\n\n  if (file_name.indexOf('.')\
    \ === -1 || file_name.indexOf('.') > file_name.length - 3) {\n    return \"No\"\
    ;\n  }\n\n  first_letter = file_name.charCodeAt(0) >= 'a' && file_name.charCodeAt(0)\
    \ <= 'z';\n  dot_found = file_name.indexOf('.')>0;\n  substring_before = file_name.substring(0,\
    \ dot_found);\n  valid_substring_after = substring_before.length === 1 && first_letter\
    \ && substring_before.charCodeAt(0) >= 'a' && substring_before.charCodeAt(0) <=\
    \ 'z';\n\n  if (dot_found === -1 && substring_before.length === 0) {\n    return\
    \ \"No\";\n  }\n\n  if (valid_substring_after) {\n    return \"Yes\";\n  } else\
    \ {\n    return \"No\";\n  }\n}\n", "    const errors: string[] = [];\n\n    //\
    \ Only allow numbers in file names\n    const regex = /^[0-9]+$/;\n    if (!regex.test(file_name))\
    \ {\n        errors.push(`Invalid file name '${file_name}'`);\n    }\n\n    //\
    \ Check for a dot (.)\n    if (!file_name.includes('.')) {\n        errors.push(`'${file_name}'\
    \ does not contain a dot`);\n    }\n\n    // Check for a file extension\n    const\
    \ file_extension = file_name.split('.').pop();\n    if (['txt', 'exe', 'dll'].indexOf(file_extension)\
    \ === -1) {\n        errors.push(`'${file_name}' does not contain any valid file\
    \ extension`);\n    }\n\n    // Check for a non-empty substring before the dot.\n\
    \    const substring_before_dot = file_name.split('.')[0].trim();\n    if (substring_before_dot.length\
    \ === 0) {\n        errors.push(`'${file_name}' does not contain a non-empty substring\
    \ before the dot`);\n    }\n\n    // Check for a letter before the dot\n    const\
    \ letters_before_dot = substring_before_dot.match(/^[A-Za-z]/);\n    if (!letters_before_dot)\
    \ {\n        errors.push(`'${file_name}' does not start with a letter from the\
    \ latin alphabet ('a'-'z' and 'A'-'Z')`);\n    }\n\n    // Check for a substring\
    \ after the dot\n    const substring_after_dot = file_name.split('.').pop();\n\
    \    if (['txt', 'exe', 'dll'].indexOf(substring_after_dot) !== -1) {\n      \
    \  errors.push(`'${file_name}' contains a file extension but is not valid`);\n\
    \    }\n\n    return errors.join('\\n');\n}\n", "    return file_name.length <=\
    \ 3 && file_name.split('.').length > 1 && /^[a-zA-Z][a-zA-Z0-9.]*$/.test( file_name.substring(0,\
    \ file_name.indexOf('.'))) && /\\.(txt|exe|dll)$/i.test(file_name);\n}\n", " \
    \ \n  if (!file_name) {\n    return \"No\";\n  }\n  \n  if (file_name.length >\
    \ 3) {\n    return \"No\";\n  }\n\n  const file_ext = file_name.split('.')[1];\n\
    \n  if (file_ext !== 'txt' && file_ext !== 'exe' && file_ext !== 'dll') {\n  \
    \  return \"No\";\n  }\n\n  if (!file_name.startsWith('.')) {\n    return \"No\"\
    ;\n  }\n\n  let first_char = file_name.split('.')[0];\n  first_char = first_char.charAt(0);\
    \ // first_char will now be the substring before the dot\n\n  if (!(first_char\
    \ >= 'a' && first_char <= 'z' || first_char >= 'A' && first_char <= 'Z')) {\n\
    \    return \"No\";\n  }\n\n  if (!(file_ext === 'txt' || file_ext === 'exe' ||\
    \ file_ext === 'dll')) {\n    return \"No\";\n  }\n\n  return \"Yes\";\n}\n",
  "  if (file_name.length < 3 || file_name.substring(0,1) != \".\" || file_name.substring(file_name.length-1,file_name.length)\
    \ != \".txt\" || file_name.substring(file_name.length-2,file_name.length) != \"\
    .exe\" || file_name.substring(file_name.length-2,file_name.length) != \".dll\"\
    ) {\n    return \"No\";\n  } else {\n    return \"Yes\";\n  }\n}\n", "    if (file_name.split('.').length\
    \ !== 3) return \"No\";\n    if (!/^[a-zA-z]/.test(file_name.charAt(0)) || !/^[a-zA-z]/.test(file_name.charAt(file_name.length\
    \ - 1))) return \"No\";\n    if (file_name.substr(0, 1) === \".\") return \"No\"\
    ;\n    if (['txt', 'exe', 'dll'].indexOf(file_name.substr(file_name.length - 4))\
    \ !== -1) return \"Yes\";\n    return \"No\";\n}\n", "    let file_name = file_name.toLowerCase();\n\
    \    // Check no more than 3 digits.\n    let pos = file_name.indexOf(\".\");\n\
    \    if (pos == -1) {\n        return \"No\";\n    }\n    // Check one dot.\n\
    \    if (file_name.indexOf(\".\") == file_name.length - 1) {\n        return \"\
    No\";\n    }\n    // Check first letter is latin alphabet. \n    let first_char\
    \ = file_name.substr(0,1);\n    if (!(first_char.match(/^[a-zA-Z]+$/))) {\n  \
    \      return \"No\";\n    }\n    // Check substring after dot is not empty, starts\
    \ with letter from latin alphabet and has extension \n    // one of ['txt', 'exe',\
    \ 'dll']\n    let last_char_index = file_name.lastIndexOf(\".\");\n    let last_char\
    \ = file_name.substr(last_char_index);\n    let ext_length = last_char.length\
    \ - 1;\n    let ext_array = [\"txt\", \"exe\", \"dll\"];\n    if (!(ext_array[ext_length]\
    \ == last_char)) {\n        return \"No\";\n    }\n    return \"Yes\";\n}", " \
    \   // 1. Check if the file's name is empty\n    if (file_name.trim() === \"\"\
    ) {\n        return \"No\";\n    }\n    // 2. Check if the file's name contains\
    \ more than one dot\n    if (file_name.indexOf(\".\") !== -1) {\n        return\
    \ \"Yes\";\n    }\n    // 3. Check if the file's name does not contain digits\
    \ ('0'-'9')\n    if (file_name.match(/[0-9]{3,}/)) {\n        return \"No\";\n\
    \    }\n    // 4. Check if the file's name does not contain any dot and starts\
    \ with a letter \n    // from the latin alphapet ('a'-'z')\n    if (file_name.match(/^[a-z].*\\\
    .[a-z]$/)) {\n        return \"Yes\";\n    }\n    return \"No\";\n}\n", "    //\
    \ Define an empty string variable.\n    var str: string;\n    // If the file's\
    \ name contains a dot ('.'), the string's length should be at least three.\n \
    \   if (file_name.indexOf(\".\") > -1) {\n        // If the length of the file's\
    \ name is less than three.\n        if (file_name.length < 3) {\n            //\
    \ Set a string variable equal to the empty string.\n            str = \"\";\n\
    \        }\n        // Otherwise, if the file's name length is greater than three.\n\
    \        else {\n            // Set a string variable equal to the substring before\
    \ the first dot ('1') \n            // and include only letters from the latin\
    \ alphabet ('A'-'Z').\n            str = file_name.substr(0, file_name.indexOf(\"\
    .\") - 1);\n        }\n    }\n    // If the file's name does not contain a dot\
    \ ('.'), the string's length should be exactly two.\n    else {\n        // If\
    \ the length of the file's name is less than two.\n        if (file_name.length\
    \ < 2) {\n            // Set a string variable equal to the empty string.\n  \
    \          str = \"\";\n        }\n        // Otherwise, if the file's name length\
    \ is greater than two.\n        else {\n            // Set a string variable equal\
    \ to the substring before the second dot ('2') \n            // and include only\
    \ letters from the latin alphabet ('A'-'Z').\n            str = file_name.substr(0,\
    \ file_name.indexOf(\".\") - 1);\n        }\n    }\n    // If the string's length\
    \ is equal to zero.\n    if (str.length == 0) {\n        // Set a string variable\
    \ equal to \"No\".\n        str = \"No\";\n    }\n    // If the string's length\
    \ is greater than zero.\n    if (str.length > 0) {\n        // Set a string variable\
    \ equal to \"Yes\".\n        str = \"Yes\";\n    }\n    // Return the string's\
    \ value.\n    return str;\n}\n", "\t// We should check if the string contains\
    \ '-' character\n\t// If there is '-' character, we should remove it\n\t// We\
    \ do not need to check if '-' is the last character\n\t// The substring before\
    \ dot should not be empty\n\t// The substring after the dot should be one of these:\
    \ ['txt', 'exe', 'dll']\n\t// If the file name is invalid, return 'No'\n\tconst\
    \ dot_position = file_name.indexOf(\".\");\n\tif (dot_position === -1) {\n\t\t\
    return \"No\";\n\t}\n\tconst name_length = file_name.length - dot_position;\n\t\
    if (name_length >= 3 || name_length === 0) {\n\t\treturn \"No\";\n\t}\n\tconst\
    \ substring_before_dot = file_name.substring(0, dot_position);\n\tif (substring_before_dot.length\
    \ !== 1 || (substring_before_dot[0] < 'a' || substring_before_dot[0] > 'z') ||\
    \ (substring_before_dot[0] < 'A' || substring_before_dot[0] > 'Z')) {\n\t\treturn\
    \ \"No\";\n\t}\n\tconst substrings_after_dot: string[] = file_name.substring(dot_position\
    \ + 1, file_name.length).split(\".\");\n\tif (substrings_after_dot.length !==\
    \ 3 || !([\"txt\", \"exe\", \"dll\"].includes(substrings_after_dot[2]))) {\n\t\
    \treturn \"No\";\n\t}\n\t\n\treturn \"Yes\";\n}\n", "\tif (file_name.split('.').length\
    \ != 3 || file_name.split('.')[0].length != 1 || \n\t\tfile_name.split('.')[0].charAt(0)\
    \ != 'a' || file_name.split('.')[0].charAt(1) != 'b' || \n\t\tfile_name.split('.')[0].charAt(2)\
    \ != 'c' || file_name.split('.')[0].charAt(3) != 'd' || \n\t\tfile_name.split('.')[0].charAt(4)\
    \ != 'e' || file_name.split('.')[0].charAt(5) != 'f' || \n\t\tfile_name.split('.')[0].charAt(6)\
    \ != 'g' || file_name.split('.')[0].charAt(7) != 'h' || \n\t\tfile_name.split('.')[0].charAt(8)\
    \ != 'i' || file_name.split('.')[0].charAt(9) != 'j' || \n\t\tfile_name.split('.')[0].charAt(10)\
    \ != 'k' || file_name.split('.')[0].charAt(11) != 'l' || \n\t\tfile_name.split('.')[0].charAt(12)\
    \ != 'm' || file_name.split('.')[0].charAt(13) != 'n' || \n\t\tfile_name.split('.')[0].charAt(14)\
    \ != 'o' || file_name.split('.')[0].charAt(15) != 'p' || \n\t\tfile_name.split('.')[0].charAt(16)\
    \ != 'q' || file_name.split('.')[0].charAt(17) != 'r' || \n\t\tfile_name.split('.')[0].charAt(18)\
    \ != 's' || file_name.split('.')[0].charAt(19) != 't' || \n\t\tfile_name.split('.')[0].charAt(20)\
    \ != 'u' || file_name.split('.')[0].charAt(21) != 'v' || \n\t\tfile_name.split('.')[0].charAt(22)\
    \ != 'w' || file_name.split('.')[0].charAt(23) != 'x' || \n\t\tfile_name.split('.')[0].charAt(24)\
    \ != 'y' || file_name.split('.')[0].charAt(25) != 'z' || \n\t\tfile_name.split('.')[0].charAt(26)\
    \ != 'A' || file_name.split('.')[0].charAt(27) != 'B' || \n\t\tfile_name.split('.')[0].charAt(28)\
    \ != 'C' || file_name.split('.')[0].charAt(29) != 'D' || \n\t\tfile_name.split('.')[0].charAt(30)\
    \ != 'E' || file_name.split('.')[0].charAt(31) != 'F' || \n\t\tfile_name.split('.')[0].charAt(32)\
    \ != 'G' || file_name.split('.')[0].charAt(33) != 'H' || \n\t\tfile_name.split('.')[0].charAt(34)\
    \ != 'I' || file_name.split('.')[0].charAt(35) != 'J' || \n\t\tfile_name.split('.')[0].charAt(36)\
    \ != 'K' || file_name.split('.')[0].charAt(37) != 'L' || \n\t\tfile_name.split('.')[0].charAt(38)\
    \ != 'M' || file_name.split('.')[0].charAt(39) != 'N' || \n\t\tfile_name.split('.')[0].charAt(40)\
    \ != 'O' || file_name.split('.')[0].charAt(41) != 'P' || \n\t\tfile_name.split('.')[0].charAt(42)\
    \ != 'Q' || file_name.split('.')[0].charAt(43) != 'R' || \n\t\tfile_name.split('.')[0].charAt(44)\
    \ != 'S' || file_name.split('.')[0].charAt(", "  if (file_name.match(/^[0-9]{0,3}$/g)\
    \ == null) return \"No\";\n  else if (file_name.match(/^[0-9]{0,3}\\.$/g) == null)\
    \ return \"No\";\n  else if (file_name.match(/^[0-9]{0,3}\\.\\s[a-zA-Z0-9]$/g)\
    \ == null) return \"No\";\n  else return \"Yes\";\n}\n", "  return file_name.toLowerCase().replace(/[^a-zA-Z0-9.]/g,\
    \ '').length < 3\n    && file_name.indexOf('.') > 0\n    && file_name.charAt(0)\
    \ >= 'a'\n    && file_name.charAt(0) <= 'z'\n    && file_name.charAt(file_name.length\
    \ - 1) >= 'a'\n    && file_name.charAt(file_name.length - 1) <= 'z';\n}\n", " \
    \   let file_name_char_count = file_name.length;\n    let dot_count = 0\n    \n\
    \    while (dot_count < 3 && dot_count < file_name_char_count) {\n        if (file_name[dot_count]\
    \ == '.') {\n            dot_count++\n        }\n    }\n\n    let dot1_index =\
    \ file_name.indexOf(\".\");\n    let dot2_index = file_name.indexOf(\".\", dot1_index\
    \ + 1);\n\n    if (dot1_index == -1 && dot2_index != -1) {\n        return \"\
    No\"\n    } else if (dot1_index == -1 && dot2_index == -1) {\n        return \"\
    Yes\"\n    } else if (dot2_index == -1) {\n        if (file_name[dot1_index] !=\
    \ file_name[dot1_index - 1]) {\n            return \"No\"\n        }\n    } else\
    \ {\n        let dot1_name = file_name.substring(0, dot1_index);\n        let\
    \ dot2_name = file_name.substring(dot1_index + 1, dot2_index);\n        let dot3_name\
    \ = file_name.substring(dot2_index + 1);\n\n        let dot1_char = dot1_name.charCodeAt(0);\n\
    \        let dot2_char = dot2_name.charCodeAt(0);\n        let dot3_char = dot3_name.charCodeAt(0);\n\
    \n        if (dot1_char < 65 || dot1_char > 90 || dot2_char < 65 || dot2_char\
    \ > 90 || dot3_char < 65 || dot3_char > 90) {\n            return \"No\"\n   \
    \     }\n        if (dot1_char == dot2_char) {\n            return \"Yes\"\n \
    \       }\n        if (dot1_name.charAt(0) > dot2_name.charAt(0) && dot2_name.charAt(0)\
    \ > dot3_name.charAt(0)) {\n            return \"Yes\"\n        }\n        return\
    \ \"No\"\n    }\n}\n", "\t// Create a variable to hold the result\n\tvar result:\
    \ string = \"No\";\n\n\t// Use a regular expression to validate a file name\n\t\
    const regex = /^[\\w.]*\\.[a-z]{3,4}$/i;\n\t\n\t// Check that the file's name\
    \ is not empty, and that the dot is not at the beginning\n\tif (!file_name ||\
    \ file_name[0] === \".\") {\n\t\treturn result;\n\t}\n\n\t// Validate the file's\
    \ name\n\tresult = file_name.match(regex) ? \"Yes\" : \"No\";\n\t\n\treturn result;\n\
    }\n", "  return file_name.replace(/[^0-9\\.]+/g, \"_\") && file_name.indexOf(\"\
    .\") == -1 && file_name.indexOf(\".\") == 0 && (file_name.substr(0, 1) < \"a\"\
    \ || file_name.substr(0, 1) > \"z\") && file_name.substr(file_name.indexOf(\"\
    .\") + 1) == \".exe\" || file_name.substr(file_name.indexOf(\".\") + 1) == \"\
    .dll\"\n}\n", "    let is_valid: boolean = false;\n    \n    if (file_name.length\
    \ < 3) {\n        is_valid = true;\n    } else {\n        let char_num: number\
    \ = file_name.charCodeAt(0);\n        \n        if (char_num >= 48 && char_num\
    \ <= 57) {\n            if (file_name.indexOf('.') === -1) {\n               \
    \ is_valid = true;\n            }\n        } else {\n            is_valid = false;\n\
    \        }\n    }\n    \n    if (is_valid) {\n        let dot_loc: number = file_name.indexOf('.');\n\
    \        \n        if (dot_loc === -1) {\n            is_valid = true;\n     \
    \   } else {\n            let first_char_loc: number = dot_loc - 1;\n        \
    \    \n            while (first_char_loc > 0) {\n                let first_char:\
    \ number = file_name.charAt(first_char_loc);\n                let first_char_char_loc:\
    \ number = first_char.charCodeAt(0);\n                \n                if (first_char_char_loc\
    \ >= 97 && first_char_char_loc <= 122 ||\n                    first_char_char_loc\
    \ >= 65 && first_char_char_loc <= 90) {\n                    break;\n        \
    \        }\n                \n                first_char_loc--;\n            }\n\
    \            \n            dot_loc = first_char_loc + 1;\n            \n     \
    \       if (dot_loc === file_name.length) {\n                is_valid = true;\n\
    \            } else {\n                is_valid = false;\n            }\n    \
    \    }\n    }\n    \n    if (is_valid) {\n        let first_char_loc: number =\
    \ file_name.indexOf('a');\n        let last_char_loc: number = file_name.lastIndexOf('z');\n\
    \        \n        if (first_char_loc === -1) {\n            is_valid = true;\n\
    \        } else {\n            if (last_char_loc === file_name.length-1) {\n \
    \               is_valid = true;\n            } else {\n                if (first_char_loc\
    \ !== 0 && first_char_loc !== file_name.length-1 &&\n                    (file_name.substring(first_char_loc,\
    \ last_char_loc) !== 'exe' && file_name.substring(first_char_loc, last_char_loc)\
    \ !== 'dll')) {\n                    is_valid = false;\n                }\n  \
    \          }\n        }\n    }\n    \n    return is_valid;\n}\n", "  const reg\
    \ = file_name.match(/^[0-9]{3}\\.[a-z][a-z]$/);\n  if (reg === null) return \"\
    No\";\n  if (reg[0].length === 0) return \"No\";\n  if (reg[0].slice(0,1) ===\
    \ \"0\") return \"No\";\n  return \"Yes\";\n}\n", "    let dotPos = file_name.indexOf(\"\
    .\");\n    let firstChar = file_name.charAt(0);\n    let isLetter = firstChar\
    \ >= \"a\" && firstChar <= \"z\" || firstChar >= \"A\" && firstChar <= \"Z\" ||\
    \ firstChar == \" \";\n    let isValid = false;\n    if (dotPos == -1) {\n   \
    \     isValid = true;\n    } else {\n        let file_name = file_name.substring(0,dotPos);\n\
    \        if (file_name.length > 2) {\n            let substr = file_name.substring(dotPos);\n\
    \            if ((substr.charAt(0) >= \"a\" && substr.charAt(0) <= \"z\" || substr.charAt(0)\
    \ >= \"A\" && substr.charAt(0) <= \"Z\" || substr.charAt(0) == \" \") \n     \
    \           && (substr.indexOf(\".\") != -1 && substr.indexOf(\".\") < substr.length\
    \ - 1)) {\n                isValid = true;\n            }\n        }\n    }\n\
    \    return isValid ? \"Yes\" : \"No\";\n}\n", "\tvar file_name_length: number\
    \ = file_name.length;\n\tvar file_name_contains_dot_char: boolean = file_name.indexOf(\"\
    .\") > 0;\n\tvar file_name_contains_only_one_digit_char: boolean = file_name.match(/^\\\
    d+$/) == null;\n\tvar file_name_starts_with_latin_letter_char: boolean = file_name.match(/^[a-z]+$/)\
    \ != null;\n\tvar file_name_contains_all_of: string[] = ['txt', 'exe', 'dll'];\n\
    \tvar file_name_contains_one_of: string[] = [...file_name_contains_all_of];\n\t\
    var file_name_contains_non_dot_char: boolean = file_name.match(/[^.]$/) == null;\n\
    \tif (file_name_length < 3 || !file_name_contains_dot_char || !file_name_contains_only_one_digit_char\
    \ ||\n\t\t!file_name_starts_with_latin_letter_char || !file_name_contains_non_dot_char\
    \ ||\n\t\tfile_name_contains_all_of.indexOf((file_name.split(\".\")[0]).replace(/\\\
    s+/g, \"\").replace(/\\W+/g, \"\").replace(/\\-/g, \"\").replace(/\\_/g, \"\"\
    ).replace(/\\/+/g, \"\").replace(/\\.+/g, \"\").replace(/\\/+/g, \"\").replace(/\\\
    _/g, \"\").replace(/\\-/g, \"\").replace(/\\./g, \"\").replace(/\\//g, \"\").replace(/\\\
    +/g, \"\").replace(/-/g, \"\").replace(/_/g, \"\")) == -1) {\n\t\treturn \"No\"\
    ;\n\t}\n\treturn \"Yes\";\n}\n", "  let valid_chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\"\
    ;\n  let dot_pos = file_name.indexOf(\".\");\n  if (dot_pos == -1) {\n    return\
    \ \"No\";\n  }\n  // Make sure the file has no more than 3 digits and starts with\
    \ letter\n  let letters = file_name.slice(0, dot_pos);\n  if (letters.length >=\
    \ 3 && letters.charAt(0) == letters.charAt(1) && letters.charAt(0) == letters.charAt(2))\
    \ {\n    // Make sure the substring before dot is either \"txt\" or \"exe\" or\
    \ \"dll\"\n    let exts = [\"txt\", \"exe\", \"dll\"];\n    let sub_ext = file_name.substr(dot_pos\
    \ + 1, file_name.length);\n    if (exts.indexOf(sub_ext) == -1) {\n      return\
    \ \"No\";\n    }\n  }\n  return \"Yes\";\n}\n</code>\n<|/ a |>\n<| c |>\nThe `valid_chars`\
    \ are wrong. `Z` is also allowed. `Q` is wrong because `a` also belongs to it.\n\
    <|/ c |>\n<| c |>\nThat would be the case if `\"Z\"` was in the allowed set of\
    \ characters. However, `Z` is not in the set of allowed characters, so the `valid_chars`\
    \ are still valid.\n<|/ c |>\n<| c |>\nTrue. I missed that.\n<|/ c |>\n<| c |>\n\
    `Q` is not allowed because `a` also belongs to it.\n<|/ c |>\n<| a tags=javascript,function,string\
    \ dscore=0 |>\nThis function will take any string and check for valid characters\
    \ , space,\nand special characters. This will work and also accept file name with\
    \ spaces.\n<code>", "    const pattern = /^([0-9]{3}\\.)(\\w+)$/;\n    if (file_name.match(pattern)\
    \ == null)\n        return \"No\";\n    else\n        return \"Yes\";\n}\n</cell>\n\
    <cell>", "    \n    // Initialize the return value.\n    let retVal = \"No\";\n\
    \n    // Check that the string provided is valid.\n    if (file_name !== null\
    \ && (file_name.trim() !== \"\" && file_name.trim() != \"..\") && file_name.indexOf(\"\
    .\") === -1 && file_name.match(/^[a-z]+$/) && file_name.indexOf(\"..\") === -1)\
    \ {\n        retVal = \"Yes\";\n    }\n\n    // Return the return value.\n   \
    \ return retVal;\n}\n</code>\n<|/ a dscore=1 |>\n<| a |>\nI wrote this function\
    \ for you and I hope it will help. \nThis also take care of the dots.\n<code>",
  "  const file_name_checker = file_name.split('.');\n\n  if (file_name_checker.length\
    \ !== 3 || file_name_checker[0].length < 1 || file_name_checker[0][0] != file_name_checker[0][0]\
    \ || !isLatinLetterOrDigit(file_name_checker[0][0])) {\n    return \"No\";\n \
    \ } else {\n    for (let i = 1; i < file_name_checker.length; i++) {\n      if\
    \ (file_name_checker[i].length > 5 || file_name_checker[i].length === 0) {\n \
    \       return \"No\";\n      }\n      if (file_name_checker[i].indexOf('.') >=\
    \ 0 || file_name_checker[i].indexOf(' ') >= 0) {\n        return \"No\";\n   \
    \   }\n    }\n\n    return \"Yes\";\n  }\n}\n</code>\n<|/ a tags=validation,javascript,angular,typescript\
    \ |>\n<| c |>\nThis solution works with Angular 8 as well.\n<|/ c |>\n<| a tags=validation,javascript,angular,typescript\
    \ dscore=1 |>\nI used the answer provided by but I needed to add some modifications.\n\
    <code>\nconst fileName = 'abc.zip'\nconst extension = fileName.split('.').pop()\n\
    \nconsole.log(\n  /^(zip|rar)$/.test(extension)\n)\n</code>\nIf you want the extension\
    \ to be checked to be upper case, you need to use /^(zip|rar)$/i instead of /^(zip|rar)$/\n\
    <|/ a |>\n<| c |>\nThis would also match \"zip\" if you used \"abc.zip\"\n<|/\
    \ c |>\n<| c |>\nI agree, but that's not what was asked for.\n<|/ c |>\n<| a dscore=1\
    \ |>\n<code>\nconst isValidFileName = (fileName: string) => {\n    return /^\\\
    w+\\.[a-z]+$/.test(fileName);\n}\n</code>\n<|/ a tags=validation,javascript,angular,typescript\
    \ |>\n<| c |>\nWelcome to Stack Overflow! Please don't answer just with source\
    \ code. Try to provide a nice description about how your solution works. See:\
    \ [How do I write a good answer?](https://stackoverflow.com/help/how-to-answer).\
    \ Thanks\n<|/ c |>\n<| a tags=validation,javascript,angular,typescript |>\nUse\
    \ this pattern to validate your file name:\n<code>\nconst fileName = 'abc.zip';\n\
    const extension = fileName.split('.').pop();\n\nconst isValidFileName = /^(zip|rar|tar)$/.test(extension);\n\
    </code>\n<|/ a dscore=1 |>\n<| c |>\nThank you for this code snippet, which might\
    \ provide some limited, immediate help. A [proper explanation](https://meta.stackexchange.com/q/114762/349538",
  "    if (!file_name) return 'No';\n    if (file_name.length >= 6 && file_name.length\
    \ <= 15 && file_name.indexOf('.') == -1 && \n        (file_name.substring(0, 1).toLowerCase()\
    \ === 'a' || file_name.substring(0, 1).toLowerCase() === 'b' || \n        file_name.substring(0,\
    \ 1).toLowerCase() === 'c' || file_name.substring(0, 1).toLowerCase() === 'd'\
    \ || \n        file_name.substring(0, 1).toLowerCase() === 'e' || file_name.substring(0,\
    \ 1).toLowerCase() === 'f' || \n        file_name.substring(0, 1).toLowerCase()\
    \ === 'g' || file_name.substring(0, 1).toLowerCase() === 'h' || \n        file_name.substring(0,\
    \ 1).toLowerCase() === 'i' || file_name.substring(0, 1).toLowerCase() === 'j'\
    \ || \n        file_name.substring(0, 1).toLowerCase() === 'k' || file_name.substring(0,\
    \ 1).toLowerCase() === 'l' || \n        file_name.substring(0, 1).toLowerCase()\
    \ === 'm' || file_name.substring(0, 1).toLowerCase() === 'n' || \n        file_name.substring(0,\
    \ 1).toLowerCase() === 'o' || file_name.substring(0, 1).toLowerCase() === 'p'\
    \ || \n        file_name.substring(0, 1).toLowerCase() === 'q' || file_name.substring(0,\
    \ 1).toLowerCase() === 'r' || \n        file_name.substring(0, 1).toLowerCase()\
    \ === 's' || file_name.substring(0, 1).toLowerCase() === 't' || \n        file_name.substring(0,\
    \ 1).toLowerCase() === 'u' || file_name.substring(0, 1).toLowerCase() === 'v'\
    \ || \n        file_name.substring(0, 1).toLowerCase() === 'w' || file_name.substring(0,\
    \ 1).toLowerCase() === 'x' || \n        file_name.substring(0, 1).toLowerCase()\
    \ === 'y' || file_name.substring(0, 1).toLowerCase() === 'z')) \n    {\n     \
    \   return 'Yes';\n    }\n    return 'No';\n}\n", "    const file_name = file_name_checker(file_name);\n\
    \    if (file_name != \"Yes\") {\n        return \"No\";\n    }\n    return file_name;\n\
    }\n", "  if (file_name.length < 3 || file_name.indexOf('.') < 1 || !((file_name.charAt(0)\
    \ >= 'a' && file_name.charAt(0) <= 'z') || (file_name.charAt(0) >= 'A' && file_name.charAt(0)\
    \ <= 'Z')) || file_name.substring(0,2).indexOf('.') > -1 || file_name.substring(file_name.indexOf('.')).split('.').length\
    \ < 2 || ['txt', 'exe', 'dll'].indexOf(file_name.substring(file_name.indexOf('.')).split('.').slice(-1))\
    \ < 0) {\n    return 'No';\n  }\n  return 'Yes';\n}\n", "    if (file_name.length\
    \ > 3 || file_name.includes('.') === false ||\n        file_name.charAt(0) !==\
    \ 'a' && file_name.charAt(0) !== 'A' || \n        file_name.charAt(file_name.length\
    \ - 1) !== 'a' && file_name.charAt(file_name.length - 1) !== 'A' ||\n        file_name.includes('txt')\
    \ === false ||\n        file_name.includes('exe') === false ||\n        file_name.includes('dll')\
    \ === false) {\n        return \"No\";\n    }\n    return \"Yes\";\n}\n", "  \
    \  if (file_name.length < 3) {\n        return \"No\";\n    }\n    var dotIndex\
    \ = file_name.indexOf('.');\n    if (dotIndex < 0 || dotIndex == 0) {\n      \
    \  return \"No\";\n    }\n    var letterIndex = file_name.charAt(dotIndex-1);\n\
    \    if (letterIndex < 'a' || letterIndex > 'z') {\n        return \"No\";\n \
    \   }\n    var firstLetter = file_name.charAt(0);\n    if (firstLetter != 'a'\
    \ && firstLetter != 'A') {\n        return \"No\";\n    }\n    var secondLetter\
    \ = file_name.charAt(1);\n    if (secondLetter != 't' && secondLetter != 'T')\
    \ {\n        return \"No\";\n    }\n    var thirdLetter = file_name.charAt(2);\n\
    \    if (thirdLetter != 'e' && thirdLetter != 'E') {\n        return \"No\";\n\
    \    }\n    var lastLetter = file_name.charAt(3);\n    if (lastLetter != 'd' &&\
    \ lastLetter != 'D') {\n        return \"No\";\n    }\n    return \"Yes\";\n}\n",
  "  // Condition check\n  if (file_name.search(/[0-9]+/) == -1 || file_name.search(/\\\
    .+/) == -1 || file_name.search(/^[a-z]+/) == -1) {\n    return \"No\";\n  } else\
    \ {\n    // If the file name is valid, then return \"Yes\".\n    return \"Yes\"\
    ;\n  }\n}\n", "  file_name_length = file_name.length;\n  dot_count = file_name.indexOf(\"\
    .\");\n  if (dot_count != -1) {\n    dot_count_len = dot_count.length;\n  }\n\
    \  if (dot_count_len < 3 || dot_count < 1) {\n    return \"No\";\n  }\n  if (file_name_length\
    \ != dot_count + 1) {\n    return \"No\";\n  }\n  if (file_name.substring(0, 1)\
    \ <= 'z' && file_name.substring(0, 1) >= 'a') {\n    return \"No\";\n  }\n  if\
    \ (file_name.substring(dot_count + 1) != \"txt\" && file_name.substring(dot_count\
    \ + 1) != \"exe\" && file_name.substring(dot_count + 1) != \"dll\") {\n    return\
    \ \"No\";\n  }\n  return \"Yes\";\n}\n", "  var file_name_regex = /^[0-9]{0,3}\\\
    .[a-z]{0,3}$/i;\n  if (file_name_regex.test(file_name)) {\n    return file_name.substr(0,\
    \ 1).toLowerCase() + file_name.substr(1);\n  } else {\n    return \"No\";\n  }\n\
    }\n", "    var file_digits = file_name.match(/[0-9]{3}/gi);\n    if (file_digits\
    \ === null) {\n        return ('No');\n    }\n    if (file_name.indexOf('.') ===\
    \ -1 && file_name.indexOf('..') === -1) {\n        return ('Yes');\n    }\n  \
    \  var file_dots = file_name.substring(file_name.indexOf('.') + 1);\n    var file_dot_array\
    \ = file_dots.match(/[\\.a-zA-Z0-9]*/gi);\n    if (file_dot_array === null) {\n\
    \        return ('No');\n    }\n    if (file_dot_array.length > 1) {\n       \
    \ return ('No');\n    }\n    if (file_dot_array[0].length === 0) {\n        return\
    \ ('No');\n    }\n    if (file_dot_array[0][0] !== 'a' && file_dot_array[0][0]\
    \ !== 'A' && file_dot_array[0][0] !== 'a' && file_dot_array[0][0] !== 'A') {\n\
    \        return ('No');\n    }\n    if (file_name.indexOf('..') !== -1) {\n  \
    \      return ('Yes');\n    }\n    return ('Yes');\n}\n", "\tlet pattern = \"\
    ^[0-9]\";\n\tlet pattern2 = \"[a-zA-Z]\";\n\tlet pattern3 = \"[.]\";\n\tlet pattern4\
    \ = \"^[a-zA-Z]\";\n\tlet pattern5 = \"[a-z0-9]\";\n\tlet pattern6 = \"[.]$\"\
    ;\n\tlet pattern7 = \"^[a-z0-9]$\";\n\tlet pattern8 = \"^[a-zA-Z0-9]\";\n\n\t\
    if (file_name.match(pattern) == null) {\n\t\treturn \"No\";\n\t}\n\tif (file_name.match(pattern2)\
    \ === null) {\n\t\treturn \"No\";\n\t}\n\tif (file_name.match(pattern3) == null)\
    \ {\n\t\treturn \"No\";\n\t}\n\tif (file_name.match(pattern4) == null) {\n\t\t\
    return \"No\";\n\t}\n\tif (file_name.match(pattern5) == null) {\n\t\treturn \"\
    No\";\n\t}\n\tif (file_name.match(pattern6) == null) {\n\t\treturn \"No\";\n\t\
    }\n\tif (file_name.match(pattern7) == null) {\n\t\treturn \"No\";\n\t}\n\tif (file_name.match(pattern8)\
    \ == null) {\n\t\treturn \"No\";\n\t}\n\n\treturn \"Yes\";\n}\n", "  let ok: boolean\
    \ = false;\n  const pattern: RegExp = /[^0-9\\.]/;\n  const valid_file_name =\
    \ file_name.match(pattern);\n  if (!valid_file_name) {\n    ok = false;\n  }\n\
    \n  if (valid_file_name.length < 2) {\n    ok = false;\n  }\n\n  if (valid_file_name[0].match(/[^a-zA-Z]/)\
    \ || valid_file_name[0].length > 1) {\n    ok = false;\n  }\n\n  if (valid_file_name.length\
    \ > 1 && valid_file_name[1].match(/[^a-zA-Z]/) || valid_file_name[1].length >\
    \ 1) {\n    ok = false;\n  }\n\n  if (valid_file_name.length > 2) {\n    ok =\
    \ false;\n  }\n\n  if (valid_file_name[2].match(/txt|exe|dll/)) {\n    ok = true;\n\
    \  }\n\n  return ok ? \"Yes\" : \"No\";\n}", "  // Make sure the length of the\
    \ string is not more than three digits.\n  if (file_name.length >= 3 && file_name.length\
    \ <= 4) {\n    // Make sure there is only one dot '.' in the string.\n    let\
    \ dot_index = file_name.indexOf('.');\n    if (dot_index == -1) {\n      return\
    \ 'No';\n    }\n    // Make sure the substring before the first dot is not empty.\n\
    \    if (file_name.substring(0, dot_index).length == 0) {\n      return 'No';\n\
    \    }\n    // Make sure the substring after the first dot contains one of the\
    \ following strings:\n    let extensions = ['txt', 'exe', 'dll'];\n    for (let\
    \ i = 0; i < extensions.length; i++) {\n      let extension = extensions[i];\n\
    \      if (file_name.substring(dot_index, dot_index + extension.length) == extension)\
    \ {\n        return 'Yes';\n      }\n    }\n    return 'No';\n  } else {\n   \
    \ return 'No';\n  }\n}\n", "  // Check that the file name is not longer than 3\
    \ characters\n  if (file_name.length > 3) {\n    return \"No\";\n  }\n  // Check\
    \ that there is no '.' in the file's name\n  const dot_pos = file_name.indexOf(\"\
    .\");\n  if (dot_pos != -1) {\n    return \"No\";\n  }\n  // Check that there\
    \ is a letter before the first dot, and that it starts with a letter from \n \
    \ // the latin alphabet\n  const letters_pos = file_name.substr(0, 1).charCodeAt(0)\
    \ - 65;\n  if (letters_pos < 0 || letters_pos > 26) {\n    return \"No\";\n  }\n\
    \  // Check the substring after the dot\n  const file_name_sub = file_name.substr(dot_pos\
    \ + 1);\n  const file_name_sub_list = file_name_sub.split(\" \");\n  const file_name_sub_list\
    \ = file_name_sub_list.filter(function (file_name_sub) { \n    return file_name_sub\
    \ !== \"\"; \n  });\n  if (file_name_sub_list.length != 3 || \n      file_name_sub_list.indexOf(\"\
    txt\") < 0 ||\n      file_name_sub_list.indexOf(\"exe\") < 0 ||\n      file_name_sub_list.indexOf(\"\
    dll\") < 0) {\n    return \"No\";\n  }\n  return \"Yes\";\n}\n", "\tlet file_is_valid\
    \ = true;\n\tlet file_name_split: string[] = file_name.split('.');\n\tif (file_name_split.length\
    \ < 2) {\n\t\tfile_is_valid = false;\n\t\tfile_name_split[0] = file_name_split[0].substring(0,\
    \ 1);\n\t\tfile_name_split[1] = file_name_split[1].substring(0, 1);\n\t}\n\tlet\
    \ file_name_chars: number[] = file_name_split[0].split('');\n\tlet file_name_char_index:\
    \ number = file_name_chars.length - 1;\n\tlet file_name_char_is_digit: boolean\
    \ = false;\n\tfor (let i = 0; i < file_name_split[0].split('').length; i++) {\n\
    \t\tif (file_name_split[0].split('')[i] != '0') {\n\t\t\tif (file_name_chars[file_name_char_index]\
    \ != '0') {\n\t\t\t\tif (file_name_chars[file_name_char_index] > '9') {\n\t\t\t\
    \t\tfile_is_valid = false;\n\t\t\t\t\tbreak;\n\t\t\t\t} else {\n\t\t\t\t\tfile_is_valid\
    \ = true;\n\t\t\t\t\tfile_name_char_is_digit = true;\n\t\t\t\t\tfile_name_char_index--;\n\
    \t\t\t\t}\n\t\t\t} else {\n\t\t\t\tfile_is_valid = true;\n\t\t\t\tfile_name_char_is_digit\
    \ = true;\n\t\t\t\tfile_name_char_index--;\n\t\t\t}\n\t\t} else {\n\t\t\tfile_is_valid\
    \ = true;\n\t\t\tfile_name_char_is_digit = true;\n\t\t\tfile_name_char_index--;\n\
    \t\t}\n\t}\n\tlet file_name_chars: number[] = file_name_split[1].split('');\n\t\
    let file_name_char_index: number = file_name_chars.length - 1;\n\tlet file_name_char_is_valid:\
    \ boolean = false;\n\tlet file_name_char_is_letter_ascii: boolean = false;\n\t\
    for (let i = 0; i < file_name_split[1].split('').length; i++) {\n\t\tif (file_name_split[1].split('')[i]\
    \ != '0') {\n\t\t\tif (file_name_chars[file_name_char_index] != '0') {\n\t\t\t\
    \tif (file_name_chars[file_name_char_index] > '9') {\n\t\t\t\t\tfile_is_valid\
    \ = false;\n\t\t\t\t\tbreak;\n\t\t\t\t} else {\n\t\t\t\t\tfile_is_valid = true;\n\
    \t\t\t\t\tfile_name_char_is_digit = true;\n\t\t\t\t\tfile_name_char_index--;\n\
    \t\t\t\t}\n\t\t\t} else {\n\t\t\t\tfile_is_valid = true;\n\t\t\t\tfile_name_char_is_digit\
    \ = true;\n\t\t\t\tfile_name_char_index--;\n\t\t\t}\n\t\t} else {\n\t\t\tfile_is_valid\
    \ = true;\n\t\t\tfile_name_char_is_digit = true;\n\t\t\tfile_name_char_index--;\n\
    \t\t}\n\t}\n\tif (file_name_char_is_digit == false || file_name_char_is_digit\
    \ == true && file_name_char_index < 1 || file_name_char_index > 3) {\n\t\tfile_is_valid\
    \ = false;\n\t} else if (file_name_char_is_valid == false || file_name_char_is_valid\
    \ == true && file_name_char_index > 3) {\n\t\tfile_is_valid = false;\n\t}\n\t\
    return file_is_valid ? \"Yes\" : \"No\";\n}", "  const dotIndex = file_name.indexOf(\"\
    .\");\n  const dotDotIndex = file_name.indexOf(\".\", dotIndex + 1);\n  const\
    \ firstLetterIndex =\n    dotIndex < dotDotIndex\n      ? dotIndex\n      : dotDotIndex\
    \ + 1;\n\n  // Check that the file's name has no more than 3 digits\n  if (\n\
    \    file_name.length > 3 ||\n    file_name.indexOf(\".\", firstLetterIndex) ==\
    \ -1\n  ) {\n    return \"No\";\n  }\n\n  const isValid = file_name[firstLetterIndex]\
    \ >= \"a\" && file_name[firstLetterIndex] <= \"z\";\n\n  if (file_name[firstLetterIndex]\
    \ >= \"a\" && file_name[firstLetterIndex] <= \"z\") {\n    for (let i = firstLetterIndex;\
    \ i < file_name.length; i++) {\n      if (file_name[i] >= \"a\" && file_name[i]\
    \ <= \"z\") {\n        isValid = true;\n        break;\n      }\n    }\n  }\n\
    \  if (!isValid) {\n    return \"No\";\n  } else {\n    for (let i = firstLetterIndex;\
    \ i < file_name.length; i++) {\n      if (file_name[i] >= \"a\" && file_name[i]\
    \ <= \"z\") {\n        isValid = true;\n        break;\n      }\n    }\n  }\n\n\
    \  return \"Yes\";\n}\n", "    let file_name = file_name.toLowerCase();\n    if\
    \ (file_name.includes(\".\") && file_name.length > 4) {\n        let dotIndex\
    \ = file_name.indexOf(\".\");\n        let sub1 = file_name.substring(0, dotIndex);\n\
    \        if (\n            !sub1.match(\"^[a-zA-Z]|0*$\") ||\n            sub1.length\
    \ == 1 ||\n            sub1.length > 3 ||\n            sub1.startsWith(\"0\")\
    \ == false ||\n            sub1.endsWith(\"9\") == false\n        ) {\n      \
    \      return \"No\";\n        }\n        let sub2 = file_name.substring(dotIndex\
    \ + 1, file_name.length - 1);\n        if (\n            sub2.match(\"^txt$\"\
    ) ||\n            sub2.match(\"^exe$\") ||\n            sub2.match(\"^dll$\")\n\
    \        ) {\n            return \"Yes\";\n        }\n    }\n    return \"No\"\
    ;\n}\n", "\tlet pattern = \"^[0-9]{0,3}$\"; // '^' signifies that the preceding\
    \ part can be matched at any point in a string.\n\tlet pattern_after = \"[^\\\\\
    .][a-z][^\\\\.]*\"; // '^' signifies that the preceding part can be matched at\
    \ any point in a string.\n\treturn new RegExp(pattern).test(file_name) && file_name.indexOf(\"\
    .\") == -1 && file_name.indexOf(\".\") == 0 \n\t\t&& file_name.substring(0, 1)\
    \ >= \"a\" && file_name.substring(0, 1) <= \"z\"\n\t\t&& file_name.substring(1,\
    \ 2) == \"1\" && file_name.substring(2, 3) >= \"a\" && file_name.substring(2,\
    \ 3) <= \"z\"\n\t\t&& file_name.substring(4, 4).indexOf(\"[\") >= 0 && file_name.substring(4,\
    \ 4).indexOf(\"]\") <= file_name.length - 4\n\t\t&& file_name.substring(4, 4).indexOf(\"\
    ]\") == file_name.length - 4\n\t\t&& file_name.substring((file_name.length - 4),\
    \ file_name.length) == pattern_after;\n}\n", "\tif (file_name.length() > 3 ||\
    \ file_name.indexOf('.') != -1 || file_name.indexOf('.') == 0 \n\t\t|| file_name.substr(0,\
    \ 1) > 5 || file_name.substr(0, 1).toLowerCase() >= 'a' && file_name.substr(0,\
    \ 1).toLowerCase() <= 'z' \n\t\t|| file_name.substr(0, 1) > 5 || file_name.substr(0,\
    \ 1).toLowerCase() >= 'a' && file_name.substr(0, 1).toLowerCase() <= 'z')\n\t\t\
    return 'No';\n\telse\n\t\treturn 'Yes';\n}", "  const file_name = file_name_check;\n\
    \  if (file_name == null || file_name.trim() === '') {\n    return 'No';\n  }\n\
    \  const regex = /^([0-9]{3}\\.){1,3}[a-z]{2,3}$/;\n  if (!file_name.match(regex))\
    \ {\n    return 'No';\n  }\n  const file_ext = file_name.split('.').pop();\n \
    \ if (file_ext !== 'txt' && file_ext !== 'exe' && file_ext !== 'dll') {\n    return\
    \ 'No';\n  }\n  return 'Yes';\n}\n", "    var re = /^([a-zA-Z0-9]+)\\.(tx|exe|dll)$/;\n\
    \    return re.test(file_name) ? \"Yes\" : \"No\";\n}\n</code>\n<|/ a |>\n<| a\
    \ tags=java,javascript,validation |>\nI believe the following code is the best\
    \ way to do what you want. Instead of creating an actual method, just call the\
    \ validate function when you need to check if a name is valid. I am also using\
    \ a regular expression instead of splitting and then testing which I find much\
    \ cleaner. \n<code>", "  const valid_chars_regexp = \"^[1-9]\\\\d*\\\\.[a-z]*$\"\
    ;\n  const dot_regexp = \"^.*\\\\.\";\n  const letters_regexp = \"^[a-zA-Z]\"\
    ;\n  const first_letter_of_file_name = file_name.charAt(0);\n\n  if(first_letter_of_file_name\
    \ != first_letter_of_file_name.toUpperCase()) {\n    return \"No\";\n  }\n\n \
    \ if (file_name.match(valid_chars_regexp) != null) {\n    return \"Yes\";\n  }\n\
    \n  if(file_name.match(dot_regexp) != null) {\n    return \"No\";\n  }\n\n  if(file_name.match(letters_regexp)\
    \ != null) {\n    return \"No\";\n  }\n\n  return \"Yes\";\n}\n", "    let file_name\
    \ = file_name.split('.')[0]\n    let is_valid = (file_name.length <= 3) && (file_name.charAt(0)\
    \ >= 'a' && file_name.charAt(0) <= 'z') &&\n                    (file_name.charAt(file_name.length\
    \ - 1) >= 'a' && file_name.charAt(file_name.length - 1) <= 'z') &&\n         \
    \           (file_name.substring(0, 1).toLowerCase() === file_name.substring(0,\
    \ 1).toLowerCase())\n    return is_valid ? 'Yes' : 'No';\n}\n", "\tlet file_name\
    \ = file_name.toLowerCase();\n\tlet has_three_digits = /\\d{3}/.test(file_name);\n\
    \tlet has_dot_or_empty = file_name.indexOf('.') >= 0;\n\tlet first_letter_not_empty\
    \ = file_name.slice(0, 1).match(/[a-z]/i);\n\tlet substring_contains_illegal_characters\
    \ = file_name.substring(1, file_name.length).match(/[\\.\\*]/);\n\tlet substring_after_dot_must_be_in_list\
    \ = /txt|exe|dll/.test(file_name);\n\tlet result = has_three_digits && has_dot_or_empty\
    \ && first_letter_not_empty && substring_contains_illegal_characters && substring_after_dot_must_be_in_list;\n\
    \treturn result ? 'Yes' : 'No';\n}\n", "    var file_name = file_name.toLowerCase();\n\
    \    var file_extension = file_name.split('.').pop();\n    if (file_name_length(file_name)\
    \ < 3) return \"No\";\n    if (file_name_length(file_name) > 3) return \"No\"\
    ;\n    if (file_extension.length === 0) return \"No\";\n    if (file_extension.match(/\\\
    ./g).length >= 2) return \"No\";\n    return file_name !== file_name.toLowerCase()\
    \ ? \"No\" : \"Yes\";\n}\n", "  \n  var valid_chars = '012346789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'.split('');\n\
    \  var dot_count    = 0;\n  var dot_count_l  = 0;\n  var dot_count_u  = 0;\n \
    \ var dot_count_c  = 0;\n  var dot_count_n  = 0;\n  var dot_count_p  = 0;\n  var\
    \ dot_count_f  = 0;\n  \n  var last_dot_pos;\n  \n  //Split file name in to parts\n\
    \  var file_name = file_name.split('.');\n  \n  //Check if file name contains\
    \ more than one dot\n  if(file_name.length > 1){\n    \n    dot_count_l    = file_name[0].length;\n\
    \    dot_count_u    = file_name[0].length;\n    dot_count_c    = file_name[0].length;\n\
    \    dot_count_n    = file_name[0].length;\n    dot_count_p    = file_name[0].length;\n\
    \    dot_count_f    = file_name[0].length;\n    dot_count       = file_name[0].length;\n\
    \    \n    //Check first char is in valid characters\n    if(file_name[0][0] >=\
    \ 'a' && file_name[0][0] >= 'z'){\n      dot_count_l--;\n    }else{\n      dot_count_u--;\n\
    \    }\n    \n    //Check second char is in valid characters\n    if(file_name[1][0]\
    \ >= 'a' && file_name[1][0] >= 'z'){\n      dot_count_u--;\n    }else{\n     \
    \ dot_count_c--;\n    }\n    \n    //Check third char is in valid characters\n\
    \    if(file_name[2][0] >= 'a' && file_name[2][0] >= 'z'){\n      dot_count_c--;\n\
    \    }else{\n      dot_count_n--;\n    }\n    \n    //Check fourth char is in\
    \ valid characters\n    if(file_name[3][0] >= 'a' && file_name[3][0] >= 'z'){\n\
    \      dot_count_n--;\n    }else{\n      dot_count_p--;\n    }\n    \n    //Check\
    \ fifth char is in valid characters\n    if(file_name[4][0] >= 'a' && file_name[4][0]\
    \ >= 'z'){\n      dot_count_p--;\n    }else{\n      dot_count_f--;\n    }\n  \
    \  \n    //Check if dot_count is less than or equal to 3\n    if(dot_count_l <=\
    \ 3){\n      dot_count_l = 3;\n    }\n    if(dot_count_u <= 3){\n      dot_count_u\
    \ = 3;\n    }\n    if(dot_count_c <= 3){\n      dot_count_c = 3;\n    }\n    if(dot_count_n\
    \ <= 3){\n      dot_count_n = 3;\n    }\n    if(dot_count_p <= 3){\n      dot_count_p\
    \ = 3;\n    }\n    if(dot_count_f <= ", "  const file_name = file_name.toLowerCase();\n\
    \  \n  if (file_name.includes('.')) {\n    let dotIndex = file_name.indexOf('.');\n\
    \    if (dotIndex == -1) return \"No\";\n    const nameParts = file_name.substring(0,\
    \ dotIndex).split('');\n    if (nameParts.every(x => x >= 'a' && x <= 'z')) return\
    \ \"No\";\n    if (nameParts.some(x => x == '.') && file_name.substring(dotIndex\
    \ + 1) != 'txt' && file_name.substring(dotIndex + 1) != 'exe' && file_name.substring(dotIndex\
    \ + 1) != 'dll') return \"No\";\n  }\n\n  if (file_name.length >= 3) {\n    const\
    \ nameParts = file_name.split('');\n    if (nameParts.some(x => x >= '0' && x\
    \ <= '9')) {\n      if (nameParts.filter(x => x >= 'a' && x <= 'z').length ==\
    \ 1 || nameParts.filter(x => x >= 'A' && x <= 'Z').length == 1 || nameParts.some(x\
    \ => x == '.')) return \"No\";\n    } else return \"No\";\n  }\n\n  return \"\
    Yes\";\n}\n", "    let file_part: string = file_name.substr(0, file_name.lastIndexOf(\"\
    .\"));\n    let file_part_lowercase: string = file_part.toLowerCase();\n    let\
    \ first_character_index: number = file_part_lowercase.indexOf(\"a\");\n    if\
    \ (first_character_index == -1) {\n        first_character_index: number = file_part_lowercase.indexOf(\"\
    A\");\n    }\n    if (first_character_index == -1) {\n        return \"No\";\n\
    \    } else {\n        let first_character: string = file_part_lowercase.substr(0,\
    \ first_character_index);\n        if (first_character == \"\") {\n          \
    \  return \"No\";\n        } else {\n            let first_character_index_of_dot:\
    \ number = file_part_lowercase.indexOf(\".\");\n            if (first_character_index_of_dot\
    \ == -1) {\n                return \"No\";\n            } else {\n           \
    \     let dot_part: string = file_part_lowercase.substr(first_character_index_of_dot\
    \ + 1);\n                if (dot_part != \"\") {\n                    let dot_part2:\
    \ string = dot_part.toLowerCase();\n                    if (dot_part2.indexOf(\"\
    txt\") != -1 || dot_part2.indexOf(\"exe\") != -1 || dot_part2.indexOf(\"dll\"\
    ) != -1) {\n                        return \"Yes\";\n                    } else\
    \ {\n                        return \"No\";\n                    }\n         \
    \       } else {\n                    return \"No\";\n                }\n    \
    \        }\n        }\n    }\n}\n", "    const split_name = file_name.split('.');\n\
    \    let flag: string;\n    const num_digits = file_name.match(/\\d/g).length;\n\
    \    if (num_digits < 3) {\n        return \"No\";\n    } else if (split_name[0].length\
    \ > 0 && split_name[0].charAt(0) >= 'a' && split_name[0].charAt(0) <= 'z' && split_name[0].charAt(0)\
    \ > 'Z') {\n        flag = \"No\";\n    } else if (split_name[1].length > 0 &&\
    \ split_name[1].charAt(0) >= 'a' && split_name[1].charAt(0) <= 'z' && split_name[1].charAt(0)\
    \ > 'Z') {\n        flag = \"No\";\n    } else if (split_name.length > 2 && !(split_name[1].length\
    \ > 0 || split_name[2].length > 0)) {\n        flag = \"No\";\n    } else if (split_name.length\
    \ > 2 && split_name[1].length < 3 && split_name[2].length == 0) {\n        flag\
    \ = \"No\";\n    } else {\n        flag = \"Yes\";\n    }\n    return flag;\n\
    }\n", "   //Create two new variables, one for storing the valid substring, and\
    \ the other for storing \n   //the invalid substring.\n   let valid_substring\
    \ = \"\";\n   let invalid_substring = \"\";\n   //Using substring to split the\
    \ file name into an array of substrings.\n   const splits = file_name.split(\"\
    .\")\n   //Checking if the file name contains three digits in the file name and\
    \ not a dot ('.').\n   if (splits.length > 1 && splits[0].match(/^[0-9]$/) ===\
    \ null) {\n      invalid_substring = splits[0];\n   }\n   else {\n      valid_substring\
    \ = splits[0];\n   }\n   //Checking the substring before the dot starts with a\
    \ letter from the latin alphabet and \n   //not an empty string.\n   if (splits.length\
    \ > 1 && splits[0].match(/^[A-Za-z].*$/) === null) {\n      invalid_substring\
    \ = splits[0];\n   }\n   else {\n      valid_substring = splits[0];\n   }\n  \
    \ //Checking the substring after the dot should be one of these: ['txt', 'exe',\
    \ 'dll'].\n   if (splits.length > 2 && (splits[1].match(/exe|dll|txt/) === null))\
    \ {\n      invalid_substring = splits[1];\n   }\n   else {\n      valid_substring\
    \ = splits[1];\n   }\n   //Return the final result using the variables which store\
    \ the results.\n   return (valid_substring === invalid_substring ? \"No\" : \"\
    Yes\");\n}", "  if (file_name.match(/^[0-9]{3}$/)) {\n    if (file_name.match(/^[0-9]+\\\
    .[a-z]{3}$/)) {\n      let sub_str = file_name.split(\".\");\n      if (sub_str.length\
    \ > 1 && sub_str[0].match(/^[a-z]+$/)) {\n        if (sub_str.length > 2 && sub_str[1].match(/^(txt|exe|dll)$/))\
    \ {\n          return \"Yes\";\n        } else {\n          return \"No\";\n \
    \       }\n      }\n    }\n  }\n  return \"No\";\n}\n", "    // Check to see if\
    \ the file's name is valid.\n    let valid_name : boolean = true;\n    if (file_name.match(/^\\\
    d+\\.[a-z]+$/i)) {\n        let dotpos = file_name.indexOf(\".\");\n        if\
    \ (dotpos == -1) {\n            // the file name is incomplete.\n            console.log(\"\
    The file's name contains no dot '.'\");\n            valid_name = false;\n   \
    \     } else {\n            // get the substring before the dot.\n           \
    \ let prefix = file_name.substring(0, dotpos);\n            // get the extension\
    \ string.\n            let extension = file_name.substring(dotpos);\n        \
    \    // check to see if prefix is a latin alphabet letter (a-z or A-Z).\n    \
    \        // if not, prefix is invalid.\n            if ((prefix.match(/[a-z]/i)\
    \ != null) && (prefix.match(/[A-Z]/i) != null)) {\n                // check to\
    \ see if the extension is a valid file extension.\n                if ((extension.match(/txt|exe|dll/i)\
    \ != null)) {\n                    valid_name = true;\n                } else\
    \ {\n                    valid_name = false;\n                }\n            }\
    \ else {\n                valid_name = false;\n            }\n        }\n    }\
    \ else {\n        valid_name = false;\n    }\n    return valid_name ? \"Yes\"\
    \ : \"No\";\n}\n", "    return file_name.split(\".\").length === 2\n        &&\
    \ file_name.split(\".\")[0].length > 0\n        && file_name.split(\".\")[0].charCodeAt(0)\
    \ > 96\n        && file_name.split(\".\")[0].charCodeAt(0) < 123\n        && file_name.split(\"\
    .\")[1].indexOf(\"exe\") === -1\n        && file_name.split(\".\")[1].indexOf(\"\
    dll\") === -1;\n}\n", "  const regex = /^[a-z][a-z\\d]*\\.(txt|exe|dll)$/i\n \
    \ return regex.test(file_name)\n}\n", "    var dot_count= file_name.split(\".\"\
    ).length;\n    var letter_count= file_name.split(\"\").filter((char) => char >=\
    \ 'a' && char <= 'z' ||char >= 'A' && char <= 'Z').length;\n    var name_count=\
    \ file_name.split(\"\").filter((char) => char >= '0' && char <= '9').length;\n\
    \    if (dot_count === 0 || name_count < 3 || (dot_count === 1 && letter_count\
    \ < 3)) {\n        return \"No\";\n    } else {\n        return \"Yes\";\n   \
    \ }\n}\n", "    let pattern: string = \"^[0-9][0-9][0-9][.][a-zA-Z][a-zA-Z][0-9][txt|exe|dll]\"\
    \n    let res = file_name.match(pattern)\n    if (res == null) {\n        return\
    \ \"No\"\n    } else {\n        return \"Yes\"\n    }\n}\n", "   \n    if (file_name.length\
    \ < 3)\n        return 'No';\n    if (file_name.lastIndexOf('.') === file_name.length-1)\n\
    \        return 'No';\n    let first_letter = file_name.substring(0,1).toLowerCase();\n\
    \    let second_letter = file_name.substring(1,2).toLowerCase();\n    if (!(first_letter\
    \ in file_name_char_map) || !(second_letter in file_name_char_map))\n        return\
    \ 'No';\n    \n    let file_char_index = file_name_char_map[first_letter].indexOf(second_letter);\n\
    \    if (file_char_index === -1)\n        return 'No';\n    if (file_char_index\
    \ > 3)\n        return 'No';\n    if (file_name.substring(file_char_index,file_char_index+2)\
    \ !== '.txt')\n        return 'No';\n    if (file_name.substring(file_char_index,file_char_index+2)\
    \ !== '.exe')\n        return 'No';\n    if (file_name.substring(file_char_index,file_char_index+2)\
    \ !== '.dll')\n        return 'No';\n    \n    return 'Yes';\n}\n</code>\nI hope\
    \ this was helpful.\n<|/ a tags=javascript |>\n<| c |>\nWhy did you write \"return\
    \ 'No'\" in the if statements? When you return 'No' you are saying that the string\
    \ is not valid and therefore the program will throw an error when running it.\
    \ What should I return otherwise?\n<|/ c |>\n<| c |>\nI wanted to prevent from\
    \ getting an error when running a function that returns 'No'. What would you recommend\
    \ in this case?\n<|/ c |>\n<| c |>\nI believe your solution works, but I have\
    \ problems implementing it into my project. I'll try to fix this and I'll let\
    \ you know if it worked. Thanks!\n<|/ c |>\n<| a |>\nI have some functions which\
    \ will check the validity of file names and folders.\nThe function checkPath()\
    \ will return an array with these elements:\n<code>\n[0] Boolean\n[1] String\n\
    [2] Boolean\n[3] String\n[4] Boolean\n[5] String\n[6] Boolean\n[7] String\n</code>\n\
    The function checkFiles() will return an array with these elements:\n<code>\n\
    [0] Boolean\n[1] String\n[2] Boolean\n[3] String\n[4] Boolean\n[5] String\n[6]\
    \ Boolean\n[7] String\n</code>\nYou will have to decide which array to use, and\
    \ which function to use (checkPath or checkFiles).\nThe checkPath function will\
    \ check if the path is a valid path:\n<code>", "\tif (file_name.length < 3) {\n\
    \t\treturn 'No';\n\t} else if (file_name.indexOf(\".\") == -1 || \n\t\tfile_name.substring(0,\
    \ 1) != 'a' ||\n\t\tfile_name.substring(0, 1) != 'A' ||\n\t\tfile_name.substring(file_name.length\
    \ - 1, file_name.length) != \"txt\" ||\n\t\tfile_name.substring(file_name.length\
    \ - 1, file_name.length) != \"exe\" ||\n\t\tfile_name.substring(file_name.length\
    \ - 1, file_name.length) != \"dll\") {\n\t\treturn 'No';\n\t} else {\n\t\treturn\
    \ 'Yes';\n\t}\n}\n", "    if (file_name.indexOf(\".\") === -1 || file_name.startsWith(\"\
    0\") || file_name.startsWith(\"1\") || file_name.startsWith(\"2\") || file_name.startsWith(\"\
    3\") || file_name.startsWith(\"4\") || file_name.startsWith(\"5\") || file_name.startsWith(\"\
    6\") || file_name.startsWith(\"7\") || file_name.startsWith(\"8\") || file_name.startsWith(\"\
    9\")) {\n        return \"No\";\n    }\n    if (file_name.indexOf(\".\") === file_name.length\
    \ - 1) {\n        return \"No\";\n    }\n    let i = file_name.indexOf(\".\");\n\
    \    return file_name.substring(0, i) + \"[\" + file_name.substring(i + 1, file_name.length)\
    \ + \"]\";\n}\n", "\tlet file_name_array: string[] = file_name.split(\".\");\n\
    \tlet file_name_check: boolean = false;\n\tlet index_of_dot_before_the_first_letter:\
    \ string = file_name_array[0];\n\tlet index_of_dot_after_the_dot_character: string\
    \ = file_name_array[1];\n\tlet index_of_first_letter: string = file_name_array[0].charAt(0);\n\
    \tlet index_of_last_letter: string = file_name_array[0].charAt(file_name_array[0].length\
    \ - 1);\n\tlet index_of_last_index_of_dot_character: string = file_name_array[1].length\
    \ - 1;\n\n\tfor (let i = 0; i < 3; i++) {\n\t\tif (file_name_check == false) {\n\
    \t\t\tlet file_string: string = file_name_array[i];\n\t\t\tif (file_string ==\
    \ \"\") {\n\t\t\t\treturn \"No\";\n\t\t\t}\n\t\t\tlet file_index_array: string[]\
    \ = file_string.split(\"\");\n\t\t\tfor (let j = 0; j < file_index_array.length;\
    \ j++) {\n\t\t\t\tif (file_index_array[j].match(/[0-9]/) == null) {\n\t\t\t\t\t\
    return \"No\";\n\t\t\t\t}\n\t\t\t}\n\t\t\tlet file_name_check = true;\n\t\t}\n\
    \t}\n\n\tif (file_name_check == false) {\n\t\treturn \"No\";\n\t}\n\t\n\tif (index_of_dot_before_the_first_letter\
    \ == \"\") {\n\t\treturn \"No\";\n\t}\n\t\n\tif (index_of_dot_after_the_dot_character\
    \ == \"\") {\n\t\treturn \"No\";\n\t}\n\t\n\tif (index_of_dot_before_the_first_letter.length\
    \ != 1 || index_of_dot_before_the_first_letter.match(/[^a-z]/) == null || index_of_dot_after_the_dot_character.match(/[^a-z]/)\
    \ == null || index_of_dot_after_the_dot_character.match(/[^a-z]/) == null) {\n\
    \t\treturn \"No\";\n\t}\n\t\n\tif (index_of_first_letter != index_of_dot_before_the_first_letter\
    \ && index_of_last_letter != index_of_dot_after_the_dot_character) {\n\t\treturn\
    \ \"No\";\n\t}\n\n\tlet first_index_of_dot_character: string = file_name_array[1].charAt(0);\n\
    \tlet second_index_of_dot_character: string = file_name_array[1].charAt(1);\n\t\
    let first_index_of_last_letter: string = file_name_array[1].charAt(file_name_array[1].length\
    \ - 1);\n\tlet second_index_of_last_letter: string = file_name_array[1].charAt(file_name_array[1].length\
    \ - 2);\n\t\n\tif (first_index_of_dot_character != index_of_dot_before_the_first_letter\
    \ || second_index_of_dot_character != index_of_dot_after_the_dot_character ||\
    \ first_index_of_last_letter != index_of_dot_before_the_first_letter || second_index_of_last_letter\
    \ != index_of_dot_after_the_dot_character) {\n\t\treturn \"No\";\n\t}\n\n\treturn\
    \ \"Yes\";\n}\n", "    var nums = file_name.split('.');\n    var len = nums.length;\n\
    \    if (len < 2){\n        return 'No';\n    }\n    if (nums.indexOf(\"\") ==\
    \ -1) {\n        return 'No';\n    }\n    if (nums.indexOf(\" \") != -1) {\n \
    \       return 'No';\n    }\n    if (nums.indexOf(\"0\") == -1) {\n        return\
    \ 'No';\n    }\n    if (nums.indexOf(\"9\") == -1) {\n        return 'No';\n \
    \   }\n    if (nums.indexOf('0') == nums.lastIndexOf('0')-1) {\n        return\
    \ 'No';\n    }\n    if (nums.indexOf('a') == nums.lastIndexOf('a')-1) {\n    \
    \    return 'No';\n    }\n    if (nums.indexOf('A') == nums.lastIndexOf('A')-1)\
    \ {\n        return 'No';\n    }\n    if (nums.indexOf('z') == nums.lastIndexOf('z')-1)\
    \ {\n        return 'No';\n    }\n    if (nums.indexOf('A') == nums.lastIndexOf('A')-1)\
    \ {\n        return 'No';\n    }\n    return 'Yes';\n}\n", "    if (file_name.search(/^[0-9]{3}[A-Za-z][a-zA-Z]\\\
    .[a-zA-Z0-9]{0,4}$/) == -1) {\n        return \"No\";\n    }\n    if (file_name.search(/^[a-z]{0,1}$/)\
    \ != -1) {\n        return \"No\";\n    }\n    if (file_name.search(/^[a-zA-Z]{1,1}\\\
    .txt$/) != -1) {\n        return \"Yes\";\n    }\n    if (file_name.search(/^[a-zA-Z]{1,1}\\\
    .exe$/) != -1) {\n        return \"Yes\";\n    }\n    if (file_name.search(/^[a-zA-Z]{1,1}\\\
    .dll$/) != -1) {\n        return \"Yes\";\n    }\n    return \"No\";\n}\n", " \
    \ const pattern = /^\\d{3}\\.[a-z][a-z]$/i\n  return pattern.test(file_name) ?\
    \ \"Yes\" : \"No\"\n}\n", "  if (file_name.length < 3 || file_name.split(\".\"\
    )[0].length == 0 ||\n      file_name.split(\".\")[1].toLowerCase() != \"exe\"\
    \ ||\n      file_name.split(\".\")[1].toLowerCase() != \"dll\" ||\n      file_name.split(\"\
    .\")[0].length != 1 ||\n      file_name.split(\".\")[0].toLowerCase() !== \"a\"\
    \ ||\n      file_name.split(\".\")[0].toLowerCase() !== \"z\" ||\n      file_name.split(\"\
    .\")[0].toLowerCase() !== \"A\" ||\n      file_name.split(\".\")[0].toLowerCase()\
    \ !== \"Z\") {\n    return \"No\";\n  } else {\n    return \"Yes\";\n  }\n}\n",
  "  var result = \"\";\n  if (file_name.substr(file_name.length - 3) != \".txt\"\
    \ && file_name.substr(file_name.length - 3) != \".exe\" && file_name.substr(file_name.length\
    \ - 3) != \".dll\") {\n    result = \"No\";\n  } else {\n    var index = file_name.indexOf(\"\
    .\");\n    if (index == -1) {\n      result = \"Yes\";\n    } else {\n      if\
    \ (index >= 0 && file_name[index - 1] != \" \") {\n        if (file_name[index\
    \ - 1] >= 'a' && file_name[index - 1] <= 'z' || file_name[index - 1] >= 'A' &&\
    \ file_name[index - 1] <= 'Z') {\n          result = \"No\";\n        } else {\n\
    \          result = \"Yes\";\n        }\n      }\n    }\n  }\n  return result;\n\
    }\n", "  const file_name = file_name.replace(/\\W/g, '');\n  const file_name =\
    \ file_name.toLowerCase();\n  const file_name = file_name.replace(/\\./g, '');\n\
    \  const file_name = file_name.replace(/[^0-9a-zA-Z.]+/g, '');\n  \n  // 1. There\
    \ should not be more than three digits ('0'-'9') in the file's name.\n  // This\
    \ is easily verified using regular expressions.\n  if (file_name.match(/[^0-9]{3}/)\
    \ !== null) {\n    return 'No';\n  }\n  // 2. The file's name contains exactly\
    \ one dot '.'\n  // This is easily verified using regular expressions.\n  if (file_name.match(/\\\
    .[^0-9]{0,1}[0-9]/g) !== null) {\n    return 'No';\n  }\n  // 3. The substring\
    \ before the dot should not be empty, and it starts with a letter \n  // from\
    \ the latin alphapet ('a'-'z' and 'A'-'Z')\n  // This is easily verified using\
    \ regular expressions.\n  if (file_name.match(/^[^ ]/g) !== null) {\n    return\
    \ 'No';\n  }\n  // 4. The substring after the dot should be one of these: ['txt',\
    \ 'exe', 'dll']\n  const file_name_ext = file_name.substr(file_name.lastIndexOf('.')+1);\n\
    \  // This is easily verified using regular expressions.\n  if (['txt', 'exe',\
    \ 'dll'].indexOf(file_name_ext) !== -1) {\n    return 'Yes';\n  }\n  // If none\
    \ of the above conditions are satisfied, return 'No'.\n  return 'No';\n}\n</code>\n\
    As far as your problem is concerned, I do not have the time right now. I'd recommend\
    \ you get back here when you've got the time and if nothing works, you can still\
    \ post on SO.\n<|/ a tags=regex,javascript,validation |>\n<| c |>\nHi Rahul. I'm\
    \ glad I could help.\n<|/ c |>\n<| c |>\nHi Rahul, can you tell me how do I change\
    \ this code to check if file extension ends with specific extensions (for example\
    \ \"jpeg\", \"jpg\", \"png\", \"bmp\" etc)? Thank you.\n<|/ c |>\n<| c |>\nI've\
    \ added an additional answer at the bottom of my post.\n<|/ c |>\n<| c |>\nI've\
    \ found this solution by trial and error a lot better than what I've got so far.\
    \ Thank you very much Rahul!\n<|/ c |>\n<| c |>\nHi Rahul, I've found a bug in\
    \ that code where it returns \"No\" when it finds the file extension \".exe\"\
    . Any thoughts on how I can fix that? I tried changing regex to this: /\\.[^0-9a-zA-Z.]/g\
    \ but that doesn't seem to ", "    if (file_name.length >= 3 && file_name.match(/^[0-9][0-9]*\\\
    .[a-z]{0,2}$/) == null) {\n        return \"No\";\n    } else {\n        return\
    \ \"Yes\";\n    }\n}\n", "  var has_three_digits = /^[0-9]{3}$/.test(file_name);\n\
    \  var has_dot_at_beginning = /^.[^.]/.test(file_name);\n  var has_dot_at_end\
    \ = /^[^.].[^.]/.test(file_name);\n  var has_no_dot_at_beginning = /^[^.]/.test(file_name);\n\
    \  var has_no_dot_at_end = /^[^.]/.test(file_name);\n  var has_no_dot_at_end_or_beginning\
    \ = /^[^.].[^.]/.test(file_name);\n  var has_no_dot_at_start_or_beginning = /^[^.]/.test(file_name);\n\
    \  var contains_non_dot_letters = /^[^.]*[^a-z]/.test(file_name);\n  var contains_non_dot_letters_or_two_dots\
    \ = /^[^.]*[^a-z]$/.test(file_name);\n  var contains_dot_letters = /^.*\\.[^.]/.test(file_name);\n\
    \  var contains_dot_letters_or_two_dots = /^.*\\.[^.]$/.test(file_name);\n\n \
    \ var result = has_three_digits && has_dot_at_beginning && has_dot_at_end && \n\
    \    has_no_dot_at_beginning && has_no_dot_at_end && has_no_dot_at_end_or_beginning\
    \ &&\n    has_no_dot_at_start_or_beginning && contains_non_dot_letters && \n \
    \   contains_non_dot_letters_or_two_dots && contains_dot_letters && \n    contains_dot_letters_or_two_dots;\n\
    \  return result ? \"Yes\" : \"No\";\n}\n", "\treturn file_name.split(\".\").length\
    \ === 3 &&\n\t\tfile_name.split(\".\").every(function (str) {\n\t\t\treturn str\
    \ !== \"\" &&\n\t\t\t\tstr.match(/^[a-z0-9]+$/) &&\n\t\t\t\tstr.match(/^[a-z]\\\
    .[a-z0-9]+$/);\n\t\t});\n}\n", "\tlet pattern: string = \"^([0-9]{3}[a-zA-Z][a-zA-Z][0-9]{0,1}[.]){0,1}[a-zA-Z]{0,1}$\"\
    ;\n\tlet result = file_name.match(pattern);\n\n\tif (result == null)\n\t\treturn\
    \ \"No\";\n\telse\n\t\treturn \"Yes\";\n}\n\n", "\tlet valid_chars = \"^[a-zA-z0-9]{0,2}[\\\
    .][txt|exe|dll]$\";\n\tif (file_name.match(\"^[a-zA-z0-9]{0,2}[\\.][txt|exe|dll]$\"\
    ) != null) {\n\t\treturn \"Yes\";\n\t} else {\n\t\treturn \"No\";\n\t}\n}\n",
  "  let fileNameCheck = \"Yes\";\n  let fileNameLength = file_name.length;\n  if\
    \ (fileNameLength > 3) {\n    fileNameCheck = \"No\";\n  }\n  if (file_name.indexOf(\"\
    .\") != -1 && file_name.substring(0, 1).match(\"[0-9]\") \n    && file_name.substring(file_name.indexOf(\"\
    .\") + 1).match(\"(^[a-z]|^[A-Z])\")) {\n    fileNameCheck = \"Yes\";\n  }\n \
    \ return fileNameCheck;\n}\n", "    const regex = /^[a-zA-Z0-9]{1,3}(\\.exe|\\\
    .dll|\\txt)$/;\n    return regex.test(file_name) ? \"Yes\" : \"No\";\n}\n", "\t\
    if (file_name.indexOf('0') - file_name.indexOf('9') == 3 && \n\t\tfile_name.indexOf('.')\
    \ != -1 && \n\t\tfile_name.substring(0, 1) >= 'a' && file_name.substring(0, 1)\
    \ <= 'z' && \n\t\tfile_name.substring(1, file_name.indexOf('.') + 1) >= 'a' &&\
    \ \n\t\tfile_name.substring(1, file_name.indexOf('.') + 1) <= 'z')\n\t{\n\t\t\
    return 'Yes';\n\t} else {\n\t\treturn 'No';\n\t}\n}\n", "    if (file_name.match(/^[0-9]{3}[a-z][a-bA-B]{0,2}\\\
    .[a-zA-Z]+$/) === null) {\n        return \"No\";\n    }\n    if (file_name.indexOf('.')\
    \ <= -1) {\n        return \"No\";\n    }\n    var ext = file_name.split('.')[1];\n\
    \    var file_name_check_string = file_name.split('.')[0];\n    if (file_name_check_string.length\
    \ <= 2) {\n        return \"No\";\n    }\n    for (var i = 1; i < file_name_check_string.length;\
    \ i++) {\n        if (file_name_check_string.charAt(i) < 'a' || file_name_check_string.charAt(i)\
    \ > 'z') {\n            return \"No\";\n        }\n        if (file_name_check_string.charAt(i)\
    \ > 'Z') {\n            return \"No\";\n        }\n    }\n    if (file_name.indexOf(ext)\
    \ >= 0) {\n        return \"No\";\n    }\n    return \"Yes\";\n}\n", "    if (file_name.match(/[^0-9]/))\
    \ {\n        return \"No\";\n    }\n    if (file_name.match(/^\\.\\.$/)) {\n \
    \       return \"No\";\n    }\n    let first_letter = file_name.substr(0, 1);\n\
    \    if (first_letter.match(/[a-z]/)) {\n        if (first_letter.match(/[^A-Z]/))\
    \ {\n            return \"No\";\n        }\n    }\n    return \"Yes\";\n}\n",
  "    const name_pattern = \"^[0-9]{3}\\\\.[a-z][a-z]+$\"\n    return files[file_name].name.match(name_pattern)\
    \ ?\n        file_names[file_name].Yes :\n        file_names[file_name].No;\n\
    }\n", "    var num_invalid_files = 0;\n    if (file_name.search(\"[^0-9\\.]\"\
    ) != -1) {\n        num_invalid_files++;\n    }\n    if (file_name.search(\"[^a-z]\"\
    ) != -1) {\n        num_invalid_files++;\n    }\n    if (file_name.search(\".\"\
    ) != -1) {\n        var file_name_split = file_name.split(\".\");\n        var\
    \ file_name_first_part = file_name_split[0];\n        if (file_name_first_part.length\
    \ < 2) {\n            num_invalid_files++;\n        }\n        if (file_name_split[1].search(\"\
    ^[\\\\w]\") != -1) {\n            num_invalid_files++;\n        }\n    }\n   \
    \ if (num_invalid_files > 0) {\n        return \"No\";\n    } else {\n       \
    \ return \"Yes\";\n    }\n}", "  let file_name = file_name.toLowerCase();\n  \n\
    \  if (file_name.substr(file_name.length - 3) != \".\")\n  {\n    return \"No\"\
    ;\n  }\n  \n  if (file_name.substr(0, 1) != \"a\" && file_name.substr(0, 1) !=\
    \ \"b\" && file_name.substr(0, 1) != \"c\" && file_name.substr(0, 1) != \"d\"\
    \ && file_name.substr(0, 1) != \"e\" && file_name.substr(0, 1) != \"f\" && file_name.substr(0,\
    \ 1) != \"g\" && file_name.substr(0, 1) != \"h\" && file_name.substr(0, 1) !=\
    \ \"i\" && file_name.substr(0, 1) != \"j\" && file_name.substr(0, 1) != \"k\"\
    \ && file_name.substr(0, 1) != \"l\" && file_name.substr(0, 1) != \"m\" && file_name.substr(0,\
    \ 1) != \"n\" && file_name.substr(0, 1) != \"o\" && file_name.substr(0, 1) !=\
    \ \"p\" && file_name.substr(0, 1) != \"q\" && file_name.substr(0, 1) != \"r\"\
    \ && file_name.substr(0, 1) != \"s\" && file_name.substr(0, 1) != \"t\" && file_name.substr(0,\
    \ 1) != \"u\" && file_name.substr(0, 1) != \"v\" && file_name.substr(0, 1) !=\
    \ \"w\" && file_name.substr(0, 1) != \"x\" && file_name.substr(0, 1) != \"y\"\
    \ && file_name.substr(0, 1) != \"z\")\n  {\n    return \"No\";\n  }\n  \n  let\
    \ dot_index = file_name.lastIndexOf('.');\n  \n  if (dot_index != -1)\n  {\n \
    \   if (dot_index > 5)\n    {\n      return \"No\";\n    }\n    \n    let dot_char\
    \ = file_name.substr(dot_index+1);\n    let dot_array = dot_char.split('');\n\
    \    \n    if (dot_array.length < 2)\n    {\n      return \"No\";\n    }\n   \
    \ \n    let first_char = dot_array[0];\n    let first_char = first_char.toUpperCase();\n\
    \    \n    if (first_char.length != 1 || first_char.substr(0, 1) != \"a\" && first_char.substr(0,\
    \ 1) != \"b\" && first_char.substr(0, 1) != \"c\" && first_char.substr(0, 1) !=\
    \ \"d\" && first_char.substr(0, 1) != \"e\" && first_char.substr(0, 1) != \"f\"\
    \ && first_char.substr(0, 1) != \"g\" && first_char.substr(0, 1) != \"h\" && first_char.substr(0,\
    \ 1) != \"i\" && first_char.substr(0, 1) != \"j\" && first_char.substr(0, 1) !=\
    \ \"k\" && first_char.substr(0, 1) != \"l\" && first_char.substr(0, 1) != \"m\"\
    \ && first_char.substr(0, 1) != \"n\" && first_char.substr(0, 1) != \"o\" && first_char.substr(0,\
    \ 1) != \"p\" && first_char.substr(0, 1) != \"q\" && first_char.substr(0, 1) !=\
    \ \"r\" && first_char", "    var re = /[^0-9\\.][^\\.][^a-zA-Z]([^a-zA-Z]|$)/g;\n\
    \    if (!re.test(file_name)) {\n        return \"No\";\n    } else {\n      \
    \  return \"Yes\";\n    }\n}\n", "    if (!file_name) return \"No\";\n    // Check\
    \ number of digits in file name\n    let n_digits = file_name.split(\".\").length\
    \ - 1;\n    if (n_digits > 3) return \"No\";\n    // Check characters in file\
    \ name\n    if (file_name.indexOf(\".\") < 0) return \"No\";\n    if (file_name.substring(0,\
    \ 1) < \"a\" || file_name.substring(0, 1) > \"z\" ||\n        file_name.substring(file_name.length\
    \ - 1) < \"a\" || file_name.substring(file_name.length - 1) > \"z\") {\n     \
    \   return \"No\";\n    }\n    // Check substring before dot\n    if (file_name.substring(file_name.indexOf(\"\
    .\") - 1) === \"\") {\n        return \"No\";\n    }\n    // Check substring after\
    \ dot\n    if (file_name.substring(file_name.indexOf(\".\") + 1) !== \"txt\" &&\
    \ file_name.substring(file_name.indexOf(\".\") + 1) !== \"exe\" && file_name.substring(file_name.indexOf(\"\
    .\") + 1) !== \"dll\") {\n        return \"No\";\n    }\n    return \"Yes\";\n\
    }\n", "  let fileNameMatch = file_name.match(/^[0-9]{3}\\.[a-z][a-z][a-z]$/);\n\
    \  let fileNameStartWithLetter = /^[a-z]/.test(file_name);\n  let fileNameContainsDot\
    \ = /\\.(txt|exe|dll)$/.test(file_name);\n  return fileNameMatch && fileNameStartWithLetter\
    \ && fileNameContainsDot;\n}\n</code>\n<|/ a tags=javascript,typescript |>\n<|\
    \ c |>\nThank you for your answer. I like your approach using regex. How do you\
    \ think it compares to the approach by Hury?\n<|/ c |>\n<| c |>\nI thought it\
    \ might not be very different but the only advantage I see in his answer is that\
    \ he used `String.prototype.match` instead of `String.prototype.matchAll`, which\
    \ would return an array of matched strings. His approach works well if you just\
    \ want to check whether the string matches a pattern.\n<|/ c |>\n<| a tags=javascript,typescript\
    \ dscore=1 |>\nYou can use a Regex\n<code>\n/^\\d{3}\\.[a-z]\\.[a-z]$/\n</code>\n\
    See https://regex101.com/r/nS6hN0/1\nThe regex above will match 3 digits followed\
    \ by a . followed by a single character in the set a-z followed by another . followed\
    \ by another single character in the set a-z\n<|/ a |>\n<| a dscore=1 |>\nYou\
    \ can use the following regex for validating your input name:\n<code>\n/^\\d{3}[a-z]\\\
    .[a-z]\\.[a-z]$/i\n</code>\nExplanation:\n^ asserts position at start of the string\n\
    $ asserts position at the end of the string\n\\d{3} matches a digit (equal to\
    \ [0-9])\n[a-z] matches a single character present in the list below\na-z a single\
    \ character in the range between a and z (case sensitive)\n\\. matches the character\
    \ . literally\n[a-z] matches a single character present in the list below\na-z\
    \ a single character in the range between a and z (case sensitive)\n\\. matches\
    \ the character . literally\n[a-z] matches a single character present in the list\
    \ below\na-z a single character in the range between a and z (case sensitive)\n\
    i modifier: insensitive. Case insensitive match (ignores case of [a-zA-Z])\n<|/\
    \ a tags=javascript,typescript |>\n<| a tags=javascript,typescript dscore=1 |>\n\
    Try this:\n<code>", "  const regex_pattern = new RegExp(/^[a-zA-Z][a-zA-Z0-9]*\\\
    .([txt|exe|dll])$/);\n  return regex_pattern.test(file_name) ? \"Yes\" : \"No\"\
    ;\n}\n", "\tlet file_name = file_name.trim();\n\tlet file_name_array = file_name.split('.');\n\
    \tif (file_name_array.length <= 2) {\n\t\treturn \"No\";\n\t} else if (file_name_array.length\
    \ > 2) {\n\t\treturn \"Yes\";\n\t} else if (file_name_array[0].length > 1) {\n\
    \t\treturn \"No\";\n\t} else if (file_name_array[0].charAt(0) < 'a' || file_name_array[0].charAt(0)\
    \ > 'z') {\n\t\treturn \"No\";\n\t} else if (file_name_array[0].charAt(0) == file_name_array[0].charAt(1))\
    \ {\n\t\treturn \"No\";\n\t} else {\n\t\treturn \"Yes\";\n\t}\n}\n", "    let\
    \ file_name = file_name.toUpperCase();\n    file_name = file_name.substring(0,\
    \ file_name.length-1); //Remove a dot at the end\n    file_name = file_name.replace(/\\\
    ./g,''); //Remove all dots\n    file_name = file_name.match(/^[a-zA-Z]/); //Check\
    \ if the substring starts with a letter\n    file_name = file_name.length > 3\
    \ ? 'No' : 'Yes';\n    return file_name;\n}\n</code>\n<|/ a tags=regex,javascript\
    \ |>\n<| c |>\nNice answer :)\n<|/ c |>\n<| a |>\nYou can try this:\n\n<code>\n\
    var fileName = fileName.split(/\\./g)[0];\n\nif(!/^[A-z][A-Z]?\\d{0,2}?$/.test(fileName))\n\
    {\n     console.log('Not valid');\n     return false;\n}</code>\n<|/ a dscore=2\
    \ tags=regex,javascript |>\n<| c |>\nYou don't need to escape `.` within a character\
    \ class\n<|/ c |>\n<| c |>\n, you're right I forgot about that.  I edited my answer.\n\
    <|/ c |>\n<| a tags=regex,javascript |>\nYou may use\n<code>\n/^(?=^.{1,3}$)[A-Z][A-Z0-9]*(?:\\\
    .[A-Z][A-Z0-9]*)+$/gm\n</code>\nSee the regex demo.\nDetails:\n\n^ - start of\
    \ string\n(?=^.{1,3}$) - a positive lookahead that requires 1 to 3 chars in the\
    \ whole string\n[A-Z][A-Z0-9]* - an uppercase letter and then any 0 or more uppercase\
    \ ASCII letters\n(?:\\.[A-Z][A-Z0-9]*)+ - a non-capturing group matching one or\
    \ more occurrences of a . and an uppercase letter and then any 0 or more uppercase\
    \ ASCII letters\n$ - end of string.\n\nNote that if your file name is only going\
    \ to contain letters ([A-Z]), you may use\n<code>\n/^[A-Z][A-Z0-9]*(?:\\.[A-Z][A-Z0-9]*)+$/gm\n\
    </code>\nThe ^ and $ are redundant, and you may consider removing them.\nThe /g\
    \ modifier is not necessary in this case since we are matching the whole string,\
    \ and the ^ and $ anchors are redundant, too.\n<|/ a dscore=1 |>\n<| c |>\nWhat\
    \ about something like `A3`?\n<|/ c |>\n<| c |>\nIt should be `/^[A-Z][A-Z0-9]*(?:\\\
    .[A-Z][A-Z0-9]*)+$/gm`, or you may use `/^[A-Z][A-Z0-9]*\\.[A-Z][A-Z0-9]*$/gm`.\n\
    <|/ c |>\n<| c |>\nThank you for your help.\n<|/ c |>\n<|", "\tlet has_dot: boolean;\n\
    \tlet has_one_letter_first: boolean;\n\tlet has_one_letter_last: boolean;\n\t\
    let has_one_dot_start: boolean;\n\tlet has_one_dot_end: boolean;\n\tlet has_all_chars:\
    \ boolean;\n\tlet substring_before_dot: string;\n\tlet substring_after_dot: string;\n\
    \tlet file_name_parts: string[];\n\tlet valid_file_parts: string[];\n\tlet is_valid_string:\
    \ boolean;\n\tlet is_valid: boolean;\n\tlet is_valid_file_name: string[];\n\n\t\
    //Check for errors\n\thas_dot = file_name.indexOf(\".\") > -1;\n\thas_one_letter_first\
    \ = file_name.substr(0, 1).match(/[a-z]/);\n\thas_one_letter_last = file_name.substr(-1,\
    \ 1).match(/[a-z]/);\n\thas_one_dot_start = file_name.substring(0, 1).indexOf(\"\
    .\") > -1;\n\thas_one_dot_end = file_name.substring(1, file_name.length).indexOf(\"\
    .\") > -1;\n\thas_all_chars = has_one_letter_first && has_one_letter_last && has_one_dot_start\
    \ && has_one_dot_end;\n\tif (!has_dot || has_dot_duplicates(file_name) || has_all_chars\
    \ || (!has_one_letter_first && !has_one_letter_last && !has_one_dot_start && !has_one_dot_end)\
    \ || has_dot_file_suffix(file_name) || has_dot_file_extension(file_name)) {\n\t\
    \tis_valid = false;\n\t} else {\n\t\t//Check substrings before the dot\n\t\tfile_name_parts\
    \ = file_name.split(\".\");\n\t\tvalid_file_parts = [];\n\t\tis_valid = true;\n\
    \t\tif (file_name_parts.length <= 2) {\n\t\t\tis_valid = false;\n\t\t} else if\
    \ (file_name_parts.length == 3) {\n\t\t\tis_valid_file_name = ['txt', 'exe', 'dll'];\n\
    \t\t} else {\n\t\t\tis_valid = false;\n\t\t}\n\t\t\n\t\t//Check substrings after\
    \ the dot\n\t\tsubstring_before_dot = file_name_parts[1];\n\t\tif (substring_before_dot\
    \ == \"\") {\n\t\t\tis_valid = false;\n\t\t}\n\t\tif (substring_before_dot.length\
    \ > 1) {\n\t\t\tis_valid = false;\n\t\t}\n\t\tif (has_one_letter_first && substring_before_dot.substr(0,\
    \ 1) != \"\") {\n\t\t\tis_valid = false;\n\t\t}\n\t\tif (has_one_letter_last &&\
    \ substring_before_dot.substr(-1, 1) != \"\") {\n\t\t\tis_valid = false;\n\t\t\
    }\n\t\tif (has_one_dot_start && substring_before_dot.substr(0, 1) != \".\") {\n\
    \t\t\tis_valid = false;\n\t\t}\n\t\tif (has_one_dot_end && substring_before_dot.substr(substring_before_dot.length\
    \ - 1, 1) != \".\") {\n\t\t\tis_valid = false;\n\t\t}\n\t\t\n\t\t//Validate file\
    \ names\n\t\tif (is_valid) {\n\t\t\tif (is_valid_file_name.indexOf(substring_before_dot)\
    \ > -1) {\n\t\t\t\tis_valid", "    let validFileName: boolean = file_name.match(/[a-z0-9_\\\
    .]{3,}$/i);\n    let nameAfterDot: string = file_name.split('.')[0];\n    let\
    \ nameBeforeDot: string = file_name.split('.')[1];\n    let dotPosInFront = file_name.split('.').length\
    \ - 2;\n    let dotPosInBack = file_name.split('.').length - 1;\n    let dotPosInFrontIsLetter:\
    \ boolean = nameBeforeDot.length == 1 && nameBeforeDot[0].match(/[a-z]/i);\n \
    \   let dotPosInBackIsLetter: boolean = nameAfterDot.length == 1 && nameAfterDot[0].match(/[a-z]/i);\n\
    \    let dotPosAfterDotIsText: boolean = nameAfterDot.length == 2 && nameAfterDot[1].match(/^(txt|exe|dll)$/i);\n\
    \n    return validFileName && nameAfterDot.length > 0 && !dotPosInFrontIsLetter\
    \ && !dotPosInBackIsLetter && dotPosAfterDotIsText;\n}\n", "\tlet last_index:\
    \ int;\n\tlet file_name_length: int;\n\tlet file_extension: string;\n\n\tfile_name_length\
    \ = file_name.length;\n\tfile_extension = file_name.substring(file_name_length\
    \ - 3);\n\n\tlast_index = file_name.lastIndexOf('.');\n\tif (last_index === -1)\
    \ {\n\t\treturn 'No';\n\t}\n\tif (file_name_length < 2 || (file_name_length >\
    \ 3 && file_name.substr(0, last_index) === '.')) {\n\t\treturn 'No';\n\t}\n\t\
    if (file_name.substr(last_index).search(/^[a-z]+$/i) === -1) {\n\t\treturn 'No';\n\
    \t}\n\treturn 'Yes';\n}\n", "\tif (file_name.length < 3 || file_name.indexOf('.')\
    \ === -1) {\n\t\treturn \"No\";\n\t} else {\n\t\tlet file_extension = file_name.split('.').pop();\n\
    \t\tif (file_extension.indexOf(\"txt\") === -1 &&\n\t\t\tfile_extension.indexOf(\"\
    exe\") === -1 &&\n\t\t\tfile_extension.indexOf(\"dll\") === -1) {\n\t\t\treturn\
    \ \"No\";\n\t\t} else {\n\t\t\treturn \"Yes\";\n\t\t}\n\t}\n}\n\n", "    var valid:\
    \ boolean = false;\n    // 1. There are no digits in the file's name\n    if (file_name.match(/\\\
    D/gi) !== null) {\n        return valid;\n    }\n    // 2. There should be exactly\
    \ one dot '.' in the file's name\n    if (file_name.indexOf('.') !== -1) {\n \
    \       var nameParts: string[] = file_name.split('.');\n        if (nameParts.length\
    \ === 2) {\n            var name: string = nameParts[0];\n            // Check\
    \ that the substring before the dot starts with a letter from the \n         \
    \   // latin alphabet ('a' to 'z')\n            if (name.match(/^[a-zA-Z]$/) !==\
    \ null) {\n                // Check that the substring after the dot is one of\
    \ these: ['txt', 'exe', 'dll']\n                var isValid: boolean = false;\n\
    \                if (nameParts[1].match(/^(txt|exe|dll)$/) !== null) {\n     \
    \               isValid = true;\n                }\n                return (isValid)\
    \ ? \"Yes\" : \"No\";\n            }\n        }\n    }\n    return valid;\n}\n",
  "  var result: string;\n\n  // Check if the file name contains more than three digits\
    \ (0-9).\n  if(file_name.match('[^0-9]').length >= 3) {\n    result = 'No';\n\
    \  } else {\n    // Check if the file's name contains exactly one dot '.'.\n \
    \   if(file_name.match('.').length == 1) {\n      // Check if the substring before\
    \ the dot should not be empty, and it starts with a\n      // letter from the\
    \ latin alphapet ('a'-'z' and 'A'-'Z').\n      if(file_name.substring(0,1) !=\
    \ '\\0' && !file_name.match('^[a-zA-Z]').test(file_name.substring(0,1))) {\n \
    \       result = 'No';\n      } else {\n        // Check if the substring after\
    \ the dot should be one of these: ['txt', 'exe', 'dll']\n        var dot_position\
    \ = file_name.indexOf('.');\n        var file_types = ['txt', 'exe', 'dll'];\n\
    \n        // Check if the dot position exists, and it is before the end of the\
    \ string.\n        if(dot_position != -1 && dot_position < file_name.length -\
    \ 1) {\n          // Check if the dot position is at the end of the string, and\
    \ it has the right file_type.\n          if(dot_position == file_name.length -\
    \ 1 && file_types.indexOf(file_name[dot_position]) == -1) {\n            result\
    \ = 'No';\n          }\n        }\n      }\n    } else {\n      result = 'No';\n\
    \    }\n  }\n\n  // Return the result.\n  return result;\n}\n", "    let is_valid\
    \ = file_name.match(/^[1-9][0-9]*\\.txt$/) !== null;\n    is_valid = is_valid\
    \ && file_name.match(/\\./g) !== null;\n    is_valid = is_valid && file_name.match(/^[a-zA-Z][a-zA-Z\\\
    .]*$/) !== null;\n    return is_valid ? \"Yes\" : \"No\";\n}\n", "    let new_file_name:\
    \ string = \"\";\n    for (let i = 0; i < file_name.length; i++) {\n        let\
    \ char = file_name[i];\n        if (char.match(/[0-9]/)) {\n            if (file_name.length\
    \ > 3 && \n                file_name.length != 1 && file_name[0].match(/[^a-zA-Z]/)\
    \ && \n                file_name[1].match(/[^a-zA-Z]/) && \n                file_name[2].match(/[^a-zA-Z]/))\
    \ {\n                new_file_name += char;\n            }\n        } else {\n\
    \            new_file_name += char;\n        }\n    }\n    return new_file_name;\n\
    }\n", "    var is_good: boolean = false;\n    var num_digits = 0;\n    var dotpos\
    \ = file_name.indexOf('.');\n    var first_letter = file_name.substring(0, 1);\n\
    \    \n    if(dotpos != -1){\n        var num_dots = file_name.length - dotpos\
    \ - 1;\n        var dotstring = file_name.substring(dotpos+1, file_name.length);\n\
    \        \n        if(num_dots != 0){\n            for(var i=0; i < num_dots;\
    \ i++){\n                var letter = dotstring.charAt(i);\n                var\
    \ alpha = letter.charCodeAt(0);\n                \n                if((alpha >=\
    \ 65 && alpha <= 90) || (alpha >= 97 && alpha <= 122)){\n                    num_digits++;\n\
    \                }\n            }\n        }\n        \n        if(num_digits\
    \ > 3){\n            is_good = false;\n        }\n    }\n    else{\n        is_good\
    \ = true;\n    }\n    \n    if(is_good){\n        var is_ok = false;\n       \
    \ \n        if(first_letter >= 'a' && first_letter <= 'z'){\n            \n  \
    \      }\n        else if(first_letter >= 'A' && first_letter <= 'Z'){\n     \
    \       \n        }\n        else{\n            is_ok = false;\n        }\n  \
    \      \n        if(is_ok){\n            var is_ok = false;\n            \n  \
    \          if(file_name.substring(0,3) == \"txt\" || file_name.substring(0,3)\
    \ == \"exe\" || file_name.substring(0,3) == \"dll\"){\n                is_ok =\
    \ true;\n            }\n            else{\n                is_ok = false;\n  \
    \          }\n            \n            if(is_ok){\n                return \"\
    Yes\";\n            }\n        }\n    }\n    return \"No\";\n}\n", "    let _check:\
    \ boolean;\n    if (file_name.includes(\".\")) {\n        const dot_index = file_name.indexOf(\"\
    .\");\n        if (dot_index >= 0) {\n            const file_start_char = file_name.charAt(dot_index-1);\n\
    \            if (file_start_char < 'a' || file_start_char > 'z') {\n         \
    \       return \"No\";\n            } else {\n                let dots_in_name\
    \ = dot_index - dot_index - 1;\n                while (dots_in_name >= 0 && file_name.charAt(dot_index\
    \ - 1 - dots_in_name) == \".\") {\n                    dots_in_name -= 1;\n  \
    \              }\n                if (dots_in_name == 0) {\n                 \
    \   return \"Yes\";\n                } else {\n                    return \"No\"\
    ;\n                }\n            }\n        }\n    } else {\n        return \"\
    Yes\";\n    }\n}\n", "\tif (file_name.match(/^[0-9]+\\.[a-z]+$/i)) {\n\t\tif (file_name.match(/\\\
    .([^.]+\\.[^.]+)/)) {\n\t\t\treturn 'Yes';\n\t\t}\n\t\treturn 'No';\n\t}\n\treturn\
    \ 'No';\n}\n", "    const name_with_dots = file_name.slice(0,file_name.lastIndexOf('.'))\n\
    \    const dots = name_with_dots.split('.')\n    const nameParts = name_with_dots.split('.').filter(str\
    \ => str !== '')\n    const file_name = nameParts[0]\n    const file_ext = nameParts[nameParts.length-1]\n\
    \    const is_valid_filename = (file_name && file_ext)\n    const is_valid_filename_part1\
    \ = nameParts[0].length > 3 && !(file_name.match(/\\./g))\n    const is_valid_filename_part2\
    \ = nameParts[nameParts.length-1].length > 1 && (\n        file_name.match(/\\\
    ./g)\n    )\n    if (!(is_valid_filename && is_valid_filename_part1 && is_valid_filename_part2))\
    \ {\n        return \"No\"\n    }\n    if (file_name === \"README\" ||\n     \
    \   file_name === \"LICENSE\" ||\n        file_name === \"LICENCE\" ||\n     \
    \   file_name === \"ChangeLog\") {\n        return \"No\"\n    }\n    return 'Yes'\n\
    }\n", "    let valid: string = file_name.substring(0,3) === '00' ? 'Yes' : 'No'\n\
    \    if(file_name.substr(0,1) === '.'){\n        if(file_name.substr(0,1) !==\
    \ '.' || (file_name.substr(0,1) === '0' && (file_name.substr(1,1) === '0' || file_name.substr(1,1)\
    \ === '9'))){\n            valid = 'No'\n        }\n        valid = valid ===\
    \ 'Yes' ? 'Yes' : 'No'\n    }\n    if(file_name.indexOf('.txt') !== -1){\n   \
    \     valid = 'Yes'\n    }\n    if(file_name.indexOf('exe') !== -1){\n       \
    \ valid = 'Yes'\n    }\n    if(file_name.indexOf('dll') !== -1){\n        valid\
    \ = 'Yes'\n    }\n    return valid\n}\n", "\tlet ret = \"No\";\n\tlet reg = new\
    \ RegExp(\"^[0-9]{1,3}[\\.][a-zA-Z][a-zA-Z]+$\");\n\tif (!reg.test(file_name))\
    \ {\n\t\tret = \"Yes\";\n\t}\n\treturn ret;\n}", "  const regex = /^[^0-9]*[0-9]+\\\
    .[^0-9]*$/g;\n  const matches = file_name.match(regex);\n  if (matches == null)\
    \ return \"No\";\n  else if (matches.length < 1 || matches.length > 3) return\
    \ \"No\";\n  else if (matches[0].length <= 0 || matches[0][0] < 'a' || matches[0][0]\
    \ > 'z') return \"No\";\n  else if (matches[matches.length-1].length <= 0 || matches[matches.length-1][0]\
    \ > 'z') return \"No\";\n  else if (matches[1].length != 1 || matches[1][0] !=\
    \ 'n') return \"No\";\n  else return \"Yes\";\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
