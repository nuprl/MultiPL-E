name: HumanEval_103_rounded_avg
language: ts
prompt: "//You are given two positive integers n and m, and your task is to compute\
  \ the\n// average of the integers from n through m (including n and m). \n// Round\
  \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
  \ than m, return -1.\n// Example:\n// >>> rounded_avg(1, 5)\n// \"0b11\"\n// >>>\
  \ rounded_avg(7, 5)\n// -1\n// >>> rounded_avg(10, 20)\n// \"0b1111\"\n// >>> rounded_avg(20,\
  \ 33)\n// \"0b11010\"\nfunction rounded_avg(n: number, m: number): string| number\
  \ {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"\
  0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
  \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
  );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
  \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
  );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
  \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
  \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
completions: ["  if (n < m) {\n    return -1;\n  }\n\n  return n - (((n - m) & -~(m\
    \ & 1)) + 1) | 0;\n}\n", "\tlet result: string|number = \"\";\n\tif (n <= m) {\n\
    \t\tlet average: number = n / m;\n\t\tlet binary: number = parseInt(average.toString(2),\
    \ 2);\n\t\tlet resultBinary: string|number = binary.toString(2);\n\t\tif (resultBinary.length\
    \ < 2) {\n\t\t\tresultBinary = `0${resultBinary}`;\n\t\t}\n\t\tif (resultBinary.length\
    \ !== n) {\n\t\t\treturn -1;\n\t\t}\n\t\tresult += resultBinary;\n\t\treturn parseInt(result);\n\
    \t} else {\n\t\treturn -1;\n\t}\n}\n", "  if (n > m) {\n    return -1;\n  }\n\
    \  let result = \"\";\n  for (let i = n; i <= m; i++) {\n    let bin = bin(i);\
    \ \n    let pos = bin.indexOf(1);\n    if (pos == -1) {\n      return -1;\n  \
    \  }\n    result += bin.slice(0, pos);\n  }\n  return parseInt(result, 2);\n}\n",
  "  if (m > n) return -1;\n  return n.toString(2) + m.toString(2) + \"b\".split(\"\
    \").map(a => (\"0\" + parseInt(a, 2)).slice(-2)).join(\"\");\n}\n\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(7, 5));\nconsole.log(rounded_avg(10, 20));\nconsole.log(rounded_avg(20,\
    \ 33));</code>\n\nNote that this can be made much simpler by just using an if\
    \ statement:\n\n<code>", "  let answer: number = ((n - m) / 2) + m;\n  return\
    \ Math.round(answer * Math.pow(10, Math.floor(Math.log(answer) / Math.LN10)))\
    \ \n    .toString(2);\n}\n", "  const min_n_to_m: number = n < m ? n : m;\n  const\
    \ max_n_to_m: number = n <= m ? m : n;\n  if (n <= 0 || m <= 0) {\n    return\
    \ -1;\n  }\n\n  const min_n_to_m_binary = binary(min_n_to_m);\n  const max_n_to_m_binary\
    \ = binary(max_n_to_m);\n  const min_n_to_m_round = min_n_to_m_binary.slice(min_n_to_m_binary.length\
    \ - 2);\n  const max_n_to_m_round = max_n_to_m_binary.slice(max_n_to_m_binary.length\
    \ - 2);\n\n  if (min_n_to_m_round >= max_n_to_m_round) {\n    return -1;\n  }\n\
    \n  const max_n_to_m_round_binary = binary(max_n_to_m_round);\n  return max_n_to_m_round_binary.slice(0,\
    \ max_n_to_m_round_binary.length - 2);\n}\n", "  const result = (m + n) % 2\n\
    \  return result < 0 ? result + 2 : (result * 2) - 1\n}\n</code>\nThis works because\
    \ you know that if m is greater than n, you know that either n or m is odd, so\
    \ you can get the average of the integers from n through m by adding the numbers\
    \ from m through n together and taking the remainder (the remainder is either\
    \ 0 or 1, so you just have to check which one it is). Then you just multiply the\
    \ result by 2 to get the rounded number (which you can convert to binary using\
    \ the method I linked above).\nIf you're not familiar with binary numbers, you\
    \ can check out this question for more information on binary numbers: What is\
    \ binary and why should I use it?\nHope this helps!\n<|/ a tags=binary,numbers,javascript\
    \ dscore=1 |>\n<| a |>\nIn python:\n<code>\ndef binary_avrg (a,b):\n    \"\"\"\
    return the average of the integers from 0 to 'a' inclusive\n    to the integer\
    \ 'b' inclusive\"\"\"\n    if b > a:\n        return -1\n    return (((a + b)/2)/2).to_binary_str()[::-1]\n\
    \ndef to_binary_str(n):\n    \"\"\"convert integer 'n' to binary string\n    like\
    \ \"01010001\"\n    \"\"\"\n    return ''.join(str(bin(n))[2:]).upper()\n\nif\
    \ __name__ == '__main__':\n    print(binary_avrg(2,3))\n</code>\n<|/ a tags=binary,numbers,javascript\
    \ dscore=1 |>\n<| a tags=binary,numbers,javascript |>\nI hope this helps someone\
    \ out there:\n\n<code>", "\tif (n < m) {\n\t\treturn -1;\n\t}\n\tlet mid = Math.floor(n\
    \ + (m - 1) / 2);\n\tlet result = \"\";\n\tlet start = 0;\n\tlet end = 0;\n\t\
    while (true) {\n\t\tstart = mid;\n\t\tend = mid - 1;\n\t\tif (start > mid) {\n\
    \t\t\tbreak;\n\t\t}\n\t\tif (n > mid) {\n\t\t\tstart++;\n\t\t\tend--;\n\t\t}\n\
    \t\tresult += midToBin(start + end);\n\t\tmid = Math.floor(n + (mid - start) /\
    \ 2);\n\t}\n\treturn result + midToBin(mid);\n}\n", "  let sum = n + m;\n  let\
    \ ones = Math.trunc(sum / 2)\n  if (ones === 0 && sum % 2 !== 0) {\n    ones =\
    \ 1\n  }\n  return `0b${ones}${sum % 2 === 0 ? '' : '1'}`\n}\n", "  let res =\
    \ \"\";\n  let start = 0;\n  let end = 0;\n  \n  if (n <= m) {\n    return -1;\n\
    \  }\n\n  while (n <= m) {\n    res += \"0b\" + m.toString(2);\n    n += 1;\n\
    \  }\n\n  while (start <= n) {\n    res = \"0\" + res;\n    start += 1;\n  }\n\
    \n  return parseInt(res, 2);\n}\n", "    var num = 0\n    for (var i = n; i <=\
    \ m; ++i) {\n        num += i\n    }\n    return num / m\n}\n", "\tif (m < n)\
    \ {\n\t\treturn -1;\n\t}\n\tlet result = 0;\n\tfor (let i = n; i <= m; i++) {\n\
    \t\tresult += i;\n\t}\n\treturn (result / 2) | 0;\n}\n", "  let sum = n + m;\n\
    \  let diff = m - n;\n  return Math.floor(sum / diff) + n;\n}\n", "  if (n > m)\
    \ {\n    return -1;\n  }\n\n  let result = `${n % 2 ? \"0b\" : \"0b\"}${\n   \
    \ n.toString(2).padStart(Math.floor(Math.log10(m)), 0)\n  }`.padStart(m, \"0\"\
    );\n\n  if (n < 10) {\n    return \"0b\" + result;\n  }\n\n  return result;\n\
    }\n", "\tif (n < m) return -1\n\tlet sum = 0\n\tlet half = n\n\twhile (n >= m)\
    \ {\n\t\tsum += m\n\t\thalf++\n\t}\n\tfor (let i = 1; i <= half; ++i) {\n\t\t\
    sum += i\n\t}\n\treturn sum % 2 === 1 ? sum.toString(2) : -1\n}\nexport function\
    \ rounded_avg(n: number, m: number): number|string {\n\treturn rounded_avg(n +\
    \ 0.5, m).toString(2)\n}\n\n", "  if (n > m) return -1\n  if (n === m) return\
    \ '0'\n\n  const num = 0\n  for (let i = n; i <= m; i++) {\n    num += i\n  }\n\
    \n  return `${num.toString(2)}${Math.sign(num)}`\n}\n", "  const sum = (n + m)\
    \ / 2\n  if (sum > m) return -1\n  return to_binary(sum)\n}\n", "    const min_n\
    \ = Math.min(n, m)\n    const max_n = Math.max(n, m)\n    const avg_n = ((n -\
    \ min_n) + (m - max_n)) / 2\n    let result_bin: number = Math.round(avg_n)\n\
    \    if (result_bin === 0) {\n        result_bin = 1\n    } else if (result_bin\
    \ === 1) {\n        result_bin = 0\n    }\n    return result_bin.toString(2)\n\
    }\n", "\tlet r = m > n ? m : n;\n\tif (r > 0) {\n\t\tlet b = Math.pow(10, r -\
    \ 1);\n\t\tlet s = `${n}0`;\n\t\tlet x = parseInt(s, 2);\n\t\tlet avg = ((x -\
    \ n) * b + n) % b;\n\t\treturn String(avg);\n\t} else {\n\t\treturn -1;\n\t}\n\
    }\n", "    const result = \"\";\n    let a = n;\n    let b = m;\n    if (n >=\
    \ m) {\n        return -1;\n    }\n    for (let i = n; i <= m; i++) {\n      \
    \  const c = ((a % b) / b).toString(2);\n        a = b;\n        b += 1;\n   \
    \     if (b.toString().length !== c.length) {\n            b = c;\n        }\n\
    \        result += c;\n    }\n    if (n !== m) result = `0b${result}`;\n    return\
    \ result;\n}\n", "  // Convert to binary\n  let bn = \"\"\n  for (let i = n; i\
    \ <= m; i++) {\n    const x = i.toString(2)\n    while (x[0] === \"0\") x = x.substr(1)\n\
    \    bn += x\n  }\n  // Round up\n  bn = bn.split(\".\")[0] + \"1\" + bn.split(\"\
    .\")[1]\n  // Remove leading zeros\n  bn = bn.replace(\"0\", \"\")\n  return bn\n\
    }\n", "  if (n <= m) {\n    return -1\n  }\n  const avg = n + m\n  let bin = 0b\n\
    \  while (avg > 0) {\n    avg >>= 1\n    bin = (bin << 1) + 1\n  }\n  return String(bin)\n\
    }\n</code>\n<|/ a dscore=1 |>\n<| a tags=math,binary,javascript dscore=1 |>\n\
    A bit of a kludge but this could be done without recursion:\n<code>", "  if (n\
    \ > m) return -1;\n  const avg = n + (m - n) / 2;\n  return parseInt(avg.toString(2),\
    \ 2);\n}\n", "  const result: number = round(n/m);\n  return result >= n? -1:\
    \ result.toString(2);\n}\n", "  if (n < m && n > 0) {\n    let res = n\n    for\
    \ (let i = n; i <= m; i++) {\n      res += i\n    }\n    res /= (m * 2 - n)\n\
    \    return res.toFixed(10)\n  } else {\n    return -1\n  }\n}\n", "    if (n\
    \ > m) {\n        return -1;\n    }\n\n    const sum = n + m;\n    const avg =\
    \ sum / 2;\n    const binary = to_binary(avg);\n\n    let index = binary.indexOf(\"\
    1\");\n    if (index === -1) {\n        return -1\n    } else {\n        return\
    \ binary.substring(0, index)\n    }\n}\n", "  let result = -1;\n  let start =\
    \ 0;\n  let end = n;\n  if (n <= m) {\n    for (; start <= end; start++) {\n \
    \     result = start + end;\n    }\n  } else if (n > m) {\n    for (; start <=\
    \ m; start++) {\n      result = start + end;\n    }\n  }\n  return result;\n}\n",
  "  const average = n + m >> 1;\n  const fraction = n & 1;\n  return `${(fraction\
    \ == 0) ? average : average % 2}b${average - fraction}`;\n}\n", "    const half:\
    \ number = n / 2;\n    let rounded: number = Math.round(n);\n    if (rounded >\
    \ half) {\n        rounded = half;\n    } else if (rounded < half) {\n       \
    \ rounded = Math.ceil(half);\n    }\n    return `0b${rounded.toString(2)}`;\n\
    }\n", "  const r = m - (n % m);\n  return (r < 0) ? -1 : (n / r).toString(2);\n\
    }\n</code>\n<|/ a |>\n<| c |>\nWhy would you use Math.ceil instead of Math.round?\n\
    <|/ c |>\n<| c |>\nYes, it seems round is more accurate but ceil is more fast.\
    \ https://stackoverflow.com/questions/3418231/whats-the-difference-between-math-round-and-math-ceil\n\
    <|/ c |>\n<| a dscore=1 |>\n<code>", "  if (n > m) {\n    return -1;\n  }\n  const\
    \ n = n.toString(2);\n  const m = m.toString(2);\n  let i = 1;\n  let result =\
    \ '';\n  for (let j = m.length - 1; j > 0; j--) {\n    const mask = 1 << j;\n\
    \    result += n & mask ? 1 : 0;\n    n >>= j;\n  }\n  return result;\n}\n", " \
    \   let min: number;\n    let max: number;\n    if (n >= m) {\n        return\
    \ -1;\n    }\n    min = Math.ceil(n);\n    max = Math.floor(m);\n    let sum:\
    \ number;\n    if (min == max) {\n        sum = 0;\n    } else {\n        sum\
    \ = max + 1 - min;\n    }\n    let bin: string;\n    if (sum == 0) {\n       \
    \ bin = \"0\".repeat(min);\n    } else {\n        let rem: number[] = [];\n  \
    \      for (let i = min; i <= max; i++) {\n            rem.push(i);\n        }\n\
    \        let count = 1;\n        for (let i = 0; i < rem.length; i++) {\n    \
    \        rem[i]--;\n            if (rem[i] < 0) {\n                rem[i] = 0;\n\
    \                count++;\n            }\n        }\n        let rems = rem.reverse();\n\
    \        bin = \"\";\n        for (let i = 0; i < rem.length; i++) {\n       \
    \     let s = rems.splice(0, count).join(\"\");\n            bin += s + rems[i];\n\
    \        }\n    }\n    return parseInt(bin, 2);\n}\n", "  if (n < m && n >= 0\
    \ && m > 0) {\n    return (n + m - 1) / m\n  }\n  return -1\n}\n", "    const\
    \ a = Math.min(m, n)\n    const b = Math.max(m, n)\n    const result = (a * b\
    \ + n) / (b - a + 1)\n    if (result === 0) {\n        return result\n    } else\
    \ {\n        return Math.round(result)\n    }\n}\n", "  if(n > m) {\n    return\
    \ -1;\n  }\n  if(n < 0){\n    return -1;\n  }\n  if(n === m) {\n    return n;\n\
    \  }\n  var sum = 0;\n  for (var i = n; i <= m; i++) {\n    sum += i;\n  }\n \
    \ var avg = sum / m;\n  var reminder = n % m;\n  if (reminder > 0) {\n    var\
    \ remainderString = (\"0\" + remainder).substr(-2);\n    avg = Math.floor((avg\
    \ / remainder) * remainder);\n  }\n  return \"0b\" + avg.toString(2);\n}\n", " \
    \   let sum = n; //n+m\n    let diff = m - n; //m\n\n    while (diff >= 1) {\n\
    \        sum += diff;\n        diff -= 1;\n    }\n    if (diff > 0) {\n      \
    \  return -1;\n    }\n    return (sum % 2) == 0 ? `0b${sum.toString(2)}` : -1\n\
    }", "  const mid = Math.floor(n / m * 10)\n  let left = n % m\n  return left ?\
    \ Math.pow(10, mid - left) : '0b0'\n}\n", "  const avg = n + (m - 1) / 2;\n  const\
    \ s = parseInt(avg.toString(2).split(``).reduce((acc, char) => {\n    if (acc.length\
    \ === 0) {\n      acc += char;\n    }\n    acc += char.charCodeAt(0);\n    return\
    \ acc;\n  }, ``), 2);\n  const result = `${parseInt(avg.toString(2).split(``).reduce((acc,\
    \ char) => {\n    if (acc.length === 0) {\n      acc += char;\n    }\n    acc\
    \ += char.charCodeAt(0);\n    return acc;\n  }, ``), 2)}0${s}`;\n  return result\
    \ < 0 ? -1 : result;\n}\n", "  if (n > m) {\n    return -1;\n  }\n\n  const strVal\
    \ = n + (m - 1).toString(2);\n  const i = strVal.length;\n  while (i > 0) {\n\
    \    i -= 1;\n    if (strVal[i] === '1') {\n      strVal = strVal.slice(0, i);\n\
    \      break;\n    }\n  }\n\n  const val = parseInt(strVal, 2);\n\n  if (isNaN(val))\
    \ {\n    return -1;\n  }\n\n  return val as number;\n}\n", "  if (n < m) {\n \
    \   return -1;\n  }\n  if (n === m) {\n    return \"0\";\n  }\n  let avg = Math.round((n\
    \ - m) / 2);\n  let result = \"\";\n  while (avg > 0) {\n    result += avg % 2;\n\
    \    avg = Math.floor(avg / 2);\n  }\n  return result;\n}\n", "  const avg = Math.floor(n\
    \ / m) * m;\n  const remainder = n % m;\n  const decimal = Math.floor(avg / Math.pow(10,\
    \ 9));\n  return parseInt(decimal >= 10 ? decimal - 10 : decimal);\n}\n", "  if\
    \ (n < m) return -1\n  \n  let result: number = ((n - 1) + (m - 1)) / 2\n  let\
    \ s: string = \"\"\n  \n  while (result > 0) {\n    let n = 0\n    if (result\
    \ > 1) {\n      n = Math.ceil(result)\n    } else {\n      n = Math.floor(result)\n\
    \    }\n    result += n\n    s = pad(n, s, m)\n  }\n  return s\n}\n", "\tlet nStr\
    \ = n.toString(2);\n\tlet mStr = m.toString(2);\n\tif (nStr.length > mStr.length)\
    \ return -1;\n\treturn parseInt(nStr.substring(0, nStr.length - mStr.length) +\
    \ mStr);\n}\n", "  if (n > m) {\n    return -1\n  }\n  return `${Math.round(n\
    \ / (m - n)).toString(2)}${n % m == 0 ? '' : (m == n ? '1' : '0')}`\n}\n", " \
    \ if (n > m) {\n    return -1;\n  }\n  let avg = Math.floor((n - m) / 2)\n  return\
    \ \"0b\" + avg.toString(2);\n}\n", "  if (n > m) {\n    return -1;\n  }\n\n  let\
    \ result = \"\";\n  for (let i = n; i <= m; i += 1) {\n    result = binary(i,\
    \ result);\n  }\n  return result ? +result.toString(2) : -1;\n}\n", "    let sum\
    \ = 0\n    let i = 1\n    let remainder\n\n    while(i <= n && i <= m) {\n   \
    \     remainder = n % 2\n        sum += remainder\n        n /= 2\n        m /=\
    \ 2\n        i++\n    }\n\n    if(n >= m) return -1\n    return sum.toString(2).padStart(n,\
    \ \"0\")\n}\n", "    const avg = Math.floor((n + m)/2);\n    return avg ? toBinary(avg)\
    \ : -1;\n}\n", "    if (n >= m) return -1;\n    let avg = n + (m - n) / 2;\n \
    \   let result: string = '';\n    let power = 0\n    while (true) {\n        let\
    \ bv = Math.pow(10, power);\n        let bv_rounded = Math.round(avg * bv) / bv;\n\
    \        result += '' + bv_rounded;\n        power += 1;\n        if (power >\
    \ 32) {\n            break;\n        }\n    }\n    let res = 0\n    for (let i\
    \ = 0; i < result.length; i++) {\n        let x = result.charCodeAt(i);\n    \
    \    if (x == '0') {\n            res += 0\n        } else if (x != '1') {\n \
    \           res += 1\n        }\n    }\n    return res\n}\n", "    let numString\
    \ = n.toString(2);\n    let mString = m.toString(2);\n    let maxLen = Math.max(numString.length,\
    \ mString.length);\n    let numBinStr = numString.substr(0, maxLen);\n    let\
    \ mBinStr = mString.substr(0, maxLen);\n    return numBinStr + mBinStr;\n}\n",
  "  if (n < m) {\n    return -1;\n  }\n  const n = Math.max(n - 1, 0) as number\n\
    \  const m = Math.min(m, n - 1) as number\n\n  const result = (n + (m << 1)) /\
    \ m as number\n\n  return result < 32 ? result : -1\n}\n\nconst a = rounded_avg(7,\
    \ 5)\n\nconsole.log(a === 0b11) // true\n</code>\n<|/ a dscore=1 tags=binary,javascript,typescript\
    \ |>\n<| c |>\nThanks for your answer! However I'm looking for a solution that\
    \ doesn't involve division. If it would be possible for me to implement this using\
    \ bitwise operators or bit operations in general, I'd be interested as well.\n\
    <|/ c |>\n<| a tags=binary,javascript,typescript |>\nYou can achieve this by converting\
    \ int to binary, and then do bitwise AND, which gives you 0b1111. Then, you simply\
    \ convert the result back to int and format it. I believe it's also possible to\
    \ use bitwise operations in Javascript, but I'm not familiar with it yet.\n<code>",
  "\tlet m = Math.max(m, n);\n\tlet n = Math.min(n, m);\n\tlet avg = (n - m) / 2;\n\
    \treturn avg.toString(2) + String.fromCharCode(avg >= 0 ? '1' : '0');\n}\n\n",
  "    if (m > n) {\n        return -1;\n    }\n    const result = (n + (m * 2)) /\
    \ 2;\n    return Number.isInteger(result) ? result : \"0b\" + result.toString(2);\n\
    }\n", "    if (n > m) {\n        return -1;\n    }\n    const len = n - m + 1;\n\
    \    let sum = 0;\n    for (let i = len; i > 0; i--) {\n        sum += (i - 1)\
    \ / i;\n    }\n    const result: number = Math.round(sum * Math.pow(10, len)).toString(2);\n\
    \    if (result.length === len) {\n        return result;\n    }\n    return -1;\n\
    }\n", "  // Your code here\n  return -1\n}\n", "\tlet sum = 0;\n\tfor (let i =\
    \ n; i <= m; i++) {\n\t\tsum += i;\n\t}\n\tlet divisor = n - m;\n\tlet rounded_sum\
    \ = Math.round(sum / divisor);\n\tlet remainder = Math.round(sum % (divisor));\n\
    \treturn `${(10 * remainder)}${(10 - remainder)}${rounded_sum}`;\n}\n", "  let\
    \ binary: string;\n  let result = -1;\n\n  // Round both values to binary string\
    \ values\n  n = n.toString(2);\n  m = m.toString(2);\n  if (m > n) {\n    binary\
    \ = '-1';\n  }\n  else {\n    binary = '0';\n  }\n\n  // Add trailing zeros if\
    \ necessary\n  while (binary.length > m) {\n    binary = `${binary}0`;\n  }\n\n\
    \  // Convert binary string to an integer\n  let bin2int: number = parseInt(binary,\
    \ 2);\n\n  // Handle special cases\n  if (bin2int <= n) {\n    result = bin2int;\n\
    \  }\n  else if (bin2int > n) {\n    result = -1;\n  }\n\n  return result;\n}\n",
  "  let result = 0;\n  let n = Math.min(n, m);\n  for (let i = n; i <= m; i += 1)\
    \ {\n    result += i;\n  }\n  return result >= n ? -1 : result;\n}\n", "    const\
    \ result = (n - m) >> 1\n    if (result > Math.pow(2, 31))\n        return -1\n\
    \    let binary = \"\"\n    let decimal = 0\n    while (result > 0) {\n      \
    \  decimal += (result % 2)\n        result >>= 1\n        binary += ((decimal\
    \ % 10) + \"\" + ((decimal >= 10) ? 1 : 0))\n    }\n    if (binary === \"\" &&\
    \ n === m) {\n        return -1\n    }\n    return binary\n}\n", "  if (n < m)\
    \ {\n    return -1\n  }\n  \n  let sum: number = 0;\n  for (let i = n; i <= m;\
    \ i++) {\n    sum += i;\n  }\n  \n  return sum / 2 + 'b'.repeat(sum % 2);\n}\n",
  "  if (n > m) {\n    return -1;\n  }\n  const one = to_binary(n);\n  const two =\
    \ to_binary(m);\n  let result = 0;\n  for (let i = one.length - 1; i >= 0; i--)\
    \ {\n    result += (one.charAt(i) + two.charAt(i)) / 2;\n  }\n  return parseInt(to_binary(result),\
    \ 2);\n}\n", "  if (m > n) {\n    return -1\n  }\n  let answer = 0\n  for (let\
    \ i = n; i <= m; i++) {\n    answer += i\n  }\n  return `${Math.ceil(answer /\
    \ 2)}`\n}\n", "    if (n >= m) {\n        return -1;\n    }\n\n    let total =\
    \ 0;\n\n    for (const i of range(n, m)) {\n        total += i;\n    }\n\n   \
    \ total /= 2;\n\n    let ret = \"\";\n\n    for (let i = 0; i < total; i++) {\n\
    \        ret += \"0\";\n    }\n\n    return ret;\n}\n</code>\n<|/ a tags=numbers,javascript,algorithm\
    \ |>\n<| c |>\nThanks for your answer. I'm aware of what an algorithm is. I'm\
    \ asking for an algorithm.\n<|/ c |>\n<| c |>\nThe first link should do the job.\n\
    <|/ c |>\n<| c |>\nI added an implementation to my answer.\n<|/ c |>\n<| c |>\n\
    Thank you so much\n<|/ c |>\n<| c |>\nYour answer was helpful. Thank you.\n<|/\
    \ c |>\n<| a tags=numbers,javascript,algorithm |>\nThis is my solution.\nThe main\
    \ idea is to use recursion and convert each value to binary.\n\n<code>", "   \
    \ let mid = Math.ceil(m / 2);\n    let avg = mid * mid;\n    return n < m\n  \
    \      ? rounded_avg(n, mid)\n        : mid > n\n            ? -1\n          \
    \  : (n - avg) + \"\";\n}\n", "    let total = m\n    if (n >= m) {\n        total\
    \ = n\n    }\n    let mid = total / 2\n    let half = total / 2\n    let binary\
    \ = \"\"\n    total -= 1\n    let i = total\n    while (i) {\n        binary +=\
    \ \"1\"\n        i -= 1\n    }\n    return binary\n}\n", "  if (m > n) return\
    \ -1;\n  const binaryString = bin(n).padStart(n, '0').slice(0, n);\n  return binaryString.padEnd(m,\
    \ '0');\n}\n", "  let result: number = 0;\n  let num: number = n;\n  let min:\
    \ number = m;\n  while (num >= min) {\n    result += num;\n    num -= min;\n \
    \ }\n  return result % 2 !== 0 ? result + 1 : result;\n}\n\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(7, 5));\nconsole.log(rounded_avg(10, 20));\nconsole.log(rounded_avg(20,\
    \ 33));\n</code>\n<|/ a |>\n<| a |>\nIn case you don't want to use external libraries:\n\
    <code>", "    if (n < m) return -1;\n    let avg = (n + m) / 2;\n    return `${avg}`.padStart(avg.toString().length\
    \ + 1, '0');\n}\n</code>\n<|/ a tags=algorithm,math,binary |>\n<| c |>\nThis is\
    \ a great answer but unfortunately the question does not specify that the average\
    \ must be rounded up or down -- it could be rounded up or down by any number of\
    \ digits.\n<|/ c |>\n<| c |>\nI didn't know that. I modified the answer to use\
    \ `round` function instead of `ceil` or `floor`\n<|/ c |>\n<| a |>\nMy answer\
    \ is similar to what has been given, but in a slightly different language. It\
    \ does not use any string functions, and is quite fast:\n<code>", "    if (n >\
    \ m) {\n        return -1;\n    }\n    let result: number = 0, count = 0;\n  \
    \  for (let i = n; i <= m; i += 1) {\n        result += i;\n        count += 1;\n\
    \    }\n    let avg: number = 0;\n    avg = result / count;\n    let binary: number\
    \ = 0;\n    while (avg > 1) {\n        avg = Math.floor(avg / 2);\n        binary\
    \ += avg;\n    }\n    while (binary > 0) {\n        binary = Math.floor(binary\
    \ / 2);\n    }\n    let resultStr: string = binary.toString(2);\n    if (resultStr.length\
    \ !== m.toString().length) {\n        resultStr = '0' + resultStr;\n    }\n  \
    \  return resultStr;\n}\n</code>\n<|/ a dscore=2 tags=binary,javascript,algorithm,average\
    \ |>\n<| c |>\nWhy is the `Math.floor` used?\n<|/ c |>\n<| c |>\nBecause the average\
    \ must be in the range [0,10]\n<|/ c |>\n<| a |>\n<code>", "  const num = (m *\
    \ 100 + n) // 100 (n) + n\n  const decimals = (num % 1).toFixed(1) // the decimal\
    \ portion\n  if (decimals.indexOf('.') < 0) {\n    return `0b${num.toString(2)}`\n\
    \  } else {\n    return -1\n  }\n}\n\nconsole.log(rounded_avg(20, 33))\nconsole.log(rounded_avg(17,\
    \ 7))\nconsole.log(rounded_avg(17, 7))</code>\n<|/ a |>\n<| a dscore=0 |>\nHere\
    \ is another approach, using binary arithmetic and string formatting:\n<code>",
  "  const n = Math.min(n, m);\n  const m = Math.max(m, n);\n  let binary = \"\";\n\
    \  const i = n;\n  while (i > m) {\n    i--;\n    binary += \"1\";\n  }\n  binary\
    \ += \"0\".repeat(i - n + 1);\n  return parseInt(binary, 2);\n}\n", "  if (n >\
    \ m) {\n    return -1;\n  }\n  \n  const n = Math.round(n);\n  const m = Math.round(m);\n\
    \  let sum = 0;\n  let result = 0;\n\n  for (let i = n; i <= m; i++) {\n    sum\
    \ += i;\n    result = sum & 0x1111111111111111;\n  }\n\n  return result;\n}\n",
  "    var total = 0;\n    for (var i = n; i <= m; i++) {\n        total += i;\n \
    \   }\n    var avg = total / (n - m);\n    return avg;\n}\n</code>\n<|/ a |>\n\
    <| a |>\nA simple way to do it would be to use the bitwise AND operator to get\
    \ a binary representation of your number. Assuming you have a number that is represented\
    \ as a number, then you can use this:\n<code>\nint number = 4; // Or whatever\
    \ number you have\nint result = number & 1;\n</code>\nThe result will equal 1\
    \ if the number is even and 0 if the number is odd. The problem with this, however,\
    \ is that this also converts it to an integer, which you can fix with a simple\
    \ if statement:\n<code>\nint number = 4; // Or whatever number you have\nint result\
    \ = number & 1;\nif (result > 0)\n    result = 1;\nelse\n    result = 0;\n</code>\n\
    This will convert it to 0 and 1, which can be used in your string conversion.\n\
    <|/ a tags=javascript,numbers,string dscore=3 |>\n<| c |>\nBut this does not work\
    \ if number is negative\n<|/ c |>\n<| c |>\nWell that was a very stupid comment.\
    \ Fixed.\n<|/ c |>\n<| c |>\nNo problem, this can be done in many ways nowadays,\
    \ but this answer was the first that I could find. +1 to your answer.\n<|/ c |>\n\
    <| a tags=javascript,numbers,string |>\n<code>\nlet num = 9\n\nnum = num.toString(2)\n\
    num = num.substring(0, num.length-1)\n\nconsole.log(num)\n", "  if (n >= m) {\n\
    \    return -1;\n  }\n  const rem = n - m;\n  const res = (rem % 2)\n    ? ((rem\
    \ + 1) / 2)\n    : ((rem / 2) - 1) / 2;\n  return `${parseInt(res, 2)}0${\n  \
    \  res % 2 ? '' : (res / 2).toString()}`;\n}\n", "    if (n >= m) return -1;\n\
    \    let result = 0;\n    for (let i = n; i <= m; i++) {\n        result += (i\
    \ >> 3) - 1;\n    }\n    if (result < 0) {\n        result = -result;\n    }\n\
    \    return `${result.toString(2)}`;\n}\n", "  const avg = (n + m) / 2;\n  \n\
    \  if(avg > m) {\n    return -1;\n  }\n  const remainder = avg % 1;\n  \n  let\
    \ binary = \"\";\n  \n  const divisor = Math.pow(2, 32-1);\n  for(let i = 0; i\
    \ < 32; ++i) {\n    binary += Math.round(avg / divisor).toString(2);\n    avg\
    \ = Math.floor(avg / divisor);\n  }\n  \n  binary += remainder.toString(2);\n\
    \  \n  return binary;\n}\n</code></pre>\n        </section>\n        <section>\n\
    \          <h2>Why not binary representation?</h2>\n          <ul>\n         \
    \   <li>\n              We are using the average value to round up to the nearest\
    \ integer\n              and we only care about the lower 32 bits. This gives\
    \ us the\n              following constraints:\n              <ul>\n         \
    \       <li>the value cannot be greater than 2**31 - 1</li>\n                <li>the\
    \ value cannot be less than 2**31</li>\n                <li>the value cannot have\
    \ more than 32 bits</li>\n              </ul>\n            </li>\n          </ul>\n\
    \        </section>\n        <section>\n          <h2>What are the constraints\
    \ of this representation?</h2>\n          <ul>\n            <li>\n           \
    \   <ul>\n                <li>the value cannot be greater than 2**31 - 1</li>\n\
    \                <li>the value cannot be less than 2**31</li>\n              \
    \  <li>the value cannot have more than 32 bits</li>\n              </ul>\n   \
    \         </li>\n          </ul>\n        </section>\n        <section>\n    \
    \      <h2>What is bitwise representation?</h2>\n          <p>\n            In\
    \ computer science, bitwise representation is an\n            efficient and compact\
    \ way to represent integers and other data\n            types.\n          </p>\n\
    \          <p>\n            It is used to represent numbers in an efficient and\
    \ compact way for\n            storing information and for sending information\
    \ between computer\n            devices.\n          </p>\n          <ul>\n   \
    \         <li>\n              This representation is very popular nowadays.\n\
    \              <ul>\n                <li>\n                  They are also used\
    \ for representing binary numbers (bit or\n                  mask).\n        \
    \        </li>\n                <li>\n                  They are also used for\
    \ representing binary strings (bit or\n                  mask).\n            \
    \    </li>\n              </ul>\n            </li>\n          </ul>\n        </section>\n\
    \        <section>\n          <h2>Example</h2>\n          <img src=\"assets/images/bit-and.png\"\
    \ alt=\"bitwise and\">\n        </section>\n        <section>\n          <h2>Example</h2>\n\
    \          <img src=\"assets/images/bit-or.png\" alt=\"bitwise or\">\n       \
    \ </section>\n        <section>\n          <h2>Example</h2>\n          <img src=\"\
    assets/images/bit-and.png\" alt=\"bitwise and\">\n        </section>\n       \
    \ <section>\n          <h2>Example</h2>\n          <img src=\"assets/images/bit-not.png\"\
    \ alt=\"", "  if (m > n) return -1;\n  const result = Array(m+1).join('0');\n\
    \  for (let i = n; i <= m; i++) {\n    const result = result + `${i}`;\n  }\n\
    \  return parseInt(result, 2).toString(2);\n}\n", "  let num = (n - m) as number;\n\
    \  if (num < 0) return -1\n  \n  if (n < m) return -1\n  \n  let numString = \"\
    \" + num;\n  \n  let count = (Math.pow(10, numString.length - 1) + 1) * (numString.length\
    \ - 1);\n  let power = (numString.length - 1);\n  while (power >= 0) {\n    numString\
    \ = numString.slice(0, -power) + \"1\" + numString.slice(-power);\n    power -=\
    \ 1;\n    count += Math.pow(10, power)\n  }\n  return count / Math.pow(10, numString.length)\n\
    }\n", "  let result = 0\n  if(n > m) {\n    return -1\n  }\n  for(let i = n; i\
    \ <= m; i++) {\n    result += (n - i) * (i - n)\n  }\n  result = Math.ceil(result/2)\n\
    \  return result.toString(2)\n}\n", "    const halfNum = n / 2;\n    if (n < m)\
    \ {\n        return halfNum;\n    }\n    const leftHalfNum = n % 2;\n    const\
    \ rightHalfNum = m % 2;\n    const numOne = halfNum === 0 ? 0 : halfNum - 1;\n\
    \    const numTwo = halfNum - 1;\n    return leftHalfNum + numOne + rightHalfNum\
    \ + numTwo;\n}\n", "  return Math.floor(((n + m) / 2)) | 0;\n}\n</code>\nThe trick\
    \ here is to convert your number into binary and then back to decimal and finally\
    \ round it up with |0.\n<|/ a tags=javascript,rounding |>\n<| a dscore=2 |>\n\
    This code will return an integer rounded up to a power of 2.\n<code>", "    if\
    \ (n > m) {\n        return -1;\n    }\n    let avg = n / m;\n    let str = String(avg);\n\
    \    let n = str.length;\n    str = Array(n - n + 1).join(\"0\") + str;\n    return\
    \ Number(str);\n}\n", "  let avg = n / m\n  let bin = avg.toString(2)\n  while\
    \ (bin.length < m) {\n    bin = \"0\" + bin\n  }\n  return parseInt(bin, 2)\n\
    }\n\nconsole.log(rounded_avg(7, 5)) // -1\nconsole.log(rounded_avg(13, 5)) //\
    \ -1\nconsole.log(rounded_avg(7, 52)) // -1\nconsole.log(rounded_avg(27, 52))</code>\n\
    <|/ a tags=javascript,algorithm,floating-point,math,rounding |>\n<| a dscore=2\
    \ |>\nIn case anyone is interested in doing this with Javascript. Here is a simple\
    \ function I came up with. Hope it helps someone else. \n<code>", "    if (n >=\
    \ m) {\n        return -1;\n    }\n    const s: string = formatIntToBinaryString(roundToNearestInt(n));\n\
    \    const sLen: number = s.length;\n    const sLenMinusOne: number = sLen - 1;\n\
    \    const mMinusOne: number = m - 1;\n    for (let i: number = sLenMinusOne;\
    \ i >= mMinusOne; i--) {\n        s[i] = '1';\n    }\n    return s.slice(-sLen);\n\
    }\n", "  if (n < m) {\n    return -1\n  }\n  let res = ''\n  let n = Math.max(n,\
    \ m)\n  for (let i = n; i <= m; i++) {\n    const digit = i & Math.pow(10, m)\n\
    \    const len = res.length\n    const mask = (i & Math.pow(10, len)) === 0\n\
    \    if (mask) {\n      res += '0'\n    }\n    res += digit\n  }\n  return parseInt(res,\
    \ 2)\n}\n", "    let remnant: number = n - m;\n    if(remnant > 0) {\n       \
    \ return Math.round(n / m) * m;\n    } else {\n        return -1;\n    }\n}\n",
  "\tif (n > m) {\n\t\treturn -1;\n\t}\n\t\n\tlet r = \"\";\n\twhile (n<=m) {\n\t\t\
    r += n;\n\t\tn++;\n\t}\n\t\n\treturn r;\n}\n", "  if (n < m || m < 0) {\n    return\
    \ -1;\n  }\n  const digits = m.toString(2).split('');\n  const i = n - m;\n  let\
    \ sum = 0;\n  for (let j = i; j < digits.length; j++) {\n    sum += Number(digits[j]);\n\
    \  }\n  sum = Math.round(sum * Math.pow(10, i)) / Math.pow(10, i);\n  return sum.toString(2);\n\
    }\n", "  const s = Math.max(m, n);\n  return +(\"\" + n).split(\"\").reverse().reduce((sum,\
    \ val) => {\n    return (sum >> 1) + val;\n  }, s) / Math.pow(2, m) as number;\n\
    }\n</code>\n<|/ a tags=javascript,binary |>\n<| a dscore=0 |>\nThe fastest solution\
    \ I found was by using the following function:\n<code>\nconst binaryString = (i)\
    \ => {\n  let n = (i >> 24) & 0xff;\n  let m = (i >> 8) & 0xff;\n  let h = (i\
    \ >> 0) & 0xff;\n  return (((n + m) << 24) + (h << 8) + n).toString(2).padStart(8,\
    \ '0');\n}\n</code>\n<|/ a tags=javascript,binary |>\n<| a dscore=0 |>\n<code>",
  "  let result: number = -1;\n  if (n <= m) {\n    return result; // -1\n  }\n  let\
    \ total: number = 0;\n  for (let i = n; i <= m; i++) {\n    total += i;\n  }\n\
    \  let avg: number = total / Math.max(m - n, 1);\n  let binary: number = Math.floor(avg).toString(2);\n\
    \  if (binary.length === 1) {\n    return result + \"0\" + binary;\n  }\n  return\
    \ result + binary;\n}\n</code>\n<|/ a |>\n<| c |>\nThe OP seems to want it to\
    \ round to binary, which is `0b` before the integer.\n<|/ c |>\n<| c |>\nyes,\
    \ sorry my bad, didn't understand OP's question\n<|/ c |>\n<| c |>\nIt doesn't\
    \ seem to work when passing values like rounded_avg(15, 10) or rounded_avg(17,\
    \ 17). Please test your function and let me know if I am missing something.\n\
    <|/ c |>\n<| a dscore=0 |>\nTry this code\n<code>\nlet num: number = 10;\nlet\
    \ num2: number = 20;", "    let ans = \"\";\n    let num = 0;\n    let binNum\
    \ = 0;\n    let maxN = Math.ceil(m);\n    for (let i = n; i <= maxN; i++) {\n\
    \        num = i;\n        binNum = parseInt(`${num.toString(2)}`, 2);\n     \
    \   binNum = binNum.toString(8);\n        if (binNum.length >= m) {\n        \
    \    ans += \"1\";\n        } else {\n            ans += \"0\";\n        }\n \
    \   }\n    if (ans === \"\" || ans === \" \") {\n        ans = -1;\n    }\n  \
    \  return Number(ans);\n}\n", "  const binary = binarySum(n, m);\n  if (binary)\
    \ return binary;\n  return n < m ? -1 : -1;\n}\n", "  let avg = (n + m) / 2;\n\
    \  let num = Math.round(avg);\n  let binary = \"\";\n  while (num > 0) {\n   \
    \ let n = num % 10;\n    binary = `0${n}${binary}`;\n    num = Math.floor(num\
    \ / 10);\n  }\n  if (n >= m) {\n    return -1;\n  } else {\n    return binary;\n\
    \  }\n}\n", "  if (n >= m) {\n    return -1;\n  }\n  const result: number = (((n\
    \ + m) / 2) | 0).toString(2);\n  return result.length > 1 ? result : \"0\" + result;\n\
    }\n", "  const result: number = (n - m) / 2;\n  if (result < 0) {\n    return\
    \ -1;\n  }\n\n  const resultString: number = Math.ceil(result * Math.pow(10, 2))\n\
    \    .toString(2)\n    .padStart(8, '0');\n  return parseInt(resultString, 2);\n\
    }\n", "  let result: number = 0;\n  for (let i = n; i <= m; i++) {\n    result\
    \ += i;\n  }\n  result = Math.round(result * Math.pow(2, 31) / Math.pow(2, 32)\
    \ - 0.5);\n  if (result < 0) {\n    return -1;\n  }\n  return result;\n}\n", " \
    \ if (n <= m) {\n    return -1\n  }\n  const result = `${binary(n)}${binary(m)}`\n\
    \  const result2 = result.replace(/0*$/, '')\n  const result = Number(result2).toString(2)\n\
    \  const result3 = result.replace(/^0+/, '')\n  const result = Number(result3)\n\
    \  return result\n}\n", "    if (n > m) {\n        return -1;\n    }\n    const\
    \ num = n;\n    const num2 = m;\n    let res = \"\";\n    const n = Math.floor(Math.log(num)\
    \ / Math.LN10);\n    const m = Math.floor(Math.log(num2) / Math.LN10);\n\n   \
    \ while (num2 !== 0) {\n        num = num / 10;\n        num2 = num2 % 10;\n \
    \       res = res + (num2 + \"b\");\n    }\n\n    if (n < m) {\n        res =\
    \ res + (\"0\".repeat(m - n) + \"b\");\n    }\n\n    return parseInt(res, 2);\n\
    }\n", "  if (n >= m) return -1;\n  const stringNum = n.toString(2);\n  const length\
    \ = stringNum.length;\n  const reversedNum = stringNum.split('').reverse().join('');\n\
    \  let sum = 0;\n  reversedNum.split(\"\").forEach((char, i) => {\n    sum +=\
    \ (+char + (i === length ? m : 0));\n  });\n  return `${sum / Math.pow(2, length)}0b${reversedNum}`;\n\
    }\n", "    let avg = n+m;\n    if (avg > m) {\n        return -1;\n    } else\
    \ {\n        return binaryDigits(avg);\n    }\n}\n", "    console.log(n, m)\n\
    \    let sum = 0;\n    let i;\n    for (i = n; i <= m; i++) {\n        sum +=\
    \ i;\n    }\n\n    return sum / m\n        .toString(2)\n        .padStart(8,\
    \ '0');\n}\n\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(7, 5));\n\
    console.log(rounded_avg(10, 20));\nconsole.log(rounded_avg(20, 33));\n\nconsole.log(rounded_avg(12,\
    \ 9));\nconsole.log(rounded_avg(12, 9));\nconsole.log(rounded_avg(12, 9));\nconsole.log(rounded_avg(12,\
    \ 9));\nconsole.log(rounded_avg(12, 9));\nconsole.log(rounded_avg(12, 9));\nconsole.log(rounded_avg(12,\
    \ 9));\nconsole.log(rounded_avg(12, 9));\n\nconsole.log(rounded_avg(12, 9));\n\
    console.log(rounded_avg(12, 9));\nconsole.log(rounded_avg(12, 9));\nconsole.log(rounded_avg(12,\
    \ 9));\nconsole.log(rounded_avg(12, 9));\nconsole.log(rounded_avg(12, 9));\nconsole.log(rounded_avg(12,\
    \ 9));\n\nconsole.log(rounded_avg(12, 9));\nconsole.log(rounded_avg(12, 9));\n\
    console.log(rounded_avg(12, 9));\nconsole.log(rounded_avg(12, 9));\nconsole.log(rounded_avg(12,\
    \ 9));\nconsole.log(rounded_avg(12, 9));\nconsole.log(rounded_avg(12, 9));\n\n\
    console.log(rounded_avg(12, 9));\nconsole.log(rounded_avg(12, 9));\nconsole.log(rounded_avg(12,\
    \ 9));\nconsole.log(rounded_avg(12, 9));\nconsole.log(rounded_avg(12, 9));\nconsole.log(rounded_avg(12,\
    \ 9));\nconsole.log(rounded_avg(12, 9));\nconsole.log(rounded_avg(12, 9));\n\n\
    console.log(rounded_avg(12, 9));\nconsole.log(rounded_avg(12, 9));\nconsole.log(rounded_avg(12,\
    \ 9));\nconsole.log(rounded_avg(12, 9));\nconsole.log(rounded_avg(12, 9));\nconsole.log(rounded_avg(12,\
    \ 9));\nconsole.log(rounded_avg(12, 9));\nconsole.log(rounded_avg(12, 9));\n\n\
    console.log(rounded_avg(12, 9));\nconsole.log(rounded_avg(12, 9));\nconsole.log(rounded_avg(12,\
    \ 9));\nconsole.log(rounded_avg(12, 9));\nconsole.log(rounded_avg(12, 9));\nconsole.log(rounded_avg(12,\
    \ 9));\nconsole.log(rounded_avg(12, 9));\nconsole.log(rounded_avg(12, 9));\n\n\
    console.log(rounded_avg(12, 9));\nconsole.log(rounded_avg(12, 9));", "  if (n\
    \ >= m) return -1;\n  let num: number = n - m\n  let binary: string =\n    `${(num\
    \ >>> 0).toString(2)}${(num >>> 0).toString(2)}${(num >>> 0).toString(2)}${(num\
    \ >>> 0).toString(2)}`\n  while (binary.length < m) binary += '0'\n  return binary\n\
    }\n", "    if (n < m) {\n        return -1\n    }\n\n    let result = 0\n\n  \
    \  for (let i = n; i <= m; i++) {\n        result += i\n    }\n\n    return Math.round(result\
    \ / n)\n}\n", "    if (n < m) {\n        return -1\n    }\n\n    const binary:\
    \ string = n.toString(2)\n    const mask: number = binary.length - m.toString(2).length\n\
    \    const digits: number = binary.length - mask\n    let decimal: number = m\
    \ / n\n    if (decimal > 1) {\n        decimal -= 1\n    }\n\n    return binary\
    \ + Array(digits).fill(\"0\").reduce((acc, val) => acc + val * decimal).toString(2)\n\
    }\n", "  let n = n + m;\n  return Math.ceil((n - n%m)*n%m);\n}\n", "    var s\
    \ = \"\";\n    var total = 0;\n\n    for(var i = n; i <= m; i++) {\n        total\
    \ += i;\n        s = s + pad(total, 4);\n    }\n\n    var power = Math.pow(2,Math.ceil(Math.log2(total))-1);\n\
    \    return (parseInt(s)*power).toString(2);\n}\n", "    if (n > m) {\n      \
    \  return -1;\n    }\n    let result = \"\";\n    for (let i = n; i <= m; i++)\
    \ {\n        result = `${result}${i}`;\n    }\n    return parseInt(result, 2);\n\
    }\n", "  // TODO: fill this in\n}\n", "    // return -1\n    if (m > n) return\
    \ -1\n    return ((n - m) + 1) >> 0\n}\n", "  if (n <= m) return -1\n  const mid\
    \ = m >> 1\n  const n = Math.max(2, n)\n  const a = n % 2\n  const b = n >> 1\n\
    \  return (a * mid + b) % 2 === 0 \n      ? `${b}${a}` \n      : (a * mid + (mid\
    \ + b)) % 2 === 0 \n        ? `${mid}${a}` \n        : (b * mid + (mid + a)) %\
    \ 2 === 0 \n        ? `${mid}${b}` \n        : `${a}${b}`\n}\n", "  if (n <= m)\
    \ {\n    return -1\n  }\n  let i = n\n  let sum = 0\n  while (i + m <= m) {\n\
    \    sum += i\n    i++\n  }\n  if (sum < n) {\n    return -1\n  }\n  return sum.toString(2)\n\
    }\n", "  if (n < m) {\n    return -1\n  }\n  return \"\"+((n + (m-n)) / 2)\n}\n\
    </code>\n<|/ a dscore=0 tags=binary,python,javascript,math |>\n<| c |>\nHi, I\
    \ tried it and it works, however my issue is that the function always returns\
    \ the value as a string. I need to return the value as a number. I've tried changing\
    \ the function but it doesn't seem to work.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    def average(start, end):\n  result = 0\n  count = 0\n  while start <= end:\n \
    \   count += 1\n    result += start\n    start += 1 \n  return count * result\
    \ / start\n</code>\n<|/ a tags=binary,python,javascript,math |>\n<| a |>\n<code>\n\
    def average(start, end):\n    return int(start + (end-start)/2)\n\naverage(1,5)\n\
    </code>\n<|/ a dscore=0 tags=binary,python,javascript,math |>\n<| c |>\nHi, I\
    \ tried it and it works, however my issue is that the function always returns\
    \ the value as a string. I need to return the value as a number. I've tried changing\
    \ the function but it doesn't seem to work.\n<|/ c |>\n<| c |>\nI understand now.\
    \ This will return an integer. My apologies. I didn't realize that you wanted\
    \ to return a number in the first place. Thank you for your help.\n<|/ c |>\n\
    <| a dscore=0 |>\n<code>\ndef average(start, end):\n  avg = int((start+end)/2)\n\
    \  return avg\n</code>\n<|/ a tags=binary,python,javascript,math |>\n<| c |>\n\
    Hi, I tried it and it works, however my issue is that the function always returns\
    \ the value as a string. I need to return the value as a number. I've tried changing\
    \ the function but it doesn't seem to work.\n<|/ c |>\n<| c |>\nHi, I think I\
    \ understand now. You're trying to return the average as a string. If you print\
    \ it, it should return the number in binary. However, if you want the average\
    \ as an integer, change it to avg = int((start+end)/2). I hope this helps!\n<|/\
    \ c |>\n<| c |>\nYes, this worked perfectly! Thank you so much\n<|/ c |>\n<| c\
    \ |>\nIf this answer helped you, you can mark it as accepted for future reference!\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\ndef average(start, end):\n  count = 0\n  result\
    \ = 0\n  while start <= end:\n    count += 1\n    result += start\n    start +=\
    \ 1 \n  return count * result / ", "  if (n > m) {\n    return -1;\n  }\n  let\
    \ num_n = n.toString(2)\n  let num_m = m.toString(2)\n  let nLen = num_n.length\n\
    \  let mLen = num_m.length\n\n  let left = 0\n  let right = nLen + mLen - 1\n\
    \  while (left < right) {\n    let mid = left + Math.floor((right - left) / 2)\n\
    \    let mStr = num_m.substr(mid, 1).toString(2)\n    let nStr = num_n.substr(mid,\
    \ 1).toString(2)\n\n    if (mStr === nStr) {\n      if (mLen === nLen + 1) {\n\
    \        return parseInt(num_n.substr(mid, 1) + num_m.substr(mid, 1), 2)\n   \
    \   } else {\n        right -= 1;\n      }\n    } else {\n      if (mLen > nLen\
    \ + 1) {\n        right -= 1;\n      } else {\n        left += 1;\n      }\n \
    \   }\n  }\n  return -1\n}\n", "  return roundToNearest(n, m, 2).toString(2);\n\
    }\n", "  if (n < m) {\n    return -1;\n  }\n  let counter: number;\n  let nStr:\
    \ string;\n  let mStr: string;\n\n  for (counter = n, nStr = \"\"; counter <=\
    \ m; counter++) {\n    nStr = `${nStr}${counter}`;\n  }\n\n  for (counter = m,\
    \ mStr = \"\"; counter >= n; counter--) {\n    mStr = `${mStr}${counter}`;\n \
    \ }\n\n  const binaryStr: string = \n  (parseInt(nStr) + parseInt(mStr)) / 2;\n\
    \n  const binary: number = parseInt(binaryStr, 2);\n  return binary;\n}\n", " \
    \   var a = Math.ceil((n + m) / 2);\n    if (a > m) {\n        return -1;\n  \
    \  }\n    var binary = \"\";\n    for (var i = a; i >= n; i--) {\n        binary\
    \ += \"1\"; \n    }\n    for (var i = a; i <= m; i++) {\n        binary += \"\
    0\";\n    }\n    return binary;\n}\n", "  let avg = Math.round(n/2+m/2); // integer\
    \ division\n  // if n is greater than m, use -1\n  if (n < m) {\n    avg = -1\n\
    \  }\n  \n  let strBin = \"\"\n  while (avg) {\n    strBin = strBin.concat(String.fromCharCode((avg&1)\
    \ ? '1' : '0'));\n    avg >>= 1;\n  }\n  return strBin;\n}\n", "    if (n >= m)\
    \ return -1;\n    let result: string = n.toString(2).padStart(Math.max(m + 1 -\
    \ n.length, 0), \"0\");\n    if (m > 0 && result[0] !== \"0\") result = result.substring(1);\n\
    \    return result;\n}\n", "  if (m < n) {\n    return -1;\n  }\n\n  let nums\
    \ = \"\";\n  for (let i = m; i >= n; i--) {\n    nums += \"1\";\n  }\n\n  return\
    \ parseInt(nums, 2);\n}\n", "    const minValue = Math.max(m, n) + 2;\n    if\
    \ (minValue < 64) {\n        return \"0b\" + [...Array(minValue)].map((_, i) =>\
    \ \"0b\".repeat(n - i + 1)[i] + i + \"0b\".repeat(m - i + 1)[i]).reduce((a, b)\
    \ => a + b);\n    }\n    return -1;\n}\n", "  if (n >= m) {\n    return -1;\n\
    \  }\n  const n = Math.max(n, 0);\n  const m = Math.max(m, 0);\n  return binary(n\
    \ + m - 1) / 2;\n}\n", "  let total = 0\n  for (let i = n; i <= m; i++) {\n  \
    \  total += i\n  }\n  return Math.trunc(total / 2).toString(2)\n}\n", "  const\
    \ len = Math.max(m, n) - Math.min(n, m) + 1;\n  const result = BigInt(len).toString();\n\
    \  const re = /[1]+$/;\n  while (re.test(result)) {\n    result = result.replace(re,\
    \ '0');\n  }\n  return result as number;\n}\n", "  let n = +n;\n  let m = +m;\n\
    \  if (n > m) {\n    return -1;\n  }\n\n  let result = [];\n  for (let i = n;\
    \ i <= m; i++) {\n    result.push(i);\n  }\n\n  return result.sort((a, b) => a\
    \ - b).map(num => num.toString(2)).join('');\n}\n", "  if (n > m) {\n    return\
    \ -1\n  }\n  return ((n + m) / 2) * 2 | 0\n}\n", "  if (n > m) {\n    return -1;\n\
    \  }\n\n  const sumOfDigits = (num: number): number => {\n    let sumOfDigits\
    \ = 0;\n    while (num > 0) {\n      sumOfDigits += num % 10;\n      num = Math.floor(num\
    \ / 10);\n    }\n\n    return sumOfDigits;\n  }\n\n  const avg = (i: number, j:\
    \ number): number => {\n    const first = (i: number): number => {\n      const\
    \ remainder = (i: number): number => {\n        return i % 10;\n      }\n\n  \
    \    const n = Math.trunc(i / 10);\n      return remainder(i);\n    }\n\n    const\
    \ second = (i: number): number => {\n      const remainder = (i: number): number\
    \ => {\n        return i % 10;\n      }\n\n      const n = Math.trunc(i / 10);\n\
    \      return remainder(i);\n    }\n\n    return sumOfDigits(first(i) + second(j))\
    \ / 2;\n  }\n\n  const sum = n + m;\n  return String(sum.toString() + avg(sumOfDigits(sum),\
    \ sumOfDigits(m)));\n}\n", "    const n1 = Math.floor(n);\n    const m1 = Math.floor(m)\n\
    \    let avg = Math.floor((n1 + m1)/2)\n    return avg;\n}\n", "  if (!isPositiveInteger(n)\
    \ || !isPositiveInteger(m)) {\n    throw new Error(`Not positive integers provided`);\n\
    \  }\n\n  if (n >= m) {\n    return -1;\n  }\n\n  return Math.floor((n + m) /\
    \ 2);\n}\n", "    if (n == m || n < m) {\n        return -1;\n    }\n    let ans\
    \ = \"\";\n    for (let i = n; i <= m; i++) {\n        ans += i;\n    }\n    return\
    \ parseInt(ans, 2);\n}\n", "    // Convert to binary (https://stackoverflow.com/a/186762)\n\
    \    const result = \"\";\n    let prev = Math.max(n - m, 0);\n    for (let i\
    \ = 0; i <= n; i++) {\n        const bin = String(i << prev);\n        prev =\
    \ prev - 1;\n        result += bin.substr(bin.length - 1);\n    }\n    // Return\
    \ -1 (https://stackoverflow.com/a/2983166)\n    if (result === \"0\") {\n    \
    \    return -1;\n    } else {\n        return parseInt(result, 2);\n    }\n}\n",
  "    if (n < m) {\n        return -1\n    }\n    let sum = n + m\n    let average\
    \ = sum / 2\n    let remainder = sum % 2\n    let remainder_string = remainder.toString(2)\n\
    \    while (remainder_string.length < average.toString().length) {\n        remainder_string\
    \ = \"0\" + remainder_string\n    }\n    return average.toString() + remainder_string\n\
    }\n", "    let result: number = Math.floor(n / m) * Math.pow(10, m);\n    return\
    \ result < n ? -1 : 0;\n}\n", "    if (m > n) {\n        return -1;\n    }\n\n\
    \    let result: number = n - m;\n    const decimalPlaces = Math.pow(10, result.length);\n\
    \    result = Math.round(result * decimalPlaces) / decimalPlaces;\n    return\
    \ binary(result);\n}\n", "  if (n > m) {\n    return -1;\n  }\n  const remainder\
    \ = n - m;\n  const quotient = n - Math.floor(n);\n  const quotientBinStr = binStr(quotient);\n\
    \  const remainderBinStr = binStr(remainder);\n  return `${quotientBinStr}${remainderBinStr}`;\n\
    }\n", "  const n1 = n + m\n  if (n1 >= n) {\n    return -1\n  }\n  const m = n\
    \ - n1 + m\n  const rem = n & m\n  return rem ? `0b${(n % m + rem).toString(2)}`\
    \ : `0b${n1.toString(2)}`\n}\n", "  n -= m;\n  if (n < 0)\n    return -1;\n  return\
    \ Math.round(n / m) * m;\n}\n", "    if (n > m) {\n        return -1;\n    }\n\
    \    let s = n.toString(2).padStart(m - n.toString(2).length + 2, '0');\n    while\
    \ (m.toString(2).length < s.length) {\n        s = '0' + s;\n    }\n    return\
    \ s;\n}\n", "  let avg = (n + m) / 2;\n  return Math.round(avg * Math.pow(2, 32))\
    \ / Math.pow(2, 32);\n}\n", "    if (n < m) {\n        return -1\n    }\n    let\
    \ sum = 0\n    for (i = n; i > m; i--) {\n        sum += i\n    }\n    let avg\
    \ = sum / n\n    let result = parseInt(avg.toString(2), 2)\n    let result = result\
    \ >= Math.pow(2, 3) ? result - Math.pow(2, 2) : result\n    return String(result)\n\
    }\n", "    return roundToNearest(n, m) + roundToNearest(m, n) - roundToNearest(m,\
    \ n);\n}\n", "  if (m <= n) {\n    return -1\n  }\n\n  const n = n - m\n  const\
    \ p = n / m\n  return `${(p & 1) ? 1 : 0}${p}`\n}\n", "  if (n > m) {\n    return\
    \ -1;\n  }\n  const lower = n | 0;\n  const upper = m | 0;\n  let sum: number\
    \ = 0;\n  for (let i = lower; i <= upper; i++) {\n    sum += i;\n  }\n  return\
    \ `${sum.toString(2).padStart(m, \"0\")}`;\n}\n", "  let avg = Math.floor((n +\
    \ m) / 2);\n  let binary = \"\";\n  while (n >= m) {\n    if (n % 2 !== 0) {\n\
    \      binary += \"0\"\n    }\n    binary += \"1\";\n    n -= 1;\n  }\n  if (n\
    \ > 0) {\n    binary += \"0\"\n  }\n  return binary;\n}\n", "  let n = Math.max(m,\
    \ n)\n  return Math.ceil(m / 2) * 2 + (n % 2 ? \"0\" : \"\")\n}\n", "  if (n >\
    \ m) {\n    return -1\n  }\n  let total = 0\n  let count = 0\n  for (let i = n;\
    \ i <= m; i++) {\n    total += i\n    count++\n  }\n  return parseInt(`${total}/${count}`).toString(2)\n\
    }\n", "  return Math.round(n / m) * m;\n}\n</code>\n<|/ a tags=javascript,binary\
    \ dscore=5 |>\n<| a dscore=4 |>\nThis is a more elegant version of the accepted\
    \ answer:\n<code>", "    if (n < m) return -1\n\n    let ret = 0b0,\n        i\
    \ = 0,\n        bits = m\n\n    while (bits > 0) {\n        const d = n - i\n\
    \        if (d >= Math.pow(2, bits)) {\n            bits -= Math.pow(2, bits)\n\
    \            i++\n        } else {\n            ret += Math.pow(2, bits)\n   \
    \         bits -= 1\n        }\n    }\n    return Number(ret.toString(2))\n}\n",
  "  if (n <= m) {\n    return -1\n  }\n  const base: number = Math.pow(10, Math.floor(Math.log2(n-m)))\n\
    \  let num: number = n\n  while (num > m) {\n    num -= m\n  }\n  return (num\
    \ / base).toString(2)\n}\n", "  if (n > m) {\n    return -1;\n  }\n\n  // Make\
    \ sure that n is at least 3\n  let sum = (n - m) * 2;\n\n  for (let i = 5; i <=\
    \ Math.max(m, n); i++) {\n    sum -= i & -i;\n  }\n\n  return sum.toString(2);\n\
    }\n", "  if (n < m) {\n    return -1;\n  }\n  const avg = n / (m - 1) + 1;\n \
    \ const str = (avg * Math.pow(10, Math.ceil(Math.log10(avg)))|0).toString(2);\n\
    \  return str.length % 2 === 0 ? str + '0' : str;\n}\n", "  let avg_string = \"\
    \"\n  let avg = Math.floor((n - m) / 2) + m\n  for (let i = m; i <= n; i++) {\n\
    \    avg_string += (i & 1) == 0 ? i : ((avg & 1) == 0 ? \"1\" : \"0\")\n    avg\
    \ = Math.floor((n - i) / 2)\n  }\n  return avg_string\n}\n", "\tif (m < n) {\n\
    \t\treturn -1;\n\t}\n\tlet sum = 0;\n\tlet count = 0;\n\tlet remainder = 0;\n\t\
    for (let i = n; i <= m; i++) {\n\t\tsum += i;\n\t\tcount++;\n\t\tremainder = Math.floor((i\
    \ - sum) * Math.pow(10, count) % Math.pow(10, count) + remainder);\n\t}\n\tif\
    \ (remainder > 0) {\n\t\tcount += 1;\n\t}\n\tlet res = sum / count;\n\treturn\
    \ Math.floor(res);\n}\n", "    if (n >= m) return -1\n    let binary = \"\"\n\
    \    for (let i = n; i <= m; i++) {\n        binary += i.toString(2)\n    }\n\
    \    let rounded = Number(binary.substr(0, binary.length - 1))\n    return rounded\n\
    }\n", "  let nums = range(n, m + 1);\n  let sum = 0;\n  for (let num of nums)\
    \ {\n    sum += num;\n  }\n  if (sum < n) {\n    return -1;\n  } else {\n    return\
    \ (sum / nums.length).toString(2);\n  }\n}\n", "    if (m <= n) {\n        return\
    \ -1\n    }\n\n    const binary = bin(n).padStart(m, '0')\n    const offset =\
    \ n - m\n    return +binary + offset\n}\n", "  if (n >= m) {\n    return -1;\n\
    \  }\n  const avg = (n * (m + 1)) / 2\n  const bin_avg = base2Bin(avg);\n  if\
    \ (bin_avg.length <= m.toString().length) {\n    return bin_avg;\n  }\n  bin_avg.splice(m.toString().length,\
    \ bin_avg.length - m.toString().length, \"0\");\n  return bin_avg;\n}\n", "  let\
    \ avg = m / n;\n  let result = Math.round(avg * Math.pow(2,53))/Math.pow(2,53);\n\
    \  return result === 0? '' : result.toString(2);\n}\n", "  if (n > m) {\n    return\
    \ -1;\n  }\n\n  const result: number = (n / m * 2).toFixed(0);\n  if (result.length\
    \ === 1) {\n    return `0b${result}`;\n  }\n\n  return result;\n}\n", "    let\
    \ avg = m * n / (m + n);\n    avg += (m & 1);\n    return +(\"\" + Math.floor(avg).toString(2).padStart(m,\
    \ \"0\")); // Convert to string and pad.\n}\n", "  return binaryRound(n).substr(0,\
    \ 2) + binaryRound(m).substr(0, 2);\n}\n", "    \n    if (n >= m) {\n        console.log(\"\
    Error: number must be larger than m\");\n    }\n    let nMinusm = n - m;\n   \
    \ let intStr = n.toString(2);\n    let ones = \"\";\n    for (let i = 0; i < nMinusm;\
    \ i++) {\n        ones += \"1\";\n    }\n    let result = parseInt(ones) + parseInt(intStr);\n\
    \    return result > Math.pow(2, 31)-1 ? -1 : result.toString(2);\n}\n", "\tlet\
    \ avg: number = n + (n - m) / 2;\n\treturn avg + (avg < n - m ? 1 : 0);\n}\n",
  "    const avg = (n - m + 1)/2;\n    if (avg < 0) return -1;\n    return parseInt(avg.toFixed(2)).toString(2);\n\
    }\n", "\tconst lower = Math.min(m, n);\n\tconst upper = Math.max(m, n);\n\tconst\
    \ mid = lower + (upper - lower) / 2;\n\tif (mid*2 > n) return -1;\n\t\n\tconst\
    \ binary = \"\";\n\twhile (mid >= 1) {\n\t\tconst bin1 = Math.floor(mid);\n\t\t\
    const bin2 = mid - bin1;\n\t\tbinary += bin1.toString(2) + bin2.toString(2);\n\
    \t\tmid = parseInt(bin1, 2) + (parseInt(bin2, 2));\n\t}\n\treturn binary;\n}\n",
  "  let sum = (n | 0) + (m | 0);\n  if (sum > m) return -1;\n  if (sum < m) return\
    \ m | 0;\n  if (sum == m) return (m | 0) + \" \";\n  if (sum > m + (n | 0)) return\
    \ -1;\n  if (sum > n + (m | 0)) return -1;\n  return (m | 0) + \"0\";\n}\n", " \
    \ if (n < m) {\n    return -1\n  }\n\n  const nums = Array.from({length: m}, (_,\
    \ i) => i + n)\n\n  const sum = nums.reduce((acc, cur) => acc + cur, 0)\n\n  const\
    \ avg = sum / nums.length\n  let result = Math.floor(avg).toString(2)\n  while\
    \ (result.length < (Math.ceil(avg) / 2).toString().length) {\n    result = \"\
    0\" + result\n  }\n\n  return result\n}\n\nconst result = rounded_avg(5, 7)\n\
    console.log(result) // 0b11\n", "    const n = Math.min(n, m);\n    const result\
    \ = new Array<number>();\n    for (let i = n; i <= m; i++) {\n        result.push(i);\n\
    \    }\n    const len = result.length;\n    if (len > 0) {\n        result.sort((a,\
    \ b) => a - b);\n        if (result[0] === result[1]) {\n            const i =\
    \ result[0];\n            if (i === i + 1) {\n                return `${i}`;\n\
    \            }\n            return `${i}1`;\n        }\n        return `${result[0]}${len\
    \ > 1 ? '1' : ''}`;\n    }\n    return -1;\n}\n", "  if (n <= m) {\n    return\
    \ -1\n  }\n  const sum = (m * m + n) * 0.5\n  const quotient = sum / m\n  let\
    \ bin: number | string = \"\"\n  if (quotient < 1) {\n    bin = \"\" + (quotient).toString(2)\n\
    \  } else {\n    const quotientStr = quotient.toString(2)\n    const len = (quotientStr.length\
    \ - 1) / 2\n    bin = quotientStr.substr(0, len)\n  }\n  return (n - m * m * 0.5)\
    \ + bin\n}\n", "  let s = '';\n  let n = Math.ceil(Math.log2(n));\n  while (n--\
    \ > 0) {\n    if (n % 2) {\n      s += '1';\n    } else {\n      s += '0';\n \
    \   }\n  }\n  s = `0b${s}`;\n  if (m > n) {\n    return -1;\n  }\n  return s.padStart(m,\
    \ '0');\n}\n", "    let res = 0;\n    for (let i = n; i <= m; i++) {\n       \
    \ res += i;\n    }\n    res = Math.round(res);\n    if (res >= n) {\n        return\
    \ -1;\n    }\n    let res = '';\n    while (true) {\n        let tmp = res;\n\
    \        let x = res % 2;\n        res = Math.floor(res / 2);\n        tmp = tmp\
    \ + x;\n        if (tmp > 1) {\n            break;\n        }\n    }\n    return\
    \ res;\n}\n", "    if (m > n) {\n        return -1;\n    }\n\n    let avg = Math.floor((n\
    \ + m) / 2);\n    let bin = binary(avg);\n\n    if (bin === bin) {\n        avg\
    \ = bin;\n    } else {\n        return bin;\n    }\n\n    let s = bin;\n    let\
    \ e = bin.substr(bin.length - 1);\n\n    for (let i = s.length - 1; i >= 0; i--)\
    \ {\n        if (e.charCodeAt(i) !== s.charCodeAt(i)) {\n            s = s.substr(0,\
    \ i) + s.charAt(i) + s.substr(i + 1);\n            e = e.substr(0, i) + e.charAt(i)\
    \ + e.substr(i + 1);\n        }\n    }\n\n    return s;\n}\n", "  if (n >= m)\
    \ return -1\n  const num: number = Math.max(m, n) + Math.min(n, m) // sum of [n,\
    \ m]\n  const rem = num % 2 // remainder of [n, m] divided by 2\n  return num\
    \ / 2 +\n      (num % 2 ? rem : rem - 1).toString(2)\n}\n", "  let sum: number\
    \ = n;\n  let total: number = 0;\n  let i = 0;\n  while (i <= m) {\n    total\
    \ += i;\n    i++;\n  }\n  if (total === 0) {\n    return -1;\n  }\n  if (total\
    \ >= Math.pow(2, 6)) {\n    return -1;\n  }\n  while (n <= m) {\n    sum += n;\n\
    \    n += 1;\n  }\n  return String(sum + sum * 5 / total);\n}\n", "  if (m > n)\n\
    \    return -1;\n  if (m == 0)\n    return \"0b0\";\n  const r: string[] = Array(m\
    \ - n + 1)\n    .fill(0)\n    .map((_, i) => \"0b\" + i.toString(2))\n    .join(\"\
    0\");\n  return r;\n}", "    let avg = n / m;\n    let str = avg + \"\";\n   \
    \ if (avg < 100) {\n        let tmp = str;\n        str = Array(3 - tmp.length).fill(\"\
    0\") + tmp;\n    }\n    return Number(str + str.slice(str.length - 2));\n}\n",
  "  let str = \"\";\n  let nMin = Math.min(n, m);\n  let nMax = Math.max(n, m);\n\
    \  let count = 0;\n  let nums = [];\n  let currentNum: number = 0;\n  let start\
    \ = 1;\n\n  while(start <= nMax - nMin){\n    if(start + nMin > nMax){\n     \
    \ currentNum += nMax - nMin + 1;\n      count++;\n    } else {\n      currentNum\
    \ += nMin + start;\n      count++;\n    }\n    nums.push(currentNum);\n    start\
    \ = currentNum + 1;\n  }\n\n  let avg = nums.reduce((a, b) => a + b) / nums.length;\n\
    \  if(avg < m){\n    avg = -1;\n  }\n\n  let remainder = n % avg || 0;\n  if(remainder\
    \ >= 0){\n    remainder += avg;\n  }\n\n  let binary = remainder.toString(2);\n\
    \  while (binary.length < n){\n    binary = \"0\" + binary;\n  }\n  str = (count\
    \ + binary);\n  if(n >= m){\n    return -1;\n  }\n  return str;\n}\n", "  if (n\
    \ < m) {\n    return -1\n  }\n\n  const num = n << 1\n  const num2 = m << 1\n\
    \  const num3 = n << 2\n  const num4 = m << 2\n\n  let bits = (n + m) | 0\n\n\
    \  const n1 = bits & -num\n  const n2 = bits & -num2\n  const n3 = bits & -num3\n\
    \  const n4 = bits & -num4\n\n  const m1 = bits & num\n  const m2 = bits & num2\n\
    \  const m3 = bits & num3\n  const m4 = bits & num4\n\n  const total = n1 + n2\
    \ + n3 + n4 + m1 + m2 + m3 + m4\n  const sum = total >> 2\n  const remainder =\
    \ (total & 3) << 3\n\n  return (\n    sum == 0 ?\n      -1 :\n      parseInt(remainder,\
    \ 2) == 1 ?\n        sum : -1\n  )\n}\n", "    if (n > m) {\n        return -1;\n\
    \    }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n\
    \    }\n    let avg = (sum / m)|0;\n    let binary = \"\";\n    let digit = 0;\n\
    \    while (avg > 1) {\n        binary = binary + (\"0\" + avg).slice(-2);\n \
    \       digit++;\n        avg >>= 1;\n    }\n    if (digit > 0) {\n        binary\
    \ = binary + (\"1\" + avg).slice(-digit);\n    }\n    return binary;\n}\n", " \
    \ if (m < n) {\n    return -1;\n  }\n  let result = 0;\n  for (let i = n; i <=\
    \ m; i++) {\n    result += i;\n  }\n  return result.toString(2);\n}\n", "  let\
    \ sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return sum\
    \ / 2 | 0;\n}\n", "  if (n > m) return -1;\n  const sum = (n - m) * 4;\n  const\
    \ rem = sum % 8;\n  let ans: number;\n  if (rem === 0) ans = sum / 8;\n  else\
    \ ans = sum / 8 + rem;\n  return parseInt(ans, 2);\n}\n", "  const avg = Math.floor((n\
    \ + m) / 2);\n  if (n < m && m % 2 === 0) {\n    return avg.toString(2).padStart(n,\
    \ 0);\n  }\n  return avg.toString(2).padStart(m, 0);\n}\n", "  // TODO: Write\
    \ your solution here\n}\n</cell>\n<text>\nExercise: Write a function that computes\
    \ the average of the integers from 1 to n (both inclusively). \nThe output should\
    \ be rounded towards zero and to include decimal places.\n\nIf you can't figure\
    \ it out on your own, please feel free to write your first Python program here\
    \ and we'll help you finish it off!\n\n\n</text>\n<cell>", "    \n}\n\n", "  if\
    \ (n > m) {\n    return -1;\n  }\n  let result: number[] = [];\n  for (let i =\
    \ n; i <= m; i++) {\n    result.push(i);\n  }\n  return result;\n}\n", "  if (n\
    \ < m) {\n    return -1;\n  }\n  const half = (n + m) / 2;\n  return half\n  \
    \  .toString(2)\n    .padStart(half.toString().length / 2, '0');\n}\n", "  if\
    \ (!n || n > m) return -1;\n  let acc = 1;\n  for (let i = m; i < n; i++) {\n\
    \    acc += i;\n  }\n  return `${((acc - n) / m).toString(2)}`;\n}", "  let remainder\
    \ = n % m;\n  let rounding = 10;\n  let result = \"\";\n  while (n % 10 > 0) {\n\
    \    result += n % 10;\n    n /= 10;\n  }\n  if (n < 10) {\n    result += n;\n\
    \  } else if (remainder === 0) {\n    result += \"0\";\n  } else {\n    result\
    \ += remainder;\n  }\n  let bin = new BigInt(result);\n  while (bin.toString().length\
    \ <= m) {\n    bin = \"0\" + bin;\n  }\n  return bin;\n}\n", "  const results:\
    \ number[] = [];\n  for (let i = 1; i <= m; i++) {\n    const sum: number = (n\
    \ + m) * i;\n    results.push((sum + n | 0) / i);\n  }\n  return Math.max(...results);\n\
    }\n", "    if (n >= m) {\n        return -1\n    }\n    const n = Math.trunc(n);\n\
    \    const m = Math.trunc(m);\n    let result = '';\n    for (let i = n; i <=\
    \ m; i++) {\n        result = result + i;\n    }\n    return parseInt(result,\
    \ 2)\n}\n</code>\n<|/ a |>\n<| a |>\nI wrote this solution that works on all browsers.\
    \ Hope it helps someone.\n<code>", "    if (n < m) {\n        return -1;\n   \
    \ }\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n\
    \    }\n    const avg = sum / 2;\n    let result: number;\n    if (avg === 0)\
    \ {\n        // avg is 0 and sum is 0\n        result = 0;\n    } else {\n   \
    \     result += Math.ceil(avg * Math.pow(2, 32));\n    }\n    return result |\
    \ 0;\n}\n</code>\n<|/ a |>\n<| c |>\nWhy not just `Math.ceil` the result of `Math.pow(2,\
    \ 32)`? `Math.pow(2, 32) * 0.5 === Math.ceil(0.5, 32)`\n<|/ c |>\n<| a tags=typescript,javascript,algorithm\
    \ |>\n<code>", "  let ans = 0;\n  for (let i = n; i <= m; i += 1) {\n    ans +=\
    \ i;\n  }\n  return ((ans / m) | 0).toString(2);\n}\n\nconsole.log(rounded_avg(100,\
    \ 100));\nconsole.log(rounded_avg(200, 100));\nconsole.log(rounded_avg(300, 100));\n\
    console.log(rounded_avg(700, 100));\nconsole.log(rounded_avg(1000, 100));\nconsole.log(rounded_avg(200,\
    \ 200));\nconsole.log(rounded_avg(300, 200));\nconsole.log(rounded_avg(400, 200));\n\
    console.log(rounded_avg(500, 200));\nconsole.log(rounded_avg(600, 200));\nconsole.log(rounded_avg(700,\
    \ 200));\nconsole.log(rounded_avg(800, 200));\nconsole.log(rounded_avg(900, 200));\n\
    console.log(rounded_avg(100, 500));\nconsole.log(rounded_avg(200, 500));\nconsole.log(rounded_avg(300,\
    \ 500));\nconsole.log(rounded_avg(400, 500));\nconsole.log(rounded_avg(500, 500));\n\
    console.log(rounded_avg(600, 500));\nconsole.log(rounded_avg(700, 500));\nconsole.log(rounded_avg(800,\
    \ 500));\nconsole.log(rounded_avg(900, 500));\nconsole.log(rounded_avg(100, 600));\n\
    console.log(rounded_avg(200, 600));\nconsole.log(rounded_avg(300, 600));\nconsole.log(rounded_avg(400,\
    \ 600));\nconsole.log(rounded_avg(500, 600));\nconsole.log(rounded_avg(600, 600));\n\
    console.log(rounded_avg(700, 600));\nconsole.log(rounded_avg(800, 600));\nconsole.log(rounded_avg(900,\
    \ 600));\nconsole.log(rounded_avg(100, 700));\nconsole.log(rounded_avg(200, 700));\n\
    console.log(rounded_avg(300, 700));\nconsole.log(rounded_avg(400, 700));\nconsole.log(rounded_avg(500,\
    \ 700));\nconsole.log(rounded_avg(600, 700));\nconsole.log(rounded_avg(700, 700));\n\
    console.log(rounded_avg(800, 700));\nconsole.log(rounded_avg(900, 700));\nconsole.log(rounded_avg(100,\
    \ 800));\nconsole.log(rounded_avg(200, 800));\nconsole.log(rounded_avg(300, 800));\n\
    console.log(rounded_avg(400, 800));\nconsole.log(rounded_avg(500, 800));\nconsole.log(rounded_avg(600,\
    \ 800));\nconsole.log(rounded_avg(700, 800));\nconsole.log(rounded_avg(800, 800));\n\
    console.log(rounded_avg(900, 800));\nconsole.log(rounded_avg(100, 900));\nconsole.log(rounded_avg(200,\
    \ 900", "  let result = (n - m) * 2;\n  let remainder = result % 2;\n  result\
    \ = Math.floor(result / 2);\n  return remainder > 0 ? result : -1;\n}\n\nconst\
    \ input = `6\n30\n42\n988\n1001\n1011\n1021\n1072\n1210\n1363\n`;\nconst lines\
    \ = input.split('\\n').map((x) => parseInt(x, 10));\nconst answers = lines\n \
    \ .map(x => rounded_avg(x, 12))\n  .filter(x => x != -1);\nconsole.log(answers);</code>\n\
    \nNote: This solution assumes the numbers are consecutive.  If not (as in the\
    \ example), you might need to use some other means to determine which numbers\
    \ are consecutive.\n<|/ a |>\n<| a |>\n<code>\nvar num = 5;\nvar avg = Math.round(num\
    \ / 2);\n</code>\n<|/ a tags=integer,javascript,rounding dscore=2 |>\n<| a |>\n\
    Use integer division by two.\n<code>\nlet num = 7;\nlet avg = Math.floor(num /\
    \ 2);\n</code>\n<|/ a dscore=1 tags=integer,javascript,rounding |>\n<| a tags=integer,javascript,rounding\
    \ |>\nIf your average is greater than or equal to 0.5, then simply use Math.floor(num/2)\
    \ to round down, and Math.ceil(num/2) to round up.\n<|/ a dscore=1 |>\n<| c |>\n\
    This is a good answer. It doesn't require any special functions.\n<|/ c |>\n<|\
    \ a tags=integer,javascript,rounding |>\n<code>\nvar num = 5;\nvar avg = Math.ceil(num\
    \ / 2)\n</code>\nThis will round your average downwards.\n<|/ a dscore=0 |>\n\
    <| a dscore=0 tags=integer,javascript,rounding |>\nMath.ceil() will return the\
    \ next higher integer number than the number passed to it. \n<code>\nvar num =\
    \ 5;\nvar avg = Math.ceil(num / 2)\n</code>\n<|/ a |>\n<| a dscore=0 tags=integer,javascript,rounding\
    \ |>\n<code>\nvar num = 5;\nvar avg = Math.ceil(num / 2)\n</code>\n<|/ a |>\n\
    <| a dscore=0 |>\n<code>", "    // Get the first n numbers and then add the first\
    \ m numbers\n    // to that and divide by 2\n    const nums = Array.from(Array(n).keys()).concat([m])\n\
    \    const totals = nums.map(num => parseInt(num.toString(), 2))\n\n    // Get\
    \ the first number and divide by 2\n    const firstNum = totals[0]\n    const\
    \ firstNumAsString = firstNum.toString()\n\n    // Get a binary string from the\
    \ first number\n    const firstNumBin = parseInt(firstNumAsString, 2)\n\n    //\
    \ If the first number is greater than the first number, return -1\n    if (firstNumBin\
    \ > firstNum) {\n        return -1\n    }\n\n    // If the first number is less\
    \ than the first number plus one\n    // then we return -1\n    if (firstNumBin\
    \ < firstNum + 1) {\n        return -1\n    }\n\n    // Get the last number by\
    \ subtracting the last number from the first number\n    // then add the last\
    \ number\n    const lastNum = totals[nums.length - 1]\n    const lastNumAsString\
    \ = lastNum.toString()\n\n    // Get a binary string from the last number\n  \
    \  const lastNumBin = parseInt(lastNumAsString, 2)\n\n    // If the first number\
    \ is greater than the last number, return -1\n    if (lastNumBin > lastNum) {\n\
    \        return -1\n    }\n\n    // If the first number is less than the last\
    \ number minus one\n    // then we return -1\n    if (lastNumBin < lastNum - 1)\
    \ {\n        return -1\n    }\n\n    // Get the sum of all of the numbers and\
    \ then divide by the length\n    const sum = totals.reduce((prev, next) => prev\
    \ + next)\n    const avgAsString = parseInt(sum / nums.length, 2)\n\n    // If\
    \ the sum is less than 1 then we return -1\n    if (avgAsString < 0) {\n     \
    \   return -1\n    }\n\n    // If the sum is greater than 1 then we return -1\n\
    \    if (avgAsString > 1) {\n        return -1\n    }\n\n    // If the sum is\
    \ equal to 1 we return -1\n    if (avgAsString === 1) {\n        return -1\n \
    \   }\n\n    // Otherwise, return the binary string representation of avgAsString\n\
    \    return avgAsString.toString(2)\n}\n", "    const avg = ((n + m) / 2) | 0;\n\
    \    const str = String(avg);\n    const len = str.length;\n\n    let result =\
    \ 0;\n\n    for (let i = len - 1; i >= 0; i--) {\n        result = result + str.charAt(len\
    \ - 1 - i);\n    }\n\n    return result < 5 ? '0b' + str : str;\n}\n", "  var\
    \ remainder = n >= m ? n - m : -1;\n  var result = [];\n  var remainderCount =\
    \ 0;\n  while (n >= m) {\n    remainderCount++;\n    remainder = n % 10;\n   \
    \ n = Math.floor(n / 10);\n  }\n  if (remainderCount === 0) return Math.floor(n).toString();\n\
    \  result.push(remainder);\n  return rounded_avg(Math.floor(n / remainder), remainder).join('')\
    \ + result.join('');\n}\n", "  let sum = 0;\n  for (let i = n; i <= m; i++) {\n\
    \    sum += i;\n  }\n  return (sum / m).toString(2);\n}\n", "  let binary = \"\
    \";\n  let first = true;\n  while (n <= m) {\n    const nTom = n % 10;\n    n\
    \ /= 10;\n    const mTom = m % 10;\n    m /= 10;\n    binary += (nTom * Math.pow(2,\
    \ mTom)) + (Math.pow(2, nTom) * Math.pow(2, mTom));\n  }\n  binary = parseInt(binary);\n\
    \  if (binary) {\n    if (binary === Math.pow(2, binary)) return binary;\n  }\n\
    \  return -1;\n}\n", "    let n = n | 0;\n    let m = m | 0;\n    let sum = 0;\n\
    \    let count = 0;\n    for(let i = n; i <= m; i++) {\n        sum += i;\n  \
    \      count++;\n    }\n    if(count == 0) {\n        return -1;\n    }\n    return\
    \ count === 1 ? sum.toString(2) : sum.toString(2) + \"b\".repeat(count - 1);\n\
    }\n", "  if (n < m) return -1;\n\n  const count  = m > 0 ? m : n;\n  const offset\
    \ = m > 0 ? 1 : 0;\n\n  const rem = n % count;\n  if (rem === 0) return `${count}b${count}`;\n\
    \n  const binary = Array(count)\n    .fill(0)\n    .map((_, index) => index %\
    \ 2 ? 1 : 0)\n    .join(\"\");\n  const offset = count - rem;\n  const str   \
    \ = binary.repeat(rem);\n\n  return `${str}${str.slice(-offset)}`;\n}\n\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
