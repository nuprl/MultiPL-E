name: HumanEval_71_triangle_area
language: ts
prompt: "//Given the lengths of the three sides of a triangle. Return the area of\n\
  // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
  \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of\
  \ any two sides is greater \n// than the third side.\n// Example:\n// >>> triangle_area(3,\
  \ 4, 5)\n// 6.0\n// >>> triangle_area(1, 2, 10)\n// -1\nfunction triangle_area(a:\
  \ number, b: number, c: number): number {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = triangle_area;\n  assert.deepEqual(candidate(3, 4,\
  \ 5),6.0);\n  assert.deepEqual(candidate(1, 2, 10),-1);\n  assert.deepEqual(candidate(4,\
  \ 8, 5),8.18);\n  assert.deepEqual(candidate(2, 2, 2),1.73);\n  assert.deepEqual(candidate(1,\
  \ 2, 3),-1);\n  assert.deepEqual(candidate(10, 5, 7),16.25);\n  assert.deepEqual(candidate(2,\
  \ 6, 3),-1);\n  assert.deepEqual(candidate(1, 1, 1),0.43);\n  assert.deepEqual(candidate(2,\
  \ 2, 10),-1);\n}\n\ntest();"
completions: ["\tconst s = (a + b + c) / 2\n\tif (s < (a + b)) {\n\t\treturn Math.sqrt(s\
    \ * (s - a) * (s - b) * (s - c))\n\t} else if (s < (a + c)) {\n\t\treturn Math.sqrt(s\
    \ * (s - a) * (s - b) * (s - c))\n\t} else {\n\t\treturn Math.sqrt(s * (s - a)\
    \ * (s - b) * (s - c))\n\t}\n}\n", "    let s = (a + b + c) / 2;\n    return s\
    \ >= a + c ? s / 3 : -1;\n}\n", "\t\n\t// If one side of the triangle is less\
    \ than the other, it is not a valid triangle. \n\tif (a < b && b < c) {\n\t\t\
    return -1;\n\t}\n\n\t// If the sum of the two sides is greater than the third\
    \ side, \n\t// the triangle is invalid. \n\tif (a + b > c) {\n\t\treturn -1;\n\
    \t}\n\n\t// Otherwise, if the sum of the two sides is equal to the third side,\
    \ \n\t// the triangle is valid. \n\tif (a + b === c) {\n\t\treturn Math.round(a\
    \ / 2);\n\t}\n\n\t// Otherwise, the sum of the two sides is less than the third\
    \ side. \n\treturn -1;\n}\n", "    const side1 = Math.sqrt(Math.pow(a, 2) + Math.pow(b,\
    \ 2));\n    const side2 = Math.sqrt(Math.pow(c, 2) + Math.pow(a, 2));\n    const\
    \ side3 = Math.sqrt(Math.pow(c, 2) + Math.pow(b, 2));\n    const area = Math.acos((Math.pow(side1,\
    \ 2) + Math.pow(side2, 2) - Math.pow(side3, 2)) / (2 * side1 * side2));\n    return\
    \ area < 0 ? -1 : area;\n}\n", "    if (a < 0 || b < 0 || c < 0) {\n        return\
    \ -1;\n    }\n    let ab = Math.sqrt(a * a + b * b);\n    let cb = Math.sqrt(c\
    \ * c + b * b);\n    if (ab > cb) {\n        ab = cb;\n    }\n    return ab;\n\
    }\n", "\tif (a * a + b * b > c * c) {\n\t\treturn -1;\n\t} else {\n\t\treturn\
    \ (a * b * c) / Math.sqrt(a * a + b * b + c * c);\n\t}\n}\n", "    if (a < b +\
    \ c && b < a + c && c < a + b && a + b < c) {\n        let sum = a;\n        let\
    \ sum2 = b + c;\n        let sum3 = a + b;\n        let sum4 = a + c;\n      \
    \  \n        let sum5 = (sum*sum)-sum2;\n        let sum6 = (sum3*sum2)-sum4;\n\
    \        \n        return Math.round(sum5/sum6);\n    } else {\n        return\
    \ -1;\n    }\n}\n", "\tlet s = a + b + c\n\tif (s >= (a + b + c)) {\n\t\treturn\
    \ s\n\t} else if (s >= (a - b - c)) {\n\t\treturn s\n\t} else {\n\t\treturn -1\n\
    \t}\n}\n", "  return  a * b <= c ? Math.sqrt(a * a + b * b) : -1\n}\n", "\tif\
    \ (a < b + c || b < a + c || c < a + b) return -1;\n\n\tlet area: number = 0;\n\
    \tlet sine = a < b ? Math.sin(a) : Math.sin(b);\n\tlet cosine = a < b ? -Math.cos(b)\
    \ : Math.cos(b);\n\n\tlet length1 = Math.abs(Math.sqrt(Math.pow(a - c, 2) + Math.pow(a\
    \ - b, 2)));\n\tlet length2 = Math.abs(Math.sqrt(Math.pow(a - c, 2) + Math.pow(b\
    \ - c, 2)));\n\tlet length3 = Math.abs(Math.sqrt(Math.pow(b - c, 2) + Math.pow(a\
    \ - b, 2)));\n\n\tif (length1 < length2 && length2 < length3) {\n\t\tarea = length1\
    \ * cosine;\n\t} else if (length1 > length2 && length2 > length3) {\n\t\tarea\
    \ = length2 * cosine;\n\t} else if (length1 > length2 && length2 > length3) {\n\
    \t\tarea = length3 * cosine;\n\t} else {\n\t\tarea = -1\n\t}\n\n\treturn area\
    \ > 0 ? Math.round(area / Math.pow(10, 2)) : -1;\n}\n", "    let total = a * c\
    \ + b * b;\n    if (total > c) {\n        return -1;\n    } else if (total ===\
    \ c) {\n        return 0;\n    } else {\n        return Math.sqrt((c * (c - b\
    \ * b)) / total);\n    }\n}\n", "  let sum: number = a + b + c\n  return sum >\
    \ 3 * c ? Math.round(sum * 100) / 100 : -1\n}\n", "    if (a < b + c && b < a\
    \ + c && c < a + b) {\n        // Two solutions, use which ever one gives the\
    \ right answer:\n        // https://en.wikipedia.org/wiki/Triangle#Solutions\n\
    \        if (b + c <= a + c) {\n            // Solving for one side gives the\
    \ other side\n            return (b - a + c) / 2;\n        } else {\n        \
    \    return (b + c + a - b) / 2;\n        }\n    } else {\n        return -1;\n\
    \    }\n}\n</code>\n<|/ a |>\n<| a tags=math,geometry |>\nI've found that in Javascript\
    \ it is\n<code>", "\tlet area: number;\n\tif((a + b > c) && (a + c > b) && (b\
    \ + c > a)) {\n\t\tarea = (a + b + c) / 2;\n\t} else if((a + b > c) && (a + c\
    \ > b) && (b + c > a) && (a + b > c)) {\n\t\tarea = Math.sqrt(Math.pow(a + b,\
    \ 2) + Math.pow(c, 2));\n\t} else if((a + b > c) && (a + c > b) && (a + c > b)\
    \ && (a + b > c)) {\n\t\tarea = Math.sqrt(Math.pow(a + b, 2) + Math.pow(c, 2));\n\
    \t} else if((a + b > c) && (a + c > b) && (b + c > a) && (a + b > c)) {\n\t\t\
    area = Math.sqrt(Math.pow(a + b, 2) + Math.pow(c, 2));\n\t} else if((a + b > c)\
    \ && (a + c > b) && (a + b > c) && (a + c > b)) {\n\t\tarea = Math.sqrt(Math.pow(a\
    \ + b, 2) + Math.pow(c, 2));\n\t} else if((a + b > c) && (a + c > b) && (a + b\
    \ > c) && (a + c > b) && (a + b > c)) {\n\t\tarea = Math.sqrt(Math.pow(a + b,\
    \ 2) + Math.pow(c, 2));\n\t} else if((a + b > c) && (a + c > b) && (a + b > c)\
    \ && (a + c > b) && (a + b > c)) {\n\t\tarea = Math.sqrt(Math.pow(a + b, 2) +\
    \ Math.pow(c, 2));\n\t} else {\n\t\tarea = -1;\n\t}\n\treturn area;\n}\n\n", " \
    \   if (a <= 0 || b <= 0 || c <= 0) return -1\n    var sum1 = a + b\n    var sum2\
    \ = b + c\n    var sum3 = a + c\n    var sum4 = Math.sqrt(Math.pow(sum1, 2) +\
    \ Math.pow(sum2, 2) + Math.pow(sum3, 2))\n    return Math.round(sum4) / 2\n}\n",
  "    let s: number;\n    if (a + b < c) {\n        s = 0;\n    } else if (a + c\
    \ < b) {\n        s = 1;\n    } else {\n        s = 2;\n    }\n    return Math.sqrt(s\
    \ * (s - a) * (s - b) * (s - c));\n}\n", "    return Math.abs(a * c + b * d) -\
    \ Math.abs(b * c + a * d);\n}", "  let area: number = 0.0;\n  if (c > a && b >\
    \ a) {\n    if (c > b) {\n      if (b > a) {\n        area = Math.sqrt(a * b);\n\
    \      } else {\n        area = -1;\n      }\n    } else {\n      if (a > b) {\n\
    \        area = Math.sqrt(b * c);\n      } else {\n        area = -1;\n      }\n\
    \    }\n  } else {\n    if (a > b) {\n      if (a > c) {\n        area = Math.sqrt(a\
    \ * b);\n      } else {\n        area = -1;\n      }\n    } else {\n      if (b\
    \ > c) {\n        area = Math.sqrt(b * c);\n      } else {\n        area = -1;\n\
    \      }\n    }\n  }\n  return area;\n}\n", "    if (a + b > c) {\n        console.log(\"\
    a b and c must be greater than 0\")\n        return -1;\n    }\n    if (a + c\
    \ > b) {\n        console.log(\"a b and c must be greater than 0\")\n        return\
    \ -1;\n    }\n    if (b + c > a) {\n        console.log(\"b c and c must be greater\
    \ than a\")\n        return -1;\n    }\n    return Math.sqrt(Math.pow((a + b),\
    \ 2) + Math.pow((c + b), 2)) / 2;\n}\n", "  if (b < a && b < c) return (b - a\
    \ + b - c) / 2;\n  else if (a < c && a < b) return (c - a + c - b) / 2;\n  else\
    \ return -1;\n}\n", "    if (a === 0 || b === 0 || c === 0) {\n        return\
    \ 0;\n    } else if (a === b && b === c) {\n        return a;\n    } else {\n\
    \        return Math.sqrt(Math.pow(a, 2) +\n            Math.pow(b, 2) +\n   \
    \         Math.pow(c, 2));\n    }\n}\n", "    if (b > a || c > a || a > b) {\n\
    \        return -1;\n    }\n    let s = (a + b + c) / 2;\n    return (Math.sqrt(s\
    \ * (s - a) * (s - b) * (s - c))) / 2;\n}\n", "\treturn (a + b + c) / 2.0;\n}\n",
  "  const s = (a + b + c) / 2.0;\n  return Math.sqrt(s * (s - a) * (s - b) * (s -\
    \ c));\n}\n", "  if((a + b > c) && (a + c > b) && (b + c > a)){\n    return ((a\
    \ + b + c)/2);\n  }\n  return -1;\n}\n", "  const sine = Math.sin(Math.PI / 180.0\
    \ * a);\n  const cos = Math.cos(Math.PI / 180.0 * a);\n  const sine2 = Math.sin(Math.PI\
    \ / 180.0 * b);\n  const cos2 = Math.cos(Math.PI / 180.0 * b);\n  const sine3\
    \ = Math.sin(Math.PI / 180.0 * c);\n  const cos3 = Math.cos(Math.PI / 180.0 *\
    \ c);\n  let x = cos;\n  let y = sin;\n  let z = sine2;\n  let w = cos2;\n  let\
    \ x2 = (1.0 - cos) * (1.0 - cos2);\n  let y2 = (1.0 - cos) * (1.0 - cos3);\n \
    \ let z2 = (1.0 - cos2) * (1.0 - cos3);\n  while (Math.abs(z - z2) > 0.0000001)\
    \ {\n    if (z > z2) {\n      z -= 2 * z;\n    } else {\n      z += 2 * z;\n \
    \   }\n    x -= x2;\n    y -= y2;\n  }\n  let area = Math.sqrt(x * x + y * y)\
    \ * Math.sqrt(w * w + z * z);\n  return Math.round(area / Math.PI * 10000) / 10000;\n\
    }", "  if (b < 0 || c < 0 || a > c || b > c) {\n    return -1;\n  }\n  return\
    \ ((b - a) * (c - b)) / (2.0 * Math.sqrt(Math.pow(b, 2) + Math.pow(c, 2)));\n\
    }\n", "  const a2 = a * a;\n  const b2 = b * b;\n  const c2 = c * c;\n\n  return\
    \ Math.sqrt(a2 + b2 + c2) / 2;\n}\n", "  // Write your code here.\n  let side1\
    \ = (a+b+c) / 3\n  let side2 = (a+c+b) / 2\n  let side3 = (a+b+c) / 2\n  return\
    \ ((side1 * side2) * (side3 * side3)) === ((a+c+b) * (a+b+c)) ? Math.round(side1\
    \ * side2) : -1\n}", "  if (a + b + c === 0) {\n    return -1;\n  }\n  if (a <\
    \ 0 || b < 0 || c < 0) {\n    return -1;\n  }\n  if (a + b > c) {\n    return\
    \ -1;\n  }\n  if (a + c > b) {\n    return -1;\n  }\n  if (b + c > a) {\n    return\
    \ -1;\n  }\n  return 0.5 * Math.sqrt((a * a) + (b * b) + (c * c));\n}\n", "  \
    \  \n    // Defining the lengths of the sides of the triangle\n    const x1: number\
    \ = Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2));\n    const y1: number = Math.sqrt(Math.pow(a,\
    \ 2) + Math.pow(c, 2));\n    const x2: number = Math.sqrt(Math.pow(b, 2) + Math.pow(c,\
    \ 2));\n    const y2: number = Math.sqrt(Math.pow(b, 2) + Math.pow(a, 2));\n \
    \   \n    //Defining the length of the triangle\n    const length: number = Math.sqrt(Math.pow(x2,\
    \ 2) + Math.pow(y2, 2));\n    \n    //Calculating the area of the triangle\n \
    \   return length * 0.5;\n}\n", "    var area = 0;\n    \n    if (b >= c && a\
    \ >= c) {\n        area = (a * b) / Math.sqrt(a * a + b * b);\n    } else if (b\
    \ <= c && a >= c) {\n        area = (a * c) / Math.sqrt(a * a + b * b);\n    }\
    \ else if (a <= b && b >= c) {\n        area = (b * b) / Math.sqrt(a * a + b *\
    \ b);\n    }\n    \n    return area > 0 ? Math.round(area) : -1;\n}\n</code>\n\
    The above function is pretty much the code of the previous answer I gave, but\
    \ with the above changes, I got the following results when testing the above function:\n\
    <code>\n>>> triangle_area(3, 4, 5)\n6.0\n>>> triangle_area(1, 2, 10)\n6.0\n>>>\
    \ triangle_area(1, 10, 100)\n10.0\n</code>\nThe first two test cases are correct,\
    \ but the third case is incorrect, because we should be expecting a result of\
    \ 10 (area = 10 / sqrt(10*10+100*100)).\n<|/ a dscore=4 |>\n<| c |>\nThanks for\
    \ this. But what is 'e'? Can you please explain it?\n<|/ c |>\n<| c |>\n`e` is\
    \ the base of the logarithm, it is the base of the number `e`.\n<|/ c |>\n<| c\
    \ |>\nThe `e` base is actually a pretty nice property of logarithms.  It makes\
    \ the \"e\" base numbers easier to deal with.\n<|/ c |>\n<| a tags=geometry,computational-geometry\
    \ |>\nThis seems to be a well-known problem. Have you tried to google for \"Triangle\
    \ Area Java\"? Here's some relevant results:\n\nhttp://mathworld.wolfram.com/TriangleArea.html\n\
    http://www.algorithmist.com/index.php/Triangle_Area\n\nThe most popular Java library\
    \ (by Google) for this problem is Apache Commons Math:\n\nhttp://commons.apache.org/proper/commons-math/userguide/math/area.html\n\
    <|/ a dscore=2 |>\n<| a dscore=2 tags=geometry,computational-geometry |>\nOne\
    \ way is as follows - \n<code>\npublic double calculateArea(double[] sides) {\n\
    \    double area = 0;\n    for (int i = 0; i < sides.length; i++) {\n        area\
    \ += Math.sqrt(sides[i]*sides[i]);\n    }\n    area = 1/(Math.sqrt(area));\n \
    \   return area;\n}\n</code>\n<|/ a |>\n<| a dscore=1 |>\nThe simplest way is\
    \ as follows :\n<code>\npublic double getArea(double[] sides) {\n    double sum\
    \ = 0;\n    for(int i=0;i<sides.length;i++){\n        ", "    let numSides: number\
    \ = (b - a) * (c - b); // the length of the sides\n    if (numSides <= 0) {\n\
    \        console.log(`ERROR: The sum of two sides cannot be zero!`);\n       \
    \ return -1;\n    }\n    return Math.sqrt(numSides); // return the area of the\
    \ triangle rounded to two decimal points\n}\n", "\tlet area = 0;\n\tlet mina =\
    \ Math.min(a, b);\n\tlet maxa = Math.max(a, b);\n\tlet minb = Math.min(c, c);\n\
    \tlet maxb = Math.max(c, c);\n\t\n\tif (mina <= minb && maxa >= minb && mina >=\
    \ maxb) {\n\t\tarea = Math.abs((a + b + c) / 2);\n\t} else if (maxa >= minb &&\
    \ maxa >= minb && maxa >= maxb) {\n\t\tarea = Math.abs((a + b + c) / 2);\n\t}\
    \ else {\n\t\tarea = -1;\n\t}\n\treturn area;\n}\n", "  const s = (a+b+c) / 2;\n\
    \  const area = Math.abs(Math.sqrt(s * (s - a) * (s - b) * (s - c))) / 2;\n  return\
    \ area < 1 ? -1 : area;\n}\n", "    return Math.abs((a * a + b * b - c * c) /\
    \ (Math.pow(a, b) + Math.pow(b, 2)));\n}\n", "  let area: number = 0; //area of\
    \ the triangle\n\n  if (a + b > c) {\n    area = -1;\n  }\n  else {\n    if (b\
    \ > c) {\n      area = (a * b) / 2;\n    }\n    else if (a > b) {\n      area\
    \ = (b * c) / 2;\n    }\n    else {\n      area = (a * c) / 2;\n    }\n  }\n\n\
    \  return round(area);\n}\n", "  if (b === 0 || c === 0) {\n    return -1;\n \
    \ }\n  return (b * b) - 4 * a * c;\n}\n", "  \n    let triangle_side1: number;\n\
    \    let triangle_side2: number;\n    let triangle_side3: number;\n    \n    if(a\
    \ > b + c){\n        triangle_side1 = (b + c) - (a);\n        triangle_side2 =\
    \ (b + c) - (a);\n        triangle_side3 = a;\n    }\n    else {\n        triangle_side1\
    \ = (b + c) - (b);\n        triangle_side2 = a;\n        triangle_side3 = c;\n\
    \    }\n\n    let area1: number;\n    let area2: number;\n    let area3: number;\n\
    \n    if(triangle_side1 * triangle_side2 > triangle_side3 * triangle_side2){\n\
    \        area1 = (triangle_side1 * triangle_side2) + (triangle_side3 * triangle_side2);\n\
    \        area2 = triangle_side3;\n        area3 = triangle_side2;\n    }\n   \
    \ else {\n        area1 = (triangle_side1 * triangle_side2) + (triangle_side2\
    \ * triangle_side3);\n        area2 = triangle_side2;\n        area3 = triangle_side3;\n\
    \    }\n    return Math.round(area1 * 100)/100\n}\n", "  if (a == 0 && b == 0\
    \ && c == 0) {\n    return 0;\n  }\n  if (a + b > c) {\n    return -1;\n  }\n\
    \  if (a + c > b) {\n    return -1;\n  }\n  if (b + c > a) {\n    return -1;\n\
    \  }\n  return (b + c) / 2;\n}\n", "    const a1 = Math.abs(a - b)\n    const\
    \ b1 = Math.abs(b - c)\n    const c1 = Math.abs(c - a)\n    return Math.round((a1\
    \ * b1 + b1 * a1 + c1 * a1) / ((a1 + b1 + c1) * (b1 + c1 + a1)));\n}\n", "  let\
    \ sum: number = 0;\n  sum = a + b + c;\n  if (sum < c) {\n    sum = sum + c;\n\
    \  }\n  if (sum > c) {\n    sum = sum - c;\n  }\n  return (sum / 2).toFixed(2);\n\
    }\n", "    let area = 0;\n    if (a >= b && b >= c) {\n        area = Math.sqrt(a\
    \ * a + b * b + c * c);\n    }\n    else if (a >= c && c >= b) {\n        area\
    \ = Math.sqrt(a * a + c * c + b * b);\n    }\n    else if (b >= c && c >= a) {\n\
    \        area = Math.sqrt(b * b + c * c + a * a);\n    }\n    return area >= 0\
    \ ? '' + Math.round(area) : -1;\n}\n", "  let s: number\n  if (a === 0 || b ===\
    \ 0 || c === 0) return -1\n  s = a * b * c \n  if (s > a * a + b * b + c * c)\
    \ \n    return -1\n  return Math.round(s / (a + b + c))\n}", "\t\n\treturn (\n\
    \t\t(a + (b - c)) *\n\t\t(a + c - (b + c))\n\t) / 2;\n}\n", "  return (b + c)\
    \ - (Math.sqrt(a * a + b * b - c * c));\n}\n", "\tlet a_length = distance(a, b,\
    \ c);\n\tlet b_length = distance(b, a, c);\n\tlet c_length = distance(c, a, b);\n\
    \tif (a_length + b_length + c_length > 0) {\n\t\treturn Math.sqrt(a_length * b_length\
    \ * c_length);\n\t} else {\n\t\treturn -1;\n\t}\n}\n", "\t// The sum of the three\
    \ sides has to be greater than the third side\n\tlet area_from_sides: [number,\
    \ number, number] = [0, 0, 0];\n\tlet sum_of_sides = a + b + c;\n\tarea_from_sides[0]\
    \ = a;\n\tarea_from_sides[1] = b;\n\tarea_from_sides[2] = c;\n\tif (sum_of_sides\
    \ > area_from_sides[2]) {\n\t\treturn -1;\n\t}\n\t// The area is determined by\
    \ two diagonals.\n\tlet diagonal_1 = a + b + c;\n\tlet diagonal_2 = a + c - b;\n\
    \tif (diagonal_1 > diagonal_2) {\n\t\treturn diagonal_1 / 2;\n\t} else {\n\t\t\
    return diagonal_2 / 2;\n\t}\n}\n", "    const area: number = (a * b + c * c -\
    \ a * c) / (2 * a);\n    if (area < 0) {\n        return -1;\n    }\n    return\
    \ Math.round(Math.sqrt(area) * 100) / 100;\n}\n</code>\n<code>", "    var total:\
    \ number;\n    if (a + b < c) {\n        if (b + c < a) {\n            if (c +\
    \ a < b) {\n                total = a * b * c;\n            }\n            else\
    \ {\n                total = -1;\n            }\n        }\n        else {\n \
    \           total = -1;\n        }\n    }\n    else {\n        if (b + a < c)\
    \ {\n            if (c + b < a) {\n                total = a * b * c;\n      \
    \      }\n            else {\n                total = -1;\n            }\n   \
    \     }\n        else {\n            total = -1;\n        }\n    }\n    return\
    \ total;\n}\n</code>\n<|/ a tags=java |>\n<| c |>\nCould you explain the algorithm\
    \ behind this? I understand the math but the code is a bit confusing. :)\n<|/\
    \ c |>\n<| c |>\n`// Given: a, b, and c. Return the area of a triangle with sides\
    \ a b and", "\tif (a + b < c || a + c < b || b + c < a) {\n\t\treturn -1;\n\t\
    }\n\treturn Math.abs((Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2)) - Math.sqrt(Math.pow(c,\
    \ 2) + Math.pow(b, 2)) - Math.sqrt(Math.pow(c, 2) + Math.pow(a, 2))));\n}\n",
  "    if (a < 0 || b < 0 || c < 0) {\n        return -1;\n    }\n    const side1\
    \ = Math.pow(a + b, 2);\n    const side2 = Math.pow(c, 2);\n    const totalArea\
    \ = side1 + side2;\n    return Math.round(totalArea / 2);\n}\n", "    if (a +\
    \ b > c && a + c > b && b + c > a) {\n        return Math.abs((a + b + c) / 2);\n\
    \    }\n    return -1;\n}\n", "  let side1 = Math.abs(a) + Math.abs(b) + Math.abs(c)\n\
    \  let side2 = Math.abs(a + b) + Math.abs(c - a)\n  let side3 = Math.abs(a - b)\
    \ + Math.abs(b + c)\n  return Math.sqrt(Math.pow(side1, 2) + Math.pow(side2, 2)\
    \ + Math.pow(side3, 2)) / Math.sqrt(2)\n}\n", "  return triangle_angle_area(a,\
    \ b, c, 0, 0);\n}\n", "\tlet area1 = (a + b) * (a + c) - (b + c) * (a + b)\n\t\
    if (area1 === 0) return -1\n\tlet area2 = Math.sqrt(Math.pow((a + b), 2) + Math.pow((a\
    \ + c), 2))\n\treturn Math.round(area2 / 2)\n}\n", "  if (b !== c) {\n    // A\
    \ triangle doesn't make any sense, so just return -1.\n    return -1\n  }\n\n\
    \  if (a <= 0) {\n    // Triangle doesn't fit in a circle, return -1.\n    return\
    \ -1\n  }\n\n  if (a === b) {\n    // Triangle is equal, return zero.\n    return\
    \ 0\n  }\n\n  const area_triangle = a + (b * 2) + (c * 3)\n  return Math.round(area_triangle\
    \ * 100) / 100\n}\n", "  if (a < 0 || b < 0 || c < 0) return -1;\n\n  let sum\
    \ = a * b + c * b;\n  return Math.round(sum * 1000) / 1000;\n}\n", "\treturn (a+b+c)/2;\n\
    }\n", "\tconst area_a = Math.abs(area_of_triangle(a, b, c));\n\tconst area_b =\
    \ Math.abs(area_of_triangle(b, c, a));\n\tconst area_c = Math.abs(area_of_triangle(c,\
    \ a, b));\n\tif (area_a >= area_b && area_a >= area_c) {\n\t\treturn area_a;\n\
    \t} else if (area_b >= area_a && area_b >= area_c) {\n\t\treturn area_b;\n\t}\
    \ else {\n\t\treturn area_c;\n\t}\n}\n", "\tif((a + b > c) && (a + c > b) && (b\
    \ + c > a)){\n\t\treturn(a+b*c)/2;\n\t}\n\treturn(-1);\n}\n", "  // We could use\
    \ an early exit here but that would go \n  // against the idea of using an early\
    \ exit as a conditional \n  // for early exits.\n  if (Math.abs(a) < Math.abs(b))\
    \ {\n    if (Math.abs(b) < Math.abs(c)) {\n      if (b < c) \n        return 0;\n\
    \      else \n        return triangle_area(b, c);\n    } else {\n      if (a <\
    \ b) \n        return triangle_area(a, c);\n      else \n        return triangle_area(a,\
    \ c);\n    }\n  } else {\n    if (Math.abs(c) < Math.abs(b)) {\n      if (c <\
    \ b) \n        return 0;\n      else \n        return triangle_area(a, b);\n \
    \   } else {\n      if (b < c) \n        return triangle_area(a, b);\n      else\
    \ \n        return triangle_area(a, b);\n    }\n  }\n}\n", "  if (a + b > c) {\n\
    \    return -1;\n  } else if (a + c > b) {\n    return -1;\n  } else if (b + c\
    \ > a) {\n    return -1;\n  }\n  return Math.sqrt(Math.pow(a + b - c, 2) + Math.pow(b\
    \ + c - a, 2)) * 0.5;\n}\n", "  if (a == 0 || b == 0 || c == 0) {\n    return\
    \ -1;\n  }\n  return Math.sqrt(Math.pow((b - a), 2) + Math.pow((c - b), 2));\n\
    }\n", "  if (a == b && a == c) {\n    return 0\n  }\n  if (a > b && a > c) {\n\
    \    return (a+b+c) / 2\n  } else if (b > c && b > a) {\n    return (b+c+a) /\
    \ 2\n  } else if (c > a && c > b) {\n    return (c+a+b) / 2\n  } else {\n    return\
    \ -1\n  }\n}\n", "    let a = Math.abs(a);\n    let b = Math.abs(b);\n    let\
    \ c = Math.abs(c);\n    \n    if (a > b + c) return -1\n    else if (b > c + a)\
    \ return -1\n    else return Math.abs((a * b) - (b * c)) < 0.5 ? a : -1;\n}\n",
  "    var s = 0;\n    var t = s + a;\n    var u = t + b;\n    var v = u + c;\n  \
    \  if (t >= u && t >= v) {\n        s += 1;\n    } else if (u >= t && u >= v)\
    \ {\n        s += 1;\n    } else if (s >= v) {\n        return -1;\n    }\n  \
    \  return s / 2;\n}\n", "    const ab2 = Math.abs(a*b - b)\n    if (ab2 === 0)\
    \ {\n        return (a+b+c) / 2;\n    }\n    const bc2 = Math.abs(b*c - c)\n \
    \   if (bc2 === 0) {\n        return (b+c+a) / 2;\n    }\n    const ac2 = Math.abs(a*c\
    \ - c)\n    if (ac2 === 0) {\n        return (a+c+b) / 2;\n    }\n    return (a+b+c)\
    \ / 2;\n}\n", "\tlet x1: number;\n\tlet y1: number;\n\tlet x2: number;\n\tlet\
    \ y2: number;\n\tlet x3: number;\n\tlet y3: number;\n\tlet sum: number;\n\n\t\
    let area: number = 0;\n\tif (Math.abs(b - a) > Math.abs(c - b)) {\n\t\tx1 = a;\n\
    \t\tx2 = b;\n\t\tx3 = c;\n\t} else {\n\t\tx1 = b;\n\t\tx2 = c;\n\t\tx3 = a;\n\t\
    }\n\ty1 = (Math.sqrt(Math.pow((x2 - x1), 2) + Math.pow((y2 - y1), 2)) / 2);\n\t\
    y2 = (Math.sqrt(Math.pow((x3 - x2), 2) + Math.pow((y3 - y2), 2)) / 2);\n\tsum\
    \ = Math.pow((x2 - x1), 2) + Math.pow((y2 - y1), 2);\n\tarea = Math.abs(Math.acos(sum\
    \ / Math.sqrt(sum * sum - Math.pow(sum, 2))) / Math.PI) * 2;\n\treturn area;\n\
    }\n", "    let s = (b * b) - (4 * a * c);\n    if (s <= 0) {\n        return -1;\n\
    \    }\n    else return Math.round((s / (2 * (a + b + c))) * 1000) / 1000;\n}\n",
  "\tif (a === 0 || b === 0 || c === 0 || a === b || b === c || c === a) {\n\t\treturn\
    \ 0;\n\t}\n\n\tif (Math.abs(a - b) < Math.abs(b - a)) {\n\t\tif (Math.abs(a -\
    \ c) < Math.abs(c - a)) {\n\t\t\treturn Math.abs(a * b) / 2;\n\t\t}\n\t\treturn\
    \ Math.abs(a * c) / 2;\n\t}\n\treturn Math.abs(b * c) / 2;\n}\n", "\tconst s:\
    \ number = a + b + c;\n\tif (s <= 0) {\n\t\treturn -1;\n\t}\n\tlet area: number\
    \ = (a * b) / Math.sqrt(s * (s - a) * (s - b) * (s - c));\n\tif (area < 0) {\n\
    \t\tarea = area * -1;\n\t}\n\treturn Math.round(area * 100) / 100;\n}\n", "\t\
    const area = Math.abs(((b*b) - 4*a*c)/2);\n\treturn area > 0 ? area : -1;\n}",
  "    let sum = a;\n    sum += b;\n    sum += c;\n    sum = sum * sum;\n    return\
    \ Math.round(sum / 2.0);\n}\n", "    if (a > b + c || b > a + c || a > c + b)\
    \ {\n        return -1;\n    }\n    return Math.sqrt(a * a + b * b + c * c);\n\
    }\n", "    if (a === b + c) {\n        return 0;\n    }\n    return Math.abs((a\
    \ * a + b * b) - (a * a + c * c) - (b * b + c * c)) < 0.01 ?\n        a * b *\
    \ b : -1\n}\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThe algorithm is wrong if the\
    \ triangles don't form a right angle. You should always take the smallest of the\
    \ three areas to get a right angle. Otherwise a right angle would have 4 distinct\
    \ areas (of which only one is needed).\n<|/ c |>\n<| c |>\nI see you got my +1\
    \ for the math, but I find it a little misleading that the formula uses the *smallest*\
    \ of the three areas to determine whether it's a right angle (or the sum of the\
    \ three areas is the *largest*). The smallest area should be used because that's\
    \ how the math works (and it doesn't matter whether the smaller areas are actually\
    \ \"required\"). A right angle only needs two areas (but no area).\n<|/ c |>\n\
    <| c |>\nAgreed, I see your point but I believe a right angle should have two\
    \ distinct areas because you don't have any options of reducing the two area's\
    \ to one (so why would you be able to get rid of one of them?). The smallest area\
    \ is always the correct answer so long as the smaller areas don't make your triangle\
    \ look like a right angle. Even if that's not the case I don't see the reason\
    \ why the smallest area should be used as the answer.\n<|/ c |>\n<| c |>\nI agree\
    \ that there are cases where using the smallest area is appropriate, particularly\
    \ when the smaller areas are required and one needs only one area. However I don't\
    \ believe that this is an answer to OP's question. He already knows how to get\
    \ the area of a triangle, and he doesn't need to know how to check if the three\
    \ sides are a right angle. He just wants to know how to use his algorithm for\
    \ determining the area of three triangle sides.\n<|/ c |>\n<| a dscore=1 tags=geometry,math,java\
    \ |>\nThis can be done in single line of code without using any loops , if you\
    \ take this formula you will get the area of the triangle\n<code>\n double area\
    \ = Math.sqrt(Math.pow((Math.pow(length1,2)-Math.pow(length2,2)),2)+Math.pow((Math.pow(length2,2)-Math.pow(length3,2)),2));\n\
    </code>\n<|/ a |>\n<| a |>\nThis is my attempt (without loops) :\n<code>\nprivate\
    \ double triangle_area(int a, int b, int c){\n        return Math.max(Math.sqrt(Math.pow((",
  "  let s = a + b + c\n  if (s > a) \n    return -1\n  else if (s > b) \n    return\
    \ -1\n  else if (s > c) \n    return -1\n  else \n    return Math.sqrt(s * (s\
    \ - a) * (s - b) * (s - c))\n}\n", "  // Check if three sides form a valid triangle\n\
    \  if (a * a + b * b > c * c) {\n    return -1;\n  }\n\n  const sides = [\n  \
    \  Math.abs(a * b - c * c),\n    Math.abs(2 * a * b + 2 * a * c + c * c),\n  \
    \  Math.abs(a * b + 2 * a * c + b * b),\n  ];\n  return sides.reduce((acc, val)\
    \ => Math.sqrt(acc + val), 0);\n}\n", "    if (a <= 0 || b <= 0 || c <= 0) {\n\
    \        return -1;\n    }\n\n    if (a + b > c || a + c > b || b + c > a) {\n\
    \        return -1;\n    }\n\n    return (a + b + c) / 2.0;\n}\n", "\tif(b ===\
    \ 0 && c === 0) return 0;\n\tif(b === 0) return Math.abs(c);\n\tif(b === c) return\
    \ 0;\n\tif(b < c) return Math.sqrt(a * a + b * b - c * c);\n\treturn Math.sqrt(a\
    \ * a + c * c - b * b);\n}\n", "    if (b == 0)\n        return 0;\n    if (b\
    \ > c)\n        return -1;\n\n    return Math.sqrt(a * a + b * b - c * c);\n}\n",
  "\tvar area_triangle: number = (a * b * c) / 4;\n\tarea_triangle = Math.round(area_triangle\
    \ * 100) / 100;\n\treturn area_triangle;\n}\n", "    if (a <= 0 || b <= 0 || c\
    \ <= 0) {\n        return -1;\n    }\n    \n    let s = 0;\n    \n    if (a +\
    \ b >= c) {\n        s += a + b - c;\n    }\n    \n    if (b > c) {\n        s\
    \ += b - c;\n    }\n    \n    if (a + c >= b) {\n        s += a + c - b;\n   \
    \ }\n    \n    return Math.round(s * 100) / 100;\n}\n", "    let area_a = (a *\
    \ b) / c;\n    let area_b = a / c;\n    let area_c = (b * c) / a;\n    let area_sum\
    \ = area_a + area_b + area_c;\n    // check if triangle\n    if (area_sum >= c)\
    \ {\n        return area_sum;\n    }\n    else {\n        return -1;\n    }\n\
    }\n", "\tconst ab = a * b;\n\tconst ac = a * c;\n\tconst bc = b * c;\n\tif (ac\
    \ > bc || bc > ac) {\n\t\treturn -1\n\t}\n\treturn Math.round(ab / Math.sqrt(Math.pow(ac,\
    \ 2) + Math.pow(bc, 2)));\n}\n", "  if (a <= 0 || b <= 0 || c <= 0) return -1\n\
    \  return a * b * c / (Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(c, 2))\n}\n",
  "    // Check if all sides of triangle are equal\n    if (Math.abs(a * b - c) >=\
    \ 0){\n        // If three sides make valid triangle, add area of triangle to\
    \ answer\n        return Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(c,\
    \ 2));\n    }\n    // If three sides are not equal or three sides make invalid\
    \ triangle, return -1\n    return -1;\n}\n", "    let a2 = Math.pow(a, 2);\n \
    \   let b2 = Math.pow(b, 2);\n    let c2 = Math.pow(c, 2);\n    let s_1 = a2 +\
    \ b2;\n    let s_2 = a2 - b2;\n    let s_3 = c2 - a2;\n    let s_4 = b2 - c2;\n\
    \    let s_5 = s_1 * s_2;\n    let s_6 = s_1 * s_3;\n    let s_7 = s_4 * s_5;\n\
    \    let s_8 = s_3 * s_5;\n    let s_9 = s_2 * s_6;\n    let s_10 = s_2 * s_7;\n\
    \    let s_11 = s_8 * s_9;\n    let s_12 = s_7 * s_9;\n    let s_13 = s_10 * s_12;\n\
    \    return Math.sqrt(s_13).toFixed(2);\n}\n", "    if (a < 0 || b < 0 || c <\
    \ 0) return -1\n    if (a + b > c) return -1\n    if (a + c > b) return -1\n \
    \   if (b + c > a) return -1\n    let area = (a * b) + c\n    return roundTo2Decimals(area)\n\
    }\n\n", "\tif (a === 0 && b === 0 && c === 0) {\n\t\treturn 0;\n\t}\n\telse {\n\
    \t\tif (a === 0) {\n\t\t\treturn b + c;\n\t\t}\n\t\telse if (b === 0) {\n\t\t\t\
    return a + c;\n\t\t}\n\t\telse if (c === 0) {\n\t\t\treturn a + b;\n\t\t}\n\t\t\
    else {\n\t\t\treturn (a * b ) / c;\n\t\t}\n\t}\n}\n", "    let s: number = Math.sqrt(a*a\
    \ + b*b + c*c);\n    if (s > 0) {\n        return (s/2)\n    } else {\n      \
    \  return -1\n    }\n}\n", "  return Math.sqrt(Math.pow(b, 2) + (Math.pow(c, 2)));\n\
    }\n", "  if (a === 0 || b === 0 || c === 0 || a + b + c === 0) {\n    return -1;\n\
    \  }\n\n  return Math.abs((a * b + c) / Math.pow(a + b + c, .5));\n}\n", "   \
    \ const a1 = Math.abs(a);\n    const b1 = Math.abs(b);\n    const c1 = Math.abs(c);\n\
    \    if (a1 > b1 && b1 > c1) {\n        return a1 * b1 * c1;\n    }\n    if (a1\
    \ > c1 && c1 > b1) {\n        return a1 * c1 * b1;\n    }\n    if (b1 > c1 &&\
    \ c1 > a1) {\n        return b1 * c1 * a1;\n    }\n    return -1;\n}\n", "   \
    \ if (a > b) {\n        swap(a, b);\n    }\n    if (b > c) {\n        swap(b,\
    \ c);\n    }\n    if (a < c) {\n        swap(a, c);\n    }\n    var ab: number\
    \ = b - a; // length of hypotenuse\n    var ac: number = c - a; // length of opposite\
    \ side\n    var bc: number = c - b; // length of opposite side\n    var area:\
    \ number = ab * ac; // * bc\n    if (area > 0)\n    {\n        var d: number =\
    \ Math.sqrt(area / 2); // rounds down\n        return d;\n    }\n    else\n  \
    \  {\n        return -1;\n    }\n}\n</code>\n<|/ a dscore=0 |>\n<| a |>\nI tried\
    \ to find one function that does this and I came up with this:\n<code>\nvar area\
    \ = (x,y,z) => {\n    if(x>y && y>z) return 0;\n    if(x<y && y<z) return 0;\n\
    \    if(z<x && x<y) return 0;\n    if(z>x && x>y) return 0;\n    if(x>y) return\
    \ Math.sqrt( (z*(z+z))-(2*x*y));\n    if(y>z) return Math.sqrt( (z*(z+z))-(2*y*x));\n\
    \    if(x<y) return Math.sqrt( (z*(z+z))-(2*x*y));\n    if(z<x) return Math.sqrt(\
    \ (z*(z+z))-(2*z*y));\n    if(x>y) return Math.sqrt( (z*(z+z))-(2*x*y));\n   \
    \ if(y>z) return Math.sqrt( (z*(z+z))-(2*y*x));\n}\n</code>\n<|/ a dscore=0 tags=javascript,geometry,area,polygon,math\
    \ |>\n<| a tags=javascript,geometry,area,polygon,math |>\n<code>", "    let area:\
    \ number;\n    if (a + b > c && a * b + c > a * c + b) \n        area = (a * b\
    \ + c * 2) / (a + b + c);\n    else \n        area = -1; \n    return area; \n\
    }\n\n", "    return (a+b+c)/2\n}\n<|/ file dstars=0 |>\n<| c |>\nDo you have a\
    \ question?\n<|/ c |>\n<| c |>\nYes this code is for finding area of triangle\
    \ but i want to find area of triangle by finding the lengths of three sides \n\
    \ ", "    if (a < b + c) {\n        if (b < a + c) {\n            if (b < a +\
    \ a + c) {\n                return (b + c - a) * (b + c - a) / 2.0;\n        \
    \    }\n            return (b + c + b - a - c) * (b + c + b - a - c) / 2.0;\n\
    \        }\n        return (b + c + b - a + c) * (b + c + b - a + c) / 2.0;\n\
    \    }\n    if (b < a + a) {\n        if (a < b + a + a) {\n            return\
    \ 0;\n        }\n        return (a + a + b - a - a) * (a + a + b - a - a) / 2.0;\n\
    \    }\n    return (a + a + a + b - b) * (a + a + a + b - b) / 2.0;\n}\n", "\t\
    let s = (a+b+c) / 2\n\tif (s % 2 == 0) return (s / 2)\n\treturn -1\n}\n", "  let\
    \ s1: number;\n  let s2: number;\n  let s3: number;\n  s1 = Math.abs(a * b);\n\
    \  s2 = Math.abs(a * c);\n  s3 = Math.abs(b * c);\n  if (s1 <= s2 && s1 <= s3)\
    \ return Math.sqrt(s1 * s1 + s2 * s2);\n  else if (s2 <= s1 && s2 <= s3) return\
    \ Math.sqrt(s2 * s2 + s1 * s1);\n  else if (s3 <= s1 && s3 <= s2) return Math.sqrt(s3\
    \ * s3 + s1 * s1);\n  return -1;\n}\n", "    if (a + b < c && a + c < b && b +\
    \ c < a) return (a + b + c) / 2;\n    if (a < b && a < c && b < c) return Math.sqrt(a\
    \ * b + c * a);\n    if (a < b) return -1;\n    if (a < c) return -1;\n    if\
    \ (b < c) return -1;\n    return -1;\n}\n", "    const abs = Math.abs(b - c);\n\
    \    const bc = Math.abs(a - b);\n    const ac = Math.abs(a - c);\n\n    if (abs\
    \ > bc) {\n        if (abs > ac) {\n            return abs * abs;\n        } else\
    \ {\n            return abs * ac;\n        }\n    } else {\n        if (bc > ac)\
    \ {\n            return bc * bc;\n        } else {\n            return ac * ac;\n\
    \        }\n    }\n}\n", "    let area_side1: number\n    let area_side2: number\n\
    \    let area_side3: number\n\n    area_side1 = (Math.pow(a, 2) - Math.pow(b,\
    \ 2)) / Math.pow(a, 2)\n    area_side2 = (Math.pow(b, 2) - Math.pow(c, 2)) / Math.pow(b,\
    \ 2)\n    area_side3 = (Math.pow(c, 2) - Math.pow(a, 2)) / Math.pow(c, 2)\n\n\
    \    if (area_side1 + area_side2 + area_side3 === 0) {\n        return -1\n  \
    \  } else {\n        return Math.round(area_side1 * 100) / 100 + Math.round(area_side2\
    \ * 100) / 100 + Math.round(area_side3 * 100) / 100\n    }\n}\n", "    var ac\
    \ = a - c;\n    var ab = b - a;\n    var bc = c - b;\n    if (ac * bc * ab < 0)\n\
    \        return -1;\n    return ((ac * bc + ab * ac) * 0.5).toFixed(2);\n}\n",
  "\tif (a >= c || b >= c || a >= b) return -1;\n\tconst s = a + b + c;\n\treturn\
    \ s / Math.sqrt(s*(s-a)*(s-b)*(s-c));\n}\n", "  if (a + b <= c || a + c <= b ||\
    \ b + c <= a) {\n    return -1;\n  }\n  const area: number = (a + b + c) / 2;\n\
    \  return area > 0 ? Math.round(area * 100) / 100 : -1;\n}\n", "    if (a + b\
    \ <= c || a + c <= b || b + c <= a) return -1\n    return (a + b + c) / 2\n}\n",
  "\tlet s = (a + b + c) / 2\n\treturn ((s * s) - (s * b) - (s * c)) / (2 * a)\n}\n",
  "  var ab = Math.sqrt(a * a + b * b)\n  var bc = Math.sqrt(b * b + c * c)\n  if\
    \ (ab > bc) \n    return ab\n  else \n    return bc\n}\n", "  const s: number\
    \ = a * a + b * b + c * c\n  const roundVal = Math.round(s)\n  return roundVal\
    \ > Math.sqrt(s) ? roundVal : -1\n}\n", "\treturn Math.abs((Math.sqrt(Math.pow(b,\
    \ 2) + Math.pow(c, 2)) - Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2))));\n}\n",
  "\tlet area = 0;\n\t\n\tif(b >= c && a >= c){\n\t\tarea = (a*b) / c;\n\t\t\n\t}\
    \ else if(a >= b){\n\t\tarea = ((a - b) * (c + b)) / 2;\n\t\t\n\t} else {\n\t\t\
    area = ((c - a) * (c + a)) / 2;\n\t}\n\n\treturn Math.round(area*100)/100;\n}\n",
  "    if (a <= 0 || b <= 0 || c <= 0) {\n        return -1\n    }\n    if (a + b\
    \ > c || b + c > a || c + a > b) {\n        return -1\n    }\n    let s = a +\
    \ b + c\n    let area = Math.sqrt(s * (s - a) * (s - b) * (s - c))\n    if (area\
    \ === 0) {\n        return -1\n    }\n    return Math.floor(area * 100) / 100\n\
    }\n", "\t// Calculate the area of a triangle with a given side length.\n\t// \n\
    \t// This formula is adapted from http://www.mathpages.com/triangle/index.htm\n\
    \tconst s: number = a + b + c; // Seperate side lengths\n\tlet area: number =\
    \ s / 2; // Seperate area from sum of side lengths\n\tif (area < 0) {\n\t\t//\
    \ If area is negative then there is no valid triangle and we return -1\n\t\tarea\
    \ = -1\n\t}\n\tif (a > b && a > c) {\n\t\t// If side a's length is greater than\
    \ the sum of side b and side c \n\t\t// then a and b are considered the smaller\
    \ lengths of the sides\n\t\t// and so the area of the triangle is the sum of all\
    \ sides\n\t\tarea += a\n\t}\n\tif (b > c && b > a) {\n\t\t// If side b's length\
    \ is greater than the sum of side a and side c \n\t\t// then b and c are considered\
    \ the smaller lengths of the sides\n\t\t// and so the area of the triangle is\
    \ the sum of all sides\n\t\tarea += b\n\t}\n\tif (c > a && c > b) {\n\t\t// If\
    \ side c's length is greater than the sum of side a and side b \n\t\t// then c\
    \ and b are considered the smaller lengths of the sides\n\t\t// and so the area\
    \ of the triangle is the sum of all sides\n\t\tarea += c\n\t}\n\t// If the area\
    \ is greater than 1, then the triangle has at least 3 sides\n\t// and so the area\
    \ of the triangle is the sum of all sides\n\t// If the area is equal to 1, then\
    \ the triangle has only 2 sides and we return 1\n\tif (area > 1) {\n\t\tarea =\
    \ area\n\t} else {\n\t\tarea = -1\n\t}\n\treturn area\n}", "  if (a < 0 || b <\
    \ 0 || c < 0) {\n    return -1\n  }\n\n  let aSq = Math.pow(a, 2)\n  let bSq =\
    \ Math.pow(b, 2)\n  let cSq = Math.pow(c, 2)\n\n  // Check if the sum of the squares\
    \ is greater than the third side\n  if (aSq + bSq > cSq) {\n    return -2\n  }\n\
    \n  // If the sum of the squares is equal to the third side, return the area\n\
    \  if (aSq === cSq) {\n    return a * b\n  }\n\n  return -1\n}\n", "\tlet area:\
    \ number;\n\n\tif (a < 0 || b < 0 || c < 0 || a + b > c || a + c > b || b + c\
    \ > a) {\n\t\treturn -1;\n\t} else {\n\t\tarea = 0.5 * ((a * a + b * b + c * c)\
    \ - (a * b + b * a + c * c) - (a * c + b * a + c * b));\n\t}\n\treturn Math.round(area\
    \ / 2) / 2;\n}\n", "  if(a === b && a === c) return 0.0;\n  let s: number;\n \
    \ if(Math.abs(b) < Math.abs(c)) {\n    s = 0;\n  } else {\n    s = 1;\n  }\n \
    \ if((b * b) - (4 * a * c) < 0) {\n    s = -1;\n  }\n  return Math.sqrt(s * (s\
    \ - a) * (s - b) * (s - c));\n}\n</code>\n<|/ a tags=geometry,algorithm,javascript,math\
    \ |>\n<| c |>\nJust to clarify your example. triangle area is 6.07 for your input\
    \ which should be 6.\n<|/ c |>\n<| c |>\nI didn't read the question properly at\
    \ first and apologies for wasting your time. Thank you for the correction\n<|/\
    \ c |>\n<| c |>\nThis doesn't work for me. Triangle area is 6.07 for the input\
    \ `(3, 2, 7)` and should be 6.\n<|/ c |>\n<| c |>\nThe formula for `triangle_area`\
    \ is correct, it's your use case that doesn't work.\n<|/ c |>\n<| c |>\nYeah,\
    \ I got it now. It didn't work with a negative third side. Now it's fixed.\n<|/\
    \ c |>\n<| a dscore=5 |>\nThe standard definition of triangle area is\n\nand you\
    \ can easily find it on Wikipedia:\n\nThere are two ways to calculate this area:\n\
    \n<code>", "    var result = 0;\n    var min = (a, b, c);\n    var max = (a, b,\
    \ c);\n    while (min < max) {\n        min = Math.min(min[0], min[1], min[2]);\n\
    \        max = Math.max(max[0], max[1], max[2]);\n        result += Math.abs(min)\
    \ + Math.abs(max);\n    }\n    if (result <= 0) {\n        return -1;\n    }\n\
    \    return result;\n}\n", "  let a1 = Math.abs(a)\n  let a2 = Math.abs(b)\n \
    \ let a3 = Math.abs(c)\n  let a4 = a1 + a2 + a3\n  if (a4 > 0) {\n    return Math.round(a4\
    \ * 100) / 100\n  } else {\n    return -1\n  }\n}\n", "\treturn Math.abs((a *\
    \ b) / Math.pow((a + b + c), 1 / 3));\n}\n", "  const area_square = (a + b + c)\
    \ * 0.5;\n  return area_square < Math.sqrt((a + b) * (a + c) * (b + c)) ? area_square\
    \ : -1;\n}\n", "    if (a <= 0 || b <= 0 || c <= 0) {\n        return -1;\n  \
    \  }\n    if (a + b <= c) {\n        return 0;\n    }\n    if (a + c <= b) {\n\
    \        return 0;\n    }\n    if (b + c <= a) {\n        return 0;\n    }\n\n\
    \    let area_triangle: number;\n    let area_sides: number;\n\n    area_triangle\
    \ = round(a / b, b / c);\n    area_sides = round(a / c, c / b);\n    return area_triangle\
    \ + area_sides;\n}\n", "\tif (b > c || a > b) return -1\n\tconst s = (a + b +\
    \ c) / 2\n\treturn Math.abs(Math.sqrt(Math.pow(s - a, 2) + Math.pow(s - b, 2)))\n\
    }\n", "    if (a < c && b < c) {\n        return Math.sqrt(a * a + b * b + c *\
    \ c)\n    }\n    return -1\n}\n</cell>\n<text>\nExercise\nWrite a function called\
    \ triangle_area that returns the area of a triangle given three sides. \nIt should\
    \ take in any set of three sides.\nIf the triangle is valid, it should return\
    \ the area of the triangle rounded to 2 decimal points.\nOtherwise it should return\
    \ -1.\nExamples:\n>>> triangle_area(2, 3, 4)\n5.0\n>>> triangle_area(1, 3, 4)\n\
    -1\n>>> triangle_area(3, 5, 4)\n6.0\n>>> triangle_area(1, 2, 3)\n-1\n\n</text>\n\
    <cell>", "  if (a === 0 || b === 0 || c === 0) {\n    return 0;\n  }\n  const\
    \ area1 = Math.abs(a * b);\n  const area2 = Math.abs(a * c);\n  const area3 =\
    \ Math.abs(b * c);\n  const aPlusB = Math.min(a1, b1);\n  const aPlusC = Math.min(a2,\
    \ c1);\n  const bPlusC = Math.min(b2, c2);\n  const aMinusB = Math.max(a1, b1);\n\
    \  const aMinusC = Math.max(a2, c1);\n  const bMinusC = Math.max(b2, c2);\n  const\
    \ areaSum = (aPlusB + aMinusC) + (bPlusC + bMinusC);\n  const areaAbs = Math.min(areaSum,\
    \ (a1 + b1 + c1) / 2, (a2 + b2 + c2) / 2, (a1 + b2 + c2) / 2, (a1 + b1 + c2) /\
    \ 2);\n  return (areaAbs / Math.sqrt(areaSum * areaSum / 4));\n}\n", "    if (a\
    \ + b <= c || a + c <= b || b + c <= a) return -1\n    else return (a * b * c)\
    \ / Math.sqrt(a * b + c * c)\n}\n", "    let sum: number = a + b + c;\n    if\
    \ (sum > a * c) {\n        return -1;\n    } else if (sum < b * c) {\n       \
    \ return -1;\n    } else if (sum < c * a) {\n        return -1;\n    } else {\n\
    \        return Math.round((sum - (a + b + c)) / (2 * (a + b)));\n    }\n}\n",
  "    let s = a + b + c\n    if (s > a * a + b * b + c * c) {\n        return -1\n\
    \    }\n    let area: number = 0\n    let s = Math.sqrt(s * (s - a) * (s - b)\
    \ * (s - c))\n    area = Math.round(area / 2)\n    return area\n}\n", "  if (a\
    \ <= 0 || b <= 0 || c <= 0) {\n    return -1;\n  }\n  let s: number;\n  if (a\
    \ + b > c) {\n    s = (b * c) / a;\n  } else if (b + c > a) {\n    s = (a + b\
    \ * c) / b;\n  } else {\n    s = (a * b) / c;\n  }\n  return Math.round(a * 100)\
    \ / 100 + Math.round(s * 100) / 100;\n}\n", "    let area_side = a + b + c\n \
    \   if (area_side < 3) {\n        return -1;\n    }\n    let triangle_area = Math.sqrt(area_side\
    \ * (area_side * area_side - a * b - c)) / 2;\n    return triangle_area;\n}\n",
  "  if (a >= c || b >= c) {\n    return -1\n  }\n  if (a + b > c) {\n    return undefined\n\
    \  }\n  return a * b * 0.5;\n}\n", "  let s: number = (a+b+c)/2\n  let t: number\
    \ = (a+b+c)/2\n  if((s*(s-a)*(s-b)*(s-c)) < (t*(t-a)*(t-b)*(t-c))) return s\n\
    \  else return -1\n}\n", "    let s_1 = Math.abs(a) + Math.abs(b) + Math.abs(c)\n\
    \    if (s_1 == 0) {\n        return -1\n    }\n    let s_2 = Math.abs(a) - Math.abs(b)\
    \ - Math.abs(c)\n    if (s_2 == 0) {\n        return -1\n    }\n    let s_3 =\
    \ Math.abs(a) + Math.abs(b) - Math.abs(c)\n    if (s_3 == 0) {\n        return\
    \ -1\n    }\n    return s_1 / s_2 * s_3\n}\n", "    var area: number = ((a * b)\
    \ + ((c + a) * (b - c))) / 2;\n\n    return area > 0 ? area : -1;\n}\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=javascript,typescript,algorithm |>\n<code>", "  \
    \  if (a < b + c || b < a + c || c < a + b) return -1;\n    return (b - a) * (c\
    \ - b);\n}\n</code>\n<|/ a tags=javascript |>\n<| c |>\nThis doesn't answer OP's\
    \ question, it's just an alternative method\n<|/ c |>\n<| c |>\n: Yes I agree,\
    \ I didn't pay attention to the \"round to two decimal points\" part. But I added\
    \ that part to the answer anyway.\n<|/ c |>\n<| a dscore=0 tags=javascript |>\n\
    You could use a recursive function.\n<code>", "\tif (b * b > a * c) {\n\t\treturn\
    \ (b * b - a * c) / 2;\n\t} else {\n\t\treturn -1;\n\t}\n}\n", "  // Write your\
    \ code here\n  if (a + b + c < 18) {\n    return Math.round(Math.sqrt((Math.pow(a,\
    \ 2) * Math.pow(b, 2)) + (Math.pow(c, 2))));\n  } else {\n    return -1;\n  }\n\
    }\n", "\tif (a + b < c || b + c < a || c + a < b) return -1;\n\tlet s = (a + b\
    \ + c) / 2.0;\n\tlet area = 3.14 * Math.pow(s, 2);\n\treturn Math.round(area *\
    \ 10) / 10;\n}\n", "    if (a < 0 && b < 0 && c < 0)\n        return -1\n    \n\
    \    if (a + b < c || a + c < b || b + c < a)\n        return -1\n    \n    let\
    \ s = (a + b + c) / 2\n    \n    if (s > 0) {\n        let area = Math.sqrt(s\
    \ * (s - a) * (s - b) * (s - c))\n        return area\n    }\n    return -1\n\
    }\n", "\tconst area: number = Math.abs((a + b + c) / 2);\n\tlet valid_triangle\
    \ = false;\n\tlet triangle: number = 0;\n\t\n\tif (area >= a && area >= b && area\
    \ >= c) {\n\t\tvalid_triangle = true;\n\t\ttriangle = area / 3;\n\t} else if (area\
    \ >= a && area >= b) {\n\t\tvalid_triangle = true;\n\t\ttriangle = (a * b) / 3;\n\
    \t} else if (area >= a && area >= c) {\n\t\tvalid_triangle = true;\n\t\ttriangle\
    \ = (a * c) / 3;\n\t} else if (area >= b && area >= c) {\n\t\tvalid_triangle =\
    \ true;\n\t\ttriangle = (b * c) / 3;\n\t}\n\n\treturn valid_triangle ? Math.round(triangle*100)/100\
    \ : -1;\n}\n", "    let base: number = a * a + b * b + c * c\n    if (base > 4)\
    \ {\n        return -1\n    } else {\n        return (Math.sqrt(base) / 2) * 0.67\n\
    \    }\n}", "  return (b * b) - 4.0 * a * c;\n}\n", "    if (a + b > c && a+c\
    \ > b && b+c > a) {\n        return (a+b+c)/2\n    } else {\n        return -1\n\
    \    }\n}\n", "  // code here\n  let d = (b * b) - (4 * a * c)\n  if (d >= 0)\
    \ {\n    return Math.sqrt(d);\n  } else {\n    return -1;\n  }\n}\n", "    if\
    \ (a >= b && a >= c) {\n        return Math.sqrt(a * a + b * b + c * c)\n    }\
    \ else if (b >= a && b >= c) {\n        return Math.sqrt(b * b + a * a)\n    }\
    \ else {\n        return Math.sqrt(c * c + a * a)\n    }\n}\n</code>\n<|/ a tags=typescript\
    \ |>\n<| c |>\nWhile this code may answer the question, providing additional context\
    \ regarding how and/or why it solves the problem would improve the answer's long-term\
    \ value.\n<|/ c |>\n<| c |>\nI added some explanation and example code. Does this\
    \ help?\n<|/ c |>\n<| c |>\nThank you for this answer. Looks very helpful. My\
    \ only question is why do you write \"Math.sqrt(a * b * c)\" in \"area\" ? Does\
    \ that make you multiply everything by b? I'm still learning typescript and I\
    \ would like to know why this is done so I can apply the logic to other situations\
    \ in the future. Thanks again!\n<|/ c |>\n<| c |>\nIt works like this: You have\
    \ a triangle with sides a and b where a is greater than b. Then you find it's\
    \ hypotenuse which is sqrt(a^2 + b^2). Now you have an equation like x = sqrt(a^2\
    \ + b^2). When you plug that into your equation you get an area of the triangle\
    \ which is a^2 + b^2.\n<|/ c |>\n<| c |>\nI thought that was the entire point\
    \ of this exercise to figure out how to calculate the area of a triangle?\n<|/\
    \ c |>\n<| a |>\nThis was the solution I worked out for calculating the area of\
    \ a triangle using the formulae found here: http://www.mathopenref.com/trianglearea.html\
    \ \n<code>", "    if (a < b + c && a < c + b) return a * Math.sqrt(3) / 2;\n \
    \   if (a > b + c && a > c + b) return -1 * Math.sqrt(3) / 2;\n    if (b < a +\
    \ c && b < c + a) return Math.sqrt(3) * Math.sqrt(3) / 2;\n    if (b > a + c &&\
    \ b > c + a) return -1 * Math.sqrt(3) * Math.sqrt(3) / 2;\n    if (c < a + b &&\
    \ c < b + a) return Math.sqrt(3) / 2;\n    if (c > a + b && c > b + a) return\
    \ -1 * Math.sqrt(3) / 2;\n    return -1;\n}\n", "\tlet s: number = a + b + c;\n\
    \tif (s <= 0) {\n\t\treturn -1;\n\t}\n\tlet u: number = Math.sqrt(s);\n\tlet area:\
    \ number = a * u;\n\tif (area > b) {\n\t\tarea -= b * Math.sqrt(s / a);\n\t}\n\
    \tif (area > c) {\n\t\tarea -= c * Math.sqrt(s / b);\n\t}\n\treturn area / u;\n\
    }\n", "    // Write your code here\n    if (a < 0 || b < 0 || c < 0 || a + b +\
    \ c != 10) {\n        return -1;\n    }\n    const triangleArea: number = Math.sqrt(a\
    \ * b * c / 2);\n    return Math.ceil(triangleArea * 100) / 100;\n}\n", "  const\
    \ s = a + b + c\n  if (s % 2 == 0) {\n    return Math.sqrt(s * (s - a) * (s -\
    \ b) * (s - c))\n  } else {\n    return -1\n  }\n}\n", "    var suma: number =\
    \ a + b + c;\n    return ((suma > a) ? -1 : ((suma > b) ? -1 : ((suma > c) ? suma\
    \ : -1)));\n}\n", "  return triangle_perimeter(a, b, c) > 0 ? triangle_perimeter(a,\
    \ b, c) : -1;\n}\n", "    var abs = Math.abs(a);\n    var ac = Math.abs(c);\n\
    \    var bc = Math.abs(b);\n    if (abs > ac) {\n        return bc;\n    } else\
    \ if (abs < bc) {\n        return ac;\n    } else {\n        return abs;\n   \
    \ }\n}\n", "\t// Calculate the hypotenuse of a triangle with sides a,b,c\n\t//\
    \ We assume that the hypotenuse of a right triangle is the hypotenuse\n\t// of\
    \ the adjacent side in the other triangle (c side)\n\tlet hypotenuse = Math.sqrt(Math.pow(a,\
    \ 2) + Math.pow(b, 2));\n\n\t// Check if the sum of two sides is greater than\
    \ the third side\n\t// if so, we are dealing with a right triangle\n\tif (a +\
    \ b > c) {\n\t\t// Calculate the area of the triangle by dividing the hypotenuse\
    \ by the adjacent side\n\t\treturn hypotenuse / a;\n\t} else {\n\t\treturn -1;\n\
    \t}\n}\n", "  let s = (a + b + c) / 2\n  return s >= Math.max(a, b, c) ? s : -1\n\
    }\n", "  if (a < b + c || a > b + c || b < a + c || b > a + c) {\n    return -1;\n\
    \  }\n\n  return Math.sqrt(Math.pow(b, 2) + Math.pow(c, 2));\n}\n", "  var validTriangle:\
    \ boolean = false;\n\n  var side1: number;\n  var side2: number;\n  var side3:\
    \ number;\n\n  side1 = b * b - 4 * a * c;\n  side2 = Math.sqrt(Math.pow(b + c,\
    \ 2) - (4 * a * b));\n  side3 = Math.sqrt(Math.pow(b, 2) + (4 * a * c));\n  var\
    \ validTriangle: boolean = (side1 > (side2 + side3));\n\n  if (validTriangle)\
    \ {\n    return Math.round((side1 + side2 + side3) / 2);\n  } else {\n    return\
    \ -1;\n  }\n}\n", "\tlet area_1: number = Math.sqrt(a * a + b * b + c * c);\n\t\
    let area_2: number = a * b + c * c;\n\t\n\tlet area_3: number = Math.sqrt(area_1\
    \ * area_1);\n\t\n\treturn area_2 > area_3 ? area_1 / area_2 : 0;\n}\n", "  if\
    \ (a === 0 && b === 0 && c === 0) return 0;\n  return Math.sqrt(a * a + b * b\
    \ + c * c);\n}\n", "\tlet result = 0;\n\tlet square_of_a = Math.pow(a, 2);\n\t\
    let square_of_b = Math.pow(b, 2);\n\tlet square_of_c = Math.pow(c, 2);\n\tlet\
    \ square_of_result = square_of_a + square_of_b + square_of_c;\n\tif (square_of_result\
    \ >= square_of_c) {\n\t\tresult = square_of_result / 2;\n\t} else if (square_of_result\
    \ < square_of_c) {\n\t\tresult = -1;\n\t}\n\treturn result;\n}\n", "    const\
    \ s = (a + b + c) / 2;\n    return (a < b + c ? Math.abs(s - a) : Math.abs(s -\
    \ b)) * (a < c + b ? Math.abs(s - c) : Math.abs(s - b));\n}\n", "\tif (a + b >\
    \ c && a + c > b && b + c > a)\n\t\treturn (a * b * c) / Math.sqrt(a * a + b *\
    \ b + c * c);\n\treturn -1;\n}\n", "  if (a < b) {\n    if (b < c) {\n      return\
    \ (a + b + c) / 2;\n    }\n    return -1;\n  }\n  if (b < c) {\n    if (a < c)\
    \ {\n      return (a + b + c) / 2;\n    }\n    return -1;\n  }\n  return (a +\
    \ b + c) / 2;\n}\n", "  const s = a + b + c\n  if (s > area) {\n    return -1\n\
    \  }\n  const area = Math.sqrt(s * s * (s - a) * (s - b) * (s - c))\n  return\
    \ Math.round(area / 10) / 10\n}\n", "\tif (a + b > c && a + c > b && b + c > a)\
    \ {\n\t\treturn ((a + b + c) / 2) * (Math.sqrt(Math.pow(a - b, 2) + Math.pow(b\
    \ - c, 2)));\n\t} else {\n\t\treturn -1;\n\t}\n}\n", "  // Make sure that a <\
    \ b\n  if (a < b) {\n    swap(a, b);\n  }\n\n  // Make sure b < c\n  if (b < c)\
    \ {\n    swap(b, c);\n  }\n\n  // Find the area of the triangle\n  let s = (a\
    \ + b + c) / 2;\n  let area = Math.abs(Math.sin(Math.PI / 4 - Math.acos(s / Math.sqrt(s)\
    \ * Math.sqrt(s / 2))));\n\n  // Round the area to 2 decimal places if it is a\
    \ valid triangle \n  // Otherwise, return -1\n  if (area >= 0.0 && area <= 1.0)\
    \ {\n    return area;\n  } else {\n    return -1;\n  }\n}\n", "    let area: number\
    \ = (a+b+c)/2\n    if (area >= a && area >= b && area >= c) {\n        return\
    \ area\n    } else {\n        return -1\n    }\n}\n", "    let area_valid = false;\n\
    \    if (a + b > c && a + c > b && b + c > a) {\n        area_valid = true;\n\
    \    }\n    return area_valid ? Math.sqrt(Math.pow((b - a), 2) + Math.pow((c -\
    \ b), 2)) : 0;\n}\n", "\tlet area = 0;\n\n\tif (a + b <= c) {\n\t\tarea = a *\
    \ b * 0.5; //Two side of the triangle are less than or equal to third side\n\t\
    } else {\n\t\tarea = -1; //Three side of the triangle are less than or equal to\
    \ third side\n\t}\n\t\n\treturn Math.round(area / Math.PI * 100) / 100;\n}\n",
  "    return Math.abs(a * b - c * c);\n}\n", "    var area_a_b = sides_area(a, b);\n\
    \    var area_c_b = sides_area(c, b);\n    var area_ab_c = sides_area(a, b, c);\n\
    \    if (area_a_b > area_c_b) {\n        return area_a_b;\n    }\n    if (area_c_b\
    \ > area_ab_c) {\n        return area_c_b;\n    }\n    if (area_a_b == area_c_b\
    \ && a_c != 0) {\n        return area_ab_c;\n    }\n    return -1;\n}\n", "  \
    \  let s = (a + b + c) / 2\n    let isValid = true\n\n    if (s > 0) {\n     \
    \   let area = Math.abs(Math.sqrt(s * (s - a) * (s - b) * (s - c)))\n        return\
    \ area > 0.999 ? area : -1\n    } else {\n        return -1\n    }\n}", "    let\
    \ area_sides: number = 0;\n    if (a + b > c) {\n        area_sides = Math.round(a\
    \ * b / Math.sqrt((a + b) * (c - a) * (b - c)));\n    } else {\n        area_sides\
    \ = Math.round(a * c / Math.sqrt((a + b) * (c - a) * (b - c)));\n    }\n    return\
    \ area_sides;\n}\n", "  if((a + b > c) && (a + c > b) && (b + c > a)) {\n    return\
    \ (a * b * c) / 2;\n  }\n  return -1;\n}\n</code>\n<|/ a dscore=2 tags=algorithm,geometry,javascript,trigonometry\
    \ |>\n<| c |>\nWhy not `Math.pow(Math.pow(a,2) + Math.pow(b,2), 0.5)` ?\n<|/ c\
    \ |>\n<| c |>\n`Math.pow` has some problems with `NaN`, for instance for `Math.pow(null,\
    \ 4)`. The `if` condition can be avoided.\n<|/ c |>\n<| c |>\nI didn't knew that\
    \ `Math.pow` had such problems. Thanks!\n<|/ c |>\n<| c |>\n`pow()` is generally\
    \ a bad idea, but in this case it's actually the best approach.\n<|/ c |>\n<|\
    \ a dscore=2 tags=algorithm,geometry,javascript,trigonometry |>\nHere's a pretty\
    \ simple algorithm that can tell you the area of a triangle based on three points:\n\
    <code>", "  const area_a = Math.abs(a * b) - Math.abs(2 * c + a) * Math.abs(a)\n\
    \  const area_b = Math.abs(a * b) - Math.abs(2 * c + b) * Math.abs(b)\n  const\
    \ area_c = Math.abs(a * b) - Math.abs(2 * c + c) * Math.abs(c)\n  return area_a\
    \ > area_b ? area_a : area_c < area_b ? area_c : -1\n}\n", "    let area = 0;\n\
    \    // Check if all three sides are equal\n    if (a == b && a == c) return (Math.sqrt(a\
    \ * b));\n\n    // Check if three sides are equal\n    else if (a == b) return\
    \ (Math.sqrt(a * b));\n\n    // Check if two sides are equal\n    else if (a ==\
    \ c) return (Math.sqrt(a * c));\n\n    // Check if a is greater than b\n    else\
    \ if (b > a) return (Math.sqrt((b * b) - (a * a)));\n\n    // Check if b is greater\
    \ than c\n    else if (b > c) return (Math.sqrt((b * b) - (c * c)));\n\n    //\
    \ Check if c is greater than a\n    else if (c > a) return (Math.sqrt((c * c)\
    \ - (a * a)));\n\n    // Check if a is greater than c\n    else if (a > c) return\
    \ (Math.sqrt((a * a) - (c * c)));\n\n    // If all three sides are equal\n   \
    \ // return (Math.sqrt((a * a) + (b * b) + (c * c)));\n    // Otherwise return\
    \ -1\n    else {\n        return -1;\n    }\n}\n</code>\n<|/ a dscore=0 |>\n<|\
    \ a dscore=0 |>\nI know this is old but thought I'd offer an update as I've just\
    \ spent some time working through this and thought I'd post my findings and potential\
    \ solutions.\nI realise this probably doesn't address your question directly,\
    \ but it's worth pointing out that my solution doesn't use recursion (although\
    \ that could be changed if required).\n<code>", "    const s = (a + b + c) / 2;\n\
    \    if (a >= b + c) {\n        return s;\n    } else if (b >= c + a) {\n    \
    \    return 2 * s;\n    } else {\n        return -1\n    }\n}\n", "  if (a > b\
    \ && a > c) {\n    return (a+b+c) / 2\n  } else if (b > c && b > a) {\n    return\
    \ (b+c+a) / 2\n  } else if (c > a && c > b) {\n    return (c+a+b) / 2\n  } else\
    \ {\n    return -1\n  }\n}\n", "  return Math.abs(a * b * c) / Math.sqrt(Math.pow(a,\
    \ 2) + Math.pow(b, 2));\n}\n", "    let l1: number = Math.sqrt(Math.pow(a, 2)\
    \ + Math.pow(b, 2));\n    let l2: number = Math.sqrt(Math.pow(a, 2) + Math.pow(c,\
    \ 2));\n    if (a != 0 && b != 0 && c != 0) {\n        l1 = Math.sqrt(Math.pow(a,\
    \ 2) + Math.pow(b, 2));\n        l2 = Math.sqrt(Math.pow(a, 2) + Math.pow(c, 2));\n\
    \    }\n    if (l1 > l2) {\n        return Math.round((l1 * l1) / 2);\n    } else\
    \ if (l2 > l1) {\n        return Math.round((l2 * l2) / 2);\n    } else {\n  \
    \      return -1;\n    }\n}\n", "\treturn (a * b * c) / Math.sqrt(a * a + b *\
    \ b + c * c)\n}\n", "\tlet s = a + b + c\n\tif (s > a * a + b * b + c * c) {\n\
    \t\treturn -1;\n\t}\n\treturn Math.sqrt(s * (s - a) * (s - b) * (s - c))\n}\n",
  "  let s = a + b + c\n  return Math.abs((Math.sqrt(s * (s - a) * (s - b) * (s -\
    \ c)) % 10) / 10)\n}\n", "    if (b == c) {\n        //If the two sides are equal,\
    \ return 0 since this means the triangle is equilateral.\n        return 0;\n\
    \    }\n    else if (a > b && a > c) {\n        //If the first side is greater,\
    \ the second is greater and the third is greater, the triangle is valid.\n   \
    \     return ((a + b + c) / 2);\n    }\n    else if (b > a && b > c) {\n     \
    \   //If the second side is greater, the third is greater and the first is greater,\
    \ the triangle is valid.\n        return ((b + c + a) / 2);\n    }\n    else if\
    \ (c > a && c > b) {\n        //If the third side is greater, the second is greater\
    \ and the first is greater, the triangle is valid.\n        return ((a + b + c)\
    \ / 2);\n    }\n    return -1;\n}\n", "    // Check that the triangle is valid\n\
    \    if (a > b && a > c && b > c) {\n        return (a * b + c) / 2\n    }\n \
    \   return -1\n}\n", "    if (b < c || a < b) \n        return -1;\n    var ad\
    \ = b - a;\n    var bc = c - b;\n    var ac = a * c - b * b;\n    if (ac > 0)\n\
    \        return ad / ac;\n    else if (bc < 0)\n        return ac / bc;\n    else\n\
    \        return 0;\n}\n", "    var area = 0;\n    \n    // Make sure the three\
    \ sides add up to the given sum\n    if (a + b > c) {\n        area = -1;\n  \
    \  } else {\n        // If the sum of the three sides is greater than the third\
    \ side,\n        // then the triangle is valid and return its area\n        if\
    \ ((a + b + c) > a + c) {\n            area = a * c / 2;\n        } else {\n \
    \           // If the sum of the three sides is equal to the third side,\n   \
    \         // then the triangle is valid and return its area\n            if (a\
    \ == c) {\n                area = 0;\n            } else {\n                area\
    \ = -1\n            }\n        }\n    }\n\n    return Math.round(area * 100) /\
    \ 100;\n}\n", "    const ab = a * b\n    const ac = a * c\n    const bc = b *\
    \ c\n    return Math.abs((ac - ab + bc) / 2)\n}\n", "    if (a >= b && b >= c)\
    \ {\n        if (a + b > c) {\n            return (b + c) / 2\n        } else\
    \ {\n            return a + c\n        }\n    } else {\n        return -1\n  \
    \  }\n}\n", "    if (a < b + c && a + c > b + c) {\n        return (b + c - a)\
    \ * Math.acos(a / Math.sqrt(a * a + b * b + c * c));\n    } else {\n        return\
    \ -1;\n    }\n}\n", "    if (a > c || c > b) return -1\n    const area_one = a\
    \ + b + c\n    const area_one_sqrt = Math.sqrt(area_one)\n    const area_two =\
    \ (a + c) * (b + c)\n    const area_two_sqrt = Math.sqrt(area_two)\n    const\
    \ area_three = (a + b) * (c + b)\n    const area_three_sqr = Math.sqrt(area_three)\n\
    \    \n    const area_four = Math.sqrt(area_one_sqrt * area_three_sqr)\n    const\
    \ area_four_rounded = Math.round(area_four * 100) / 100\n    if (area_one_sqrt\
    \ <= area_two_sqrt && area_one_sqrt <= area_three_sqrt && area_one_sqrt <= area_four_rounded)\
    \ return area_one_sqrt * area_one_sqrt\n    return -1\n}\n</code>\n<|/ a dscore=3\
    \ |>\n<| a |>\nMy solution to the question \"Given the length of three sides of\
    \ a triangle (L1, L2, L3), output the area of the triangle in double precision.\"\
    \ \nMy solution is in python \n<code>\nfrom math import sqrt\n\ndef triangle_area(a,b,c):\n\
    \    area_one = a+b+c\n    area_one_sqrt = sqrt(area_one)\n    area_two = (a+c)*(b+c)\n\
    \    area_two_sqrt = sqrt(area_two)\n    area_three = (a+b)*(c+b)\n    area_three_sqr\
    \ = sqrt(area_three)\n    area_four = area_one_sqrt * area_three_sqr\n    area_four_rounded\
    \ = round(area_four*100)/100\n    if (area_one_sqrt <= area_two_sqrt and area_one_sqrt\
    \ <= area_three_sqrt and area_one_sqrt <= area_four_rounded):\n        return\
    \ area_one_sqrt * area_one_sqrt\n    else:\n        return -1\n\nprint triangle_area(3,4,5)\n\
    </code>\n<|/ a tags=python dscore=3 |>\n<| a dscore=3 |>\nI wanted to try and\
    \ keep it simple and clean in python and came up with this solution:\n<code>\n\
    # Calculates the area of a triangle with 3 sides.\ndef triangleArea(side1,side2,side3):\n\
    \  totalArea = side1*side2 + side2*side3 + side3*side1\n  totalArea = float(totalArea)\n\
    \  totalArea = float(totalArea)/2\n  totalArea = float(totalArea)\n  return totalArea\n\
    </code>\n<|/ a tags=python |>\n<| a tags=python |>\nHere's an answer using Python\
    \ 3.6's decimal module:\n<code>\n", "  const deltaA = Math.abs(b - a) \n  const\
    \ deltaB = Math.abs(c - b) \n  const deltaC = Math.abs(a - c) \n  if (deltaA <\
    \ deltaB &&  deltaA < deltaC) return deltaA\n  if (deltaB < deltaC) return deltaB\n\
    \  return deltaC\n}\n", "\tif (b === c) {\n\t\treturn (a * b) / 2;\n\t}\n\n\t\
    if (a === b) {\n\t\treturn c;\n\t}\n\n\tif (a === c) {\n\t\treturn 0;\n\t}\n\n\
    \tif (Math.abs(a - b) > Math.abs(b - a)) {\n\t\tlet temp = a;\n\t\ta = b;\n\t\t\
    b = temp;\n\t\ttemp = c;\n\t\tc = temp;\n\t}\n\n\tif (Math.abs(b - a) > Math.abs(c\
    \ - b)) {\n\t\tlet temp = b;\n\t\tb = c;\n\t\tc = temp;\n\t\ttemp = a;\n\t\ta\
    \ = temp;\n\t}\n\n\tif (a === b) {\n\t\treturn 0;\n\t}\n\n\tif (b === c) {\n\t\
    \treturn 0;\n\t}\n\n\tlet s = (a + b + c) / 2;\n\tlet area = Math.abs(Math.sqrt(s\
    \ * (s - a) * (s - b) * (s - c)));\n\n\tif (area === 0) {\n\t\treturn -1;\n\t\
    }\n\n\treturn Math.round(area / 1000);\n}\n", "\tif (a === 0 && b === 0 && c ===\
    \ 0) {\n\t\treturn 0;\n\t}\n\tif (a === 0) {\n\t\treturn c / b;\n\t}\n\tif (b\
    \ === 0) {\n\t\treturn -(a * c / b);\n\t}\n\treturn ((a * b * c) / Math.sqrt(a\
    \ * a + b * b + c * c));\n}\n", "\tlet area: number;\n\t\n\tif (isTriangle(a,\
    \ b, c)) {\n\t\tarea = Math.abs((a+b+c)/2);\n\t}\n\telse {\n\t\tarea = -1;\n\t\
    }\n\treturn area;\n}\n", "  if(a + b > c){\n    return Math.abs(a - c) * 0.5;\n\
    \  }\n  else if(a + c > b){\n    return Math.abs(b - c) * 0.5;\n  }\n  else {\n\
    \    return Math.abs(c - b) * 0.5;\n  }\n}\n", "    return Math.abs(a * c + b\
    \ * d);\n}\n", "  if (triangle_validate(a ,b ,c)) {\n    return Math.round(Math.abs((a\
    \ * b) - (c * a))) / 2.0;\n  } else {\n    return -1;\n  }\n}\n", "\tif (b ===\
    \ 0)\n\t\treturn 0;\n\treturn Math.abs(a * b * c / Math.pow((b + c), .5));\n}\n",
  "\tif (a + b > c) return -1;\n\tif (a + c > b) return -1;\n\tif (b + c > a) return\
    \ -1;\n\treturn (a * b + c * c) / 2;\n}\n", "  const ab = a - b;\n  const bc =\
    \ b - c;\n  const ac = a - c;\n  return ab > bc ? ((ab + bc) / 2) : ((bc + ac)\
    \ / 2);\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
