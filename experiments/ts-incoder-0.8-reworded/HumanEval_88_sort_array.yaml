name: HumanEval_88_sort_array
language: ts
prompt: "//Given an array of non-negative integers, return a cots of the given array\
  \ after sorting,\n// you will sort the given array in ascending order if the sum(\
  \ first index value, last index value) is odd,\n// or sort it in descending order\
  \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
  \ change the given array.\n// Examples:\n// >>> sort_array([])\n// []\n// >>> sort_array([5])\n\
  // [5]\n// >>> sort_array([2, 4, 3, 0, 1, 5])\n// [0, 1, 2, 3, 4, 5]\n// >>> sort_array([2,\
  \ 4, 3, 0, 1, 5, 6])\n// [6, 5, 4, 3, 2, 1, 0]\nfunction sort_array(array: number[]):\
  \ number[] {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
  \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3,\
  \ 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5,\
  \ 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n \
  \ assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n\
  \  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();"
completions: ["  return array.sort((a, b) => {\n    if (a > b) {\n      return 1\n\
    \    } else if (a < b) {\n      return -1\n    } else {\n      return 0\n    }\n\
    \  })\n}\n", "\tlet result: number[] = array.slice();\n\tif (result.length ===\
    \ 0) {\n\t\treturn array;\n\t}\n\tlet sum: number = result.reduce((prev, next)\
    \ => prev + next);\n\tif (sum % 2 === 1) {\n\t\tresult.sort((prev, next) => next\
    \ - prev);\n\t} else {\n\t\tresult.sort((prev, next) => prev - next);\n\t}\n\t\
    return result;\n}\n", "  const sum = (array[0], array[array.length - 1]);\n  const\
    \ odd = sum % 2 === 1;\n  return odd ? sort_array_reversed(array) : sort_array_ascending(array);\n\
    }\n", "  if (array.length <= 1) {\n    return array;\n  }\n\n  let sumFirst =\
    \ 0;\n  let sumLast = 0;\n\n  for (let i = 0; i < array.length - 1; i++) {\n \
    \   sumFirst += array[i];\n  }\n\n  for (let i = array.length - 1; i >= 0; i--)\
    \ {\n    sumLast += array[i];\n  }\n\n  if (sumLast % 2 === 1) {\n    array.sort((a,\
    \ b) => a - b);\n  } else {\n    array.sort((a, b) => b - a);\n  }\n\n  return\
    \ array;\n}\n", "  let results: number[] = [];\n  let sum = 0;\n  for (let i =\
    \ 0; i < array.length; i++) {\n    sum += array[i];\n    results.push(sum);\n\
    \  }\n  if (sum % 2 === 0) {\n    results.sort((a, b) => a - b);\n  } else {\n\
    \    results.sort((a, b) => b - a);\n  }\n  return results;\n}\n", "  let result:\
    \ number[] = [];\n  let sum = 0;\n\n  for (let i = 0; i < array.length - 1; i++)\
    \ {\n    sum += array[i];\n  }\n\n  if (sum % 2 === 0) {\n    result.sort((a,\
    \ b) => {\n      return a - b;\n    });\n  } else {\n    result.sort((a, b) =>\
    \ {\n      return b - a;\n    });\n  }\n\n  for (let i = 0; i < array.length;\
    \ i++) {\n    result[i] = array[i];\n  }\n\n  return result;\n}\n", "  if (array.length\
    \ < 2) {\n    return array;\n  }\n\n  const sumEven = array.reduce((sum, value)\
    \ => sum + value, 0);\n  const sumOdd = array.reduce((sum, value) => sum + value,\
    \ 0) + (array.length % 2 === 0 ? 0 : 1);\n  const even = array\n    .filter((value,\
    \ index) => index < array.length / 2)\n    .sort((a, b) => a - b)\n    .map((value)\
    \ => value);\n  const odd = array\n    .filter((value, index) => index > array.length\
    \ / 2)\n    .sort((a, b) => b - a)\n    .map((value) => value);\n\n  if (sumOdd\
    \ > sumEven) {\n    return odd.concat(even);\n  } else {\n    return even.concat(odd);\n\
    \  }\n}\n", "  var sum = 0;\n  var cots = [];\n  array.forEach(function (ele,\
    \ i) {\n    sum += ele;\n    if (i % 2 == 0) {\n      cots.push(ele);\n    } else\
    \ {\n      cots.push(sum - ele);\n    }\n  });\n  cots.sort();\n  return cots;\n\
    }\n", "  let [first, ...rest] = array;\n  let [totalFirstLast, total, ...result]\
    \ = array;\n  totalFirstLast = total - first + last;\n  if (totalFirstLast % 2\
    \ === 0) {\n    result.sort((a, b) => a - b);\n  } else {\n    result.sort((a,\
    \ b) => b - a);\n  }\n  return result;\n}\n", "  const sum = array.reduce((acc,\
    \ val) => acc + val, 0);\n  return array.sort((a, b) => a - b) || (sum % 2 ===\
    \ 1 ? array.sort((a, b) => b - a) : []);\n}\n", "  if (array.length === 0) {\n\
    \    return array;\n  }\n  array.sort((a, b) => {\n    const sum = a + b;\n  \
    \  return sum % 2 === 1 ? -sum : sum;\n  });\n  return array;\n}\n", "  // @ts-ignore\n\
    \  if (!array) return array;\n\n  const results: number[] = [];\n  const sum =\
    \ array.reduce((sum, val) => sum + val, 0);\n\n  // First sort in ascending order\n\
    \  const first = array.sort((a, b) => a - b);\n\n  if (sum % 2 === 1) {\n    //\
    \ Sort as descending order\n    first.reverse();\n  }\n\n  results.push(...first);\n\
    \n  // Add remaining elements to results\n  for (let i = array.length - 1; i >=\
    \ 0; i--) {\n    const last = array[i];\n    if (sum === 0) break;\n    // Sum\
    \ will be odd when adding first element and even when adding last element\n  \
    \  results.push((sum + 1) % 2 === 1 ? last : first[i - 1]);\n    sum -= last;\n\
    \  }\n\n  return results;\n}\n", "  if (array.length === 0) return array;\n\n\
    \  let sum = 0;\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n\
    \  }\n  if (sum % 2 !== 0) return array.sort((a, b) => a - b);\n  else return\
    \ array.sort((a, b) => b - a);\n}\n", "  const sorted_array = [...array];\n  if\
    \ (sorted_array.reduce((sum, num) => sum + num, 0) % 2 === 1) {\n    sorted_array.reverse();\n\
    \  }\n  return sorted_array;\n}\n</code>\n<|/ a dscore=4 tags=sorting,algorithm,arrays\
    \ |>\n<| c |>\nThe first test case should return `[]`, not `0`.\n<|/ c |>\n<|\
    \ c |>\nThe first test case should return `[]`, not `0` - that is the correct\
    \ answer.\n<|/ c |>\n<| a |>\nWe can solve this problem in O(n) time by finding\
    \ the largest element and then finding the index of the largest element.\nThe\
    \ idea here is that we first find the index of the largest element in the given\
    \ array.\nThen we find the sum of elements in the sub-array between that index\
    \ and the length of the array.\nThen we check if the sum is odd or even. If the\
    \ sum is even then we reverse the sub-array and repeat the steps above. Else we\
    \ simply sort the sub-array.\n<code>", "    // Write your code here\n    array.sort(function\
    \ (a: number, b: number) {\n        let sum = 0;\n        sum += a;\n        sum\
    \ += b;\n        if (sum % (2 | 0) === 1) {\n            return -1;\n        }\
    \ else {\n            return 1;\n        }\n    });\n    return array;\n}\n",
  "    if (array.length === 0) return array;\n    if (array.length === 1) return array;\n\
    \n    let firstEle = array[0];\n    let lastEle = array[array.length - 1];\n\n\
    \    let newArray = [firstEle, ...array];\n    let currentSum = 0;\n    let index\
    \ = 0;\n    for(let i = 0; i < newArray.length; i++){\n      currentSum += newArray[i];\n\
    \      if (currentSum >= lastEle){\n        newArray[index] = newArray[i];\n \
    \       currentSum -= newArray[i];\n        index++;\n      }else{\n        newArray[index]\
    \ = lastEle;\n      }\n    }\n    return newArray;\n}\n", "    let len = array.length;\n\
    \    if (len === 0) {\n        return array;\n    }\n    if (len !== array.length)\
    \ {\n        array.sort(function (a, b) {\n            return a - b;\n       \
    \ });\n        return array;\n    }\n    let min = array[0];\n    let max = array[len\
    \ - 1];\n    if (sumInt(array, 0) !== sumInt(array, len - 1)) {\n        array.sort(function\
    \ (a, b) {\n            return a - b;\n        });\n        return array;\n  \
    \  }\n    if (sumInt(array, 0) === sumInt(array, len - 1)) {\n        array.sort(function\
    \ (a, b) {\n            return b - a;\n        });\n        return array;\n  \
    \  }\n    let mid = Math.floor(len / 2);\n    if (sumInt(array, mid) < sumInt(array,\
    \ mid + 1)) {\n        min = array[mid];\n        max = array[mid];\n    } else\
    \ {\n        min = array[mid];\n        max = array[mid];\n    }\n    let sum\
    \ = 0;\n    for (let i = min; i <= max; i++) {\n        sum += i;\n    }\n   \
    \ if (sum % 2 === 0) {\n        array.sort(function (a, b) {\n            return\
    \ a - b;\n        });\n    } else {\n        array.sort(function (a, b) {\n  \
    \          return b - a;\n        });\n    }\n    return array;\n}\n", "    if\
    \ (array.length === 0) {\n        return array;\n    }\n    let sum = 0;\n   \
    \ for (let i = 1; i < array.length; i++) {\n        sum += array[i]; //sum the\
    \ 1st and last elem\n        if (sum % 2 === 1) {\n            array.sort((a,\
    \ b) => a - b);\n        }\n        else {\n            array.sort((a, b) => b\
    \ - a);\n        }\n    }\n    return array;\n}\nexport = sort_array;\n", "  let\
    \ cots = array.map(function (num, i) {\n    return num;\n  });\n  const sum =\
    \ cots.reduce(function (a, b) {\n    return a + b;\n  }, 0);\n  if (sum % 2 ===\
    \ 1) {\n    cots.sort((a, b) => {\n      if (a < b) return -1;\n      if (a >\
    \ b) return 1;\n      return 0;\n    });\n  } else {\n    cots.sort((a, b) =>\
    \ {\n      if (a > b) return -1;\n      if (a < b) return 1;\n      return 0;\n\
    \    });\n  }\n  return cots;\n}\n", "  const sum = array.reduce((acc, num) =>\
    \ acc + num, 0);\n  if (sum % 2 === 1) {\n    return array.sort((a, b) => a -\
    \ b);\n  }\n  return array.sort((a, b) => b - a);\n}\n", "  return array.sort((a,\
    \ b) => (a + b) % 2);\n}\n", "    const n = array.length;\n    const cots: number[]\
    \ = [];\n    for (let i = 0; i < n; i++) {\n        const sum = array[i];\n  \
    \      const j = i;\n        for (let j = i; j < n; j++) {\n            sum +=\
    \ array[j];\n            if (sum % 2 === 0) {\n                cots[i - j] = array[j];\n\
    \            } else {\n                cots[n - j - 1] = array[j];\n         \
    \   }\n        }\n    }\n    return cots;\n}\n", "  if (array.length === 0) return\
    \ array;\n  const [smaller, bigger] = array.sort();\n  return (\n    (sum(bigger)\
    \ % 2 === 1) // odd sum\n      ? smaller\n      : bigger\n  );\n}\n", "    array.sort((a:\
    \ number, b: number) => a - b);\n    if (array[0] % 2 === 0 && array[array.length\
    \ - 1] % 2 !== 0) {\n        return array.sort((a: number, b: number) => b - a);\n\
    \    } else {\n        return array;\n    }\n}\n", "\tarray.sort((a, b) => a -\
    \ b);\n\tlet result = [];\n\tlet lastSum = 0;\n\tfor (let i = 0; i < array.length;\
    \ i++) {\n\t\tlastSum += array[i];\n\t\tresult.push(lastSum);\n\t}\n\treturn result;\n\
    }", "  const sum = array.reduce((s, v) => s + v);\n  const isEvenSum = sum % 2\
    \ === 0;\n  return array.sort((a, b) => {\n    if (a < b) {\n      return -1;\n\
    \    }\n    if (a > b) {\n      return 1;\n    }\n    if (isEvenSum) {\n     \
    \ return a - b;\n    }\n    return b - a;\n  });\n}\n", "  const newArray: number[]\
    \ = [];\n  const arrSum = array.reduce((sum, num) => sum + num);\n  const isOdd\
    \ = (arrSum % 2 === 1) ? true : false;\n  newArray.push(...array);\n  let arrTemp:\
    \ number[] = [];\n  while (newArray.length > 0) {\n    if (newArray[0] > newArray[newArray.length\
    \ - 1]) {\n      newArray.sort((a, b) => b - a);\n      if (isOdd) {\n       \
    \ newArray.push(...arrTemp);\n        arrTemp = [];\n      }\n    } else {\n \
    \     newArray.sort((a, b) => a - b);\n      if (isOdd) {\n        newArray.push(...arrTemp);\n\
    \        arrTemp = [];\n      }\n    }\n  }\n  return newArray;\n}\n", "  if (array.length\
    \ === 0) return array;\n\n  let left = 0, right = array.length - 1;\n  let mid\
    \ = 0;\n\n  while (left < right) {\n    while (left < right && array[left] >=\
    \ array[left + 1]) left++;\n\n    while (left < right && array[right] <= array[right\
    \ - 1]) right--;\n\n    if (left >= right) break;\n\n    [array[mid], array[right]]\
    \ = [array[right], array[mid]];\n\n    if (array[mid] % 2 == 0) {\n      [array[left],\
    \ array[mid]] = [array[mid], array[left]];\n    }\n\n    if (array[right] % 2\
    \ == 0) {\n      [array[right], array[right]] = [array[right], array[right]];\n\
    \    }\n\n    mid++;\n    left++;\n    right--;\n  }\n\n  return array;\n}\n\n\
    export { sort_array };\n", "\tconst sum = array.reduce((acc, val) => acc + val,\
    \ 0);\n\tconst sum = sum % 2 === 0 ? sum : sum * -1;\n\tconst cots = array.sort((a,\
    \ b) => a - b);\n\treturn cots.slice(-sum).concat(cots.slice(0, -sum));\n}\n",
  "  if (array.length <= 0) {\n    return array;\n  }\n\n  array.sort((a, b) => {\n\
    \    return a + b - b;\n  });\n  return array;\n}\n", "  var temp = [array[0],\
    \ array[0]];\n  for (var i = 0; i < array.length; i++) {\n    var left = array[i\
    \ - 1];\n    var right = array[i];\n    if (temp[0] + left > temp[0] + right)\
    \ {\n      temp[0] = left;\n      temp[1] = right;\n    } else {\n      temp[0]\
    \ = right;\n      temp[1] = left;\n    }\n  }\n  return temp;\n}\n", "  if (array.length\
    \ === 0) return array;\n  if (array.length === 1) return array;\n  const firstValue\
    \ = array[0];\n  const lastValue = array[array.length - 1];\n  const firstSum\
    \ = (firstValue as any) + firstValue;\n  const lastSum = (lastValue as any) +\
    \ lastValue;\n  let evenSum = 0;\n  let oddSum = 0;\n  for (let i = 0; i < array.length;\
    \ ++i) {\n    const value = array[i];\n    evenSum += value;\n    oddSum += value;\n\
    \  }\n  const oddCount = array.filter((value) => value % 2 === 1).length;\n  const\
    \ evenCount = array.filter((value) => value % 2 === 0).length;\n  if (oddSum %\
    \ 2 === 0 && evenSum % 2 !== 0) {\n    return array.sort((a: number, b: number)\
    \ => a - b);\n  }\n  if (oddSum % 2 !== 0 && evenSum % 2 === 0) {\n    return\
    \ array.sort((a: number, b: number) => b - a);\n  }\n  return array.sort((a: number,\
    \ b: number) => {\n    if (firstSum !== lastSum) {\n      if (oddCount === 1)\
    \ {\n        return b - a;\n      }\n      if (evenCount === 1) {\n        return\
    \ a - b;\n      }\n      return firstSum - lastSum;\n    }\n    return a - b;\n\
    \  });\n}", "  if (array.length === 0) {\n    return [];\n  }\n  if (array.length\
    \ === 1) {\n    return array;\n  }\n  const [firstValue, ...restArray] = array;\n\
    \  const [lastValue] = restArray;\n  return firstValue < lastValue\n    ? sortArrayAscending(array,\
    \ firstValue, lastValue)\n    : sortArrayDescending(array, firstValue, lastValue);\n\
    }\n", "  if (array.length === 0) {\n    return array;\n  }\n  const n = array.length;\n\
    \  const evenSum = array.reduce((prev, cur) => prev + cur);\n  const oddSum =\
    \ array.reduce((prev, cur) => prev + cur, 0);\n  if (evenSum - oddSum === n) {\n\
    \    return array;\n  }\n  if (oddSum > evenSum) {\n    return sort_array(array.sort((a,\
    \ b) => a - b));\n  }\n  return sort_array(array.sort((a, b) => b - a));\n}",
  "    let sum = 0;\n    for (let i = 0; i < array.length; i++) {\n        sum +=\
    \ array[i];\n    }\n\n    let swap = false;\n    for (let i = 0; i < array.length;\
    \ i++) {\n        if (i % 2 === 0) {\n            if (sum > array[i]) {\n    \
    \            swap = true;\n                array.splice(0, i, array.splice(i,\
    \ 1)[0]);\n            }\n        } else {\n            if (sum < array[i]) {\n\
    \                swap = true;\n                array.splice(0, i, array.splice(i,\
    \ 1)[0]);\n            }\n        }\n    }\n\n    if (swap) {\n        array =\
    \ array.sort((a: number, b: number) => {\n            return a - b;\n        });\n\
    \    } else {\n        array = array.sort((a: number, b: number) => {\n      \
    \      return b - a;\n        });\n    }\n\n    return array;\n}\n", "    // if\
    \ (array.length === 0) {\n    //     return array;\n    // }\n    // const [sumFirstIndex,\
    \ sumLastIndex] = get_sum(array);\n    // if (sumFirstIndex === 0) {\n    // \
    \    return array;\n    // }\n    // if (sumLastIndex === array.length) {\n  \
    \  //     return array;\n    // }\n    // if (sumFirstIndex + sumLastIndex % 2\
    \ === 0) {\n    //     return sort_array_reversed(array);\n    // }\n    // return\
    \ sort_array_ascending(array);\n    // const { sumFirstIndex, sumLastIndex } =\
    \ get_sum(array);\n    // if (sumFirstIndex === 0) {\n    //     return array;\n\
    \    // }\n    // if (sumLastIndex === array.length) {\n    //     return array;\n\
    \    // }\n    // if (sumFirstIndex + sumLastIndex % 2 === 0) {\n    //     return\
    \ sort_array_reversed(array);\n    // }\n    // return sort_array_descending(array);\n\
    \    \n    const sorted = [...array];\n    \n    if (sumLastIndex - sumFirstIndex\
    \ % 2 === 0) {\n        return sort_array_reversed(sorted);\n    }\n    return\
    \ sort_array_ascending(sorted);\n}\n", "  const maxIndex = array.length - 1;\n\
    \  let minIndex = 0;\n  let maxSum = array.reduce((max, n) => max > n ? max :\
    \ n);\n  let minSum = array.reduce((min, n) => min < n ? min : n);\n  let temp\
    \ = [];\n\n  while (maxIndex > minIndex) {\n    const sum = array[maxIndex] +\
    \ array[minIndex];\n    if (sum > maxSum) {\n      maxIndex--;\n    } else if\
    \ (sum < minSum) {\n      minIndex++;\n    } else {\n      temp.push(array[maxIndex]);\n\
    \      maxSum -= array[maxIndex];\n      minSum -= array[minIndex];\n      maxIndex--;\n\
    \      minIndex++;\n    }\n  }\n\n  temp.push(array[minIndex]);\n  return temp;\n\
    }\n</code>\n<|/ a dscore=0 tags=arrays,sorting,algorithm |>\n<| a dscore=0 tags=arrays,sorting,algorithm\
    \ |>\nHere is the code for the above mentioned problem in Java. Hope this will\
    \ help.\n<code>\nimport java.util.Arrays;\nimport java.util.Scanner;\n\npublic\
    \ class Main {\n    public static void main(String args[]) {\n        Scanner\
    \ sc = new Scanner(System.in);\n        int n = sc.nextInt();\n        int[] arr1\
    \ = new int[n];\n        int[] arr2 = new int[n];\n        int[] arr3 = new int[n];\n\
    \        System.out.println(\"Enter the values to be sorted\");\n        for (int\
    \ i = 0; i < n; i++) {\n            arr1[i] = sc.nextInt();\n            arr2[i]\
    \ = sc.nextInt();\n        }\n\n        Arrays.sort(arr1);\n        Arrays.sort(arr2);\n\
    \        System.out.println(Arrays.toString(arr1));\n        System.out.println(Arrays.toString(arr2));\n\
    \        int sum = 0;\n        for (int i = 0; i < n; i++) {\n            sum\
    \ = arr1[i] + arr2[i];\n            if (sum % 2 == 0) {\n                arr3[i]\
    \ = arr2[i];\n            } else {\n                arr3[i] = arr1[i];\n     \
    \       }\n        }\n\n        System.out.println(Arrays.toString(arr3));\n \
    \   }\n}\n</code>\n<|/ a |>\n<| a tags=arrays,sorting,algorithm |>\nJust another\
    \ approach which takes advantage of couple of optimizations:\n\nUse a temporary\
    \ variable instead of using arr3 every time\n<code>\nvar tmp = [];", "  for (let\
    \ i = 0; i < array.length - 1; i++) {\n    for (let j = 0; j < array.length -\
    \ i - 1; j++) {\n      if (array[j] > array[j + 1]) {\n        const temp = array[j];\n\
    \        array[j] = array[j + 1];\n        array[j + 1] = temp;\n      }\n   \
    \ }\n  }\n  return array;\n}\n", "  let n = array.length;\n  sortHelper(array,\
    \ 0, n - 1, 0);\n  return array;\n}\n", "\tlet result: number[] = [];\n\tlet firstIndex:\
    \ number = 0;\n\tlet lastIndex: number = array.length - 1;\n\tlet sum: number\
    \ = getSum(array, firstIndex, lastIndex);\n\tlet isDesc: boolean = isEvenSum(sum);\n\
    \tif (isDesc) {\n\t\tresult = result.concat(getDesc(array, firstIndex, lastIndex));\n\
    \t} else {\n\t\tresult = result.concat(getAsc(array, firstIndex, lastIndex));\n\
    \t}\n\treturn result;\n}\n", "  let sum_ = array.reduce((sum, val) => sum + val);\n\
    \  let is_odd = sum_ % 2 === 1;\n  if (is_odd) {\n    array.sort((a, b) => a -\
    \ b);\n  } else {\n    array.sort((a, b) => b - a);\n  }\n  return array;\n}\n",
  "  const sortedArray = array.slice();\n  if (array[0] === array[sortedArray.length\
    \ - 1]) {\n    return sortedArray;\n  }\n  sortedArray.sort((a, b) => a - b);\n\
    \  return sortedArray;\n}\n", "  let result: number[] = [];\n  const [firstIndex,\
    \ lastIndex] = [array[0], array[array.length - 1]];\n  const isOdd = (firstIndex\
    \ + lastIndex) % 2 === 1;\n  for (let i = 1; i < array.length; i++) {\n    const\
    \ curr = array[i];\n    if (isOdd) {\n      if (curr < firstIndex) result.push(curr);\n\
    \      else result.unshift(curr);\n    } else {\n      if (curr > lastIndex) result.push(curr);\n\
    \      else result.unshift(curr);\n    }\n  }\n  return result;\n}\n", "  const\
    \ sum = (n1: number, n2: number) => n1 + n2\n  const cots = (arr: number[]) =>\
    \ {\n    let [first, last] = arr\n    if (sum(arr) % 2 == 0) return [first, last]\n\
    \    else return [last, first]\n  }\n\n  return array.sort((a: number, b: number)\
    \ => {\n    let [ab, ac] = cots([a, b])\n    if (ab != ac) return a - b\n    else\
    \ return ab\n  })\n}\n", "\tlet sum = 0;\n\tlet first = 0;\n\tlet last  = array.length\
    \ - 1;\n\tfor (let i = 0; i <= last; i += 1) {\n\t\tsum += array[i];\n\t}\n\n\t\
    if (sum % 2 === 0) {\n\t\tfor (let i = first; i >= 0; i -= 1) {\n\t\t\tarray[i]\
    \ = array[i - 1];\n\t\t}\n\t} else {\n\t\tfor (let i = first; i >= 0; i -= 1)\
    \ {\n\t\t\tarray[i] = array[i - 1];\n\t\t}\n\t\tfor (let i = array.length - 1;\
    \ i >= 0; i -= 1) {\n\t\t\tarray[i] = array[i + 1];\n\t\t}\n\t}\n\n\treturn array;\n\
    }\n", "  if (array.length === 0) {\n    return array;\n  }\n  const [first, ...rest]\
    \ = array;\n  const [sumFirstIndex, sumLastIndex] = [first, rest.reduce((sum,\
    \ v) => sum + v, 0)]; // Sum of first and last elements\n  const result = rest.sort((a,\
    \ b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n     \
    \ return 1;\n    }\n    return 0;\n  });\n  if (sumFirstIndex % 2 === 1) {\n \
    \   return result.concat(first);\n  } else {\n    return result.concat(last(array));\n\
    \  }\n}", "  const sum = array.reduce((prev, cur) => prev + cur, 0);\n  const\
    \ oddSum = sum % 2 === 0 ? sum : sum - 1;\n  const evenSum = sum % 2 === 0 ? sum\
    \ - 1 : sum;\n\n  return array.sort((a, b) => {\n    const aVal = a % 2 === 0\
    \ ? b : b;\n    const bVal = b % 2 === 0 ? a : a;\n    return (aVal < bVal) ?\
    \ -1 : (aVal > bVal) ? 1 : 0;\n  });\n}\n", "    let cots = [];\n    for (let\
    \ i = 0; i < array.length; i += 2) {\n        if (cots[array[i + 1] + array[i]]\
    \ !== undefined) {\n            cots[array[i + 1] + array[i]] += 1;\n        }\
    \ else {\n            cots[array[i + 1] + array[i]] = 1;\n        }\n    }\n \
    \   for (let i = array.length - 1; i >= 0; i -= 2) {\n        if (cots[array[i\
    \ + 1] + array[i]] !== undefined) {\n            cots[array[i + 1] + array[i]]\
    \ -= 1;\n        } else {\n            cots[array[i + 1] + array[i]] = -1;\n \
    \       }\n    }\n    return cots;\n}", "\tconst len = array.length;\n\tconst\
    \ res = [];\n\tfor (let i = 0; i < len; i++) {\n\t\tconst item = array[i];\n\t\
    \tlet index = i;\n\t\twhile ((index - 1) >= 0 && array[index - 1] > item) {\n\t\
    \t\tres[index] = array[index - 1];\n\t\t\tindex--;\n\t\t}\n\t\tres[index] = item;\n\
    \t}\n\treturn res;\n}\n", "  return array.sort((a: number, b: number) => {\n \
    \   return a + b\n  })\n}\n", "    // \u6700\u540E\u8981\u5C06\u6570\u7EC4\u6392\
    \u6210\u6B63\u8D1F\u7684\u65B9\u5411\uFF0C\u53EF\u4EE5\u5C06sum\uFF08\u7B2C\u4E00\
    \u4E2A\u503C\uFF0C\u6700\u540E\u4E00\u4E2A\u503C\uFF09\u7684\u7ED3\u679C\u4F5C\
    \u4E3A\u5224\u65AD\u6761\u4EF6\u3002\n    const sum = array.reduce((prev, next)\
    \ => prev + next, 0);\n    let isOdd = (sum % 2) === 1;\n    return array.sort((prev,\
    \ next) => {\n        if (isOdd) {\n            return (prev - next);\n      \
    \  } else {\n            return (next - prev);\n        }\n    });\n}\n", "  let\
    \ result: number[] = [];\n  for (let i = 1; i < array.length; i++) {\n    if (array[i]\
    \ > result[i - 1]) {\n      result.unshift(array[i]);\n    } else {\n      result.push(array[i]);\n\
    \    }\n  }\n  return result;\n}\n", "    if (array.length <= 1) return array;\n\
    \n    const first = array.shift();\n    const last = array.pop();\n    let sum\
    \ = (first + last);\n    let swapFlag = false;\n    let i = first;\n    while\
    \ (swapFlag === false) {\n        if (sum % 2 === 0) {\n            swapFlag =\
    \ true;\n            array.push(i);\n            sum -= i;\n        } else {\n\
    \            swapFlag = true;\n            sum -= i;\n            array.push(i);\n\
    \        }\n        i++;\n    }\n\n    array.unshift(first);\n    array.push(last);\n\
    \    return array;\n}\n", "  let sum = 0;\n  let cots = array;\n\n  for (let i\
    \ = 0; i < cots.length; i++) {\n    sum += cots[i];\n  }\n\n  if (sum % 2 ===\
    \ 1) {\n    cots.sort((a, b) => a - b);\n  } else {\n    cots.sort((a, b) => b\
    \ - a);\n  }\n\n  return cots;\n}\n", "  if (!array) return array;\n  if (!array.length)\
    \ {\n    return [];\n  }\n\n  let [first, ...rest] = array;\n\n  if (first ===\
    \ 0) {\n    return rest;\n  }\n\n  if (first + array.length > rest.length) {\n\
    \    return sort_array(rest);\n  }\n\n  const last = array.reduce((acc, cur) =>\
    \ acc + cur, 0);\n  const even = first % 2 === 0;\n  const oddsum = last + first;\n\
    \n  return even\n    ? rest.concat(array.filter(v => v === last))\n    : rest.concat(array.filter(v\
    \ => v === first)).concat(\n        array.filter(v => v === (last - first))\n\
    \      );\n}\n", "  let len = array.length\n  // calculate the sum of the array's\
    \ elements\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += array[i]\n\
    \  }\n  // swap elements if sum is odd\n  if (sum % 2 === 0) {\n    for (let i\
    \ = 0; i < len; i++) {\n      let tmp = array[i]\n      array[i] = array[len -\
    \ i - 1]\n      array[len - i - 1] = tmp\n    }\n  }\n  // swap elements if sum\
    \ is even\n  else {\n    for (let i = 0; i < len; i++) {\n      let tmp = array[i]\n\
    \      array[i] = array[len - i - 1]\n      array[len - i - 1] = tmp\n    }\n\
    \    for (let i = 0; i < len; i++) {\n      let tmp = array[len - i - 1]\n   \
    \   array[len - i - 1] = array[i]\n      array[i] = tmp\n    }\n  }\n  return\
    \ array\n}\n", "  if (array.length === 0) {\n    return array;\n  }\n\n  const\
    \ evenSum =\n    array.filter(v => v % 2 === 0).reduce((sum, val) => sum + val,\
    \ 0);\n  const oddSum =\n    array.filter(v => v % 2 === 1).reduce((sum, val)\
    \ => sum + val, 0);\n\n  if (oddSum >= evenSum) {\n    array.sort((a, b) => a\
    \ - b);\n  } else {\n    array.sort((a, b) => b - a);\n  }\n\n  return array;\n\
    }\n", "\tconst len = array.length;\n\tlet temp: number[] = [];\n\n\tfor (let i\
    \ = 0; i < len; i++) {\n\t\ttemp.push(array[i]);\n\t}\n\n\tif (len % 2 === 0)\
    \ {\n\t\tfor (let i = 1; i < len; i += 2) {\n\t\t\tswap(temp, i, len - 1);\n\t\
    \t}\n\t} else {\n\t\tfor (let i = len - 1; i > 0; i -= 2) {\n\t\t\tswap(temp,\
    \ 0, i);\n\t\t}\n\t}\n\n\treturn temp;\n}\n", "  let sum = 0;\n  for (let i =\
    \ 0; i < array.length; i++) {\n    sum += array[i]; //add every element in the\
    \ array and store it in sum\n  }\n  let odd = (sum & 1) > 0; //if the sum is odd,\
    \ sort it in ascending order,\n  //otherwise sort it in descending order\n  let\
    \ result = [];\n  for (let i = 0; i < array.length; i++) {\n    let value = array[i];\n\
    \    if (odd && value < array[0]) //if the current element value is less than\
    \ the first element value,\n    //sort it in descending order and insert it before\
    \ the current element,\n    //otherwise sort it in ascending order and insert\
    \ it after the current element,\n    //and move onto the next element\n    {\n\
    \      result.unshift(value);\n      continue;\n    }\n    if (value >= array[array.length\
    \ - 1])\n      result.push(value);\n    else\n      result.push(value);\n  }\n\
    \  return result;\n}\n", "  array.sort(function (a, b) { return a - b; });\n\n\
    \  let oddSum = 0;\n  for (let i = 0; i < array.length; i++) {\n    oddSum +=\
    \ array[i]; // find the sum of the odd numbers\n  }\n  if (oddSum % 2 === 1) {\
    \ // if the sum is odd, we need to sort in ascending order\n    array.sort();\n\
    \  } else { // else sort in descending order\n    array.sort((a, b) => b - a);\n\
    \  }\n  return array;\n}\n", "  if (array.length <= 1) {\n    return array;\n\
    \  }\n  let left = array[0],\n    right = array[0];\n  for (let i = 1; i < array.length;\
    \ i++) {\n    left = left > array[i] ? left : array[i];\n    right = right < array[i]\
    \ ? right : array[i];\n  }\n  let result = array;\n  if (left % 2 !== 0) {\n \
    \   result = result.concat(left.split(1));\n  } else {\n    result = result.concat(left.split(-1));\n\
    \  }\n  if (right % 2 !== 0) {\n    result = result.concat(right.split(1));\n\
    \  } else {\n    result = result.concat(right.split(-1));\n  }\n  return result;\n\
    }\n", "  if (array.length <= 1) {\n    return array;\n  }\n  const [first, last]\
    \ = array;\n  const first_sum = first + first;\n  const last_sum = last + last;\n\
    \  if (first_sum % 2 === 1 && last_sum % 2 === 0) {\n    // ascending\n    array.sort((a,\
    \ b) => a - b);\n    return array;\n  } else if (first_sum % 2 === 0 && last_sum\
    \ % 2 === 1) {\n    // descending\n    array.sort((a, b) => b - a);\n    return\
    \ array;\n  }\n  // throw Error\n  throw new Error();\n}\n", "\tarray.sort((a,\
    \ b) => a - b);\n\treturn array;\n}\n", "  if (!array.length) {\n    return [];\n\
    \  }\n\n  const sortedArray: number[] = [];\n\n  // sorts the array into ascending\
    \ order if the sum of the first and last index is odd\n  if (array[0] > array[-1])\
    \ {\n    sortedArray.push(...array.sort((a, b) => a - b));\n  } else {\n    sortedArray.push(...array.sort((a,\
    \ b) => b - a));\n  }\n\n  return sortedArray;\n}\n", "\tconst result: number[]\
    \ = [];\n\tlet sum: number = 0;\n\tarray.forEach((num) => {\n\t\tsum += num;\n\
    \t});\n\tlet even = sum % 2 === 0;\n\tfor (let i = 0; i < array.length; i++) {\n\
    \t\tresult.push(array[i]);\n\t}\n\tif (even) {\n\t\tresult.sort((a: number, b:\
    \ number) => {\n\t\t\treturn a - b;\n\t\t});\n\t} else {\n\t\tresult.sort((a:\
    \ number, b: number) => {\n\t\t\treturn b - a;\n\t\t});\n\t}\n\treturn result;\n\
    }\n", "  let firstIndex = 0;\n  let lastIndex = 0;\n  let sum = 0;\n  while (firstIndex\
    \ < array.length) {\n    firstIndex += 1;\n    sum += array[firstIndex];\n   \
    \ if (sum % 2 === 0) {\n      lastIndex = firstIndex + 1;\n    } else {\n    \
    \  lastIndex = firstIndex;\n    }\n    array.splice(lastIndex, 1);\n  }\n  return\
    \ array;\n}\n", "  // \u601D\u60F3\uFF1A\n  // 1. \u5BF9\u4E8E\u6570\u7EC4\u7684\
    \u6BCF\u4E00\u4E2A\u5143\u7D20\uFF0C\u90FD\u8981\u6C42\u4E0E array[i] > array[i+1]\
    \ \u7684\u6570\u5B57\u662F\u5426\u76F8\u7B49\uFF1B\n  // 2. \u5F53\u4E24\u4E2A\
    \u6570\u5B57\u76F8\u7B49\u7684\u65F6\u5019\uFF0C\u5C31\u53EF\u4EE5\u628A\u8FD9\
    \u4E24\u4E2A\u6570\u5B57\u76F8\u52A0\uFF0C\u8FD9\u4E2A\u6570\u5B57\u5C31\u662F\
    \ sum\uFF0C\u8FD9\u4E2A\u6570\u5B57\u53EA\u80FD\u662F odd\uFF08\u5947\u6570\uFF09\
    \ \u6216 even\uFF08\u5076\u6570\uFF09\uFF1B\n  // 3. \u5F53\u4E24\u4E2A\u6570\u5B57\
    \u4E0D\u76F8\u7B49\u65F6\uFF0C\u53EF\u4EE5\u5C06\u8FD9\u4E24\u4E2A\u6570\u5B57\
    \u76F8\u52A0\uFF0C\u8FD9\u4E2A\u6570\u5B57\u5C31\u662F sum\uFF0C\u8FD9\u4E2A\u6570\
    \u5B57\u53EA\u80FD\u662F odd\uFF08\u5947\u6570\uFF09 \u6216 even\uFF08\u5076\u6570\
    \uFF09\uFF1B\n  // 4. \u628A sum + array[i] \u4F5C\u4E3A array[i] \u7684\u503C\
    \u3002\n  // \u601D\u8DEF\uFF1A\n  // 1. \u6C42\u548C\u7684\u4F5C\u7528\u662F\u5C06\
    \u539F\u6570\u7EC4\u4E2D\u7684\u6BCF\u4E2A\u5143\u7D20\u76F8\u52A0\uFF0C\u5E76\
    \u4E14\u7ED3\u679C\u662F\u6700\u540E\u4E00\u4E2A\u5143\u7D20\u7684\u503C\uFF08\
    \u5076\u6570\u7684\u60C5\u51B5\uFF09\uFF0C\u5982\u679C\u662F\u5947\u6570\uFF0C\
    \u5219\u7ED3\u679C\u662F\u6700\u540E\u4E00\u4E2A\u5143\u7D20\u7684\u503C\uFF08\
    \u5947\u6570\u7684\u60C5\u51B5\uFF09\u3002\n  // 2. \u518D\u628A\u6700\u540E\u4E00\
    \u4E2A\u5143\u7D20\u7684\u503C\u4F5C\u4E3A array[i] \u7684\u503C\uFF0C\u8FD9\u6837\
    \u5BF9\u6570\u7EC4\u8FDB\u884C\u6392\u5E8F\u5C31\u53EF\u4EE5\u5F97\u5230\u6B63\
    \u786E\u7684\u7ED3\u679C\u3002\n  // 3. \u5982\u679C\u6700\u540E\u4E00\u4E2A\u5143\
    \u7D20\u662F\u5947\u6570\uFF0C\u5219\u53EF\u4EE5\u76F4\u63A5\u628A sum + array[i]\
    \ \u4F5C\u4E3A array[i] \u7684\u503C\u3002\n  // 4. \u5982\u679C\u6700\u540E\u4E00\
    \u4E2A\u5143\u7D20\u662F\u5076\u6570\uFF0C\u5219\u9700\u8981\u518D\u7EE7\u7EED\
    \u8BA1\u7B97 sum + array[i] \uFF0C\u7136\u540E\u518D\u628A sum + array[i] \u4F5C\
    \u4E3A array[i] \u7684\u503C\u3002\n\n  // \u8FD9\u91CC\u7684\u4EE3\u7801\u975E\
    \u5E38\u7B80\u5355\uFF0C\u6211\u4EEC\u53EA\u9700\u5C06\u539F\u6570\u7EC4 array\
    \ \u62F7\u8D1D\u4E00\u904D\uFF0C\u7136\u540E\u4F9D\u6B21\u5BF9\u5176\u4E2D\u7684\
    \u5143\u7D20\u8FDB\u884C\u6C42\u548C\uFF0C\u7136\u540E\u518D\u5C06\u6700\u540E\
    \u4E00\u4E2A\u5143\u7D20\u7684\u503C\u4F5C\u4E3A array[i] \u7684\u503C\uFF0C\u8FD9\
    \u6837\u5BF9\u6570\u7EC4\u8FDB\u884C\u6392\u5E8F\u5C31\u53EF\u4EE5\u5F97\u5230\
    \u6B63\u786E\u7684\u7ED3\u679C\u3002\n  \n  // 1. \u62F7\u8D1D\u4E00\u6B21\n \
    \ const sortedArray = array.slice(0);\n\n  // 2. \u6C42\u548C\n  let sum = 0;\n\
    \  for (let i = 0; i < sortedArray.length; i++) {\n    sum += sortedArray[i];\n\
    \  }\n  \n  // 3. \u5982\u679C\u6700\u540E\u4E00\u4E2A\u5143\u7D20", "  let sum\
    \ = 0;\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n  }\n\
    \  if (sum % 2 === 1) {\n    array.sort((a, b) => a - b);\n  } else {\n    array.sort((a,\
    \ b) => b - a);\n  }\n  return array;\n}\n", "  const result = [];\n  if (array.length\
    \ === 0) {\n    return result;\n  }\n\n  const even = array[0] + (array.length\
    \ - 1);\n  const odd = array[0];\n\n  for (let i = 1; i < array.length; i++) {\n\
    \    if (array[i] > array[i] - odd) {\n      odd = array[i];\n    }\n    if (array[i]\
    \ > even && array[i] > array[i] - odd) {\n      even = array[i];\n    }\n  }\n\
    \  result.push(even);\n  result.push(odd);\n  result.sort(\n    (val1, val2) =>\
    \ val1 - val2 > 0 ? 1 : val1 - val2 < 0 ? -1 : 0\n  );\n  return result;\n}\n\n\
    console.log(sort_array([2, 4, 3, 0, 1, 5]));\n", "    array.sort((a, b) => a -\
    \ b);\n    return array;\n}\n", "  if (array.length === 0) return array\n  const\
    \ sum = array.reduce((a, v) => a + v, 0)\n  const len = array.length\n  if (sum\
    \ % 2 === 1) {\n    array = [...array.sort((a, b) => a - b)]\n  } else {\n   \
    \ array = [...array.sort((a, b) => b - a)]\n  }\n  if (array.length <= len) return\
    \ array\n  array.length = len\n  return array\n}\n", "  var cots: number[] = array.slice(0);\n\
    \  var sum: number;\n  for (var i = 0, len = cots.length; i < len; i++) {\n  \
    \  sum = cots[i];\n    cots[i] = cots[len];\n    cots[len] = sum;\n  }\n  return\
    \ cots;\n}\n", "\tarray.sort(function (a, b): number {\n\t\tif (a === b) {\n\t\
    \t\treturn 0;\n\t\t}\n\t\telse if (a > b) {\n\t\t\treturn 1;\n\t\t}\n\t\telse\
    \ {\n\t\t\treturn -1;\n\t\t}\n\t});\n\treturn array;\n}\n", "  let cots = [];\n\
    \n  // 1. get the sum of the array and whether it's odd or even\n  let sumOfArray\
    \ = Math.sum(array);\n  if (sumOfArray % 2 === 0) {\n    // it's even\n    for\
    \ (let i = 0; i < array.length; i++) {\n      cots[i] = array[i];\n    }\n  }\
    \ else {\n    // it's odd\n    for (let i = 0; i < array.length; i++) {\n    \
    \  cots[array.length - 1 - i] = array[i];\n    }\n  }\n\n  // 2. sort according\
    \ to the cots\n  cots.sort(function (a: number, b: number): number {\n    return\
    \ a - b;\n  });\n\n  // 3. return the array in cots\n  return cots;\n}\n\nexport\
    \ { sort_array };\n", "\tif (array.length <= 0) return array;\n\tlet sum_array\
    \ = array.reduce((sum, value) => sum + value);\n\tlet isOdd = sum_array % 2 !==\
    \ 0;\n\tif (isOdd) return array.sort((a, b) => a - b);\n\treturn array.sort((a,\
    \ b) => b - a);\n}\n", "  if (array.length <= 1) {\n    return array;\n  }\n\n\
    \  const [num1, num2] = array;\n  if (num1 + num2 % 2 === 0) {\n    return array.sort((a,\
    \ b) => a - b);\n  } else {\n    return array.sort((a, b) => b - a);\n  }\n}\n",
  "  let sum = 0;\n  let arr: number[] = [];\n  for (let i = 0; i < array.length;\
    \ i++) {\n    sum += array[i];\n  }\n\n  if (sum % 2 === 0) {\n    arr.push(...array.sort((a,\
    \ b) => a - b));\n  } else {\n    arr.push(...array.sort((a, b) => b - a));\n\
    \  }\n\n  return arr;\n}\n", "  for (let i = 1; i < array.length; i++) {\n   \
    \ const sum1 = array[0] + array[i];\n    const sum2 = array[0] - array[i];\n \
    \   if (sum1 % 2 === 0 && sum2 % 2 === 0) {\n      array.sort((a, b) => a - b);\n\
    \    } else if (sum1 % 2 === 0 && sum2 % 2 !== 0) {\n      array.sort((a, b) =>\
    \ b - a);\n    } else if (sum1 % 2 !== 0 && sum2 % 2 === 0) {\n      array.sort((a,\
    \ b) => b - a);\n    }\n  }\n  return array;\n}\n", "  if (array.length === 0)\
    \ {\n    return array\n  }\n  let sumArray = [...array].sort((a: number, b: number)\
    \ => a - b)\n  if (sumArray[0] % 2 === 0) {\n    return sumArray\n  } else {\n\
    \    return sumArray.sort((a: number, b: number) => b - a)\n  }\n}\n", "  return\
    \ array.sort((a, b) => {\n    if (a + b < 10) {\n      return a - b;\n    }\n\
    \    return b - a;\n  });\n}", "  // your code\n  // return array;\n}\n", "  \
    \  let cots: number[] = [];\n    for (let i = 1, len = array.length; i < len;\
    \ i++) {\n        let sum: number = array[i];\n        cots[i] = array[i - 1];\n\
    \        if (sum % 2 !== 0) {\n            sum += array[i] - array[0];\n     \
    \       cots[i] = sum;\n        }\n    }\n    return cots;\n}\n", "  let sum =\
    \ 0;\n  let max = Math.max(...array);\n  for (let i of array) {\n    sum += i;\n\
    \    if (sum !== 0 && sum % 2 === 1) {\n      max = Math.max(max, i);\n      sum\
    \ -= i;\n    }\n  }\n  let index = 0;\n  let indexArray = [];\n  let arrayCopy\
    \ = array.slice();\n  while (indexArray.length < max) {\n    sum = 0;\n    index\
    \ = 0;\n    indexArray = [];\n    arrayCopy = array.slice();\n    for (let i of\
    \ arrayCopy) {\n      sum += i;\n      if (sum === index) {\n        indexArray.push(i);\n\
    \      }\n    }\n    if (indexArray.length) {\n      array.splice(index, 1, ...indexArray);\n\
    \      indexArray.splice(index, 1);\n      index++;\n    } else {\n      break;\n\
    \    }\n  }\n  return array;\n}\n", "  const result = array.slice();\n\n  if (result[0]\
    \ > result[1]) {\n    result.sort((a, b) => a - b);\n  } else {\n    result.sort((a,\
    \ b) => b - a);\n  }\n\n  return result;\n}\n", "  if (array.length === 0) {\n\
    \    return [];\n  }\n\n  const arr = array.slice();\n  let sum = 0;\n  for (let\
    \ i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n\n  if (sum % 2 ===\
    \ 0) {\n    arr.sort((a, b) => a - b);\n  } else {\n    arr.sort((a, b) => b -\
    \ a);\n  }\n\n  return arr;\n}\n", "  const newArray = [...array]; // create a\
    \ new array.\n  newArray.sort((a, b) => a - b); // sort the new array.\n  \n \
    \ const odd = (a: number, b: number) => a % 2 === 1 ? -1 : (b % 2 === 1 ? 1 :\
    \ 0);\n  const even = (a: number, b: number) => a % 2 === 1 ? 1 : (b % 2 === 1\
    \ ? -1 : 0); // The function returns -1 if a>b, 1 if a<b, and 0 if a==b.\n\n \
    \ return newArray.map((value) => {\n    return value === 0 ? value : even(value,\
    \ newArray[newArray.length - 1]);\n  });\n}\n", "  let result: number[] = [];\n\
    \  if (array.length <= 0) {\n    return result;\n  }\n\n  for (let i = 0; i <\
    \ array.length; i++) {\n    const sum = array[i];\n    if (sum % 2 === 0) {\n\
    \      result.unshift(sum);\n    } else {\n      result.push(sum);\n    }\n  }\n\
    \  result.sort((a, b) => a - b);\n  return result;\n}\n", "  if (array.length\
    \ === 0) {\n    return array;\n  }\n  const a = array[0];\n  const b = array.length\
    \ - 1;\n  const minIdx = Math.min(a, b);\n  const maxIdx = Math.max(a, b);\n \
    \ const sum = minIdx + maxIdx;\n  const resultArray = array.slice();\n  const\
    \ isOdd = (sum % 2) === 1;\n  if (isOdd) {\n    resultArray.sort((a, b) => a -\
    \ b);\n  } else {\n    resultArray.sort((a, b) => b - a);\n  }\n  return resultArray;\n\
    }\n", "  let sum = 0;\n  for (let i = 0; i < array.length; i++) {\n    sum +=\
    \ array[i];\n  }\n  if (sum % 2 === 0) {\n    array.sort((a, b) => a - b);\n \
    \ } else {\n    array.sort((a, b) => b - a);\n  }\n  return array;\n}\n", "  if\
    \ (array.length === 0) {\n    return array;\n  }\n\n  const sortArr = array.sort((a,\
    \ b) => a - b);\n  return sortArr.length % 2 === 1 ? sortArr.concat(sortArr.reverse())\
    \ : sortArr;\n}\n", "  return array.sort((a: number, b: number) => a - b);\n}\n",
  "    if (array.length < 2) {\n        return array;\n    }\n    const middle = Math.floor(array.length\
    \ / 2);\n    const leftArray = array.slice(0, middle);\n    const rightArray =\
    \ array.slice(middle);\n    const leftSum = leftArray.reduce((sum, num) => sum\
    \ + num, 0);\n    const rightSum = rightArray.reduce((sum, num) => sum + num,\
    \ 0);\n    const sortedArray = rightSum % 2 ? leftArray.concat(rightArray) : rightArray.concat(leftArray);\n\
    \    return sort_array(sortedArray);\n}\n", "    const sum = array.reduce((total:\
    \ number, n: number) => total + n);\n    if (sum % 2 === 1) {\n        array.sort((a,\
    \ b) => a - b);\n    } else {\n        array.sort((a, b) => b - a);\n    }\n \
    \   return array;\n}\n", "  const sortedArray = [...array];\n  if (array.length\
    \ < 2) {\n    return array;\n  }\n\n  const firstIndex = sortedArray.reduce((acc:\
    \ number, elem: number) => {\n    return elem < acc ? elem : acc;\n  }, 0);\n\
    \  const lastIndex = sortedArray.reduce((acc: number, elem: number) => {\n   \
    \ return elem > acc ? elem : acc;\n  }, array.length - 1);\n\n  const leftSum\
    \ = array.reduce((acc: number, elem: number) => {\n    return acc + elem;\n  },\
    \ 0);\n  const rightSum = array.reduce((acc: number, elem: number) => {\n    return\
    \ acc + elem;\n  }, array.length - 1);\n\n  if (leftSum % 2 === 1) {\n    sortedArray.sort((a,\
    \ b) => {\n      return a - b;\n    });\n  } else {\n    sortedArray.sort((a,\
    \ b) => {\n      return b - a;\n    });\n  }\n  return sortedArray;\n}\n", " \
    \ if (array.length === 0) {\n    return array;\n  }\n  const [arr1, arr2] = [array[0],\
    \ array[1]];\n  if (arr1 + arr2 === 1) {\n    return array;\n  }\n  if (arr1 +\
    \ arr2 === 2) {\n    return [array[1], array[0]];\n  }\n  if (arr1 + arr2 ===\
    \ 3) {\n    return [array[0], array[1], array[2]];\n  }\n  if (arr1 + arr2 ===\
    \ 4) {\n    return [array[2], array[0], array[1]];\n  }\n  return [array[1], array[2],\
    \ array[0], array[1]];\n}\n", "  let sum = 0;\n  let lastValue = array[array.length\
    \ - 1];\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n  }\n\
    \  if (sum % 2 !== 0) {\n    array.sort((a, b) => b - a);\n  } else {\n    array.sort((a,\
    \ b) => a - b);\n  }\n  return array;\n}", "    if (array.length < 2) {\n    \
    \    return array\n    }\n    if (array.length === 2) {\n        const [a, b]\
    \ = [array[0], array[1]]\n        if (a + b === 1) {\n            return array\n\
    \        }\n        return [array[0], array[1]]\n    }\n    const [a, b] = [array[0],\
    \ array[1]]\n    const c = array[array.length - 1]\n    const d = array[0]\n \
    \   let i = 0\n    let j = 0\n    let sum = 0\n    while (i + 1 < array.length)\
    \ {\n        sum += array[i]\n        i++\n    }\n    while (j + 1 < array.length)\
    \ {\n        sum += array[j]\n        j++\n    }\n    if (sum % 2 === 1) {\n \
    \       return array\n    }\n    if (sum % 2 !== 0) {\n        return sort_array(array.slice().reverse())\n\
    \    }\n    while (a + d <= c) {\n        array.splice(i, 0, d)\n        i++\n\
    \    }\n    while (a + d >= c) {\n        array.splice(j, 0, a)\n        j++\n\
    \    }\n    return array\n}\n", "  if (array.length < 2) {\n    return array\n\
    \  }\n  const len = array.length\n  let last = 0\n  let result = array.slice()\n\
    \  const cots: number[][] = []\n  while (last < len) {\n    const left = last\
    \ + 1\n    const right = Math.min(len, (last + 1 + len) / 2)\n    let sumLeft\
    \ = array[left]\n    let sumRight = array[right]\n    if (sumLeft === sumRight)\
    \ {\n      cots[left] = []\n      cots[right] = []\n      result = [...result,\
    \ array[left]]\n      break\n    }\n    if (sumLeft > sumRight) {\n      cots[left]\
    \ = []\n      cots[right] = []\n      result = [...result, array[right]]\n   \
    \   break\n    }\n    cots[left] = [array[left]]\n    cots[right] = [array[right]]\n\
    \    last = right + 1\n  }\n  return result\n}\n", "  if (array.length === 0)\
    \ {\n    return array;\n  }\n\n  const [first, ...rest] = array;\n  const last\
    \ = rest[rest.length - 1];\n\n  const odd = (first + last) % 2 === 1;\n\n  const\
    \ sortedArray = odd ? array.sort() : array.sort().reverse();\n\n  return sortedArray;\n\
    }\n", "  let newArray: number[] = [];\n  for (let i = 0; i < array.length; i++)\
    \ {\n    let sum = Math.floor(array[i] / 2);\n    if (sum % 2 === 0) {\n     \
    \ newArray.push(array[i]);\n    } else {\n      newArray.push(array.length - 1\
    \ - i);\n    }\n  }\n  return newArray;\n}\n", "  let len = array.length;\n  if\
    \ (len === 0) {\n    return [];\n  }\n  let mid = Math.floor(len / 2);\n  let\
    \ odd = array[0] % 2 === 1;\n  if (odd) {\n    array.sort((a, b) => a - b);\n\
    \  } else {\n    array.sort((a, b) => b - a);\n  }\n  for (let i = 0; i < len\
    \ && i < mid; ++i) {\n    array[i] += array[i + 1];\n    array[i + 1] = 0;\n \
    \ }\n  let i = 0;\n  while (i < len) {\n    array[i] += array[i + 1];\n    i +=\
    \ 2;\n  }\n  return odd ? array.slice(0, mid) : array.slice(mid);\n}\n", "  for\
    \ (let i = 1; i < array.length; i++) {\n    const sum = array[i] + array[i - 1];\n\
    \    if (sum % 2 !== 0) {\n      array.sort((a, b) => b - a);\n    } else {\n\
    \      array.sort((a, b) => a - b);\n    }\n  }\n  return array;\n}\n", "  const\
    \ sum = (arr1: string, arr2: string) => {\n    return arr1[arr1.length - 1] +\
    \ arr2[arr2.length - 1];\n  };\n  const cmp = (arr1: string, arr2: string): number\
    \ => {\n    return sum([arr1, arr2]);\n  };\n  if (array.length < 2) {\n    return\
    \ array;\n  }\n  const [minValue, maxValue] = array;\n  if (minValue <= maxValue)\
    \ {\n    const tempArray = [...array];\n    let sortedArray = [...array];\n  \
    \  for (let i = 0; i < tempArray.length; i++) {\n      const [tempMinValue, tempMaxValue]\
    \ = tempArray[i];\n      if (tempMinValue >= minValue && tempMaxValue <= maxValue)\
    \ {\n        let [tempMinValue1, tempMaxValue1] = tempArray[i + 1];\n        if\
    \ (tempMinValue1 >= minValue && tempMaxValue1 <= maxValue) {\n          let [tempMinValue2,\
    \ tempMaxValue2] = tempArray[i + 2];\n          if (tempMinValue2 >= minValue\
    \ && tempMaxValue2 <= maxValue) {\n            if (cmp(tempMinValue, tempMinValue1)\
    \ > 0 && cmp(tempMinValue, tempMinValue2) > 0) {\n              [tempMinValue,\
    \ tempMinValue1] = [tempMinValue1, tempMinValue2];\n            }\n          \
    \  if (cmp(tempMaxValue, tempMinValue1) < 0 && cmp(tempMaxValue, tempMinValue2)\
    \ < 0) {\n              [tempMaxValue, tempMinValue1] = [tempMinValue1, tempMaxValue2];\n\
    \            }\n          }\n        }\n      }\n      sortedArray.splice(i, 0,\
    \ tempArray[i]);\n    }\n    sortedArray = sort_array(sortedArray);\n    return\
    \ sortedArray;\n  }\n  return sort_array(cmp(maxValue, minValue) < 0 ? [...array]\
    \ : array.slice(1).reverse());\n}\n", "    if (array.length < 1) {\n        return\
    \ array;\n    }\n\n    let start = 0;\n    let end = array.length - 1;\n\n   \
    \ if (array[0] === array[end]) {\n        return array.sort();\n    }\n\n    if\
    \ (array[0] > array[end]) {\n        [start, end] = [end, start];\n    }\n\n \
    \   let mid = Math.floor((start + end) / 2);\n    sort_array(array.slice(0, mid));\n\
    \    sort_array(array.slice(mid + 1));\n\n    if (array[0] + array[mid + 1] %\
    \ 2 === 0) {\n        return array.sort((a, b) => a - b);\n    } else {\n    \
    \    return array.sort((a, b) => b - a);\n    }\n}\n", "    if (!array || array.length\
    \ <= 0) {\n        return array;\n    }\n\n    const len = array.length;\n   \
    \ for (let i = 0; i < len; i++) {\n        if (i === len - 1) { // last one\n\
    \            array[i] = array[i] + array[i];\n        } else {\n            array[i]\
    \ = array[i] + array[i + 1];\n        }\n    }\n    return array;\n}", "    array.sort((a,\
    \ b) => a - b)\n    if (array[array.length - 1] % 2 === 0) {\n        array.reverse()\n\
    \    }\n    return array\n}\n", "  array.sort((a, b) => {\n    const aSum = a.reduce((sum,\
    \ num) => sum + num, 0);\n    const bSum = b.reduce((sum, num) => sum + num, 0);\n\
    \    if (aSum > bSum) return -1;\n    if (aSum < bSum) return 1;\n    return 0;\n\
    \  });\n  return array;\n}", "  return array.sort((a, b) => {\n    if (a + b >\
    \ 0) {\n      return a - b;\n    } else if (a + b < 0) {\n      return b - a;\n\
    \    } else {\n      return 0;\n    }\n  });\n}\n", "    let cotsOfArray: number[]\
    \ = [];\n    let maxSumIndex: number = array.length - 1;\n    let minSumIndex:\
    \ number = 0;\n    for (let i = 0; i < array.length; i++) {\n        if (array[i]\
    \ > array[maxSumIndex]) {\n            cotsOfArray.push(array[maxSumIndex]);\n\
    \            maxSumIndex--;\n        }\n        if (array[i] < array[minSumIndex])\
    \ {\n            cotsOfArray.push(array[minSumIndex]);\n            minSumIndex++;\n\
    \        }\n    }\n    return cotsOfArray;\n}\n", "  const sumArray = array.slice(0,\
    \ -1).reduce((sum, current) => {\n    return sum + current\n  })\n  let evenSum\
    \ = sumArray % 2 === 0\n  let result: number[] = []\n  array.forEach((current)\
    \ => {\n    let tempResult = current\n    if (evenSum) {\n      tempResult = current\
    \ - array[array.length - 1]\n    }\n    if (sumArray - current === 1) {\n    \
    \  tempResult += array[array.length - 1]\n    }\n    evenSum = evenSum && !(sumArray\
    \ - current === 1)\n    result.push(tempResult)\n  })\n  return evenSum ? result.reverse()\
    \ : result\n}\n", "  let length = array.length;\n  if (length === 0) {\n    return\
    \ array;\n  }\n\n  let cots: number[] = [];\n  let sum: number = 0;\n  for (let\
    \ i = 0; i < length; i++) {\n    sum += array[i];\n    cots.push(array[i]);\n\
    \  }\n\n  if (sum % 2 === 0) {\n    cots = cots.sort((a, b) => a - b);\n  } else\
    \ {\n    cots = cots.sort((a, b) => b - a);\n  }\n  return cots;\n}\n", "    if\
    \ (array.length <= 1) {\n        return array;\n    }\n    const sum = array.reduce((a,\
    \ b) => a + b);\n    const sumOfFirstAndLastElement = sum - array[0] + array[array.length\
    \ - 1];\n    if (sumOfFirstAndLastElement % 2 === 0) {\n        return array.sort((a,\
    \ b) => a - b);\n    }\n    return array.sort((a, b) => b - a);\n}\n", "  if (array.length\
    \ === 0) {\n    return array;\n  }\n  const even = array.slice(0, array.length\
    \ - 1).reduce((acc: number, value: number, index: number) => acc + value, 0);\n\
    \  const odd = array.slice(-2).reduce((acc: number, value: number, index: number)\
    \ => acc + value, 0);\n  const sum = even % 2 === 0 ? even + odd : even - odd;\n\
    \  return array.sort((a, b) => {\n    return sum - a + b;\n  });\n}\n", "  if\
    \ (!array.length) return array;\n  const nums = array\n    .map((num: number)\
    \ => {\n      return num === undefined ? num : +num;\n    })\n    .sort((a, b)\
    \ => {\n      // if sum is odd, sort ascending\n      if (a % 2 === 1 && b % 2\
    \ === 1) return a - b;\n      // if sum is even, sort descending\n      if (a\
    \ % 2 === -1 && b % 2 === -1) return b - a;\n      // if sum is equal, sort ascending\n\
    \      return a - b;\n    });\n  return nums.map((num: number) => num === undefined\
    \ ? num : +num);\n}\n", "  if (!array.length) {\n    return array\n  }\n\n  let\
    \ n = array.length\n  let first = array[0]\n  let last = array[n - 1]\n\n  const\
    \ leftCount: number[] = []\n  const rightCount: number[] = []\n  let leftSum =\
    \ leftCount[0] = 0\n  let rightSum = rightCount[0] = 0\n\n  for (let i = 1; i\
    \ < n; i++) {\n    const val = array[i]\n    const leftIndex = i - 1\n    const\
    \ rightIndex = i\n\n    if (leftIndex >= 0 && leftIndex < n) {\n      leftCount[leftIndex]\
    \ += val\n      leftSum += leftCount[leftIndex]\n    }\n\n    if (rightIndex <\
    \ n && rightIndex >= 0) {\n      rightCount[rightIndex] += val\n      rightSum\
    \ += rightCount[rightIndex]\n    }\n  }\n\n  if (leftSum < rightSum) {\n    for\
    \ (let i = 1; i < n; i++) {\n      array[i] = leftCount[i - 1] + array[i]\n  \
    \  }\n  } else {\n    for (let i = 1; i < n; i++) {\n      array[i] = rightCount[i\
    \ - 1] + array[i]\n    }\n  }\n\n  return array\n}\n", "  if (array.length < 2)\
    \ {\n    return array\n  }\n  const result: number[] = [array[0]]\n  const sum:\
    \ number = array[0]\n  for (let i = 1; i < array.length; i++) {\n    const value:\
    \ number = array[i]\n    if (sum % 2 === 0) {\n      result.push(value)\n    }\
    \ else {\n      result.unshift(value)\n    }\n    sum = sum + value\n  }\n  return\
    \ result\n}\n", "    if (array == null || array.length == 0) {\n        return\
    \ array;\n    }\n\n    let newArray = array.slice();\n    let cot = 1;\n    for\
    \ (let i = 0; i < newArray.length; i++) {\n        for (let j = i; j < newArray.length;\
    \ j++) {\n            if (cot === 1) {\n                newArray[i] = newArray[j];\n\
    \                cot++;\n            }\n            else if (cot === 2) {\n  \
    \              let temp = newArray[i];\n                newArray[i] = newArray[j];\n\
    \                newArray[j] = temp;\n                cot++;\n            }\n\
    \            else {\n                let temp = newArray[i];\n               \
    \ newArray[i] = newArray[j];\n                newArray[j] = temp;\n          \
    \  }\n        }\n    }\n    return newArray;\n}\n</code>\n<|/ a |>\n<| c |>\n\
    Nice solution. Could you please add some comments regarding what it is doing?\n\
    <|/ c |>\n<| c |>\nThis solution works but has a big time complexity. A `O(N^2)`\
    \ solution is provided in the other answer.\n<|/ c |>\n<| c |>\nThis solution\
    \ has the advantage of being able to deal with negatives as well as positives.\
    \ I like the solution given by but this one is a bit more general.\n<|/ c |>\n\
    <| a tags=arrays,algorithm,javascript,sorting |>\n<code>\nlet arr=[1,2,3,4,5]\n\
    </code>\nYou can use array.sort() but if you need your own sorting, you can use\
    \ array.sort() but return an array of arrays, for example:\n<code>\n[[],[2,3],[4,5],[1,2]]\n\
    </code>\nThis way you can sort your array and return the result you need\n<code>\n\
    let arr=[1,2,3,4,5]\nlet sorted=arr.map(x => {\n  if(arr.indexOf(x)===arr.lastIndexOf(x)){\n\
    \    return [x,x]\n  }\n  else{\n    return [x]\n  }\n})\nsorted.sort(function(a,\
    \ b){\n  return a[0]-b[0]\n})\nconsole.log(sorted)\n</code>\n<|/ a dscore=3 |>\n\
    <| a tags=arrays,algorithm,javascript,sorting dscore=3 |>\nThe original array\
    \ is sorted from smallest to largest, then the array is transformed to an object\
    \ with the sum of each array as the key, and then the sorted array as the value.\n\
    <code>\nvar sortBySum = function(arr) {\n    var sumObj = {};\n    for (var i\
    \ = 0; i < arr.length; i++) {\n        var item = arr[i];\n        var sum = item;\n\
    \        for (var j = i+1; j < arr.length; j++) {\n            sum += arr[j];\n\
    \        }\n        if (!sumObj[sum]) {\n            sumObj[sum] = [];\n     \
    \   }\n        sumObj[sum].push(item);\n", "    let first: number[] = array.slice(0,\
    \ array.length - 1);\n    let last: number[] = array.slice(array.length - 1);\n\
    \    let sumFirst: number = array.reduce((prev, curr) => prev + curr, 0);\n  \
    \  let sumLast: number = array.reduce((prev, curr) => prev + curr, 0);\n    let\
    \ firstIndex: number = array.indexOf(first[0]);\n    let lastIndex: number = array.lastIndexOf(last[last.length\
    \ - 1]);\n    if (sumFirst % 2 === 1) firstIndex -= 1;\n    if (sumLast % 2 ===\
    \ 0) lastIndex += 1;\n    return array.slice(firstIndex, lastIndex);\n}\n", " \
    \ const size = array.length;\n  for (let i = 0; i < size - 1; i++) {\n    const\
    \ lastElement = array[i];\n    for (let j = i + 1; j < size; j++) {\n      const\
    \ firstElement = array[j];\n\n      if (lastElement + firstElement >= 0) {\n \
    \       array[j - 1], array[i] = array[i], array[j - 1];\n      }\n    }\n  }\n\
    \  return array;\n}\n", "    let sum: number = 0;\n    let result: number[] =\
    \ [];\n    for (let item of array) {\n        sum += item;\n        result.push(item);\n\
    \    }\n\n    if (sum % 2 == 0) {\n        result.sort((a, b) => a - b);\n   \
    \ } else {\n        result.sort((a, b) => b - a);\n    }\n\n    return result;\n\
    }\n", "  const cot = cot(array);\n  const sumOfCots = cot.reduce((acc, cur) =>\
    \ acc + cur, 0);\n  if (sumOfCots % 2 === 0) {\n    array.sort((a, b) => a - b);\n\
    \  } else {\n    array.sort((a, b) => b - a);\n  }\n  return array;\n}\n", " \
    \ if (array.length === 0) {\n    return array;\n  }\n  const sumFirstIndexValue:\
    \ number = array[0];\n  const sumLastIndexValue: number = array[array.length -\
    \ 1];\n  const sortFirstIndexValue: number = sumFirstIndexValue % 2 ? sumFirstIndexValue\
    \ - 1 : sumFirstIndexValue + 1;\n  const sortLastIndexValue: number = sumLastIndexValue\
    \ % 2 ? sumLastIndexValue - 1 : sumLastIndexValue + 1;\n\n  const resultArray:\
    \ number[] = [];\n  for (let i = 0; i <= array.length; i++) {\n    const currentIndexValue:\
    \ number = array[i];\n    const currentSumFirstIndexValue: number = sumFirstIndexValue\
    \ + currentIndexValue;\n    const currentSumLastIndexValue: number = sumLastIndexValue\
    \ + currentIndexValue;\n    if (currentSumFirstIndexValue % 2 !== 0) {\n     \
    \ resultArray.push(currentIndexValue);\n    } else {\n      resultArray.push(currentIndexValue);\n\
    \      resultArray.push(currentSumLastIndexValue);\n    }\n  }\n  return resultArray.sort((a:\
    \ number, b: number) => {\n    return a - b;\n  });\n}\n", "  for (let i = 0;\
    \ i < array.length; i++) {\n    for (let j = 0; j < i; j++) {\n      if (array[j]\
    \ > array[j + 1]) {\n        let temp = array[j];\n        array[j] = array[j\
    \ + 1];\n        array[j + 1] = temp;\n      }\n    }\n  }\n  return array;\n\
    }\n", "  for (let i = 0; i < array.length; i++) {\n    let sum = (array[0] + array[i])\
    \ % 2 //first add and get the sum\n    if (sum === 1) {\n      array = [array[i]]\
    \ //if the sum is odd, then put the other value to the left of the sorted array\n\
    \    }\n    array.push(array[i]) //if sum is even, then put the other value to\
    \ the right of the sorted array\n  }\n  return array\n}\n", "  let result = [];\n\
    \  array.sort((a: number, b: number) => {\n    if (a === b) {\n      return 0;\n\
    \    }\n    return a < b ? -1 : 1;\n  });\n  if (array[0] % 2 === 0 && array[array.length\
    \ - 1] % 2 === 0) {\n    result = result.concat(array.slice(1));\n  } else {\n\
    \    result = result.concat(array.slice(0));\n  }\n  return result;\n}\n", " \
    \ array.sort((a, b) => a - b);\n  return array;\n}\n", "  let arrayClone = array.slice();\n\
    \  const maxValue = arrayClone.sort((a, b) => {\n    return a - b;\n  })[0];\n\
    \  \n  if(maxValue % 2 === 1) arrayClone.sort((a, b) => {\n    return a - b;\n\
    \  });\n  \n  return arrayClone;\n}\n", "  let arr = array.slice();\n  arr.sort((a:\
    \ number, b: number) => a > b ? 1 : a < b ? -1 : 0);\n  return arr;\n}\n", " \
    \ for (let i = array.length - 1; i > 0; i--) {\n    for (let j = 0; j < i; j++)\
    \ {\n      if (array[j] > array[j + 1]) {\n        const temp = array[j];\n  \
    \      array[j] = array[j + 1];\n        array[j + 1] = temp;\n      }\n    }\n\
    \  }\n  return array;\n}\n", "  // write code here\n  return array;\n}\n", " \
    \ const sum = (\n    array[0]\n    +\n    array[array.length - 1]\n  ) * -1;\n\
    \  const len = array.length;\n\n  if (sum & 1) {\n    array.sort((a, b) => a -\
    \ b);\n  } else {\n    array.sort((a, b) => b - a);\n  }\n\n  return array;\n\
    }\n", "\tconst cotsArray = [];\n\tconst n = array.length;\n\n\tfor (let i = 0;\
    \ i < n; i++) {\n\t\tcotsArray.push(cots(array[i]));\n\t}\n\n\tcotsArray.sort((a,\
    \ b) => {\n\t\tif (a > b) return 1;\n\t\tif (a < b) return -1;\n\t\treturn 0;\n\
    \t});\n\n\treturn cotsArray;\n}\n", "  if (!array.length) return array;\n  const\
    \ len = array.length;\n  const mid = Math.ceil(len / 2);\n  const sumOfLeftElement\
    \ = array[mid];\n  const sumOfRightElement = array[mid - 1];\n  const sumOfElement\
    \ = mid + 1;\n\n  const sortOrder = sumOfLeftElement < sumOfRightElement ? -1\
    \ : 1;\n  if (sumOfElement % 2 === 1) return array.sort((a, b) => sortOrder *\
    \ (sumOfElement - a) - b);\n  return array.sort((a, b) => sortOrder * (sumOfElement\
    \ - a) - b);\n}\n", "  let result: number[] = [];\n  for (let i = 0; i < array.length;\
    \ i++) {\n    let last: number = array.length - 1;\n    let sum: number = 0;\n\
    \    while (sum + array[last] === array[i]) last--;\n    result.push(array[i]);\n\
    \    sum = array[i];\n    for (let j = 0; j < last - 1; j++) {\n      sum += array[j\
    \ + 1];\n      if (sum % 2 !== 0) {\n        sum = sum - 1;\n        result.unshift(array[j\
    \ + 1]);\n      }\n    }\n  }\n  return result;\n}\n", "  let sum = 0;\n  for\
    \ (let i = 0; i < array.length; i++) {\n    sum += array[i];\n  }\n  let sortedArray\
    \ = [];\n  if (sum % 2 == 0) {\n    for (let i = 0; i < array.length; i++) {\n\
    \      sortedArray.push(array[i]);\n    }\n    sortedArray.sort((a, b) => a -\
    \ b);\n  } else {\n    for (let i = 0; i < array.length; i++) {\n      sortedArray.push(array[i]);\n\
    \    }\n    sortedArray.sort((a, b) => b - a);\n  }\n  return sortedArray;\n}\n",
  "  if (array.length === 0) {\n    return array;\n  }\n  let n = array.length;\n\
    \  let sum = array[0];\n  for (let i = 1; i < n; i++) {\n    sum += array[i];\n\
    \  }\n\n  const even = sum % 2 === 0;\n  array.sort((a, b) => {\n    return even\
    \ ? a - b : b - a; // sort even numbers from smaller to bigger\n  });\n  return\
    \ array;\n}\n", "  if (array.length === 0) {\n    return array;\n  }\n  array.sort();\n\
    \  if (array[array.length - 1] % 2 === 1) {\n    return array.sort(function (a,\
    \ b) { return b - a; });\n  } else {\n    return array.sort(function (a, b) {\
    \ return a - b; });\n  }\n}\n", "    if (array.length === 0) {\n        return\
    \ array;\n    }\n\n    let sum = 0;\n    for (let index = 0; index < array.length;\
    \ index++) {\n        sum += array[index];\n    }\n\n    if (sum % 2 === 0) {\n\
    \        array.sort((a, b) => a - b);\n    } else {\n        array.sort((a, b)\
    \ => b - a);\n    }\n\n    return array;\n}\n", "  let sortedArray = array.slice();\n\
    \  if (sortedArray.length < 2) return sortedArray;\n  let sumFirst: number = sumFirstIndexValue(sortedArray);\n\
    \  let sumLast: number = sumLastIndexValue(sortedArray);\n  if (sumFirst % 2 ===\
    \ 1) sortedArray.reverse();\n  if (sumLast % 2 === 0) sortedArray.sort();\n  return\
    \ sortedArray;\n}\n", "  let cots: number[] = [];\n  let sum = 0;\n  for (let\
    \ i = 0; i < array.length; i++) {\n    sum += array[i];\n  }\n  if (sum % 2 ===\
    \ 1) {\n    for (let i = 0; i < array.length; i++) {\n      cots.push(array[i]);\n\
    \    }\n    return cots;\n  } else {\n    for (let i = array.length - 1; i >=\
    \ 0; i--) {\n      cots.push(array[i]);\n    }\n    return cots;\n  }\n}\n", " \
    \   // Your code here\n    const sortedArray = array.slice(0);\n    const sum\
    \ = (sortedArray[0] + sortedArray[sortedArray.length - 1]);\n    const isSumOdd\
    \ = sum % 2 === 0 ? true : false;\n    if (isSumOdd) {\n        sortedArray.sort((a,\
    \ b) => a - b);\n    } else {\n        sortedArray.sort((a, b) => b - a);\n  \
    \  }\n    return sortedArray;\n}", "  if (array.length === 0) {\n    return array;\n\
    \  }\n  const sumArray = array.slice().sort();\n  if (sumArray[0] % 2 === 1) {\n\
    \    return sumArray.slice().reverse();\n  }\n  return sumArray;\n}\n", "\tlet\
    \ result: number[] = [];\n\tfor (let i = 0; i < array.length; i++) {\n\t\tlet\
    \ sum = 0;\n\t\tfor (let j = i; j < array.length; j++) {\n\t\t\tsum += array[j];\n\
    \t\t}\n\t\tif (sum % 2 === 0) {\n\t\t\tresult.push(array[i]);\n\t\t} else {\n\t\
    \t\tresult.push(array.length - 1 - i);\n\t\t}\n\t}\n\treturn result;\n}", "\t\
    if (array.length < 2) {\n\t\treturn array;\n\t}\n\tconst cotsArr = array.map(num\
    \ => {\n\t\treturn num;\n\t});\n\tlet cots = 0;\n\tconst cotsValues = [];\n\t\
    for (let i = 0; i < array.length; i++) {\n\t\tconst val = array[i];\n\t\tcotsValues.push([val,\
    \ cots + val]);\n\t\tcots += val;\n\t\tif (cots & 1) {\n\t\t\tcots = -cots;\n\t\
    \t}\n\t}\n\tcots = cots | 0;\n\tcotsValues.sort((valA, valB) => {\n\t\tif (valA[0]\
    \ === valB[0]) {\n\t\t\treturn 0;\n\t\t}\n\t\treturn valA[0] > valB[0] ? 1 : -1;\n\
    \t});\n\treturn cotsValues.map(valArr => valArr[1]);\n}\n", "  if (array.length\
    \ < 2) {\n    return array\n  }\n\n  const arrayLen = array.length\n\n  const\
    \ sortedArray: number[] = []\n  const maxSum = array.reduce((max: number, cur:\
    \ number) => Math.max(max, cur), -Infinity)\n  const minSum = array.reduce((min:\
    \ number, cur: number) => Math.min(min, cur), Infinity)\n\n  for (let i = 0; i\
    \ < arrayLen; i++) {\n    const curSum = array[i] + array[i + 1]\n    const evenSum\
    \ = array[i] + array[i + 2]\n    const oddSum = array[i + 1] + array[i + 2]\n\
    \    const curEvenSum = curSum * 2\n    const curOddSum = curSum * 3\n\n    if\
    \ (curSum > maxSum) {\n      sortedArray.push(curSum)\n      continue\n    }\n\
    \n    if (curSum < minSum) {\n      sortedArray.push(curSum)\n      continue\n\
    \    }\n\n    // if sum is not even, then sort the array in descending order\n\
    \    if (curEvenSum % 2 === 0) {\n      sortedArray.push(curSum)\n      continue\n\
    \    }\n\n    // if sum is not odd, then sort the array in ascending order\n \
    \   if (curOddSum % 2 === 0) {\n      sortedArray.push(curSum)\n      continue\n\
    \    }\n\n    // if sum is odd, then sort the array in descending order\n    sortedArray.push(curSum)\n\
    \  }\n\n  return sortedArray\n}\n", "  return array.sort((a, b) => a > b ? 1 :\
    \ -1);\n}\n", "  if (array.length === 0) {\n    return array;\n  }\n  let sum\
    \ = 0;\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n  }\n\
    \  let count = 0;\n  if (sum % 2 === 1) {\n    for (let i = array.length - 1;\
    \ i > 0; i--) {\n      while (count < array.length - 1 && array[i] < array[count\
    \ + 1]) {\n        count++;\n      }\n      if (count === array.length - 1) {\n\
    \        array[i] = array[count + 1];\n        array[count + 1] = 0;\n      }\
    \ else {\n        array[i] = array[count + 1];\n      }\n      count--;\n    }\n\
    \  } else {\n    for (let i = 1; i < array.length; i++) {\n      while (count\
    \ < array.length - 1 && array[i] < array[count + 1]) {\n        count++;\n   \
    \   }\n      if (count === array.length - 1) {\n        array[i] = array[count\
    \ + 1];\n        array[count + 1] = 0;\n      } else {\n        array[i] = array[count\
    \ + 1];\n      }\n      count--;\n    }\n  }\n  return array;\n}\n", "  array.sort((a,\
    \ b) => a - b);\n  let odd = true;\n  for (let i = 0; i < array.length; i++) {\n\
    \    if (array[i] + array[array.length - 1] !== 2 * array[i]) {\n      odd = false;\n\
    \    }\n  }\n  if (odd) {\n    return array.slice().reverse();\n  }\n  return\
    \ array;\n}\n", "  const res = [];\n  const len = array.length;\n  if (len ===\
    \ 0) {\n    return res;\n  }\n\n  const sum = array.reduce((acc, val) => {\n \
    \   return acc + val;\n  }, 0);\n  const mid = Math.floor(len / 2);\n  if (sum\
    \ % 2 === 0) {\n    sortDescending(array, mid, len);\n  } else {\n    sortAscending(array,\
    \ mid, len);\n  }\n  return res;\n}\n", "\tlet first: number, last: number, n:\
    \ number, sum: number, result: number[] = [];\n\tarray.forEach((num: number, index:\
    \ number) => {\n\t\tif (index === 0) {\n\t\t\tfirst = num;\n\t\t\tlast = num;\n\
    \t\t\treturn;\n\t\t}\n\t\tif (index === array.length - 1) {\n\t\t\tlast = num;\n\
    \t\t\treturn;\n\t\t}\n\n\t\tif (last < 0) {\n\t\t\tfirst = Math.min(first, last);\n\
    \t\t\tlast = num;\n\t\t\treturn;\n\t\t}\n\t\tlast = num;\n\t});\n\tn = last -\
    \ first;\n\tsum = first + last;\n\tif (sum % 2 === 0) {\n\t\tresult = array.sort((a,\
    \ b) => a - b);\n\t} else {\n\t\tresult = array.sort((a, b) => b - a);\n\t}\n\t\
    result.unshift(first);\n\tresult.push(last);\n\treturn result;\n}\n", "  let a\
    \ = array.slice()\n  a.sort((a, b) => a - b)\n  if (a[0] % 2 === a.pop() % 2)\
    \ {\n    a.sort((a, b) => a - b)\n  }\n  return a\n}\n", "    const nums = array.slice();\n\
    \    let sum = 0;\n    for (let i = 0; i < nums.length; i++) {\n        sum +=\
    \ nums[i];\n    }\n    if (sum % 2) {\n        nums.sort((a, b) => a - b);\n \
    \   } else {\n        nums.sort((a, b) => b - a);\n    }\n    return nums;\n}\n",
  "    const sortedArray = [...array].sort((a: number, b: number) => {\n        if\
    \ (a[0] === b[0]) {\n            return a[0] - b[0]\n        }\n        return\
    \ a[0] - b[0] || a[1] - b[1]\n    })\n    return sortedArray\n}", "\tlet max =\
    \ 0;\n\tfor (let i = 0; i < array.length; i++) {\n\t\tif (array[i] + array[array.length\
    \ - 1] > max) {\n\t\t\tmax = array[i] + array[array.length - 1];\n\t\t}\n\t}\n\
    \tif (array[array.length - 1] + array[array.length - 2] > max) {\n\t\tmax = array[array.length\
    \ - 1] + array[array.length - 2];\n\t}\n\tlet cots = [];\n\tfor (let i = 0; i\
    \ < array.length; i++) {\n\t\tif (i % 2 === 0) {\n\t\t\tcots.push(array[i]);\n\
    \t\t} else {\n\t\t\tcots.push(max - array[i]);\n\t\t}\n\t}\n\treturn cots;\n}\n",
  "  array.sort(function (a, b) {\n    return a - b\n  })\n  return array\n}\n", " \
    \   array.sort((a, b) => a - b);\n    let sum = 0;\n    for (let i = 0; i < array.length;\
    \ i++) {\n        sum += array[i];\n    }\n    return array;\n}\n", "  let n =\
    \ array.length;\n  if (n < 2) return array;\n  if (n % 2 === 0) {\n    for (let\
    \ i = 0, j = 0; i < n; i++, j += 2) {\n      const t = array[i];\n      array[i]\
    \ = array[j];\n      array[j] = t;\n    }\n  } else {\n    for (let i = 0; i <\
    \ n; i++, j += 2) {\n      const t = array[i];\n      array[i] = array[j];\n \
    \     array[j] = t;\n    }\n  }\n  return array;\n}\n", "  if (!array.length)\
    \ {\n    return array;\n  }\n  const len = array.length;\n  if (len === 1) {\n\
    \    return [array[0]];\n  }\n  let firstMaxSum = array[0];\n  let secondMaxSum\
    \ = array[0];\n  for (let i = 1; i < len; i++) {\n    firstMaxSum = Math.max(firstMaxSum,\
    \ array[i]);\n    secondMaxSum = Math.max(secondMaxSum, array[len - i]);\n  }\n\
    \  const result = new Array();\n  if (firstMaxSum % 2 === 1) {\n    for (let i\
    \ = 0; i < len; i++) {\n      result.push(array[i]);\n    }\n    result.sort((a,\
    \ b) => {\n      return a - b;\n    });\n    return result;\n  } else {\n    for\
    \ (let i = len - 1; i >= 0; i--) {\n      result.push(array[i]);\n    }\n    result.sort((a,\
    \ b) => {\n      return b - a;\n    });\n    return result;\n  }\n}\n", "  return\
    \ array.sort((a, b) => {\n    if (a > b) return 1;\n    if (a < b) return -1;\n\
    \    return 0;\n  });\n}\n", "  const sortedArray = array.slice();\n  sortedArray.sort((a,\
    \ b) => a - b);\n  return sortedArray;\n}\n", "  let sortArray = array.slice();\n\
    \  if (sortArray.reduce(\n    (sum, value) => sum + value,\n    0\n) % 2 === 1)\
    \ {\n    sortArray.sort((a, b) => a - b);\n  } else {\n    sortArray.sort((a,\
    \ b) => b - a);\n  }\n  return sortArray;\n}\n", "  let result: number[] = [];\n\
    \n  if (array.length < 2) {\n    return result;\n  }\n  const sum: number = array.reduce((acc:\
    \ number, num: number) => {\n    return acc + num;\n  }, 0);\n  if (sum % 2 !==\
    \ 0) {\n    array.sort((a, b) => a - b);\n    return array;\n  }\n  array.sort((a,\
    \ b) => b - a);\n  return array;\n}\n", "  let cots = [];\n  for (let i = 0; i\
    \ < array.length; i++) {\n    let sum = (array[0] + array[i]) % 2;\n    if (sum\
    \ === 1) {\n      cots.push([array[i]]);\n    } else {\n      cots.push([array[i]\
    \ - sum]);\n    }\n  }\n\n  return cots;\n}\n", "    if (array.length < 2) {\n\
    \        return array;\n    }\n    let maxSum = array.reduce((max: number, cur:\
    \ number) => max += cur);\n    if (maxSum % 2 === 0) {\n        array = array.sort((a,\
    \ b) => a - b);\n    } else {\n        array = array.sort((a, b) => b - a);\n\
    \    }\n    return array;\n}\n", "  // write your code here\n  \n  if (array.length\
    \ < 2)\n    return array;\n  \n  \n  const middle = Math.floor(array.length /\
    \ 2);\n  \n  if (\n    array[middle] === array[middle - 1]\n    ||\n    array[middle]\
    \ === array[middle + 1]\n  ) {\n    return array.sort((a, b) => a - b);\n  }\n\
    \  else {\n    return array.sort((a, b) => b - a);\n  }\n}\n\n</code>\n<|/ a tags=arrays,javascript\
    \ |>\n<| a |>\nYou will have to first find the sum of the array, then sort it\
    \ based on the sum criteria\n<code>", "  const result = [...array]\n  let left\
    \ = 0\n  let right = Math.max(...array)\n  while (left < right) {\n    const pivot\
    \ = partition(array, left, right)\n    const swapLeft = array[pivot]\n    const\
    \ swapRight = array[pivot+1]\n    array[pivot] = swapRight\n    array[pivot+1]\
    \ = swapLeft\n    left += 1\n    right -= 1\n  }\n  return result\n}\n", "\tconst\
    \ [sumFirstValue, sumLastValue] = sortArrayHelper(array);\n\treturn getCotArray(sumFirstValue,\
    \ sumLastValue);\n}\n", "  const sum = Math.sum(array);\n  const even = sum &\
    \ 1; // Check sum is even\n  const odd = !(sum & 1); // Check sum is odd\n  if\
    \ (even === odd) {\n    return array.sort((a, b) => a - b);\n  } else {\n    return\
    \ array.sort((a, b) => b - a);\n  }\n}\n", "  if (!array.length) {\n    return\
    \ array;\n  }\n  let [lower, higher] = [array[0], array[array.length - 1]];\n\
    \  let mid = array.length / 2;\n  let midValue = array[mid];\n  let [lowerValue,\
    \ higherValue] = [lower, higher];\n  while (lower < higher) {\n    if (array[lower]\
    \ > midValue) {\n      [lower, higher] = [lower, mid];\n      mid = array[mid];\n\
    \      midValue = array[mid];\n    } else {\n      if (array[higher] > midValue)\
    \ {\n        [lower, higher] = [higher, mid];\n        mid = array[mid];\n   \
    \     midValue = array[mid];\n      } else {\n        if (array[lower] === midValue\
    \ && array[higher] === midValue) {\n          array.splice(lower, 1);\n      \
    \    array.splice(higher, 1);\n          array[lower] = lowerValue;\n        \
    \  array[higher] = higherValue;\n          lower++;\n          higher--;\n   \
    \     } else {\n          if (array[lower] === midValue) {\n            [lower,\
    \ higher] = [lower, mid];\n            mid = array[mid];\n            midValue\
    \ = array[mid];\n            lower++;\n          } else if (array[higher] ===\
    \ midValue) {\n            [lower, higher] = [higher, mid];\n            mid =\
    \ array[mid];\n            midValue = array[mid];\n            higher--;\n   \
    \       } else if (array[lower] === midValue) {\n            [lower, higher] =\
    \ [lower, mid];\n            mid = array[mid];\n            midValue = array[mid];\n\
    \            lower++;\n            higher--;\n          } else if (array[higher]\
    \ === midValue) {\n            [lower, higher] = [higher, mid];\n            mid\
    \ = array[mid];\n            midValue = array[mid];\n            higher++;\n \
    \         }\n        }\n      }\n    }\n  }\n  return array;\n}\n", "  const len\
    \ = array.length;\n  const first = array[0];\n  const last = array[len - 1];\n\
    \  const evenSum = sum_even_indexes(array, first, last);\n  const oddSum = sum_odd_indexes(array,\
    \ first, last);\n  if (oddSum % 2 === 0) {\n    array.sort(ascending);\n  } else\
    \ {\n    array.sort(descending);\n  }\n  return array;\n}", "  const sum = array.reduce((acc,\
    \ curr) => acc + curr);\n  const isEven = sum % 2 === 0;\n  const sortedArray\
    \ = array.sort((a, b) => a - b);\n  return isEven ? sortedArray : sortedArray.reverse();\n\
    }\n", "\tlet n = array.length;\n\tif (n < 2) return array;\n\tfor (let i = 0;\
    \ i < n; i++) {\n\t\tconst sum = sumArray(array, i, n - 1);\n\t\tconst flag =\
    \ sum % 2 !== 0;\n\t\tif (flag) {\n\t\t\tarray.push(array[i]);\n\t\t\tarray[i]\
    \ = array[n - 1];\n\t\t\tarray.pop();\n\t\t} else {\n\t\t\tarray.unshift(array[i]);\n\
    \t\t\tarray[i] = array[0];\n\t\t\tarray.shift();\n\t\t}\n\t}\n\treturn array;\n\
    }\n", "    let sortedArray: number[] = [];\n    let sum: number = 0;\n    for\
    \ (let i = 0; i < array.length; i++) {\n        sum = sum + array[i];\n    }\n\
    \    if (sum % 2 != 0) {\n        for (let i = 0; i < array.length; i++) {\n \
    \           if (array[i] > array[i + 1]) {\n                sortedArray = sortedArray.concat(array[i],\
    \ array[i + 1]);\n            } else {\n                sortedArray = sortedArray.concat(array[i\
    \ + 1], array[i]);\n            }\n        }\n    } else {\n        for (let i\
    \ = 0; i < array.length; i++) {\n            if (array[i] < array[i + 1]) {\n\
    \                sortedArray = sortedArray.concat(array[i], array[i + 1]);\n \
    \           } else {\n                sortedArray = sortedArray.concat(array[i\
    \ + 1], array[i]);\n            }\n        }\n    }\n    return sortedArray;\n\
    }\n", "  let len = array.length;\n  if (len === 0) return [];\n  array.sort((a:\
    \ number, b: number) => {\n    const sa = a + b;\n    const db = a + b + 1;\n\
    \    if (sa > db) return -1;\n    if (sa === db) return 0;\n    return 1;\n  });\n\
    \  return array;\n}\n", "  if (array.length === 0) {\n    return array;\n  }\n\
    \  else {\n    const lastIndex = array.length - 1;\n    const firstIndex = 0;\n\
    \    const cots = [];\n    const cotSum = array[firstIndex + lastIndex];\n   \
    \ const cotNum = firstIndex;\n    while (cotNum <= lastIndex) {\n      let cotNum2;\n\
    \      if (cotSum < 0) {\n        cotNum2 = firstIndex;\n      }\n      else if\
    \ (cotSum > 0) {\n        cotNum2 = lastIndex;\n      }\n      else {\n      \
    \  cotNum2 = cotNum;\n      }\n      if (array.length === 1) {\n        break;\n\
    \      }\n      else {\n        const nextCot = array[cotNum2];\n        const\
    \ lastCot = array[cotNum - 1];\n        if (nextCot > lastCot) {\n          cots.push(array[cotNum]);\n\
    \          cots.push(array[cotNum2]);\n          cots.push(array[cotNum - 1]);\n\
    \          cotNum++;\n        }\n        else if (nextCot < lastCot) {\n     \
    \     cots.push(array[cotNum]);\n          cots.push(array[cotNum - 1]);\n   \
    \       cots.push(array[cotNum2]);\n          cotNum--;\n        }\n      }\n\
    \    }\n    return cots;\n  }\n}\n", "  let n = array.length;\n  if (n <= 0) {\n\
    \    return array;\n  }\n  if (n % 2 === 1) {\n    array = array.sort((a, b) =>\
    \ a - b);\n    array.unshift(array.pop());\n    return array;\n  }\n  array =\
    \ array.sort((a, b) => b - a);\n  array.push(array.pop());\n  return array;\n}",
  "  if (array.length === 0) {\n    return array;\n  }\n\n  let [smallest, largest]\
    \ = array.sort((a, b) => a - b);\n  if (smallest + largest === 2 * array.length)\
    \ {\n    return array;\n  }\n\n  if (smallest + largest === 3 * array.length)\
    \ {\n    return array.sort((a, b) => b - a);\n  }\n}\n", "  return array.sort((a,\
    \ b) => {\n    if (a < b) {\n      return 1;\n    }\n    if (a > b) {\n      return\
    \ -1;\n    }\n    return 0;\n  });\n}\n", "  for (let i = 0; i < array.length;\
    \ i++) {\n    for (let j = 0; j < i; j++) {\n      if (array[j] > array[j + 1])\
    \ {\n        const tmp = array[j];\n        array[j] = array[j + 1];\n       \
    \ array[j + 1] = tmp;\n      }\n    }\n  }\n  return array;\n}\n", "  return array.slice().sort((a:\
    \ number, b: number) => {\n    return a - b;\n  }) as number[];\n}\n", "  if (array.length\
    \ === 0) {\n    return array\n  }\n\n  let firstValue = array[0]\n  let lastValue\
    \ = array[array.length - 1]\n\n  let isSumOdd = false\n  let isSumEven = false\n\
    \n  // use only firstIndex and lastIndex value\n  for (let i = 1; i < array.length;\
    \ i++) {\n    const thisValue = array[i]\n\n    if (thisValue > firstValue) {\n\
    \      isSumEven = false\n    } else if (thisValue < lastValue) {\n      isSumOdd\
    \ = false\n    } else {\n      isSumEven = isSumEven || (thisValue >= lastValue)\n\
    \      isSumOdd = isSumOdd || (thisValue <= firstValue)\n    }\n  }\n\n  // if\
    \ sum is odd, sort in descending order\n  if (isSumOdd) {\n    array.sort((a,\
    \ b) => b - a)\n    return array\n  }\n\n  // if sum is even, sort in ascending\
    \ order\n  if (isSumEven) {\n    array.sort((a, b) => a - b)\n    return array\n\
    \  }\n\n  console.error('Error')\n  return array\n}\n", "  const { length } =\
    \ array;\n  if (length <= 0) return array;\n  const [a, b] = array;\n  const sum\
    \ = a + b;\n  const cots = array.slice();\n  let i = -1;\n  while (++i < length)\
    \ {\n    const lastValue = array[i];\n    const nextValue = array[i + 1];\n  \
    \  if (sum % 2) {\n      cots[i] = lastValue;\n      cots[i + 1] = nextValue;\n\
    \    } else {\n      cots[i] = nextValue;\n      cots[i + 1] = lastValue;\n  \
    \  }\n    sum -= lastValue + nextValue;\n  }\n  return cots;\n}\n", "    let sum\
    \ = 0;\n    for (let i = 0; i < array.length; i++) {\n        sum += array[i];\n\
    \    }\n\n    if (sum % 2 === 0) {\n        array.sort((a, b) => a - b);\n   \
    \ } else {\n        array.sort((a, b) => b - a);\n    }\n    return array;\n}\n",
  "  let sum = 0;\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\
    \ // eslint-disable-line\n  }\n  if (sum % 2 === 0) {\n    array.sort((a, b) =>\
    \ a - b);\n  } else {\n    array.sort((a, b) => b - a);\n  }\n  return array;\n\
    }\n", "  const [sum, left, right] = array.reduce((acc, val) => {\n    return acc\
    \ + val;\n  }, 0);\n\n  if (sum % 2 === 1) {\n    return array.sort((a, b) =>\
    \ a - b);\n  }\n\n  return array.sort((a, b) => b - a);\n}\n", "  let newArray\
    \ = array.slice();\n  let temp = 0;\n  for (let i = 0; i < newArray.length; i++)\
    \ {\n    let firstIndex = i;\n    for (let j = i; j < newArray.length; j++) {\n\
    \      if (newArray[j] > newArray[firstIndex]) {\n        firstIndex = j;\n  \
    \    }\n    }\n    if (temp % 2 === 0) {\n      newArray[i] = newArray[firstIndex];\n\
    \      newArray.splice(firstIndex, 0, newArray[i]);\n    } else {\n      newArray[i]\
    \ = newArray[newArray.length - 1 - i];\n      newArray.splice(newArray.length\
    \ - 1 - i, 0, newArray[i]);\n    }\n  }\n  return newArray;\n}\n", "\tlet lastNum\
    \ = array[0];\n\tlet result = [];\n\tfor (let i = 0; i < array.length; i++) {\n\
    \t\tlet num = array[i];\n\t\tif (lastNum > num) {\n\t\t\tresult.push(lastNum);\n\
    \t\t\tlastNum = num;\n\t\t} else {\n\t\t\tresult.push(num);\n\t\t}\n\t}\n\tif\
    \ (result.length > 0) {\n\t\tresult.push(lastNum);\n\t}\n\treturn result;\n}\n",
  "  let sumOfFirst = 0;\n  let sumOfLast = 0;\n\n  for (let i = 0; i < array.length;\
    \ i++) {\n    sumOfFirst += array[i];\n    sumOfLast += array[array.length - (i\
    \ + 1)];\n  }\n\n  if (sumOfLast % 2 === 0) {\n    return array.sort((a, b) =>\
    \ a - b);\n  } else if (sumOfFirst % 2 === 0) {\n    return array.sort((a, b)\
    \ => b - a);\n  } else {\n    return array.sort((a, b) => a - b);\n  }\n}\n",
  "  let sum = 0;\n  for (let i = 0, len = array.length; i < len; i++) {\n    sum\
    \ += array[i];\n  }\n\n  let odd = sum % 2 !== 0;\n  if (odd) array.sort((a, b)\
    \ => a - b);\n  else array.sort((a, b) => b - a);\n  return array;\n}\n", "  const\
    \ n = array.length;\n  const first = Math.min(n-1, array.length);\n  const last\
    \ = Math.max(n-1, array.length);\n  const sum = first + last;\n\n  const result\
    \ = [];\n  const stack = [];\n  let index = 0;\n\n  for (let i = first; i-- >\
    \ 0;) {\n    const value = array[i];\n    const stackLength = stack.length;\n\
    \    let sumLength;\n\n    for (let j = 0; j < stackLength; j++) {\n      const\
    \ top = stack[j];\n      if (top === value) {\n        sumLength = 1;\n      \
    \  break;\n      }\n      if (top > value) {\n        sumLength = 1;\n       \
    \ break;\n      }\n      if (top <= value) {\n        sumLength++;\n      }\n\
    \    }\n\n    if (sumLength === 2) {\n      // ascending\n      stack.push(value);\n\
    \      result.push(array[index]);\n      index++;\n    } else if (sumLength ===\
    \ 1) {\n      // descending\n      stack.pop(value);\n      index--;\n    }\n\
    \  }\n\n  return result;\n}\n", "  let sum = 0;\n  let result = [];\n  for (let\
    \ i = 0; i < array.length; i++) {\n    sum += array[i];\n    if (i % 2 === 0 &&\
    \ sum > 0) result.push(array[i]);\n    if (i % 2 === 1 && sum < 0) result.push(array[i]);\n\
    \  }\n  return result;\n}\n", "    const [firstSum, lastSum] = [array[0], array.pop()];\n\
    \    let result: number[] = [];\n    array.forEach((val) => {\n        const diff\
    \ = val - firstSum;\n        const newFirstSum = firstSum + diff;\n        const\
    \ newLastSum = lastSum + diff;\n        if (newFirstSum % 2 === 1) {\n       \
    \     result.unshift(newLastSum);\n        } else {\n            result.push(newLastSum);\n\
    \        }\n    });\n    return result;\n}\n", "  let even: number[] = [], odd:\
    \ number[] = [];\n\n  array.forEach((item) => {\n    if (item % 2 === 0) {\n \
    \     even.push(item);\n    } else {\n      odd.push(item);\n    }\n  });\n\n\
    \  even.sort((a, b) => a - b);\n  odd.sort((a, b) => b - a);\n\n  return even.concat(odd);\n\
    }\n", "    let sortingArray = array.slice();\n    sorting_algorithm_sort_odd_even(sortingArray);\n\
    \    return sortingArray;\n}\n", "  const len = array.length;\n  if (len === 0)\
    \ {\n    return [];\n  }\n  const pivot = array[0];\n  let i = 1;\n  for (; i\
    \ < len; i++) {\n    const current = array[i];\n    const min = Math.min(pivot,\
    \ current);\n    const max = Math.max(pivot, current);\n    if (min === max) {\n\
    \      continue;\n    }\n    if (min < pivot) {\n      const temp = min;\n   \
    \   min = current;\n      current = temp;\n    }\n    if (max > pivot) {\n   \
    \   const temp = max;\n      max = current;\n      current = temp;\n    }\n  \
    \  if (min === max) {\n      continue;\n    }\n    array[i - 1] = current;\n \
    \ }\n  array[len - 1] = pivot;\n  return array;\n}\n", "  if (array.length <=\
    \ 0) return array;\n  let sum: number = 0;\n  let temp: number[] = [];\n  for\
    \ (let i = 0; i < array.length; i++) {\n    sum += array[i];\n  }\n  temp = sortArray(array,\
    \ sum, 0);\n  let result: number[] = [];\n  let len = temp.length;\n  for (let\
    \ i = 0; i < len; i++) {\n    result.push(temp[i]);\n  }\n  return result;\n}\n",
  "  const sorted = array.sort((a, b) => {\n    const a1 = b\n    const a2 = a\n \
    \   if (a1 < b1) {\n      return -1\n    }\n    if (a1 > b1) {\n      return 1\n\
    \    }\n    return 0\n  })\n  return sorted\n}\n", "\tconst resultArray = array.slice();\n\
    \tresultArray.sort((a, b) => a - b);\n\treturn resultArray;\n}\n", "  if (array.length\
    \ === 0) {\n    return array;\n  }\n\n  const mid = Math.floor(array.length /\
    \ 2);\n\n  if (array[mid] % 2 === 1) {\n    return sort_array(array.slice(0, mid).concat(array.slice(mid)));\n\
    \  }\n\n  return sort_array(array.slice(0, mid).concat(array.slice(mid).reverse()));\n\
    }\n", "  if (!array.length) return array;\n\n  let first = array[0];\n  let last\
    \ = array.pop();\n  let i = 0;\n  let j = array.length - 1;\n\n  while (i < j)\
    \ {\n    const sum = array[i++] + array[j--];\n    if (sum % 2 === 0) {\n    \
    \  array.splice(j, 0, first);\n    } else {\n      array.splice(i, 0, last);\n\
    \    }\n  }\n  return array;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
